package fabric

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 2.2.21.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// InfraRoleInstanceState enumerates the values for infra role instance state.
type InfraRoleInstanceState string

const (
	// Running specifies the running state for infra role instance state.
	Running InfraRoleInstanceState = "Running"
	// Starting specifies the starting state for infra role instance state.
	Starting InfraRoleInstanceState = "Starting"
	// Stopped specifies the stopped state for infra role instance state.
	Stopped InfraRoleInstanceState = "Stopped"
	// Stopping specifies the stopping state for infra role instance state.
	Stopping InfraRoleInstanceState = "Stopping"
)

// PowerState enumerates the values for power state.
type PowerState string

const (
	// PowerStateRunning specifies the power state running state for power state.
	PowerStateRunning PowerState = "Running"
	// PowerStateStarting specifies the power state starting state for power state.
	PowerStateStarting PowerState = "Starting"
	// PowerStateStopped specifies the power state stopped state for power state.
	PowerStateStopped PowerState = "Stopped"
	// PowerStateStopping specifies the power state stopping state for power state.
	PowerStateStopping PowerState = "Stopping"
)

// ScaleUnitNodeStatus enumerates the values for scale unit node status.
type ScaleUnitNodeStatus string

const (
	// ScaleUnitNodeStatusMaintenance specifies the scale unit node status maintenance state for scale unit node status.
	ScaleUnitNodeStatusMaintenance ScaleUnitNodeStatus = "Maintenance"
	// ScaleUnitNodeStatusRunning specifies the scale unit node status running state for scale unit node status.
	ScaleUnitNodeStatusRunning ScaleUnitNodeStatus = "Running"
	// ScaleUnitNodeStatusStopped specifies the scale unit node status stopped state for scale unit node status.
	ScaleUnitNodeStatusStopped ScaleUnitNodeStatus = "Stopped"
)

// ScaleUnitState enumerates the values for scale unit state.
type ScaleUnitState string

const (
	// ScaleUnitStateCreating specifies the scale unit state creating state for scale unit state.
	ScaleUnitStateCreating ScaleUnitState = "Creating"
	// ScaleUnitStateDeleting specifies the scale unit state deleting state for scale unit state.
	ScaleUnitStateDeleting ScaleUnitState = "Deleting"
	// ScaleUnitStateRunning specifies the scale unit state running state for scale unit state.
	ScaleUnitStateRunning ScaleUnitState = "Running"
	// ScaleUnitStateUnknown specifies the scale unit state unknown state for scale unit state.
	ScaleUnitStateUnknown ScaleUnitState = "Unknown"
	// ScaleUnitStateUpgrading specifies the scale unit state upgrading state for scale unit state.
	ScaleUnitStateUpgrading ScaleUnitState = "Upgrading"
)

// ScaleUnitType enumerates the values for scale unit type.
type ScaleUnitType string

const (
	// ComputeOnly specifies the compute only state for scale unit type.
	ComputeOnly ScaleUnitType = "ComputeOnly"
	// HyperConverged specifies the hyper converged state for scale unit type.
	HyperConverged ScaleUnitType = "HyperConverged"
	// StorageOnly specifies the storage only state for scale unit type.
	StorageOnly ScaleUnitType = "StorageOnly"
	// Unknown specifies the unknown state for scale unit type.
	Unknown ScaleUnitType = "Unknown"
)

// EdgeGateway is this resource represents a gateway, which provides the configuration needed to provide gateway
// services to virtual networks.
type EdgeGateway struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*EdgeGatewayModel `json:"properties,omitempty"`
}

// EdgeGatewayList is pageable list of edge gateways.
type EdgeGatewayList struct {
	autorest.Response `json:"-"`
	Value             *[]EdgeGateway `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// EdgeGatewayListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client EdgeGatewayList) EdgeGatewayListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// EdgeGatewayModel is model which holds information related to edge gateways.
type EdgeGatewayModel struct {
	State               *string `json:"state,omitempty"`
	TotalCapacity       *int64  `json:"totalCapacity,omitempty"`
	AvailableCapacity   *int64  `json:"availableCapacity,omitempty"`
	NumberOfConnections *int32  `json:"numberOfConnections,omitempty"`
}

// EdgeGatewayPool is this resource represents an edge gateway pool, which contains an array of gateways.
type EdgeGatewayPool struct {
	autorest.Response     `json:"-"`
	ID                    *string             `json:"id,omitempty"`
	Name                  *string             `json:"name,omitempty"`
	Type                  *string             `json:"type,omitempty"`
	Location              *string             `json:"location,omitempty"`
	Tags                  *map[string]*string `json:"tags,omitempty"`
	*EdgeGatewayPoolModel `json:"properties,omitempty"`
}

// EdgeGatewayPoolList is a pageable list of edge gateway pools.
type EdgeGatewayPoolList struct {
	autorest.Response `json:"-"`
	Value             *[]EdgeGatewayPool `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// EdgeGatewayPoolListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client EdgeGatewayPoolList) EdgeGatewayPoolListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// EdgeGatewayPoolModel is a model holding all properties of an edge gateway pool.
type EdgeGatewayPoolModel struct {
	GatewayType                      *string   `json:"gatewayType,omitempty"`
	NumberOfGateways                 *int32    `json:"numberOfGateways,omitempty"`
	RedundantGatewayCount            *int64    `json:"redundantGatewayCount,omitempty"`
	GatewayCapacityKiloBitsPerSecond *int32    `json:"gatewayCapacityKiloBitsPerSecond,omitempty"`
	PublicIPAddress                  *string   `json:"publicIpAddress,omitempty"`
	GreVipSubnet                     *string   `json:"greVipSubnet,omitempty"`
	EdgeGateways                     *[]string `json:"edgeGateways,omitempty"`
}

// FileShare is representation of a file share resource.
type FileShare struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*FileShareModel   `json:"properties,omitempty"`
}

// FileShareList is pageable list of fabric file share locations.
type FileShareList struct {
	autorest.Response `json:"-"`
	Value             *[]FileShare `json:"value,omitempty"`
}

// FileShareModel is properties of a file share resource.
type FileShareModel struct {
	AssociatedVolume *string `json:"associatedVolume,omitempty"`
	UncPath          *string `json:"uncPath,omitempty"`
}

// InfraRole is get an infra role description.
type InfraRole struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*InfraRoleModel   `json:"properties,omitempty"`
}

// InfraRoleInstance is the virtual machine resource is used to represent an infrastructure virtual machine in the
// Azure Stack environment. The fabric resource provider only surfaces infrastructure virtual machines. These machines
// are never created directly by the admin, but rather as a side effect of expanding admin services.
type InfraRoleInstance struct {
	autorest.Response       `json:"-"`
	ID                      *string             `json:"id,omitempty"`
	Name                    *string             `json:"name,omitempty"`
	Type                    *string             `json:"type,omitempty"`
	Location                *string             `json:"location,omitempty"`
	Tags                    *map[string]*string `json:"tags,omitempty"`
	*InfraRoleInstanceModel `json:"properties,omitempty"`
}

// InfraRoleInstanceList is pageable list of infra role instances.
type InfraRoleInstanceList struct {
	autorest.Response `json:"-"`
	Value             *[]InfraRoleInstance `json:"value,omitempty"`
	NextLink          *string              `json:"nextLink,omitempty"`
}

// InfraRoleInstanceListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client InfraRoleInstanceList) InfraRoleInstanceListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// InfraRoleInstanceModel is all properties of an infra role instance.
type InfraRoleInstanceModel struct {
	ScaleUnit     *string                `json:"scaleUnit,omitempty"`
	ScaleUnitNode *string                `json:"scaleUnitNode,omitempty"`
	Size          *InfraRoleInstanceSize `json:"size,omitempty"`
	State         InfraRoleInstanceState `json:"state,omitempty"`
}

// InfraRoleInstanceSize is the capacity information for a virtual machine.
type InfraRoleInstanceSize struct {
	MemoryGb *float64 `json:"memoryGb,omitempty"`
	Cores    *int32   `json:"cores,omitempty"`
}

// InfraRoleList is pageable list of infra roles.
type InfraRoleList struct {
	autorest.Response `json:"-"`
	Value             *[]InfraRole `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// InfraRoleListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client InfraRoleList) InfraRoleListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// InfraRoleModel is infra role properties.
type InfraRoleModel struct {
	Instances *[]string `json:"instances,omitempty"`
}

// IPPool is this resource defines the range of IP addresses from which addresses are  allocated for nodes within a
// subnet.
type IPPool struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*IPPoolModel      `json:"properties,omitempty"`
}

// IPPoolList is pageable list of ip pools.
type IPPoolList struct {
	autorest.Response `json:"-"`
	Value             *[]IPPool `json:"value,omitempty"`
	NextLink          *string   `json:"nextLink,omitempty"`
}

// IPPoolListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client IPPoolList) IPPoolListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// IPPoolModel is properties of an IpPool.
type IPPoolModel struct {
	StartIPAddress                  *string `json:"startIpAddress,omitempty"`
	EndIPAddress                    *string `json:"endIpAddress,omitempty"`
	AddressPrefix                   *string `json:"addressPrefix,omitempty"`
	NumberOfIPAddresses             *int64  `json:"numberOfIpAddresses,omitempty"`
	NumberOfAllocatedIPAddresses    *int64  `json:"numberOfAllocatedIpAddresses,omitempty"`
	NumberOfIPAddressesInTransition *int64  `json:"numberOfIpAddressesInTransition,omitempty"`
}

// Location is place holder for fabric location.
type Location struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
}

// LocationList is pageable list of fabric locations.
type LocationList struct {
	autorest.Response `json:"-"`
	Value             *[]Location `json:"value,omitempty"`
	NextLink          *string     `json:"nextLink,omitempty"`
}

// LocationListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client LocationList) LocationListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LogicalNetwork is this resource represents a logical partition of physical network that is dedicated for a
// particular purpose.  A logical network comprises of a collection of logical subnets.
type LogicalNetwork struct {
	autorest.Response    `json:"-"`
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*LogicalNetworkModel `json:"properties,omitempty"`
}

// LogicalNetworkList is a pageable list of logical networks.
type LogicalNetworkList struct {
	autorest.Response `json:"-"`
	Value             *[]LogicalNetwork `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// LogicalNetworkListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client LogicalNetworkList) LogicalNetworkListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LogicalNetworkModel is properties of a logical network.
type LogicalNetworkModel struct {
	Metadata                     *map[string]*string `json:"metadata,omitempty"`
	NetworkVirtualizationEnabled *bool               `json:"networkVirtualizationEnabled,omitempty"`
	Subnets                      *[]string           `json:"subnets,omitempty"`
}

// LogicalSubnet is this resource represents a Logical Subnet.  A Logical Subnet comprises of subnet/vlan pair.
type LogicalSubnet struct {
	autorest.Response   `json:"-"`
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*LogicalSubnetModel `json:"properties,omitempty"`
}

// LogicalSubnetList is pageable list of logical subnets.
type LogicalSubnetList struct {
	autorest.Response `json:"-"`
	Value             *[]LogicalSubnet `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// LogicalSubnetListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client LogicalSubnetList) LogicalSubnetListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LogicalSubnetModel is properties of a logical subnet.
type LogicalSubnetModel struct {
	IPPools  *[]string           `json:"ipPools,omitempty"`
	IsPublic *bool               `json:"isPublic,omitempty"`
	Metadata *map[string]*string `json:"metadata,omitempty"`
}

// MacAddressPool is this resource represents a MAC address pool.  The default MAC address pools are used if you set
// the MAC address type for a virtual machine to 'Static'.  If the virtual machine setting is “Dynamic”, the hypervisor
// assigns the MAC address.
type MacAddressPool struct {
	autorest.Response    `json:"-"`
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*MacAddressPoolModel `json:"properties,omitempty"`
}

// MacAddressPoolList is a pageable list of MAC address pools.
type MacAddressPoolList struct {
	autorest.Response `json:"-"`
	Value             *[]MacAddressPool `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// MacAddressPoolListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client MacAddressPoolList) MacAddressPoolListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// MacAddressPoolModel is properties of a MAC address pool.
type MacAddressPoolModel struct {
	Metadata                      *map[string]*string `json:"metadata,omitempty"`
	StartMacAddress               *string             `json:"startMacAddress,omitempty"`
	EndMacAddress                 *string             `json:"endMacAddress,omitempty"`
	NumberOfAllocatedMacAddresses *int64              `json:"numberOfAllocatedMacAddresses,omitempty"`
	NumberOfAvailableMacAddresses *int64              `json:"numberOfAvailableMacAddresses,omitempty"`
}

// OperationStatus is status of the compute operation.
type OperationStatus struct {
	autorest.Response       `json:"-"`
	*ProvisioningStateModel `json:"properties,omitempty"`
}

// OperationStatusLocation is URI where you can poll for status of operation.
type OperationStatusLocation struct {
	Location *string `json:"location,omitempty"`
}

// ProvisioningStateModel is the state of the operation.
type ProvisioningStateModel struct {
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// Resource is base Resource Object
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ScaleUnit is represents a cluster - generally this will be a collection of Hosts backed by Failover Cluster Manager.
type ScaleUnit struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*ScaleUnitModel   `json:"properties,omitempty"`
}

// ScaleUnitCapacity is the capacity information for a physical machine.
type ScaleUnitCapacity struct {
	MemoryGB *float64 `json:"memoryGB,omitempty"`
	Cores    *int64   `json:"cores,omitempty"`
}

// ScaleUnitList is a pageable list of scale units.
type ScaleUnitList struct {
	autorest.Response `json:"-"`
	Value             *[]ScaleUnit `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// ScaleUnitListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ScaleUnitList) ScaleUnitListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ScaleUnitModel is properties of a scale unit.
type ScaleUnitModel struct {
	ScaleUnitType      ScaleUnitType      `json:"scaleUnitType,omitempty"`
	LogicalFaultDomain *int32             `json:"logicalFaultDomain,omitempty"`
	Nodes              *[]string          `json:"nodes,omitempty"`
	State              ScaleUnitState     `json:"state,omitempty"`
	Model              *string            `json:"model,omitempty"`
	TotalCapacity      *ScaleUnitCapacity `json:"totalCapacity,omitempty"`
}

// ScaleUnitNode is the physical server in a cluster.
type ScaleUnitNode struct {
	autorest.Response   `json:"-"`
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*ScaleUnitNodeModel `json:"properties,omitempty"`
}

// ScaleUnitNodeList is a pageable list of scale unit nodes.
type ScaleUnitNodeList struct {
	autorest.Response `json:"-"`
	Value             *[]ScaleUnitNode `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// ScaleUnitNodeListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ScaleUnitNodeList) ScaleUnitNodeListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ScaleUnitNodeModel is holds all properties related to a scale unit node.
type ScaleUnitNodeModel struct {
	ScaleUnitNodeStatus ScaleUnitNodeStatus `json:"scaleUnitNodeStatus,omitempty"`
	PowerState          PowerState          `json:"powerState,omitempty"`
	BmcAddress          *string             `json:"bmcAddress,omitempty"`
	ScaleUnitName       *string             `json:"scaleUnitName,omitempty"`
	ScaleUnitURI        *string             `json:"scaleUnitUri,omitempty"`
	CanPowerOff         *bool               `json:"canPowerOff,omitempty"`
	Vendor              *string             `json:"vendor,omitempty"`
	Model               *string             `json:"model,omitempty"`
	SerialNumber        *string             `json:"serialNumber,omitempty"`
	BiosVersion         *string             `json:"biosVersion,omitempty"`
	MacAddress          *string             `json:"macAddress,omitempty"`
	Capacity            *ScaleUnitCapacity  `json:"capacity,omitempty"`
}

// SlbMuxInstance is this resource represents an SLB MUX (software load balancing multiplexer, which distributes the
// tenant and tenant customer network traffic).
type SlbMuxInstance struct {
	autorest.Response    `json:"-"`
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*SlbMuxInstanceModel `json:"properties,omitempty"`
}

// SlbMuxInstanceList is a pageable list of SLB Mux instances.
type SlbMuxInstanceList struct {
	autorest.Response `json:"-"`
	Value             *[]SlbMuxInstance `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// SlbMuxInstanceListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SlbMuxInstanceList) SlbMuxInstanceListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// SlbMuxInstanceModel is properties of a SLB MUX
type SlbMuxInstanceModel struct {
	ConfigurationState *string   `json:"configurationState,omitempty"`
	VirtualServer      *string   `json:"virtualServer,omitempty"`
	BgpPeers           *[]string `json:"bgpPeers,omitempty"`
}

// StoragePool is representation of a storage pool resource.
type StoragePool struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*StoragePoolModel `json:"properties,omitempty"`
}

// StoragePoolList is pageable list of storage pools.
type StoragePoolList struct {
	autorest.Response `json:"-"`
	Value             *[]StoragePool `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// StoragePoolListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client StoragePoolList) StoragePoolListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// StoragePoolModel is all properties of a storage pool.
type StoragePoolModel struct {
	SizeGB *int32 `json:"sizeGB,omitempty"`
}

// StorageSystem is representation of a storage system resource.
type StorageSystem struct {
	autorest.Response   `json:"-"`
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*StorageSystemModel `json:"properties,omitempty"`
}

// StorageSystemList is pageable list of storage systems.
type StorageSystemList struct {
	autorest.Response `json:"-"`
	Value             *[]StorageSystem `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// StorageSystemListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client StorageSystemList) StorageSystemListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// StorageSystemModel is all properties of a storage system.
type StorageSystemModel struct {
	TotalCapacityGB *int32 `json:"totalCapacityGB,omitempty"`
}

// Volume is representation of a volume resource.
type Volume struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*VolumeModel      `json:"properties,omitempty"`
}

// VolumeList is pageable list of volumes.
type VolumeList struct {
	autorest.Response `json:"-"`
	Value             *[]Volume `json:"value,omitempty"`
	NextLink          *string   `json:"nextLink,omitempty"`
}

// VolumeListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client VolumeList) VolumeListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// VolumeModel is properties of a volume.
type VolumeModel struct {
	FileSystem      *string `json:"fileSystem,omitempty"`
	RemainingSizeGB *int32  `json:"remainingSizeGB,omitempty"`
	SizeGB          *int32  `json:"sizeGB,omitempty"`
	VolumeLabel     *string `json:"volumeLabel,omitempty"`
}
