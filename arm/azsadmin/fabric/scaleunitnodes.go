package fabric

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 2.2.21.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// ScaleUnitNodesClient is the fabric Admin Client
type ScaleUnitNodesClient struct {
	ManagementClient
}

// NewScaleUnitNodesClient creates an instance of the ScaleUnitNodesClient client.
func NewScaleUnitNodesClient(subscriptionID string) ScaleUnitNodesClient {
	return NewScaleUnitNodesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewScaleUnitNodesClientWithBaseURI creates an instance of the ScaleUnitNodesClient client.
func NewScaleUnitNodesClientWithBaseURI(baseURI string, subscriptionID string) ScaleUnitNodesClient {
	return ScaleUnitNodesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Get get a specific scale unit node.
//
// location is location of the resource. scaleUnitNode is name of the scale unit node.
func (client ScaleUnitNodesClient) Get(location string, scaleUnitNode string) (result ScaleUnitNode, err error) {
	if err := validation.Validate([]validation.Validation{}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "Get")
	}

	req, err := client.GetPreparer(location, scaleUnitNode)
	if err != nil {
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client ScaleUnitNodesClient) GetPreparer(location string, scaleUnitNode string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"scaleUnitNode":  autorest.Encode("path", scaleUnitNode),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes/{scaleUnitNode}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) GetResponder(resp *http.Response) (result ScaleUnitNode, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List get a list of all scale unit nodes in a location.
//
// location is location of the resource. filter is oData filter parameter.
func (client ScaleUnitNodesClient) List(location string, filter string) (result ScaleUnitNodeList, err error) {
	if err := validation.Validate([]validation.Validation{}); err != nil {
		return result, validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "List")
	}

	req, err := client.ListPreparer(location, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client ScaleUnitNodesClient) ListPreparer(location string, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{})
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req)
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) ListResponder(resp *http.Response) (result ScaleUnitNodeList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListNextResults retrieves the next set of results, if any.
func (client ScaleUnitNodesClient) ListNextResults(lastResults ScaleUnitNodeList) (result ScaleUnitNodeList, err error) {
	req, err := lastResults.ScaleUnitNodeListPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", resp, "Failure sending next results request")
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "List", resp, "Failure responding to next results request")
	}

	return
}

// ListComplete gets all elements from the list without paging.
func (client ScaleUnitNodesClient) ListComplete(location string, filter string, cancel <-chan struct{}) (<-chan ScaleUnitNode, <-chan error) {
	resultChan := make(chan ScaleUnitNode)
	errChan := make(chan error, 1)
	go func() {
		defer func() {
			close(resultChan)
			close(errChan)
		}()
		list, err := client.List(location, filter)
		if err != nil {
			errChan <- err
			return
		}
		if list.Value != nil {
			for _, item := range *list.Value {
				select {
				case <-cancel:
					return
				case resultChan <- item:
					// Intentionally left blank
				}
			}
		}
		for list.NextLink != nil {
			list, err = client.ListNextResults(list)
			if err != nil {
				errChan <- err
				return
			}
			if list.Value != nil {
				for _, item := range *list.Value {
					select {
					case <-cancel:
						return
					case resultChan <- item:
						// Intentionally left blank
					}
				}
			}
		}
	}()
	return resultChan, errChan
}

// PowerOff power off a scale unit node. This method may poll for completion. Polling can be canceled by passing the
// cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP requests.
//
// location is location of the resource. scaleUnitNode is name of the scale unit node.
func (client ScaleUnitNodesClient) PowerOff(location string, scaleUnitNode string, cancel <-chan struct{}) (<-chan OperationStatus, <-chan error) {
	resultChan := make(chan OperationStatus, 1)
	errChan := make(chan error, 1)
	if err := validation.Validate([]validation.Validation{}); err != nil {
		errChan <- validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "PowerOff")
		close(errChan)
		close(resultChan)
		return resultChan, errChan
	}

	go func() {
		var err error
		var result OperationStatus
		defer func() {
			if err != nil {
				errChan <- err
			}
			resultChan <- result
			close(resultChan)
			close(errChan)
		}()
		req, err := client.PowerOffPreparer(location, scaleUnitNode, cancel)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOff", nil, "Failure preparing request")
			return
		}

		resp, err := client.PowerOffSender(req)
		if err != nil {
			result.Response = autorest.Response{Response: resp}
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOff", resp, "Failure sending request")
			return
		}

		result, err = client.PowerOffResponder(resp)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOff", resp, "Failure responding to request")
		}
	}()
	return resultChan, errChan
}

// PowerOffPreparer prepares the PowerOff request.
func (client ScaleUnitNodesClient) PowerOffPreparer(location string, scaleUnitNode string, cancel <-chan struct{}) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"scaleUnitNode":  autorest.Encode("path", scaleUnitNode),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes/{scaleUnitNode}/PowerOff", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{Cancel: cancel})
}

// PowerOffSender sends the PowerOff request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) PowerOffSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		azure.DoPollForAsynchronous(client.PollingDelay))
}

// PowerOffResponder handles the response to the PowerOff request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) PowerOffResponder(resp *http.Response) (result OperationStatus, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PowerOn power on a scale unit node. This method may poll for completion. Polling can be canceled by passing the
// cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP requests.
//
// location is location of the resource. scaleUnitNode is name of the scale unit node.
func (client ScaleUnitNodesClient) PowerOn(location string, scaleUnitNode string, cancel <-chan struct{}) (<-chan OperationStatus, <-chan error) {
	resultChan := make(chan OperationStatus, 1)
	errChan := make(chan error, 1)
	if err := validation.Validate([]validation.Validation{}); err != nil {
		errChan <- validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "PowerOn")
		close(errChan)
		close(resultChan)
		return resultChan, errChan
	}

	go func() {
		var err error
		var result OperationStatus
		defer func() {
			if err != nil {
				errChan <- err
			}
			resultChan <- result
			close(resultChan)
			close(errChan)
		}()
		req, err := client.PowerOnPreparer(location, scaleUnitNode, cancel)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOn", nil, "Failure preparing request")
			return
		}

		resp, err := client.PowerOnSender(req)
		if err != nil {
			result.Response = autorest.Response{Response: resp}
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOn", resp, "Failure sending request")
			return
		}

		result, err = client.PowerOnResponder(resp)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "PowerOn", resp, "Failure responding to request")
		}
	}()
	return resultChan, errChan
}

// PowerOnPreparer prepares the PowerOn request.
func (client ScaleUnitNodesClient) PowerOnPreparer(location string, scaleUnitNode string, cancel <-chan struct{}) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"scaleUnitNode":  autorest.Encode("path", scaleUnitNode),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes/{scaleUnitNode}/PowerOn", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{Cancel: cancel})
}

// PowerOnSender sends the PowerOn request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) PowerOnSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		azure.DoPollForAsynchronous(client.PollingDelay))
}

// PowerOnResponder handles the response to the PowerOn request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) PowerOnResponder(resp *http.Response) (result OperationStatus, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// StartMaintenanceMode start maintenance mode for a scale unit node. This method may poll for completion. Polling can
// be canceled by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding
// HTTP requests.
//
// location is location of the resource. scaleUnitNode is name of the scale unit node.
func (client ScaleUnitNodesClient) StartMaintenanceMode(location string, scaleUnitNode string, cancel <-chan struct{}) (<-chan OperationStatus, <-chan error) {
	resultChan := make(chan OperationStatus, 1)
	errChan := make(chan error, 1)
	if err := validation.Validate([]validation.Validation{}); err != nil {
		errChan <- validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "StartMaintenanceMode")
		close(errChan)
		close(resultChan)
		return resultChan, errChan
	}

	go func() {
		var err error
		var result OperationStatus
		defer func() {
			if err != nil {
				errChan <- err
			}
			resultChan <- result
			close(resultChan)
			close(errChan)
		}()
		req, err := client.StartMaintenanceModePreparer(location, scaleUnitNode, cancel)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StartMaintenanceMode", nil, "Failure preparing request")
			return
		}

		resp, err := client.StartMaintenanceModeSender(req)
		if err != nil {
			result.Response = autorest.Response{Response: resp}
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StartMaintenanceMode", resp, "Failure sending request")
			return
		}

		result, err = client.StartMaintenanceModeResponder(resp)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StartMaintenanceMode", resp, "Failure responding to request")
		}
	}()
	return resultChan, errChan
}

// StartMaintenanceModePreparer prepares the StartMaintenanceMode request.
func (client ScaleUnitNodesClient) StartMaintenanceModePreparer(location string, scaleUnitNode string, cancel <-chan struct{}) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"scaleUnitNode":  autorest.Encode("path", scaleUnitNode),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes/{scaleUnitNode}/StartMaintenanceMode", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{Cancel: cancel})
}

// StartMaintenanceModeSender sends the StartMaintenanceMode request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) StartMaintenanceModeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		azure.DoPollForAsynchronous(client.PollingDelay))
}

// StartMaintenanceModeResponder handles the response to the StartMaintenanceMode request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) StartMaintenanceModeResponder(resp *http.Response) (result OperationStatus, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// StopMaintenanceMode stop maintenance mode for a scale unit node. This method may poll for completion. Polling can be
// canceled by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP
// requests.
//
// location is location of the resource. scaleUnitNode is name of the scale unit node.
func (client ScaleUnitNodesClient) StopMaintenanceMode(location string, scaleUnitNode string, cancel <-chan struct{}) (<-chan OperationStatus, <-chan error) {
	resultChan := make(chan OperationStatus, 1)
	errChan := make(chan error, 1)
	if err := validation.Validate([]validation.Validation{}); err != nil {
		errChan <- validation.NewErrorWithValidationError(err, "fabric.ScaleUnitNodesClient", "StopMaintenanceMode")
		close(errChan)
		close(resultChan)
		return resultChan, errChan
	}

	go func() {
		var err error
		var result OperationStatus
		defer func() {
			if err != nil {
				errChan <- err
			}
			resultChan <- result
			close(resultChan)
			close(errChan)
		}()
		req, err := client.StopMaintenanceModePreparer(location, scaleUnitNode, cancel)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StopMaintenanceMode", nil, "Failure preparing request")
			return
		}

		resp, err := client.StopMaintenanceModeSender(req)
		if err != nil {
			result.Response = autorest.Response{Response: resp}
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StopMaintenanceMode", resp, "Failure sending request")
			return
		}

		result, err = client.StopMaintenanceModeResponder(resp)
		if err != nil {
			err = autorest.NewErrorWithError(err, "fabric.ScaleUnitNodesClient", "StopMaintenanceMode", resp, "Failure responding to request")
		}
	}()
	return resultChan, errChan
}

// StopMaintenanceModePreparer prepares the StopMaintenanceMode request.
func (client ScaleUnitNodesClient) StopMaintenanceModePreparer(location string, scaleUnitNode string, cancel <-chan struct{}) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location":       autorest.Encode("path", location),
		"scaleUnitNode":  autorest.Encode("path", scaleUnitNode),
		"subscriptionId": autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2016-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/System.{location}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/scaleUnitNodes/{scaleUnitNode}/StopMaintenanceMode", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare(&http.Request{Cancel: cancel})
}

// StopMaintenanceModeSender sends the StopMaintenanceMode request. The method will close the
// http.Response Body if it receives an error.
func (client ScaleUnitNodesClient) StopMaintenanceModeSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client,
		req,
		azure.DoPollForAsynchronous(client.PollingDelay))
}

// StopMaintenanceModeResponder handles the response to the StopMaintenanceMode request. The method always
// closes the http.Response Body.
func (client ScaleUnitNodesClient) StopMaintenanceModeResponder(resp *http.Response) (result OperationStatus, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
