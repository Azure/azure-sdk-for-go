package infrastructureinsights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 2.2.21.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// MetricsSourceType enumerates the values for metrics source type.
type MetricsSourceType string

const (
	// PhysicalNode specifies the physical node state for metrics source type.
	PhysicalNode MetricsSourceType = "PhysicalNode"
	// ResourceProvider specifies the resource provider state for metrics source type.
	ResourceProvider MetricsSourceType = "ResourceProvider"
	// VirtualMachine specifies the virtual machine state for metrics source type.
	VirtualMachine MetricsSourceType = "VirtualMachine"
)

// MetricsUnit enumerates the values for metrics unit.
type MetricsUnit string

const (
	// B specifies the b state for metrics unit.
	B MetricsUnit = "B"
	// GB specifies the gb state for metrics unit.
	GB MetricsUnit = "GB"
	// KB specifies the kb state for metrics unit.
	KB MetricsUnit = "KB"
	// MB specifies the mb state for metrics unit.
	MB MetricsUnit = "MB"
	// One specifies the one state for metrics unit.
	One MetricsUnit = "One"
	// Percentage specifies the percentage state for metrics unit.
	Percentage MetricsUnit = "Percentage"
	// TB specifies the tb state for metrics unit.
	TB MetricsUnit = "TB"
)

// Alert is this class models an alert resource.
type Alert struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*AlertModel       `json:"properties,omitempty"`
}

// AlertList is a pageable list of Alerts
type AlertList struct {
	autorest.Response `json:"-"`
	Value             *[]Alert `json:"value,omitempty"`
	NextLink          *string  `json:"nextLink,omitempty"`
}

// AlertListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client AlertList) AlertListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// AlertModel is holds Alert data
type AlertModel struct {
	ClosedTimestamp                *string               `json:"closedTimestamp,omitempty"`
	CreatedTimestamp               *string               `json:"createdTimestamp,omitempty"`
	Description                    *[]map[string]*string `json:"description,omitempty"`
	FaultID                        *string               `json:"faultId,omitempty"`
	AlertID                        *string               `json:"alertId,omitempty"`
	FaultTypeID                    *string               `json:"faultTypeId,omitempty"`
	LastUpdatedTimestamp           *string               `json:"lastUpdatedTimestamp,omitempty"`
	AlertProperties                *map[string]*string   `json:"alertProperties,omitempty"`
	Remediation                    *[]map[string]*string `json:"remediation,omitempty"`
	ResourceRegistrationID         *string               `json:"resourceRegistrationId,omitempty"`
	ResourceProviderRegistrationID *string               `json:"resourceProviderRegistrationId,omitempty"`
	Severity                       *string               `json:"severity,omitempty"`
	State                          *string               `json:"state,omitempty"`
	Title                          *string               `json:"title,omitempty"`
	ImpactedResourceID             *string               `json:"impactedResourceId,omitempty"`
	ImpactedResourceDisplayName    *string               `json:"impactedResourceDisplayName,omitempty"`
	ClosedByUserAlias              *string               `json:"closedByUserAlias,omitempty"`
}

// AlertSummary is summary of the alerts.
type AlertSummary struct {
	CriticalAlertCount *int32 `json:"criticalAlertCount,omitempty"`
	WarningAlertCount  *int32 `json:"warningAlertCount,omitempty"`
}

// BaseHealth is models the base properties for health resource.
type BaseHealth struct {
	AlertSummary   *AlertSummary `json:"alertSummary,omitempty"`
	HealthState    *string       `json:"healthState,omitempty"`
	Namespace      *string       `json:"namespace,omitempty"`
	RegistrationID *string       `json:"registrationId,omitempty"`
	RoutePrefix    *string       `json:"routePrefix,omitempty"`
}

// Metrics is metrics for a source.
type Metrics struct {
	Name              *string           `json:"name,omitempty"`
	MaCounterName     *string           `json:"maCounterName,omitempty"`
	ObservedTimestamp *date.Time        `json:"observedTimestamp,omitempty"`
	SourceType        *string           `json:"sourceType,omitempty"`
	SourceName        MetricsSourceType `json:"sourceName,omitempty"`
	Unit              MetricsUnit       `json:"unit,omitempty"`
	Value             *float64          `json:"value,omitempty"`
}

// RegionHealth is contains information related to a regions health.
type RegionHealth struct {
	autorest.Response  `json:"-"`
	ID                 *string             `json:"id,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Type               *string             `json:"type,omitempty"`
	Location           *string             `json:"location,omitempty"`
	Tags               *map[string]*string `json:"tags,omitempty"`
	*RegionHealthModel `json:"properties,omitempty"`
}

// RegionHealthList is pageable list of region health items.
type RegionHealthList struct {
	autorest.Response `json:"-"`
	Value             *[]RegionHealth `json:"value,omitempty"`
	NextLink          *string         `json:"nextLink,omitempty"`
}

// RegionHealthListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client RegionHealthList) RegionHealthListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// RegionHealthModel is contains information related to a regions health.
type RegionHealthModel struct {
	AlertSummary *AlertSummary   `json:"alertSummary,omitempty"`
	UsageMetrics *[]UsageMetrics `json:"usageMetrics,omitempty"`
}

// Resource is base Resource Object
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceHealth is health information related to a resource.
type ResourceHealth struct {
	autorest.Response    `json:"-"`
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*ResourceHealthModel `json:"properties,omitempty"`
}

// ResourceHealthList is pageable list of resource healths.
type ResourceHealthList struct {
	autorest.Response `json:"-"`
	Value             *[]ResourceHealth `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// ResourceHealthListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceHealthList) ResourceHealthListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceHealthModel is health information related to a resource.
type ResourceHealthModel struct {
	AlertSummary        *AlertSummary   `json:"alertSummary,omitempty"`
	HealthState         *string         `json:"healthState,omitempty"`
	Namespace           *string         `json:"namespace,omitempty"`
	RegistrationID      *string         `json:"registrationId,omitempty"`
	RoutePrefix         *string         `json:"routePrefix,omitempty"`
	ResourceLocation    *string         `json:"resourceLocation,omitempty"`
	ResourceName        *string         `json:"resourceName,omitempty"`
	ResourceDisplayName *string         `json:"resourceDisplayName,omitempty"`
	ResourceType        *string         `json:"resourceType,omitempty"`
	ResourceURI         *string         `json:"resourceURI,omitempty"`
	RpRegistrationID    *string         `json:"rpRegistrationId,omitempty"`
	UsageMetrics        *[]UsageMetrics `json:"usageMetrics,omitempty"`
}

// ServiceHealth is holds information about a services health.
type ServiceHealth struct {
	autorest.Response   `json:"-"`
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*ServiceHealthModel `json:"properties,omitempty"`
}

// ServiceHealthList is pageable list of service health instances.
type ServiceHealthList struct {
	autorest.Response `json:"-"`
	Value             *[]ServiceHealth `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// ServiceHealthListPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ServiceHealthList) ServiceHealthListPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ServiceHealthModel is holds information about a services health.
type ServiceHealthModel struct {
	AlertSummary    *AlertSummary `json:"alertSummary,omitempty"`
	HealthState     *string       `json:"healthState,omitempty"`
	Namespace       *string       `json:"namespace,omitempty"`
	RegistrationID  *string       `json:"registrationId,omitempty"`
	RoutePrefix     *string       `json:"routePrefix,omitempty"`
	DisplayName     *string       `json:"displayName,omitempty"`
	ServiceLocation *string       `json:"serviceLocation,omitempty"`
	InfraURI        *string       `json:"infraURI,omitempty"`
}

// UsageMetrics is metrics of resource usage.
type UsageMetrics struct {
	Name         *string    `json:"name,omitempty"`
	MetricsValue *[]Metrics `json:"metricsValue,omitempty"`
}
