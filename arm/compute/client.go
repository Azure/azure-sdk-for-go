// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package compute

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2015-06-15"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

type ComputeManagementClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *ComputeManagementClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *ComputeManagementClient {
	client := &ComputeManagementClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

////////////////////////////////////////////////////////////////////////////////
//
// AvailabilitySets Client
//
////////////////////////////////////////////////////////////////////////////////
type AvailabilitySetsClient struct {
	ComputeManagementClient
}

func NewAvailabilitySetsClient(subscriptionId string) *AvailabilitySetsClient {
	return NewAvailabilitySetsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewAvailabilitySetsClientWithBaseUri(baseUri string, subscriptionId string) *AvailabilitySetsClient {
	return &AvailabilitySetsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the operation to delete the availability set.;
//
// resourceGroupName is the name of the resource group. availabilitySetName is
// the name of the availability set.
func (client *AvailabilitySetsClient) Delete(resourceGroupName string, availabilitySetName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, availabilitySetName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing AvailabilitySetsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending AvailabilitySetsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending AvailabilitySetsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *AvailabilitySetsClient) NewDeleteRequest(resourceGroupName string, availabilitySetName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"availabilitySetName": url.QueryEscape(availabilitySetName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AvailabilitySetsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"))
}

// Get the operation to get the availability set.;
//
// resourceGroupName is the name of the resource group. availabilitySetName is
// the name of the availability set.
func (client *AvailabilitySetsClient) Get(resourceGroupName string, availabilitySetName string) (result AvailabilitySet, err error) {

	req, err := client.NewGetRequest(resourceGroupName, availabilitySetName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing AvailabilitySetsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.Get request (%v)", err)
	}

	result = AvailabilitySet{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *AvailabilitySetsClient) NewGetRequest(resourceGroupName string, availabilitySetName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"availabilitySetName": url.QueryEscape(availabilitySetName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AvailabilitySetsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}"))
}

// List the operation to list the availability sets.;
//
// resourceGroupName is the name of the resource group.
func (client *AvailabilitySetsClient) List(resourceGroupName string) (result AvailabilitySetListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing AvailabilitySetsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.List request (%v)", err)
	}

	result = AvailabilitySetListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *AvailabilitySetsClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AvailabilitySetsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets"))
}

// ListAvailableSizes lists virtual-machine-sizes available to be used for an
// availability set.;
//
// resourceGroupName is the name of the resource group. availabilitySetName is
// the name of the availability set.
func (client *AvailabilitySetsClient) ListAvailableSizes(resourceGroupName string, availabilitySetName string) (result VirtualMachineSizeListResult, err error) {

	req, err := client.NewListAvailableSizesRequest(resourceGroupName, availabilitySetName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing AvailabilitySetsClient.ListAvailableSizes request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.ListAvailableSizes request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.ListAvailableSizes request (%v)", err)
	}

	result = VirtualMachineSizeListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *AvailabilitySetsClient) NewListAvailableSizesRequest(resourceGroupName string, availabilitySetName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"availabilitySetName": url.QueryEscape(availabilitySetName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAvailableSizesRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AvailabilitySetsClient) ListAvailableSizesRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{availabilitySetName}/vmSizes"))
}

// CreateOrUpdate the operation to create or update the availability set.;
//
// resourceGroupName is the name of the resource group. name is parameters
// supplied to the Create Availability Set operation. parameters is
// parameters supplied to the Create Availability Set operation.
func (client *AvailabilitySetsClient) CreateOrUpdate(resourceGroupName string, name string, parameters AvailabilitySet) (result AvailabilitySet, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, name, parameters)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing AvailabilitySetsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending AvailabilitySetsClient.CreateOrUpdate request (%v)", err)
	}

	result = AvailabilitySet{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *AvailabilitySetsClient) NewCreateOrUpdateRequest(resourceGroupName string, name string, parameters AvailabilitySet) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"name":              url.QueryEscape(name),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AvailabilitySetsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/availabilitySets/{name}"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualMachineImages Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualMachineImagesClient struct {
	ComputeManagementClient
}

func NewVirtualMachineImagesClient(subscriptionId string) *VirtualMachineImagesClient {
	return NewVirtualMachineImagesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualMachineImagesClientWithBaseUri(baseUri string, subscriptionId string) *VirtualMachineImagesClient {
	return &VirtualMachineImagesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Get gets a virtual machine image.;
//
func (client *VirtualMachineImagesClient) Get(location string, publisherName string, offer string, skus string, version string) (result VirtualMachineImage, err error) {

	req, err := client.NewGetRequest(location, publisherName, offer, skus, version)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineImagesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.Get request (%v)", err)
	}

	result = VirtualMachineImage{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineImagesClient) NewGetRequest(location string, publisherName string, offer string, skus string, version string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"offer":          url.QueryEscape(offer),
		"publisherName":  url.QueryEscape(publisherName),
		"skus":           url.QueryEscape(skus),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
		"version":        url.QueryEscape(version),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineImagesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}"))
}

// ListOffers gets a list of virtual machine image offers.;
//
func (client *VirtualMachineImagesClient) ListOffers(location string, publisherName string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListOffersRequest(location, publisherName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineImagesClient.ListOffers request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListOffers request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListOffers request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineImagesClient) NewListOffersRequest(location string, publisherName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"publisherName":  url.QueryEscape(publisherName),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListOffersRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineImagesClient) ListOffersRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers"))
}

// ListPublishers gets a list of virtual machine image publishers.;
//
func (client *VirtualMachineImagesClient) ListPublishers(location string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListPublishersRequest(location)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineImagesClient.ListPublishers request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListPublishers request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListPublishers request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineImagesClient) NewListPublishersRequest(location string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListPublishersRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineImagesClient) ListPublishersRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers"))
}

// ListSkus gets a list of virtual machine image skus.;
//
func (client *VirtualMachineImagesClient) ListSkus(location string, publisherName string, offer string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListSkusRequest(location, publisherName, offer)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineImagesClient.ListSkus request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListSkus request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.ListSkus request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineImagesClient) NewListSkusRequest(location string, publisherName string, offer string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"offer":          url.QueryEscape(offer),
		"publisherName":  url.QueryEscape(publisherName),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListSkusRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineImagesClient) ListSkusRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus"))
}

// List gets a list of virtual machine images.;
//
// filter is the filter to apply on the operation.
func (client *VirtualMachineImagesClient) List(location string, publisherName string, offer string, skus string, filter string, top int, orderby string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListRequest(location, publisherName, offer, skus, filter, top, orderby)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineImagesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineImagesClient.List request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineImagesClient) NewListRequest(location string, publisherName string, offer string, skus string, filter string, top int, orderby string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"offer":          url.QueryEscape(offer),
		"publisherName":  url.QueryEscape(publisherName),
		"skus":           url.QueryEscape(skus),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$orderby":    orderby,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineImagesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualMachineExtensionImages Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualMachineExtensionImagesClient struct {
	ComputeManagementClient
}

func NewVirtualMachineExtensionImagesClient(subscriptionId string) *VirtualMachineExtensionImagesClient {
	return NewVirtualMachineExtensionImagesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualMachineExtensionImagesClientWithBaseUri(baseUri string, subscriptionId string) *VirtualMachineExtensionImagesClient {
	return &VirtualMachineExtensionImagesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Get gets a virtual machine extension image.;
//
func (client *VirtualMachineExtensionImagesClient) Get(location string, publisherName string, type__ string, version string) (result VirtualMachineExtensionImage, err error) {

	req, err := client.NewGetRequest(location, publisherName, type__, version)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineExtensionImagesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.Get request (%v)", err)
	}

	result = VirtualMachineExtensionImage{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineExtensionImagesClient) NewGetRequest(location string, publisherName string, type__ string, version string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"publisherName":  url.QueryEscape(publisherName),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
		"type":           url.QueryEscape(type__),
		"version":        url.QueryEscape(version),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionImagesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}"))
}

// ListVersions gets a list of virtual machine extension image versions.;
//
// filter is the filter to apply on the operation.
func (client *VirtualMachineExtensionImagesClient) ListVersions(location string, publisherName string, type__ string, filter string, top int, orderby string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListVersionsRequest(location, publisherName, type__, filter, top, orderby)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineExtensionImagesClient.ListVersions request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.ListVersions request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.ListVersions request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineExtensionImagesClient) NewListVersionsRequest(location string, publisherName string, type__ string, filter string, top int, orderby string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"publisherName":  url.QueryEscape(publisherName),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
		"type":           url.QueryEscape(type__),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$orderby":    orderby,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListVersionsRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionImagesClient) ListVersionsRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions"))
}

// ListTypes gets a list of virtual machine extension image types.;
//
func (client *VirtualMachineExtensionImagesClient) ListTypes(location string, publisherName string) (result []VirtualMachineImageResource, err error) {

	req, err := client.NewListTypesRequest(location, publisherName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineExtensionImagesClient.ListTypes request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.ListTypes request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionImagesClient.ListTypes request (%v)", err)
	}

	result = []VirtualMachineImageResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineExtensionImagesClient) NewListTypesRequest(location string, publisherName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"publisherName":  url.QueryEscape(publisherName),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListTypesRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionImagesClient) ListTypesRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualMachineExtensions Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualMachineExtensionsClient struct {
	ComputeManagementClient
}

func NewVirtualMachineExtensionsClient(subscriptionId string) *VirtualMachineExtensionsClient {
	return NewVirtualMachineExtensionsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualMachineExtensionsClientWithBaseUri(baseUri string, subscriptionId string) *VirtualMachineExtensionsClient {
	return &VirtualMachineExtensionsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CreateOrUpdate the operation to create or update the extension.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine where the extension should be create or updated.
// vmExtensionName is the name of the virtual machine extension.
// extensionParameters is parameters supplied to the Create Virtual Machine
// Extension operation.
func (client *VirtualMachineExtensionsClient) CreateOrUpdate(resourceGroupName string, vmName string, vmExtensionName string, extensionParameters VirtualMachineExtension) (result VirtualMachineExtension, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, vmName, vmExtensionName, extensionParameters)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineExtensionsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.CreateOrUpdate request (%v)", err)
	}

	result = VirtualMachineExtension{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineExtensionsClient) NewCreateOrUpdateRequest(resourceGroupName string, vmName string, vmExtensionName string, extensionParameters VirtualMachineExtension) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmExtensionName":   url.QueryEscape(vmExtensionName),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(extensionParameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}"))
}

// Delete the operation to delete the extension.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine where the extension should be deleted. vmExtensionName
// is the name of the virtual machine extension.
func (client *VirtualMachineExtensionsClient) Delete(resourceGroupName string, vmName string, vmExtensionName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, vmName, vmExtensionName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachineExtensionsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachineExtensionsClient) NewDeleteRequest(resourceGroupName string, vmName string, vmExtensionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmExtensionName":   url.QueryEscape(vmExtensionName),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}"))
}

// Get the operation to get the extension.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine containing the extension. vmExtensionName is the name
// of the virtual machine extension. expand is name of the property to
// expand. Allowed value is null or 'instanceView'.
func (client *VirtualMachineExtensionsClient) Get(resourceGroupName string, vmName string, vmExtensionName string, expand string) (result VirtualMachineExtension, err error) {

	req, err := client.NewGetRequest(resourceGroupName, vmName, vmExtensionName, expand)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineExtensionsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineExtensionsClient.Get request (%v)", err)
	}

	result = VirtualMachineExtension{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineExtensionsClient) NewGetRequest(resourceGroupName string, vmName string, vmExtensionName string, expand string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmExtensionName":   url.QueryEscape(vmExtensionName),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"$expand":     expand,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineExtensionsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/extensions/{vmExtensionName}"))
}

////////////////////////////////////////////////////////////////////////////////
//
// UsageOperations Client
//
////////////////////////////////////////////////////////////////////////////////
type UsageOperationsClient struct {
	ComputeManagementClient
}

func NewUsageOperationsClient(subscriptionId string) *UsageOperationsClient {
	return NewUsageOperationsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewUsageOperationsClientWithBaseUri(baseUri string, subscriptionId string) *UsageOperationsClient {
	return &UsageOperationsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List lists compute usages for a subscription.;
//
// location is the location upon which resource usage is queried.
func (client *UsageOperationsClient) List(location string) (result ListUsagesResult, err error) {

	req, err := client.NewListRequest(location)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing UsageOperationsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending UsageOperationsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending UsageOperationsClient.List request (%v)", err)
	}

	result = ListUsagesResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *UsageOperationsClient) NewListRequest(location string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *UsageOperationsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/usages"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualMachineSizes Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualMachineSizesClient struct {
	ComputeManagementClient
}

func NewVirtualMachineSizesClient(subscriptionId string) *VirtualMachineSizesClient {
	return NewVirtualMachineSizesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualMachineSizesClientWithBaseUri(baseUri string, subscriptionId string) *VirtualMachineSizesClient {
	return &VirtualMachineSizesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List lists virtual-machine-sizes available in a location for a subscription.;
//
// location is the location upon which virtual-machine-sizes is queried.
func (client *VirtualMachineSizesClient) List(location string) (result VirtualMachineSizeListResult, err error) {

	req, err := client.NewListRequest(location)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachineSizesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineSizesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachineSizesClient.List request (%v)", err)
	}

	result = VirtualMachineSizeListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachineSizesClient) NewListRequest(location string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachineSizesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/vmSizes"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualMachines Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualMachinesClient struct {
	ComputeManagementClient
}

func NewVirtualMachinesClient(subscriptionId string) *VirtualMachinesClient {
	return NewVirtualMachinesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualMachinesClientWithBaseUri(baseUri string, subscriptionId string) *VirtualMachinesClient {
	return &VirtualMachinesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Capture captures the VM by copying VirtualHardDisks of the VM and outputs a
// template that can be used to create similar VMs.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine. parameters is parameters supplied to the Capture
// Virtual Machine operation.
func (client *VirtualMachinesClient) Capture(resourceGroupName string, vmName string, parameters VirtualMachineCaptureParameters) (result ComputeLongRunningOperationResult, err error) {

	req, err := client.NewCaptureRequest(resourceGroupName, vmName, parameters)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Capture request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.Capture request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.Capture request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.Capture request (%v)", err)
	}

	result = ComputeLongRunningOperationResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewCaptureRequest(resourceGroupName string, vmName string, parameters VirtualMachineCaptureParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CaptureRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) CaptureRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture"))
}

// CreateOrUpdate the operation to create or update a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine. parameters is parameters supplied to the Create
// Virtual Machine operation.
func (client *VirtualMachinesClient) CreateOrUpdate(resourceGroupName string, vmName string, parameters VirtualMachine) (result VirtualMachine, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, vmName, parameters)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.CreateOrUpdate request (%v)", err)
	}

	result = VirtualMachine{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewCreateOrUpdateRequest(resourceGroupName string, vmName string, parameters VirtualMachine) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"))
}

// Delete the operation to delete a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) Delete(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewDeleteRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"))
}

// Get the operation to get a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine. expand is name of the property to expand. Allowed
// value is null or 'instanceView'.
func (client *VirtualMachinesClient) Get(resourceGroupName string, vmName string, expand string) (result VirtualMachine, err error) {

	req, err := client.NewGetRequest(resourceGroupName, vmName, expand)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.Get request (%v)", err)
	}

	result = VirtualMachine{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewGetRequest(resourceGroupName string, vmName string, expand string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"$expand":     expand,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}"))
}

// Deallocate shuts down the Virtual Machine and releases the compute
// resources. You are not billed for the compute resources that this Virtual
// Machine uses.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) Deallocate(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewDeallocateRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Deallocate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Deallocate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Deallocate request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Deallocate request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewDeallocateRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeallocateRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) DeallocateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate"))
}

// Generalize sets the state of the VM as Generalized.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) Generalize(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewGeneralizeRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Generalize request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Generalize request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Generalize request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewGeneralizeRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GeneralizeRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) GeneralizeRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize"))
}

// List the operation to list virtual machines under a resource group.;
//
// resourceGroupName is the name of the resource group.
func (client *VirtualMachinesClient) List(resourceGroupName string) (result VirtualMachineListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.List request (%v)", err)
	}

	result = VirtualMachineListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines"))
}

// ListAll gets the list of Virtual Machines in the subscription. Use nextLink
// property in the response to get the next page of Virtual Machines. Do this
// till nextLink is not null to fetch all the Virtual Machines.;
func (client *VirtualMachinesClient) ListAll() (result VirtualMachineListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.ListAll request (%v)", err)
	}

	result = VirtualMachineListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines"))
}

// ListAvailableSizes lists virtual-machine-sizes available to be used for a
// virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) ListAvailableSizes(resourceGroupName string, vmName string) (result VirtualMachineSizeListResult, err error) {

	req, err := client.NewListAvailableSizesRequest(resourceGroupName, vmName)
	if err != nil {
		return result, fmt.Errorf("compute: Failure preparing VirtualMachinesClient.ListAvailableSizes request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.ListAvailableSizes request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("compute: Failure sending VirtualMachinesClient.ListAvailableSizes request (%v)", err)
	}

	result = VirtualMachineSizeListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualMachinesClient) NewListAvailableSizesRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAvailableSizesRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) ListAvailableSizesRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes"))
}

// PowerOff the operation to power off (stop) a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) PowerOff(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewPowerOffRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.PowerOff request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.PowerOff request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.PowerOff request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.PowerOff request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewPowerOffRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.PowerOffRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) PowerOffRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff"))
}

// Restart the operation to restart a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) Restart(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewRestartRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Restart request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Restart request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Restart request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Restart request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewRestartRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RestartRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) RestartRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart"))
}

// Start the operation to start a virtual machine.;
//
// resourceGroupName is the name of the resource group. vmName is the name of
// the virtual machine.
func (client *VirtualMachinesClient) Start(resourceGroupName string, vmName string) (err error) {

	req, err := client.NewStartRequest(resourceGroupName, vmName)
	if err != nil {
		return fmt.Errorf("compute: Failure preparing VirtualMachinesClient.Start request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Start request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Start request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("compute: Failure sending VirtualMachinesClient.Start request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualMachinesClient) NewStartRequest(resourceGroupName string, vmName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"vmName":            url.QueryEscape(vmName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.StartRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualMachinesClient) StartRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start"))
}
