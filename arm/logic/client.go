// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package logic

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2015-02-01-preview"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

type LogicManagementClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *LogicManagementClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *LogicManagementClient {
	client := &LogicManagementClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

////////////////////////////////////////////////////////////////////////////////
//
// Workflows Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowsClient struct {
	LogicManagementClient
}

func NewWorkflowsClient(subscriptionId string) *WorkflowsClient {
	return NewWorkflowsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowsClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowsClient {
	return &WorkflowsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// ListBySubscription gets a list of workflows by subscription.;
//
// top is the number of items to be included in the result. filter is the
// filter to apply on the operation.
func (client *WorkflowsClient) ListBySubscription(top int, filter string) (result WorkflowListResult, err error) {

	req, err := client.NewListBySubscriptionRequest(top, filter)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.ListBySubscription request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.ListBySubscription request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.ListBySubscription request (%v)", err)
	}

	result = WorkflowListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewListBySubscriptionRequest(top int, filter string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListBySubscriptionRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) ListBySubscriptionRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows"))
}

// ListByResourceGroup gets a list of workflows by resource group.;
//
// resourceGroupName is the resource group name. top is the number of items to
// be included in the result. filter is the filter to apply on the operation.
func (client *WorkflowsClient) ListByResourceGroup(resourceGroupName string, top int, filter string) (result WorkflowListResult, err error) {

	req, err := client.NewListByResourceGroupRequest(resourceGroupName, top, filter)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.ListByResourceGroup request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.ListByResourceGroup request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.ListByResourceGroup request (%v)", err)
	}

	result = WorkflowListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewListByResourceGroupRequest(resourceGroupName string, top int, filter string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListByResourceGroupRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) ListByResourceGroupRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows"))
}

// Get gets a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name.
func (client *WorkflowsClient) Get(resourceGroupName string, workflowName string) (result Workflow, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Get request (%v)", err)
	}

	result = Workflow{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewGetRequest(resourceGroupName string, workflowName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"))
}

// CreateOrUpdate creates or updates a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. workflow is the workflow.
func (client *WorkflowsClient) CreateOrUpdate(resourceGroupName string, workflowName string, workflow Workflow) (result Workflow, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, workflowName, workflow)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.CreateOrUpdate request (%v)", err)
	}

	result = Workflow{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewCreateOrUpdateRequest(resourceGroupName string, workflowName string, workflow Workflow) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(workflow),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"))
}

// Update updates a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. workflow is the workflow.
func (client *WorkflowsClient) Update(resourceGroupName string, workflowName string, workflow Workflow) (result Workflow, err error) {

	req, err := client.NewUpdateRequest(resourceGroupName, workflowName, workflow)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.Update request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Update request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Update request (%v)", err)
	}

	result = Workflow{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewUpdateRequest(resourceGroupName string, workflowName string, workflow Workflow) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.UpdateRequestPreparer(),
		autorest.WithJSON(workflow),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) UpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"))
}

// Delete deletes a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name.
func (client *WorkflowsClient) Delete(resourceGroupName string, workflowName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, workflowName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowsClient) NewDeleteRequest(resourceGroupName string, workflowName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"))
}

// Run runs a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. parameters is the parameters.
func (client *WorkflowsClient) Run(resourceGroupName string, workflowName string, parameters RunWorkflowParameters) (result WorkflowRun, err error) {

	req, err := client.NewRunRequest(resourceGroupName, workflowName, parameters)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowsClient.Run request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Run request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Run request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowsClient.Run request (%v)", err)
	}

	result = WorkflowRun{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowsClient) NewRunRequest(resourceGroupName string, workflowName string, parameters RunWorkflowParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RunRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) RunRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/run"))
}

// Disable disables a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name.
func (client *WorkflowsClient) Disable(resourceGroupName string, workflowName string) (err error) {

	req, err := client.NewDisableRequest(resourceGroupName, workflowName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowsClient.Disable request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Disable request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Disable request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowsClient) NewDisableRequest(resourceGroupName string, workflowName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DisableRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) DisableRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable"))
}

// Enable enables a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name.
func (client *WorkflowsClient) Enable(resourceGroupName string, workflowName string) (err error) {

	req, err := client.NewEnableRequest(resourceGroupName, workflowName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowsClient.Enable request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Enable request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Enable request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowsClient) NewEnableRequest(resourceGroupName string, workflowName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.EnableRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) EnableRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable"))
}

// Validate validates a workflow.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. workflow is the workflow.
func (client *WorkflowsClient) Validate(resourceGroupName string, workflowName string, workflow Workflow) (err error) {

	req, err := client.NewValidateRequest(resourceGroupName, workflowName, workflow)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowsClient.Validate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Validate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowsClient.Validate request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowsClient) NewValidateRequest(resourceGroupName string, workflowName string, workflow Workflow) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ValidateRequestPreparer(),
		autorest.WithJSON(workflow),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowsClient) ValidateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowVersions Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowVersionsClient struct {
	LogicManagementClient
}

func NewWorkflowVersionsClient(subscriptionId string) *WorkflowVersionsClient {
	return NewWorkflowVersionsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowVersionsClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowVersionsClient {
	return &WorkflowVersionsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Get gets a workflow version.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. versionId is the workflow versionId.
func (client *WorkflowVersionsClient) Get(resourceGroupName string, workflowName string, versionId string) (result WorkflowVersion, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, versionId)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowVersionsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowVersionsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowVersionsClient.Get request (%v)", err)
	}

	result = WorkflowVersion{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowVersionsClient) NewGetRequest(resourceGroupName string, workflowName string, versionId string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"versionId":         url.QueryEscape(versionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowVersionsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowAccessKeys Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowAccessKeysClient struct {
	LogicManagementClient
}

func NewWorkflowAccessKeysClient(subscriptionId string) *WorkflowAccessKeysClient {
	return NewWorkflowAccessKeysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowAccessKeysClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowAccessKeysClient {
	return &WorkflowAccessKeysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets a list of workflow access keys.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. top is the number of items to be included in the result.
func (client *WorkflowAccessKeysClient) List(resourceGroupName string, workflowName string, top int) (result WorkflowAccessKeyListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, workflowName, top)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.List request (%v)", err)
	}

	result = WorkflowAccessKeyListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowAccessKeysClient) NewListRequest(resourceGroupName string, workflowName string, top int) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys"))
}

// Get gets a workflow access key.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. accessKeyName is the workflow access key name.
func (client *WorkflowAccessKeysClient) Get(resourceGroupName string, workflowName string, accessKeyName string) (result WorkflowAccessKey, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, accessKeyName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.Get request (%v)", err)
	}

	result = WorkflowAccessKey{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowAccessKeysClient) NewGetRequest(resourceGroupName string, workflowName string, accessKeyName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accessKeyName":     url.QueryEscape(accessKeyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}"))
}

// CreateOrUpdate creates or updates a workflow access key.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. accessKeyName is the workflow access key name. workflowAccesskey is
// the workflow access key.
func (client *WorkflowAccessKeysClient) CreateOrUpdate(resourceGroupName string, workflowName string, accessKeyName string, workflowAccesskey WorkflowAccessKey) (result WorkflowAccessKey, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, workflowName, accessKeyName, workflowAccesskey)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.CreateOrUpdate request (%v)", err)
	}

	result = WorkflowAccessKey{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowAccessKeysClient) NewCreateOrUpdateRequest(resourceGroupName string, workflowName string, accessKeyName string, workflowAccesskey WorkflowAccessKey) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accessKeyName":     url.QueryEscape(accessKeyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(workflowAccesskey),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}"))
}

// Delete deletes a workflow access key.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. accessKeyName is the workflow access key name.
func (client *WorkflowAccessKeysClient) Delete(resourceGroupName string, workflowName string, accessKeyName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, workflowName, accessKeyName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowAccessKeysClient) NewDeleteRequest(resourceGroupName string, workflowName string, accessKeyName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accessKeyName":     url.QueryEscape(accessKeyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}"))
}

// ListSecretKeys lists secret keys.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. accessKeyName is the workflow access key name.
func (client *WorkflowAccessKeysClient) ListSecretKeys(resourceGroupName string, workflowName string, accessKeyName string) (result WorkflowSecretKeys, err error) {

	req, err := client.NewListSecretKeysRequest(resourceGroupName, workflowName, accessKeyName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.ListSecretKeys request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.ListSecretKeys request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.ListSecretKeys request (%v)", err)
	}

	result = WorkflowSecretKeys{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowAccessKeysClient) NewListSecretKeysRequest(resourceGroupName string, workflowName string, accessKeyName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accessKeyName":     url.QueryEscape(accessKeyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListSecretKeysRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) ListSecretKeysRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/list"))
}

// RegenerateSecretKey regenerates secret key.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. accessKeyName is the workflow access key name. parameters is the
// parameters.
func (client *WorkflowAccessKeysClient) RegenerateSecretKey(resourceGroupName string, workflowName string, accessKeyName string, parameters RegenerateSecretKeyParameters) (result WorkflowSecretKeys, err error) {

	req, err := client.NewRegenerateSecretKeyRequest(resourceGroupName, workflowName, accessKeyName, parameters)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowAccessKeysClient.RegenerateSecretKey request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.RegenerateSecretKey request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowAccessKeysClient.RegenerateSecretKey request (%v)", err)
	}

	result = WorkflowSecretKeys{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowAccessKeysClient) NewRegenerateSecretKeyRequest(resourceGroupName string, workflowName string, accessKeyName string, parameters RegenerateSecretKeyParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accessKeyName":     url.QueryEscape(accessKeyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RegenerateSecretKeyRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowAccessKeysClient) RegenerateSecretKeyRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/regenerate"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowTriggers Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowTriggersClient struct {
	LogicManagementClient
}

func NewWorkflowTriggersClient(subscriptionId string) *WorkflowTriggersClient {
	return NewWorkflowTriggersClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowTriggersClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowTriggersClient {
	return &WorkflowTriggersClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets a list of workflow triggers.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. top is the number of items to be included in the result. filter is
// the filter to apply on the operation.
func (client *WorkflowTriggersClient) List(resourceGroupName string, workflowName string, top int, filter string) (result WorkflowTriggerListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, workflowName, top, filter)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowTriggersClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggersClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggersClient.List request (%v)", err)
	}

	result = WorkflowTriggerListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowTriggersClient) NewListRequest(resourceGroupName string, workflowName string, top int, filter string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowTriggersClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/"))
}

// Get gets a workflow trigger.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. triggerName is the workflow trigger name.
func (client *WorkflowTriggersClient) Get(resourceGroupName string, workflowName string, triggerName string) (result WorkflowTrigger, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, triggerName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowTriggersClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggersClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggersClient.Get request (%v)", err)
	}

	result = WorkflowTrigger{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowTriggersClient) NewGetRequest(resourceGroupName string, workflowName string, triggerName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"triggerName":       url.QueryEscape(triggerName),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowTriggersClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}"))
}

// Run runs a workflow trigger.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. triggerName is the workflow trigger name.
func (client *WorkflowTriggersClient) Run(resourceGroupName string, workflowName string, triggerName string) (err error) {

	req, err := client.NewRunRequest(resourceGroupName, workflowName, triggerName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowTriggersClient.Run request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowTriggersClient.Run request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowTriggersClient.Run request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowTriggersClient) NewRunRequest(resourceGroupName string, workflowName string, triggerName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"triggerName":       url.QueryEscape(triggerName),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RunRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowTriggersClient) RunRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/run"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowTriggerHistories Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowTriggerHistoriesClient struct {
	LogicManagementClient
}

func NewWorkflowTriggerHistoriesClient(subscriptionId string) *WorkflowTriggerHistoriesClient {
	return NewWorkflowTriggerHistoriesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowTriggerHistoriesClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowTriggerHistoriesClient {
	return &WorkflowTriggerHistoriesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets a list of workflow trigger histories.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. triggerName is the workflow trigger name. top is the number of items
// to be included in the result.
func (client *WorkflowTriggerHistoriesClient) List(resourceGroupName string, workflowName string, triggerName string, top int) (result WorkflowTriggerHistoryListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, workflowName, triggerName, top)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowTriggerHistoriesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggerHistoriesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggerHistoriesClient.List request (%v)", err)
	}

	result = WorkflowTriggerHistoryListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowTriggerHistoriesClient) NewListRequest(resourceGroupName string, workflowName string, triggerName string, top int) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"triggerName":       url.QueryEscape(triggerName),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowTriggerHistoriesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories"))
}

// Get gets a workflow trigger history.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. triggerName is the workflow trigger name. historyName is the
// workflow trigger history name.
func (client *WorkflowTriggerHistoriesClient) Get(resourceGroupName string, workflowName string, triggerName string, historyName string) (result WorkflowTriggerHistory, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, triggerName, historyName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowTriggerHistoriesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggerHistoriesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowTriggerHistoriesClient.Get request (%v)", err)
	}

	result = WorkflowTriggerHistory{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowTriggerHistoriesClient) NewGetRequest(resourceGroupName string, workflowName string, triggerName string, historyName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"historyName":       url.QueryEscape(historyName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"triggerName":       url.QueryEscape(triggerName),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowTriggerHistoriesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/histories/{historyName}"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowRuns Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowRunsClient struct {
	LogicManagementClient
}

func NewWorkflowRunsClient(subscriptionId string) *WorkflowRunsClient {
	return NewWorkflowRunsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowRunsClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowRunsClient {
	return &WorkflowRunsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets a list of workflow runs.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. top is the number of items to be included in the result. filter is
// the filter to apply on the operation.
func (client *WorkflowRunsClient) List(resourceGroupName string, workflowName string, top int, filter string) (result WorkflowRunListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, workflowName, top, filter)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowRunsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunsClient.List request (%v)", err)
	}

	result = WorkflowRunListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowRunsClient) NewListRequest(resourceGroupName string, workflowName string, top int, filter string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowRunsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs"))
}

// Get gets a workflow run.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. runName is the workflow run name.
func (client *WorkflowRunsClient) Get(resourceGroupName string, workflowName string, runName string) (result WorkflowRun, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, runName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowRunsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunsClient.Get request (%v)", err)
	}

	result = WorkflowRun{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowRunsClient) NewGetRequest(resourceGroupName string, workflowName string, runName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"runName":           url.QueryEscape(runName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowRunsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}"))
}

// Cancel cancels a workflow run.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. runName is the workflow run name.
func (client *WorkflowRunsClient) Cancel(resourceGroupName string, workflowName string, runName string) (err error) {

	req, err := client.NewCancelRequest(resourceGroupName, workflowName, runName)
	if err != nil {
		return fmt.Errorf("logic: Failure preparing WorkflowRunsClient.Cancel request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowRunsClient.Cancel request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("logic: Failure sending WorkflowRunsClient.Cancel request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *WorkflowRunsClient) NewCancelRequest(resourceGroupName string, workflowName string, runName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"runName":           url.QueryEscape(runName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CancelRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowRunsClient) CancelRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/cancel"))
}

////////////////////////////////////////////////////////////////////////////////
//
// WorkflowRunActions Client
//
////////////////////////////////////////////////////////////////////////////////
type WorkflowRunActionsClient struct {
	LogicManagementClient
}

func NewWorkflowRunActionsClient(subscriptionId string) *WorkflowRunActionsClient {
	return NewWorkflowRunActionsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWorkflowRunActionsClientWithBaseUri(baseUri string, subscriptionId string) *WorkflowRunActionsClient {
	return &WorkflowRunActionsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets a list of workflow run actions.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. runName is the workflow run name. top is the number of items to be
// included in the result. filter is the filter to apply on the operation.
func (client *WorkflowRunActionsClient) List(resourceGroupName string, workflowName string, runName string, top int, filter string) (result WorkflowRunActionListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, workflowName, runName, top, filter)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowRunActionsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunActionsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunActionsClient.List request (%v)", err)
	}

	result = WorkflowRunActionListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowRunActionsClient) NewListRequest(resourceGroupName string, workflowName string, runName string, top int, filter string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"runName":           url.QueryEscape(runName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"$filter":     filter,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowRunActionsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions"))
}

// Get gets a workflow run action.;
//
// resourceGroupName is the resource group name. workflowName is the workflow
// name. runName is the workflow run name. actionName is the workflow action
// name.
func (client *WorkflowRunActionsClient) Get(resourceGroupName string, workflowName string, runName string, actionName string) (result WorkflowRunAction, err error) {

	req, err := client.NewGetRequest(resourceGroupName, workflowName, runName, actionName)
	if err != nil {
		return result, fmt.Errorf("logic: Failure preparing WorkflowRunActionsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunActionsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("logic: Failure sending WorkflowRunActionsClient.Get request (%v)", err)
	}

	result = WorkflowRunAction{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *WorkflowRunActionsClient) NewGetRequest(resourceGroupName string, workflowName string, runName string, actionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"actionName":        url.QueryEscape(actionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"runName":           url.QueryEscape(runName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
		"workflowName":      url.QueryEscape(workflowName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *WorkflowRunActionsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}"))
}
