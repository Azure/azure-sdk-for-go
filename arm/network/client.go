// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package network

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2015-05-01-preview"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

type NetworkResourceProviderClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *NetworkResourceProviderClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *NetworkResourceProviderClient {
	client := &NetworkResourceProviderClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

// CheckDnsNameAvailability checks whether a domain name in the cloudapp.net
// zone is available for use.;
//
// location is the location of the domain name domainNameLabel is the domain
// name to be verified. It must conform to the following regular expression:
// ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
func (client *NetworkResourceProviderClient) CheckDnsNameAvailability(location string, domainNameLabel string) (result DnsNameAvailabilityResult, err error) {

	req, err := client.NewCheckDnsNameAvailabilityRequest(location, domainNameLabel)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkResourceProviderClient.CheckDnsNameAvailability request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkResourceProviderClient.CheckDnsNameAvailability request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkResourceProviderClient.CheckDnsNameAvailability request (%v)", err)
	}

	result = DnsNameAvailabilityResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkResourceProviderClient) NewCheckDnsNameAvailabilityRequest(location string, domainNameLabel string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version":     ApiVersion,
		"domainNameLabel": domainNameLabel,
	}

	return autorest.DecoratePreparer(
		client.CheckDnsNameAvailabilityRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkResourceProviderClient) CheckDnsNameAvailabilityRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability"))
}

////////////////////////////////////////////////////////////////////////////////
//
// ApplicationGateways Client
//
////////////////////////////////////////////////////////////////////////////////
type ApplicationGatewaysClient struct {
	NetworkResourceProviderClient
}

func NewApplicationGatewaysClient(subscriptionId string) *ApplicationGatewaysClient {
	return NewApplicationGatewaysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewApplicationGatewaysClientWithBaseUri(baseUri string, subscriptionId string) *ApplicationGatewaysClient {
	return &ApplicationGatewaysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete applicationgateway operation deletes the specified
// applicationgateway.;
//
// resourceGroupName is the name of the resource group. applicationGatewayName
// is the name of the applicationgateway.
func (client *ApplicationGatewaysClient) Delete(resourceGroupName string, applicationGatewayName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *ApplicationGatewaysClient) NewDeleteRequest(resourceGroupName string, applicationGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"applicationGatewayName": url.QueryEscape(applicationGatewayName),
		"resourceGroupName":      url.QueryEscape(resourceGroupName),
		"subscriptionId":         url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"))
}

// Get the Get applicationgateway operation retreives information about the
// specified applicationgateway.;
//
// resourceGroupName is the name of the resource group. applicationGatewayName
// is the name of the applicationgateway.
func (client *ApplicationGatewaysClient) Get(resourceGroupName string, applicationGatewayName string) (result ApplicationGateway, err error) {

	req, err := client.NewGetRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Get request (%v)", err)
	}

	result = ApplicationGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ApplicationGatewaysClient) NewGetRequest(resourceGroupName string, applicationGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"applicationGatewayName": url.QueryEscape(applicationGatewayName),
		"resourceGroupName":      url.QueryEscape(resourceGroupName),
		"subscriptionId":         url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"))
}

// CreateOrUpdate the Put ApplicationGateway operation creates/updates a
// ApplicationGateway;
//
// resourceGroupName is the name of the resource group. applicationGatewayName
// is the name of the ApplicationGateway. parameters is parameters supplied
// to the create/delete ApplicationGateway operation
func (client *ApplicationGatewaysClient) CreateOrUpdate(resourceGroupName string, applicationGatewayName string, parameters ApplicationGateway) (result ApplicationGateway, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, applicationGatewayName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	result = ApplicationGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ApplicationGatewaysClient) NewCreateOrUpdateRequest(resourceGroupName string, applicationGatewayName string, parameters ApplicationGateway) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"applicationGatewayName": url.QueryEscape(applicationGatewayName),
		"resourceGroupName":      url.QueryEscape(resourceGroupName),
		"subscriptionId":         url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"))
}

// List the List ApplicationGateway opertion retrieves all the
// applicationgateways in a resource group.;
//
// resourceGroupName is the name of the resource group.
func (client *ApplicationGatewaysClient) List(resourceGroupName string) (result ApplicationGatewayListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.List request (%v)", err)
	}

	result = ApplicationGatewayListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ApplicationGatewaysClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways"))
}

// ListAll the List applicationgateway opertion retrieves all the
// applicationgateways in a subscription.;
func (client *ApplicationGatewaysClient) ListAll() (result ApplicationGatewayListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending ApplicationGatewaysClient.ListAll request (%v)", err)
	}

	result = ApplicationGatewayListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ApplicationGatewaysClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways"))
}

// Start the Start ApplicationGateway operation starts application gatewayin
// the specified resource group through Network resource provider.;
//
// resourceGroupName is the name of the resource group. applicationGatewayName
// is the name of the application gateway.
func (client *ApplicationGatewaysClient) Start(resourceGroupName string, applicationGatewayName string) (err error) {

	req, err := client.NewStartRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.Start request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Start request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Start request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Start request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *ApplicationGatewaysClient) NewStartRequest(resourceGroupName string, applicationGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"applicationGatewayName": url.QueryEscape(applicationGatewayName),
		"resourceGroupName":      url.QueryEscape(resourceGroupName),
		"subscriptionId":         url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.StartRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) StartRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start"))
}

// Stop the STOP ApplicationGateway operation stops application gatewayin the
// specified resource group through Network resource provider.;
//
// resourceGroupName is the name of the resource group. applicationGatewayName
// is the name of the application gateway.
func (client *ApplicationGatewaysClient) Stop(resourceGroupName string, applicationGatewayName string) (err error) {

	req, err := client.NewStopRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing ApplicationGatewaysClient.Stop request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Stop request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Stop request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending ApplicationGatewaysClient.Stop request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *ApplicationGatewaysClient) NewStopRequest(resourceGroupName string, applicationGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"applicationGatewayName": url.QueryEscape(applicationGatewayName),
		"resourceGroupName":      url.QueryEscape(resourceGroupName),
		"subscriptionId":         url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.StopRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ApplicationGatewaysClient) StopRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop"))
}

////////////////////////////////////////////////////////////////////////////////
//
// LoadBalancers Client
//
////////////////////////////////////////////////////////////////////////////////
type LoadBalancersClient struct {
	NetworkResourceProviderClient
}

func NewLoadBalancersClient(subscriptionId string) *LoadBalancersClient {
	return NewLoadBalancersClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewLoadBalancersClientWithBaseUri(baseUri string, subscriptionId string) *LoadBalancersClient {
	return &LoadBalancersClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete loadbalancer operation deletes the specified loadbalancer.;
//
// resourceGroupName is the name of the resource group. loadBalancerName is
// the name of the loadBalancer.
func (client *LoadBalancersClient) Delete(resourceGroupName string, loadBalancerName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, loadBalancerName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing LoadBalancersClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending LoadBalancersClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending LoadBalancersClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending LoadBalancersClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *LoadBalancersClient) NewDeleteRequest(resourceGroupName string, loadBalancerName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"loadBalancerName":  url.QueryEscape(loadBalancerName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LoadBalancersClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}"))
}

// Get the Get ntework interface operation retreives information about the
// specified network interface.;
//
// resourceGroupName is the name of the resource group. loadBalancerName is
// the name of the loadBalancer.
func (client *LoadBalancersClient) Get(resourceGroupName string, loadBalancerName string) (result LoadBalancer, err error) {

	req, err := client.NewGetRequest(resourceGroupName, loadBalancerName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LoadBalancersClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.Get request (%v)", err)
	}

	result = LoadBalancer{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LoadBalancersClient) NewGetRequest(resourceGroupName string, loadBalancerName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"loadBalancerName":  url.QueryEscape(loadBalancerName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LoadBalancersClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}"))
}

// CreateOrUpdate the Put LoadBalancer operation creates/updates a LoadBalancer;
//
// resourceGroupName is the name of the resource group. loadBalancerName is
// the name of the loadBalancer. parameters is parameters supplied to the
// create/delete LoadBalancer operation
func (client *LoadBalancersClient) CreateOrUpdate(resourceGroupName string, loadBalancerName string, parameters LoadBalancer) (result LoadBalancer, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, loadBalancerName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LoadBalancersClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.CreateOrUpdate request (%v)", err)
	}

	result = LoadBalancer{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LoadBalancersClient) NewCreateOrUpdateRequest(resourceGroupName string, loadBalancerName string, parameters LoadBalancer) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"loadBalancerName":  url.QueryEscape(loadBalancerName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LoadBalancersClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}"))
}

// ListAll the List loadBalancer opertion retrieves all the loadbalancers in a
// subscription.;
func (client *LoadBalancersClient) ListAll() (result LoadBalancerListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LoadBalancersClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.ListAll request (%v)", err)
	}

	result = LoadBalancerListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LoadBalancersClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LoadBalancersClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers"))
}

// List the List loadBalancer opertion retrieves all the loadbalancers in a
// resource group.;
//
// resourceGroupName is the name of the resource group.
func (client *LoadBalancersClient) List(resourceGroupName string) (result LoadBalancerListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LoadBalancersClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LoadBalancersClient.List request (%v)", err)
	}

	result = LoadBalancerListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LoadBalancersClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LoadBalancersClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers"))
}

////////////////////////////////////////////////////////////////////////////////
//
// LocalNetworkGateways Client
//
////////////////////////////////////////////////////////////////////////////////
type LocalNetworkGatewaysClient struct {
	NetworkResourceProviderClient
}

func NewLocalNetworkGatewaysClient(subscriptionId string) *LocalNetworkGatewaysClient {
	return NewLocalNetworkGatewaysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewLocalNetworkGatewaysClientWithBaseUri(baseUri string, subscriptionId string) *LocalNetworkGatewaysClient {
	return &LocalNetworkGatewaysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CreateOrUpdate the Put LocalNetworkGateway operation creates/updates a
// local network gateway in the specified resource group through Network
// resource provider.;
//
// resourceGroupName is the name of the resource group.
// localNetworkGatewayName is the name of the local network gateway.
// parameters is parameters supplied to the Begin Create or update Local
// Network Gateway operation through Network resource provider.
func (client *LocalNetworkGatewaysClient) CreateOrUpdate(resourceGroupName string, localNetworkGatewayName string, parameters LocalNetworkGateway) (result LocalNetworkGateway, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, localNetworkGatewayName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LocalNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	result = LocalNetworkGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LocalNetworkGatewaysClient) NewCreateOrUpdateRequest(resourceGroupName string, localNetworkGatewayName string, parameters LocalNetworkGateway) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"localNetworkGatewayName": url.QueryEscape(localNetworkGatewayName),
		"resourceGroupName":       url.QueryEscape(resourceGroupName),
		"subscriptionId":          url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LocalNetworkGatewaysClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}"))
}

// Get the Get LocalNetworkGateway operation retrieves information about the
// specified local network gateway through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// localNetworkGatewayName is the name of the local network gateway.
func (client *LocalNetworkGatewaysClient) Get(resourceGroupName string, localNetworkGatewayName string) (result LocalNetworkGateway, err error) {

	req, err := client.NewGetRequest(resourceGroupName, localNetworkGatewayName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LocalNetworkGatewaysClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.Get request (%v)", err)
	}

	result = LocalNetworkGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LocalNetworkGatewaysClient) NewGetRequest(resourceGroupName string, localNetworkGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"localNetworkGatewayName": url.QueryEscape(localNetworkGatewayName),
		"resourceGroupName":       url.QueryEscape(resourceGroupName),
		"subscriptionId":          url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LocalNetworkGatewaysClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}"))
}

// Delete the Delete LocalNetworkGateway operation deletes the specifed local
// network Gateway through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// localNetworkGatewayName is the name of the local network gateway.
func (client *LocalNetworkGatewaysClient) Delete(resourceGroupName string, localNetworkGatewayName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, localNetworkGatewayName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing LocalNetworkGatewaysClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *LocalNetworkGatewaysClient) NewDeleteRequest(resourceGroupName string, localNetworkGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"localNetworkGatewayName": url.QueryEscape(localNetworkGatewayName),
		"resourceGroupName":       url.QueryEscape(resourceGroupName),
		"subscriptionId":          url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LocalNetworkGatewaysClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}/"))
}

// List the List LocalNetworkGateways opertion retrieves all the local network
// gateways stored.;
//
// resourceGroupName is the name of the resource group.
func (client *LocalNetworkGatewaysClient) List(resourceGroupName string) (result LocalNetworkGatewayListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing LocalNetworkGatewaysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending LocalNetworkGatewaysClient.List request (%v)", err)
	}

	result = LocalNetworkGatewayListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *LocalNetworkGatewaysClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *LocalNetworkGatewaysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways"))
}

////////////////////////////////////////////////////////////////////////////////
//
// NetworkInterfaces Client
//
////////////////////////////////////////////////////////////////////////////////
type NetworkInterfacesClient struct {
	NetworkResourceProviderClient
}

func NewNetworkInterfacesClient(subscriptionId string) *NetworkInterfacesClient {
	return NewNetworkInterfacesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewNetworkInterfacesClientWithBaseUri(baseUri string, subscriptionId string) *NetworkInterfacesClient {
	return &NetworkInterfacesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete netwokInterface operation deletes the specified
// netwokInterface.;
//
// resourceGroupName is the name of the resource group. networkInterfaceName
// is the name of the network interface.
func (client *NetworkInterfacesClient) Delete(resourceGroupName string, networkInterfaceName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, networkInterfaceName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing NetworkInterfacesClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkInterfacesClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkInterfacesClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkInterfacesClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *NetworkInterfacesClient) NewDeleteRequest(resourceGroupName string, networkInterfaceName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkInterfaceName": url.QueryEscape(networkInterfaceName),
		"resourceGroupName":    url.QueryEscape(resourceGroupName),
		"subscriptionId":       url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkInterfacesClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"))
}

// Get the Get ntework interface operation retreives information about the
// specified network interface.;
//
// resourceGroupName is the name of the resource group. networkInterfaceName
// is the name of the network interface.
func (client *NetworkInterfacesClient) Get(resourceGroupName string, networkInterfaceName string) (result NetworkInterface, err error) {

	req, err := client.NewGetRequest(resourceGroupName, networkInterfaceName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkInterfacesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.Get request (%v)", err)
	}

	result = NetworkInterface{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkInterfacesClient) NewGetRequest(resourceGroupName string, networkInterfaceName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkInterfaceName": url.QueryEscape(networkInterfaceName),
		"resourceGroupName":    url.QueryEscape(resourceGroupName),
		"subscriptionId":       url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkInterfacesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"))
}

// CreateOrUpdate the Put NetworkInterface operation creates/updates a
// networkInterface;
//
// resourceGroupName is the name of the resource group. networkInterfaceName
// is the name of the network interface. parameters is parameters supplied to
// the create/update NetworkInterface operation
func (client *NetworkInterfacesClient) CreateOrUpdate(resourceGroupName string, networkInterfaceName string, parameters NetworkInterface) (result NetworkInterface, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, networkInterfaceName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkInterfacesClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.CreateOrUpdate request (%v)", err)
	}

	result = NetworkInterface{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkInterfacesClient) NewCreateOrUpdateRequest(resourceGroupName string, networkInterfaceName string, parameters NetworkInterface) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkInterfaceName": url.QueryEscape(networkInterfaceName),
		"resourceGroupName":    url.QueryEscape(resourceGroupName),
		"subscriptionId":       url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkInterfacesClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}"))
}

// ListAll the List networkInterfaces opertion retrieves all the
// networkInterfaces in a subscription.;
func (client *NetworkInterfacesClient) ListAll() (result NetworkInterfaceListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkInterfacesClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.ListAll request (%v)", err)
	}

	result = NetworkInterfaceListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkInterfacesClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkInterfacesClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces"))
}

// List the List networkInterfaces opertion retrieves all the
// networkInterfaces in a resource group.;
//
// resourceGroupName is the name of the resource group.
func (client *NetworkInterfacesClient) List(resourceGroupName string) (result NetworkInterfaceListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkInterfacesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkInterfacesClient.List request (%v)", err)
	}

	result = NetworkInterfaceListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkInterfacesClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkInterfacesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces"))
}

////////////////////////////////////////////////////////////////////////////////
//
// NetworkSecurityGroups Client
//
////////////////////////////////////////////////////////////////////////////////
type NetworkSecurityGroupsClient struct {
	NetworkResourceProviderClient
}

func NewNetworkSecurityGroupsClient(subscriptionId string) *NetworkSecurityGroupsClient {
	return NewNetworkSecurityGroupsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewNetworkSecurityGroupsClientWithBaseUri(baseUri string, subscriptionId string) *NetworkSecurityGroupsClient {
	return &NetworkSecurityGroupsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the Delete NetworkSecurityGroup operation deletes the specifed
// network security group;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
func (client *NetworkSecurityGroupsClient) Delete(resourceGroupName string, networkSecurityGroupName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, networkSecurityGroupName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing NetworkSecurityGroupsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *NetworkSecurityGroupsClient) NewDeleteRequest(resourceGroupName string, networkSecurityGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkSecurityGroupsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}"))
}

// Get the Get NetworkSecurityGroups operation retrieves information about the
// specified network security group.;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
func (client *NetworkSecurityGroupsClient) Get(resourceGroupName string, networkSecurityGroupName string) (result NetworkSecurityGroup, err error) {

	req, err := client.NewGetRequest(resourceGroupName, networkSecurityGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkSecurityGroupsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.Get request (%v)", err)
	}

	result = NetworkSecurityGroup{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkSecurityGroupsClient) NewGetRequest(resourceGroupName string, networkSecurityGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkSecurityGroupsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}"))
}

// CreateOrUpdate the Put NetworkSecurityGroup operation creates/updates a
// network security groupin the specified resource group.;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
// parameters is parameters supplied to the create/update Network Security
// Group operation
func (client *NetworkSecurityGroupsClient) CreateOrUpdate(resourceGroupName string, networkSecurityGroupName string, parameters NetworkSecurityGroup) (result NetworkSecurityGroup, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, networkSecurityGroupName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkSecurityGroupsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.CreateOrUpdate request (%v)", err)
	}

	result = NetworkSecurityGroup{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkSecurityGroupsClient) NewCreateOrUpdateRequest(resourceGroupName string, networkSecurityGroupName string, parameters NetworkSecurityGroup) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkSecurityGroupsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}"))
}

// ListAll the list NetworkSecurityGroups returns all network security groups
// in a subscription;
func (client *NetworkSecurityGroupsClient) ListAll() (result NetworkSecurityGroupListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkSecurityGroupsClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.ListAll request (%v)", err)
	}

	result = NetworkSecurityGroupListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkSecurityGroupsClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkSecurityGroupsClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups"))
}

// List the list NetworkSecurityGroups returns all network security groups in
// a resource group;
//
// resourceGroupName is the name of the resource group.
func (client *NetworkSecurityGroupsClient) List(resourceGroupName string) (result NetworkSecurityGroupListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing NetworkSecurityGroupsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending NetworkSecurityGroupsClient.List request (%v)", err)
	}

	result = NetworkSecurityGroupListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *NetworkSecurityGroupsClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *NetworkSecurityGroupsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups"))
}

////////////////////////////////////////////////////////////////////////////////
//
// PublicIpAddresses Client
//
////////////////////////////////////////////////////////////////////////////////
type PublicIpAddressesClient struct {
	NetworkResourceProviderClient
}

func NewPublicIpAddressesClient(subscriptionId string) *PublicIpAddressesClient {
	return NewPublicIpAddressesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewPublicIpAddressesClientWithBaseUri(baseUri string, subscriptionId string) *PublicIpAddressesClient {
	return &PublicIpAddressesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete publicIpAddress operation deletes the specified
// publicIpAddress.;
//
// resourceGroupName is the name of the resource group. publicIpAddressName is
// the name of the subnet.
func (client *PublicIpAddressesClient) Delete(resourceGroupName string, publicIpAddressName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, publicIpAddressName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing PublicIpAddressesClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending PublicIpAddressesClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending PublicIpAddressesClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending PublicIpAddressesClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *PublicIpAddressesClient) NewDeleteRequest(resourceGroupName string, publicIpAddressName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"publicIpAddressName": url.QueryEscape(publicIpAddressName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *PublicIpAddressesClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}/"))
}

// Get the Get publicIpAddress operation retreives information about the
// specified pubicIpAddress;
//
// resourceGroupName is the name of the resource group. publicIpAddressName is
// the name of the subnet.
func (client *PublicIpAddressesClient) Get(resourceGroupName string, publicIpAddressName string) (result PublicIpAddress, err error) {

	req, err := client.NewGetRequest(resourceGroupName, publicIpAddressName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing PublicIpAddressesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.Get request (%v)", err)
	}

	result = PublicIpAddress{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *PublicIpAddressesClient) NewGetRequest(resourceGroupName string, publicIpAddressName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"publicIpAddressName": url.QueryEscape(publicIpAddressName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *PublicIpAddressesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}/"))
}

// CreateOrUpdate the Put PublicIPAddress operation creates/updates a
// stable/dynamic PublicIP address;
//
// resourceGroupName is the name of the resource group. publicIpAddressName is
// the name of the publicIpAddress. parameters is parameters supplied to the
// create/update PublicIPAddress operation
func (client *PublicIpAddressesClient) CreateOrUpdate(resourceGroupName string, publicIpAddressName string, parameters PublicIpAddress) (result PublicIpAddress, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, publicIpAddressName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing PublicIpAddressesClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.CreateOrUpdate request (%v)", err)
	}

	result = PublicIpAddress{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *PublicIpAddressesClient) NewCreateOrUpdateRequest(resourceGroupName string, publicIpAddressName string, parameters PublicIpAddress) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"publicIpAddressName": url.QueryEscape(publicIpAddressName),
		"resourceGroupName":   url.QueryEscape(resourceGroupName),
		"subscriptionId":      url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *PublicIpAddressesClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}/"))
}

// ListAll the List publicIpAddress opertion retrieves all the
// publicIpAddresses in a subscription.;
func (client *PublicIpAddressesClient) ListAll() (result PublicIpAddressListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing PublicIpAddressesClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.ListAll request (%v)", err)
	}

	result = PublicIpAddressListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *PublicIpAddressesClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *PublicIpAddressesClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses"))
}

// List the List publicIpAddress opertion retrieves all the publicIpAddresses
// in a resource group.;
//
// resourceGroupName is the name of the resource group.
func (client *PublicIpAddressesClient) List(resourceGroupName string) (result PublicIpAddressListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing PublicIpAddressesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending PublicIpAddressesClient.List request (%v)", err)
	}

	result = PublicIpAddressListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *PublicIpAddressesClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *PublicIpAddressesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses"))
}

////////////////////////////////////////////////////////////////////////////////
//
// SecurityRules Client
//
////////////////////////////////////////////////////////////////////////////////
type SecurityRulesClient struct {
	NetworkResourceProviderClient
}

func NewSecurityRulesClient(subscriptionId string) *SecurityRulesClient {
	return NewSecurityRulesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewSecurityRulesClientWithBaseUri(baseUri string, subscriptionId string) *SecurityRulesClient {
	return &SecurityRulesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete network security rule operation deletes the specified
// network security rule.;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
// securityRuleName is the name of the security rule.
func (client *SecurityRulesClient) Delete(resourceGroupName string, networkSecurityGroupName string, securityRuleName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, networkSecurityGroupName, securityRuleName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing SecurityRulesClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending SecurityRulesClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending SecurityRulesClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending SecurityRulesClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *SecurityRulesClient) NewDeleteRequest(resourceGroupName string, networkSecurityGroupName string, securityRuleName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"securityRuleName":         url.QueryEscape(securityRuleName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SecurityRulesClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"))
}

// Get the Get NetworkSecurityRule operation retreives information about the
// specified network security rule.;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
// securityRuleName is the name of the security rule.
func (client *SecurityRulesClient) Get(resourceGroupName string, networkSecurityGroupName string, securityRuleName string) (result SecurityRule, err error) {

	req, err := client.NewGetRequest(resourceGroupName, networkSecurityGroupName, securityRuleName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SecurityRulesClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.Get request (%v)", err)
	}

	result = SecurityRule{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SecurityRulesClient) NewGetRequest(resourceGroupName string, networkSecurityGroupName string, securityRuleName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"securityRuleName":         url.QueryEscape(securityRuleName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SecurityRulesClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"))
}

// CreateOrUpdate the Put network security rule operation creates/updates a
// security rule in the specified network security group;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
// securityRuleName is the name of the security rule. securityRuleParameters
// is parameters supplied to the create/update network security rule
// operation
func (client *SecurityRulesClient) CreateOrUpdate(resourceGroupName string, networkSecurityGroupName string, securityRuleName string, securityRuleParameters SecurityRule) (result SecurityRule, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SecurityRulesClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.CreateOrUpdate request (%v)", err)
	}

	result = SecurityRule{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SecurityRulesClient) NewCreateOrUpdateRequest(resourceGroupName string, networkSecurityGroupName string, securityRuleName string, securityRuleParameters SecurityRule) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"securityRuleName":         url.QueryEscape(securityRuleName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(securityRuleParameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SecurityRulesClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}"))
}

// List the List network security rule opertion retrieves all the security
// rules in a network security group.;
//
// resourceGroupName is the name of the resource group.
// networkSecurityGroupName is the name of the network security group.
func (client *SecurityRulesClient) List(resourceGroupName string, networkSecurityGroupName string) (result SecurityRuleListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, networkSecurityGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SecurityRulesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SecurityRulesClient.List request (%v)", err)
	}

	result = SecurityRuleListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SecurityRulesClient) NewListRequest(resourceGroupName string, networkSecurityGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"networkSecurityGroupName": url.QueryEscape(networkSecurityGroupName),
		"resourceGroupName":        url.QueryEscape(resourceGroupName),
		"subscriptionId":           url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SecurityRulesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules"))
}

////////////////////////////////////////////////////////////////////////////////
//
// Subnets Client
//
////////////////////////////////////////////////////////////////////////////////
type SubnetsClient struct {
	NetworkResourceProviderClient
}

func NewSubnetsClient(subscriptionId string) *SubnetsClient {
	return NewSubnetsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewSubnetsClientWithBaseUri(baseUri string, subscriptionId string) *SubnetsClient {
	return &SubnetsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the delete subnet operation deletes the specified subnet.;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network. subnetName is the name of the subnet.
func (client *SubnetsClient) Delete(resourceGroupName string, virtualNetworkName string, subnetName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, virtualNetworkName, subnetName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing SubnetsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending SubnetsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending SubnetsClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending SubnetsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *SubnetsClient) NewDeleteRequest(resourceGroupName string, virtualNetworkName string, subnetName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subnetName":         url.QueryEscape(subnetName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SubnetsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}"))
}

// Get the Get subnet operation retreives information about the specified
// subnet.;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network. subnetName is the name of the subnet.
func (client *SubnetsClient) Get(resourceGroupName string, virtualNetworkName string, subnetName string) (result Subnet, err error) {

	req, err := client.NewGetRequest(resourceGroupName, virtualNetworkName, subnetName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SubnetsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.Get request (%v)", err)
	}

	result = Subnet{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SubnetsClient) NewGetRequest(resourceGroupName string, virtualNetworkName string, subnetName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subnetName":         url.QueryEscape(subnetName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SubnetsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}"))
}

// CreateOrUpdate the Put Subnet operation creates/updates a subnet in
// thespecified virtual network;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network. subnetName is the name of the subnet.
// subnetParameters is parameters supplied to the create/update Subnet
// operation
func (client *SubnetsClient) CreateOrUpdate(resourceGroupName string, virtualNetworkName string, subnetName string, subnetParameters Subnet) (result Subnet, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, virtualNetworkName, subnetName, subnetParameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SubnetsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.CreateOrUpdate request (%v)", err)
	}

	result = Subnet{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SubnetsClient) NewCreateOrUpdateRequest(resourceGroupName string, virtualNetworkName string, subnetName string, subnetParameters Subnet) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subnetName":         url.QueryEscape(subnetName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(subnetParameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SubnetsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets/{subnetName}"))
}

// List the List subnets opertion retrieves all the subnets in a virtual
// network.;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network.
func (client *SubnetsClient) List(resourceGroupName string, virtualNetworkName string) (result SubnetListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, virtualNetworkName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing SubnetsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending SubnetsClient.List request (%v)", err)
	}

	result = SubnetListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *SubnetsClient) NewListRequest(resourceGroupName string, virtualNetworkName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *SubnetsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}/subnets"))
}

////////////////////////////////////////////////////////////////////////////////
//
// Usages Client
//
////////////////////////////////////////////////////////////////////////////////
type UsagesClient struct {
	NetworkResourceProviderClient
}

func NewUsagesClient(subscriptionId string) *UsagesClient {
	return NewUsagesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewUsagesClientWithBaseUri(baseUri string, subscriptionId string) *UsagesClient {
	return &UsagesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List lists compute usages for a subscription.;
//
// location is the location upon which resource usage is queried.
func (client *UsagesClient) List(location string) (result UsagesListResult, err error) {

	req, err := client.NewListRequest(location)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing UsagesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending UsagesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending UsagesClient.List request (%v)", err)
	}

	result = UsagesListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *UsagesClient) NewListRequest(location string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"location":       url.QueryEscape(location),
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *UsagesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualNetworkGatewayConnections Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualNetworkGatewayConnectionsClient struct {
	NetworkResourceProviderClient
}

func NewVirtualNetworkGatewayConnectionsClient(subscriptionId string) *VirtualNetworkGatewayConnectionsClient {
	return NewVirtualNetworkGatewayConnectionsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualNetworkGatewayConnectionsClientWithBaseUri(baseUri string, subscriptionId string) *VirtualNetworkGatewayConnectionsClient {
	return &VirtualNetworkGatewayConnectionsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CreateOrUpdate the Put VirtualNetworkGatewayConnection operation
// creates/updates a virtual network gateway connection in the specified
// resource group through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the name of the virtual network
// gateway conenction. parameters is parameters supplied to the Begin Create
// or update Virtual Network Gateway connection operation through Network
// resource provider.
func (client *VirtualNetworkGatewayConnectionsClient) CreateOrUpdate(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters VirtualNetworkGatewayConnection) (result VirtualNetworkGatewayConnection, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.CreateOrUpdate request (%v)", err)
	}

	result = VirtualNetworkGatewayConnection{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewCreateOrUpdateRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters VirtualNetworkGatewayConnection) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}"))
}

// Get the Get VirtualNetworkGatewayConnection operation retrieves information
// about the specified virtual network gateway connection through Network
// resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the name of the virtual network
// gateway connection.
func (client *VirtualNetworkGatewayConnectionsClient) Get(resourceGroupName string, virtualNetworkGatewayConnectionName string) (result VirtualNetworkGatewayConnection, err error) {

	req, err := client.NewGetRequest(resourceGroupName, virtualNetworkGatewayConnectionName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.Get request (%v)", err)
	}

	result = VirtualNetworkGatewayConnection{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewGetRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}"))
}

// Delete the Delete VirtualNetworkGatewayConnection operation deletes the
// specifed virtual network Gateway connection through Network resource
// provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the name of the virtual network
// gateway connection.
func (client *VirtualNetworkGatewayConnectionsClient) Delete(resourceGroupName string, virtualNetworkGatewayConnectionName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, virtualNetworkGatewayConnectionName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualNetworkGatewayConnectionsClient) NewDeleteRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/"))
}

// GetSharedKey the Get VirtualNetworkGatewayConnectionSharedKey operation
// retrieves information about the specified virtual network gateway
// connection shared key through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the virtual network gateway
// connection shared key name.
func (client *VirtualNetworkGatewayConnectionsClient) GetSharedKey(resourceGroupName string, virtualNetworkGatewayConnectionName string) (result ConnectionSharedKey, err error) {

	req, err := client.NewGetSharedKeyRequest(resourceGroupName, virtualNetworkGatewayConnectionName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.GetSharedKey request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.GetSharedKey request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.GetSharedKey request (%v)", err)
	}

	result = ConnectionSharedKey{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewGetSharedKeyRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetSharedKeyRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) GetSharedKeyRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey"))
}

// SetSharedKey the Put VirtualNetworkGatewayConnectionSharedKey operation
// sets the virtual network gateway connection shared key for passed virtual
// network gateway connection in the specified resource group through Network
// resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the virtual network gateway
// connection name. parameters is parameters supplied to the Begin Set
// Virtual Network Gateway conection Shared key operation throughNetwork
// resource provider.
func (client *VirtualNetworkGatewayConnectionsClient) SetSharedKey(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters ConnectionSharedKey) (result ConnectionSharedKey, err error) {

	req, err := client.NewSetSharedKeyRequest(resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.SetSharedKey request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.SetSharedKey request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.SetSharedKey request (%v)", err)
	}

	result = ConnectionSharedKey{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewSetSharedKeyRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters ConnectionSharedKey) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.SetSharedKeyRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) SetSharedKeyRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey"))
}

// List the List VirtualNetworkGatewayConnections operation retrieves all the
// virtual network gateways connections created.;
//
// resourceGroupName is the name of the resource group.
func (client *VirtualNetworkGatewayConnectionsClient) List(resourceGroupName string) (result VirtualNetworkGatewayConnectionListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.List request (%v)", err)
	}

	result = VirtualNetworkGatewayConnectionListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections"))
}

// ResetSharedKey the VirtualNetworkGatewayConnectionResetSharedKey operation
// resets the virtual network gateway connection shared key for passed
// virtual network gateway connection in the specified resource group through
// Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayConnectionName is the virtual network gateway
// connection reset shared key Name. parameters is parameters supplied to the
// Begin Reset Virtual Network Gateway connection shared key operation
// through Network resource provider.
func (client *VirtualNetworkGatewayConnectionsClient) ResetSharedKey(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters ConnectionResetSharedKey) (result ConnectionResetSharedKey, err error) {

	req, err := client.NewResetSharedKeyRequest(resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewayConnectionsClient.ResetSharedKey request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.ResetSharedKey request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.ResetSharedKey request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewayConnectionsClient.ResetSharedKey request (%v)", err)
	}

	result = ConnectionResetSharedKey{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewayConnectionsClient) NewResetSharedKeyRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters ConnectionResetSharedKey) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":                   url.QueryEscape(resourceGroupName),
		"subscriptionId":                      url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayConnectionName": url.QueryEscape(virtualNetworkGatewayConnectionName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ResetSharedKeyRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewayConnectionsClient) ResetSharedKeyRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualNetworkGateways Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualNetworkGatewaysClient struct {
	NetworkResourceProviderClient
}

func NewVirtualNetworkGatewaysClient(subscriptionId string) *VirtualNetworkGatewaysClient {
	return NewVirtualNetworkGatewaysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualNetworkGatewaysClientWithBaseUri(baseUri string, subscriptionId string) *VirtualNetworkGatewaysClient {
	return &VirtualNetworkGatewaysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CreateOrUpdate the Put VirtualNetworkGateway operation creates/updates a
// virtual network gateway in the specified resource group through Network
// resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayName is the name of the virtual network gateway.
// parameters is parameters supplied to the Begin Create or update Virtual
// Network Gateway operation through Network resource provider.
func (client *VirtualNetworkGatewaysClient) CreateOrUpdate(resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (result VirtualNetworkGateway, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.CreateOrUpdate request (%v)", err)
	}

	result = VirtualNetworkGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewaysClient) NewCreateOrUpdateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":         url.QueryEscape(resourceGroupName),
		"subscriptionId":            url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayName": url.QueryEscape(virtualNetworkGatewayName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewaysClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworkgateways/{virtualNetworkGatewayName}"))
}

// Get the Get VirtualNetworkGateway operation retrieves information about the
// specified virtual network gateway through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayName is the name of the virtual network gateway.
func (client *VirtualNetworkGatewaysClient) Get(resourceGroupName string, virtualNetworkGatewayName string) (result VirtualNetworkGateway, err error) {

	req, err := client.NewGetRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewaysClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Get request (%v)", err)
	}

	result = VirtualNetworkGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewaysClient) NewGetRequest(resourceGroupName string, virtualNetworkGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":         url.QueryEscape(resourceGroupName),
		"subscriptionId":            url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayName": url.QueryEscape(virtualNetworkGatewayName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewaysClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworkgateways/{virtualNetworkGatewayName}"))
}

// Delete the Delete VirtualNetworkGateway operation deletes the specifed
// virtual network Gateway through Network resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayName is the name of the virtual network gateway.
func (client *VirtualNetworkGatewaysClient) Delete(resourceGroupName string, virtualNetworkGatewayName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing VirtualNetworkGatewaysClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualNetworkGatewaysClient) NewDeleteRequest(resourceGroupName string, virtualNetworkGatewayName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":         url.QueryEscape(resourceGroupName),
		"subscriptionId":            url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayName": url.QueryEscape(virtualNetworkGatewayName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewaysClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/"))
}

// List the List VirtualNetworkGateways opertion retrieves all the virtual
// network gateways stored.;
//
// resourceGroupName is the name of the resource group.
func (client *VirtualNetworkGatewaysClient) List(resourceGroupName string) (result VirtualNetworkGatewayListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewaysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.List request (%v)", err)
	}

	result = VirtualNetworkGatewayListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewaysClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewaysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways"))
}

// Reset the Reset VirtualNetworkGateway operation resets the primary of the
// virtual network gatewayin the specified resource group through Network
// resource provider.;
//
// resourceGroupName is the name of the resource group.
// virtualNetworkGatewayName is the name of the virtual network gateway.
// parameters is parameters supplied to the Begin Reset Virtual Network
// Gateway operation through Network resource provider.
func (client *VirtualNetworkGatewaysClient) Reset(resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (result VirtualNetworkGateway, err error) {

	req, err := client.NewResetRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworkGatewaysClient.Reset request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Reset request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Reset request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworkGatewaysClient.Reset request (%v)", err)
	}

	result = VirtualNetworkGateway{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworkGatewaysClient) NewResetRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":         url.QueryEscape(resourceGroupName),
		"subscriptionId":            url.QueryEscape(client.SubscriptionId),
		"virtualNetworkGatewayName": url.QueryEscape(virtualNetworkGatewayName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ResetRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworkGatewaysClient) ResetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworkgateways/{virtualNetworkGatewayName}/reset"))
}

////////////////////////////////////////////////////////////////////////////////
//
// VirtualNetworks Client
//
////////////////////////////////////////////////////////////////////////////////
type VirtualNetworksClient struct {
	NetworkResourceProviderClient
}

func NewVirtualNetworksClient(subscriptionId string) *VirtualNetworksClient {
	return NewVirtualNetworksClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewVirtualNetworksClientWithBaseUri(baseUri string, subscriptionId string) *VirtualNetworksClient {
	return &VirtualNetworksClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Delete the Delete VirtualNetwork operation deletes the specifed virtual
// network;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network.
func (client *VirtualNetworksClient) Delete(resourceGroupName string, virtualNetworkName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, virtualNetworkName)
	if err != nil {
		return fmt.Errorf("network: Failure preparing VirtualNetworksClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworksClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworksClient.Delete request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return fmt.Errorf("network: Failure sending VirtualNetworksClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *VirtualNetworksClient) NewDeleteRequest(resourceGroupName string, virtualNetworkName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworksClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}"))
}

// Get the Get VirtualNetwork operation retrieves information about the
// specified virtual network.;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network.
func (client *VirtualNetworksClient) Get(resourceGroupName string, virtualNetworkName string) (result VirtualNetwork, err error) {

	req, err := client.NewGetRequest(resourceGroupName, virtualNetworkName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworksClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.Get request (%v)", err)
	}

	result = VirtualNetwork{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworksClient) NewGetRequest(resourceGroupName string, virtualNetworkName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworksClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}"))
}

// CreateOrUpdate the Put VirtualNetwork operation creates/updates a virtual
// network in the specified resource group.;
//
// resourceGroupName is the name of the resource group. virtualNetworkName is
// the name of the virtual network. parameters is parameters supplied to the
// create/update Virtual Network operation
func (client *VirtualNetworksClient) CreateOrUpdate(resourceGroupName string, virtualNetworkName string, parameters VirtualNetwork) (result VirtualNetwork, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, virtualNetworkName, parameters)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworksClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.CreateOrUpdate request (%v)", err)
	}

	result = VirtualNetwork{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworksClient) NewCreateOrUpdateRequest(resourceGroupName string, virtualNetworkName string, parameters VirtualNetwork) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName":  url.QueryEscape(resourceGroupName),
		"subscriptionId":     url.QueryEscape(client.SubscriptionId),
		"virtualNetworkName": url.QueryEscape(virtualNetworkName),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworksClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks/{virtualNetworkName}"))
}

// ListAll the list VirtualNetwork returns all Virtual Networks in a
// subscription;
func (client *VirtualNetworksClient) ListAll() (result VirtualNetworkListResult, err error) {

	req, err := client.NewListAllRequest()
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworksClient.ListAll request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.ListAll request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.ListAll request (%v)", err)
	}

	result = VirtualNetworkListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworksClient) NewListAllRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListAllRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworksClient) ListAllRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualnetworks"))
}

// List the list VirtualNetwork returns all Virtual Networks in a resource
// group;
//
// resourceGroupName is the name of the resource group.
func (client *VirtualNetworksClient) List(resourceGroupName string) (result VirtualNetworkListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("network: Failure preparing VirtualNetworksClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("network: Failure sending VirtualNetworksClient.List request (%v)", err)
	}

	result = VirtualNetworkListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *VirtualNetworksClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *VirtualNetworksClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualnetworks"))
}
