// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package scheduler

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2014-08-01-preview"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

type SchedulerManagementClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *SchedulerManagementClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *SchedulerManagementClient {
	client := &SchedulerManagementClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

////////////////////////////////////////////////////////////////////////////////
//
// JobCollections Client
//
////////////////////////////////////////////////////////////////////////////////
type JobCollectionsClient struct {
	SchedulerManagementClient
}

func NewJobCollectionsClient(subscriptionId string) *JobCollectionsClient {
	return NewJobCollectionsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewJobCollectionsClientWithBaseUri(baseUri string, subscriptionId string) *JobCollectionsClient {
	return &JobCollectionsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// ListBySubscription gets all job collections under specified subscription.;
func (client *JobCollectionsClient) ListBySubscription() (result JobCollectionListResult, err error) {

	req, err := client.NewListBySubscriptionRequest()
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.ListBySubscription request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.ListBySubscription request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.ListBySubscription request (%v)", err)
	}

	result = JobCollectionListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobCollectionsClient) NewListBySubscriptionRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListBySubscriptionRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) ListBySubscriptionRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections"))
}

// ListByResourceGroup gets all job collections under specified resource group.;
//
// resourceGroupName is the resource group name.
func (client *JobCollectionsClient) ListByResourceGroup(resourceGroupName string) (result JobCollectionListResult, err error) {

	req, err := client.NewListByResourceGroupRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.ListByResourceGroup request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.ListByResourceGroup request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.ListByResourceGroup request (%v)", err)
	}

	result = JobCollectionListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobCollectionsClient) NewListByResourceGroupRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListByResourceGroupRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) ListByResourceGroupRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections"))
}

// Get gets a job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name.
func (client *JobCollectionsClient) Get(resourceGroupName string, jobCollectionName string) (result JobCollectionDefinition, err error) {

	req, err := client.NewGetRequest(resourceGroupName, jobCollectionName)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Get request (%v)", err)
	}

	result = JobCollectionDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobCollectionsClient) NewGetRequest(resourceGroupName string, jobCollectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"))
}

// CreateOrUpdate provisions a new job collection or updates an existing job
// collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobCollection is the job collection definition.
func (client *JobCollectionsClient) CreateOrUpdate(resourceGroupName string, jobCollectionName string, jobCollection JobCollectionDefinition) (result JobCollectionDefinition, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, jobCollectionName, jobCollection)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.CreateOrUpdate request (%v)", err)
	}

	result = JobCollectionDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobCollectionsClient) NewCreateOrUpdateRequest(resourceGroupName string, jobCollectionName string, jobCollection JobCollectionDefinition) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(jobCollection),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"))
}

// Patch patches an existing job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobCollection is the job collection definition.
func (client *JobCollectionsClient) Patch(resourceGroupName string, jobCollectionName string, jobCollection JobCollectionDefinition) (result JobCollectionDefinition, err error) {

	req, err := client.NewPatchRequest(resourceGroupName, jobCollectionName, jobCollection)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.Patch request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Patch request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Patch request (%v)", err)
	}

	result = JobCollectionDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobCollectionsClient) NewPatchRequest(resourceGroupName string, jobCollectionName string, jobCollection JobCollectionDefinition) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.PatchRequestPreparer(),
		autorest.WithJSON(jobCollection),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) PatchRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"))
}

// Delete deletes a job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name.
func (client *JobCollectionsClient) Delete(resourceGroupName string, jobCollectionName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, jobCollectionName)
	if err != nil {
		return fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *JobCollectionsClient) NewDeleteRequest(resourceGroupName string, jobCollectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"))
}

// Enable enables all of the jobs in the job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name.
func (client *JobCollectionsClient) Enable(resourceGroupName string, jobCollectionName string) (err error) {

	req, err := client.NewEnableRequest(resourceGroupName, jobCollectionName)
	if err != nil {
		return fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.Enable request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Enable request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Enable request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *JobCollectionsClient) NewEnableRequest(resourceGroupName string, jobCollectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.EnableRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) EnableRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable"))
}

// Disable disables all of the jobs in the job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name.
func (client *JobCollectionsClient) Disable(resourceGroupName string, jobCollectionName string) (err error) {

	req, err := client.NewDisableRequest(resourceGroupName, jobCollectionName)
	if err != nil {
		return fmt.Errorf("scheduler: Failure preparing JobCollectionsClient.Disable request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Disable request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobCollectionsClient.Disable request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *JobCollectionsClient) NewDisableRequest(resourceGroupName string, jobCollectionName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DisableRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobCollectionsClient) DisableRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable"))
}

////////////////////////////////////////////////////////////////////////////////
//
// Jobs Client
//
////////////////////////////////////////////////////////////////////////////////
type JobsClient struct {
	SchedulerManagementClient
}

func NewJobsClient(subscriptionId string) *JobsClient {
	return NewJobsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewJobsClientWithBaseUri(baseUri string, subscriptionId string) *JobsClient {
	return &JobsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// Get gets a job.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name.
func (client *JobsClient) Get(resourceGroupName string, jobCollectionName string, jobName string) (result JobDefinition, err error) {

	req, err := client.NewGetRequest(resourceGroupName, jobCollectionName, jobName)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobsClient.Get request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.Get request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.Get request (%v)", err)
	}

	result = JobDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobsClient) NewGetRequest(resourceGroupName string, jobCollectionName string, jobName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) GetRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"))
}

// CreateOrUpdate provisions a new job or updates an existing job.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name. job is the job definition.
func (client *JobsClient) CreateOrUpdate(resourceGroupName string, jobCollectionName string, jobName string, job JobDefinition) (result JobDefinition, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, jobCollectionName, jobName, job)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobsClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.CreateOrUpdate request (%v)", err)
	}

	result = JobDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobsClient) NewCreateOrUpdateRequest(resourceGroupName string, jobCollectionName string, jobName string, job JobDefinition) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(job),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"))
}

// Patch patches an existing job.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name. job is the job definition.
func (client *JobsClient) Patch(resourceGroupName string, jobCollectionName string, jobName string, job JobDefinition) (result JobDefinition, err error) {

	req, err := client.NewPatchRequest(resourceGroupName, jobCollectionName, jobName, job)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobsClient.Patch request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.Patch request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.Patch request (%v)", err)
	}

	result = JobDefinition{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobsClient) NewPatchRequest(resourceGroupName string, jobCollectionName string, jobName string, job JobDefinition) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.PatchRequestPreparer(),
		autorest.WithJSON(job),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) PatchRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"))
}

// Delete deletes a job.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name.
func (client *JobsClient) Delete(resourceGroupName string, jobCollectionName string, jobName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, jobCollectionName, jobName)
	if err != nil {
		return fmt.Errorf("scheduler: Failure preparing JobsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *JobsClient) NewDeleteRequest(resourceGroupName string, jobCollectionName string, jobName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"))
}

// Run runs a job.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name.
func (client *JobsClient) Run(resourceGroupName string, jobCollectionName string, jobName string) (err error) {

	req, err := client.NewRunRequest(resourceGroupName, jobCollectionName, jobName)
	if err != nil {
		return fmt.Errorf("scheduler: Failure preparing JobsClient.Run request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobsClient.Run request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("scheduler: Failure sending JobsClient.Run request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *JobsClient) NewRunRequest(resourceGroupName string, jobCollectionName string, jobName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RunRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) RunRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run"))
}

// List lists all jobs under the specified job collection.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. top is the number of jobs to request, in the of range
// [1..100]. skip is the (0-based) index of the job history list from which
// to begin requesting entries.
func (client *JobsClient) List(resourceGroupName string, jobCollectionName string, top int, skip int) (result JobListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, jobCollectionName, top, skip)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.List request (%v)", err)
	}

	result = JobListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobsClient) NewListRequest(resourceGroupName string, jobCollectionName string, top int, skip int) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"$skip":       skip,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs"))
}

// ListJobHistory lists job history.;
//
// resourceGroupName is the resource group name. jobCollectionName is the job
// collection name. jobName is the job name. top is the number of job history
// to request, in the of range [1..100]. skip is the (0-based) index of the
// job history list from which to begin requesting entries.
func (client *JobsClient) ListJobHistory(resourceGroupName string, jobCollectionName string, jobName string, top int, skip int) (result JobHistoryListResult, err error) {

	req, err := client.NewListJobHistoryRequest(resourceGroupName, jobCollectionName, jobName, top, skip)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure preparing JobsClient.ListJobHistory request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.ListJobHistory request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("scheduler: Failure sending JobsClient.ListJobHistory request (%v)", err)
	}

	result = JobHistoryListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *JobsClient) NewListJobHistoryRequest(resourceGroupName string, jobCollectionName string, jobName string, top int, skip int) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"jobCollectionName": url.QueryEscape(jobCollectionName),
		"jobName":           url.QueryEscape(jobName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"$skip":       skip,
		"$top":        top,
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListJobHistoryRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *JobsClient) ListJobHistoryRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history"))
}
