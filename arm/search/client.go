// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package search

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2015-02-28"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

////////////////////////////////////////////////////////////////////////////////
//
// Client that can be used to manage Azure Search services and API keys.
//
////////////////////////////////////////////////////////////////////////////////
type SearchManagementClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *SearchManagementClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *SearchManagementClient {
	client := &SearchManagementClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

////////////////////////////////////////////////////////////////////////////////
//
// AdminKeys Client
//
////////////////////////////////////////////////////////////////////////////////
type AdminKeysClient struct {
	SearchManagementClient
}

func NewAdminKeysClient(subscriptionId string) *AdminKeysClient {
	return NewAdminKeysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewAdminKeysClientWithBaseUri(baseUri string, subscriptionId string) *AdminKeysClient {
	return &AdminKeysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List returns the primary and secondary API keys for the given Azure Search
// service.;
//
// resourceGroupName is the name of the resource group within the current
// subscription. serviceName is the name of the Search service for which to
// list admin keys.
func (client *AdminKeysClient) List(resourceGroupName string, serviceName string) (result AdminKeyResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, serviceName)
	if err != nil {
		return result, fmt.Errorf("search: Failure preparing AdminKeysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("search: Failure sending AdminKeysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("search: Failure sending AdminKeysClient.List request (%v)", err)
	}

	result = AdminKeyResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *AdminKeysClient) NewListRequest(resourceGroupName string, serviceName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"serviceName":       url.QueryEscape(serviceName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *AdminKeysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{serviceName}/listAdminKeys"))
}

////////////////////////////////////////////////////////////////////////////////
//
// QueryKeys Client
//
////////////////////////////////////////////////////////////////////////////////
type QueryKeysClient struct {
	SearchManagementClient
}

func NewQueryKeysClient(subscriptionId string) *QueryKeysClient {
	return NewQueryKeysClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewQueryKeysClientWithBaseUri(baseUri string, subscriptionId string) *QueryKeysClient {
	return &QueryKeysClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List returns the list of query API keys for the given Azure Search service.;
//
// resourceGroupName is the name of the resource group within the current
// subscription. serviceName is the name of the Search service for which to
// list query keys.
func (client *QueryKeysClient) List(resourceGroupName string, serviceName string) (result ListQueryKeysResult, err error) {

	req, err := client.NewListRequest(resourceGroupName, serviceName)
	if err != nil {
		return result, fmt.Errorf("search: Failure preparing QueryKeysClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("search: Failure sending QueryKeysClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("search: Failure sending QueryKeysClient.List request (%v)", err)
	}

	result = ListQueryKeysResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *QueryKeysClient) NewListRequest(resourceGroupName string, serviceName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"serviceName":       url.QueryEscape(serviceName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *QueryKeysClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{serviceName}/listQueryKeys"))
}

////////////////////////////////////////////////////////////////////////////////
//
// Services Client
//
////////////////////////////////////////////////////////////////////////////////
type ServicesClient struct {
	SearchManagementClient
}

func NewServicesClient(subscriptionId string) *ServicesClient {
	return NewServicesClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewServicesClientWithBaseUri(baseUri string, subscriptionId string) *ServicesClient {
	return &ServicesClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CreateOrUpdate creates or updates a Search service in the given resource
// group. If the Search service already exists, all properties will be
// updated with the given values.;
//
// resourceGroupName is the name of the resource group within the current
// subscription. serviceName is the name of the Search service to create or
// update. parameters is the properties to set or update on the Search
// service.
func (client *ServicesClient) CreateOrUpdate(resourceGroupName string, serviceName string, parameters SearchServiceCreateOrUpdateParameters) (result SearchServiceResource, err error) {

	req, err := client.NewCreateOrUpdateRequest(resourceGroupName, serviceName, parameters)
	if err != nil {
		return result, fmt.Errorf("search: Failure preparing ServicesClient.CreateOrUpdate request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("search: Failure sending ServicesClient.CreateOrUpdate request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("search: Failure sending ServicesClient.CreateOrUpdate request (%v)", err)
	}

	result = SearchServiceResource{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ServicesClient) NewCreateOrUpdateRequest(resourceGroupName string, serviceName string, parameters SearchServiceCreateOrUpdateParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"serviceName":       url.QueryEscape(serviceName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateOrUpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ServicesClient) CreateOrUpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{serviceName}"))
}

// Delete deletes a Search service in the given resource group, along with its
// associated resources.;
//
// resourceGroupName is the name of the resource group within the current
// subscription. serviceName is the name of the Search service to delete.
func (client *ServicesClient) Delete(resourceGroupName string, serviceName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, serviceName)
	if err != nil {
		return fmt.Errorf("search: Failure preparing ServicesClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("search: Failure sending ServicesClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("search: Failure sending ServicesClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *ServicesClient) NewDeleteRequest(resourceGroupName string, serviceName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"serviceName":       url.QueryEscape(serviceName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ServicesClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices/{serviceName}"))
}

// List returns a list of all Search services in the given resource group.;
//
// resourceGroupName is the name of the resource group within the current
// subscription.
func (client *ServicesClient) List(resourceGroupName string) (result SearchServiceListResult, err error) {

	req, err := client.NewListRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("search: Failure preparing ServicesClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("search: Failure sending ServicesClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("search: Failure sending ServicesClient.List request (%v)", err)
	}

	result = SearchServiceListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *ServicesClient) NewListRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *ServicesClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Search/searchServices"))
}
