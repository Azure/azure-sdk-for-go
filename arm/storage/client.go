package storage

// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/azure/azure-sdk-for-go/arm"
)

const (
	ApiVersion = "2015-05-01-preview"
	BaseUri    = "https://management.azure.com"
)

type StorageManagementClient struct {
	BaseUri string
}

// Checks that account name is valid and is not in use.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
//
func (client StorageManagementClient) CheckNameAvailability(subscriptionId string, accountName StorageAccountCheckNameAvailabilityParameters) (result *CheckNameAvailabilityResponse, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent, err := json.Marshal(accountName)
	if err != nil {
		return nil, fmt.Errorf("Failed to serialize accountName (%v)", err)
	}

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("POST", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &CheckNameAvailabilityResponse{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize CheckNameAvailabilityResponse (%v)", err)
	}

	return result, nil
}

// Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent create request is issued with exact same set of properties, the request succeeds.The max number of storage accounts that can be created per subscription is limited to 20.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
// parameters: The parameters to provide for the created account.
//
func (client StorageManagementClient) Create(subscriptionId string, resourceGroupName string, accountName string, parameters StorageAccountCreateParameters) (result *StorageAccount, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})

	// Construct the body
	bodyContent, err := json.Marshal(parameters)
	if err != nil {
		return nil, fmt.Errorf("Failed to serialize parameters (%v)", err)
	}

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("PUT", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccount{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccount (%v)", err)
	}

	return result, nil
}

// Deletes a storage account in Microsoft Azure.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
//
func (client StorageManagementClient) Delete(subscriptionId string, resourceGroupName string, accountName string) (err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent := ""

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters, queryParameters)
	if err != nil {
		return err
	}

	// Send the request
	response, err := arm.SendRequest("DELETE", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	return
}

// Returns the properties for the specified storage account including but not limited to name, account type, location, and account status. The ListKeys operation should be used to retrieve storage keys.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
//
func (client StorageManagementClient) GetProperties(subscriptionId string, resourceGroupName string, accountName string) (result *StorageAccount, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent := ""

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("GET", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccount{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccount (%v)", err)
	}

	return result, nil
}

// Updates the account type or tags for a storage account. It can also be used to add a custom domain (note that custom domains cannot be added via the Create operation). Only one custom domain is supported per storage account. This API can only be used to update one of tags, accountType, or customDomain per call. To update multiple of these properties, call the API multiple times with one change per call. This call does not change the storage keys for the account. If you want to change storage account keys, use the RegenerateKey operation. The location and name of the storage account cannot be changed after creation.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
// parameters: The parameters to update on the account. Note that only one property can be changed at a time using this API.
//
func (client StorageManagementClient) Update(subscriptionId string, resourceGroupName string, accountName string, parameters StorageAccountUpdateParameters) (result *StorageAccount, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent, err := json.Marshal(parameters)
	if err != nil {
		return nil, fmt.Errorf("Failed to serialize parameters (%v)", err)
	}

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("PATCH", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccount{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccount (%v)", err)
	}

	return result, nil
}

// Lists the access keys for the specified storage account.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group.
// accountName: The name of the storage account.
//
func (client StorageManagementClient) ListKeys(subscriptionId string, resourceGroupName string, accountName string) (result *StorageAccountKeys, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent := ""

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("POST", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccountKeys{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccountKeys (%v)", err)
	}

	return result, nil
}

// Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
//
func (client StorageManagementClient) List(subscriptionId string) (result *StorageAccountListResponse, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent := ""

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("GET", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccountListResponse{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccountListResponse (%v)", err)
	}

	return result, nil
}

// Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
//
func (client StorageManagementClient) ListByResourceGroup(subscriptionId string, resourceGroupName string) (result *StorageAccountListResponse, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent := ""

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("GET", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccountListResponse{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccountListResponse (%v)", err)
	}

	return result, nil
}

// Regenerates the access keys for the specified storage account.
//
// subscriptionId: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
// resourceGroupName: The name of the resource group within the userâ€™s subscription.
// accountName: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
// regenerateKey: Specifies name of the key which should be regenerated.
//
func (client StorageManagementClient) RegenerateKey(subscriptionId string, resourceGroupName string, accountName string, regenerateKey StorageAccountRegenerateKeyParameters) (result *StorageAccountKeys, err error) {

	// Collect header parameters
	headerParameters := make(map[string]interface{})

	// Collect path parameters
	pathParameters := make(map[string]interface{})
	pathParameters["subscriptionId"] = subscriptionId
	pathParameters["resourceGroupName"] = resourceGroupName
	pathParameters["accountName"] = accountName

	// Collect query parameters
	queryParameters := make(map[string]interface{})
	queryParameters["api-version"] = ApiVersion

	// Construct the body
	bodyContent, err := json.Marshal(regenerateKey)
	if err != nil {
		return nil, fmt.Errorf("Failed to serialize regenerateKey (%v)", err)
	}

	// Build the request URL
	baseUri := BaseUri
	if len(client.BaseUri) != 0 {
		baseUri = client.BaseUri
	}
	urlResource, err := arm.BuildUrl(baseUri, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey", pathParameters, queryParameters)
	if err != nil {
		return nil, err
	}

	// Send the request
	response, err := arm.SendRequest("POST", urlResource, headerParameters, string(bodyContent))
	if err != nil {
		return nil, err
	}
	defer (func() { response.Body.Close() })()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusAccepted {
		return nil, fmt.Errorf("Request failed -- HTTP Response Code %v", response.StatusCode)
	}

	// Extract the result
	result = &StorageAccountKeys{}
	err = (json.NewDecoder(response.Body)).Decode(result)
	if err != nil {
		return nil, fmt.Errorf("Failed to deserialize StorageAccountKeys (%v)", err)
	}

	return result, nil
}
