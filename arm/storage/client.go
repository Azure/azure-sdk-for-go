// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package storage

import (
	"fmt"
	"github.com/azure/go-autorest/autorest"
	"net/http"
	"net/url"
	"time"
)

const (
	ApiVersion             = "2015-05-01-preview"
	DefaultBaseUri         = "https://management.azure.com"
	DefaultPollingDuration = 10 * time.Minute
)

type StorageManagementClient struct {
	autorest.Client
	BaseUri        string
	SubscriptionId string
}

func New(subscriptionId string) *StorageManagementClient {
	return NewWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewWithBaseUri(baseUri string, subscriptionId string) *StorageManagementClient {
	client := &StorageManagementClient{BaseUri: baseUri, SubscriptionId: subscriptionId}
	client.PollingMode = autorest.PollUntilDuration
	client.PollingDuration = DefaultPollingDuration
	return client
}

////////////////////////////////////////////////////////////////////////////////
//
// StorageAccounts Client
//
////////////////////////////////////////////////////////////////////////////////
type StorageAccountsClient struct {
	StorageManagementClient
}

func NewStorageAccountsClient(subscriptionId string) *StorageAccountsClient {
	return NewStorageAccountsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewStorageAccountsClientWithBaseUri(baseUri string, subscriptionId string) *StorageAccountsClient {
	return &StorageAccountsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// CheckNameAvailability checks that account name is valid and is not in use.;
//
// accountName is the name of the storage account within the specified
// resource group. Storage account names must be between 3 and 24 characters
// in length and use numbers and lower-case letters only.
func (client *StorageAccountsClient) CheckNameAvailability(accountName StorageAccountCheckNameAvailabilityParameters) (result CheckNameAvailabilityResult, err error) {

	req, err := client.NewCheckNameAvailabilityRequest(accountName)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.CheckNameAvailability request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.CheckNameAvailability request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.CheckNameAvailability request (%v)", err)
	}

	result = CheckNameAvailabilityResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewCheckNameAvailabilityRequest(accountName StorageAccountCheckNameAvailabilityParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CheckNameAvailabilityRequestPreparer(),
		autorest.WithJSON(accountName),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) CheckNameAvailabilityRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"))
}

// Create asynchronously creates a new storage account with the specified
// parameters. Existing accounts cannot be updated with this API and should
// instead use the Update Storage Account API. If an account is already
// created and subsequent PUT request is issued with exact same set of
// properties, then HTTP 200 would be returned.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription. accountName is the name of the storage account within the
// specified resource group. Storage account names must be between 3 and 24
// characters in length and use numbers and lower-case letters only.
// parameters is the parameters to provide for the created account.
func (client *StorageAccountsClient) Create(resourceGroupName string, accountName string, parameters StorageAccountCreateParameters) (result StorageAccount, err error) {

	req, err := client.NewCreateRequest(resourceGroupName, accountName, parameters)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.Create request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.Create request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.Create request (%v)", err)
	}

	resp, err = client.PollIfNeeded(resp)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.Create request (%v)", err)
	}

	result = StorageAccount{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewCreateRequest(resourceGroupName string, accountName string, parameters StorageAccountCreateParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.CreateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) CreateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"))
}

// Delete deletes a storage account in Microsoft Azure.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription. accountName is the name of the storage account within the
// specified resource group. Storage account names must be between 3 and 24
// characters in length and use numbers and lower-case letters only.
func (client *StorageAccountsClient) Delete(resourceGroupName string, accountName string) (err error) {

	req, err := client.NewDeleteRequest(resourceGroupName, accountName)
	if err != nil {
		return fmt.Errorf("storage: Failure preparing StorageAccountsClient.Delete request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return fmt.Errorf("storage: Failure sending StorageAccountsClient.Delete request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return fmt.Errorf("storage: Failure sending StorageAccountsClient.Delete request (%v)", err)
	}

	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByClosing())

	return
}

func (client *StorageAccountsClient) NewDeleteRequest(resourceGroupName string, accountName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.DeleteRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) DeleteRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"))
}

// GetProperties returns the properties for the specified storage account
// including but not limited to name, account type, location, and account
// status. The ListKeys operation should be used to retrieve storage keys.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription. accountName is the name of the storage account within the
// specified resource group. Storage account names must be between 3 and 24
// characters in length and use numbers and lower-case letters only.
func (client *StorageAccountsClient) GetProperties(resourceGroupName string, accountName string) (result StorageAccount, err error) {

	req, err := client.NewGetPropertiesRequest(resourceGroupName, accountName)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.GetProperties request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.GetProperties request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.GetProperties request (%v)", err)
	}

	result = StorageAccount{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewGetPropertiesRequest(resourceGroupName string, accountName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.GetPropertiesRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) GetPropertiesRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"))
}

// Update updates the account type or tags for a storage account. It can also
// be used to add a custom domain (note that custom domains cannot be added
// via the Create operation). Only one custom domain is supported per storage
// account. This API can only be used to update one of tags, accountType, or
// customDomain per call. To update multiple of these properties, call the
// API multiple times with one change per call. This call does not change the
// storage keys for the account. If you want to change storage account keys,
// use the RegenerateKey operation. The location and name of the storage
// account cannot be changed after creation.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription. accountName is the name of the storage account within the
// specified resource group. Storage account names must be between 3 and 24
// characters in length and use numbers and lower-case letters only.
// parameters is the parameters to update on the account. Note that only one
// property can be changed at a time using this API.
func (client *StorageAccountsClient) Update(resourceGroupName string, accountName string, parameters StorageAccountUpdateParameters) (result StorageAccount, err error) {

	req, err := client.NewUpdateRequest(resourceGroupName, accountName, parameters)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.Update request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.Update request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.Update request (%v)", err)
	}

	result = StorageAccount{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewUpdateRequest(resourceGroupName string, accountName string, parameters StorageAccountUpdateParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.UpdateRequestPreparer(),
		autorest.WithJSON(parameters),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) UpdateRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"))
}

// ListKeys lists the access keys for the specified storage account.;
//
// resourceGroupName is the name of the resource group. accountName is the
// name of the storage account.
func (client *StorageAccountsClient) ListKeys(resourceGroupName string, accountName string) (result StorageAccountKeys, err error) {

	req, err := client.NewListKeysRequest(resourceGroupName, accountName)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.ListKeys request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.ListKeys request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.ListKeys request (%v)", err)
	}

	result = StorageAccountKeys{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewListKeysRequest(resourceGroupName string, accountName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListKeysRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) ListKeysRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"))
}

// List lists all the storage accounts available under the subscription. Note
// that storage keys are not returned; use the ListKeys operation for this.;
func (client *StorageAccountsClient) List() (result StorageAccountListResult, err error) {

	req, err := client.NewListRequest()
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.List request (%v)", err)
	}

	result = StorageAccountListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewListRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"))
}

// ListByResourceGroup lists all the storage accounts available under the
// given resource group. Note that storage keys are not returned; use the
// ListKeys operation for this.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription.
func (client *StorageAccountsClient) ListByResourceGroup(resourceGroupName string) (result StorageAccountListResult, err error) {

	req, err := client.NewListByResourceGroupRequest(resourceGroupName)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.ListByResourceGroup request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.ListByResourceGroup request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.ListByResourceGroup request (%v)", err)
	}

	result = StorageAccountListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewListByResourceGroupRequest(resourceGroupName string) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListByResourceGroupRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) ListByResourceGroupRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"))
}

// RegenerateKey regenerates the access keys for the specified storage account.;
//
// resourceGroupName is the name of the resource group within the userâ€™s
// subscription. accountName is the name of the storage account within the
// specified resource group. Storage account names must be between 3 and 24
// characters in length and use numbers and lower-case letters only.
// regenerateKey is specifies name of the key which should be regenerated.
func (client *StorageAccountsClient) RegenerateKey(resourceGroupName string, accountName string, regenerateKey StorageAccountRegenerateKeyParameters) (result StorageAccountKeys, err error) {

	req, err := client.NewRegenerateKeyRequest(resourceGroupName, accountName, regenerateKey)
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing StorageAccountsClient.RegenerateKey request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.RegenerateKey request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending StorageAccountsClient.RegenerateKey request (%v)", err)
	}

	result = StorageAccountKeys{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *StorageAccountsClient) NewRegenerateKeyRequest(resourceGroupName string, accountName string, regenerateKey StorageAccountRegenerateKeyParameters) (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"accountName":       url.QueryEscape(accountName),
		"resourceGroupName": url.QueryEscape(resourceGroupName),
		"subscriptionId":    url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.RegenerateKeyRequestPreparer(),
		autorest.WithJSON(regenerateKey),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *StorageAccountsClient) RegenerateKeyRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"))
}

////////////////////////////////////////////////////////////////////////////////
//
// UsageOperations Client
//
////////////////////////////////////////////////////////////////////////////////
type UsageOperationsClient struct {
	StorageManagementClient
}

func NewUsageOperationsClient(subscriptionId string) *UsageOperationsClient {
	return NewUsageOperationsClientWithBaseUri(DefaultBaseUri, subscriptionId)
}

func NewUsageOperationsClientWithBaseUri(baseUri string, subscriptionId string) *UsageOperationsClient {
	return &UsageOperationsClient{*NewWithBaseUri(baseUri, subscriptionId)}
}

// List gets the current usage count and the limit for the resources under the
// subscription.;
func (client *UsageOperationsClient) List() (result UsageListResult, err error) {

	req, err := client.NewListRequest()
	if err != nil {
		return result, fmt.Errorf("storage: Failure preparing UsageOperationsClient.List request (%v)", err)
	}

	req, err = autorest.Prepare(
		req,
		client.WithAuthorization(),
		client.WithInspection())
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending UsageOperationsClient.List request (%v)", err)
	}

	resp, err := autorest.SendWithSender(client, req)
	if err != nil {
		return result, fmt.Errorf("storage: Failure sending UsageOperationsClient.List request (%v)", err)
	}

	result = UsageListResult{}
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessOK(),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())

	return result, err
}

func (client *UsageOperationsClient) NewListRequest() (*http.Request, error) {

	pathParameters := map[string]interface{}{
		"subscriptionId": url.QueryEscape(client.SubscriptionId),
	}

	queryParameters := map[string]interface{}{
		"api-version": ApiVersion,
	}

	return autorest.DecoratePreparer(
		client.ListRequestPreparer(),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters)).Prepare(&http.Request{})
}

func (client *UsageOperationsClient) ListRequestPreparer() autorest.Preparer {
	return autorest.CreatePreparer(
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseUri),
		autorest.WithPath("/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages"))
}
