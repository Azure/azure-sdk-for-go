import { EmitContext, Program } from "@typespec/compiler";
import { SdkContext, SdkHttpOperation, SdkServiceOperation, TCGCContext } from "./interfaces.js";
import { BrandedSdkEmitterOptionsInterface, TCGCEmitterOptions } from "./internal-utils.js";
interface CreateTCGCContextOptions {
    mutateNamespace?: boolean;
}
export declare function createTCGCContext(program: Program, emitterName?: string, options?: CreateTCGCContextOptions): TCGCContext;
interface VersioningStrategy {
    readonly previewStringRegex?: RegExp;
}
export interface CreateSdkContextOptions {
    readonly versioning?: VersioningStrategy;
    additionalDecorators?: string[];
    disableUsageAccessPropagationToBase?: boolean;
    exportTCGCoutput?: boolean;
    flattenUnionAsEnum?: boolean;
}
export declare function createSdkContext<TOptions extends Record<string, any> = BrandedSdkEmitterOptionsInterface, TServiceOperation extends SdkServiceOperation = SdkHttpOperation>(context: EmitContext<TOptions>, emitterName?: string, options?: CreateSdkContextOptions): Promise<SdkContext<TOptions, TServiceOperation>>;
export declare function $onEmit(context: EmitContext<TCGCEmitterOptions>): Promise<void>;
export {};
//# sourceMappingURL=context.d.ts.map