import { Diagnostic, Enum, Interface, Model, ModelProperty, Namespace, Operation, Scalar, Type, Union } from "@typespec/compiler";
import { HttpOperation, Visibility } from "@typespec/http";
import { Version } from "@typespec/versioning";
import { SdkBodyModelPropertyType, SdkBodyParameter, SdkCookieParameter, SdkHeaderParameter, SdkHttpOperation, SdkHttpOperationExample, SdkModelPropertyType, SdkPathParameter, SdkQueryParameter, SdkServiceMethod, SdkType, TCGCContext } from "./interfaces.js";
import { AllScopes, TspLiteralType } from "./internal-utils.js";
/**
 * Return the default api version for a versioned service. Will return undefined if one does not exist
 * @param program
 * @param serviceNamespace
 * @returns
 */
export declare function getDefaultApiVersion(context: TCGCContext, serviceNamespace: Namespace): Version | undefined;
/**
 * Return whether a parameter is the Api Version parameter of a client
 * @param program
 * @param parameter
 * @returns
 */
export declare function isApiVersion(context: TCGCContext, type: {
    name: string;
}): boolean;
/**
 * If the given type is an anonymous model, returns a named model with same shape.
 * The finding logic will ignore all the properties of header/query/path/status-code metadata,
 * as well as the properties that are not visible in the given visibility if provided.
 * If the model found is also anonymous, the input type is returned unchanged.
 *
 * @param context
 * @param type
 * @returns
 */
export declare function getEffectivePayloadType(context: TCGCContext, type: Model, visibility?: Visibility): Model;
/**
 * Get the library and wire name of a model property. Takes `@clientName` and `@encodedName` into account
 * @param context
 * @param property
 * @returns a tuple of the library and wire name for a model property
 */
export declare function getPropertyNames(context: TCGCContext, property: ModelProperty): [string, string];
/**
 * Get the library name of a property / parameter / operation / model / enum. Takes projections into account
 *
 * Returns name in the following order of priority
 * 1. language emitter name, i.e. @clientName("csharpSpecificName", "csharp") => "csharpSpecificName"
 * 2. client name, i.e. @clientName(""clientName") => "clientName"
 * 3. deprecated projected name
 * 4. friendly name, i.e. @friendlyName("friendlyName") => "friendlyName"
 * 5. name in typespec
 *
 * @param context
 * @param type
 * @returns the library name for a typespec type
 */
export declare function getLibraryName(context: TCGCContext, type: Type & {
    name?: string | symbol;
}, scope?: string | typeof AllScopes): string;
/**
 * Get the serialized name of a type.
 * @param context
 * @param type
 * @returns
 */
export declare function getWireName(context: TCGCContext, type: Type & {
    name: string;
}): string;
/**
 * Helper function to return cross language definition id for a type
 * @param type
 * @returns
 */
export declare function getCrossLanguageDefinitionId(context: TCGCContext, type: Union | Model | Enum | Scalar | ModelProperty | Operation | Namespace | Interface, operation?: Operation, appendNamespace?: boolean): string;
/**
 * Helper function return the cross langauge package id for a package
 */
export declare function getCrossLanguagePackageId(context: TCGCContext): [string, readonly Diagnostic[]];
/**
 * Create a name for anonymous model
 * @param context
 * @param type
 */
export declare function getGeneratedName(context: TCGCContext, type: Model | Union | TspLiteralType, operation?: Operation): string;
export declare function getHttpOperationWithCache(context: TCGCContext, operation: Operation): HttpOperation;
/**
 * Get the examples for a given http operation.
 */
export declare function getHttpOperationExamples(context: TCGCContext, operation: HttpOperation): SdkHttpOperationExample[];
export declare function isAzureCoreModel(t: SdkType): boolean;
/**
 * Judge whether a type is a paged result model.
 *
 * @param context TCGC context
 * @param t Any TCGC types
 * @returns
 */
export declare function isPagedResultModel(context: TCGCContext, t: SdkType): boolean;
/**
 * Find corresponding http parameter list for a client initialization parameter, a service method parameter or a property of a service method parameter.
 *
 * @param method
 * @param param
 * @returns
 */
export declare function getHttpOperationParameter(method: SdkServiceMethod<SdkHttpOperation>, param: SdkModelPropertyType): SdkPathParameter | SdkQueryParameter | SdkHeaderParameter | SdkCookieParameter | SdkBodyParameter | SdkBodyModelPropertyType | undefined;
/**
 * Currently, listServices can only be called from a program instance. This doesn't work well if we're doing mutation,
 * because we want to just mutate the global namespace once, then find all of the services in the program, since we aren't
 * able to explicitly tell listServices to iterate over our specific mutated global namespace. We're going to use this function
 * instead to list all of the services in the global namespace.
 *
 * See https://github.com/microsoft/typespec/issues/6247
 *
 * @param context
 */
export declare function listAllServiceNamespaces(context: TCGCContext): Namespace[];
/**
 * Calculate the operation ID for a given operation.
 *
 * @param context TCGC context
 * @param operation
 * @param honorRenaming
 * @returns
 */
export declare function resolveOperationId(context: TCGCContext, operation: Operation, honorRenaming?: boolean): string;
//# sourceMappingURL=public-utils.d.ts.map