import { SyntaxKind, } from "@typespec/compiler/ast";
import { unsafe_Realm } from "@typespec/compiler/experimental";
import { DuplicateTracker } from "@typespec/compiler/utils";
import { getClientNameOverride } from "../decorators.js";
import { AllScopes, clientLocationKey, clientNameKey, hasExplicitClientOrOperationGroup, listScopedDecoratorData, } from "../internal-utils.js";
import { reportDiagnostic } from "../lib.js";
export function validateTypes(context) {
    validateClientNames(context);
    validateNoDiscriminatedUnions(context);
}
function validateNoDiscriminatedUnions(context) {
    if (context.program.stateMap(Symbol.for("TypeSpec.discriminated"))) {
        for (const [type, _] of context.program.stateMap(Symbol.for("TypeSpec.discriminated"))) {
            reportDiagnostic(context.program, {
                code: "no-discriminated-unions",
                target: type,
            });
        }
    }
}
/**
 * Validate naming with `@clientName` and `@clientLocation` decorators.
 *
 * This function checks for duplicate client names for types considering the impact of `@clientName` for all possible scopes.
 * It also handles the movement of operations to new clients based on the `@clientLocation` decorators.
 *
 * @param tcgcContext The context for the TypeSpec Client Generator.
 */
function validateClientNames(tcgcContext) {
    const languageScopes = getDefinedLanguageScopes(tcgcContext.program);
    // If no `@client` or `@operationGroup` decorators are defined, we consider `@clientLocation`
    const needToConsiderClientLocation = !hasExplicitClientOrOperationGroup(tcgcContext);
    // Check all possible language scopes
    for (const scope of languageScopes) {
        // Gather all moved operations and their targets
        const moved = new Set();
        const movedTo = new Map();
        const newClients = new Map();
        if (needToConsiderClientLocation) {
            // Cache all `@clientName` overrides for the current scope
            for (const [type, target] of listScopedDecoratorData(tcgcContext, clientLocationKey, scope).entries()) {
                if (unsafe_Realm.realmForType.has(type)) {
                    // Skip `@clientName` on versioning types
                    continue;
                }
                if (type.kind === "Operation") {
                    moved.add(type);
                    if (typeof target === "string") {
                        // Move to new clients
                        if (!newClients.has(target)) {
                            newClients.set(target, [type]);
                        }
                        else {
                            newClients.get(target).push(type);
                        }
                    }
                    else {
                        // Move to existing clients
                        if (!movedTo.has(target)) {
                            movedTo.set(target, [type]);
                        }
                        else {
                            movedTo.get(target).push(type);
                        }
                    }
                }
            }
        }
        // Validate client names for the current scope
        validateClientNamesPerNamespace(tcgcContext, scope, moved, movedTo, tcgcContext.program.getGlobalNamespaceType());
        // Validate client names for new client's operations
        [...newClients.values()].map((operations) => {
            validateClientNamesCore(tcgcContext, scope, operations);
        });
    }
}
function getDefinedLanguageScopes(program) {
    const languageScopes = new Set();
    const impacted = [...program.stateMap(clientNameKey).values()];
    impacted.push(...program.stateMap(clientLocationKey).values());
    for (const value of impacted) {
        if (value[AllScopes]) {
            languageScopes.add(AllScopes);
        }
        for (const languageScope of Object.keys(value)) {
            languageScopes.add(languageScope);
        }
    }
    return languageScopes;
}
function* adjustOperations(iterator, moved, movedTo, container) {
    for (const operation of iterator) {
        if (moved.has(operation)) {
            continue;
        }
        else {
            yield operation;
        }
    }
    if (movedTo.has(container)) {
        for (const operation of movedTo.get(container)) {
            yield operation;
        }
    }
}
function validateClientNamesPerNamespace(tcgcContext, scope, moved, movedTo, namespace) {
    // Check for duplicate client names for models, enums, and unions
    validateClientNamesCore(tcgcContext, scope, [
        ...namespace.models.values(),
        ...namespace.enums.values(),
        ...namespace.unions.values(),
    ]);
    // Check for duplicate client names for operations
    validateClientNamesCore(tcgcContext, scope, adjustOperations(namespace.operations.values(), moved, movedTo, namespace));
    // check for duplicate client names for operations in interfaces
    for (const item of namespace.interfaces.values()) {
        validateClientNamesCore(tcgcContext, scope, adjustOperations(item.operations.values(), moved, movedTo, item));
    }
    // Check for duplicate client names for interfaces
    validateClientNamesCore(tcgcContext, scope, namespace.interfaces.values());
    // Check for duplicate client names for scalars
    validateClientNamesCore(tcgcContext, scope, namespace.scalars.values());
    // Check for duplicate client names for namespaces
    validateClientNamesCore(tcgcContext, scope, namespace.namespaces.values());
    // Check for duplicate client names for model properties
    for (const model of namespace.models.values()) {
        validateClientNamesCore(tcgcContext, scope, model.properties.values());
    }
    // Check for duplicate client names for enum members
    for (const item of namespace.enums.values()) {
        validateClientNamesCore(tcgcContext, scope, item.members.values());
    }
    // Check for duplicate client names for union variants
    for (const item of namespace.unions.values()) {
        validateClientNamesCore(tcgcContext, scope, item.variants.values());
    }
    // Check for duplicate client names for nested namespaces
    for (const item of namespace.namespaces.values()) {
        validateClientNamesPerNamespace(tcgcContext, scope, moved, movedTo, item);
    }
}
function validateClientNamesCore(tcgcContext, scope, items) {
    const duplicateTracker = new DuplicateTracker();
    for (const item of items) {
        const clientName = getClientNameOverride(tcgcContext, item, scope);
        if (clientName !== undefined) {
            const clientNameDecorator = item.decorators.find((x) => x.definition?.name === "@clientName");
            if (clientNameDecorator?.node !== undefined) {
                duplicateTracker.track(clientName, clientNameDecorator.node);
            }
        }
        else {
            if (item.name !== undefined && typeof item.name === "string") {
                duplicateTracker.track(item.name, item);
            }
        }
    }
    reportDuplicateClientNames(tcgcContext.program, duplicateTracker, scope);
}
function reportDuplicateClientNames(program, duplicateTracker, scope) {
    for (const [name, duplicates] of duplicateTracker.entries()) {
        for (const item of duplicates) {
            const scopeStr = scope === AllScopes ? "AllScopes" : scope;
            // If the item is a decorator application node
            if (item.kind === SyntaxKind.DecoratorExpression ||
                item.kind === SyntaxKind.AugmentDecoratorStatement) {
                reportDiagnostic(program, {
                    code: "duplicate-client-name",
                    format: { name, scope: scopeStr },
                    target: item,
                });
            }
            else {
                reportDiagnostic(program, {
                    code: "duplicate-client-name",
                    messageId: "nonDecorator",
                    format: { name, scope: scopeStr },
                    target: item,
                });
            }
        }
    }
}
//# sourceMappingURL=types.js.map