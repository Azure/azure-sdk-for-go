import * as go from '../../codemodel.go/src/index.js';
import { ImportManager } from './imports.js';
export declare const commentLength = 120;
export declare const dateFormat = "2006-01-02";
export declare const datetimeRFC3339Format = "time.RFC3339Nano";
export declare const datetimeRFC1123Format = "time.RFC1123";
export declare const timeRFC3339Format = "15:04:05.999999999Z07:00";
export declare function contentPreamble(codeModel: go.CodeModel, packageName?: string): string;
export declare function sortAscending(a: string, b: string): number;
export declare function isParameter(param: go.Parameter | go.ParameterGroup): param is go.Parameter;
export declare function isParameterGroup(param: go.Parameter | go.ParameterGroup): param is go.ParameterGroup;
export declare function formatParameterTypeName(param: go.Parameter | go.ParameterGroup, pkgName?: string): string;
export declare function parameterByValue(param: go.Parameter): boolean;
export declare function sortParametersByRequired(a: go.Parameter | go.ParameterGroup, b: go.Parameter | go.ParameterGroup): number;
export declare function getCreateRequestParametersSig(method: go.MethodType | go.NextPageMethod): string;
export declare function getCreateRequestParameters(method: go.MethodType): string;
export declare function getMethodParameters(method: go.MethodType | go.NextPageMethod, paramsFilter?: (p: Array<go.Parameter>) => Array<go.Parameter>): Array<go.Parameter | go.ParameterGroup>;
export declare function getParamName(param: go.Parameter): string;
export declare function formatBytesEncoding(enc: go.BytesEncoding): string;
export declare function formatParamValue(param: go.FormBodyParameter | go.HeaderParameter | go.PathParameter | go.QueryParameter, imports: ImportManager): string;
export declare function getDelimiterForCollectionFormat(cf: go.CollectionFormat): string;
export declare function formatValue(paramName: string, type: go.PossibleType, imports: ImportManager, defef?: boolean): string;
export declare function formatLiteralValue(value: go.LiteralValue, withCast: boolean): string;
export declare function hasSchemaResponse(method: go.MethodType): boolean;
export declare function getResultFieldName(method: go.MethodType): string;
export declare function formatStatusCodes(statusCodes: Array<number>): string;
export declare function formatStatusCode(statusCode: number): string;
export declare function formatCommentAsBulletItem(prefix: string, docs: go.Docs): string;
export declare function formatDocCommentWithPrefix(prefix: string, docs: go.Docs): string;
export declare function formatDocComment(docs: go.Docs): string;
export declare function getParentImport(codeModel: go.CodeModel): string;
export declare function getBitSizeForNumber(intSize: 'float32' | 'float64' | 'int8' | 'int16' | 'int32' | 'int64'): string;
export declare function recursiveUnwrapMapSlice(item: go.PossibleType): go.PossibleType;
export declare function star(param: go.Parameter): string;
export type SerDeFormat = 'JSON' | 'XML';
export declare function getSerDeFormat(model: go.ModelType | go.PolymorphicType, codeModel: go.CodeModel): SerDeFormat;
export declare function getAllClientParameters(codeModel: go.CodeModel): Array<go.Parameter>;
export declare function getCommonClientParameters(codeModel: go.CodeModel): Array<go.Parameter>;
//# sourceMappingURL=helpers.d.ts.map