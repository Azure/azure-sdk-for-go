/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
import { PrimitiveType } from './type.js';
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
export class AnyExample {
    constructor(value) {
        this.kind = 'any';
        this.value = value;
        this.type = new PrimitiveType('any');
    }
}
export class ArrayExample {
    constructor(type) {
        this.kind = 'array';
        this.type = type;
        this.value = [];
    }
}
export class BooleanExample {
    constructor(value, type) {
        this.kind = 'boolean';
        this.value = value;
        this.type = type;
    }
}
export class DictionaryExample {
    constructor(type) {
        this.kind = 'dictionary';
        this.type = type;
        this.value = {};
    }
}
export class MethodExample {
    constructor(name, docs, filePath) {
        this.name = name;
        this.docs = docs;
        this.filePath = filePath;
        this.parameters = [];
        this.optionalParamsGroup = [];
    }
}
export class NullExample {
    constructor(type) {
        this.kind = 'null';
        this.type = type;
    }
}
export class NumberExample {
    constructor(value, type) {
        this.kind = 'number';
        this.value = value;
        this.type = type;
    }
}
export class ParameterExample {
    constructor(parameter, value) {
        this.parameter = parameter;
        this.value = value;
    }
}
export class QualifiedExample {
    constructor(type, value) {
        this.kind = 'qualified';
        this.type = type;
        this.value = value;
    }
}
export class ResponseEnvelopeExample {
    constructor(response) {
        this.response = response;
        this.headers = [];
    }
}
export class ResponseHeaderExample {
    constructor(header, value) {
        this.header = header;
        this.value = value;
    }
}
export class StringExample {
    constructor(value, type) {
        this.kind = 'string';
        this.value = value;
        this.type = type;
    }
}
export class StructExample {
    constructor(type) {
        this.kind = 'model';
        this.type = type;
        this.value = {};
    }
}
//# sourceMappingURL=examples.js.map