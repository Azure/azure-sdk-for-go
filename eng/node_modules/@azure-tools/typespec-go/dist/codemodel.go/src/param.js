/*---------------------------------------------------------------------------------------------
*  Copyright (c) Microsoft Corporation. All rights reserved.
*  Licensed under the MIT License. See License.txt in the project root for license information.
*--------------------------------------------------------------------------------------------*/
import * as type from './type.js';
export function isBodyParameter(param) {
    return param.bodyFormat !== undefined;
}
export function isClientSideDefault(style) {
    return style.defaultValue !== undefined;
}
export function isPartialBodyParameter(param) {
    return param.serializedName !== undefined;
}
export function isFormBodyParameter(param) {
    return param.formDataName !== undefined;
}
export function isFormBodyCollectionParameter(param) {
    return param.formDataName !== undefined && param.collectionFormat !== undefined;
}
export function isMultipartFormBodyParameter(param) {
    return param.multipartForm !== undefined;
}
export function isHeaderParameter(param) {
    return param.headerName !== undefined;
}
export function isHeaderCollectionParameter(param) {
    return param.headerName !== undefined && param.collectionFormat !== undefined;
}
export function isHeaderMapParameter(param) {
    return param.headerName !== undefined && param.collectionPrefix !== undefined;
}
export function isPathParameter(param) {
    return param.pathSegment !== undefined;
}
export function isPathCollectionParameter(param) {
    return param.pathSegment !== undefined && param.collectionFormat !== undefined;
}
export function isQueryParameter(param) {
    return param.queryParameter !== undefined;
}
export function isQueryCollectionParameter(param) {
    return param.queryParameter !== undefined && param.collectionFormat !== undefined;
}
export function isURIParameter(param) {
    return param.uriPathSegment !== undefined;
}
export function isResumeTokenParameter(param) {
    return param.isResumeToken !== undefined;
}
export function isRequiredParameter(param) {
    // parameters with a client-side default value are always optional
    if (isClientSideDefault(param.style)) {
        return false;
    }
    return param.style === 'required';
}
export function isLiteralParameter(param) {
    if (isClientSideDefault(param.style)) {
        return false;
    }
    return param.style === 'literal';
}
///////////////////////////////////////////////////////////////////////////////////////////////////
// base types
///////////////////////////////////////////////////////////////////////////////////////////////////
export class Parameter {
    constructor(name, type, style, byValue, location) {
        this.name = name;
        this.type = type;
        this.style = style;
        this.byValue = byValue;
        this.location = location;
        this.docs = {};
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
export class BodyParameter extends Parameter {
    constructor(name, bodyFormat, contentType, type, style, byValue) {
        super(name, type, style, byValue, 'method');
        this.bodyFormat = bodyFormat;
        this.contentType = contentType;
    }
}
export class ClientSideDefault {
    constructor(defaultValue) {
        this.defaultValue = defaultValue;
    }
}
export class FormBodyCollectionParameter extends Parameter {
    constructor(name, formDataName, type, collectionFormat, style, byValue) {
        super(name, type, style, byValue, 'method');
        this.formDataName = formDataName;
        this.collectionFormat = collectionFormat;
    }
}
export class FormBodyParameter extends Parameter {
    constructor(name, formDataName, type, style, byValue) {
        super(name, type, style, byValue, 'method');
        this.formDataName = formDataName;
    }
}
export class HeaderCollectionParameter extends Parameter {
    constructor(name, headerName, type, collectionFormat, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.headerName = headerName;
        this.collectionFormat = collectionFormat;
    }
}
export class HeaderMapParameter extends Parameter {
    constructor(name, headerName, type, collectionPrefix, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.headerName = headerName;
        this.collectionPrefix = collectionPrefix;
    }
}
export class HeaderParameter extends Parameter {
    constructor(name, headerName, type, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.headerName = headerName;
    }
}
export class MultipartFormBodyParameter extends Parameter {
    constructor(name, type, style, byValue) {
        super(name, type, style, byValue, 'method');
        this.multipartForm = true;
    }
}
export class ParameterGroup {
    constructor(name, groupName, required, location) {
        this.groupName = groupName;
        this.location = location;
        this.name = name;
        // params is required but must be populated post construction
        this.params = new Array();
        this.required = required;
        this.docs = {};
    }
}
export class PartialBodyParameter extends Parameter {
    constructor(name, serializedName, format, type, style, byValue) {
        super(name, type, style, byValue, 'method');
        this.format = format;
        this.serializedName = serializedName;
    }
}
export class PathCollectionParameter extends Parameter {
    constructor(name, pathSegment, isEncoded, type, collectionFormat, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.pathSegment = pathSegment;
        this.isEncoded = isEncoded;
        this.collectionFormat = collectionFormat;
    }
}
export class PathParameter extends Parameter {
    constructor(name, pathSegment, isEncoded, type, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.pathSegment = pathSegment;
        this.isEncoded = isEncoded;
    }
}
export class QueryCollectionParameter extends Parameter {
    constructor(name, queryParam, isEncoded, type, collectionFormat, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.queryParameter = queryParam;
        this.isEncoded = isEncoded;
        this.collectionFormat = collectionFormat;
    }
}
export class QueryParameter extends Parameter {
    constructor(name, queryParam, isEncoded, type, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.queryParameter = queryParam;
        this.isEncoded = isEncoded;
    }
}
export class ResumeTokenParameter extends Parameter {
    constructor() {
        super('ResumeToken', new type.PrimitiveType('string'), 'optional', true, 'method');
        this.isResumeToken = true;
        this.docs.summary = 'Resumes the long-running operation from the provided token.';
    }
}
export class URIParameter extends Parameter {
    constructor(name, uriPathSegment, type, style, byValue, location) {
        super(name, type, style, byValue, location);
        this.uriPathSegment = uriPathSegment;
    }
}
//# sourceMappingURL=param.js.map