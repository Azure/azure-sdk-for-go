export interface GoEmitterOptions {
    'azcore-version'?: string;
    'disallow-unknown-fields'?: boolean;
    'file-prefix'?: string;
    'generate-fakes'?: boolean;
    'head-as-boolean'?: boolean;
    'inject-spans'?: boolean;
    'module'?: string;
    'module-version'?: string;
    'rawjson-as-bytes'?: boolean;
    'slice-elements-byval'?: boolean;
    'single-client'?: boolean;
    'stutter'?: string;
    'fix-const-stuttering'?: boolean;
    /**
     * @deprecated Use 'generate-samples' instead
     */
    'generate-examples'?: boolean;
    'factory-gather-all-params'?: boolean;
    'generate-samples'?: boolean;
}
export declare const $lib: import("@typespec/compiler").TypeSpecLibrary<{
    InternalError: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    InvalidArgument: {
        readonly default: "Invalid arguments were passed to the emitter.";
    };
    NameCollision: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    UnsupportedTsp: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
}, GoEmitterOptions, never>;
export declare const reportDiagnostic: <C extends "InternalError" | "InvalidArgument" | "NameCollision" | "UnsupportedTsp", M extends keyof {
    InternalError: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    InvalidArgument: {
        readonly default: "Invalid arguments were passed to the emitter.";
    };
    NameCollision: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    UnsupportedTsp: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
}[C]>(program: import("@typespec/compiler").Program, diag: import("@typespec/compiler").DiagnosticReport<{
    InternalError: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    InvalidArgument: {
        readonly default: "Invalid arguments were passed to the emitter.";
    };
    NameCollision: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
    UnsupportedTsp: {
        readonly default: import("@typespec/compiler").CallableMessage<["stack"]>;
    };
}, C, M>) => void, createStateSymbol: (name: string) => symbol, getTracer: (program: import("@typespec/compiler").Program) => import("@typespec/compiler").Tracer;
//# sourceMappingURL=lib.d.ts.map