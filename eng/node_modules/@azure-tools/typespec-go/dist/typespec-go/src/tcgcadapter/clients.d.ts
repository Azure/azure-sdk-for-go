import * as tcgc from '@azure-tools/typespec-client-generator-core';
import { GoEmitterOptions } from '../lib.js';
import { typeAdapter } from './types.js';
export declare class clientAdapter {
    private ta;
    private opts;
    private clientParams;
    constructor(ta: typeAdapter, opts: GoEmitterOptions);
    adaptClients(sdkPackage: tcgc.SdkPackage<tcgc.SdkHttpOperation>): void;
    private recursiveAdaptClient;
    private adaptURIParam;
    private adaptMethod;
    private hasDecorator;
    private populateMethod;
    private adaptMethodParameters;
    private adaptContentType;
    private adaptMethodParameter;
    private getMethodNameForDocComment;
    private adaptResponseEnvelope;
    /**
     * creates the monomorphic response field name based on its type.
     *
     * for unknown, use Interface or RawJSON if setting is enabled
     * for basic type, map of basic type, map of UDTs, enum, use Value
     * for array of basic type, array of UDTs, use xxxArray
     *
     * @param type the type for which to create a name
     * @param fromArray indicates if there was recursion from a parent array
     * @returns the name
     */
    private recursiveTypeName;
    private adaptParameterGroup;
    private adaptHeaderType;
    private adaptPathParameterType;
    private adaptQueryParameterType;
    private adaptParameterStyle;
    private adaptHttpOperationExamples;
    private adaptExampleType;
}
//# sourceMappingURL=clients.d.ts.map