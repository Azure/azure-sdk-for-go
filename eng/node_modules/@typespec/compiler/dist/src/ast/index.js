/**
 * This file exposes all AST nodes and types.
 * Using the TypeSpec Abstract Syntax Tree is considered an advanced usage of the compiler and may change at any time without notice.
 * **Note**: this is not the same thing as the _type graph_ (`Type` and its variants),  Libraries depend on the abstract syntax tree _at their own risk_!
 * Please see breaking change policy https://typespec.io/docs/handbook/breaking-change-policy/
 *
 * Some reasons you might want to use the AST:
 * - Writing a codefix: You might need to manipulate the AST to fix code. Understand that your fix might break but this should not be critical to the user.
 * - A workaround for a missing feature: Understand that your workaround might break.
 */
export { SyntaxKind } from "../core/types.js";
export { exprIsBareIdentifier, getFirstAncestor, getIdentifierContext, getNodeAtPosition, getNodeAtPositionDetail, hasParseError, isImportStatement, parse, parseStandaloneTypeReference, positionInRange, visitChildren, } from "../core/parser.js";
//# sourceMappingURL=index.js.map