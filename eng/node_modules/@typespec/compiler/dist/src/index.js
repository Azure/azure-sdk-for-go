export { resolveCompilerOptions } from "./config/index.js";
export { 
// TODO: feels like all of those should move to a separate file
filterModelProperties, getEffectiveModelType, walkPropertiesInherited, } from "./core/checker.js";
export { getPropertyType, isTypeSpecValueTypeOf, typespecTypeToJson, validateDecoratorNotOnType, 
// TODO: decide what to do with those, dec should use extern dec instead
// if we remove, remove from decorator-utils too
// validateDecoratorParamCount,
// validateDecoratorTarget,
validateDecoratorUniqueOnNode, } from "./core/decorator-utils.js";
export { getDeprecationDetails, isDeprecated, markDeprecated, } from "./core/deprecation.js";
export { assertType, compilerAssert, createDiagnosticCollector, defineCodeFix, getSourceLocation, ignoreDiagnostics, logDiagnostics, reportDeprecated, } from "./core/diagnostics.js";
export { emitFile } from "./core/emitter-utils.js";
export { checkFormatTypeSpec, formatTypeSpec } from "./core/formatter.js";
export { explainStringTemplateNotSerializable, printIdentifier as formatIdentifier, getDiscriminatedUnion, getDiscriminatedUnionFromInheritance, getEntityName, getLocationContext, getNamespaceFullName, getTypeName, interpolatePath, isStdNamespace, listOperationsIn, printIdentifier, resolveUsages, UsageFlags, } from "./core/helpers/index.js";
export { getDiscriminatedTypes, getDiscriminator, getDocData, getMaxItems, getMaxItemsAsNumeric, getMaxLength, getMaxLengthAsNumeric, getMaxValue, getMaxValueAsNumeric, getMaxValueExclusive, getMaxValueExclusiveAsNumeric, getMinItems, getMinItemsAsNumeric, getMinLength, getMinLengthAsNumeric, getMinValue, getMinValueAsNumeric, getMinValueExclusive, getMinValueExclusiveAsNumeric, } from "./core/intrinsic-type-state.js";
export { createLinterRule as createRule, createTypeSpecLibrary, defineLinter, definePackageFlags, paramMessage, setTypeSpecNamespace, } from "./core/library.js";
export { resolveLinterDefinition } from "./core/linter.js";
export { formatDiagnostic } from "./core/logger/console-sink.js";
export { NodeHost } from "./core/node-host.js";
export { isNumeric, Numeric } from "./core/numeric.js";
export { getPositionBeforeTrivia } from "./core/parser-utils.js";
export { $defaultVisibility, $discriminator, $doc, $encode, $encodedName, $error, $errorsDoc, $example, $format, $friendlyName, $inspectType, $inspectTypeName, $invisible, $key, $maxItems, $maxLength, $maxValue, $maxValueExclusive, $minItems, $minLength, $minValue, $minValueExclusive, $opExample, $overload, $parameterVisibility, $pattern, $removeVisibility, $returnsDoc, $returnTypeVisibility, $secret, $service, $summary, $tag, $visibility, $withDefaultKeyVisibility, $withLifecycleUpdate, $withOptionalProperties, $withoutDefaultValues, $withoutOmittedProperties, $withPickedProperties, $withUpdateableProperties, $withVisibility, $withVisibilityFilter, addService, discriminatedDecorator, EmptyVisibilityProvider, getAllTags, getDeprecated, getDoc, getEncode, getErrorsDoc, getErrorsDocData, getExamples, getFormat, getFriendlyName, getKeyName, getMediaTypeHint, getOpExamples, getOverloadedOperation, getOverloads, getPagingOperation, getParameterVisibilityFilter, getPattern, getPatternData, getReturnsDoc, getReturnsDocData, getReturnTypeVisibilityFilter, getService, getSummary, getTags, isErrorModel, isKey, isList, isNumericType, isSecret, isService, isStringType, listServices, resolveEncodedName, serializeValueAsJson, } from "./lib/decorators.js";
export { MANIFEST } from "./manifest.js";
export { resolveModule, } from "./module-resolver/module-resolver.js";
export { createServer, TypeSpecLanguageConfiguration, } from "./server/index.js";
import { $decorators as intrinsicDecorators } from "./lib/intrinsic/tsp-index.js";
import { $decorators as stdDecorators } from "./lib/tsp-index.js";
/** @internal for Typespec compiler */
export const $decorators = {
    TypeSpec: {
        ...stdDecorators.TypeSpec,
    },
    "TypeSpec.Prototypes": {
        ...intrinsicDecorators["TypeSpec.Prototypes"],
    },
};
export { ensureTrailingDirectorySeparator, getAnyExtensionFromPath, getBaseFileName, getDirectoryPath, getNormalizedAbsolutePath, getNormalizedAbsolutePathWithoutRoot, getNormalizedPathComponents, getPathComponents, getPathFromPathComponents, getRelativePathFromDirectory, getRootLength, hasTrailingDirectorySeparator, isAnyDirectorySeparator, isPathAbsolute, isUrl, joinPaths, normalizePath, normalizeSlashes, reducePathComponents, removeTrailingDirectorySeparator, resolvePath, } from "./core/path-utils.js";
export { compile } from "./core/program.js";
export { getProperty, mapEventEmitterToNodeListener, navigateProgram, navigateType, navigateTypesInNamespace, scopeNavigationToNamespace, } from "./core/semantic-walker.js";
export { createSourceFile, getSourceFileKindFromExt } from "./core/source-file.js";
export { isArrayModelType, isDeclaredInNamespace, isDeclaredType, isErrorType, isGlobalNamespace, isNeverType, isNullType, isRecordModelType, isTemplateDeclaration, isTemplateDeclarationOrInstance, isTemplateInstance, isType, isUnknownType, isValue, isVoidType, } from "./core/type-utils.js";
export { ListenerFlow, NoTarget } from "./core/types.js";
export { addVisibilityModifiers, clearVisibilityModifiersForClass, getLifecycleVisibilityEnum, getVisibilityForClass, hasVisibility, isSealed, isVisible, removeVisibilityModifiers, resetVisibilityModifiersForClass, sealVisibilityModifiers, sealVisibilityModifiersForProgram, VisibilityFilter, } from "./core/visibility/index.js";
//# sourceMappingURL=index.js.map