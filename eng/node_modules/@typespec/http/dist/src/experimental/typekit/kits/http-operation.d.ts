import { Operation, Type } from "@typespec/compiler";
import { type Diagnosable } from "@typespec/compiler/typekit";
import { HttpOperation, HttpOperationResponseContent, HttpStatusCodesEntry } from "../../../types.js";
/**
 * Utilities for working with HTTP operations.
 * @typekit httpOperation
 * @experimental
 */
export interface HttpOperationKit {
    /**
     * Get the corresponding HTTP operation for the given TypeSpec operation. The same
     * TypeSpec operation will always return the exact same HttpOperation object.
     *
     * @param op The TypeSpec operation to get the HTTP operation metadata for.
     */
    get: Diagnosable<(op: Operation) => HttpOperation>;
    /**
     * Get the responses for the given operation. This function will return an array of responses grouped by status code and content type.
     * @param op operation to extract the HttpResponse from
     */
    flattenResponses(op: HttpOperation): FlatHttpResponse[];
    /**
     * Get the Http Return type for the given operation. This function will resolve the returnType based on the Http Operation.
     * @param op operation to get the return type for
     */
    getReturnType(op: HttpOperation, options?: {
        includeErrors?: boolean;
    }): Type;
}
/**
 * Structure of a flat HTTP response, which is grouped by status code and content type.
 */
export interface FlatHttpResponse {
    /**
     * Response status code.
     */
    statusCode: HttpStatusCodesEntry;
    /**
     * Content type. Might be undefined if the response does not have a body.
     */
    contentType?: string;
    /**
     * Response content.
     */
    responseContent: HttpOperationResponseContent;
    /**
     * Response type.
     *
     */
    type: Type;
}
interface TypekitExtension {
    /**
     * Utilities for working with HTTP operations.
     * @experimental
     */
    httpOperation: HttpOperationKit;
}
declare module "@typespec/compiler/typekit" {
    interface Typekit extends TypekitExtension {
    }
}
export {};
//# sourceMappingURL=http-operation.d.ts.map