import { defineKit } from "@typespec/compiler/typekit";
defineKit({
    httpRequest: {
        body: {
            isExplicit(httpOperation) {
                return (httpOperation.parameters.properties.find((p) => p.kind === "body" || p.kind === "bodyRoot" || p.kind === "multipartBody") !== undefined);
            },
        },
        getBodyParameters(httpOperation) {
            const body = httpOperation.parameters.body;
            if (!body) {
                return undefined;
            }
            const bodyProperty = body.property;
            if (!bodyProperty) {
                if (body.type.kind === "Model") {
                    return body.type;
                }
                throw new Error("Body property not found");
            }
            const bodyPropertyName = bodyProperty.name ? bodyProperty.name : "body";
            return this.model.create({
                properties: { [bodyPropertyName]: bodyProperty },
            });
        },
        getParameters(httpOperation, kind) {
            const kinds = new Set(Array.isArray(kind) ? kind : [kind]);
            const parameterProperties = new Map();
            kinds.forEach((kind) => {
                if (kind === "body") {
                    this.httpRequest
                        .getBodyParameters(httpOperation)
                        ?.properties.forEach((value, key) => parameterProperties.set(key, value));
                }
                else {
                    httpOperation.parameters.properties
                        .filter((p) => p.kind === kind && p.property)
                        .forEach((p) => parameterProperties.set(p.property.name, p.property));
                }
            });
            if (parameterProperties.size === 0) {
                return undefined;
            }
            const properties = Object.fromEntries(parameterProperties);
            return this.model.create({ properties });
        },
    },
});
//# sourceMappingURL=http-request.js.map