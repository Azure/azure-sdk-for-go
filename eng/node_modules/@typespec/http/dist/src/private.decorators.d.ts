import { DecoratorContext, Model, ModelProperty, Program, Type } from "@typespec/compiler";
import { HttpFileDecorator, HttpPartDecorator, HttpPartOptions, PlainDataDecorator } from "../generated-defs/TypeSpec.Http.Private.js";
import { HttpOperationFileBody } from "./types.js";
export declare const $plainData: PlainDataDecorator;
export declare const $httpFile: HttpFileDecorator;
/**
 * Check if the given type is an `HttpFile`
 */
export declare function isHttpFile(program: Program, type: Type): boolean;
export declare function isOrExtendsHttpFile(program: Program, type: Type): boolean;
export interface HttpFileModel {
    readonly type: Model;
    readonly contentType: ModelProperty;
    readonly filename: ModelProperty;
    readonly contents: HttpOperationFileBody["contents"];
}
export declare function getHttpFileModel(program: Program, type: Type, filter?: (property: ModelProperty) => boolean): HttpFileModel | undefined;
export declare const $httpPart: HttpPartDecorator;
export interface HttpPart {
    readonly type: Type;
    readonly options: HttpPartOptions;
}
/** Return the http part information on a model that is an `HttpPart` */
export declare function getHttpPart(program: Program, target: Type): HttpPart | undefined;
/**
 * Specifies if inapplicable metadata should be included in the payload for
 * the given entity. This is true by default unless changed by this
 * decorator.
 *
 * @param entity Target model, namespace, or model property. If applied to a
 *               model or namespace, applies recursively to child models,
 *               namespaces, and model properties unless overridden by
 *               applying this decorator to a child.
 *
 * @param value `true` to include inapplicable metadata in payload, false to
 *               exclude it.
 *
 * @see isApplicableMetadata
 *
 * @ignore Cause issue with conflicting function of same name for now
 */
export declare function $includeInapplicableMetadataInPayload(context: DecoratorContext, entity: Type, value: boolean): void;
/**
 * Determines if the given model property should be included in the payload if it is
 * inapplicable metadata.
 *
 * @see isApplicableMetadata
 * @see $includeInapplicableMetadataInPayload
 */
export declare function includeInapplicableMetadataInPayload(program: Program, property: ModelProperty): boolean;
//# sourceMappingURL=private.decorators.d.ts.map