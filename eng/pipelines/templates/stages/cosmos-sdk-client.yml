parameters:
- name: ServiceDirectory
  type: string
  default: not-specified
  
stages:
  - stage: Cosmos Emulator
    displayName: Cosmos Emulator
    - stage: Build
    jobs:
    - job: Test
      displayName: Download and run Cosmos Emulator
      - template: /eng/common/pipelines/templates/steps/cosmos-emulator.yml
        parameters:
          StartParameters: '/noexplorer /noui /enablepreview /disableratelimiting /enableaadauthentication /partitioncount=50 /consistency=Strong'
      - powershell: |
          $Key = 'C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=='
          $password = ConvertTo-SecureString -String $Key -Force -AsPlainText
          $cert = Get-ChildItem cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq "DocumentDbEmulatorCertificate" }
          Export-PfxCertificate -Cert $cert -FilePath ".\CosmosDbEmulatorCert.pfx" -Password $password | Out-Null
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import(".\CosmosDbEmulatorCert.pfx", $Key, "DefaultKeySet")
          $cert | Export-Certificate -FilePath "$env:temp\CosmosDbEmulatorCert.cer" -Type CERT
        displayName: 'Export Cosmos DB Emulator Certificate'
        
  - stage: Build
    jobs:
    - job: Test
      displayName: Build and Test
      variables:
        - template: ../variables/globals.yml
      strategy:
        matrix:
          Linux_Go115:
            pool.name: azsdk-pool-mms-ubuntu-2004-general
            image.name: MMSUbuntu20.04
            go.version: '1.15'
          Windows_Go115:
            pool.name: azsdk-pool-mms-win-2019-general
            image.name: MMS2019
            go.version: '1.15'
          Linux_Go114:
            pool.name: azsdk-pool-mms-ubuntu-2004-general
            image.name: MMSUbuntu20.04
            go.version: '1.14'
          Windows_Go114:
            pool.name: azsdk-pool-mms-win-2019-general
            image.name: MMS2019
            go.version: '1.14'
      pool:
        name: $(pool.name)
        vmImage: $(image.name)
      steps:
      - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
        parameters:
          AgentImage: $(image.name)

      - task: GoTool@0
        inputs:
          version: '$(go.version)'
        displayName: "Select Go Version"

      - template: ../steps/create-go-workspace.yml

      - template: ../steps/set-scope.yml
        parameters: 
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          GoWorkspace: $(GO_WORKSPACE_PATH)

      - template: ../steps/build-test.yml
        parameters: 
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          GoWorkspace: $(GO_WORKSPACE_PATH)
          Scope: $(SCOPE)
          Image: $(vm.image)
          GoVersion: $(go.version)

    - job: Analyze
      displayName: Analyze
      variables:
        - template: ../variables/globals.yml
      pool:
        name: azsdk-pool-mms-ubuntu-2004-general

      steps:
      - task: GoTool@0
        inputs:
          version: '1.15'
        displayName: "Select Go Version"

      - template: ../steps/create-go-workspace.yml

      - template: ../steps/set-scope.yml
        parameters: 
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          GoWorkspace: $(GO_WORKSPACE_PATH)

      - template: ../steps/analyze.yml
        parameters: 
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          GoWorkspace: $(GO_WORKSPACE_PATH)
          Scope: $(SCOPE)
          LintVersion: $(GoLintCLIVersion)