# This step is designed to work against linux only
parameters:
  ServiceDirectory: ''
  LintVersion: ''
  NonShipping: false
  LicenseCheck: true
  IsSdkLibrary: true
  ArtifactName: packages

steps:
  - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}
      PackageInfoDirectory: $(Build.ArtifactStagingDirectory)/PackageInfo

  - template: /eng/pipelines/templates/steps/set-artifact-packages.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}
      PackageInfoDirectory: $(Build.ArtifactStagingDirectory)/PackageInfo
      IncludeIndirect: false

  - pwsh: |
      . $(Build.SourcesDirectory)/eng/common/scripts/common.ps1
      . $(Build.SourcesDirectory)/eng/scripts/apiview-helpers.ps1

      $pkgs = Get-PackagesFromPackageInfo -PackageInfoFolder "$(Build.ArtifactStagingDirectory)/PackageInfo" `
        -IncludeIndirect $false -CustomCompareFunction { param($pkgProp) { return $pkgProp.CIParameters.IsSdkLibrary } }

      $changedServices = @()
      if ($pkgs) {
        $changedServices = $pkgs | ForEach-Object { $_.ServiceDirectory } | Sort-Object -Unique
      }
      else {
        Write-Host "No sdk packages were found in package set. Skipping APIView generation."
        exit 0
      }

      $failed = $false
      $directoryToPublish = Join-Path -Path $(Build.ArtifactStagingDirectory) ${{ parameters.ArtifactName }}

      foreach($serviceDirectory in $changedServices) {
        New-APIViewArtifacts `
          -ServiceDirectory $serviceDirectory `
          -OutputDirectory $(Build.ArtifactStagingDirectory) `
          -DirectoryToPublish $directoryToPublish
      }

      Copy-Item "$(Build.ArtifactStagingDirectory)/PackageInfo" -Destination $directoryToPublish -Recurse
    displayName: 'Create Go APIView Artifact'

  - ${{ if eq(parameters.ServiceDirectory, 'auto') }}:
    # in a PR context, always publish the artifacts, even if they are not shipping
    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: ${{ parameters.ArtifactName }}
        ArtifactPath: "$(Build.ArtifactStagingDirectory)/${{ parameters.ArtifactName }}"
  - ${{ else }}:
    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: ${{ parameters.ArtifactName }}
        ArtifactPath: "$(Build.ArtifactStagingDirectory)/${{ parameters.ArtifactName }}"
        CustomCondition: and(succeeded(), ${{ parameters.IsSdkLibrary }})

    - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
      parameters:
        ArtifactName: PackageInfo
        ArtifactPath: "$(Build.ArtifactStagingDirectory)/PackageInfo"
        CustomCondition: and(succeeded(), ${{ parameters.IsSdkLibrary }})

  - template: /eng/common/pipelines/templates/steps/set-default-branch.yml

  - pwsh: |
      . $(Build.SourcesDirectory)/eng/scripts/apiview-helpers.ps1
      New-APIViewFromCI `
        -ServiceDirectory '${{parameters.ServiceDirectory}}' `
        -ArtifactPath '$(Build.ArtifactStagingDirectory)' `
        -ApiKey '$(azuresdk-apiview-apikey)' `
        -SourceBranch '$(Build.SourceBranchName)' `
        -DefaultBranch '$(DefaultBranch)' `
        -ConfigFileDir '$(Build.ArtifactStagingDirectory)/PackageInfo' `
        -BuildId $(Build.BuildId) `
        -RepoName '$(Build.Repository.Name)'
    displayName: Create API review for Go
    workingDirectory: $(Pipeline.Workspace)
    condition: and(succeeded(), ne(variables['Skip.CreateApiReview'], 'true') , ne(variables['Build.Reason'],'PullRequest'), eq(variables['System.TeamProject'], 'internal'))

  - ${{ if eq(variables['Build.Reason'],'PullRequest') }}:
    - template: /eng/common/pipelines/templates/steps/detect-api-changes.yml
      parameters:
        Condition: ${{ parameters.IsSdkLibrary }}

  - ${{ if and(ne(variables['Skip.PackageValidation'], 'true'), eq(variables['System.TeamProject'], 'internal')) }}:
    - pwsh: |
        . ./eng/common/scripts/common.ps1
        $artifactList = @()
        foreach ($sdk in (Get-AllPackageInfoFromRepo '${{ parameters.ServiceDirectory }}')) {
          $artifactList += [PSCustomObject]@{
            name = $sdk.Name
          }
        }
        $ArtifactsList = $artifactList | ConvertTo-Json -Compress
        Write-Host "ArtifactsList: [$ArtifactsList]"
        echo "##vso[task.setvariable variable=ArtifactsList]$ArtifactsList"
      displayName: 'Set artifacts variable'
      failOnStderr: false
      workingDirectory: $(System.DefaultWorkingDirectory)

    - pwsh: |
        echo "##vso[task.setvariable variable=SetAsReleaseBuild]false"
      displayName: "Set as release build"
      condition: and(succeeded(), eq(variables['SetAsReleaseBuild'], ''))

    - task: AzureCLI@2
      inputs:
        azureSubscription: opensource-api-connection
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $(Build.SourcesDirectory)/eng/common/scripts/Validate-All-Packages.ps1 `
            -ArtifactList ('$(ArtifactsList)' | ConvertFrom-Json | Select-Object Name) `
            -ArtifactPath $(Build.ArtifactStagingDirectory) `
            -RepoRoot $(Build.SourcesDirectory) `
            -APIKey $(azuresdk-apiview-apikey) `
            -ConfigFileDir '$(Build.ArtifactStagingDirectory)/PackageInfo' `
            -BuildDefinition $(System.CollectionUri)$(System.TeamProject)/_build?definitionId=$(System.DefinitionId) `
            -PipelineUrl $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId) `
            -IsReleaseBuild $$(SetAsReleaseBuild)
        pwsh: true
        workingDirectory: $(Pipeline.Workspace)
      displayName: Validate packages and update work items
      continueOnError: true
      condition: >-
        and(
          succeededOrFailed(),
          not(endsWith(variables['Build.Repository.Name'], '-pr'))
        )

  - pwsh: |
      ./eng/scripts/Invoke-DependencyCheck.ps1 "$(Packages)"
    displayName: Dependency Check
    condition: ne(variables['Skip.DependencyCheck'], 'true')
    env:
      GO111MODULE: 'on'

  - script: |
      curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{parameters.LintVersion}}
      golangci-lint --version
    displayName: 'Install GoLintCLI and dependencies.'
    condition: succeededOrFailed()
    workingDirectory: $(System.DefaultWorkingDirectory)
    retryCountOnTaskFailure: 3

  - pwsh: |
      $changedServices = "$(ChangedServices)" -split ","
      $failed = $false

      foreach($serviceDirectory in $changedServices) {
        $modDirs = & $(Build.SourcesDirectory)/eng/scripts/get_module_dirs.ps1 "$serviceDirectory"
        foreach ($md in $modDirs) {
          pushd $md
          Write-Host "##[command]Executing golangci-lint run -c $(System.DefaultWorkingDirectory)/eng/.golangci.yml in $md"
          golangci-lint run -c $(System.DefaultWorkingDirectory)/eng/.golangci.yml

          if ($LASTEXITCODE) {
            Write-Host "golangci-lint for $serviceDirectory failed. Check above output for details."
            $failed = $true
          }
        }
      }

      if ($failed) {
        Write-Host "golangci-lint failed. Check above output for details."
        exit 1
      }
    displayName: 'Lint'
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: succeededOrFailed()

  - pwsh: |
      $changedServices = "$(ChangedServices)" -split ","
      $failed = $false

      foreach($serviceDirectory in $changedServices) {
        $modDirs = & $(Build.SourcesDirectory)/eng/scripts/get_module_dirs.ps1 "$serviceDirectory"
        foreach ($md in $modDirs) {
          pushd $md
          Write-Host "##[command]Executing go get -u all in $md"
          go get -u all
          $diff = (git diff -w .)
          Write-Host ($diff -join "`n")
          if ($diff.Length -gt 0) {
            Write-Host "Failed to go get $serviceDirectory"
            $failed = $true
          }
        }
      }

      if ($failed) {
        Write-Host "go get failed. Check above output for details."
        exit 1
      }
    displayName: 'go get -u all'
    condition: eq(variables.SkipGoGetUAll, 'false')
    workingDirectory: $(System.DefaultWorkingDirectory)

  - pwsh: |
      $changedServices = "$(ChangedServices)" -split ","
      $failed = $false

      foreach($serviceDirectory in $changedServices) {
        $modDirs = & $(Build.SourcesDirectory)/eng/scripts/get_module_dirs.ps1 "$serviceDirectory"
        foreach ($md in $modDirs) {
          pushd $md
          Write-Host "##[command]Executing go mod tidy in $md"
          go mod tidy
          $diff = (git diff -w .)
          Write-Host ($diff -join "`n")
          if ($diff.Length -gt 0) {
            $failed = $true
            Write-Host "Failed to go mod tidy $serviceDirectory"
          }
        }
      }

      if ($failed) {
        Write-Host "go mod tidy failed. Check above output for details."
        exit 1
      }
    displayName: 'go mod tidy'
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: succeededOrFailed()

  - pwsh: |
      $changedServices = "$(ChangedServices)" -split ","
      foreach($serviceDirectory in $changedServices) {
        $modDirs = ./eng/scripts/get_module_dirs.ps1 "$serviceDirectory"
        foreach ($md in $modDirs) {
          if (-Not $md -Match "/arm") {
            Get-ChildItem $md/doc.go
          }
        }
      }
    displayName: 'Verify doc.go'
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: succeededOrFailed()

  - task: Powershell@2
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/scripts/copyright-header-check.ps1
      arguments: >
        -Packages '$(Packages)'
      pwsh: true
    displayName: 'Copyright header Check'
    condition: succeededOrFailed()

  - task: Powershell@2
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/scripts/license-check.ps1
      arguments: >
        -PackageInfoFolder '$(Build.ArtifactStagingDirectory)/PackageInfo'
      pwsh: true
    displayName: 'LICENSE.txt Check'
    condition: succeededOrFailed()

  - task: Powershell@2
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/scripts/go-fmt-check.ps1
      arguments: >
        -Packages '$(Packages)'
      pwsh: true
    displayName: 'Format Check'
    condition: succeededOrFailed()

  - template: /eng/common/pipelines/templates/steps/verify-links.yml
    parameters:
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        Directory: ''
        Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
      ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        Directory: sdk/${{ parameters.ServiceDirectory }}
      CheckLinkGuidance: $true
      Condition: succeededOrFailed()

  - pwsh: |
      if (-not "$(ChangedServices)") {
        Write-Host "No services were changed build. Skipping doccheck."
        exit 0
      }

      $changedServices = "$(ChangedServices)" -split ","
      $failed = $false

      foreach ($service in $changedServices) {
        go run . --directory "$(System.DefaultWorkingDirectory)/sdk/$service"
        if ($LASTEXITCODE -ne 0) {
          $failed = $true
        }
      }

      if ($failed) {
        Write-Host "Doccheck failed. Check above output for details."
        exit 1
      }
    displayName: 'Validate Documentation'
    condition: succeededOrFailed()
    workingDirectory: 'eng/tools/doccheck'

  - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml

  - pwsh: |
      ./eng/scripts/Invoke-SmokeTests.ps1 "$(ChangedServices)"
    displayName: 'Run Nightly SmokeTests'

  # There are no more checks after this one, so simply removing all packageInfo that aren't shipping
  # to allow the default verify-changeslogs template to work correctly is probably better than any custom conditional code in that template.
  - pwsh: |
      # remove the manifest files that were dropped into this directory due to publishing of the 1es artifact.
      # we don't need them around anymore and they will break the verify-changelogs step.

      if (Test-Path -Path $(Build.ArtifactStagingDirectory)/PackageInfo/_manifest) {
        Remove-Item -Recurse -Force -Path $(Build.ArtifactStagingDirectory)/PackageInfo/_manifest
      }

      Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/PackageInfo -Recurse -Filter *.json `
        | ForEach-Object {
          $json = Get-Content -Path $_.FullName -Raw | ConvertFrom-Json
          if ($json.CIParameters.NonShipping) {
            Remove-Item -Path $_.FullName -Force
          }
        }
    displayName: Clean up Non-Shipping Artifacts

  - template: /eng/common/pipelines/templates/steps/verify-changelogs.yml
    parameters:
      PackagePropertiesFolder: $(Build.ArtifactStagingDirectory)/PackageInfo
