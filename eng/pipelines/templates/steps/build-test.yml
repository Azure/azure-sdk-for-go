parameters:
  ServiceDirectory: ''
  GoWorkspace: ''
  Scope: 'sdk/...'
  Image: ''
  GoVersion: ''
  RunTests: false

steps:

  - pwsh: ./eng/scripts/build.ps1
    displayName: 'Build'
    workingDirectory: '${{parameters.GoWorkspace}}'
    env:
      GO111MODULE: 'on'

  - pwsh: ./eng/scripts/build.ps1 -vet -skipBuild
    displayName: 'Vet'
    workingDirectory: '${{parameters.GoWorkspace}}'
    env:
      GO111MODULE: 'on'

  - ${{ if eq(parameters.RunTests, 'true') }}:
    - pwsh: |
        go get github.com/jstemmer/go-junit-report
        go get github.com/axw/gocov/gocov
        go get github.com/AlekSi/gocov-xml
        go get github.com/matm/gocov-html
        go get -u github.com/wadey/gocovmerge
      displayName: "Install Coverage and Junit Dependencies"
      workingDirectory: '${{parameters.GoWorkspace}}'

    - pwsh: |
        $testDirs = (./eng/scripts/get_test_dirs.ps1 -serviceDir $(SCOPE))
        foreach ($td in $testDirs) {
          pushd $td
          Write-Host "##[command]Executing 'go test -run "^Test" -v -coverprofile coverage.txt .' in $td"
          go test -run "^Test" -v -coverprofile coverage.txt . | Tee-Object -FilePath outfile.txt
          if ($LASTEXITCODE) { exit $LASTEXITCODE }
          cat outfile.txt | go-junit-report > report.xml
          # if no tests were actually run (e.g. examples) delete the coverage file so it's omitted from the coverage report
          if (Select-String -path ./report.xml -pattern '<testsuites></testsuites>' -simplematch -quiet) {
            Write-Host "##[command]Deleting empty coverage file"
            rm coverage.txt
          }
        }
      displayName: 'Run Tests'
      workingDirectory: '${{parameters.GoWorkspace}}'
      env:
        GO111MODULE: 'on'

    - pwsh: ../eng/scripts/create_coverage.ps1 ${{parameters.ServiceDirectory}}
      displayName: 'Generate Coverage XML'
      workingDirectory: '${{parameters.GoWorkspace}}sdk'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '${{parameters.GoWorkspace}}sdk/${{parameters.ServiceDirectory}}/report.xml'
        testRunTitle: 'Go ${{ parameters.GoVersion }} on ${{ parameters.Image }}'
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '${{parameters.GoWorkspace}}sdk/${{parameters.ServiceDirectory}}/coverage.xml'
        additionalCodeCoverageFiles: '${{parameters.GoWorkspace}}sdk/${{parameters.ServiceDirectory}}/coverage.html'
        failIfCoverageEmpty: true
