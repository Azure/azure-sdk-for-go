parameters:
  - name:  ServiceDirectory
    type: string
    default: ''
  - name:  Image
    type: string
    default: ''
  - name:  GoVersion
    type: string
    default: ''
  - name:  TestProxy
    type: boolean
    default: false
  - name: EnvVars
    type: object
    default: {}
  - name: TestRunTime
    type: string
    default: '600s'
  - name: EnableRaceDetector
    type: boolean
    default: false
  - name: UseFederatedAuth
    type: boolean
    default: false
  - name: ServiceConnection
    type: string
    default: ''

steps:
  - template: /eng/common/pipelines/templates/steps/save-package-properties.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}
      PackageInfoDirectory: $(Build.ArtifactStagingDirectory)/PackageInfo

  - template: /eng/pipelines/templates/steps/set-artifact-packages.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}
      PackageInfoDirectory: $(Build.ArtifactStagingDirectory)/PackageInfo
      IncludeIndirect: true

  - task: Powershell@2
    displayName: Use azcore from main
    condition: eq(variables.UseAzcoreFromMain, 'true')
    env:
      GO111MODULE: 'on'
    inputs:
      targetType: filePath
      pwsh: true
      filePath: eng/scripts/Replace-azcore.ps1
      arguments: '-ServiceDirectory "$(ChangedServices)"'

  - task: Powershell@2
    displayName: Build
    env:
      GO111MODULE: 'on'
    inputs:
      targetType: filePath
      pwsh: true
      filePath: eng/scripts/build.ps1
      arguments: -filter "$(Packages)"

  - task: Powershell@2
    displayName: Vet
    env:
      GO111MODULE: 'on'
    inputs:
      targetType: filePath
      pwsh: true
      filePath: eng/scripts/build.ps1
      arguments: -vet -skipBuild -filter '$(Packages)'

  - pwsh: |
      go install github.com/jstemmer/go-junit-report/v2@v2.1.0
      if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
      go install github.com/axw/gocov/gocov@v1.2.1
      if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
      go install github.com/AlekSi/gocov-xml@v1.1.0
      if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
      go install github.com/matm/gocov-html/cmd/gocov-html@v1.4.0
      if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
    displayName: "Install Coverage and Junit Dependencies"
    retryCountOnTaskFailure: 3

  - ${{ if eq(parameters.TestProxy, true) }}:
    - template: /eng/common/testproxy/test-proxy-tool.yml

  # we do not need to change any conditional activation for this section, as it is only activated when
  # invoking a livetest run, which will never be the case for PRs. Devs will /azp run go - <service>
  # to get access to this section of the pipeline
  - ${{ if parameters.UseFederatedAuth }}:
    - task: AzurePowerShell@5
      displayName: Run Tests - v$(GoVersion) (Federated Auth)
      inputs:
        azureSubscription: ${{ parameters.ServiceConnection }}
        azurePowerShellVersion: LatestVersion
        ScriptType: InlineScript
        Inline: |
          $account = (Get-AzContext).Account
          $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id
          $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants

          ./eng/scripts/run_tests.ps1 ${{ parameters.ServiceDirectory }} ${{ parameters.TestRunTime }} $${{ parameters.EnableRaceDetector }}
          exit $LASTEXITCODE
        pwsh: true
      env:
        GO111MODULE: 'on'
        PROXY_CERT: $(Build.SourcesDirectory)/eng/common/testproxy/dotnet-devcert.crt
        ${{ insert }}: ${{ parameters.EnvVars }}
        GOTRACEBACK: all
        AZURE_SDK_GO_LOGGING: all
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - task: AzurePowerShell@5
      displayName: Build Performance Tests (Federated Auth)
      inputs:
        azureSubscription: ${{ parameters.ServiceConnection }}
        azurePowerShellVersion: LatestVersion
        ScriptType: InlineScript
        Inline: |
          $account = (Get-AzContext).Account
          $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id
          $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants

          eng/scripts/Build_Perf.ps1 ${{ parameters.ServiceDirectory }} $$(UseAzcoreFromMain)
          exit $LASTEXITCODE
        pwsh: true
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - ${{ else }}:
    - task: PowerShell@2
      displayName: Run Tests - v$(GoVersion)
      inputs:
        targetType: 'filePath'
        filePath: ./eng/scripts/run_tests.ps1
        arguments: '"$(Packages)" ${{ parameters.TestRunTime }} $${{ parameters.EnableRaceDetector }}'
        pwsh: true
      env:
        GO111MODULE: 'on'
        PROXY_CERT: $(Build.SourcesDirectory)/eng/common/testproxy/dotnet-devcert.crt
        ${{ insert }}: ${{ parameters.EnvVars }}
        GOTRACEBACK: all
        AZURE_SDK_GO_LOGGING: all

    - task: PowerShell@2
      displayName: 'Build Performance Tests'
      inputs:
        targetType: 'filePath'
        filePath: ./eng/scripts/Build_Perf.ps1
        arguments: '"$(Packages)" $$(UseAzcoreFromMain)'
        pwsh: true

  - ${{ if eq(parameters.TestProxy, true) }}:
    - pwsh: |
        # $(Build.SourcesDirectory)/test-proxy.log is the hardcoded output log location for the test-proxy-tool.yml
        cat $(Build.SourcesDirectory)/test-proxy.log
      displayName: 'Dump Test Proxy logs'
      condition: succeededOrFailed()

  # todo: combine test results into a test results file, this will be broken for now.
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: '$(Build.SourcesDirectory)/sdk/${{parameters.ServiceDirectory}}/report.xml'
      testRunTitle: 'Go ${{ parameters.GoVersion }} on ${{ parameters.Image }}'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@2
    condition: succeededOrFailed()
    inputs:
      summaryFileLocation: './coverage.xml'
      additionalCodeCoverageFiles: './coverage.html'
