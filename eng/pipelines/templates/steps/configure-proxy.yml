parameters:
  ServiceDirectory: ''

steps:
  - pwsh: |
        $certUriPfx = "https://github.com/Azure/azure-sdk-tools/raw/main/tools/test-proxy/docker/dev_certificate/dotnet-devcert.pfx"
        $certUriCrt = "https://github.com/Azure/azure-sdk-tools/raw/main/tools/test-proxy/docker/dev_certificate/dotnet-devcert.crt"
        $certLocationPfx = "$(Build.SourcesDirectory)/dotnet-devcert.pfx"
        $certLocationCrt = "$(Build.SourcesDirectory)/dotnet-devcert.crt"

        Invoke-WebRequest `
            -Uri $certUriPfx `
            -OutFile $certLocationPfx -UseBasicParsing

        Invoke-WebRequest `
            -Uri $certUriCrt `
            -OutFile $certLocationCrt -UseBasicParsing

        dotnet dev-certs https --clean --import $certLocationPfx -p "password"

        Write-Host "##vso[task.setvariable variable=PROXY_CERT]$certLocationCrt"
    displayName: 'Download and Trust Certificate'
    
#   - bash: |
#         TMP_PATH=$CERT_FOLDER
#         PFXFILE=$CERT_FOLDER/dotnet-devcert.pfx
#         CRTFILE=$CERT_FOLDER/dotnet-devcert.crt

#         NSSDB_PATHS=(
#             "$HOME/.pki/nssdb"
#             "$HOME/snap/chromium/current/.pki/nssdb"
#             "$HOME/snap/postman/current/.pki/nssdb"
#         )

#         function configure_nssdb() {
#             echo "Configuring nssdb for $1"
#             certutil -d sql:$1 -D -n dotnet-devcert
#             certutil -d sql:$1 -A -t "CP,," -n dotnet-devcert -i $CRTFILE
#         }

#         for NSSDB in ${NSSDB_PATHS[@]}; do
#             if [ -d "$NSSDB" ]; then
#                 configure_nssdb $NSSDB
#             fi
#         done

#         if [ $(id -u) -ne 0 ]; then
#             SUDO='sudo'
#         fi

#         $SUDO cp $CRTFILE "/usr/local/share/ca-certificates"
#         $SUDO update-ca-certificates
#     displayName: 'Trust Certificate (Linux)'
#     condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
#   - pwsh: |
#         Write-Host "Trust Actions Here"
#     displayName: 'Trust Certificate (Windows)'
#     condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))