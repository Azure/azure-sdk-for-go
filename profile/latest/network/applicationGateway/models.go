// +build go1.9

// Copyright 2017 Microsoft Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was auto-generated by:
// github.com/Azure/azure-sdk-for-go/tools/profileBuilder
// commit ID: b19c730e3a5c747d9055c95884b5c0310f7f2f16

package applicationgateway

import original "github.com/Azure/azure-sdk-for-go/service/network/management/2017-06-01/applicationGateway"

type ApplicationGatewaysClient = original.ApplicationGatewaysClient

const (
	DefaultBaseURI = original.DefaultBaseURI
)

type ManagementClient = original.ManagementClient
type BackendHealthServerHealth = original.BackendHealthServerHealth

const (
	Down		BackendHealthServerHealth	= original.Down
	Draining	BackendHealthServerHealth	= original.Draining
	Partial		BackendHealthServerHealth	= original.Partial
	Unknown		BackendHealthServerHealth	= original.Unknown
	Up		BackendHealthServerHealth	= original.Up
)

type CookieBasedAffinity = original.CookieBasedAffinity

const (
	Disabled	CookieBasedAffinity	= original.Disabled
	Enabled		CookieBasedAffinity	= original.Enabled
)

type FirewallMode = original.FirewallMode

const (
	Detection	FirewallMode	= original.Detection
	Prevention	FirewallMode	= original.Prevention
)

type IPAllocationMethod = original.IPAllocationMethod

const (
	Dynamic	IPAllocationMethod	= original.Dynamic
	Static	IPAllocationMethod	= original.Static
)

type IPVersion = original.IPVersion

const (
	IPv4	IPVersion	= original.IPv4
	IPv6	IPVersion	= original.IPv6
)

type OperationalState = original.OperationalState

const (
	Running		OperationalState	= original.Running
	Starting	OperationalState	= original.Starting
	Stopped		OperationalState	= original.Stopped
	Stopping	OperationalState	= original.Stopping
)

type Protocol = original.Protocol

const (
	HTTP	Protocol	= original.HTTP
	HTTPS	Protocol	= original.HTTPS
)

type RedirectType = original.RedirectType

const (
	Found		RedirectType	= original.Found
	Permanent	RedirectType	= original.Permanent
	SeeOther	RedirectType	= original.SeeOther
	Temporary	RedirectType	= original.Temporary
)

type RequestRoutingRuleType = original.RequestRoutingRuleType

const (
	Basic			RequestRoutingRuleType	= original.Basic
	PathBasedRouting	RequestRoutingRuleType	= original.PathBasedRouting
)

type RouteNextHopType = original.RouteNextHopType

const (
	Internet		RouteNextHopType	= original.Internet
	None			RouteNextHopType	= original.None
	VirtualAppliance	RouteNextHopType	= original.VirtualAppliance
	VirtualNetworkGateway	RouteNextHopType	= original.VirtualNetworkGateway
	VnetLocal		RouteNextHopType	= original.VnetLocal
)

type SecurityRuleAccess = original.SecurityRuleAccess

const (
	Allow	SecurityRuleAccess	= original.Allow
	Deny	SecurityRuleAccess	= original.Deny
)

type SecurityRuleDirection = original.SecurityRuleDirection

const (
	Inbound		SecurityRuleDirection	= original.Inbound
	Outbound	SecurityRuleDirection	= original.Outbound
)

type SecurityRuleProtocol = original.SecurityRuleProtocol

const (
	Asterisk	SecurityRuleProtocol	= original.Asterisk
	TCP		SecurityRuleProtocol	= original.TCP
	UDP		SecurityRuleProtocol	= original.UDP
)

type SkuName = original.SkuName

const (
	StandardLarge	SkuName	= original.StandardLarge
	StandardMedium	SkuName	= original.StandardMedium
	StandardSmall	SkuName	= original.StandardSmall
	WAFLarge	SkuName	= original.WAFLarge
	WAFMedium	SkuName	= original.WAFMedium
)

type SslCipherSuite = original.SslCipherSuite

const (
	TLSDHEDSSWITHAES128CBCSHA		SslCipherSuite	= original.TLSDHEDSSWITHAES128CBCSHA
	TLSDHEDSSWITHAES128CBCSHA256		SslCipherSuite	= original.TLSDHEDSSWITHAES128CBCSHA256
	TLSDHEDSSWITHAES256CBCSHA		SslCipherSuite	= original.TLSDHEDSSWITHAES256CBCSHA
	TLSDHEDSSWITHAES256CBCSHA256		SslCipherSuite	= original.TLSDHEDSSWITHAES256CBCSHA256
	TLSDHERSAWITHAES128CBCSHA		SslCipherSuite	= original.TLSDHERSAWITHAES128CBCSHA
	TLSDHERSAWITHAES128GCMSHA256		SslCipherSuite	= original.TLSDHERSAWITHAES128GCMSHA256
	TLSDHERSAWITHAES256CBCSHA		SslCipherSuite	= original.TLSDHERSAWITHAES256CBCSHA
	TLSDHERSAWITHAES256GCMSHA384		SslCipherSuite	= original.TLSDHERSAWITHAES256GCMSHA384
	TLSECDHEECDSAWITHAES128CBCSHA		SslCipherSuite	= original.TLSECDHEECDSAWITHAES128CBCSHA
	TLSECDHEECDSAWITHAES128CBCSHA256	SslCipherSuite	= original.TLSECDHEECDSAWITHAES128CBCSHA256
	TLSECDHEECDSAWITHAES128GCMSHA256	SslCipherSuite	= original.TLSECDHEECDSAWITHAES128GCMSHA256
	TLSECDHEECDSAWITHAES256CBCSHA		SslCipherSuite	= original.TLSECDHEECDSAWITHAES256CBCSHA
	TLSECDHEECDSAWITHAES256CBCSHA384	SslCipherSuite	= original.TLSECDHEECDSAWITHAES256CBCSHA384
	TLSECDHEECDSAWITHAES256GCMSHA384	SslCipherSuite	= original.TLSECDHEECDSAWITHAES256GCMSHA384
	TLSECDHERSAWITHAES128CBCSHA		SslCipherSuite	= original.TLSECDHERSAWITHAES128CBCSHA
	TLSECDHERSAWITHAES128CBCSHA256		SslCipherSuite	= original.TLSECDHERSAWITHAES128CBCSHA256
	TLSECDHERSAWITHAES256CBCSHA		SslCipherSuite	= original.TLSECDHERSAWITHAES256CBCSHA
	TLSECDHERSAWITHAES256CBCSHA384		SslCipherSuite	= original.TLSECDHERSAWITHAES256CBCSHA384
	TLSRSAWITH3DESEDECBCSHA			SslCipherSuite	= original.TLSRSAWITH3DESEDECBCSHA
	TLSRSAWITHAES128CBCSHA			SslCipherSuite	= original.TLSRSAWITHAES128CBCSHA
	TLSRSAWITHAES128CBCSHA256		SslCipherSuite	= original.TLSRSAWITHAES128CBCSHA256
	TLSRSAWITHAES128GCMSHA256		SslCipherSuite	= original.TLSRSAWITHAES128GCMSHA256
	TLSRSAWITHAES256CBCSHA			SslCipherSuite	= original.TLSRSAWITHAES256CBCSHA
	TLSRSAWITHAES256CBCSHA256		SslCipherSuite	= original.TLSRSAWITHAES256CBCSHA256
	TLSRSAWITHAES256GCMSHA384		SslCipherSuite	= original.TLSRSAWITHAES256GCMSHA384
)

type SslPolicyName = original.SslPolicyName

const (
	AppGwSslPolicy20150501	SslPolicyName	= original.AppGwSslPolicy20150501
	AppGwSslPolicy20170401	SslPolicyName	= original.AppGwSslPolicy20170401
	AppGwSslPolicy20170401S	SslPolicyName	= original.AppGwSslPolicy20170401S
)

type SslPolicyType = original.SslPolicyType

const (
	Custom		SslPolicyType	= original.Custom
	Predefined	SslPolicyType	= original.Predefined
)

type SslProtocol = original.SslProtocol

const (
	TLSv10	SslProtocol	= original.TLSv10
	TLSv11	SslProtocol	= original.TLSv11
	TLSv12	SslProtocol	= original.TLSv12
)

type Tier = original.Tier

const (
	Standard	Tier	= original.Standard
	WAF		Tier	= original.WAF
)

type TransportProtocol = original.TransportProtocol

const (
	TransportProtocolTCP	TransportProtocol	= original.TransportProtocolTCP
	TransportProtocolUDP	TransportProtocol	= original.TransportProtocolUDP
)

type AuthenticationCertificate = original.AuthenticationCertificate
type AuthenticationCertificatePropertiesFormat = original.AuthenticationCertificatePropertiesFormat
type AvailableSslOptions = original.AvailableSslOptions
type AvailableSslOptionsPropertiesFormat = original.AvailableSslOptionsPropertiesFormat
type AvailableSslPredefinedPolicies = original.AvailableSslPredefinedPolicies
type AvailableWafRuleSetsResult = original.AvailableWafRuleSetsResult
type BackendAddress = original.BackendAddress
type BackendAddressPool = original.BackendAddressPool
type BackendAddressPoolPropertiesFormat = original.BackendAddressPoolPropertiesFormat
type BackendAddressPoolPropertiesFormatType = original.BackendAddressPoolPropertiesFormatType
type BackendAddressPoolType = original.BackendAddressPoolType
type BackendHealthHTTPSettings = original.BackendHealthHTTPSettings
type BackendHealthPool = original.BackendHealthPool
type BackendHealthServer = original.BackendHealthServer
type BackendHealthType = original.BackendHealthType
type BackendHTTPSettings = original.BackendHTTPSettings
type BackendHTTPSettingsPropertiesFormat = original.BackendHTTPSettingsPropertiesFormat
type ConnectionDraining = original.ConnectionDraining
type FirewallDisabledRuleGroup = original.FirewallDisabledRuleGroup
type FirewallRule = original.FirewallRule
type FirewallRuleGroup = original.FirewallRuleGroup
type FirewallRuleSet = original.FirewallRuleSet
type FirewallRuleSetPropertiesFormat = original.FirewallRuleSetPropertiesFormat
type FrontendIPConfiguration = original.FrontendIPConfiguration
type FrontendIPConfigurationPropertiesFormat = original.FrontendIPConfigurationPropertiesFormat
type FrontendPort = original.FrontendPort
type FrontendPortPropertiesFormat = original.FrontendPortPropertiesFormat
type HTTPListener = original.HTTPListener
type HTTPListenerPropertiesFormat = original.HTTPListenerPropertiesFormat
type InboundNatRule = original.InboundNatRule
type InboundNatRulePropertiesFormat = original.InboundNatRulePropertiesFormat
type IPConfiguration = original.IPConfiguration
type IPConfigurationPropertiesFormat = original.IPConfigurationPropertiesFormat
type IPConfigurationPropertiesFormatType = original.IPConfigurationPropertiesFormatType
type IPConfigurationType = original.IPConfigurationType
type ListResult = original.ListResult
type Model = original.Model
type NetworkInterface = original.NetworkInterface
type NetworkInterfaceDNSSettings = original.NetworkInterfaceDNSSettings
type NetworkInterfaceIPConfiguration = original.NetworkInterfaceIPConfiguration
type NetworkInterfaceIPConfigurationPropertiesFormat = original.NetworkInterfaceIPConfigurationPropertiesFormat
type NetworkInterfacePropertiesFormat = original.NetworkInterfacePropertiesFormat
type NetworkSecurityGroup = original.NetworkSecurityGroup
type NetworkSecurityGroupPropertiesFormat = original.NetworkSecurityGroupPropertiesFormat
type PathRule = original.PathRule
type PathRulePropertiesFormat = original.PathRulePropertiesFormat
type PrivateAccessServicePropertiesFormat = original.PrivateAccessServicePropertiesFormat
type Probe = original.Probe
type ProbeHealthResponseMatch = original.ProbeHealthResponseMatch
type ProbePropertiesFormat = original.ProbePropertiesFormat
type PropertiesFormat = original.PropertiesFormat
type PublicIPAddress = original.PublicIPAddress
type PublicIPAddressDNSSettings = original.PublicIPAddressDNSSettings
type PublicIPAddressPropertiesFormat = original.PublicIPAddressPropertiesFormat
type RedirectConfiguration = original.RedirectConfiguration
type RedirectConfigurationPropertiesFormat = original.RedirectConfigurationPropertiesFormat
type RequestRoutingRule = original.RequestRoutingRule
type RequestRoutingRulePropertiesFormat = original.RequestRoutingRulePropertiesFormat
type Resource = original.Resource
type ResourceNavigationLink = original.ResourceNavigationLink
type ResourceNavigationLinkFormat = original.ResourceNavigationLinkFormat
type Route = original.Route
type RoutePropertiesFormat = original.RoutePropertiesFormat
type RouteTable = original.RouteTable
type RouteTablePropertiesFormat = original.RouteTablePropertiesFormat
type SecurityRule = original.SecurityRule
type SecurityRulePropertiesFormat = original.SecurityRulePropertiesFormat
type Sku = original.Sku
type SslCertificate = original.SslCertificate
type SslCertificatePropertiesFormat = original.SslCertificatePropertiesFormat
type SslPolicy = original.SslPolicy
type SslPredefinedPolicy = original.SslPredefinedPolicy
type SslPredefinedPolicyPropertiesFormat = original.SslPredefinedPolicyPropertiesFormat
type Subnet = original.Subnet
type SubnetPropertiesFormat = original.SubnetPropertiesFormat
type SubResource = original.SubResource
type URLPathMap = original.URLPathMap
type URLPathMapPropertiesFormat = original.URLPathMapPropertiesFormat
type WebApplicationFirewallConfiguration = original.WebApplicationFirewallConfiguration

func UserAgent() string {
	return original.UserAgent()
}
func Version() string {
	return original.Version()
}
func NewApplicationGatewaysClient(subscriptionID string) ApplicationGatewaysClient {
	return original.NewApplicationGatewaysClient(subscriptionID)
}
func NewApplicationGatewaysClientWithBaseURI(baseURI string, subscriptionID string) ApplicationGatewaysClient {
	return original.NewApplicationGatewaysClientWithBaseURI(baseURI, subscriptionID)
}
func New(subscriptionID string) ManagementClient {
	return original.New(subscriptionID)
}
func NewWithBaseURI(baseURI string, subscriptionID string) ManagementClient {
	return original.NewWithBaseURI(baseURI, subscriptionID)
}
