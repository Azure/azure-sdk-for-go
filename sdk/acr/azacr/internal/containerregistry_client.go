//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package internal

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ContainerRegistryClient contains the methods for the ContainerRegistry group.
// Don't use this type directly, use NewContainerRegistryClient() instead.
type ContainerRegistryClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// NewContainerRegistryClient creates a new instance of ContainerRegistryClient with the specified values.
//   - endpoint - Registry login URL
//   - pl - the pipeline used for sending requests and handling responses.
func NewContainerRegistryClient(endpoint string, pl runtime.Pipeline) *ContainerRegistryClient {
	client := &ContainerRegistryClient{
		endpoint: endpoint,
		pl:       pl,
	}
	return client
}

// CheckDockerV2Support - Tells whether this Docker Registry instance supports Docker Registry HTTP API v2
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - options - ContainerRegistryClientCheckDockerV2SupportOptions contains the optional parameters for the ContainerRegistryClient.CheckDockerV2Support
//     method.
func (client *ContainerRegistryClient) CheckDockerV2Support(ctx context.Context, options *ContainerRegistryClientCheckDockerV2SupportOptions) (ContainerRegistryClientCheckDockerV2SupportResponse, error) {
	req, err := client.checkDockerV2SupportCreateRequest(ctx, options)
	if err != nil {
		return ContainerRegistryClientCheckDockerV2SupportResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientCheckDockerV2SupportResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientCheckDockerV2SupportResponse{}, runtime.NewResponseError(resp)
	}
	return ContainerRegistryClientCheckDockerV2SupportResponse{}, nil
}

// checkDockerV2SupportCreateRequest creates the CheckDockerV2Support request.
func (client *ContainerRegistryClient) checkDockerV2SupportCreateRequest(ctx context.Context, options *ContainerRegistryClientCheckDockerV2SupportOptions) (*policy.Request, error) {
	urlPath := "/v2/"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// CreateManifestWithBinary - Put the manifest identified by name and reference where reference can be a tag or digest.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - A tag or a digest, pointing to a specific image
//   - contentType - Upload file type
//   - payload - Manifest body, can take v1 or v2 values depending on accept header
//   - options - ContainerRegistryClientCreateManifestWithBinaryOptions contains the optional parameters for the ContainerRegistryClient.CreateManifestWithBinary
//     method.
func (client *ContainerRegistryClient) CreateManifestWithBinary(ctx context.Context, name string, reference string, contentType ContentType, payload io.ReadSeekCloser, options *ContainerRegistryClientCreateManifestWithBinaryOptions) (ContainerRegistryClientCreateManifestWithBinaryResponse, error) {
	req, err := client.createManifestWithBinaryCreateRequest(ctx, name, reference, contentType, payload, options)
	if err != nil {
		return ContainerRegistryClientCreateManifestWithBinaryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientCreateManifestWithBinaryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return ContainerRegistryClientCreateManifestWithBinaryResponse{}, runtime.NewResponseError(resp)
	}
	return client.createManifestWithBinaryHandleResponse(resp)
}

// createManifestWithBinaryCreateRequest creates the CreateManifestWithBinary request.
func (client *ContainerRegistryClient) createManifestWithBinaryCreateRequest(ctx context.Context, name string, reference string, contentType ContentType, payload io.ReadSeekCloser, options *ContainerRegistryClientCreateManifestWithBinaryOptions) (*policy.Request, error) {
	urlPath := "/v2/{name}/manifests/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Content-Type"] = []string{string(contentType)}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, req.SetBody(payload, string(contentType))
}

// createManifestWithBinaryHandleResponse handles the CreateManifestWithBinary response.
func (client *ContainerRegistryClient) createManifestWithBinaryHandleResponse(resp *http.Response) (ContainerRegistryClientCreateManifestWithBinaryResponse, error) {
	result := ContainerRegistryClientCreateManifestWithBinaryResponse{}
	if val := resp.Header.Get("Docker-Content-Digest"); val != "" {
		result.DockerContentDigest = &val
	}
	if val := resp.Header.Get("Location"); val != "" {
		result.Location = &val
	}
	if val := resp.Header.Get("Content-Length"); val != "" {
		contentLength, err := strconv.ParseInt(val, 10, 64)
		if err != nil {
			return ContainerRegistryClientCreateManifestWithBinaryResponse{}, err
		}
		result.ContentLength = &contentLength
	}
	return result, nil
}

// DeleteManifest - Delete the manifest identified by name and reference. Note that a manifest can only be deleted by digest.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - Digest of a BLOB
//   - options - ContainerRegistryClientDeleteManifestOptions contains the optional parameters for the ContainerRegistryClient.DeleteManifest
//     method.
func (client *ContainerRegistryClient) DeleteManifest(ctx context.Context, name string, reference string, options *ContainerRegistryClientDeleteManifestOptions) (ContainerRegistryClientDeleteManifestResponse, error) {
	req, err := client.deleteManifestCreateRequest(ctx, name, reference, options)
	if err != nil {
		return ContainerRegistryClientDeleteManifestResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientDeleteManifestResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNotFound) {
		return ContainerRegistryClientDeleteManifestResponse{}, runtime.NewResponseError(resp)
	}
	return ContainerRegistryClientDeleteManifestResponse{}, nil
}

// deleteManifestCreateRequest creates the DeleteManifest request.
func (client *ContainerRegistryClient) deleteManifestCreateRequest(ctx context.Context, name string, reference string, options *ContainerRegistryClientDeleteManifestOptions) (*policy.Request, error) {
	urlPath := "/v2/{name}/manifests/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteRepository - Delete the repository identified by name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - options - ContainerRegistryClientDeleteRepositoryOptions contains the optional parameters for the ContainerRegistryClient.DeleteRepository
//     method.
func (client *ContainerRegistryClient) DeleteRepository(ctx context.Context, name string, options *ContainerRegistryClientDeleteRepositoryOptions) (ContainerRegistryClientDeleteRepositoryResponse, error) {
	req, err := client.deleteRepositoryCreateRequest(ctx, name, options)
	if err != nil {
		return ContainerRegistryClientDeleteRepositoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientDeleteRepositoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNotFound) {
		return ContainerRegistryClientDeleteRepositoryResponse{}, runtime.NewResponseError(resp)
	}
	return ContainerRegistryClientDeleteRepositoryResponse{}, nil
}

// deleteRepositoryCreateRequest creates the DeleteRepository request.
func (client *ContainerRegistryClient) deleteRepositoryCreateRequest(ctx context.Context, name string, options *ContainerRegistryClientDeleteRepositoryOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// DeleteTag - Delete tag
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - Tag name
//   - options - ContainerRegistryClientDeleteTagOptions contains the optional parameters for the ContainerRegistryClient.DeleteTag
//     method.
func (client *ContainerRegistryClient) DeleteTag(ctx context.Context, name string, reference string, options *ContainerRegistryClientDeleteTagOptions) (ContainerRegistryClientDeleteTagResponse, error) {
	req, err := client.deleteTagCreateRequest(ctx, name, reference, options)
	if err != nil {
		return ContainerRegistryClientDeleteTagResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientDeleteTagResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNotFound) {
		return ContainerRegistryClientDeleteTagResponse{}, runtime.NewResponseError(resp)
	}
	return ContainerRegistryClientDeleteTagResponse{}, nil
}

// deleteTagCreateRequest creates the DeleteTag request.
func (client *ContainerRegistryClient) deleteTagCreateRequest(ctx context.Context, name string, reference string, options *ContainerRegistryClientDeleteTagOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_tags/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetManifest - Get the manifest identified by name and reference where reference can be a tag or digest.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - A tag or a digest, pointing to a specific image
//   - options - ContainerRegistryClientGetManifestOptions contains the optional parameters for the ContainerRegistryClient.GetManifest
//     method.
func (client *ContainerRegistryClient) GetManifest(ctx context.Context, name string, reference string, options *ContainerRegistryClientGetManifestOptions) (ContainerRegistryClientGetManifestResponse, error) {
	req, err := client.getManifestCreateRequest(ctx, name, reference, options)
	if err != nil {
		return ContainerRegistryClientGetManifestResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientGetManifestResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientGetManifestResponse{}, runtime.NewResponseError(resp)
	}
	return client.getManifestHandleResponse(resp)
}

// getManifestCreateRequest creates the GetManifest request.
func (client *ContainerRegistryClient) getManifestCreateRequest(ctx context.Context, name string, reference string, options *ContainerRegistryClientGetManifestOptions) (*policy.Request, error) {
	urlPath := "/v2/{name}/manifests/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.Accept != nil {
		req.Raw().Header["accept"] = []string{*options.Accept}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getManifestHandleResponse handles the GetManifest response.
func (client *ContainerRegistryClient) getManifestHandleResponse(resp *http.Response) (ContainerRegistryClientGetManifestResponse, error) {
	result := ContainerRegistryClientGetManifestResponse{}
	if val := resp.Header.Get("Docker-Content-Digest"); val != "" {
		result.DockerContentDigest = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManifestWrapper); err != nil {
		return ContainerRegistryClientGetManifestResponse{}, err
	}
	return result, nil
}

// GetManifestProperties - Get manifest attributes
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - digest - Digest of a BLOB
//   - options - ContainerRegistryClientGetManifestPropertiesOptions contains the optional parameters for the ContainerRegistryClient.GetManifestProperties
//     method.
func (client *ContainerRegistryClient) GetManifestProperties(ctx context.Context, name string, digest string, options *ContainerRegistryClientGetManifestPropertiesOptions) (ContainerRegistryClientGetManifestPropertiesResponse, error) {
	req, err := client.getManifestPropertiesCreateRequest(ctx, name, digest, options)
	if err != nil {
		return ContainerRegistryClientGetManifestPropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientGetManifestPropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientGetManifestPropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.getManifestPropertiesHandleResponse(resp)
}

// getManifestPropertiesCreateRequest creates the GetManifestProperties request.
func (client *ContainerRegistryClient) getManifestPropertiesCreateRequest(ctx context.Context, name string, digest string, options *ContainerRegistryClientGetManifestPropertiesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_manifests/{digest}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if digest == "" {
		return nil, errors.New("parameter digest cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digest}", url.PathEscape(digest))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getManifestPropertiesHandleResponse handles the GetManifestProperties response.
func (client *ContainerRegistryClient) getManifestPropertiesHandleResponse(resp *http.Response) (ContainerRegistryClientGetManifestPropertiesResponse, error) {
	result := ContainerRegistryClientGetManifestPropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArtifactManifestProperties); err != nil {
		return ContainerRegistryClientGetManifestPropertiesResponse{}, err
	}
	return result, nil
}

// GetProperties - Get repository attributes
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - options - ContainerRegistryClientGetPropertiesOptions contains the optional parameters for the ContainerRegistryClient.GetProperties
//     method.
func (client *ContainerRegistryClient) GetProperties(ctx context.Context, name string, options *ContainerRegistryClientGetPropertiesOptions) (ContainerRegistryClientGetPropertiesResponse, error) {
	req, err := client.getPropertiesCreateRequest(ctx, name, options)
	if err != nil {
		return ContainerRegistryClientGetPropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientGetPropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientGetPropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.getPropertiesHandleResponse(resp)
}

// getPropertiesCreateRequest creates the GetProperties request.
func (client *ContainerRegistryClient) getPropertiesCreateRequest(ctx context.Context, name string, options *ContainerRegistryClientGetPropertiesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getPropertiesHandleResponse handles the GetProperties response.
func (client *ContainerRegistryClient) getPropertiesHandleResponse(resp *http.Response) (ContainerRegistryClientGetPropertiesResponse, error) {
	result := ContainerRegistryClientGetPropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerRepositoryProperties); err != nil {
		return ContainerRegistryClientGetPropertiesResponse{}, err
	}
	return result, nil
}

// GetTagProperties - Get tag attributes by tag
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - Tag name
//   - options - ContainerRegistryClientGetTagPropertiesOptions contains the optional parameters for the ContainerRegistryClient.GetTagProperties
//     method.
func (client *ContainerRegistryClient) GetTagProperties(ctx context.Context, name string, reference string, options *ContainerRegistryClientGetTagPropertiesOptions) (ContainerRegistryClientGetTagPropertiesResponse, error) {
	req, err := client.getTagPropertiesCreateRequest(ctx, name, reference, options)
	if err != nil {
		return ContainerRegistryClientGetTagPropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientGetTagPropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientGetTagPropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.getTagPropertiesHandleResponse(resp)
}

// getTagPropertiesCreateRequest creates the GetTagProperties request.
func (client *ContainerRegistryClient) getTagPropertiesCreateRequest(ctx context.Context, name string, reference string, options *ContainerRegistryClientGetTagPropertiesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_tags/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getTagPropertiesHandleResponse handles the GetTagProperties response.
func (client *ContainerRegistryClient) getTagPropertiesHandleResponse(resp *http.Response) (ContainerRegistryClientGetTagPropertiesResponse, error) {
	result := ContainerRegistryClientGetTagPropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArtifactTagProperties); err != nil {
		return ContainerRegistryClientGetTagPropertiesResponse{}, err
	}
	return result, nil
}

// NewListManifestsPager - List manifests of a repository
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - options - ContainerRegistryClientListManifestsOptions contains the optional parameters for the ContainerRegistryClient.NewListManifestsPager
//     method.
func (client *ContainerRegistryClient) NewListManifestsPager(name string, options *ContainerRegistryClientListManifestsOptions) *runtime.Pager[ContainerRegistryClientListManifestsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContainerRegistryClientListManifestsResponse]{
		More: func(page ContainerRegistryClientListManifestsResponse) bool {
			return page.Link != nil && len(*page.Link) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerRegistryClientListManifestsResponse) (ContainerRegistryClientListManifestsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listManifestsCreateRequest(ctx, name, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.Link)
			}
			if err != nil {
				return ContainerRegistryClientListManifestsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ContainerRegistryClientListManifestsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ContainerRegistryClientListManifestsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listManifestsHandleResponse(resp)
		},
	})
}

// listManifestsCreateRequest creates the ListManifests request.
func (client *ContainerRegistryClient) listManifestsCreateRequest(ctx context.Context, name string, options *ContainerRegistryClientListManifestsOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_manifests"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Last != nil {
		reqQP.Set("last", *options.Last)
	}
	if options != nil && options.N != nil {
		reqQP.Set("n", strconv.FormatInt(int64(*options.N), 10))
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("orderby", *options.Orderby)
	}
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listManifestsHandleResponse handles the ListManifests response.
func (client *ContainerRegistryClient) listManifestsHandleResponse(resp *http.Response) (ContainerRegistryClientListManifestsResponse, error) {
	result := ContainerRegistryClientListManifestsResponse{}
	if val := resp.Header.Get("Link"); val != "" {
		result.Link = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcrManifests); err != nil {
		return ContainerRegistryClientListManifestsResponse{}, err
	}
	return result, nil
}

// NewListRepositoriesPager - List repositories
//
// Generated from API version 2021-07-01
//   - options - ContainerRegistryClientListRepositoriesOptions contains the optional parameters for the ContainerRegistryClient.NewListRepositoriesPager
//     method.
func (client *ContainerRegistryClient) NewListRepositoriesPager(options *ContainerRegistryClientListRepositoriesOptions) *runtime.Pager[ContainerRegistryClientListRepositoriesResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContainerRegistryClientListRepositoriesResponse]{
		More: func(page ContainerRegistryClientListRepositoriesResponse) bool {
			return page.Link != nil && len(*page.Link) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerRegistryClientListRepositoriesResponse) (ContainerRegistryClientListRepositoriesResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listRepositoriesCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.Link)
			}
			if err != nil {
				return ContainerRegistryClientListRepositoriesResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ContainerRegistryClientListRepositoriesResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ContainerRegistryClientListRepositoriesResponse{}, runtime.NewResponseError(resp)
			}
			return client.listRepositoriesHandleResponse(resp)
		},
	})
}

// listRepositoriesCreateRequest creates the ListRepositories request.
func (client *ContainerRegistryClient) listRepositoriesCreateRequest(ctx context.Context, options *ContainerRegistryClientListRepositoriesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/_catalog"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Last != nil {
		reqQP.Set("last", *options.Last)
	}
	if options != nil && options.N != nil {
		reqQP.Set("n", strconv.FormatInt(int64(*options.N), 10))
	}
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listRepositoriesHandleResponse handles the ListRepositories response.
func (client *ContainerRegistryClient) listRepositoriesHandleResponse(resp *http.Response) (ContainerRegistryClientListRepositoriesResponse, error) {
	result := ContainerRegistryClientListRepositoriesResponse{}
	if val := resp.Header.Get("Link"); val != "" {
		result.Link = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Repositories); err != nil {
		return ContainerRegistryClientListRepositoriesResponse{}, err
	}
	return result, nil
}

// NewListTagsPager - List tags of a repository
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - options - ContainerRegistryClientListTagsOptions contains the optional parameters for the ContainerRegistryClient.NewListTagsPager
//     method.
func (client *ContainerRegistryClient) NewListTagsPager(name string, options *ContainerRegistryClientListTagsOptions) *runtime.Pager[ContainerRegistryClientListTagsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContainerRegistryClientListTagsResponse]{
		More: func(page ContainerRegistryClientListTagsResponse) bool {
			return page.Link != nil && len(*page.Link) > 0
		},
		Fetcher: func(ctx context.Context, page *ContainerRegistryClientListTagsResponse) (ContainerRegistryClientListTagsResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listTagsCreateRequest(ctx, name, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.Link)
			}
			if err != nil {
				return ContainerRegistryClientListTagsResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ContainerRegistryClientListTagsResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ContainerRegistryClientListTagsResponse{}, runtime.NewResponseError(resp)
			}
			return client.listTagsHandleResponse(resp)
		},
	})
}

// listTagsCreateRequest creates the ListTags request.
func (client *ContainerRegistryClient) listTagsCreateRequest(ctx context.Context, name string, options *ContainerRegistryClientListTagsOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_tags"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Last != nil {
		reqQP.Set("last", *options.Last)
	}
	if options != nil && options.N != nil {
		reqQP.Set("n", strconv.FormatInt(int64(*options.N), 10))
	}
	if options != nil && options.Orderby != nil {
		reqQP.Set("orderby", *options.Orderby)
	}
	if options != nil && options.Digest != nil {
		reqQP.Set("digest", *options.Digest)
	}
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listTagsHandleResponse handles the ListTags response.
func (client *ContainerRegistryClient) listTagsHandleResponse(resp *http.Response) (ContainerRegistryClientListTagsResponse, error) {
	result := ContainerRegistryClientListTagsResponse{}
	if val := resp.Header.Get("Link"); val != "" {
		result.Link = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.TagList); err != nil {
		return ContainerRegistryClientListTagsResponse{}, err
	}
	return result, nil
}

// UpdateManifestProperties - Update properties of a manifest
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - digest - Digest of a BLOB
//   - options - ContainerRegistryClientUpdateManifestPropertiesOptions contains the optional parameters for the ContainerRegistryClient.UpdateManifestProperties
//     method.
func (client *ContainerRegistryClient) UpdateManifestProperties(ctx context.Context, name string, digest string, options *ContainerRegistryClientUpdateManifestPropertiesOptions) (ContainerRegistryClientUpdateManifestPropertiesResponse, error) {
	req, err := client.updateManifestPropertiesCreateRequest(ctx, name, digest, options)
	if err != nil {
		return ContainerRegistryClientUpdateManifestPropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientUpdateManifestPropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientUpdateManifestPropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateManifestPropertiesHandleResponse(resp)
}

// updateManifestPropertiesCreateRequest creates the UpdateManifestProperties request.
func (client *ContainerRegistryClient) updateManifestPropertiesCreateRequest(ctx context.Context, name string, digest string, options *ContainerRegistryClientUpdateManifestPropertiesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_manifests/{digest}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if digest == "" {
		return nil, errors.New("parameter digest cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{digest}", url.PathEscape(digest))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Value != nil {
		return req, runtime.MarshalAsJSON(req, *options.Value)
	}
	return req, nil
}

// updateManifestPropertiesHandleResponse handles the UpdateManifestProperties response.
func (client *ContainerRegistryClient) updateManifestPropertiesHandleResponse(resp *http.Response) (ContainerRegistryClientUpdateManifestPropertiesResponse, error) {
	result := ContainerRegistryClientUpdateManifestPropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArtifactManifestProperties); err != nil {
		return ContainerRegistryClientUpdateManifestPropertiesResponse{}, err
	}
	return result, nil
}

// UpdateProperties - Update the attribute identified by name where reference is the name of the repository.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - options - ContainerRegistryClientUpdatePropertiesOptions contains the optional parameters for the ContainerRegistryClient.UpdateProperties
//     method.
func (client *ContainerRegistryClient) UpdateProperties(ctx context.Context, name string, options *ContainerRegistryClientUpdatePropertiesOptions) (ContainerRegistryClientUpdatePropertiesResponse, error) {
	req, err := client.updatePropertiesCreateRequest(ctx, name, options)
	if err != nil {
		return ContainerRegistryClientUpdatePropertiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientUpdatePropertiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientUpdatePropertiesResponse{}, runtime.NewResponseError(resp)
	}
	return client.updatePropertiesHandleResponse(resp)
}

// updatePropertiesCreateRequest creates the UpdateProperties request.
func (client *ContainerRegistryClient) updatePropertiesCreateRequest(ctx context.Context, name string, options *ContainerRegistryClientUpdatePropertiesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Value != nil {
		return req, runtime.MarshalAsJSON(req, *options.Value)
	}
	return req, nil
}

// updatePropertiesHandleResponse handles the UpdateProperties response.
func (client *ContainerRegistryClient) updatePropertiesHandleResponse(resp *http.Response) (ContainerRegistryClientUpdatePropertiesResponse, error) {
	result := ContainerRegistryClientUpdatePropertiesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContainerRepositoryProperties); err != nil {
		return ContainerRegistryClientUpdatePropertiesResponse{}, err
	}
	return result, nil
}

// UpdateTagAttributes - Update tag attributes
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2021-07-01
//   - name - Name of the image (including the namespace)
//   - reference - Tag name
//   - options - ContainerRegistryClientUpdateTagAttributesOptions contains the optional parameters for the ContainerRegistryClient.UpdateTagAttributes
//     method.
func (client *ContainerRegistryClient) UpdateTagAttributes(ctx context.Context, name string, reference string, options *ContainerRegistryClientUpdateTagAttributesOptions) (ContainerRegistryClientUpdateTagAttributesResponse, error) {
	req, err := client.updateTagAttributesCreateRequest(ctx, name, reference, options)
	if err != nil {
		return ContainerRegistryClientUpdateTagAttributesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContainerRegistryClientUpdateTagAttributesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContainerRegistryClientUpdateTagAttributesResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateTagAttributesHandleResponse(resp)
}

// updateTagAttributesCreateRequest creates the UpdateTagAttributes request.
func (client *ContainerRegistryClient) updateTagAttributesCreateRequest(ctx context.Context, name string, reference string, options *ContainerRegistryClientUpdateTagAttributesOptions) (*policy.Request, error) {
	urlPath := "/acr/v1/{name}/_tags/{reference}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if reference == "" {
		return nil, errors.New("parameter reference cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{reference}", url.PathEscape(reference))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Value != nil {
		return req, runtime.MarshalAsJSON(req, *options.Value)
	}
	return req, nil
}

// updateTagAttributesHandleResponse handles the UpdateTagAttributes response.
func (client *ContainerRegistryClient) updateTagAttributesHandleResponse(resp *http.Response) (ContainerRegistryClientUpdateTagAttributesResponse, error) {
	result := ContainerRegistryClientUpdateTagAttributesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ArtifactTagProperties); err != nil {
		return ContainerRegistryClientUpdateTagAttributesResponse{}, err
	}
	return result, nil
}
