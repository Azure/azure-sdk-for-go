// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armagfood

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// ExtensionListResponsePager provides iteration over ExtensionListResponse pages.
type ExtensionListResponsePager interface {
	azcore.Pager

	// Page returns the current ExtensionListResponseResponse.
	PageResponse() ExtensionListResponseResponse
}

type extensionListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type extensionListResponseHandleError func(*azcore.Response) error

type extensionListResponseHandleResponse func(*azcore.Response) (ExtensionListResponseResponse, error)

type extensionListResponseAdvancePage func(context.Context, ExtensionListResponseResponse) (*azcore.Request, error)

type extensionListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester extensionListResponseCreateRequest
	// callback for handling response errors
	errorer extensionListResponseHandleError
	// callback for handling the HTTP response
	responder extensionListResponseHandleResponse
	// callback for advancing to the next page
	advancer extensionListResponseAdvancePage
	// contains the current response
	current ExtensionListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *extensionListResponsePager) Err() error {
	return p.err
}

func (p *extensionListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExtensionListResponse.NextLink == nil || len(*p.current.ExtensionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *extensionListResponsePager) PageResponse() ExtensionListResponseResponse {
	return p.current
}

// FarmBeatsExtensionListResponsePager provides iteration over FarmBeatsExtensionListResponse pages.
type FarmBeatsExtensionListResponsePager interface {
	azcore.Pager

	// Page returns the current FarmBeatsExtensionListResponseResponse.
	PageResponse() FarmBeatsExtensionListResponseResponse
}

type farmBeatsExtensionListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type farmBeatsExtensionListResponseHandleError func(*azcore.Response) error

type farmBeatsExtensionListResponseHandleResponse func(*azcore.Response) (FarmBeatsExtensionListResponseResponse, error)

type farmBeatsExtensionListResponseAdvancePage func(context.Context, FarmBeatsExtensionListResponseResponse) (*azcore.Request, error)

type farmBeatsExtensionListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester farmBeatsExtensionListResponseCreateRequest
	// callback for handling response errors
	errorer farmBeatsExtensionListResponseHandleError
	// callback for handling the HTTP response
	responder farmBeatsExtensionListResponseHandleResponse
	// callback for advancing to the next page
	advancer farmBeatsExtensionListResponseAdvancePage
	// contains the current response
	current FarmBeatsExtensionListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *farmBeatsExtensionListResponsePager) Err() error {
	return p.err
}

func (p *farmBeatsExtensionListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FarmBeatsExtensionListResponse.NextLink == nil || len(*p.current.FarmBeatsExtensionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *farmBeatsExtensionListResponsePager) PageResponse() FarmBeatsExtensionListResponseResponse {
	return p.current
}

// FarmBeatsListResponsePager provides iteration over FarmBeatsListResponse pages.
type FarmBeatsListResponsePager interface {
	azcore.Pager

	// Page returns the current FarmBeatsListResponseResponse.
	PageResponse() FarmBeatsListResponseResponse
}

type farmBeatsListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type farmBeatsListResponseHandleError func(*azcore.Response) error

type farmBeatsListResponseHandleResponse func(*azcore.Response) (FarmBeatsListResponseResponse, error)

type farmBeatsListResponseAdvancePage func(context.Context, FarmBeatsListResponseResponse) (*azcore.Request, error)

type farmBeatsListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester farmBeatsListResponseCreateRequest
	// callback for handling response errors
	errorer farmBeatsListResponseHandleError
	// callback for handling the HTTP response
	responder farmBeatsListResponseHandleResponse
	// callback for advancing to the next page
	advancer farmBeatsListResponseAdvancePage
	// contains the current response
	current FarmBeatsListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *farmBeatsListResponsePager) Err() error {
	return p.err
}

func (p *farmBeatsListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FarmBeatsListResponse.NextLink == nil || len(*p.current.FarmBeatsListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *farmBeatsListResponsePager) PageResponse() FarmBeatsListResponseResponse {
	return p.current
}

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager interface {
	azcore.Pager

	// Page returns the current OperationListResultResponse.
	PageResponse() OperationListResultResponse
}

type operationListResultCreateRequest func(context.Context) (*azcore.Request, error)

type operationListResultHandleError func(*azcore.Response) error

type operationListResultHandleResponse func(*azcore.Response) (OperationListResultResponse, error)

type operationListResultAdvancePage func(context.Context, OperationListResultResponse) (*azcore.Request, error)

type operationListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListResultCreateRequest
	// callback for handling response errors
	errorer operationListResultHandleError
	// callback for handling the HTTP response
	responder operationListResultHandleResponse
	// callback for advancing to the next page
	advancer operationListResultAdvancePage
	// contains the current response
	current OperationListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListResultPager) Err() error {
	return p.err
}

func (p *operationListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListResultPager) PageResponse() OperationListResultResponse {
	return p.current
}
