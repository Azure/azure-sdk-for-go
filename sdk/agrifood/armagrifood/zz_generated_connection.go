// +build go1.13

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.5, generator: @autorest/go@4.0.0-preview.23)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armagrifood

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// connectionOptions contains configuration settings for the connection's pipeline.
// All zero-value fields will be initialized with their default values.
type connectionOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
	// Logging configures the built-in logging policy behavior.
	Logging azcore.LogOptions
	// PerCallPolicies contains custom policies to inject into the pipeline.
	// Each policy is executed once per request.
	PerCallPolicies []azcore.Policy
	// PerRetryPolicies contains custom policies to inject into the pipeline.
	// Each policy is executed once per request, and for each retry request.
	PerRetryPolicies []azcore.Policy
}

func (c *connectionOptions) telemetryOptions() *azcore.TelemetryOptions {
	to := c.Telemetry
	if to.Value == "" {
		to.Value = telemetryInfo
	} else {
		to.Value = fmt.Sprintf("%s %s", telemetryInfo, to.Value)
	}
	return &to
}

// connection - APIs documentation for Azure AgriFood Resource Provider Service.
type connection struct {
	u string
	p azcore.Pipeline
}

// defaultEndpoint is the default service endpoint.
const defaultEndpoint = "https://management.azure.com"

// newDefaultConnection creates an instance of the connection type using the defaultEndpoint.
// Pass nil to accept the default options; this is the same as passing a zero-value options.
func newDefaultConnection(cred azcore.Credential, options *connectionOptions) *connection {
	return newConnection(defaultEndpoint, cred, options)
}

// newConnection creates an instance of the connection type with the specified endpoint.
// Pass nil to accept the default options; this is the same as passing a zero-value options.
func newConnection(endpoint string, cred azcore.Credential, options *connectionOptions) *connection {
	if options == nil {
		options = &connectionOptions{}
	}
	policies := []azcore.Policy{
		azcore.NewTelemetryPolicy(options.telemetryOptions()),
	}
	policies = append(policies, options.PerCallPolicies...)
	policies = append(policies, azcore.NewRetryPolicy(&options.Retry))
	policies = append(policies, options.PerRetryPolicies...)
	policies = append(policies, cred.AuthenticationPolicy(azcore.AuthenticationPolicyOptions{Options: azcore.TokenRequestOptions{}}))
	policies = append(policies, azcore.NewLogPolicy(&options.Logging))
	return &connection{u: endpoint, p: azcore.NewPipeline(options.HTTPClient, policies...)}
}

// Endpoint returns the connection's endpoint.
func (c *connection) Endpoint() string {
	return c.u
}

// Pipeline returns the connection's pipeline.
func (c *connection) Pipeline() azcore.Pipeline {
	return c.p
}
