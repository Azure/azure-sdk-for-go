// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armagrifood

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type ExtensionsListByFarmBeatsPager interface {
	azcore.Pager
	// PageResponse returns the current ExtensionsListByFarmBeatsResponse.
	PageResponse() ExtensionsListByFarmBeatsResponse
}

type extensionsListByFarmBeatsPager struct {
	client    *ExtensionsClient
	current   ExtensionsListByFarmBeatsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ExtensionsListByFarmBeatsResponse) (*azcore.Request, error)
}

func (p *extensionsListByFarmBeatsPager) Err() error {
	return p.err
}

func (p *extensionsListByFarmBeatsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExtensionListResponse.NextLink == nil || len(*p.current.ExtensionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByFarmBeatsHandleError(resp)
		return false
	}
	result, err := p.client.listByFarmBeatsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *extensionsListByFarmBeatsPager) PageResponse() ExtensionsListByFarmBeatsResponse {
	return p.current
}

type FarmBeatsExtensionsListPager interface {
	azcore.Pager
	// PageResponse returns the current FarmBeatsExtensionsListResponse.
	PageResponse() FarmBeatsExtensionsListResponse
}

type farmBeatsExtensionsListPager struct {
	client    *FarmBeatsExtensionsClient
	current   FarmBeatsExtensionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FarmBeatsExtensionsListResponse) (*azcore.Request, error)
}

func (p *farmBeatsExtensionsListPager) Err() error {
	return p.err
}

func (p *farmBeatsExtensionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FarmBeatsExtensionListResponse.NextLink == nil || len(*p.current.FarmBeatsExtensionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *farmBeatsExtensionsListPager) PageResponse() FarmBeatsExtensionsListResponse {
	return p.current
}

type FarmBeatsModelsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current FarmBeatsModelsListByResourceGroupResponse.
	PageResponse() FarmBeatsModelsListByResourceGroupResponse
}

type farmBeatsModelsListByResourceGroupPager struct {
	client    *FarmBeatsModelsClient
	current   FarmBeatsModelsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FarmBeatsModelsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *farmBeatsModelsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *farmBeatsModelsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FarmBeatsListResponse.NextLink == nil || len(*p.current.FarmBeatsListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *farmBeatsModelsListByResourceGroupPager) PageResponse() FarmBeatsModelsListByResourceGroupResponse {
	return p.current
}

type FarmBeatsModelsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current FarmBeatsModelsListBySubscriptionResponse.
	PageResponse() FarmBeatsModelsListBySubscriptionResponse
}

type farmBeatsModelsListBySubscriptionPager struct {
	client    *FarmBeatsModelsClient
	current   FarmBeatsModelsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FarmBeatsModelsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *farmBeatsModelsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *farmBeatsModelsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FarmBeatsListResponse.NextLink == nil || len(*p.current.FarmBeatsListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *farmBeatsModelsListBySubscriptionPager) PageResponse() FarmBeatsModelsListBySubscriptionResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}
