//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azopenai

import "time"

// AudioTranscription - Result information for an operation that transcribed spoken audio into written text.
type AudioTranscription struct {
	// REQUIRED; The transcribed text for the provided audio data.
	Text *string

	// The total duration of the audio processed to produce accompanying transcription information.
	Duration *float32

	// The spoken language that was detected in the transcribed audio data. This is expressed as a two-letter ISO-639-1 language
	// code like 'en' or 'fr'.
	Language *string

	// A collection of information about the timing, probabilities, and other detail of each processed audio segment.
	Segments []AudioTranscriptionSegment

	// The label that describes which operation type generated the accompanying response data.
	Task *AudioTaskLabel
}

// AudioTranscriptionOptions - The configuration information for an audio transcription request.
type AudioTranscriptionOptions struct {
	// REQUIRED; The audio data to transcribe. This must be the binary content of a file in one of the supported media formats:
	// flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm.
	File []byte

	// The primary spoken language of the audio data to be transcribed, supplied as a two-letter ISO-639-1 language code such
	// as 'en' or 'fr'. Providing this known input language is optional but may improve
	// the accuracy and/or latency of transcription.
	Language *string

	// REQUIRED: Deployment specifies the name of the deployment (for Azure OpenAI) or model (for OpenAI) to use for this request.
	Deployment string

	// An optional hint to guide the model's style or continue from a prior audio segment. The written language of the prompt
	// should match the primary spoken language of the audio data.
	Prompt *string

	// The requested format of the transcription response data, which will influence the content and detail of the result.
	ResponseFormat *AudioTranscriptionFormat

	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values
	// like 0.2 will make it more focused and deterministic. If set to 0, the model will
	// use log probability to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32
}

// AudioTranscriptionSegment - Extended information about a single segment of transcribed audio data. Segments generally represent
// roughly 5-10 seconds of speech. Segment boundaries typically occur between words but not necessarily
// sentences.
type AudioTranscriptionSegment struct {
	// REQUIRED; The average log probability associated with this audio segment.
	AvgLogProb *float32

	// REQUIRED; The compression ratio of this audio segment.
	CompressionRatio *float32

	// REQUIRED; The time at which this segment ended relative to the beginning of the transcribed audio.
	End *float32

	// REQUIRED; The 0-based index of this segment within a transcription.
	ID *int32

	// REQUIRED; The probability of no speech detection within this audio segment.
	NoSpeechProb *float32

	// REQUIRED; The seek position associated with the processing of this audio segment. Seek positions are expressed as hundredths
	// of seconds. The model may process several segments from a single seek position, so
	// while the seek position will never represent a later time than the segment's start, the segment's start may represent a
	// significantly later time than the segment's associated seek position.
	Seek *int32

	// REQUIRED; The time at which this segment started relative to the beginning of the transcribed audio.
	Start *float32

	// REQUIRED; The temperature score associated with this audio segment.
	Temperature *float32

	// REQUIRED; The transcribed text that was part of this audio segment.
	Text *string

	// REQUIRED; The token IDs matching the transcribed text in this audio segment.
	Tokens []int32
}

// AudioTranslation - Result information for an operation that translated spoken audio into written text.
type AudioTranslation struct {
	// REQUIRED; The translated text for the provided audio data.
	Text *string

	// The total duration of the audio processed to produce accompanying translation information.
	Duration *float32

	// The spoken language that was detected in the translated audio data. This is expressed as a two-letter ISO-639-1 language
	// code like 'en' or 'fr'.
	Language *string

	// A collection of information about the timing, probabilities, and other detail of each processed audio segment.
	Segments []AudioTranslationSegment

	// The label that describes which operation type generated the accompanying response data.
	Task *AudioTaskLabel
}

// AudioTranslationOptions - The configuration information for an audio translation request.
type AudioTranslationOptions struct {
	// REQUIRED; The audio data to translate. This must be the binary content of a file in one of the supported media formats:
	// flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm.
	File []byte

	// REQUIRED: Deployment specifies the name of the deployment (for Azure OpenAI) or model (for OpenAI) to use for this request.
	Deployment string

	// An optional hint to guide the model's style or continue from a prior audio segment. The written language of the prompt
	// should match the primary spoken language of the audio data.
	Prompt *string

	// The requested format of the translation response data, which will influence the content and detail of the result.
	ResponseFormat *AudioTranslationFormat

	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values
	// like 0.2 will make it more focused and deterministic. If set to 0, the model will
	// use log probability to automatically increase the temperature until certain thresholds are hit.
	Temperature *float32
}

// AudioTranslationSegment - Extended information about a single segment of translated audio data. Segments generally represent
// roughly 5-10 seconds of speech. Segment boundaries typically occur between words but not necessarily
// sentences.
type AudioTranslationSegment struct {
	// REQUIRED; The average log probability associated with this audio segment.
	AvgLogProb *float32

	// REQUIRED; The compression ratio of this audio segment.
	CompressionRatio *float32

	// REQUIRED; The time at which this segment ended relative to the beginning of the translated audio.
	End *float32

	// REQUIRED; The 0-based index of this segment within a translation.
	ID *int32

	// REQUIRED; The probability of no speech detection within this audio segment.
	NoSpeechProb *float32

	// REQUIRED; The seek position associated with the processing of this audio segment. Seek positions are expressed as hundredths
	// of seconds. The model may process several segments from a single seek position, so
	// while the seek position will never represent a later time than the segment's start, the segment's start may represent a
	// significantly later time than the segment's associated seek position.
	Seek *int32

	// REQUIRED; The time at which this segment started relative to the beginning of the translated audio.
	Start *float32

	// REQUIRED; The temperature score associated with this audio segment.
	Temperature *float32

	// REQUIRED; The translated text that was part of this audio segment.
	Text *string

	// REQUIRED; The token IDs matching the translated text in this audio segment.
	Tokens []int32
}

// AzureChatExtensionConfiguration - A representation of configuration data for a single Azure OpenAI chat extension. This
// will be used by a chat completions request that should use Azure OpenAI chat extensions to augment the response
// behavior. The use of this configuration is compatible only with Azure OpenAI.
type AzureChatExtensionConfiguration struct {

	// REQUIRED; The label for the type of an Azure chat extension. This typically corresponds to a matching Azure resource. Azure
	// chat extensions are only compatible with Azure OpenAI.
	Type *AzureChatExtensionType

	// REQUIRED; The configuration payload used for the Azure chat extension. The structure payload details are specific to the
	// extension being configured. Azure chat extensions are only compatible with Azure OpenAI.
	Parameters any
}

// AzureChatExtensionsMessageContext - A representation of the additional context information available when Azure OpenAI
// chat extensions are involved in the generation of a corresponding chat completions response. This context information
// is only populated when using an Azure OpenAI request configured to use a matching extension.
type AzureChatExtensionsMessageContext struct {
	// The contextual message payload associated with the Azure chat extensions used for a chat completions request. These messages
	// describe the data source retrievals, plugin invocations, and other
	// intermediate steps taken in the course of generating a chat completions response that was augmented by capabilities from
	// Azure OpenAI chat extensions.
	Messages []ChatMessage
}

// AzureCognitiveSearchChatExtensionConfiguration - A specific representation of configurable options for Azure Cognitive
// Search when using it as an Azure OpenAI chat extension.
type AzureCognitiveSearchChatExtensionConfiguration struct {
	// REQUIRED; The absolute endpoint path for the Azure Cognitive Search resource to use.
	Endpoint *string

	// REQUIRED; The name of the index to use as available in the referenced Azure Cognitive Search resource.
	IndexName *string

	// REQUIRED; The API admin key to use with the specified Azure Cognitive Search endpoint.
	Key *string

	// REQUIRED; The type label to use when configuring Azure OpenAI chat extensions. This should typically not be changed from
	// its default value for Azure Cognitive Search.
	Type *AzureCognitiveSearchChatExtensionConfigurationType

	// When using embeddings for search, specifies the resource URL from which embeddings should be retrieved.
	EmbeddingEndpoint *string

	// When using embeddings, specifies the API key to use with the provided embeddings endpoint.
	EmbeddingKey *string

	// Customized field mapping behavior to use when interacting with the search index.
	FieldsMapping *AzureCognitiveSearchChatExtensionConfigurationFieldsMapping

	// Whether queries should be restricted to use of indexed data.
	InScope *bool

	// The query type to use with Azure Cognitive Search.
	QueryType *AzureCognitiveSearchQueryType

	// The additional semantic configuration for the query.
	SemanticConfiguration *string

	// The configured top number of documents to feature for the configured query.
	TopNDocuments *int32
}

// AzureCognitiveSearchChatExtensionConfigurationFieldsMapping - Customized field mapping behavior to use when interacting
// with the search index.
type AzureCognitiveSearchChatExtensionConfigurationFieldsMapping struct {
	// The names of index fields that should be treated as content.
	ContentFieldNames []string

	// The separator pattern that content fields should use.
	ContentFieldSeparator *string

	// The name of the index field to use as a filepath.
	FilepathField *string

	// The name of the index field to use as a title.
	TitleField *string

	// The name of the index field to use as a URL.
	URLField *string

	// The names of fields that represent vector data.
	VectorFields []string
}

// AzureCognitiveSearchIndexFieldMappingOptions - Optional settings to control how fields are processed when using a configured
// Azure Cognitive Search resource.
type AzureCognitiveSearchIndexFieldMappingOptions struct {
	// The names of index fields that should be treated as content.
	ContentFieldNames []string

	// The separator pattern that content fields should use.
	ContentFieldSeparator *string

	// The name of the index field to use as a filepath.
	FilepathField *string

	// The name of the index field to use as a title.
	TitleField *string

	// The name of the index field to use as a URL.
	URLField *string

	// The names of fields that represent vector data.
	VectorFields []string
}

// Error - The error object.
type Error struct {
	// REQUIRED; One of a server-defined set of error codes.
	Code *string

	// REQUIRED; A human-readable representation of the error.
	Message *string

	// An array of details about specific errors that led to this reported error.
	Details []Error

	// An object containing more specific information than the current object about the error.
	InnerError *InnerError

	// The target of the error.
	Target *string
}

// InnerError - An object containing more specific information about the error. As per Microsoft One API
// guidelines -
// https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
type InnerError struct {
	// One of a server-defined set of error codes.
	Code *string

	// Inner error.
	InnerError *InnerError
}

// batchImageGenerationOperationResponse - A polling status update or final response payload for an image operation.
type batchImageGenerationOperationResponse struct {
	// REQUIRED; A timestamp when this job or item was created (in unix epochs).
	Created *time.Time

	// REQUIRED; The ID of the operation.
	ID *string

	// REQUIRED; The status of the operation
	Status *azureOpenAIOperationState

	// The error if the operation failed.
	Error *Error

	// A timestamp when this operation and its associated images expire and will be deleted (in unix epochs).
	Expires *int64

	// The result of the operation if the operation succeeded.
	Result *ImageGenerations
}

// ChatChoice - The representation of a single prompt completion as part of an overall chat completions request. Generally,
// n choices are generated per provided prompt with a default value of 1. Token limits and
// other settings may limit the number of choices generated.
type ChatChoice struct {
	// REQUIRED; The reason that this chat completions choice completed its generated.
	FinishReason *CompletionsFinishReason

	// REQUIRED; The ordered index associated with this chat completions choice.
	Index *int32

	// Information about the content filtering category (hate, sexual, violence, selfharm), if it has been detected, as well as
	// the severity level (verylow, low, medium, high-scale that determines the
	// intensity and risk level of harmful content) and if it has been filtered or not.
	ContentFilterResults *ChatChoiceContentFilterResults

	// The delta message content for a streaming response.
	Delta *ChatChoiceDelta

	// The chat message for a given chat completions prompt.
	Message *ChatChoiceMessage
}

// ChatChoiceContentFilterResults - Information about the content filtering category (hate, sexual, violence, selfharm), if
// it has been detected, as well as the severity level (verylow, low, medium, high-scale that determines the
// intensity and risk level of harmful content) and if it has been filtered or not.
type ChatChoiceContentFilterResults struct {
	// Describes an error returned if the content filtering system is down or otherwise unable to complete the operation in time.
	Error *ContentFilterResultsError

	// Describes language attacks or uses that include pejorative or discriminatory language with reference to a person or identity
	// group on the basis of certain differentiating attributes of these groups
	// including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion,
	// immigration status, ability status, personal appearance, and body size.
	Hate *ContentFilterResult

	// Describes language related to physical actions intended to purposely hurt, injure, or damage one’s body, or kill oneself.
	SelfHarm *ContentFilterResult

	// Describes language related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate
	// terms, physical sexual acts, including those portrayed as an assault or a
	// forced sexual violent act against one’s will, prostitution, pornography, and abuse.
	Sexual *ContentFilterResult

	// Describes language related to physical actions intended to hurt, injure, damage, or kill someone or something; describes
	// weapons, etc.
	Violence *ContentFilterResult
}

// ChatChoiceDelta - The delta message content for a streaming response.
type ChatChoiceDelta struct {
	// REQUIRED; The text associated with this message payload.
	Content *string

	// REQUIRED; The role associated with this message payload.
	Role *ChatRole

	// Additional context data associated with a chat message when requesting chat completions using compatible Azure OpenAI chat
	// extensions. This includes information like the intermediate data source
	// retrievals used to service a request. This context information is only populated when using Azure OpenAI with chat extensions
	// capabilities configured.
	Context *ChatMessageContext

	// The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *ChatMessageFunctionCall

	// The name of the author of this message. name is required if role is function, and it should be the name of the function
	// whose response is in the content. May contain a-z, A-Z, 0-9, and underscores,
	// with a maximum length of 64 characters.
	Name *string
}

// ChatChoiceMessage - The chat message for a given chat completions prompt.
type ChatChoiceMessage struct {
	// REQUIRED; The text associated with this message payload.
	Content *string

	// REQUIRED; The role associated with this message payload.
	Role *ChatRole

	// Additional context data associated with a chat message when requesting chat completions using compatible Azure OpenAI chat
	// extensions. This includes information like the intermediate data source
	// retrievals used to service a request. This context information is only populated when using Azure OpenAI with chat extensions
	// capabilities configured.
	Context *ChatMessageContext

	// The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *ChatMessageFunctionCall

	// The name of the author of this message. name is required if role is function, and it should be the name of the function
	// whose response is in the content. May contain a-z, A-Z, 0-9, and underscores,
	// with a maximum length of 64 characters.
	Name *string
}

// ChatCompletions - Representation of the response data from a chat completions request. Completions support a wide variety
// of tasks and generate text that continues from or "completes" provided prompt data.
type ChatCompletions struct {
	// REQUIRED; The collection of completions choices associated with this completions response. Generally, n choices are generated
	// per provided prompt with a default value of 1. Token limits and other settings may
	// limit the number of choices generated.
	Choices []ChatChoice

	// REQUIRED; The first timestamp associated with generation activity for this completions response, represented as seconds
	// since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
	Created *time.Time

	// REQUIRED; A unique identifier associated with this chat completions response.
	ID *string

	// REQUIRED; Usage information for tokens processed and generated as part of this completions operation.
	Usage *CompletionsUsage

	// Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts
	// may arrive at different times or in different orders.
	PromptFilterResults []PromptFilterResult
}

// ChatCompletionsOptions - The configuration information for a chat completions request. Completions support a wide variety
// of tasks and generate text that continues from or "completes" provided prompt data.
type ChatCompletionsOptions struct {
	// REQUIRED; The collection of context messages associated with this chat completions request. Typical usage begins with a
	// chat message for the System role that provides instructions for the behavior of the
	// assistant, followed by alternating messages between the User and Assistant roles.
	Messages []ChatMessage

	// The configuration entries for Azure OpenAI chat extensions that use them. This additional specification is only compatible
	// with Azure OpenAI.
	AzureExtensionsOptions *AzureChatExtensionOptions

	// A value that influences the probability of generated tokens appearing based on their cumulative frequency in generated
	// text. Positive values will make tokens less likely to appear as their frequency
	// increases and decrease the likelihood of the model repeating the same statements verbatim.
	FrequencyPenalty *float32

	// Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the
	// end-user. "auto" means the model can pick between an end-user or calling a
	// function. Specifying a particular function via {"name": "my_function"} forces the model to call that function. "none" is
	// the default when no functions are present. "auto" is the default if functions
	// are present.
	FunctionCall *ChatCompletionsOptionsFunctionCall

	// A list of functions the model may generate JSON inputs for.
	Functions []FunctionDefinition

	// A map between GPT token IDs and bias scores that influences the probability of specific tokens appearing in a completions
	// response. Token IDs are computed via external tokenizer tools, while bias
	// scores reside in the range of -100 to 100 with minimum and maximum values corresponding to a full ban or exclusive selection
	// of a token, respectively. The exact behavior of a given bias score varies
	// by model.
	LogitBias map[string]*int32

	// The maximum number of tokens to generate.
	MaxTokens *int32

	// REQUIRED: Deployment specifies the name of the deployment (for Azure OpenAI) or model (for OpenAI) to use for this request.
	Deployment string

	// The number of chat completions choices that should be generated for a chat completions response. Because this setting can
	// generate many completions, it may quickly consume your token quota. Use
	// carefully and ensure reasonable settings for max_tokens and stop.
	N *int32

	// A value that influences the probability of generated tokens appearing based on their existing presence in generated text.
	// Positive values will make tokens less likely to appear when they already exist
	// and increase the model's likelihood to output new topics.
	PresencePenalty *float32

	// A collection of textual sequences that will end completions generation.
	Stop []string

	// The sampling temperature to use that controls the apparent creativity of generated completions. Higher values will make
	// output more random while lower values will make results more focused and
	// deterministic. It is not recommended to modify temperature and top_p for the same completions request as the interaction
	// of these two settings is difficult to predict.
	Temperature *float32

	// An alternative to sampling with temperature called nucleus sampling. This value causes the model to consider the results
	// of tokens with the provided probability mass. As an example, a value of 0.15
	// will cause only the tokens comprising the top 15% of probability mass to be considered. It is not recommended to modify
	// temperature and top_p for the same completions request as the interaction of
	// these two settings is difficult to predict.
	TopP *float32

	// An identifier for the caller or end user of the operation. This may be used for tracking or rate-limiting purposes.
	User *string
}

// ChatMessage - A single, role-attributed message within a chat completion interaction.
type ChatMessage struct {
	// REQUIRED; The text associated with this message payload.
	Content *string

	// REQUIRED; The role associated with this message payload.
	Role *ChatRole

	// Additional context data associated with a chat message when requesting chat completions using compatible Azure OpenAI chat
	// extensions. This includes information like the intermediate data source
	// retrievals used to service a request. This context information is only populated when using Azure OpenAI with chat extensions
	// capabilities configured.
	Context *ChatMessageContext

	// The name and arguments of a function that should be called, as generated by the model.
	FunctionCall *ChatMessageFunctionCall

	// The name of the author of this message. name is required if role is function, and it should be the name of the function
	// whose response is in the content. May contain a-z, A-Z, 0-9, and underscores,
	// with a maximum length of 64 characters.
	Name *string
}

// ChatMessageContext - Additional context data associated with a chat message when requesting chat completions using compatible
// Azure OpenAI chat extensions. This includes information like the intermediate data source
// retrievals used to service a request. This context information is only populated when using Azure OpenAI with chat extensions
// capabilities configured.
type ChatMessageContext struct {
	// The contextual message payload associated with the Azure chat extensions used for a chat completions request. These messages
	// describe the data source retrievals, plugin invocations, and other
	// intermediate steps taken in the course of generating a chat completions response that was augmented by capabilities from
	// Azure OpenAI chat extensions.
	Messages []ChatMessage
}

// ChatMessageFunctionCall - The name and arguments of a function that should be called, as generated by the model.
type ChatMessageFunctionCall struct {
	// REQUIRED; The arguments to call the function with, as generated by the model in JSON format. Note that the model does not
	// always generate valid JSON, and may hallucinate parameters not defined by your function
	// schema. Validate the arguments in your code before calling your function.
	Arguments *string

	// REQUIRED; The name of the function to call.
	Name *string
}

// Choice - The representation of a single prompt completion as part of an overall completions request. Generally, n choices
// are generated per provided prompt with a default value of 1. Token limits and other
// settings may limit the number of choices generated.
type Choice struct {
	// REQUIRED; Reason for finishing
	FinishReason *CompletionsFinishReason

	// REQUIRED; The ordered index associated with this completions choice.
	Index *int32

	// REQUIRED; The log probabilities model for tokens associated with this completions choice.
	LogProbs *ChoiceLogProbs

	// REQUIRED; The generated text for a given completions prompt.
	Text *string

	// Information about the content filtering category (hate, sexual, violence, selfharm), if it has been detected, as well as
	// the severity level (verylow, low, medium, high-scale that determines the
	// intensity and risk level of harmful content) and if it has been filtered or not.
	ContentFilterResults *ChoiceContentFilterResults
}

// ChoiceContentFilterResults - Information about the content filtering category (hate, sexual, violence, selfharm), if it
// has been detected, as well as the severity level (verylow, low, medium, high-scale that determines the
// intensity and risk level of harmful content) and if it has been filtered or not.
type ChoiceContentFilterResults struct {
	// Describes an error returned if the content filtering system is down or otherwise unable to complete the operation in time.
	Error *ContentFilterResultsError

	// Describes language attacks or uses that include pejorative or discriminatory language with reference to a person or identity
	// group on the basis of certain differentiating attributes of these groups
	// including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion,
	// immigration status, ability status, personal appearance, and body size.
	Hate *ContentFilterResult

	// Describes language related to physical actions intended to purposely hurt, injure, or damage one’s body, or kill oneself.
	SelfHarm *ContentFilterResult

	// Describes language related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate
	// terms, physical sexual acts, including those portrayed as an assault or a
	// forced sexual violent act against one’s will, prostitution, pornography, and abuse.
	Sexual *ContentFilterResult

	// Describes language related to physical actions intended to hurt, injure, damage, or kill someone or something; describes
	// weapons, etc.
	Violence *ContentFilterResult
}

// ChoiceLogProbs - The log probabilities model for tokens associated with this completions choice.
type ChoiceLogProbs struct {
	// REQUIRED; The text offsets associated with tokens in this completions data.
	TextOffset []int32

	// REQUIRED; A collection of log probability values for the tokens in this completions data.
	TokenLogProbs []float32

	// REQUIRED; The textual forms of tokens evaluated in this probability model.
	Tokens []string

	// REQUIRED; A mapping of tokens to maximum log probability values in this completions data.
	TopLogProbs []map[string]*float32
}

// Completions - Representation of the response data from a completions request. Completions support a wide variety of tasks
// and generate text that continues from or "completes" provided prompt data.
type Completions struct {
	// REQUIRED; The collection of completions choices associated with this completions response. Generally, n choices are generated
	// per provided prompt with a default value of 1. Token limits and other settings may
	// limit the number of choices generated.
	Choices []Choice

	// REQUIRED; The first timestamp associated with generation activity for this completions response, represented as seconds
	// since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
	Created *time.Time

	// REQUIRED; A unique identifier associated with this completions response.
	ID *string

	// REQUIRED; Usage information for tokens processed and generated as part of this completions operation.
	Usage *CompletionsUsage

	// Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts
	// may arrive at different times or in different orders.
	PromptFilterResults []PromptFilterResult
}

// CompletionsLogProbabilityModel - Representation of a log probabilities model for a completions generation.
type CompletionsLogProbabilityModel struct {
	// REQUIRED; The text offsets associated with tokens in this completions data.
	TextOffset []int32

	// REQUIRED; A collection of log probability values for the tokens in this completions data.
	TokenLogProbs []float32

	// REQUIRED; The textual forms of tokens evaluated in this probability model.
	Tokens []string

	// REQUIRED; A mapping of tokens to maximum log probability values in this completions data.
	TopLogProbs []map[string]*float32
}

// CompletionsOptions - The configuration information for a completions request. Completions support a wide variety of tasks
// and generate text that continues from or "completes" provided prompt data.
type CompletionsOptions struct {
	// REQUIRED; The prompts to generate completions from.
	Prompt []string

	// A value that controls how many completions will be internally generated prior to response formulation. When used together
	// with n, bestof controls the number of candidate completions and must be
	// greater than n. Because this setting can generate many completions, it may quickly consume your token quota. Use carefully
	// and ensure reasonable settings for maxtokens and stop.
	BestOf *int32

	// A value specifying whether completions responses should include input prompts as prefixes to their generated output.
	Echo *bool

	// A value that influences the probability of generated tokens appearing based on their cumulative frequency in generated
	// text. Positive values will make tokens less likely to appear as their frequency
	// increases and decrease the likelihood of the model repeating the same statements verbatim.
	FrequencyPenalty *float32

	// A map between GPT token IDs and bias scores that influences the probability of specific tokens appearing in a completions
	// response. Token IDs are computed via external tokenizer tools, while bias
	// scores reside in the range of -100 to 100 with minimum and maximum values corresponding to a full ban or exclusive selection
	// of a token, respectively. The exact behavior of a given bias score varies
	// by model.
	LogitBias map[string]*int32

	// A value that controls the emission of log probabilities for the provided number of most likely tokens within a completions
	// response.
	LogProbs *int32

	// The maximum number of tokens to generate.
	MaxTokens *int32

	// REQUIRED: Deployment specifies the name of the deployment (for Azure OpenAI) or model (for OpenAI) to use for this request.
	Deployment string

	// The number of completions choices that should be generated per provided prompt as part of an overall completions response.
	// Because this setting can generate many completions, it may quickly consume
	// your token quota. Use carefully and ensure reasonable settings for max_tokens and stop.
	N *int32

	// A value that influences the probability of generated tokens appearing based on their existing presence in generated text.
	// Positive values will make tokens less likely to appear when they already exist
	// and increase the model's likelihood to output new topics.
	PresencePenalty *float32

	// A collection of textual sequences that will end completions generation.
	Stop []string

	// The sampling temperature to use that controls the apparent creativity of generated completions. Higher values will make
	// output more random while lower values will make results more focused and
	// deterministic. It is not recommended to modify temperature and top_p for the same completions request as the interaction
	// of these two settings is difficult to predict.
	Temperature *float32

	// An alternative to sampling with temperature called nucleus sampling. This value causes the model to consider the results
	// of tokens with the provided probability mass. As an example, a value of 0.15
	// will cause only the tokens comprising the top 15% of probability mass to be considered. It is not recommended to modify
	// temperature and top_p for the same completions request as the interaction of
	// these two settings is difficult to predict.
	TopP *float32

	// An identifier for the caller or end user of the operation. This may be used for tracking or rate-limiting purposes.
	User *string
}

// CompletionsUsage - Representation of the token counts processed for a completions request. Counts consider all tokens across
// prompts, choices, choice alternates, best_of generations, and other consumers.
type CompletionsUsage struct {
	// REQUIRED; The number of tokens generated across all completions emissions.
	CompletionTokens *int32

	// REQUIRED; The number of tokens in the provided prompts for the completions request.
	PromptTokens *int32

	// REQUIRED; The total number of tokens processed for the completions request and response.
	TotalTokens *int32
}

// ContentFilterResult - Information about filtered content severity level and if it has been filtered or not.
type ContentFilterResult struct {
	// REQUIRED; A value indicating whether or not the content has been filtered.
	Filtered *bool

	// REQUIRED; Ratings for the intensity and risk level of filtered content.
	Severity *ContentFilterSeverity
}

// ContentFilterResults - Information about the content filtering category, if it has been detected.
type ContentFilterResults struct {
	// Describes an error returned if the content filtering system is down or otherwise unable to complete the operation in time.
	Error *ContentFilterResultsError

	// Describes language attacks or uses that include pejorative or discriminatory language with reference to a person or identity
	// group on the basis of certain differentiating attributes of these groups
	// including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion,
	// immigration status, ability status, personal appearance, and body size.
	Hate *ContentFilterResult

	// Describes language related to physical actions intended to purposely hurt, injure, or damage one’s body, or kill oneself.
	SelfHarm *ContentFilterResult

	// Describes language related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate
	// terms, physical sexual acts, including those portrayed as an assault or a
	// forced sexual violent act against one’s will, prostitution, pornography, and abuse.
	Sexual *ContentFilterResult

	// Describes language related to physical actions intended to hurt, injure, damage, or kill someone or something; describes
	// weapons, etc.
	Violence *ContentFilterResult
}

// ContentFilterResultsError - Describes an error returned if the content filtering system is down or otherwise unable to
// complete the operation in time.
type ContentFilterResultsError struct {
	// REQUIRED; One of a server-defined set of error codes.
	Code *string

	// REQUIRED; A human-readable representation of the error.
	Message *string

	// An array of details about specific errors that led to this reported error.
	Details []Error

	// An object containing more specific information than the current object about the error.
	InnerError *InnerError

	// The target of the error.
	Target *string
}

// Deployment - A specific deployment
type Deployment struct {
	// READ-ONLY; Specifies either the model deployment name (when using Azure OpenAI) or model name (when using non-Azure OpenAI)
	// to use for this request.
	DeploymentID *string
}

// EmbeddingItem - Representation of a single embeddings relatedness comparison.
type EmbeddingItem struct {
	// REQUIRED; List of embeddings value for the input prompt. These represent a measurement of the vector-based relatedness
	// of the provided input.
	Embedding []float32

	// REQUIRED; Index of the prompt to which the EmbeddingItem corresponds.
	Index *int32
}

// Embeddings - Representation of the response data from an embeddings request. Embeddings measure the relatedness of text
// strings and are commonly used for search, clustering, recommendations, and other similar
// scenarios.
type Embeddings struct {
	// REQUIRED; Embedding values for the prompts submitted in the request.
	Data []EmbeddingItem

	// REQUIRED; Usage counts for tokens input using the embeddings API.
	Usage *EmbeddingsUsage
}

// EmbeddingsOptions - The configuration information for an embeddings request. Embeddings measure the relatedness of text
// strings and are commonly used for search, clustering, recommendations, and other similar scenarios.
type EmbeddingsOptions struct {
	// REQUIRED; Input texts to get embeddings for, encoded as a an array of strings. Each input must not exceed 2048 tokens in
	// length.
	// Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space, as we have observed
	// inferior results when newlines are present.
	Input []string

	// REQUIRED: Deployment specifies the name of the deployment (for Azure OpenAI) or model (for OpenAI) to use for this request.
	Deployment string

	// An identifier for the caller or end user of the operation. This may be used for tracking or rate-limiting purposes.
	User *string
}

// EmbeddingsUsage - Usage counts for tokens input using the embeddings API.
type EmbeddingsUsage struct {
	// REQUIRED; Number of tokens sent in the original request.
	PromptTokens *int32

	// REQUIRED; Total number of tokens transacted in this request/response.
	TotalTokens *int32
}

// EmbeddingsUsageAutoGenerated - Measurement of the amount of tokens used in this request and response.
type EmbeddingsUsageAutoGenerated struct {
	// REQUIRED; Number of tokens sent in the original request.
	PromptTokens *int32

	// REQUIRED; Total number of tokens transacted in this request/response.
	TotalTokens *int32
}

// FunctionCall - The name and arguments of a function that should be called, as generated by the model.
type FunctionCall struct {
	// REQUIRED; The arguments to call the function with, as generated by the model in JSON format. Note that the model does not
	// always generate valid JSON, and may hallucinate parameters not defined by your function
	// schema. Validate the arguments in your code before calling your function.
	Arguments *string

	// REQUIRED; The name of the function to call.
	Name *string
}

// FunctionDefinition - The definition of a caller-specified function that chat completions may invoke in response to matching
// user input.
type FunctionDefinition struct {
	// REQUIRED; The name of the function to be called.
	Name *string

	// A description of what the function does. The model will use this description when selecting the function and interpreting
	// its parameters.
	Description *string

	// The parameters the functions accepts, described as a JSON Schema object.
	Parameters any
}

// FunctionName - A structure that specifies the exact name of a specific, request-provided function to use when processing
// a chat completions operation.
type FunctionName struct {
	// REQUIRED; The name of the function to call.
	Name *string
}

// ImageGenerationOptions - Represents the request data used to generate images.
type ImageGenerationOptions struct {
	// REQUIRED; A description of the desired images.
	Prompt *string

	// The number of images to generate (defaults to 1).
	N *int32

	// The format in which image generation response items should be presented. Azure OpenAI only supports URL response items.
	ResponseFormat *ImageGenerationResponseFormat

	// The desired size of the generated images. Must be one of 256x256, 512x512, or 1024x1024 (defaults to 1024x1024).
	Size *ImageSize

	// A unique identifier representing your end-user, which can help to monitor and detect abuse.
	User *string
}

// ImageGenerations - The result of the operation if the operation succeeded.
type ImageGenerations struct {
	// REQUIRED; A timestamp when this job or item was created (in unix epochs).
	Created *time.Time

	// REQUIRED; The images generated by the operator.
	Data []ImageGenerationsDataItem
}

// ImageLocation - An image response item that provides a URL from which an image may be accessed.
type ImageLocation struct {
	// REQUIRED; The URL that provides temporary access to download the generated image.
	URL *string
}

// ImagePayload - An image response item that directly represents the image data as a base64-encoded string.
type ImagePayload struct {
	// REQUIRED; The complete data for an image represented as a base64-encoded string.
	B64JSON *string
}

// PromptFilterResult - Content filtering results for a single prompt in the request.
type PromptFilterResult struct {
	// REQUIRED; The index of this prompt in the set of prompt results
	PromptIndex *int32

	// Content filtering results for this prompt
	ContentFilterResults *PromptFilterResultContentFilterResults
}

// PromptFilterResultContentFilterResults - Content filtering results for this prompt
type PromptFilterResultContentFilterResults struct {
	// Describes an error returned if the content filtering system is down or otherwise unable to complete the operation in time.
	Error *ContentFilterResultsError

	// Describes language attacks or uses that include pejorative or discriminatory language with reference to a person or identity
	// group on the basis of certain differentiating attributes of these groups
	// including but not limited to race, ethnicity, nationality, gender identity and expression, sexual orientation, religion,
	// immigration status, ability status, personal appearance, and body size.
	Hate *ContentFilterResult

	// Describes language related to physical actions intended to purposely hurt, injure, or damage one’s body, or kill oneself.
	SelfHarm *ContentFilterResult

	// Describes language related to anatomical organs and genitals, romantic relationships, acts portrayed in erotic or affectionate
	// terms, physical sexual acts, including those portrayed as an assault or a
	// forced sexual violent act against one’s will, prostitution, pornography, and abuse.
	Sexual *ContentFilterResult

	// Describes language related to physical actions intended to hurt, injure, damage, or kill someone or something; describes
	// weapons, etc.
	Violence *ContentFilterResult
}
