// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azface

// AccessoryType - Type of the accessory.
type AccessoryType string

const (
	// AccessoryTypeGlasses - Glasses.
	AccessoryTypeGlasses AccessoryType = "glasses"
	// AccessoryTypeHeadwear - Head wear.
	AccessoryTypeHeadwear AccessoryType = "headwear"
	// AccessoryTypeMask - Mask.
	AccessoryTypeMask AccessoryType = "mask"
)

// PossibleAccessoryTypeValues returns the possible values for the AccessoryType const type.
func PossibleAccessoryTypeValues() []AccessoryType {
	return []AccessoryType{
		AccessoryTypeGlasses,
		AccessoryTypeHeadwear,
		AccessoryTypeMask,
	}
}

// BlurLevel - Indicates level of blurriness.
type BlurLevel string

const (
	// BlurLevelHigh - High blur level.
	BlurLevelHigh BlurLevel = "high"
	// BlurLevelLow - Low blur level.
	BlurLevelLow BlurLevel = "low"
	// BlurLevelMedium - Medium blur level.
	BlurLevelMedium BlurLevel = "medium"
)

// PossibleBlurLevelValues returns the possible values for the BlurLevel const type.
func PossibleBlurLevelValues() []BlurLevel {
	return []BlurLevel{
		BlurLevelHigh,
		BlurLevelLow,
		BlurLevelMedium,
	}
}

// ExposureLevel - Indicates level of exposure.
type ExposureLevel string

const (
	// ExposureLevelGoodExposure - Good exposure level.
	ExposureLevelGoodExposure ExposureLevel = "goodExposure"
	// ExposureLevelOverExposure - High exposure level.
	ExposureLevelOverExposure ExposureLevel = "overExposure"
	// ExposureLevelUnderExposure - Low exposure level.
	ExposureLevelUnderExposure ExposureLevel = "underExposure"
)

// PossibleExposureLevelValues returns the possible values for the ExposureLevel const type.
func PossibleExposureLevelValues() []ExposureLevel {
	return []ExposureLevel{
		ExposureLevelGoodExposure,
		ExposureLevelOverExposure,
		ExposureLevelUnderExposure,
	}
}

// FaceAttributeType - Available options for detect face with attribute.
type FaceAttributeType string

const (
	// FaceAttributeTypeAccessories - Accessories around face, including 'headwear', 'glasses' and 'mask'. Empty array means no
	// accessories detected. Note this is after a face is detected. Large mask could result in no face to be detected.
	FaceAttributeTypeAccessories FaceAttributeType = "accessories"
	// FaceAttributeTypeAge - Age in years.
	FaceAttributeTypeAge FaceAttributeType = "age"
	// FaceAttributeTypeBlur - Face is blurry or not. Level returns 'Low', 'Medium' or 'High'. Value returns a number between
	// [0,1], the larger the blurrier.
	FaceAttributeTypeBlur FaceAttributeType = "blur"
	// FaceAttributeTypeExposure - Face exposure level. Level returns 'GoodExposure', 'OverExposure' or 'UnderExposure'.
	FaceAttributeTypeExposure FaceAttributeType = "exposure"
	// FaceAttributeTypeFacialHair - Properties describing facial hair attributes.
	FaceAttributeTypeFacialHair FaceAttributeType = "facialHair"
	// FaceAttributeTypeGlasses - Glasses type. Values include 'NoGlasses', 'ReadingGlasses', 'Sunglasses', 'SwimmingGoggles'.
	FaceAttributeTypeGlasses FaceAttributeType = "glasses"
	// FaceAttributeTypeHair - Properties describing hair attributes.
	FaceAttributeTypeHair FaceAttributeType = "hair"
	// FaceAttributeTypeHeadPose - 3-D roll/yaw/pitch angles for face direction.
	FaceAttributeTypeHeadPose FaceAttributeType = "headPose"
	// FaceAttributeTypeMask - Whether each face is wearing a mask. Mask type returns 'noMask', 'faceMask', 'otherMaskOrOcclusion',
	// or 'uncertain'. Value returns a boolean 'noseAndMouthCovered' indicating whether nose and mouth are covered.
	FaceAttributeTypeMask FaceAttributeType = "mask"
	// FaceAttributeTypeNoise - Noise level of face pixels. Level returns 'Low', 'Medium' and 'High'. Value returns a number between
	// [0,1], the larger the noisier
	FaceAttributeTypeNoise FaceAttributeType = "noise"
	// FaceAttributeTypeOcclusion - Whether each facial area is occluded, including forehead, eyes and mouth.
	FaceAttributeTypeOcclusion FaceAttributeType = "occlusion"
	// FaceAttributeTypeQualityForRecognition - The overall image quality regarding whether the image being used in the detection
	// is of sufficient quality to attempt face recognition on. The value is an informal rating of low, medium, or high. Only
	// 'high' quality images are recommended for person enrollment and quality at or above 'medium' is recommended for identification
	// scenarios. The attribute is only available when using recognition models recognition_03 or recognition_04.
	FaceAttributeTypeQualityForRecognition FaceAttributeType = "qualityForRecognition"
	// FaceAttributeTypeSmile - Smile intensity, a number between [0,1].
	FaceAttributeTypeSmile FaceAttributeType = "smile"
)

// PossibleFaceAttributeTypeValues returns the possible values for the FaceAttributeType const type.
func PossibleFaceAttributeTypeValues() []FaceAttributeType {
	return []FaceAttributeType{
		FaceAttributeTypeAccessories,
		FaceAttributeTypeAge,
		FaceAttributeTypeBlur,
		FaceAttributeTypeExposure,
		FaceAttributeTypeFacialHair,
		FaceAttributeTypeGlasses,
		FaceAttributeTypeHair,
		FaceAttributeTypeHeadPose,
		FaceAttributeTypeMask,
		FaceAttributeTypeNoise,
		FaceAttributeTypeOcclusion,
		FaceAttributeTypeQualityForRecognition,
		FaceAttributeTypeSmile,
	}
}

// FaceDetectionModel - The detection model for the face.
type FaceDetectionModel string

const (
	// FaceDetectionModelDetection01 - The default detection model. Recommend for near frontal face detection. For scenarios with
	// exceptionally large angle (head-pose) faces, occluded faces or wrong image orientation, the faces in such cases may not
	// be detected.
	FaceDetectionModelDetection01 FaceDetectionModel = "detection_01"
	// FaceDetectionModelDetection02 - Detection model released in 2019 May with improved accuracy especially on small, side and
	// blurry faces.
	FaceDetectionModelDetection02 FaceDetectionModel = "detection_02"
	// FaceDetectionModelDetection03 - Detection model released in 2021 February with improved accuracy especially on small faces.
	FaceDetectionModelDetection03 FaceDetectionModel = "detection_03"
)

// PossibleFaceDetectionModelValues returns the possible values for the FaceDetectionModel const type.
func PossibleFaceDetectionModelValues() []FaceDetectionModel {
	return []FaceDetectionModel{
		FaceDetectionModelDetection01,
		FaceDetectionModelDetection02,
		FaceDetectionModelDetection03,
	}
}

// FaceOperationStatus - The status of long running operation.
type FaceOperationStatus string

const (
	// FaceOperationStatusFailed - The operation is failed.
	FaceOperationStatusFailed FaceOperationStatus = "failed"
	// FaceOperationStatusNotStarted - The operation is not started.
	FaceOperationStatusNotStarted FaceOperationStatus = "notStarted"
	// FaceOperationStatusRunning - The operation is still running.
	FaceOperationStatusRunning FaceOperationStatus = "running"
	// FaceOperationStatusSucceeded - The operation is succeeded.
	FaceOperationStatusSucceeded FaceOperationStatus = "succeeded"
)

// PossibleFaceOperationStatusValues returns the possible values for the FaceOperationStatus const type.
func PossibleFaceOperationStatusValues() []FaceOperationStatus {
	return []FaceOperationStatus{
		FaceOperationStatusFailed,
		FaceOperationStatusNotStarted,
		FaceOperationStatusRunning,
		FaceOperationStatusSucceeded,
	}
}

// FaceRecognitionModel - The recognition model for the face.
type FaceRecognitionModel string

const (
	// FaceRecognitionModelRecognition01 - The default recognition model for "Detect". All those faceIds created before 2019 March
	// are bonded with this recognition model.
	FaceRecognitionModelRecognition01 FaceRecognitionModel = "recognition_01"
	// FaceRecognitionModelRecognition02 - Recognition model released in 2019 March.
	FaceRecognitionModelRecognition02 FaceRecognitionModel = "recognition_02"
	// FaceRecognitionModelRecognition03 - Recognition model released in 2020 May.
	FaceRecognitionModelRecognition03 FaceRecognitionModel = "recognition_03"
	// FaceRecognitionModelRecognition04 - Recognition model released in 2021 February. It's recommended to use this recognition
	// model for better recognition accuracy.
	FaceRecognitionModelRecognition04 FaceRecognitionModel = "recognition_04"
)

// PossibleFaceRecognitionModelValues returns the possible values for the FaceRecognitionModel const type.
func PossibleFaceRecognitionModelValues() []FaceRecognitionModel {
	return []FaceRecognitionModel{
		FaceRecognitionModelRecognition01,
		FaceRecognitionModelRecognition02,
		FaceRecognitionModelRecognition03,
		FaceRecognitionModelRecognition04,
	}
}

// FindSimilarMatchMode - Similar face searching mode.
type FindSimilarMatchMode string

const (
	// FindSimilarMatchModeMatchFace - Match face.
	FindSimilarMatchModeMatchFace FindSimilarMatchMode = "matchFace"
	// FindSimilarMatchModeMatchPerson - Match person.
	FindSimilarMatchModeMatchPerson FindSimilarMatchMode = "matchPerson"
)

// PossibleFindSimilarMatchModeValues returns the possible values for the FindSimilarMatchMode const type.
func PossibleFindSimilarMatchModeValues() []FindSimilarMatchMode {
	return []FindSimilarMatchMode{
		FindSimilarMatchModeMatchFace,
		FindSimilarMatchModeMatchPerson,
	}
}

// GlassesType - Glasses type of the face.
type GlassesType string

const (
	// GlassesTypeNoGlasses - No glasses on the face.
	GlassesTypeNoGlasses GlassesType = "noGlasses"
	// GlassesTypeReadingGlasses - Normal glasses on the face.
	GlassesTypeReadingGlasses GlassesType = "readingGlasses"
	// GlassesTypeSunglasses - Sunglasses on the face.
	GlassesTypeSunglasses GlassesType = "sunglasses"
	// GlassesTypeSwimmingGoggles - Swimming goggles on the face.
	GlassesTypeSwimmingGoggles GlassesType = "swimmingGoggles"
)

// PossibleGlassesTypeValues returns the possible values for the GlassesType const type.
func PossibleGlassesTypeValues() []GlassesType {
	return []GlassesType{
		GlassesTypeNoGlasses,
		GlassesTypeReadingGlasses,
		GlassesTypeSunglasses,
		GlassesTypeSwimmingGoggles,
	}
}

// HairColorType - Name of the hair color.
type HairColorType string

const (
	// HairColorTypeBlack - Black.
	HairColorTypeBlack HairColorType = "black"
	// HairColorTypeBlond - Blond.
	HairColorTypeBlond HairColorType = "blond"
	// HairColorTypeBrown - Brown.
	HairColorTypeBrown HairColorType = "brown"
	// HairColorTypeGray - Gray.
	HairColorTypeGray HairColorType = "gray"
	// HairColorTypeOther - Other.
	HairColorTypeOther HairColorType = "other"
	// HairColorTypeRed - Red.
	HairColorTypeRed HairColorType = "red"
	// HairColorTypeUnknownHairColor - Unknown.
	HairColorTypeUnknownHairColor HairColorType = "unknown"
	// HairColorTypeWhite - White.
	HairColorTypeWhite HairColorType = "white"
)

// PossibleHairColorTypeValues returns the possible values for the HairColorType const type.
func PossibleHairColorTypeValues() []HairColorType {
	return []HairColorType{
		HairColorTypeBlack,
		HairColorTypeBlond,
		HairColorTypeBrown,
		HairColorTypeGray,
		HairColorTypeOther,
		HairColorTypeRed,
		HairColorTypeUnknownHairColor,
		HairColorTypeWhite,
	}
}

// MaskType - Type of the mask.
type MaskType string

const (
	// MaskTypeFaceMask - Face mask.
	MaskTypeFaceMask MaskType = "faceMask"
	// MaskTypeNoMask - No mask.
	MaskTypeNoMask MaskType = "noMask"
	// MaskTypeOtherMaskOrOcclusion - Other types of mask or occlusion.
	MaskTypeOtherMaskOrOcclusion MaskType = "otherMaskOrOcclusion"
	// MaskTypeUncertain - Uncertain.
	MaskTypeUncertain MaskType = "uncertain"
)

// PossibleMaskTypeValues returns the possible values for the MaskType const type.
func PossibleMaskTypeValues() []MaskType {
	return []MaskType{
		MaskTypeFaceMask,
		MaskTypeNoMask,
		MaskTypeOtherMaskOrOcclusion,
		MaskTypeUncertain,
	}
}

// NoiseLevel - Indicates level of noise.
type NoiseLevel string

const (
	// NoiseLevelHigh - High noise level.
	NoiseLevelHigh NoiseLevel = "high"
	// NoiseLevelLow - Low noise level.
	NoiseLevelLow NoiseLevel = "low"
	// NoiseLevelMedium - Medium noise level.
	NoiseLevelMedium NoiseLevel = "medium"
)

// PossibleNoiseLevelValues returns the possible values for the NoiseLevel const type.
func PossibleNoiseLevelValues() []NoiseLevel {
	return []NoiseLevel{
		NoiseLevelHigh,
		NoiseLevelLow,
		NoiseLevelMedium,
	}
}

// QualityForRecognition - Indicates quality of image for recognition.
type QualityForRecognition string

const (
	// QualityForRecognitionHigh - High quality.
	QualityForRecognitionHigh QualityForRecognition = "high"
	// QualityForRecognitionLow - Low quality.
	QualityForRecognitionLow QualityForRecognition = "low"
	// QualityForRecognitionMedium - Medium quality.
	QualityForRecognitionMedium QualityForRecognition = "medium"
)

// PossibleQualityForRecognitionValues returns the possible values for the QualityForRecognition const type.
func PossibleQualityForRecognitionValues() []QualityForRecognition {
	return []QualityForRecognition{
		QualityForRecognitionHigh,
		QualityForRecognitionLow,
		QualityForRecognitionMedium,
	}
}

// Versions - API versions for Azure AI Face API.
type Versions string

const (
	// VersionsV11Preview1 - v1.1-preview.1
	VersionsV11Preview1 Versions = "v1.1-preview.1"
	// VersionsV12Preview1 - v1.2-preview.1
	VersionsV12Preview1 Versions = "v1.2-preview.1"
)

// PossibleVersionsValues returns the possible values for the Versions const type.
func PossibleVersionsValues() []Versions {
	return []Versions{
		VersionsV11Preview1,
		VersionsV12Preview1,
	}
}
