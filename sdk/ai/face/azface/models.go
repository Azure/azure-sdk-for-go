// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azface

import "time"

// AccessoryItem - Accessory item and corresponding confidence level.
type AccessoryItem struct {
	// REQUIRED; Confidence level of the accessory type. Range between [0,1].
	Confidence *float32

	// REQUIRED; Type of the accessory.
	Type *AccessoryType
}

// AddFaceResult - Response body for adding face.
type AddFaceResult struct {
	// REQUIRED; Persisted Face ID of the added face, which is persisted and will not expire. Different from faceId which is created
	// in "Detect" and will expire in 24 hours after the detection call.
	PersistedFaceID *string
}

// Attributes - Face attributes for the detected face.
type Attributes struct {
	// Properties describing any accessories on a given face.
	Accessories []AccessoryItem

	// Age in years.
	Age *float32

	// Properties describing any presence of blur within the image.
	Blur *BlurProperties

	// Properties describing exposure level of the image.
	Exposure *ExposureProperties

	// Properties describing facial hair attributes.
	FacialHair *FacialHair

	// Glasses type if any of the face.
	Glasses *GlassesType

	// Properties describing hair attributes.
	Hair *HairProperties

	// 3-D roll/yaw/pitch angles for face direction.
	HeadPose *HeadPose

	// Properties describing the presence of a mask on a given face.
	Mask *MaskProperties

	// Properties describing noise level of the image.
	Noise *NoiseProperties

	// Properties describing occlusions on a given face.
	Occlusion *OcclusionProperties

	// Properties describing the overall image quality regarding whether the image being used in the detection is of sufficient
	// quality to attempt face recognition on.
	QualityForRecognition *QualityForRecognition

	// Smile intensity, a number between [0,1].
	Smile *float32
}

// BlurProperties - Properties describing any presence of blur within the image.
type BlurProperties struct {
	// REQUIRED; An enum value indicating level of blurriness.
	BlurLevel *BlurLevel

	// REQUIRED; A number indicating level of blurriness ranging from 0 to 1.
	Value *float32
}

// CreatePersonResult - Response of create person.
type CreatePersonResult struct {
	// REQUIRED; Person ID of the person.
	PersonID *string
}

// DetectionResult - Response for detect API.
type DetectionResult struct {
	// REQUIRED; A rectangle area for the face location on image.
	FaceRectangle *Rectangle

	// Face attributes for detected face.
	FaceAttributes *Attributes

	// Unique faceId of the detected face, created by detection API and it will expire 24 hours after the detection call. To return
	// this, it requires 'returnFaceId' parameter to be true.
	FaceID *string

	// An array of 27-point face landmarks pointing to the important positions of face components. To return this, it requires
	// 'returnFaceLandmarks' parameter to be true.
	FaceLandmarks *Landmarks

	// The 'recognitionModel' associated with this faceId. This is only returned when 'returnRecognitionModel' is explicitly set
	// as true.
	RecognitionModel *FaceRecognitionModel
}

// ExposureProperties - Properties describing exposure level of the image.
type ExposureProperties struct {
	// REQUIRED; An enum value indicating level of exposure.
	ExposureLevel *ExposureLevel

	// REQUIRED; A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is
	// good exposure. [0.75, 1] is over exposure.
	Value *float32
}

// FacialHair - Properties describing facial hair attributes.
type FacialHair struct {
	// REQUIRED; A number ranging from 0 to 1 indicating a level of confidence associated with a property.
	Beard *float32

	// REQUIRED; A number ranging from 0 to 1 indicating a level of confidence associated with a property.
	Moustache *float32

	// REQUIRED; A number ranging from 0 to 1 indicating a level of confidence associated with a property.
	Sideburns *float32
}

// FindSimilarResult - Response body for find similar face operation.
type FindSimilarResult struct {
	// REQUIRED; Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1].
	Confidence *float32

	// faceId of candidate face when find by faceIds. faceId is created by "Detect" and will expire 24 hours after the detection
	// call.
	FaceID *string

	// persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list
	// is persisted and will not expire.
	PersistedFaceID *string
}

// GroupingResult - Response body for group face operation.
type GroupingResult struct {
	// REQUIRED; A partition of the original faces based on face similarity. Groups are ranked by number of faces.
	Groups [][]string

	// REQUIRED; Face ids array of faces that cannot find any similar faces from original faces.
	MessyGroup []string
}

// HairColor - An array of candidate colors and confidence level in the presence of each.
type HairColor struct {
	// REQUIRED; Name of the hair color.
	Color *HairColorType

	// REQUIRED; Confidence level of the color. Range between [0,1].
	Confidence *float32
}

// HairProperties - Properties describing hair attributes.
type HairProperties struct {
	// REQUIRED; A number describing confidence level of whether the person is bald.
	Bald *float32

	// REQUIRED; An array of candidate colors and confidence level in the presence of each.
	HairColor []HairColor

	// REQUIRED; A boolean value describing whether the hair is visible in the image.
	Invisible *bool
}

// HeadPose - 3-D roll/yaw/pitch angles for face direction.
type HeadPose struct {
	// REQUIRED; Value of angles.
	Pitch *float32

	// REQUIRED; Value of angles.
	Roll *float32

	// REQUIRED; Value of angles.
	Yaw *float32
}

// IdentificationCandidate - Candidate for identify call.
type IdentificationCandidate struct {
	// REQUIRED; Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1].
	Confidence *float32

	// REQUIRED; personId of candidate person.
	PersonID *string
}

// IdentificationResult - Identify result.
type IdentificationResult struct {
	// REQUIRED; Identified person candidates for that face (ranked by confidence). Array size should be no larger than input
	// maxNumOfCandidatesReturned. If no person is identified, will return an empty array.
	Candidates []IdentificationCandidate

	// REQUIRED; faceId of the query face.
	FaceID *string
}

// LandmarkCoordinate - Landmark coordinates within an image.
type LandmarkCoordinate struct {
	// REQUIRED; The horizontal component, in pixels.
	X *float32

	// REQUIRED; The vertical component, in pixels.
	Y *float32
}

// Landmarks - A collection of 27-point face landmarks pointing to the important positions of face components.
type Landmarks struct {
	// REQUIRED; The coordinates of the left eye bottom.
	EyeLeftBottom *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eye inner.
	EyeLeftInner *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eye outer.
	EyeLeftOuter *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eye top.
	EyeLeftTop *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eye bottom.
	EyeRightBottom *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eye inner.
	EyeRightInner *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eye outer.
	EyeRightOuter *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eye top.
	EyeRightTop *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eyebrow inner.
	EyebrowLeftInner *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eyebrow outer.
	EyebrowLeftOuter *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eyebrow inner.
	EyebrowRightInner *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eyebrow outer.
	EyebrowRightOuter *LandmarkCoordinate

	// REQUIRED; The coordinates of the mouth left.
	MouthLeft *LandmarkCoordinate

	// REQUIRED; The coordinates of the mouth right.
	MouthRight *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose left alar out tip.
	NoseLeftAlarOutTip *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose left alar top.
	NoseLeftAlarTop *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose right alar out tip.
	NoseRightAlarOutTip *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose right alar top.
	NoseRightAlarTop *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose root left.
	NoseRootLeft *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose root right.
	NoseRootRight *LandmarkCoordinate

	// REQUIRED; The coordinates of the nose tip.
	NoseTip *LandmarkCoordinate

	// REQUIRED; The coordinates of the left eye pupil.
	PupilLeft *LandmarkCoordinate

	// REQUIRED; The coordinates of the right eye pupil.
	PupilRight *LandmarkCoordinate

	// REQUIRED; The coordinates of the under lip bottom.
	UnderLipBottom *LandmarkCoordinate

	// REQUIRED; The coordinates of the under lip top.
	UnderLipTop *LandmarkCoordinate

	// REQUIRED; The coordinates of the upper lip bottom.
	UpperLipBottom *LandmarkCoordinate

	// REQUIRED; The coordinates of the upper lip top.
	UpperLipTop *LandmarkCoordinate
}

// LargeFaceList - Large face list is a list of faces, up to 1,000,000 faces.
type LargeFaceList struct {
	// REQUIRED; User defined name, maximum length is 128.
	Name *string

	// Name of recognition model. Recognition model is used when the face features are extracted and associated with detected
	// faceIds.
	RecognitionModel *FaceRecognitionModel

	// Optional user defined data. Length should not exceed 16K.
	UserData *string

	// READ-ONLY; Valid character is letter in lower case or digit or '-' or '_', maximum length is 64.
	LargeFaceListID *string
}

// LargeFaceListFace - Face resource for large face list.
type LargeFaceListFace struct {
	// User-provided data attached to the face. The length limit is 1K.
	UserData *string

	// READ-ONLY; Face ID of the face.
	PersistedFaceID *string
}

// LargePersonGroup - The container of the uploaded person data, including face recognition feature, and up to 1,000,000 people.
type LargePersonGroup struct {
	// REQUIRED; User defined name, maximum length is 128.
	Name *string

	// Name of recognition model. Recognition model is used when the face features are extracted and associated with detected
	// faceIds.
	RecognitionModel *FaceRecognitionModel

	// Optional user defined data. Length should not exceed 16K.
	UserData *string

	// READ-ONLY; ID of the container.
	LargePersonGroupID *string
}

// LargePersonGroupPerson - The person in a specified large person group. To add face to this person, please call "Add Large
// Person Group Person Face".
type LargePersonGroupPerson struct {
	// REQUIRED; User defined name, maximum length is 128.
	Name *string

	// Optional user defined data. Length should not exceed 16K.
	UserData *string

	// READ-ONLY; ID of the person.
	PersonID *string

	// Face ids of registered faces in the person.
	PersistedFaceIDs []string
}

// LargePersonGroupPersonFace - Face resource for large person group person.
type LargePersonGroupPersonFace struct {
	// User-provided data attached to the face. The length limit is 1K.
	UserData *string

	// READ-ONLY; Face ID of the face.
	PersistedFaceID *string
}

// MaskProperties - Properties describing the presence of a mask on a given face.
type MaskProperties struct {
	// REQUIRED; A boolean value indicating whether nose and mouth are covered.
	NoseAndMouthCovered *bool

	// REQUIRED; Type of the mask.
	Type *MaskType
}

// NoiseProperties - Properties describing noise level of the image.
type NoiseProperties struct {
	// REQUIRED; An enum value indicating level of noise.
	NoiseLevel *NoiseLevel

	// REQUIRED; A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good
	// exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise
	// level.
	Value *float32
}

// OcclusionProperties - Properties describing occlusions on a given face.
type OcclusionProperties struct {
	// REQUIRED; A boolean value indicating whether eyes are occluded.
	EyeOccluded *bool

	// REQUIRED; A boolean value indicating whether forehead is occluded.
	ForeheadOccluded *bool

	// REQUIRED; A boolean value indicating whether the mouth is occluded.
	MouthOccluded *bool
}

// Rectangle - A rectangle within which a face can be found.
type Rectangle struct {
	// REQUIRED; The height of the rectangle, in pixels.
	Height *int32

	// REQUIRED; The distance from the left edge if the image to the left edge of the rectangle, in pixels.
	Left *int32

	// REQUIRED; The distance from the top edge if the image to the top edge of the rectangle, in pixels.
	Top *int32

	// REQUIRED; The width of the rectangle, in pixels.
	Width *int32
}

// TrainingResult - Training result of a container
type TrainingResult struct {
	// REQUIRED; A combined UTC date and time string that describes the created time of the person group, large person group or
	// large face list.
	CreatedDateTime *time.Time

	// REQUIRED; A combined UTC date and time string that describes the last modify time of the person group, large person group
	// or large face list, could be null value when the group is not successfully trained.
	LastActionDateTime *time.Time

	// REQUIRED; A combined UTC date and time string that describes the last successful training time of the person group, large
	// person group or large face list.
	LastSuccessfulTrainingDateTime *time.Time

	// REQUIRED; Training status of the container.
	Status *FaceOperationStatus

	// Show failure message when training failed (omitted when training succeed).
	Message *string
}

// VerificationResult - Verify result.
type VerificationResult struct {
	// REQUIRED; A number indicates the similarity confidence of whether two faces belong to the same person, or whether the face
	// belongs to the person. By default, isIdentical is set to True if similarity confidence is greater than or equal to 0.5.
	// This is useful for advanced users to override 'isIdentical' and fine-tune the result on their own data.
	Confidence *float32

	// REQUIRED; True if the two faces belong to the same person or the face belongs to the person, otherwise false.
	IsIdentical *bool
}
