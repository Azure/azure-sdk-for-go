// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azface

// AdministrationLargeFaceListClientAddFaceFromURLOptions contains the optional parameters for the AdministrationLargeFaceListClient.AddFaceFromURL
// method.
type AdministrationLargeFaceListClientAddFaceFromURLOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'.
	DetectionModel *FaceDetectionModel

	// A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.
	TargetFace []int32

	// User-provided data attached to the face. The size limit is 1K.
	UserData *string
}

// AdministrationLargeFaceListClientAddFaceOptions contains the optional parameters for the AdministrationLargeFaceListClient.AddFace
// method.
type AdministrationLargeFaceListClientAddFaceOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'.
	DetectionModel *FaceDetectionModel

	// A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.
	TargetFace []int32

	// User-provided data attached to the face. The size limit is 1K.
	UserData *string
}

// AdministrationLargeFaceListClientBeginTrainOptions contains the optional parameters for the AdministrationLargeFaceListClient.BeginTrain
// method.
type AdministrationLargeFaceListClientBeginTrainOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// AdministrationLargeFaceListClientCreateOptions contains the optional parameters for the AdministrationLargeFaceListClient.Create
// method.
type AdministrationLargeFaceListClientCreateOptions struct {
	// The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02,
	// 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its
	// accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared
	// with 'recognition_01' and 'recognition_02'.
	RecognitionModel *FaceRecognitionModel

	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// AdministrationLargeFaceListClientDeleteFaceOptions contains the optional parameters for the AdministrationLargeFaceListClient.DeleteFace
// method.
type AdministrationLargeFaceListClientDeleteFaceOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargeFaceListClientDeleteOptions contains the optional parameters for the AdministrationLargeFaceListClient.Delete
// method.
type AdministrationLargeFaceListClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargeFaceListClientGetFaceOptions contains the optional parameters for the AdministrationLargeFaceListClient.GetFace
// method.
type AdministrationLargeFaceListClientGetFaceOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargeFaceListClientGetFacesOptions contains the optional parameters for the AdministrationLargeFaceListClient.GetFaces
// method.
type AdministrationLargeFaceListClientGetFacesOptions struct {
	// List resources greater than the "start". It contains no more than 64 characters. Default is empty.
	Start *string

	// The number of items to list, ranging in [1, 1000]. Default is 1000.
	Top *int32
}

// AdministrationLargeFaceListClientGetLargeFaceListsOptions contains the optional parameters for the AdministrationLargeFaceListClient.GetLargeFaceLists
// method.
type AdministrationLargeFaceListClientGetLargeFaceListsOptions struct {
	// Return 'recognitionModel' or not. The default value is false.
	ReturnRecognitionModel *bool

	// List resources greater than the "start". It contains no more than 64 characters. Default is empty.
	Start *string

	// The number of items to list, ranging in [1, 1000]. Default is 1000.
	Top *int32
}

// AdministrationLargeFaceListClientGetOptions contains the optional parameters for the AdministrationLargeFaceListClient.Get
// method.
type AdministrationLargeFaceListClientGetOptions struct {
	// Return 'recognitionModel' or not. The default value is false.
	ReturnRecognitionModel *bool
}

// AdministrationLargeFaceListClientGetTrainingStatusOptions contains the optional parameters for the AdministrationLargeFaceListClient.GetTrainingStatus
// method.
type AdministrationLargeFaceListClientGetTrainingStatusOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargeFaceListClientUpdateFaceOptions contains the optional parameters for the AdministrationLargeFaceListClient.UpdateFace
// method.
type AdministrationLargeFaceListClientUpdateFaceOptions struct {
	// User-provided data attached to the face. The length limit is 1K.
	UserData *string
}

// AdministrationLargeFaceListClientUpdateOptions contains the optional parameters for the AdministrationLargeFaceListClient.Update
// method.
type AdministrationLargeFaceListClientUpdateOptions struct {
	// User defined name, maximum length is 128.
	Name *string

	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// AdministrationLargePersonGroupClientAddFaceFromURLOptions contains the optional parameters for the AdministrationLargePersonGroupClient.AddFaceFromURL
// method.
type AdministrationLargePersonGroupClientAddFaceFromURLOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'.
	DetectionModel *FaceDetectionModel

	// A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.
	TargetFace []int32

	// User-provided data attached to the face. The size limit is 1K.
	UserData *string
}

// AdministrationLargePersonGroupClientAddFaceOptions contains the optional parameters for the AdministrationLargePersonGroupClient.AddFace
// method.
type AdministrationLargePersonGroupClientAddFaceOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'.
	DetectionModel *FaceDetectionModel

	// A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'.
	TargetFace []int32

	// User-provided data attached to the face. The size limit is 1K.
	UserData *string
}

// AdministrationLargePersonGroupClientBeginTrainOptions contains the optional parameters for the AdministrationLargePersonGroupClient.BeginTrain
// method.
type AdministrationLargePersonGroupClientBeginTrainOptions struct {
	// Resumes the long-running operation from the provided token.
	ResumeToken string
}

// AdministrationLargePersonGroupClientCreateOptions contains the optional parameters for the AdministrationLargePersonGroupClient.Create
// method.
type AdministrationLargePersonGroupClientCreateOptions struct {
	// The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02,
	// 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its
	// accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared
	// with 'recognition_01' and 'recognition_02'.
	RecognitionModel *FaceRecognitionModel

	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// AdministrationLargePersonGroupClientCreatePersonOptions contains the optional parameters for the AdministrationLargePersonGroupClient.CreatePerson
// method.
type AdministrationLargePersonGroupClientCreatePersonOptions struct {
	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// AdministrationLargePersonGroupClientDeleteFaceOptions contains the optional parameters for the AdministrationLargePersonGroupClient.DeleteFace
// method.
type AdministrationLargePersonGroupClientDeleteFaceOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientDeleteOptions contains the optional parameters for the AdministrationLargePersonGroupClient.Delete
// method.
type AdministrationLargePersonGroupClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientDeletePersonOptions contains the optional parameters for the AdministrationLargePersonGroupClient.DeletePerson
// method.
type AdministrationLargePersonGroupClientDeletePersonOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientGetFaceOptions contains the optional parameters for the AdministrationLargePersonGroupClient.GetFace
// method.
type AdministrationLargePersonGroupClientGetFaceOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientGetLargePersonGroupsOptions contains the optional parameters for the AdministrationLargePersonGroupClient.GetLargePersonGroups
// method.
type AdministrationLargePersonGroupClientGetLargePersonGroupsOptions struct {
	// Return 'recognitionModel' or not. The default value is false.
	ReturnRecognitionModel *bool

	// List resources greater than the "start". It contains no more than 64 characters. Default is empty.
	Start *string

	// The number of items to list, ranging in [1, 1000]. Default is 1000.
	Top *int32
}

// AdministrationLargePersonGroupClientGetOptions contains the optional parameters for the AdministrationLargePersonGroupClient.Get
// method.
type AdministrationLargePersonGroupClientGetOptions struct {
	// Return 'recognitionModel' or not. The default value is false.
	ReturnRecognitionModel *bool
}

// AdministrationLargePersonGroupClientGetPersonOptions contains the optional parameters for the AdministrationLargePersonGroupClient.GetPerson
// method.
type AdministrationLargePersonGroupClientGetPersonOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientGetPersonsOptions contains the optional parameters for the AdministrationLargePersonGroupClient.GetPersons
// method.
type AdministrationLargePersonGroupClientGetPersonsOptions struct {
	// List resources greater than the "start". It contains no more than 64 characters. Default is empty.
	Start *string

	// The number of items to list, ranging in [1, 1000]. Default is 1000.
	Top *int32
}

// AdministrationLargePersonGroupClientGetTrainingStatusOptions contains the optional parameters for the AdministrationLargePersonGroupClient.GetTrainingStatus
// method.
type AdministrationLargePersonGroupClientGetTrainingStatusOptions struct {
	// placeholder for future optional parameters
}

// AdministrationLargePersonGroupClientUpdateFaceOptions contains the optional parameters for the AdministrationLargePersonGroupClient.UpdateFace
// method.
type AdministrationLargePersonGroupClientUpdateFaceOptions struct {
	// User-provided data attached to the face. The length limit is 1K.
	UserData *string
}

// AdministrationLargePersonGroupClientUpdateOptions contains the optional parameters for the AdministrationLargePersonGroupClient.Update
// method.
type AdministrationLargePersonGroupClientUpdateOptions struct {
	// User defined name, maximum length is 128.
	Name *string

	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// AdministrationLargePersonGroupClientUpdatePersonOptions contains the optional parameters for the AdministrationLargePersonGroupClient.UpdatePerson
// method.
type AdministrationLargePersonGroupClientUpdatePersonOptions struct {
	// User defined name, maximum length is 128.
	Name *string

	// Optional user defined data. Length should not exceed 16K.
	UserData *string
}

// ClientFindSimilarFromLargeFaceListOptions contains the optional parameters for the Client.FindSimilarFromLargeFaceList
// method.
type ClientFindSimilarFromLargeFaceListOptions struct {
	// The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.
	MaxNumOfCandidatesReturned *int32

	// Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.
	Mode *FindSimilarMatchMode
}

// ClientFindSimilarOptions contains the optional parameters for the Client.FindSimilar method.
type ClientFindSimilarOptions struct {
	// The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.
	MaxNumOfCandidatesReturned *int32

	// Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.
	Mode *FindSimilarMatchMode
}

// ClientGroupOptions contains the optional parameters for the Client.Group method.
type ClientGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientIdentifyFromLargePersonGroupOptions contains the optional parameters for the Client.IdentifyFromLargePersonGroup
// method.
type ClientIdentifyFromLargePersonGroupOptions struct {
	// Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override
	// default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value
	// working on other data and after algorithm updates.
	ConfidenceThreshold *float32

	// The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.
	MaxNumOfCandidatesReturned *int32
}

// ClientVerifyFaceToFaceOptions contains the optional parameters for the Client.VerifyFaceToFace method.
type ClientVerifyFaceToFaceOptions struct {
	// placeholder for future optional parameters
}

// ClientVerifyFromLargePersonGroupOptions contains the optional parameters for the Client.VerifyFromLargePersonGroup method.
type ClientVerifyFromLargePersonGroupOptions struct {
	// placeholder for future optional parameters
}

// SessionClientDetectFromSessionImageOptions contains the optional parameters for the SessionClient.DetectFromSessionImage
// method.
type SessionClientDetectFromSessionImageOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on
	// smaller faces (64x64 pixels) and rotated face orientations.
	DetectionModel *FaceDetectionModel

	// The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value
	// is 86400 (24 hours).
	FaceIDTimeToLive *int32

	// The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01',
	// 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended
	// since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved
	// compared with 'recognition_01' and 'recognition_02'.
	RecognitionModel *FaceRecognitionModel

	// Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'.
	// Face attribute analysis has additional computational and time cost.
	ReturnFaceAttributes []FaceAttributeType

	// Return faceIds of the detected faces or not. The default value is true.
	ReturnFaceID *bool

	// Return face landmarks of the detected faces or not. The default value is false.
	ReturnFaceLandmarks *bool

	// Return 'recognitionModel' or not. The default value is false. This is only applicable when returnFaceId = true.
	ReturnRecognitionModel *bool
}

// clientdetectFromURLOptions contains the optional parameters for the Client.detectFromURL method.
type clientdetectFromURLOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on
	// smaller faces (64x64 pixels) and rotated face orientations.
	DetectionModel *FaceDetectionModel

	// The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value
	// is 86400 (24 hours).
	FaceIDTimeToLive *int32

	// The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01',
	// 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended
	// since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved
	// compared with 'recognition_01' and 'recognition_02'.
	RecognitionModel *FaceRecognitionModel

	// Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'.
	// Face attribute analysis has additional computational and time cost.
	ReturnFaceAttributes []FaceAttributeType

	// Return faceIds of the detected faces or not. The default value is true.
	ReturnFaceID *bool

	// Return face landmarks of the detected faces or not. The default value is false.
	ReturnFaceLandmarks *bool

	// Return 'recognitionModel' or not. The default value is false. This is only applicable when returnFaceId = true.
	ReturnRecognitionModel *bool
}

// clientdetectOptions contains the optional parameters for the Client.detect method.
type clientdetectOptions struct {
	// The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02'
	// and 'detection_03'. The default value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on
	// smaller faces (64x64 pixels) and rotated face orientations.
	DetectionModel *FaceDetectionModel

	// The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value
	// is 86400 (24 hours).
	FaceIDTimeToLive *int32

	// The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01',
	// 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended
	// since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved
	// compared with 'recognition_01' and 'recognition_02'.
	RecognitionModel *FaceRecognitionModel

	// Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'.
	// Face attribute analysis has additional computational and time cost.
	ReturnFaceAttributes []FaceAttributeType

	// Return faceIds of the detected faces or not. The default value is true.
	ReturnFaceID *bool

	// Return face landmarks of the detected faces or not. The default value is false.
	ReturnFaceLandmarks *bool

	// Return 'recognitionModel' or not. The default value is false. This is only applicable when returnFaceId = true.
	ReturnRecognitionModel *bool
}
