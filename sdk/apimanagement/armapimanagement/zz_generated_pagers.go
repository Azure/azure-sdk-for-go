// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapimanagement

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type APIDiagnosticListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIDiagnosticListByServiceResponse.
	PageResponse() APIDiagnosticListByServiceResponse
}

type apiDiagnosticListByServicePager struct {
	client    *APIDiagnosticClient
	current   APIDiagnosticListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIDiagnosticListByServiceResponse) (*azcore.Request, error)
}

func (p *apiDiagnosticListByServicePager) Err() error {
	return p.err
}

func (p *apiDiagnosticListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCollection.NextLink == nil || len(*p.current.DiagnosticCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiDiagnosticListByServicePager) PageResponse() APIDiagnosticListByServiceResponse {
	return p.current
}

type APIIssueAttachmentListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIIssueAttachmentListByServiceResponse.
	PageResponse() APIIssueAttachmentListByServiceResponse
}

type apiIssueAttachmentListByServicePager struct {
	client    *APIIssueAttachmentClient
	current   APIIssueAttachmentListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIIssueAttachmentListByServiceResponse) (*azcore.Request, error)
}

func (p *apiIssueAttachmentListByServicePager) Err() error {
	return p.err
}

func (p *apiIssueAttachmentListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IssueAttachmentCollection.NextLink == nil || len(*p.current.IssueAttachmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiIssueAttachmentListByServicePager) PageResponse() APIIssueAttachmentListByServiceResponse {
	return p.current
}

type APIIssueCommentListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIIssueCommentListByServiceResponse.
	PageResponse() APIIssueCommentListByServiceResponse
}

type apiIssueCommentListByServicePager struct {
	client    *APIIssueCommentClient
	current   APIIssueCommentListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIIssueCommentListByServiceResponse) (*azcore.Request, error)
}

func (p *apiIssueCommentListByServicePager) Err() error {
	return p.err
}

func (p *apiIssueCommentListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IssueCommentCollection.NextLink == nil || len(*p.current.IssueCommentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiIssueCommentListByServicePager) PageResponse() APIIssueCommentListByServiceResponse {
	return p.current
}

type APIIssueListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIIssueListByServiceResponse.
	PageResponse() APIIssueListByServiceResponse
}

type apiIssueListByServicePager struct {
	client    *APIIssueClient
	current   APIIssueListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIIssueListByServiceResponse) (*azcore.Request, error)
}

func (p *apiIssueListByServicePager) Err() error {
	return p.err
}

func (p *apiIssueListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IssueCollection.NextLink == nil || len(*p.current.IssueCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiIssueListByServicePager) PageResponse() APIIssueListByServiceResponse {
	return p.current
}

type APIListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIListByServiceResponse.
	PageResponse() APIListByServiceResponse
}

type apiListByServicePager struct {
	client    *APIClient
	current   APIListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIListByServiceResponse) (*azcore.Request, error)
}

func (p *apiListByServicePager) Err() error {
	return p.err
}

func (p *apiListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APICollection.NextLink == nil || len(*p.current.APICollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiListByServicePager) PageResponse() APIListByServiceResponse {
	return p.current
}

type APIListByTagsPager interface {
	azcore.Pager
	// PageResponse returns the current APIListByTagsResponse.
	PageResponse() APIListByTagsResponse
}

type apiListByTagsPager struct {
	client    *APIClient
	current   APIListByTagsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIListByTagsResponse) (*azcore.Request, error)
}

func (p *apiListByTagsPager) Err() error {
	return p.err
}

func (p *apiListByTagsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagResourceCollection.NextLink == nil || len(*p.current.TagResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTagsHandleError(resp)
		return false
	}
	result, err := p.client.listByTagsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiListByTagsPager) PageResponse() APIListByTagsResponse {
	return p.current
}

type APIManagementOperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current APIManagementOperationsListResponse.
	PageResponse() APIManagementOperationsListResponse
}

type apiManagementOperationsListPager struct {
	client    *APIManagementOperationsClient
	current   APIManagementOperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIManagementOperationsListResponse) (*azcore.Request, error)
}

func (p *apiManagementOperationsListPager) Err() error {
	return p.err
}

func (p *apiManagementOperationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiManagementOperationsListPager) PageResponse() APIManagementOperationsListResponse {
	return p.current
}

type APIManagementSKUsListPager interface {
	azcore.Pager
	// PageResponse returns the current APIManagementSKUsListResponse.
	PageResponse() APIManagementSKUsListResponse
}

type apiManagementSKUsListPager struct {
	client    *APIManagementSKUsClient
	current   APIManagementSKUsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIManagementSKUsListResponse) (*azcore.Request, error)
}

func (p *apiManagementSKUsListPager) Err() error {
	return p.err
}

func (p *apiManagementSKUsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIManagementSKUsResult.NextLink == nil || len(*p.current.APIManagementSKUsResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiManagementSKUsListPager) PageResponse() APIManagementSKUsListResponse {
	return p.current
}

type APIManagementServiceListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current APIManagementServiceListByResourceGroupResponse.
	PageResponse() APIManagementServiceListByResourceGroupResponse
}

type apiManagementServiceListByResourceGroupPager struct {
	client    *APIManagementServiceClient
	current   APIManagementServiceListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIManagementServiceListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *apiManagementServiceListByResourceGroupPager) Err() error {
	return p.err
}

func (p *apiManagementServiceListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIManagementServiceListResult.NextLink == nil || len(*p.current.APIManagementServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiManagementServiceListByResourceGroupPager) PageResponse() APIManagementServiceListByResourceGroupResponse {
	return p.current
}

type APIManagementServiceListPager interface {
	azcore.Pager
	// PageResponse returns the current APIManagementServiceListResponse.
	PageResponse() APIManagementServiceListResponse
}

type apiManagementServiceListPager struct {
	client    *APIManagementServiceClient
	current   APIManagementServiceListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIManagementServiceListResponse) (*azcore.Request, error)
}

func (p *apiManagementServiceListPager) Err() error {
	return p.err
}

func (p *apiManagementServiceListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIManagementServiceListResult.NextLink == nil || len(*p.current.APIManagementServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiManagementServiceListPager) PageResponse() APIManagementServiceListResponse {
	return p.current
}

type APIManagementServiceSKUsListAvailableServiceSKUsPager interface {
	azcore.Pager
	// PageResponse returns the current APIManagementServiceSKUsListAvailableServiceSKUsResponse.
	PageResponse() APIManagementServiceSKUsListAvailableServiceSKUsResponse
}

type apiManagementServiceSKUsListAvailableServiceSKUsPager struct {
	client    *APIManagementServiceSKUsClient
	current   APIManagementServiceSKUsListAvailableServiceSKUsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIManagementServiceSKUsListAvailableServiceSKUsResponse) (*azcore.Request, error)
}

func (p *apiManagementServiceSKUsListAvailableServiceSKUsPager) Err() error {
	return p.err
}

func (p *apiManagementServiceSKUsListAvailableServiceSKUsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUResults.NextLink == nil || len(*p.current.ResourceSKUResults.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAvailableServiceSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listAvailableServiceSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiManagementServiceSKUsListAvailableServiceSKUsPager) PageResponse() APIManagementServiceSKUsListAvailableServiceSKUsResponse {
	return p.current
}

type APIOperationListByAPIPager interface {
	azcore.Pager
	// PageResponse returns the current APIOperationListByAPIResponse.
	PageResponse() APIOperationListByAPIResponse
}

type apiOperationListByAPIPager struct {
	client    *APIOperationClient
	current   APIOperationListByAPIResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIOperationListByAPIResponse) (*azcore.Request, error)
}

func (p *apiOperationListByAPIPager) Err() error {
	return p.err
}

func (p *apiOperationListByAPIPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationCollection.NextLink == nil || len(*p.current.OperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAPIHandleError(resp)
		return false
	}
	result, err := p.client.listByAPIHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiOperationListByAPIPager) PageResponse() APIOperationListByAPIResponse {
	return p.current
}

type APIProductListByApisPager interface {
	azcore.Pager
	// PageResponse returns the current APIProductListByApisResponse.
	PageResponse() APIProductListByApisResponse
}

type apiProductListByApisPager struct {
	client    *APIProductClient
	current   APIProductListByApisResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIProductListByApisResponse) (*azcore.Request, error)
}

func (p *apiProductListByApisPager) Err() error {
	return p.err
}

func (p *apiProductListByApisPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductCollection.NextLink == nil || len(*p.current.ProductCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByApisHandleError(resp)
		return false
	}
	result, err := p.client.listByApisHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiProductListByApisPager) PageResponse() APIProductListByApisResponse {
	return p.current
}

type APIReleaseListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIReleaseListByServiceResponse.
	PageResponse() APIReleaseListByServiceResponse
}

type apiReleaseListByServicePager struct {
	client    *APIReleaseClient
	current   APIReleaseListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIReleaseListByServiceResponse) (*azcore.Request, error)
}

func (p *apiReleaseListByServicePager) Err() error {
	return p.err
}

func (p *apiReleaseListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIReleaseCollection.NextLink == nil || len(*p.current.APIReleaseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiReleaseListByServicePager) PageResponse() APIReleaseListByServiceResponse {
	return p.current
}

type APIRevisionListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIRevisionListByServiceResponse.
	PageResponse() APIRevisionListByServiceResponse
}

type apiRevisionListByServicePager struct {
	client    *APIRevisionClient
	current   APIRevisionListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIRevisionListByServiceResponse) (*azcore.Request, error)
}

func (p *apiRevisionListByServicePager) Err() error {
	return p.err
}

func (p *apiRevisionListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIRevisionCollection.NextLink == nil || len(*p.current.APIRevisionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiRevisionListByServicePager) PageResponse() APIRevisionListByServiceResponse {
	return p.current
}

type APISchemaListByAPIPager interface {
	azcore.Pager
	// PageResponse returns the current APISchemaListByAPIResponse.
	PageResponse() APISchemaListByAPIResponse
}

type apiSchemaListByAPIPager struct {
	client    *APISchemaClient
	current   APISchemaListByAPIResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APISchemaListByAPIResponse) (*azcore.Request, error)
}

func (p *apiSchemaListByAPIPager) Err() error {
	return p.err
}

func (p *apiSchemaListByAPIPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SchemaCollection.NextLink == nil || len(*p.current.SchemaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAPIHandleError(resp)
		return false
	}
	result, err := p.client.listByAPIHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiSchemaListByAPIPager) PageResponse() APISchemaListByAPIResponse {
	return p.current
}

type APITagDescriptionListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APITagDescriptionListByServiceResponse.
	PageResponse() APITagDescriptionListByServiceResponse
}

type apiTagDescriptionListByServicePager struct {
	client    *APITagDescriptionClient
	current   APITagDescriptionListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APITagDescriptionListByServiceResponse) (*azcore.Request, error)
}

func (p *apiTagDescriptionListByServicePager) Err() error {
	return p.err
}

func (p *apiTagDescriptionListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagDescriptionCollection.NextLink == nil || len(*p.current.TagDescriptionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiTagDescriptionListByServicePager) PageResponse() APITagDescriptionListByServiceResponse {
	return p.current
}

type APIVersionSetListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current APIVersionSetListByServiceResponse.
	PageResponse() APIVersionSetListByServiceResponse
}

type apiVersionSetListByServicePager struct {
	client    *APIVersionSetClient
	current   APIVersionSetListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, APIVersionSetListByServiceResponse) (*azcore.Request, error)
}

func (p *apiVersionSetListByServicePager) Err() error {
	return p.err
}

func (p *apiVersionSetListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIVersionSetCollection.NextLink == nil || len(*p.current.APIVersionSetCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiVersionSetListByServicePager) PageResponse() APIVersionSetListByServiceResponse {
	return p.current
}

type AuthorizationServerListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current AuthorizationServerListByServiceResponse.
	PageResponse() AuthorizationServerListByServiceResponse
}

type authorizationServerListByServicePager struct {
	client    *AuthorizationServerClient
	current   AuthorizationServerListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AuthorizationServerListByServiceResponse) (*azcore.Request, error)
}

func (p *authorizationServerListByServicePager) Err() error {
	return p.err
}

func (p *authorizationServerListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AuthorizationServerCollection.NextLink == nil || len(*p.current.AuthorizationServerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *authorizationServerListByServicePager) PageResponse() AuthorizationServerListByServiceResponse {
	return p.current
}

type BackendListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current BackendListByServiceResponse.
	PageResponse() BackendListByServiceResponse
}

type backendListByServicePager struct {
	client    *BackendClient
	current   BackendListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, BackendListByServiceResponse) (*azcore.Request, error)
}

func (p *backendListByServicePager) Err() error {
	return p.err
}

func (p *backendListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackendCollection.NextLink == nil || len(*p.current.BackendCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *backendListByServicePager) PageResponse() BackendListByServiceResponse {
	return p.current
}

type CacheListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current CacheListByServiceResponse.
	PageResponse() CacheListByServiceResponse
}

type cacheListByServicePager struct {
	client    *CacheClient
	current   CacheListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CacheListByServiceResponse) (*azcore.Request, error)
}

func (p *cacheListByServicePager) Err() error {
	return p.err
}

func (p *cacheListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CacheCollection.NextLink == nil || len(*p.current.CacheCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *cacheListByServicePager) PageResponse() CacheListByServiceResponse {
	return p.current
}

type CertificateListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current CertificateListByServiceResponse.
	PageResponse() CertificateListByServiceResponse
}

type certificateListByServicePager struct {
	client    *CertificateClient
	current   CertificateListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificateListByServiceResponse) (*azcore.Request, error)
}

func (p *certificateListByServicePager) Err() error {
	return p.err
}

func (p *certificateListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateCollection.NextLink == nil || len(*p.current.CertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateListByServicePager) PageResponse() CertificateListByServiceResponse {
	return p.current
}

type ContentItemListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current ContentItemListByServiceResponse.
	PageResponse() ContentItemListByServiceResponse
}

type contentItemListByServicePager struct {
	client    *ContentItemClient
	current   ContentItemListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ContentItemListByServiceResponse) (*azcore.Request, error)
}

func (p *contentItemListByServicePager) Err() error {
	return p.err
}

func (p *contentItemListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContentItemCollection.NextLink == nil || len(*p.current.ContentItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *contentItemListByServicePager) PageResponse() ContentItemListByServiceResponse {
	return p.current
}

type ContentTypeListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current ContentTypeListByServiceResponse.
	PageResponse() ContentTypeListByServiceResponse
}

type contentTypeListByServicePager struct {
	client    *ContentTypeClient
	current   ContentTypeListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ContentTypeListByServiceResponse) (*azcore.Request, error)
}

func (p *contentTypeListByServicePager) Err() error {
	return p.err
}

func (p *contentTypeListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContentTypeCollection.NextLink == nil || len(*p.current.ContentTypeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *contentTypeListByServicePager) PageResponse() ContentTypeListByServiceResponse {
	return p.current
}

type DeletedServicesListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current DeletedServicesListBySubscriptionResponse.
	PageResponse() DeletedServicesListBySubscriptionResponse
}

type deletedServicesListBySubscriptionPager struct {
	client    *DeletedServicesClient
	current   DeletedServicesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeletedServicesListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *deletedServicesListBySubscriptionPager) Err() error {
	return p.err
}

func (p *deletedServicesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedServicesCollection.NextLink == nil || len(*p.current.DeletedServicesCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedServicesListBySubscriptionPager) PageResponse() DeletedServicesListBySubscriptionResponse {
	return p.current
}

type DiagnosticListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticListByServiceResponse.
	PageResponse() DiagnosticListByServiceResponse
}

type diagnosticListByServicePager struct {
	client    *DiagnosticClient
	current   DiagnosticListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticListByServiceResponse) (*azcore.Request, error)
}

func (p *diagnosticListByServicePager) Err() error {
	return p.err
}

func (p *diagnosticListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCollection.NextLink == nil || len(*p.current.DiagnosticCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticListByServicePager) PageResponse() DiagnosticListByServiceResponse {
	return p.current
}

type EmailTemplateListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current EmailTemplateListByServiceResponse.
	PageResponse() EmailTemplateListByServiceResponse
}

type emailTemplateListByServicePager struct {
	client    *EmailTemplateClient
	current   EmailTemplateListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EmailTemplateListByServiceResponse) (*azcore.Request, error)
}

func (p *emailTemplateListByServicePager) Err() error {
	return p.err
}

func (p *emailTemplateListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EmailTemplateCollection.NextLink == nil || len(*p.current.EmailTemplateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *emailTemplateListByServicePager) PageResponse() EmailTemplateListByServiceResponse {
	return p.current
}

type GatewayAPIListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current GatewayAPIListByServiceResponse.
	PageResponse() GatewayAPIListByServiceResponse
}

type gatewayAPIListByServicePager struct {
	client    *GatewayAPIClient
	current   GatewayAPIListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GatewayAPIListByServiceResponse) (*azcore.Request, error)
}

func (p *gatewayAPIListByServicePager) Err() error {
	return p.err
}

func (p *gatewayAPIListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APICollection.NextLink == nil || len(*p.current.APICollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *gatewayAPIListByServicePager) PageResponse() GatewayAPIListByServiceResponse {
	return p.current
}

type GatewayCertificateAuthorityListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current GatewayCertificateAuthorityListByServiceResponse.
	PageResponse() GatewayCertificateAuthorityListByServiceResponse
}

type gatewayCertificateAuthorityListByServicePager struct {
	client    *GatewayCertificateAuthorityClient
	current   GatewayCertificateAuthorityListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GatewayCertificateAuthorityListByServiceResponse) (*azcore.Request, error)
}

func (p *gatewayCertificateAuthorityListByServicePager) Err() error {
	return p.err
}

func (p *gatewayCertificateAuthorityListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayCertificateAuthorityCollection.NextLink == nil || len(*p.current.GatewayCertificateAuthorityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *gatewayCertificateAuthorityListByServicePager) PageResponse() GatewayCertificateAuthorityListByServiceResponse {
	return p.current
}

type GatewayHostnameConfigurationListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current GatewayHostnameConfigurationListByServiceResponse.
	PageResponse() GatewayHostnameConfigurationListByServiceResponse
}

type gatewayHostnameConfigurationListByServicePager struct {
	client    *GatewayHostnameConfigurationClient
	current   GatewayHostnameConfigurationListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GatewayHostnameConfigurationListByServiceResponse) (*azcore.Request, error)
}

func (p *gatewayHostnameConfigurationListByServicePager) Err() error {
	return p.err
}

func (p *gatewayHostnameConfigurationListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayHostnameConfigurationCollection.NextLink == nil || len(*p.current.GatewayHostnameConfigurationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *gatewayHostnameConfigurationListByServicePager) PageResponse() GatewayHostnameConfigurationListByServiceResponse {
	return p.current
}

type GatewayListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current GatewayListByServiceResponse.
	PageResponse() GatewayListByServiceResponse
}

type gatewayListByServicePager struct {
	client    *GatewayClient
	current   GatewayListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GatewayListByServiceResponse) (*azcore.Request, error)
}

func (p *gatewayListByServicePager) Err() error {
	return p.err
}

func (p *gatewayListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GatewayCollection.NextLink == nil || len(*p.current.GatewayCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *gatewayListByServicePager) PageResponse() GatewayListByServiceResponse {
	return p.current
}

type GroupListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current GroupListByServiceResponse.
	PageResponse() GroupListByServiceResponse
}

type groupListByServicePager struct {
	client    *GroupClient
	current   GroupListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GroupListByServiceResponse) (*azcore.Request, error)
}

func (p *groupListByServicePager) Err() error {
	return p.err
}

func (p *groupListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GroupCollection.NextLink == nil || len(*p.current.GroupCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *groupListByServicePager) PageResponse() GroupListByServiceResponse {
	return p.current
}

type GroupUserListPager interface {
	azcore.Pager
	// PageResponse returns the current GroupUserListResponse.
	PageResponse() GroupUserListResponse
}

type groupUserListPager struct {
	client    *GroupUserClient
	current   GroupUserListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, GroupUserListResponse) (*azcore.Request, error)
}

func (p *groupUserListPager) Err() error {
	return p.err
}

func (p *groupUserListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserCollection.NextLink == nil || len(*p.current.UserCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *groupUserListPager) PageResponse() GroupUserListResponse {
	return p.current
}

type IdentityProviderListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current IdentityProviderListByServiceResponse.
	PageResponse() IdentityProviderListByServiceResponse
}

type identityProviderListByServicePager struct {
	client    *IdentityProviderClient
	current   IdentityProviderListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IdentityProviderListByServiceResponse) (*azcore.Request, error)
}

func (p *identityProviderListByServicePager) Err() error {
	return p.err
}

func (p *identityProviderListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentityProviderList.NextLink == nil || len(*p.current.IdentityProviderList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *identityProviderListByServicePager) PageResponse() IdentityProviderListByServiceResponse {
	return p.current
}

type IssueListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current IssueListByServiceResponse.
	PageResponse() IssueListByServiceResponse
}

type issueListByServicePager struct {
	client    *IssueClient
	current   IssueListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, IssueListByServiceResponse) (*azcore.Request, error)
}

func (p *issueListByServicePager) Err() error {
	return p.err
}

func (p *issueListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IssueCollection.NextLink == nil || len(*p.current.IssueCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *issueListByServicePager) PageResponse() IssueListByServiceResponse {
	return p.current
}

type LoggerListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current LoggerListByServiceResponse.
	PageResponse() LoggerListByServiceResponse
}

type loggerListByServicePager struct {
	client    *LoggerClient
	current   LoggerListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LoggerListByServiceResponse) (*azcore.Request, error)
}

func (p *loggerListByServicePager) Err() error {
	return p.err
}

func (p *loggerListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LoggerCollection.NextLink == nil || len(*p.current.LoggerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *loggerListByServicePager) PageResponse() LoggerListByServiceResponse {
	return p.current
}

type NamedValueListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current NamedValueListByServiceResponse.
	PageResponse() NamedValueListByServiceResponse
}

type namedValueListByServicePager struct {
	client    *NamedValueClient
	current   NamedValueListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NamedValueListByServiceResponse) (*azcore.Request, error)
}

func (p *namedValueListByServicePager) Err() error {
	return p.err
}

func (p *namedValueListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NamedValueCollection.NextLink == nil || len(*p.current.NamedValueCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *namedValueListByServicePager) PageResponse() NamedValueListByServiceResponse {
	return p.current
}

type NotificationListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current NotificationListByServiceResponse.
	PageResponse() NotificationListByServiceResponse
}

type notificationListByServicePager struct {
	client    *NotificationClient
	current   NotificationListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, NotificationListByServiceResponse) (*azcore.Request, error)
}

func (p *notificationListByServicePager) Err() error {
	return p.err
}

func (p *notificationListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NotificationCollection.NextLink == nil || len(*p.current.NotificationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *notificationListByServicePager) PageResponse() NotificationListByServiceResponse {
	return p.current
}

type OpenIDConnectProviderListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current OpenIDConnectProviderListByServiceResponse.
	PageResponse() OpenIDConnectProviderListByServiceResponse
}

type openIDConnectProviderListByServicePager struct {
	client    *OpenIDConnectProviderClient
	current   OpenIDConnectProviderListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OpenIDConnectProviderListByServiceResponse) (*azcore.Request, error)
}

func (p *openIDConnectProviderListByServicePager) Err() error {
	return p.err
}

func (p *openIDConnectProviderListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OpenIDConnectProviderCollection.NextLink == nil || len(*p.current.OpenIDConnectProviderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *openIDConnectProviderListByServicePager) PageResponse() OpenIDConnectProviderListByServiceResponse {
	return p.current
}

type OperationListByTagsPager interface {
	azcore.Pager
	// PageResponse returns the current OperationListByTagsResponse.
	PageResponse() OperationListByTagsResponse
}

type operationListByTagsPager struct {
	client    *OperationClient
	current   OperationListByTagsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationListByTagsResponse) (*azcore.Request, error)
}

func (p *operationListByTagsPager) Err() error {
	return p.err
}

func (p *operationListByTagsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagResourceCollection.NextLink == nil || len(*p.current.TagResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTagsHandleError(resp)
		return false
	}
	result, err := p.client.listByTagsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListByTagsPager) PageResponse() OperationListByTagsResponse {
	return p.current
}

type PortalRevisionListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current PortalRevisionListByServiceResponse.
	PageResponse() PortalRevisionListByServiceResponse
}

type portalRevisionListByServicePager struct {
	client    *PortalRevisionClient
	current   PortalRevisionListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PortalRevisionListByServiceResponse) (*azcore.Request, error)
}

func (p *portalRevisionListByServicePager) Err() error {
	return p.err
}

func (p *portalRevisionListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PortalRevisionCollection.NextLink == nil || len(*p.current.PortalRevisionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *portalRevisionListByServicePager) PageResponse() PortalRevisionListByServiceResponse {
	return p.current
}

type ProductAPIListByProductPager interface {
	azcore.Pager
	// PageResponse returns the current ProductAPIListByProductResponse.
	PageResponse() ProductAPIListByProductResponse
}

type productAPIListByProductPager struct {
	client    *ProductAPIClient
	current   ProductAPIListByProductResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProductAPIListByProductResponse) (*azcore.Request, error)
}

func (p *productAPIListByProductPager) Err() error {
	return p.err
}

func (p *productAPIListByProductPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APICollection.NextLink == nil || len(*p.current.APICollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProductHandleError(resp)
		return false
	}
	result, err := p.client.listByProductHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *productAPIListByProductPager) PageResponse() ProductAPIListByProductResponse {
	return p.current
}

type ProductGroupListByProductPager interface {
	azcore.Pager
	// PageResponse returns the current ProductGroupListByProductResponse.
	PageResponse() ProductGroupListByProductResponse
}

type productGroupListByProductPager struct {
	client    *ProductGroupClient
	current   ProductGroupListByProductResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProductGroupListByProductResponse) (*azcore.Request, error)
}

func (p *productGroupListByProductPager) Err() error {
	return p.err
}

func (p *productGroupListByProductPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GroupCollection.NextLink == nil || len(*p.current.GroupCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProductHandleError(resp)
		return false
	}
	result, err := p.client.listByProductHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *productGroupListByProductPager) PageResponse() ProductGroupListByProductResponse {
	return p.current
}

type ProductListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current ProductListByServiceResponse.
	PageResponse() ProductListByServiceResponse
}

type productListByServicePager struct {
	client    *ProductClient
	current   ProductListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProductListByServiceResponse) (*azcore.Request, error)
}

func (p *productListByServicePager) Err() error {
	return p.err
}

func (p *productListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductCollection.NextLink == nil || len(*p.current.ProductCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *productListByServicePager) PageResponse() ProductListByServiceResponse {
	return p.current
}

type ProductListByTagsPager interface {
	azcore.Pager
	// PageResponse returns the current ProductListByTagsResponse.
	PageResponse() ProductListByTagsResponse
}

type productListByTagsPager struct {
	client    *ProductClient
	current   ProductListByTagsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProductListByTagsResponse) (*azcore.Request, error)
}

func (p *productListByTagsPager) Err() error {
	return p.err
}

func (p *productListByTagsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagResourceCollection.NextLink == nil || len(*p.current.TagResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTagsHandleError(resp)
		return false
	}
	result, err := p.client.listByTagsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *productListByTagsPager) PageResponse() ProductListByTagsResponse {
	return p.current
}

type ProductSubscriptionsListPager interface {
	azcore.Pager
	// PageResponse returns the current ProductSubscriptionsListResponse.
	PageResponse() ProductSubscriptionsListResponse
}

type productSubscriptionsListPager struct {
	client    *ProductSubscriptionsClient
	current   ProductSubscriptionsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProductSubscriptionsListResponse) (*azcore.Request, error)
}

func (p *productSubscriptionsListPager) Err() error {
	return p.err
}

func (p *productSubscriptionsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SubscriptionCollection.NextLink == nil || len(*p.current.SubscriptionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *productSubscriptionsListPager) PageResponse() ProductSubscriptionsListResponse {
	return p.current
}

type RegionListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current RegionListByServiceResponse.
	PageResponse() RegionListByServiceResponse
}

type regionListByServicePager struct {
	client    *RegionClient
	current   RegionListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RegionListByServiceResponse) (*azcore.Request, error)
}

func (p *regionListByServicePager) Err() error {
	return p.err
}

func (p *regionListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegionListResult.NextLink == nil || len(*p.current.RegionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *regionListByServicePager) PageResponse() RegionListByServiceResponse {
	return p.current
}

type ReportsListByAPIPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByAPIResponse.
	PageResponse() ReportsListByAPIResponse
}

type reportsListByAPIPager struct {
	client    *ReportsClient
	current   ReportsListByAPIResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByAPIResponse) (*azcore.Request, error)
}

func (p *reportsListByAPIPager) Err() error {
	return p.err
}

func (p *reportsListByAPIPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAPIHandleError(resp)
		return false
	}
	result, err := p.client.listByAPIHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByAPIPager) PageResponse() ReportsListByAPIResponse {
	return p.current
}

type ReportsListByGeoPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByGeoResponse.
	PageResponse() ReportsListByGeoResponse
}

type reportsListByGeoPager struct {
	client    *ReportsClient
	current   ReportsListByGeoResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByGeoResponse) (*azcore.Request, error)
}

func (p *reportsListByGeoPager) Err() error {
	return p.err
}

func (p *reportsListByGeoPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByGeoHandleError(resp)
		return false
	}
	result, err := p.client.listByGeoHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByGeoPager) PageResponse() ReportsListByGeoResponse {
	return p.current
}

type ReportsListByOperationPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByOperationResponse.
	PageResponse() ReportsListByOperationResponse
}

type reportsListByOperationPager struct {
	client    *ReportsClient
	current   ReportsListByOperationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByOperationResponse) (*azcore.Request, error)
}

func (p *reportsListByOperationPager) Err() error {
	return p.err
}

func (p *reportsListByOperationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByOperationHandleError(resp)
		return false
	}
	result, err := p.client.listByOperationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByOperationPager) PageResponse() ReportsListByOperationResponse {
	return p.current
}

type ReportsListByProductPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByProductResponse.
	PageResponse() ReportsListByProductResponse
}

type reportsListByProductPager struct {
	client    *ReportsClient
	current   ReportsListByProductResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByProductResponse) (*azcore.Request, error)
}

func (p *reportsListByProductPager) Err() error {
	return p.err
}

func (p *reportsListByProductPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProductHandleError(resp)
		return false
	}
	result, err := p.client.listByProductHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByProductPager) PageResponse() ReportsListByProductResponse {
	return p.current
}

type ReportsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListBySubscriptionResponse.
	PageResponse() ReportsListBySubscriptionResponse
}

type reportsListBySubscriptionPager struct {
	client    *ReportsClient
	current   ReportsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *reportsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *reportsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListBySubscriptionPager) PageResponse() ReportsListBySubscriptionResponse {
	return p.current
}

type ReportsListByTimePager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByTimeResponse.
	PageResponse() ReportsListByTimeResponse
}

type reportsListByTimePager struct {
	client    *ReportsClient
	current   ReportsListByTimeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByTimeResponse) (*azcore.Request, error)
}

func (p *reportsListByTimePager) Err() error {
	return p.err
}

func (p *reportsListByTimePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByTimeHandleError(resp)
		return false
	}
	result, err := p.client.listByTimeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByTimePager) PageResponse() ReportsListByTimeResponse {
	return p.current
}

type ReportsListByUserPager interface {
	azcore.Pager
	// PageResponse returns the current ReportsListByUserResponse.
	PageResponse() ReportsListByUserResponse
}

type reportsListByUserPager struct {
	client    *ReportsClient
	current   ReportsListByUserResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ReportsListByUserResponse) (*azcore.Request, error)
}

func (p *reportsListByUserPager) Err() error {
	return p.err
}

func (p *reportsListByUserPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReportCollection.NextLink == nil || len(*p.current.ReportCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByUserHandleError(resp)
		return false
	}
	result, err := p.client.listByUserHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *reportsListByUserPager) PageResponse() ReportsListByUserResponse {
	return p.current
}

type SubscriptionListPager interface {
	azcore.Pager
	// PageResponse returns the current SubscriptionListResponse.
	PageResponse() SubscriptionListResponse
}

type subscriptionListPager struct {
	client    *SubscriptionClient
	current   SubscriptionListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SubscriptionListResponse) (*azcore.Request, error)
}

func (p *subscriptionListPager) Err() error {
	return p.err
}

func (p *subscriptionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SubscriptionCollection.NextLink == nil || len(*p.current.SubscriptionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *subscriptionListPager) PageResponse() SubscriptionListResponse {
	return p.current
}

type TagListByAPIPager interface {
	azcore.Pager
	// PageResponse returns the current TagListByAPIResponse.
	PageResponse() TagListByAPIResponse
}

type tagListByAPIPager struct {
	client    *TagClient
	current   TagListByAPIResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TagListByAPIResponse) (*azcore.Request, error)
}

func (p *tagListByAPIPager) Err() error {
	return p.err
}

func (p *tagListByAPIPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagCollection.NextLink == nil || len(*p.current.TagCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByAPIHandleError(resp)
		return false
	}
	result, err := p.client.listByAPIHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tagListByAPIPager) PageResponse() TagListByAPIResponse {
	return p.current
}

type TagListByOperationPager interface {
	azcore.Pager
	// PageResponse returns the current TagListByOperationResponse.
	PageResponse() TagListByOperationResponse
}

type tagListByOperationPager struct {
	client    *TagClient
	current   TagListByOperationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TagListByOperationResponse) (*azcore.Request, error)
}

func (p *tagListByOperationPager) Err() error {
	return p.err
}

func (p *tagListByOperationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagCollection.NextLink == nil || len(*p.current.TagCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByOperationHandleError(resp)
		return false
	}
	result, err := p.client.listByOperationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tagListByOperationPager) PageResponse() TagListByOperationResponse {
	return p.current
}

type TagListByProductPager interface {
	azcore.Pager
	// PageResponse returns the current TagListByProductResponse.
	PageResponse() TagListByProductResponse
}

type tagListByProductPager struct {
	client    *TagClient
	current   TagListByProductResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TagListByProductResponse) (*azcore.Request, error)
}

func (p *tagListByProductPager) Err() error {
	return p.err
}

func (p *tagListByProductPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagCollection.NextLink == nil || len(*p.current.TagCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByProductHandleError(resp)
		return false
	}
	result, err := p.client.listByProductHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tagListByProductPager) PageResponse() TagListByProductResponse {
	return p.current
}

type TagListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current TagListByServiceResponse.
	PageResponse() TagListByServiceResponse
}

type tagListByServicePager struct {
	client    *TagClient
	current   TagListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TagListByServiceResponse) (*azcore.Request, error)
}

func (p *tagListByServicePager) Err() error {
	return p.err
}

func (p *tagListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagCollection.NextLink == nil || len(*p.current.TagCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tagListByServicePager) PageResponse() TagListByServiceResponse {
	return p.current
}

type TagResourceListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current TagResourceListByServiceResponse.
	PageResponse() TagResourceListByServiceResponse
}

type tagResourceListByServicePager struct {
	client    *TagResourceClient
	current   TagResourceListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TagResourceListByServiceResponse) (*azcore.Request, error)
}

func (p *tagResourceListByServicePager) Err() error {
	return p.err
}

func (p *tagResourceListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TagResourceCollection.NextLink == nil || len(*p.current.TagResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tagResourceListByServicePager) PageResponse() TagResourceListByServiceResponse {
	return p.current
}

type TenantAccessListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current TenantAccessListByServiceResponse.
	PageResponse() TenantAccessListByServiceResponse
}

type tenantAccessListByServicePager struct {
	client    *TenantAccessClient
	current   TenantAccessListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TenantAccessListByServiceResponse) (*azcore.Request, error)
}

func (p *tenantAccessListByServicePager) Err() error {
	return p.err
}

func (p *tenantAccessListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccessInformationCollection.NextLink == nil || len(*p.current.AccessInformationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tenantAccessListByServicePager) PageResponse() TenantAccessListByServiceResponse {
	return p.current
}

type TenantSettingsListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current TenantSettingsListByServiceResponse.
	PageResponse() TenantSettingsListByServiceResponse
}

type tenantSettingsListByServicePager struct {
	client    *TenantSettingsClient
	current   TenantSettingsListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TenantSettingsListByServiceResponse) (*azcore.Request, error)
}

func (p *tenantSettingsListByServicePager) Err() error {
	return p.err
}

func (p *tenantSettingsListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TenantSettingsCollection.NextLink == nil || len(*p.current.TenantSettingsCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *tenantSettingsListByServicePager) PageResponse() TenantSettingsListByServiceResponse {
	return p.current
}

type UserGroupListPager interface {
	azcore.Pager
	// PageResponse returns the current UserGroupListResponse.
	PageResponse() UserGroupListResponse
}

type userGroupListPager struct {
	client    *UserGroupClient
	current   UserGroupListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UserGroupListResponse) (*azcore.Request, error)
}

func (p *userGroupListPager) Err() error {
	return p.err
}

func (p *userGroupListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GroupCollection.NextLink == nil || len(*p.current.GroupCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *userGroupListPager) PageResponse() UserGroupListResponse {
	return p.current
}

type UserIdentitiesListPager interface {
	azcore.Pager
	// PageResponse returns the current UserIdentitiesListResponse.
	PageResponse() UserIdentitiesListResponse
}

type userIdentitiesListPager struct {
	client    *UserIdentitiesClient
	current   UserIdentitiesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UserIdentitiesListResponse) (*azcore.Request, error)
}

func (p *userIdentitiesListPager) Err() error {
	return p.err
}

func (p *userIdentitiesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserIdentityCollection.NextLink == nil || len(*p.current.UserIdentityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *userIdentitiesListPager) PageResponse() UserIdentitiesListResponse {
	return p.current
}

type UserListByServicePager interface {
	azcore.Pager
	// PageResponse returns the current UserListByServiceResponse.
	PageResponse() UserListByServiceResponse
}

type userListByServicePager struct {
	client    *UserClient
	current   UserListByServiceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UserListByServiceResponse) (*azcore.Request, error)
}

func (p *userListByServicePager) Err() error {
	return p.err
}

func (p *userListByServicePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserCollection.NextLink == nil || len(*p.current.UserCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServiceHandleError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *userListByServicePager) PageResponse() UserListByServiceResponse {
	return p.current
}

type UserSubscriptionListPager interface {
	azcore.Pager
	// PageResponse returns the current UserSubscriptionListResponse.
	PageResponse() UserSubscriptionListResponse
}

type userSubscriptionListPager struct {
	client    *UserSubscriptionClient
	current   UserSubscriptionListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, UserSubscriptionListResponse) (*azcore.Request, error)
}

func (p *userSubscriptionListPager) Err() error {
	return p.err
}

func (p *userSubscriptionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SubscriptionCollection.NextLink == nil || len(*p.current.SubscriptionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *userSubscriptionListPager) PageResponse() UserSubscriptionListResponse {
	return p.current
}
