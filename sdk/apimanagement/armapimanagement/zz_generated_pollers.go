// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapimanagement

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// APICreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type APICreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APICreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (APICreateOrUpdateResponse, error)
}

type apiCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *apiCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiCreateOrUpdatePoller) FinalResponse(ctx context.Context) (APICreateOrUpdateResponse, error) {
	respType := APICreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIContract)
	if err != nil {
		return APICreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APICreateOrUpdateResponse, error) {
	respType := APICreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIContract)
	if err != nil {
		return APICreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceApplyNetworkConfigurationUpdatesPoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceApplyNetworkConfigurationUpdatesPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceApplyNetworkConfigurationUpdatesResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceApplyNetworkConfigurationUpdatesResponse, error)
}

type apiManagementServiceApplyNetworkConfigurationUpdatesPoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceApplyNetworkConfigurationUpdatesPoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceApplyNetworkConfigurationUpdatesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceApplyNetworkConfigurationUpdatesPoller) FinalResponse(ctx context.Context) (APIManagementServiceApplyNetworkConfigurationUpdatesResponse, error) {
	respType := APIManagementServiceApplyNetworkConfigurationUpdatesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceApplyNetworkConfigurationUpdatesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceApplyNetworkConfigurationUpdatesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceApplyNetworkConfigurationUpdatesPoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceApplyNetworkConfigurationUpdatesResponse, error) {
	respType := APIManagementServiceApplyNetworkConfigurationUpdatesResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceApplyNetworkConfigurationUpdatesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceBackupPoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceBackupPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceBackupResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceBackupResponse, error)
}

type apiManagementServiceBackupPoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceBackupPoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceBackupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceBackupPoller) FinalResponse(ctx context.Context) (APIManagementServiceBackupResponse, error) {
	respType := APIManagementServiceBackupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceBackupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceBackupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceBackupPoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceBackupResponse, error) {
	respType := APIManagementServiceBackupResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceBackupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceCreateOrUpdateResponse, error)
}

type apiManagementServiceCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceCreateOrUpdatePoller) FinalResponse(ctx context.Context) (APIManagementServiceCreateOrUpdateResponse, error) {
	respType := APIManagementServiceCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceCreateOrUpdateResponse, error) {
	respType := APIManagementServiceCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceDeletePoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceDeleteResponse, error)
}

type apiManagementServiceDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceDeletePoller) FinalResponse(ctx context.Context) (APIManagementServiceDeleteResponse, error) {
	respType := APIManagementServiceDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceDeleteResponse, error) {
	respType := APIManagementServiceDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceRestorePoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceRestorePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceRestoreResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceRestoreResponse, error)
}

type apiManagementServiceRestorePoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceRestorePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceRestorePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceRestorePoller) FinalResponse(ctx context.Context) (APIManagementServiceRestoreResponse, error) {
	respType := APIManagementServiceRestoreResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceRestoreResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceRestorePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceRestorePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceRestoreResponse, error) {
	respType := APIManagementServiceRestoreResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceRestoreResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APIManagementServiceUpdatePoller provides polling facilities until the operation reaches a terminal state.
type APIManagementServiceUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APIManagementServiceUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (APIManagementServiceUpdateResponse, error)
}

type apiManagementServiceUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *apiManagementServiceUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiManagementServiceUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiManagementServiceUpdatePoller) FinalResponse(ctx context.Context) (APIManagementServiceUpdateResponse, error) {
	respType := APIManagementServiceUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiManagementServiceUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiManagementServiceUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APIManagementServiceUpdateResponse, error) {
	respType := APIManagementServiceUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.APIManagementServiceResource)
	if err != nil {
		return APIManagementServiceUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// APISchemaCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type APISchemaCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final APISchemaCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (APISchemaCreateOrUpdateResponse, error)
}

type apiSchemaCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *apiSchemaCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *apiSchemaCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *apiSchemaCreateOrUpdatePoller) FinalResponse(ctx context.Context) (APISchemaCreateOrUpdateResponse, error) {
	respType := APISchemaCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SchemaContract)
	if err != nil {
		return APISchemaCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *apiSchemaCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *apiSchemaCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (APISchemaCreateOrUpdateResponse, error) {
	respType := APISchemaCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.SchemaContract)
	if err != nil {
		return APISchemaCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DeletedServicesPurgePoller provides polling facilities until the operation reaches a terminal state.
type DeletedServicesPurgePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DeletedServicesPurgeResponse will be returned.
	FinalResponse(ctx context.Context) (DeletedServicesPurgeResponse, error)
}

type deletedServicesPurgePoller struct {
	pt *armcore.LROPoller
}

func (p *deletedServicesPurgePoller) Done() bool {
	return p.pt.Done()
}

func (p *deletedServicesPurgePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *deletedServicesPurgePoller) FinalResponse(ctx context.Context) (DeletedServicesPurgeResponse, error) {
	respType := DeletedServicesPurgeResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DeletedServiceContract)
	if err != nil {
		return DeletedServicesPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *deletedServicesPurgePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *deletedServicesPurgePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DeletedServicesPurgeResponse, error) {
	respType := DeletedServicesPurgeResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.DeletedServiceContract)
	if err != nil {
		return DeletedServicesPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// NamedValueCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type NamedValueCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final NamedValueCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (NamedValueCreateOrUpdateResponse, error)
}

type namedValueCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *namedValueCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *namedValueCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *namedValueCreateOrUpdatePoller) FinalResponse(ctx context.Context) (NamedValueCreateOrUpdateResponse, error) {
	respType := NamedValueCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NamedValueContract)
	if err != nil {
		return NamedValueCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *namedValueCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *namedValueCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (NamedValueCreateOrUpdateResponse, error) {
	respType := NamedValueCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.NamedValueContract)
	if err != nil {
		return NamedValueCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// NamedValueRefreshSecretPoller provides polling facilities until the operation reaches a terminal state.
type NamedValueRefreshSecretPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final NamedValueRefreshSecretResponse will be returned.
	FinalResponse(ctx context.Context) (NamedValueRefreshSecretResponse, error)
}

type namedValueRefreshSecretPoller struct {
	pt *armcore.LROPoller
}

func (p *namedValueRefreshSecretPoller) Done() bool {
	return p.pt.Done()
}

func (p *namedValueRefreshSecretPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *namedValueRefreshSecretPoller) FinalResponse(ctx context.Context) (NamedValueRefreshSecretResponse, error) {
	respType := NamedValueRefreshSecretResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NamedValueContract)
	if err != nil {
		return NamedValueRefreshSecretResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *namedValueRefreshSecretPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *namedValueRefreshSecretPoller) pollUntilDone(ctx context.Context, freq time.Duration) (NamedValueRefreshSecretResponse, error) {
	respType := NamedValueRefreshSecretResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.NamedValueContract)
	if err != nil {
		return NamedValueRefreshSecretResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// NamedValueUpdatePoller provides polling facilities until the operation reaches a terminal state.
type NamedValueUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final NamedValueUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (NamedValueUpdateResponse, error)
}

type namedValueUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *namedValueUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *namedValueUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *namedValueUpdatePoller) FinalResponse(ctx context.Context) (NamedValueUpdateResponse, error) {
	respType := NamedValueUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NamedValueContract)
	if err != nil {
		return NamedValueUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *namedValueUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *namedValueUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (NamedValueUpdateResponse, error) {
	respType := NamedValueUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.NamedValueContract)
	if err != nil {
		return NamedValueUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PortalRevisionCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PortalRevisionCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PortalRevisionCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (PortalRevisionCreateOrUpdateResponse, error)
}

type portalRevisionCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *portalRevisionCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *portalRevisionCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *portalRevisionCreateOrUpdatePoller) FinalResponse(ctx context.Context) (PortalRevisionCreateOrUpdateResponse, error) {
	respType := PortalRevisionCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PortalRevisionContract)
	if err != nil {
		return PortalRevisionCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *portalRevisionCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *portalRevisionCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PortalRevisionCreateOrUpdateResponse, error) {
	respType := PortalRevisionCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.PortalRevisionContract)
	if err != nil {
		return PortalRevisionCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PortalRevisionUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PortalRevisionUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PortalRevisionUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (PortalRevisionUpdateResponse, error)
}

type portalRevisionUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *portalRevisionUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *portalRevisionUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *portalRevisionUpdatePoller) FinalResponse(ctx context.Context) (PortalRevisionUpdateResponse, error) {
	respType := PortalRevisionUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PortalRevisionContract)
	if err != nil {
		return PortalRevisionUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *portalRevisionUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *portalRevisionUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PortalRevisionUpdateResponse, error) {
	respType := PortalRevisionUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.PortalRevisionContract)
	if err != nil {
		return PortalRevisionUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// TenantConfigurationDeployPoller provides polling facilities until the operation reaches a terminal state.
type TenantConfigurationDeployPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final TenantConfigurationDeployResponse will be returned.
	FinalResponse(ctx context.Context) (TenantConfigurationDeployResponse, error)
}

type tenantConfigurationDeployPoller struct {
	pt *armcore.LROPoller
}

func (p *tenantConfigurationDeployPoller) Done() bool {
	return p.pt.Done()
}

func (p *tenantConfigurationDeployPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *tenantConfigurationDeployPoller) FinalResponse(ctx context.Context) (TenantConfigurationDeployResponse, error) {
	respType := TenantConfigurationDeployResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationDeployResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *tenantConfigurationDeployPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *tenantConfigurationDeployPoller) pollUntilDone(ctx context.Context, freq time.Duration) (TenantConfigurationDeployResponse, error) {
	respType := TenantConfigurationDeployResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationDeployResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// TenantConfigurationSavePoller provides polling facilities until the operation reaches a terminal state.
type TenantConfigurationSavePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final TenantConfigurationSaveResponse will be returned.
	FinalResponse(ctx context.Context) (TenantConfigurationSaveResponse, error)
}

type tenantConfigurationSavePoller struct {
	pt *armcore.LROPoller
}

func (p *tenantConfigurationSavePoller) Done() bool {
	return p.pt.Done()
}

func (p *tenantConfigurationSavePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *tenantConfigurationSavePoller) FinalResponse(ctx context.Context) (TenantConfigurationSaveResponse, error) {
	respType := TenantConfigurationSaveResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationSaveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *tenantConfigurationSavePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *tenantConfigurationSavePoller) pollUntilDone(ctx context.Context, freq time.Duration) (TenantConfigurationSaveResponse, error) {
	respType := TenantConfigurationSaveResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationSaveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// TenantConfigurationValidatePoller provides polling facilities until the operation reaches a terminal state.
type TenantConfigurationValidatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final TenantConfigurationValidateResponse will be returned.
	FinalResponse(ctx context.Context) (TenantConfigurationValidateResponse, error)
}

type tenantConfigurationValidatePoller struct {
	pt *armcore.LROPoller
}

func (p *tenantConfigurationValidatePoller) Done() bool {
	return p.pt.Done()
}

func (p *tenantConfigurationValidatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *tenantConfigurationValidatePoller) FinalResponse(ctx context.Context) (TenantConfigurationValidateResponse, error) {
	respType := TenantConfigurationValidateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationValidateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *tenantConfigurationValidatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *tenantConfigurationValidatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (TenantConfigurationValidateResponse, error) {
	respType := TenantConfigurationValidateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.OperationResultContract)
	if err != nil {
		return TenantConfigurationValidateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
