// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// Operations contains the methods for the Operations group.
type Operations interface {
	// CheckNameAvailability - Checks whether the configuration store name is available for use.
	CheckNameAvailability(ctx context.Context, checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*NameAvailabilityStatusResponse, error)
	// List - Lists the operations available from this provider.
	List(operationsListOptions *OperationsListOptions) (OperationDefinitionListResultPager, error)
}

// operations implements the Operations interface.
type operations struct {
	*Client
	subscriptionID string
}

// CheckNameAvailability - Checks whether the configuration store name is available for use.
func (client *operations) CheckNameAvailability(ctx context.Context, checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*NameAvailabilityStatusResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(checkNameAvailabilityParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *operations) checkNameAvailabilityCreateRequest(checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-10-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(checkNameAvailabilityParameters)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *operations) checkNameAvailabilityHandleResponse(resp *azcore.Response) (*NameAvailabilityStatusResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.checkNameAvailabilityHandleError(resp)
	}
	result := NameAvailabilityStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NameAvailabilityStatus)
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *operations) checkNameAvailabilityHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Lists the operations available from this provider.
func (client *operations) List(operationsListOptions *OperationsListOptions) (OperationDefinitionListResultPager, error) {
	req, err := client.listCreateRequest(operationsListOptions)
	if err != nil {
		return nil, err
	}
	return &operationDefinitionListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *OperationDefinitionListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.OperationDefinitionListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.OperationDefinitionListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *operations) listCreateRequest(operationsListOptions *OperationsListOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.AppConfiguration/operations"
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-10-01")
	if operationsListOptions != nil && operationsListOptions.SkipToken != nil {
		query.Set("$skipToken", *operationsListOptions.SkipToken)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *operations) listHandleResponse(resp *azcore.Response) (*OperationDefinitionListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := OperationDefinitionListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.OperationDefinitionListResult)
}

// listHandleError handles the List error response.
func (client *operations) listHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
