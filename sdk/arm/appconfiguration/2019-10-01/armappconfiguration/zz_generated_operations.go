// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// Operations contains the methods for the Operations group.
type Operations interface {
	// CheckNameAvailability - Checks whether the configuration store name is available for use.
	CheckNameAvailability(ctx context.Context, checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*NameAvailabilityStatusResponse, error)
	// List - Lists the operations available from this provider.
	List(operationsListOptions *OperationsListOptions) OperationDefinitionListResultPager
}

// OperationsClient implements the Operations interface.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient struct {
	*Client
	subscriptionID string
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(c *Client, subscriptionID string) Operations {
	return &OperationsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *OperationsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CheckNameAvailability - Checks whether the configuration store name is available for use.
func (client *OperationsClient) CheckNameAvailability(ctx context.Context, checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*NameAvailabilityStatusResponse, error) {
	req, err := client.CheckNameAvailabilityCreateRequest(ctx, checkNameAvailabilityParameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CheckNameAvailabilityHandleError(resp)
	}
	result, err := client.CheckNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CheckNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *OperationsClient) CheckNameAvailabilityCreateRequest(ctx context.Context, checkNameAvailabilityParameters CheckNameAvailabilityParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-10-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(checkNameAvailabilityParameters)
}

// CheckNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *OperationsClient) CheckNameAvailabilityHandleResponse(resp *azcore.Response) (*NameAvailabilityStatusResponse, error) {
	result := NameAvailabilityStatusResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NameAvailabilityStatus)
}

// CheckNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *OperationsClient) CheckNameAvailabilityHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Lists the operations available from this provider.
func (client *OperationsClient) List(operationsListOptions *OperationsListOptions) OperationDefinitionListResultPager {
	return &operationDefinitionListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, operationsListOptions)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *OperationDefinitionListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.OperationDefinitionListResult.NextLink)
		},
	}
}

// ListCreateRequest creates the List request.
func (client *OperationsClient) ListCreateRequest(ctx context.Context, operationsListOptions *OperationsListOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.AppConfiguration/operations"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-10-01")
	if operationsListOptions != nil && operationsListOptions.SkipToken != nil {
		query.Set("$skipToken", *operationsListOptions.SkipToken)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *OperationsClient) ListHandleResponse(resp *azcore.Response) (*OperationDefinitionListResultResponse, error) {
	result := OperationDefinitionListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.OperationDefinitionListResult)
}

// ListHandleError handles the List error response.
func (client *OperationsClient) ListHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
