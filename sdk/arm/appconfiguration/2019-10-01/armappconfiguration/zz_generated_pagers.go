// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// APIKeyListResultPager provides iteration over APIKeyListResult pages.
type APIKeyListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current APIKeyListResultResponse.
	PageResponse() *APIKeyListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type apiKeyListResultCreateRequest func(context.Context) (*azcore.Request, error)

type apiKeyListResultHandleError func(*azcore.Response) error

type apiKeyListResultHandleResponse func(*azcore.Response) (*APIKeyListResultResponse, error)

type apiKeyListResultAdvancePage func(context.Context, *APIKeyListResultResponse) (*azcore.Request, error)

type apiKeyListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester apiKeyListResultCreateRequest
	// callback for handling response errors
	errorer apiKeyListResultHandleError
	// callback for handling the HTTP response
	responder apiKeyListResultHandleResponse
	// callback for advancing to the next page
	advancer apiKeyListResultAdvancePage
	// contains the current response
	current *APIKeyListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *apiKeyListResultPager) Err() error {
	return p.err
}

func (p *apiKeyListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.APIKeyListResult.NextLink == nil || len(*p.current.APIKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *apiKeyListResultPager) PageResponse() *APIKeyListResultResponse {
	return p.current
}

// ConfigurationStoreListResultPager provides iteration over ConfigurationStoreListResult pages.
type ConfigurationStoreListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current ConfigurationStoreListResultResponse.
	PageResponse() *ConfigurationStoreListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type configurationStoreListResultCreateRequest func(context.Context) (*azcore.Request, error)

type configurationStoreListResultHandleError func(*azcore.Response) error

type configurationStoreListResultHandleResponse func(*azcore.Response) (*ConfigurationStoreListResultResponse, error)

type configurationStoreListResultAdvancePage func(context.Context, *ConfigurationStoreListResultResponse) (*azcore.Request, error)

type configurationStoreListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester configurationStoreListResultCreateRequest
	// callback for handling response errors
	errorer configurationStoreListResultHandleError
	// callback for handling the HTTP response
	responder configurationStoreListResultHandleResponse
	// callback for advancing to the next page
	advancer configurationStoreListResultAdvancePage
	// contains the current response
	current *ConfigurationStoreListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *configurationStoreListResultPager) Err() error {
	return p.err
}

func (p *configurationStoreListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.ConfigurationStoreListResult.NextLink == nil || len(*p.current.ConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *configurationStoreListResultPager) PageResponse() *ConfigurationStoreListResultResponse {
	return p.current
}

// OperationDefinitionListResultPager provides iteration over OperationDefinitionListResult pages.
type OperationDefinitionListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current OperationDefinitionListResultResponse.
	PageResponse() *OperationDefinitionListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type operationDefinitionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type operationDefinitionListResultHandleError func(*azcore.Response) error

type operationDefinitionListResultHandleResponse func(*azcore.Response) (*OperationDefinitionListResultResponse, error)

type operationDefinitionListResultAdvancePage func(context.Context, *OperationDefinitionListResultResponse) (*azcore.Request, error)

type operationDefinitionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationDefinitionListResultCreateRequest
	// callback for handling response errors
	errorer operationDefinitionListResultHandleError
	// callback for handling the HTTP response
	responder operationDefinitionListResultHandleResponse
	// callback for advancing to the next page
	advancer operationDefinitionListResultAdvancePage
	// contains the current response
	current *OperationDefinitionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationDefinitionListResultPager) Err() error {
	return p.err
}

func (p *operationDefinitionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.OperationDefinitionListResult.NextLink == nil || len(*p.current.OperationDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationDefinitionListResultPager) PageResponse() *OperationDefinitionListResultResponse {
	return p.current
}
