// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// LogAnalyticsOperations contains the methods for the LogAnalytics group.
type LogAnalyticsOperations interface {
	// BeginExportRequestRateByInterval - Export logs that show Api requests made by this subscription in the given time window to show throttling activities.
	BeginExportRequestRateByInterval(ctx context.Context, location string, parameters RequestRateByIntervalInput) (*LogAnalyticsOperationResultPollerResponse, error)
	// ResumeExportRequestRateByInterval - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeExportRequestRateByInterval(token string) (LogAnalyticsOperationResultPoller, error)
	// BeginExportThrottledRequests - Export logs that show total throttled Api requests for this subscription in the given time window.
	BeginExportThrottledRequests(ctx context.Context, location string, parameters LogAnalyticsInputBase) (*LogAnalyticsOperationResultPollerResponse, error)
	// ResumeExportThrottledRequests - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeExportThrottledRequests(token string) (LogAnalyticsOperationResultPoller, error)
}

// logAnalyticsOperations implements the LogAnalyticsOperations interface.
type logAnalyticsOperations struct {
	*Client
	subscriptionID string
}

// ExportRequestRateByInterval - Export logs that show Api requests made by this subscription in the given time window to show throttling activities.
func (client *logAnalyticsOperations) BeginExportRequestRateByInterval(ctx context.Context, location string, parameters RequestRateByIntervalInput) (*LogAnalyticsOperationResultPollerResponse, error) {
	req, err := client.exportRequestRateByIntervalCreateRequest(location, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.exportRequestRateByIntervalHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("logAnalyticsOperations.ExportRequestRateByInterval", "azure-async-operation", resp, client.exportRequestRateByIntervalHandleError)
	if err != nil {
		return nil, err
	}
	poller := &logAnalyticsOperationResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*LogAnalyticsOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *logAnalyticsOperations) ResumeExportRequestRateByInterval(token string) (LogAnalyticsOperationResultPoller, error) {
	pt, err := resumePollingTracker("logAnalyticsOperations.ExportRequestRateByInterval", token, client.exportRequestRateByIntervalHandleError)
	if err != nil {
		return nil, err
	}
	return &logAnalyticsOperationResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// exportRequestRateByIntervalCreateRequest creates the ExportRequestRateByInterval request.
func (client *logAnalyticsOperations) exportRequestRateByIntervalCreateRequest(location string, parameters RequestRateByIntervalInput) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getRequestRateByInterval"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// exportRequestRateByIntervalHandleResponse handles the ExportRequestRateByInterval response.
func (client *logAnalyticsOperations) exportRequestRateByIntervalHandleResponse(resp *azcore.Response) (*LogAnalyticsOperationResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.exportRequestRateByIntervalHandleError(resp)
	}
	return &LogAnalyticsOperationResultPollerResponse{RawResponse: resp.Response}, nil
}

// exportRequestRateByIntervalHandleError handles the ExportRequestRateByInterval error response.
func (client *logAnalyticsOperations) exportRequestRateByIntervalHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ExportThrottledRequests - Export logs that show total throttled Api requests for this subscription in the given time window.
func (client *logAnalyticsOperations) BeginExportThrottledRequests(ctx context.Context, location string, parameters LogAnalyticsInputBase) (*LogAnalyticsOperationResultPollerResponse, error) {
	req, err := client.exportThrottledRequestsCreateRequest(location, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.exportThrottledRequestsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("logAnalyticsOperations.ExportThrottledRequests", "azure-async-operation", resp, client.exportThrottledRequestsHandleError)
	if err != nil {
		return nil, err
	}
	poller := &logAnalyticsOperationResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*LogAnalyticsOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *logAnalyticsOperations) ResumeExportThrottledRequests(token string) (LogAnalyticsOperationResultPoller, error) {
	pt, err := resumePollingTracker("logAnalyticsOperations.ExportThrottledRequests", token, client.exportThrottledRequestsHandleError)
	if err != nil {
		return nil, err
	}
	return &logAnalyticsOperationResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// exportThrottledRequestsCreateRequest creates the ExportThrottledRequests request.
func (client *logAnalyticsOperations) exportThrottledRequestsCreateRequest(location string, parameters LogAnalyticsInputBase) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/logAnalytics/apiAccess/getThrottledRequests"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// exportThrottledRequestsHandleResponse handles the ExportThrottledRequests response.
func (client *logAnalyticsOperations) exportThrottledRequestsHandleResponse(resp *azcore.Response) (*LogAnalyticsOperationResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.exportThrottledRequestsHandleError(resp)
	}
	return &LogAnalyticsOperationResultPollerResponse{RawResponse: resp.Response}, nil
}

// exportThrottledRequestsHandleError handles the ExportThrottledRequests error response.
func (client *logAnalyticsOperations) exportThrottledRequestsHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
