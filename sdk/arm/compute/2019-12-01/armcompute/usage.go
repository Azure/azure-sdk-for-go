// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// UsageOperations contains the methods for the Usage group.
type UsageOperations interface {
	// List - Gets, for the specified location, the current compute resource usage information as well as the limits for compute resources under the subscription.
	List(location string) (ListUsagesResultPager, error)
}

// usageOperations implements the UsageOperations interface.
type usageOperations struct {
	*Client
	subscriptionID string
}

// List - Gets, for the specified location, the current compute resource usage information as well as the limits for compute resources under the subscription.
func (client *usageOperations) List(location string) (ListUsagesResultPager, error) {
	req, err := client.listCreateRequest(location)
	if err != nil {
		return nil, err
	}
	return &listUsagesResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ListUsagesResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ListUsagesResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ListUsagesResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *usageOperations) listCreateRequest(location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/usages"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *usageOperations) listHandleResponse(resp *azcore.Response) (*ListUsagesResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ListUsagesResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ListUsagesResult)
}

// listHandleError handles the List error response.
func (client *usageOperations) listHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
