// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// VirtualMachineScaleSetRollingUpgradesOperations contains the methods for the VirtualMachineScaleSetRollingUpgrades group.
type VirtualMachineScaleSetRollingUpgradesOperations interface {
	// BeginCancel - Cancels the current virtual machine scale set rolling upgrade.
	BeginCancel(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error)
	// ResumeCancel - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCancel(token string) (HTTPPoller, error)
	// GetLatest - Gets the status of the latest virtual machine scale set rolling upgrade.
	GetLatest(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*RollingUpgradeStatusInfoResponse, error)
	// BeginStartExtensionUpgrade - Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the latest available extension version. Instances which are already running the latest extension versions are not affected.
	BeginStartExtensionUpgrade(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error)
	// ResumeStartExtensionUpgrade - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStartExtensionUpgrade(token string) (HTTPPoller, error)
	// BeginStartOSUpgrade - Starts a rolling upgrade to move all virtual machine scale set instances to the latest available Platform Image OS version. Instances which are already running the latest available OS version are not affected.
	BeginStartOSUpgrade(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error)
	// ResumeStartOSUpgrade - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStartOSUpgrade(token string) (HTTPPoller, error)
}

// virtualMachineScaleSetRollingUpgradesOperations implements the VirtualMachineScaleSetRollingUpgradesOperations interface.
type virtualMachineScaleSetRollingUpgradesOperations struct {
	*Client
	subscriptionID string
}

// Cancel - Cancels the current virtual machine scale set rolling upgrade.
func (client *virtualMachineScaleSetRollingUpgradesOperations) BeginCancel(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error) {
	req, err := client.cancelCreateRequest(resourceGroupName, vmScaleSetName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.cancelHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetRollingUpgradesOperations.Cancel", "", resp, client.cancelHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetRollingUpgradesOperations) ResumeCancel(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetRollingUpgradesOperations.Cancel", token, client.cancelHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// cancelCreateRequest creates the Cancel request.
func (client *virtualMachineScaleSetRollingUpgradesOperations) cancelCreateRequest(resourceGroupName string, vmScaleSetName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// cancelHandleResponse handles the Cancel response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) cancelHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.cancelHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// cancelHandleError handles the Cancel error response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) cancelHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GetLatest - Gets the status of the latest virtual machine scale set rolling upgrade.
func (client *virtualMachineScaleSetRollingUpgradesOperations) GetLatest(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*RollingUpgradeStatusInfoResponse, error) {
	req, err := client.getLatestCreateRequest(resourceGroupName, vmScaleSetName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLatestHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getLatestCreateRequest creates the GetLatest request.
func (client *virtualMachineScaleSetRollingUpgradesOperations) getLatestCreateRequest(resourceGroupName string, vmScaleSetName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/rollingUpgrades/latest"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getLatestHandleResponse handles the GetLatest response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) getLatestHandleResponse(resp *azcore.Response) (*RollingUpgradeStatusInfoResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getLatestHandleError(resp)
	}
	result := RollingUpgradeStatusInfoResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.RollingUpgradeStatusInfo)
}

// getLatestHandleError handles the GetLatest error response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) getLatestHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// StartExtensionUpgrade - Starts a rolling upgrade to move all extensions for all virtual machine scale set instances to the latest available extension version. Instances which are already running the latest extension versions are not affected.
func (client *virtualMachineScaleSetRollingUpgradesOperations) BeginStartExtensionUpgrade(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error) {
	req, err := client.startExtensionUpgradeCreateRequest(resourceGroupName, vmScaleSetName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startExtensionUpgradeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetRollingUpgradesOperations.StartExtensionUpgrade", "", resp, client.startExtensionUpgradeHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetRollingUpgradesOperations) ResumeStartExtensionUpgrade(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetRollingUpgradesOperations.StartExtensionUpgrade", token, client.startExtensionUpgradeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// startExtensionUpgradeCreateRequest creates the StartExtensionUpgrade request.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startExtensionUpgradeCreateRequest(resourceGroupName string, vmScaleSetName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/extensionRollingUpgrade"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// startExtensionUpgradeHandleResponse handles the StartExtensionUpgrade response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startExtensionUpgradeHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.startExtensionUpgradeHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// startExtensionUpgradeHandleError handles the StartExtensionUpgrade error response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startExtensionUpgradeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// StartOSUpgrade - Starts a rolling upgrade to move all virtual machine scale set instances to the latest available Platform Image OS version. Instances which are already running the latest available OS version are not affected.
func (client *virtualMachineScaleSetRollingUpgradesOperations) BeginStartOSUpgrade(ctx context.Context, resourceGroupName string, vmScaleSetName string) (*HTTPResponse, error) {
	req, err := client.startOSUpgradeCreateRequest(resourceGroupName, vmScaleSetName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startOSUpgradeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetRollingUpgradesOperations.StartOSUpgrade", "", resp, client.startOSUpgradeHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetRollingUpgradesOperations) ResumeStartOSUpgrade(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetRollingUpgradesOperations.StartOSUpgrade", token, client.startOSUpgradeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// startOSUpgradeCreateRequest creates the StartOSUpgrade request.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startOSUpgradeCreateRequest(resourceGroupName string, vmScaleSetName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/osRollingUpgrade"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// startOSUpgradeHandleResponse handles the StartOSUpgrade response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startOSUpgradeHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.startOSUpgradeHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// startOSUpgradeHandleError handles the StartOSUpgrade error response.
func (client *virtualMachineScaleSetRollingUpgradesOperations) startOSUpgradeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
