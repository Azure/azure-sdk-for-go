// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// GallerySharingProfileOperations contains the methods for the GallerySharingProfile group.
type GallerySharingProfileOperations interface {
// BeginUpdate - Update sharing profile of a gallery.
	BeginUpdate(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate SharingUpdate, options *GallerySharingProfileUpdateOptions) (*SharingUpdatePollerResponse, error)
	// ResumeUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeUpdate(token string) (SharingUpdatePoller, error)
}

// GallerySharingProfileClient implements the GallerySharingProfileOperations interface.
// Don't use this type directly, use NewGallerySharingProfileClient() instead.
type GallerySharingProfileClient struct {
	con *armcore.Connection
	subscriptionID string
}

// NewGallerySharingProfileClient creates a new instance of GallerySharingProfileClient with the specified values.
func NewGallerySharingProfileClient(con *armcore.Connection, subscriptionID string) GallerySharingProfileOperations {
	return &GallerySharingProfileClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client *GallerySharingProfileClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

func (client *GallerySharingProfileClient) BeginUpdate(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate SharingUpdate, options *GallerySharingProfileUpdateOptions) (*SharingUpdatePollerResponse, error) {
	resp, err := client.Update(ctx, resourceGroupName, galleryName, sharingUpdate, options)
	if err != nil {
		return nil, err
	}
	result := &SharingUpdatePollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("GallerySharingProfileClient.Update", "", resp, client.UpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &sharingUpdatePoller{
		pt: pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*SharingUpdateResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *GallerySharingProfileClient) ResumeUpdate(token string) (SharingUpdatePoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("GallerySharingProfileClient.Update", token, client.UpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &sharingUpdatePoller{
		pipeline: client.con.Pipeline(),
		pt: pt,
	}, nil
}

// Update - Update sharing profile of a gallery.
func (client *GallerySharingProfileClient) Update(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate SharingUpdate, options *GallerySharingProfileUpdateOptions) (*azcore.Response, error) {
	req, err := client.UpdateCreateRequest(ctx, resourceGroupName, galleryName, sharingUpdate, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.UpdateHandleError(resp)
	}
	 return resp, nil
}

// UpdateCreateRequest creates the Update request.
func (client *GallerySharingProfileClient) UpdateCreateRequest(ctx context.Context, resourceGroupName string, galleryName string, sharingUpdate SharingUpdate, options *GallerySharingProfileUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/share"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{galleryName}", url.PathEscape(galleryName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-09-30")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(sharingUpdate)
}

// UpdateHandleResponse handles the Update response.
func (client *GallerySharingProfileClient) UpdateHandleResponse(resp *azcore.Response) (*SharingUpdateResponse, error) {
	result := SharingUpdateResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SharingUpdate)
}

// UpdateHandleError handles the Update error response.
func (client *GallerySharingProfileClient) UpdateHandleError(resp *azcore.Response) error {
var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

