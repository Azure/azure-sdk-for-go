// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
	"time"
)

// The API entity reference.
type APIEntityReference struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/…
	ID *string `json:"id,omitempty"`
}

// Api error.
type APIError struct {
	// The error code.
	Code *string `json:"code,omitempty"`

	// The Api error details
	Details *[]*APIErrorBase `json:"details,omitempty"`

	// The Api inner error
	Innererror *InnerError `json:"innererror,omitempty"`

	// The error message.
	Message *string `json:"message,omitempty"`

	// The target of the particular error.
	Target *string `json:"target,omitempty"`
}

// Api error base.
type APIErrorBase struct {
	// The error code.
	Code *string `json:"code,omitempty"`

	// The error message.
	Message *string `json:"message,omitempty"`

	// The target of the particular error.
	Target *string `json:"target,omitempty"`
}

// A disk access SAS uri.
type AccessURI struct {
	// READ-ONLY; A SAS uri for accessing a disk.
	AccessSAS *string `json:"accessSAS,omitempty" azure:"ro"`
}

// AccessURIPollerResponse is the response envelope for operations that asynchronously return a AccessURI type.
type AccessURIPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (AccessURIResponse, error)

	// Poller contains an initialized poller.
	Poller AccessURIPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessURIResponse is the response envelope for operations that return a AccessURI type.
type AccessURIResponse struct {
	// A disk access SAS uri.
	AccessURI *AccessURI

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilities struct {
	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSDLRS storage account type on the VM or VMSS. Managed
	// disks with storage account type UltraSSDLRS can
	// be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool `json:"ultraSSDEnabled,omitempty"`
}

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by
// setting name, component name, and the pass in
// which the content is applied.
type AdditionalUnattendContent struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *string `json:"componentName,omitempty"`

	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must
	// include the root element for the setting or
	// feature that is being inserted.
	Content *string `json:"content,omitempty"`

	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *string `json:"passName,omitempty"`

	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *SettingNames `json:"settingName,omitempty"`
}

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicy struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool `json:"disableAutomaticRollback,omitempty"`

	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes
	// available. Default value is false.
	// If this is set to true for Windows based scale sets, enableAutomaticUpdates
	// [https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet] is automatically
	// set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool `json:"enableAutomaticOSUpgrade,omitempty"`
}

// Describes automatic OS upgrade properties on the image.
type AutomaticOSUpgradeProperties struct {
	// Specifies whether automatic OS upgrade is supported on the image.
	AutomaticOSUpgradeSupported *bool `json:"automaticOSUpgradeSupported,omitempty"`
}

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicy struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool `json:"enabled,omitempty"`

	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed.
	// This helps avoid premature or accidental repairs.
	// The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 30 minutes (PT30M), which is also the default value. The
	// maximum allowed grace period is 90 minutes
	// (PT90M).
	GracePeriod *string `json:"gracePeriod,omitempty"`
}

// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability
// set are allocated to different nodes to maximize
// availability. For more information about availability sets, see Manage the availability of virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
// For more information on Azure planned maintenance, see Planned maintenance for virtual machines in Azure
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
// Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
type AvailabilitySet struct {
	Resource
	// The instance view of a resource.
	Properties *AvailabilitySetProperties `json:"properties,omitempty"`

	// Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for possible set of values. Use 'Aligned' for virtual machines
	// with managed disks and 'Classic' for virtual
	// machines with unmanaged disks. Default value is 'Classic'.
	SKU *SKU `json:"sku,omitempty"`
}

// The List Availability Set operation response.
type AvailabilitySetListResult struct {
	// The URI to fetch the next page of AvailabilitySets. Call ListNext() with this URI to fetch the next page of AvailabilitySets.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of availability sets
	Value *[]*AvailabilitySet `json:"value,omitempty"`
}

// AvailabilitySetListResultResponse is the response envelope for operations that return a AvailabilitySetListResult type.
type AvailabilitySetListResultResponse struct {
	// The List Availability Set operation response.
	AvailabilitySetListResult *AvailabilitySetListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The instance view of a resource.
type AvailabilitySetProperties struct {
	// Fault Domain count.
	PlatformFaultDomainCount *int32 `json:"platformFaultDomainCount,omitempty"`

	// Update Domain count.
	PlatformUpdateDomainCount *int32 `json:"platformUpdateDomainCount,omitempty"`

	// Specifies information about the proximity placement group that the availability set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource `json:"proximityPlacementGroup,omitempty"`

	// READ-ONLY; The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty" azure:"ro"`

	// A list of references to all virtual machines in the availability set.
	VirtualMachines *[]*SubResource `json:"virtualMachines,omitempty"`
}

// AvailabilitySetResponse is the response envelope for operations that return a AvailabilitySet type.
type AvailabilitySetResponse struct {
	// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability
	// set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual
	// machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
	// <br><br> For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json)
	// <br><br> Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
	AvailabilitySet *AvailabilitySet

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the availability set that the virtual machine should be assigned to. Only tags may be updated.
type AvailabilitySetUpdate struct {
	UpdateResource
	// The instance view of a resource.
	Properties *AvailabilitySetProperties `json:"properties,omitempty"`

	// Sku of the availability set
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AvailabilitySetUpdate.
func (a AvailabilitySetUpdate) MarshalJSON() ([]byte, error) {
	objectMap := a.UpdateResource.marshalInternal()
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "sku", a.SKU)
	return json.Marshal(objectMap)
}

// AvailabilitySetsCreateOrUpdateOptions contains the optional parameters for the AvailabilitySets.CreateOrUpdate method.
type AvailabilitySetsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AvailabilitySetsDeleteOptions contains the optional parameters for the AvailabilitySets.Delete method.
type AvailabilitySetsDeleteOptions struct {
	// placeholder for future optional parameters
}

// AvailabilitySetsGetOptions contains the optional parameters for the AvailabilitySets.Get method.
type AvailabilitySetsGetOptions struct {
	// placeholder for future optional parameters
}

// AvailabilitySetsListAvailableSizesOptions contains the optional parameters for the AvailabilitySets.ListAvailableSizes method.
type AvailabilitySetsListAvailableSizesOptions struct {
	// placeholder for future optional parameters
}

// AvailabilitySetsListBySubscriptionOptions contains the optional parameters for the AvailabilitySets.ListBySubscription method.
type AvailabilitySetsListBySubscriptionOptions struct {
	// The expand expression to apply to the operation. Allowed values are 'instanceView'.
	Expand *string
}

// AvailabilitySetsListOptions contains the optional parameters for the AvailabilitySets.List method.
type AvailabilitySetsListOptions struct {
	// placeholder for future optional parameters
}

// AvailabilitySetsUpdateOptions contains the optional parameters for the AvailabilitySets.Update method.
type AvailabilitySetsUpdateOptions struct {
	// placeholder for future optional parameters
}

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummary struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	AssessmentActivityID *string `json:"assessmentActivityId,omitempty" azure:"ro"`

	// READ-ONLY; The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount *int32 `json:"criticalAndSecurityPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; The number of all available patches excluding critical and security.
	OtherPatchCount *int32 `json:"otherPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot
	// has not yet occurred.
	RebootPending *bool `json:"rebootPending,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become
	// "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AvailablePatchSummary.
func (a AvailablePatchSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assessmentActivityId", a.AssessmentActivityID)
	populate(objectMap, "criticalAndSecurityPatchCount", a.CriticalAndSecurityPatchCount)
	populate(objectMap, "error", a.Error)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(a.LastModifiedTime))
	populate(objectMap, "otherPatchCount", a.OtherPatchCount)
	populate(objectMap, "rebootPending", a.RebootPending)
	populate(objectMap, "startTime", (*timeRFC3339)(a.StartTime))
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AvailablePatchSummary.
func (a *AvailablePatchSummary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessmentActivityId":
			err = unpopulate(val, &a.AssessmentActivityID)
			delete(rawMsg, key)
		case "criticalAndSecurityPatchCount":
			err = unpopulate(val, &a.CriticalAndSecurityPatchCount)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &a.Error)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "otherPatchCount":
			err = unpopulate(val, &a.OtherPatchCount)
			delete(rawMsg, key)
		case "rebootPending":
			err = unpopulate(val, &a.RebootPending)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Specifies the billing related details of a Azure Spot VM or VMSS.
// Minimum api-version: 2019-03-01.
type BillingProfile struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars.
	// This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot
	// VM/VMSS and the operation will only succeed if
	// the maxPrice is greater than the current Azure Spot price.
	// The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS.
	// Possible values are:
	// - Any decimal value greater than zero. Example: 0.01538
	// -1 – indicates default price to be up-to on-demand.
	// You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1 if
	// it is not provided by you.
	// Minimum api-version: 2019-03-01.
	MaxPrice *float64 `json:"maxPrice,omitempty"`
}

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
// You can easily view the output of your console log.
// Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnostics struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool `json:"enabled,omitempty"`

	// Uri of the storage account to use for placing the console output and screenshot.
	// If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageURI *string `json:"storageUri,omitempty"`
}

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceView struct {
	// READ-ONLY; The console screenshot blob URI.
	// NOTE: This will not be set if boot diagnostics is currently enabled with managed storage.
	ConsoleScreenshotBlobURI *string `json:"consoleScreenshotBlobUri,omitempty" azure:"ro"`

	// READ-ONLY; The serial console log blob Uri.
	// NOTE: This will not be set if boot diagnostics is currently enabled with managed storage.
	SerialConsoleLogBlobURI *string `json:"serialConsoleLogBlobUri,omitempty" azure:"ro"`

	// READ-ONLY; The boot diagnostics status information for the VM.
	// NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
	Status *InstanceViewStatus `json:"status,omitempty" azure:"ro"`
}

// An error response from the Compute service.
type CloudError struct {
	// Api error.
	InnerError *APIError `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
func (e CloudError) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += "InnerError: \n"
		if e.InnerError.Details != nil {
			msg += fmt.Sprintf("\tDetails: %v\n", *e.InnerError.Details)
		}
		if e.InnerError.Innererror != nil {
			msg += fmt.Sprintf("\tInnererror: %v\n", *e.InnerError.Innererror)
		}
		if e.InnerError.Code != nil {
			msg += fmt.Sprintf("\tCode: %v\n", *e.InnerError.Code)
		}
		if e.InnerError.Target != nil {
			msg += fmt.Sprintf("\tTarget: %v\n", *e.InnerError.Target)
		}
		if e.InnerError.Message != nil {
			msg += fmt.Sprintf("\tMessage: %v\n", *e.InnerError.Message)
		}
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// The List Compute Operation operation response.
type ComputeOperationListResult struct {
	// READ-ONLY; The list of compute operations
	Value *[]*ComputeOperationValue `json:"value,omitempty" azure:"ro"`
}

// ComputeOperationListResultResponse is the response envelope for operations that return a ComputeOperationListResult type.
type ComputeOperationListResultResponse struct {
	// The List Compute Operation operation response.
	ComputeOperationListResult *ComputeOperationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Compute Operation value.
type ComputeOperationValue struct {
	// Describes the properties of a Compute Operation Value Display.
	Display *ComputeOperationValueDisplay `json:"display,omitempty"`

	// READ-ONLY; The name of the compute operation.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The origin of the compute operation.
	Origin *string `json:"origin,omitempty" azure:"ro"`
}

// Describes the properties of a Compute Operation Value Display.
type ComputeOperationValueDisplay struct {
	// READ-ONLY; The description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the compute operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The resource provider for the operation.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the resource the operation applies to.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// Data used when creating a disk.
type CreationData struct {
	// This enumerates the possible sources of a disk's creation.
	CreateOption *DiskCreateOption `json:"createOption,omitempty"`

	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create
	// a disk.
	GalleryImageReference *ImageDiskReference `json:"galleryImageReference,omitempty"`

	// Disk source information.
	ImageReference *ImageDiskReference `json:"imageReference,omitempty"`

	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int32 `json:"logicalSectorSize,omitempty"`

	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceID *string `json:"sourceResourceId,omitempty"`

	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceURI *string `json:"sourceUri,omitempty"`

	// READ-ONLY; If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueID *string `json:"sourceUniqueId,omitempty" azure:"ro"`

	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
	StorageAccountID *string `json:"storageAccountId,omitempty"`

	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512
	// bytes for the VHD footer) and 35183298347520
	// bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int64 `json:"uploadSizeBytes,omitempty"`
}

// Describes a data disk.
type DataDisk struct {
	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes `json:"caching,omitempty"`

	// Specifies how the virtual machine should be created.
	// Possible values are:
	// Attach \u2013 This value is used when you are using a specialized disk to create the virtual machine.
	// FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference
	// element described above. If you are
	// using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes `json:"createOption,omitempty"`

	// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported
	// values: ForceDetach.
	// detachOption: ForceDetach is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected
	// failure from the virtual machine and the
	// disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed
	// when using this detach behavior.
	// This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to 'true' along
	// with setting detachOption: 'ForceDetach'.
	DetachOption *DiskDetachOptionTypes `json:"detachOption,omitempty"`

	// READ-ONLY; Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks.
	// Can be updated only via updates to the VirtualMachine
	// Scale Set.
	DiskIOPSReadWrite *int64 `json:"diskIOPSReadWrite,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet
	// VM disks. Can be updated only via updates to the
	// VirtualMachine Scale Set.
	DiskMBpsReadWrite *int64 `json:"diskMBpsReadWrite,omitempty" azure:"ro"`

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided,
	// the destination virtual hard drive must not
	// exist.
	Image *VirtualHardDisk `json:"image,omitempty"`

	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data
	// disk attached to a VM.
	Lun *int32 `json:"lun,omitempty"`

	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `json:"managedDisk,omitempty"`

	// The disk name.
	Name *string `json:"name,omitempty"`

	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool `json:"toBeDetached,omitempty"`

	// The virtual hard disk.
	Vhd *VirtualHardDisk `json:"vhd,omitempty"`

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

// Contains the data disk images information.
type DataDiskImage struct {
	// READ-ONLY; Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for
	// each data disk attached to a VM.
	Lun *int32 `json:"lun,omitempty" azure:"ro"`
}

// Contains encryption settings for a data disk image.
type DataDiskImageEncryption struct {
	DiskImageEncryption
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore
	// must be unique for each data disk attached to the
	// Virtual Machine.
	Lun *int32 `json:"lun,omitempty"`
}

// Specifies information about the Dedicated host.
type DedicatedHost struct {
	Resource
	// Properties of the dedicated host.
	Properties *DedicatedHostProperties `json:"properties,omitempty"`

	// SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible
	// values.
	SKU *SKU `json:"sku,omitempty"`
}

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVM struct {
	// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
	Count *float64 `json:"count,omitempty"`

	// VM size in terms of which the unutilized capacity is represented.
	VMSize *string `json:"vmSize,omitempty"`
}

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacity struct {
	// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the dedicated host.
	AllocatableVMs *[]*DedicatedHostAllocatableVM `json:"allocatableVMs,omitempty"`
}

// Specifies information about the dedicated host group that the dedicated hosts should be assigned to.
// Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated
// host group.
type DedicatedHostGroup struct {
	Resource
	// Dedicated Host Group Properties.
	Properties *DedicatedHostGroupProperties `json:"properties,omitempty"`

	// Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group
	// supports all zones in the region. If provided,
	// enforces each host in the group to be in the same zone.
	Zones *[]*string `json:"zones,omitempty"`
}

type DedicatedHostGroupInstanceView struct {
	// List of instance view of the dedicated hosts under the dedicated host group.
	Hosts *[]*DedicatedHostInstanceViewWithName `json:"hosts,omitempty"`
}

// The List Dedicated Host Group with resource group response.
type DedicatedHostGroupListResult struct {
	// The URI to fetch the next page of Dedicated Host Groups. Call ListNext() with this URI to fetch the next page of Dedicated Host Groups.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of dedicated host groups
	Value *[]*DedicatedHostGroup `json:"value,omitempty"`
}

// DedicatedHostGroupListResultResponse is the response envelope for operations that return a DedicatedHostGroupListResult type.
type DedicatedHostGroupListResultResponse struct {
	// The List Dedicated Host Group with resource group response.
	DedicatedHostGroupListResult *DedicatedHostGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Dedicated Host Group Properties.
type DedicatedHostGroupProperties struct {
	// READ-ONLY; A list of references to all dedicated hosts in the dedicated host group.
	Hosts *[]*SubResourceReadOnly `json:"hosts,omitempty" azure:"ro"`

	// READ-ONLY; The dedicated host group instance view, which has the list of instance view of the dedicated hosts under the dedicated host group.
	InstanceView *DedicatedHostGroupInstanceView `json:"instanceView,omitempty" azure:"ro"`

	// Number of fault domains that the host group can span.
	PlatformFaultDomainCount *int32 `json:"platformFaultDomainCount,omitempty"`

	// Specifies whether virtual machines or virtual machine scale sets can be placed automatically on the dedicated host group. Automatic placement means resources
	// are allocated on dedicated hosts, that are
	// chosen by Azure, under the dedicated host group. The value is defaulted to 'false' when not provided.
	// Minimum api-version: 2020-06-01.
	SupportAutomaticPlacement *bool `json:"supportAutomaticPlacement,omitempty"`
}

// DedicatedHostGroupResponse is the response envelope for operations that return a DedicatedHostGroup type.
type DedicatedHostGroupResponse struct {
	// Specifies information about the dedicated host group that the dedicated hosts should be assigned to. <br><br> Currently, a dedicated host can only be
	// added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated host group.
	DedicatedHostGroup *DedicatedHostGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the dedicated host group that the dedicated host should be assigned to. Only tags may be updated.
type DedicatedHostGroupUpdate struct {
	UpdateResource
	// Dedicated Host Group Properties.
	Properties *DedicatedHostGroupProperties `json:"properties,omitempty"`

	// Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group
	// supports all zones in the region. If provided,
	// enforces each host in the group to be in the same zone.
	Zones *[]*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedHostGroupUpdate.
func (d DedicatedHostGroupUpdate) MarshalJSON() ([]byte, error) {
	objectMap := d.UpdateResource.marshalInternal()
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "zones", d.Zones)
	return json.Marshal(objectMap)
}

// DedicatedHostGroupsCreateOrUpdateOptions contains the optional parameters for the DedicatedHostGroups.CreateOrUpdate method.
type DedicatedHostGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostGroupsDeleteOptions contains the optional parameters for the DedicatedHostGroups.Delete method.
type DedicatedHostGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostGroupsGetOptions contains the optional parameters for the DedicatedHostGroups.Get method.
type DedicatedHostGroupsGetOptions struct {
	// The expand expression to apply on the operation. The response shows the list of instance view of the dedicated hosts under the dedicated host group.
	Expand *string
}

// DedicatedHostGroupsListByResourceGroupOptions contains the optional parameters for the DedicatedHostGroups.ListByResourceGroup method.
type DedicatedHostGroupsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostGroupsListBySubscriptionOptions contains the optional parameters for the DedicatedHostGroups.ListBySubscription method.
type DedicatedHostGroupsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostGroupsUpdateOptions contains the optional parameters for the DedicatedHostGroups.Update method.
type DedicatedHostGroupsUpdateOptions struct {
	// placeholder for future optional parameters
}

// The instance view of a dedicated host.
type DedicatedHostInstanceView struct {
	// READ-ONLY; Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetID *string `json:"assetId,omitempty" azure:"ro"`

	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacity `json:"availableCapacity,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`
}

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host
// group.
type DedicatedHostInstanceViewWithName struct {
	DedicatedHostInstanceView
	// READ-ONLY; The name of the dedicated host.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// The list dedicated host operation response.
type DedicatedHostListResult struct {
	// The URI to fetch the next page of dedicated hosts. Call ListNext() with this URI to fetch the next page of dedicated hosts.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of dedicated hosts
	Value *[]*DedicatedHost `json:"value,omitempty"`
}

// DedicatedHostListResultResponse is the response envelope for operations that return a DedicatedHostListResult type.
type DedicatedHostListResultResponse struct {
	// The list dedicated host operation response.
	DedicatedHostListResult *DedicatedHostListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DedicatedHostPollerResponse is the response envelope for operations that asynchronously return a DedicatedHost type.
type DedicatedHostPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DedicatedHostResponse, error)

	// Poller contains an initialized poller.
	Poller DedicatedHostPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the dedicated host.
type DedicatedHostProperties struct {
	// Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true' when not provided.
	AutoReplaceOnFailure *bool `json:"autoReplaceOnFailure,omitempty"`

	// READ-ONLY; A unique id generated and assigned to the dedicated host by the platform.
	// Does not change throughout the lifetime of the host.
	HostID *string `json:"hostId,omitempty" azure:"ro"`

	// READ-ONLY; The dedicated host instance view.
	InstanceView *DedicatedHostInstanceView `json:"instanceView,omitempty" azure:"ro"`

	// Specifies the software license type that will be applied to the VMs deployed on the dedicated host.
	// Possible values are:
	// None
	// WindowsServerHybrid
	// WindowsServerPerpetual
	// Default: None
	LicenseType *DedicatedHostLicenseTypes `json:"licenseType,omitempty"`

	// Fault domain of the dedicated host within a dedicated host group.
	PlatformFaultDomain *int32 `json:"platformFaultDomain,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The date when the host was first provisioned.
	ProvisioningTime *time.Time `json:"provisioningTime,omitempty" azure:"ro"`

	// READ-ONLY; A list of references to all virtual machines in the Dedicated Host.
	VirtualMachines *[]*SubResourceReadOnly `json:"virtualMachines,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedHostProperties.
func (d DedicatedHostProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoReplaceOnFailure", d.AutoReplaceOnFailure)
	populate(objectMap, "hostId", d.HostID)
	populate(objectMap, "instanceView", d.InstanceView)
	populate(objectMap, "licenseType", d.LicenseType)
	populate(objectMap, "platformFaultDomain", d.PlatformFaultDomain)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "provisioningTime", (*timeRFC3339)(d.ProvisioningTime))
	populate(objectMap, "virtualMachines", d.VirtualMachines)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DedicatedHostProperties.
func (d *DedicatedHostProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoReplaceOnFailure":
			err = unpopulate(val, &d.AutoReplaceOnFailure)
			delete(rawMsg, key)
		case "hostId":
			err = unpopulate(val, &d.HostID)
			delete(rawMsg, key)
		case "instanceView":
			err = unpopulate(val, &d.InstanceView)
			delete(rawMsg, key)
		case "licenseType":
			err = unpopulate(val, &d.LicenseType)
			delete(rawMsg, key)
		case "platformFaultDomain":
			err = unpopulate(val, &d.PlatformFaultDomain)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "provisioningTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.ProvisioningTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "virtualMachines":
			err = unpopulate(val, &d.VirtualMachines)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DedicatedHostResponse is the response envelope for operations that return a DedicatedHost type.
type DedicatedHostResponse struct {
	// Specifies information about the Dedicated host.
	DedicatedHost *DedicatedHost

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
type DedicatedHostUpdate struct {
	UpdateResource
	// Properties of the dedicated host.
	Properties *DedicatedHostProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedHostUpdate.
func (d DedicatedHostUpdate) MarshalJSON() ([]byte, error) {
	objectMap := d.UpdateResource.marshalInternal()
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DedicatedHostsBeginCreateOrUpdateOptions contains the optional parameters for the DedicatedHosts.BeginCreateOrUpdate method.
type DedicatedHostsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostsBeginDeleteOptions contains the optional parameters for the DedicatedHosts.BeginDelete method.
type DedicatedHostsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostsBeginUpdateOptions contains the optional parameters for the DedicatedHosts.BeginUpdate method.
type DedicatedHostsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DedicatedHostsGetOptions contains the optional parameters for the DedicatedHosts.Get method.
type DedicatedHostsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// DedicatedHostsListByHostGroupOptions contains the optional parameters for the DedicatedHosts.ListByHostGroup method.
type DedicatedHostsListByHostGroupOptions struct {
	// placeholder for future optional parameters
}

// Specifies the boot diagnostic settings state.
// Minimum api-version: 2015-06-15.
type DiagnosticsProfile struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics `json:"bootDiagnostics,omitempty"`
}

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk.
// NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettings struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *DiffDiskOptions `json:"option,omitempty"`

	// Specifies the ephemeral disk placement for operating system disk.
	// Possible values are:
	// CacheDisk
	// ResourceDisk
	// Default: CacheDisk if one is configured for the VM size otherwise ResourceDisk is used.
	// Refer to VM size documentation for Windows VM at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes and Linux VM at
	// https://docs.microsoft.com/en-us/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk.
	Placement *DiffDiskPlacement `json:"placement,omitempty"`
}

// Describes the disallowed disk types.
type Disallowed struct {
	// A list of disk types.
	DiskTypes *[]*string `json:"diskTypes,omitempty"`
}

// Specifies the disallowed configuration for a virtual machine image.
type DisallowedConfiguration struct {
	// VM disk types which are disallowed.
	VMDiskType *VMDiskTypes `json:"vmDiskType,omitempty"`
}

// Disk resource.
type Disk struct {
	Resource
	// The extended location where the disk will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// READ-ONLY; A relative URI containing the ID of the VM that has the disk attached.
	ManagedBy *string `json:"managedBy,omitempty" azure:"ro"`

	// READ-ONLY; List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks
	// to allow attaching them to multiple VMs.
	ManagedByExtended *[]*string `json:"managedByExtended,omitempty" azure:"ro"`

	// Disk resource properties.
	Properties *DiskProperties `json:"properties,omitempty"`

	// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
	SKU *DiskSKU `json:"sku,omitempty"`

	// The Logical zone list for Disk.
	Zones *[]*string `json:"zones,omitempty"`
}

// disk access resource.
type DiskAccess struct {
	Resource
	Properties *DiskAccessProperties `json:"properties,omitempty"`
}

// The List disk access operation response.
type DiskAccessList struct {
	// The uri to fetch the next page of disk access resources. Call ListNext() with this to fetch the next page of disk access resources.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of disk access resources.
	Value *[]*DiskAccess `json:"value,omitempty"`
}

// DiskAccessListResponse is the response envelope for operations that return a DiskAccessList type.
type DiskAccessListResponse struct {
	// The List disk access operation response.
	DiskAccessList *DiskAccessList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskAccessPollerResponse is the response envelope for operations that asynchronously return a DiskAccess type.
type DiskAccessPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DiskAccessResponse, error)

	// Poller contains an initialized poller.
	Poller DiskAccessPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

type DiskAccessProperties struct {
	// READ-ONLY; A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported.
	PrivateEndpointConnections *[]*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; The disk access resource provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The time when the disk access was created.
	TimeCreated *time.Time `json:"timeCreated,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskAccessProperties.
func (d DiskAccessProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateEndpointConnections", d.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "timeCreated", (*timeRFC3339)(d.TimeCreated))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskAccessProperties.
func (d *DiskAccessProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "privateEndpointConnections":
			err = unpopulate(val, &d.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "timeCreated":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.TimeCreated = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiskAccessResponse is the response envelope for operations that return a DiskAccess type.
type DiskAccessResponse struct {
	// disk access resource.
	DiskAccess *DiskAccess

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Used for updating a disk access resource.
type DiskAccessUpdate struct {
	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskAccessUpdate.
func (d DiskAccessUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DiskAccessesBeginCreateOrUpdateOptions contains the optional parameters for the DiskAccesses.BeginCreateOrUpdate method.
type DiskAccessesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesBeginDeleteAPrivateEndpointConnectionOptions contains the optional parameters for the DiskAccesses.BeginDeleteAPrivateEndpointConnection
// method.
type DiskAccessesBeginDeleteAPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesBeginDeleteOptions contains the optional parameters for the DiskAccesses.BeginDelete method.
type DiskAccessesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesBeginUpdateAPrivateEndpointConnectionOptions contains the optional parameters for the DiskAccesses.BeginUpdateAPrivateEndpointConnection
// method.
type DiskAccessesBeginUpdateAPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesBeginUpdateOptions contains the optional parameters for the DiskAccesses.BeginUpdate method.
type DiskAccessesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesGetAPrivateEndpointConnectionOptions contains the optional parameters for the DiskAccesses.GetAPrivateEndpointConnection method.
type DiskAccessesGetAPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesGetOptions contains the optional parameters for the DiskAccesses.Get method.
type DiskAccessesGetOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesGetPrivateLinkResourcesOptions contains the optional parameters for the DiskAccesses.GetPrivateLinkResources method.
type DiskAccessesGetPrivateLinkResourcesOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesListByResourceGroupOptions contains the optional parameters for the DiskAccesses.ListByResourceGroup method.
type DiskAccessesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesListOptions contains the optional parameters for the DiskAccesses.List method.
type DiskAccessesListOptions struct {
	// placeholder for future optional parameters
}

// DiskAccessesListPrivateEndpointConnectionsOptions contains the optional parameters for the DiskAccesses.ListPrivateEndpointConnections method.
type DiskAccessesListPrivateEndpointConnectionsOptions struct {
	// placeholder for future optional parameters
}

// disk encryption set resource.
type DiskEncryptionSet struct {
	Resource
	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
	Identity   *EncryptionSetIdentity   `json:"identity,omitempty"`
	Properties *EncryptionSetProperties `json:"properties,omitempty"`
}

// The List disk encryption set operation response.
type DiskEncryptionSetList struct {
	// The uri to fetch the next page of disk encryption sets. Call ListNext() with this to fetch the next page of disk encryption sets.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of disk encryption sets.
	Value *[]*DiskEncryptionSet `json:"value,omitempty"`
}

// DiskEncryptionSetListResponse is the response envelope for operations that return a DiskEncryptionSetList type.
type DiskEncryptionSetListResponse struct {
	// The List disk encryption set operation response.
	DiskEncryptionSetList *DiskEncryptionSetList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk.
// NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParameters struct {
	SubResource
}

// DiskEncryptionSetPollerResponse is the response envelope for operations that asynchronously return a DiskEncryptionSet type.
type DiskEncryptionSetPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DiskEncryptionSetResponse, error)

	// Poller contains an initialized poller.
	Poller DiskEncryptionSetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskEncryptionSetResponse is the response envelope for operations that return a DiskEncryptionSet type.
type DiskEncryptionSetResponse struct {
	// disk encryption set resource.
	DiskEncryptionSet *DiskEncryptionSet

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// disk encryption set update resource.
type DiskEncryptionSetUpdate struct {
	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
	Identity *EncryptionSetIdentity `json:"identity,omitempty"`

	// disk encryption set resource update properties.
	Properties *DiskEncryptionSetUpdateProperties `json:"properties,omitempty"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskEncryptionSetUpdate.
func (d DiskEncryptionSetUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// disk encryption set resource update properties.
type DiskEncryptionSetUpdateProperties struct {
	// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
	ActiveKey *KeyForDiskEncryptionSet `json:"activeKey,omitempty"`

	// The type of key used to encrypt the data of the disk.
	EncryptionType *DiskEncryptionSetType `json:"encryptionType,omitempty"`

	// Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
	RotationToLatestKeyVersionEnabled *bool `json:"rotationToLatestKeyVersionEnabled,omitempty"`
}

// DiskEncryptionSetsBeginCreateOrUpdateOptions contains the optional parameters for the DiskEncryptionSets.BeginCreateOrUpdate method.
type DiskEncryptionSetsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsBeginDeleteOptions contains the optional parameters for the DiskEncryptionSets.BeginDelete method.
type DiskEncryptionSetsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsBeginUpdateOptions contains the optional parameters for the DiskEncryptionSets.BeginUpdate method.
type DiskEncryptionSetsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsGetOptions contains the optional parameters for the DiskEncryptionSets.Get method.
type DiskEncryptionSetsGetOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsListAssociatedResourcesOptions contains the optional parameters for the DiskEncryptionSets.ListAssociatedResources method.
type DiskEncryptionSetsListAssociatedResourcesOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsListByResourceGroupOptions contains the optional parameters for the DiskEncryptionSets.ListByResourceGroup method.
type DiskEncryptionSetsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DiskEncryptionSetsListOptions contains the optional parameters for the DiskEncryptionSets.List method.
type DiskEncryptionSetsListOptions struct {
	// placeholder for future optional parameters
}

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettings struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference `json:"diskEncryptionKey,omitempty"`

	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool `json:"enabled,omitempty"`

	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference `json:"keyEncryptionKey,omitempty"`
}

// This is the disk image encryption base class.
type DiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty"`
}

// The instance view of the disk.
type DiskInstanceView struct {
	// Specifies the encryption settings for the OS Disk.
	// Minimum api-version: 2015-06-15
	EncryptionSettings *[]*DiskEncryptionSettings `json:"encryptionSettings,omitempty"`

	// The disk name.
	Name *string `json:"name,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`
}

// The List Disks operation response.
type DiskList struct {
	// The uri to fetch the next page of disks. Call ListNext() with this to fetch the next page of disks.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of disks.
	Value *[]*Disk `json:"value,omitempty"`
}

// DiskListResponse is the response envelope for operations that return a DiskList type.
type DiskListResponse struct {
	// The List Disks operation response.
	DiskList *DiskList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPollerResponse is the response envelope for operations that asynchronously return a Disk type.
type DiskPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DiskResponse, error)

	// Poller contains an initialized poller.
	Poller DiskPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Disk resource properties.
type DiskProperties struct {
	// Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData `json:"creationData,omitempty"`

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string `json:"diskAccessId,omitempty"`

	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadOnly *int64 `json:"diskIOPSReadOnly,omitempty"`

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int64 `json:"diskIOPSReadWrite,omitempty"`

	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here
	// uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int64 `json:"diskMBpsReadOnly,omitempty"`

	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers
	// of 10.
	DiskMBpsReadWrite *int64 `json:"diskMBpsReadWrite,omitempty"`

	// READ-ONLY; The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int64 `json:"diskSizeBytes,omitempty" azure:"ro"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates
	// or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// READ-ONLY; The state of the disk.
	DiskState *DiskState `json:"diskState,omitempty" azure:"ro"`

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration `json:"hyperVGeneration,omitempty"`

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at
	// the same time.
	MaxShares *int32 `json:"maxShares,omitempty"`

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	// The Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// READ-ONLY; Properties of the disk for which update is pending.
	PropertyUpdatesInProgress *PropertyUpdatesInProgress `json:"propertyUpdatesInProgress,omitempty" azure:"ro"`

	// READ-ONLY; The disk provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product:
	// WindowsServer}
	PurchasePlan *PurchasePlanAutoGenerated `json:"purchasePlan,omitempty"`

	// Contains the security related information for the resource.
	SecurityProfile *DiskSecurityProfile `json:"securityProfile,omitempty"`

	// READ-ONLY; Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching
	// them to multiple VMs.
	ShareInfo *[]*ShareInfoElement `json:"shareInfo,omitempty" azure:"ro"`

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`

	// Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra
	// disks.
	Tier *string `json:"tier,omitempty"`

	// READ-ONLY; The time when the disk was created.
	TimeCreated *time.Time `json:"timeCreated,omitempty" azure:"ro"`

	// READ-ONLY; Unique Guid identifying the resource.
	UniqueID *string `json:"uniqueId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskProperties.
func (d DiskProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "burstingEnabled", d.BurstingEnabled)
	populate(objectMap, "creationData", d.CreationData)
	populate(objectMap, "diskAccessId", d.DiskAccessID)
	populate(objectMap, "diskIOPSReadOnly", d.DiskIOPSReadOnly)
	populate(objectMap, "diskIOPSReadWrite", d.DiskIOPSReadWrite)
	populate(objectMap, "diskMBpsReadOnly", d.DiskMBpsReadOnly)
	populate(objectMap, "diskMBpsReadWrite", d.DiskMBpsReadWrite)
	populate(objectMap, "diskSizeBytes", d.DiskSizeBytes)
	populate(objectMap, "diskSizeGB", d.DiskSizeGB)
	populate(objectMap, "diskState", d.DiskState)
	populate(objectMap, "encryption", d.Encryption)
	populate(objectMap, "encryptionSettingsCollection", d.EncryptionSettingsCollection)
	populate(objectMap, "hyperVGeneration", d.HyperVGeneration)
	populate(objectMap, "maxShares", d.MaxShares)
	populate(objectMap, "networkAccessPolicy", d.NetworkAccessPolicy)
	populate(objectMap, "osType", d.OSType)
	populate(objectMap, "propertyUpdatesInProgress", d.PropertyUpdatesInProgress)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "purchasePlan", d.PurchasePlan)
	populate(objectMap, "securityProfile", d.SecurityProfile)
	populate(objectMap, "shareInfo", d.ShareInfo)
	populate(objectMap, "supportsHibernation", d.SupportsHibernation)
	populate(objectMap, "tier", d.Tier)
	populate(objectMap, "timeCreated", (*timeRFC3339)(d.TimeCreated))
	populate(objectMap, "uniqueId", d.UniqueID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskProperties.
func (d *DiskProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "burstingEnabled":
			err = unpopulate(val, &d.BurstingEnabled)
			delete(rawMsg, key)
		case "creationData":
			err = unpopulate(val, &d.CreationData)
			delete(rawMsg, key)
		case "diskAccessId":
			err = unpopulate(val, &d.DiskAccessID)
			delete(rawMsg, key)
		case "diskIOPSReadOnly":
			err = unpopulate(val, &d.DiskIOPSReadOnly)
			delete(rawMsg, key)
		case "diskIOPSReadWrite":
			err = unpopulate(val, &d.DiskIOPSReadWrite)
			delete(rawMsg, key)
		case "diskMBpsReadOnly":
			err = unpopulate(val, &d.DiskMBpsReadOnly)
			delete(rawMsg, key)
		case "diskMBpsReadWrite":
			err = unpopulate(val, &d.DiskMBpsReadWrite)
			delete(rawMsg, key)
		case "diskSizeBytes":
			err = unpopulate(val, &d.DiskSizeBytes)
			delete(rawMsg, key)
		case "diskSizeGB":
			err = unpopulate(val, &d.DiskSizeGB)
			delete(rawMsg, key)
		case "diskState":
			err = unpopulate(val, &d.DiskState)
			delete(rawMsg, key)
		case "encryption":
			err = unpopulate(val, &d.Encryption)
			delete(rawMsg, key)
		case "encryptionSettingsCollection":
			err = unpopulate(val, &d.EncryptionSettingsCollection)
			delete(rawMsg, key)
		case "hyperVGeneration":
			err = unpopulate(val, &d.HyperVGeneration)
			delete(rawMsg, key)
		case "maxShares":
			err = unpopulate(val, &d.MaxShares)
			delete(rawMsg, key)
		case "networkAccessPolicy":
			err = unpopulate(val, &d.NetworkAccessPolicy)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &d.OSType)
			delete(rawMsg, key)
		case "propertyUpdatesInProgress":
			err = unpopulate(val, &d.PropertyUpdatesInProgress)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "purchasePlan":
			err = unpopulate(val, &d.PurchasePlan)
			delete(rawMsg, key)
		case "securityProfile":
			err = unpopulate(val, &d.SecurityProfile)
			delete(rawMsg, key)
		case "shareInfo":
			err = unpopulate(val, &d.ShareInfo)
			delete(rawMsg, key)
		case "supportsHibernation":
			err = unpopulate(val, &d.SupportsHibernation)
			delete(rawMsg, key)
		case "tier":
			err = unpopulate(val, &d.Tier)
			delete(rawMsg, key)
		case "timeCreated":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.TimeCreated = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "uniqueId":
			err = unpopulate(val, &d.UniqueID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiskResponse is the response envelope for operations that return a Disk type.
type DiskResponse struct {
	// Disk resource.
	Disk *Disk

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of disk restore point
type DiskRestorePoint struct {
	ProxyOnlyResource
	// Properties of an incremental disk restore point
	Properties *DiskRestorePointProperties `json:"properties,omitempty"`
}

// DiskRestorePointGetOptions contains the optional parameters for the DiskRestorePoint.Get method.
type DiskRestorePointGetOptions struct {
	// placeholder for future optional parameters
}

// The List Disk Restore Points operation response.
type DiskRestorePointList struct {
	// The uri to fetch the next page of disk restore points. Call ListNext() with this to fetch the next page of disk restore points.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of disk restore points.
	Value *[]*DiskRestorePoint `json:"value,omitempty"`
}

// DiskRestorePointListByRestorePointOptions contains the optional parameters for the DiskRestorePoint.ListByRestorePoint method.
type DiskRestorePointListByRestorePointOptions struct {
	// placeholder for future optional parameters
}

// DiskRestorePointListResponse is the response envelope for operations that return a DiskRestorePointList type.
type DiskRestorePointListResponse struct {
	// The List Disk Restore Points operation response.
	DiskRestorePointList *DiskRestorePointList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of an incremental disk restore point
type DiskRestorePointProperties struct {
	// READ-ONLY; Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty" azure:"ro"`

	// READ-ONLY; id of the backing snapshot's MIS family
	FamilyID *string `json:"familyId,omitempty" azure:"ro"`

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration `json:"hyperVGeneration,omitempty"`

	// READ-ONLY; The Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty" azure:"ro"`

	// Purchase plan information for the the image from which the OS disk was created.
	PurchasePlan *PurchasePlanAutoGenerated `json:"purchasePlan,omitempty"`

	// READ-ONLY; arm id of source disk
	SourceResourceID *string `json:"sourceResourceId,omitempty" azure:"ro"`

	// READ-ONLY; unique incarnation id of the source disk
	SourceUniqueID *string `json:"sourceUniqueId,omitempty" azure:"ro"`

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`

	// READ-ONLY; The timestamp of restorePoint creation
	TimeCreated *time.Time `json:"timeCreated,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskRestorePointProperties.
func (d DiskRestorePointProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryption", d.Encryption)
	populate(objectMap, "familyId", d.FamilyID)
	populate(objectMap, "hyperVGeneration", d.HyperVGeneration)
	populate(objectMap, "osType", d.OSType)
	populate(objectMap, "purchasePlan", d.PurchasePlan)
	populate(objectMap, "sourceResourceId", d.SourceResourceID)
	populate(objectMap, "sourceUniqueId", d.SourceUniqueID)
	populate(objectMap, "supportsHibernation", d.SupportsHibernation)
	populate(objectMap, "timeCreated", (*timeRFC3339)(d.TimeCreated))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskRestorePointProperties.
func (d *DiskRestorePointProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "encryption":
			err = unpopulate(val, &d.Encryption)
			delete(rawMsg, key)
		case "familyId":
			err = unpopulate(val, &d.FamilyID)
			delete(rawMsg, key)
		case "hyperVGeneration":
			err = unpopulate(val, &d.HyperVGeneration)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &d.OSType)
			delete(rawMsg, key)
		case "purchasePlan":
			err = unpopulate(val, &d.PurchasePlan)
			delete(rawMsg, key)
		case "sourceResourceId":
			err = unpopulate(val, &d.SourceResourceID)
			delete(rawMsg, key)
		case "sourceUniqueId":
			err = unpopulate(val, &d.SourceUniqueID)
			delete(rawMsg, key)
		case "supportsHibernation":
			err = unpopulate(val, &d.SupportsHibernation)
			delete(rawMsg, key)
		case "timeCreated":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.TimeCreated = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiskRestorePointResponse is the response envelope for operations that return a DiskRestorePoint type.
type DiskRestorePointResponse struct {
	// Properties of disk restore point
	DiskRestorePoint *DiskRestorePoint

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
type DiskSKU struct {
	// The sku name.
	Name *DiskStorageAccountTypes `json:"name,omitempty"`

	// READ-ONLY; The sku tier.
	Tier *string `json:"tier,omitempty" azure:"ro"`
}

// Contains the security related information for the resource.
type DiskSecurityProfile struct {
	// Specifies the SecurityType of the VM. Applicable for OS disks only.
	SecurityType *DiskSecurityTypes `json:"securityType,omitempty"`
}

// Disk update resource.
type DiskUpdate struct {
	// Disk resource update properties.
	Properties *DiskUpdateProperties `json:"properties,omitempty"`

	// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
	SKU *DiskSKU `json:"sku,omitempty"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiskUpdate.
func (d DiskUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "sku", d.SKU)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// Disk resource update properties.
type DiskUpdateProperties struct {
	// Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
	BurstingEnabled *bool `json:"burstingEnabled,omitempty"`

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string `json:"diskAccessId,omitempty"`

	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadOnly *int64 `json:"diskIOPSReadOnly,omitempty"`

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
	DiskIOPSReadWrite *int64 `json:"diskIOPSReadWrite,omitempty"`

	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here
	// uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int64 `json:"diskMBpsReadOnly,omitempty"`

	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers
	// of 10.
	DiskMBpsReadWrite *int64 `json:"diskMBpsReadWrite,omitempty"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates
	// or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at
	// the same time.
	MaxShares *int32 `json:"maxShares,omitempty"`

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	// the Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// READ-ONLY; Properties of the disk for which update is pending.
	PropertyUpdatesInProgress *PropertyUpdatesInProgress `json:"propertyUpdatesInProgress,omitempty" azure:"ro"`

	// Purchase plan information to be added on the OS disk
	PurchasePlan *PurchasePlanAutoGenerated `json:"purchasePlan,omitempty"`

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`

	// Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra
	// disks.
	Tier *string `json:"tier,omitempty"`
}

// DisksBeginCreateOrUpdateOptions contains the optional parameters for the Disks.BeginCreateOrUpdate method.
type DisksBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DisksBeginDeleteOptions contains the optional parameters for the Disks.BeginDelete method.
type DisksBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DisksBeginGrantAccessOptions contains the optional parameters for the Disks.BeginGrantAccess method.
type DisksBeginGrantAccessOptions struct {
	// placeholder for future optional parameters
}

// DisksBeginRevokeAccessOptions contains the optional parameters for the Disks.BeginRevokeAccess method.
type DisksBeginRevokeAccessOptions struct {
	// placeholder for future optional parameters
}

// DisksBeginUpdateOptions contains the optional parameters for the Disks.BeginUpdate method.
type DisksBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DisksGetOptions contains the optional parameters for the Disks.Get method.
type DisksGetOptions struct {
	// placeholder for future optional parameters
}

// DisksListByResourceGroupOptions contains the optional parameters for the Disks.ListByResourceGroup method.
type DisksListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DisksListOptions contains the optional parameters for the Disks.List method.
type DisksListOptions struct {
	// placeholder for future optional parameters
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetID *string `json:"diskEncryptionSetId,omitempty"`

	// The type of key used to encrypt the data of the disk.
	Type *EncryptionType `json:"type,omitempty"`
}

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImages struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages *[]*DataDiskImageEncryption `json:"dataDiskImages,omitempty"`

	// Contains encryption settings for an OS disk image.
	OSDiskImage *OSDiskImageEncryption `json:"osDiskImage,omitempty"`
}

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIdentity struct {
	// READ-ONLY; The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT
	// request if the resource has a systemAssigned(implicit)
	// identity
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request
	// if the resource has a systemAssigned(implicit) identity
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`

	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption Sets can be updated with
	// Identity type None during migration of
	// subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
	Type *DiskEncryptionSetIdentityType `json:"type,omitempty"`
}

type EncryptionSetProperties struct {
	// The key vault key which is currently used by this disk encryption set.
	ActiveKey *KeyForDiskEncryptionSet `json:"activeKey,omitempty"`

	// The type of key used to encrypt the data of the disk.
	EncryptionType *DiskEncryptionSetType `json:"encryptionType,omitempty"`

	// READ-ONLY; The time when the active key of this disk encryption set was updated.
	LastKeyRotationTimestamp *time.Time `json:"lastKeyRotationTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty
	// if there is no ongoing key rotation.
	PreviousKeys *[]*KeyForDiskEncryptionSet `json:"previousKeys,omitempty" azure:"ro"`

	// READ-ONLY; The disk encryption set provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
	RotationToLatestKeyVersionEnabled *bool `json:"rotationToLatestKeyVersionEnabled,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EncryptionSetProperties.
func (e EncryptionSetProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activeKey", e.ActiveKey)
	populate(objectMap, "encryptionType", e.EncryptionType)
	populate(objectMap, "lastKeyRotationTimestamp", (*timeRFC3339)(e.LastKeyRotationTimestamp))
	populate(objectMap, "previousKeys", e.PreviousKeys)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "rotationToLatestKeyVersionEnabled", e.RotationToLatestKeyVersionEnabled)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EncryptionSetProperties.
func (e *EncryptionSetProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activeKey":
			err = unpopulate(val, &e.ActiveKey)
			delete(rawMsg, key)
		case "encryptionType":
			err = unpopulate(val, &e.EncryptionType)
			delete(rawMsg, key)
		case "lastKeyRotationTimestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			e.LastKeyRotationTimestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "previousKeys":
			err = unpopulate(val, &e.PreviousKeys)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &e.ProvisioningState)
			delete(rawMsg, key)
		case "rotationToLatestKeyVersionEnabled":
			err = unpopulate(val, &e.RotationToLatestKeyVersionEnabled)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey
	// and KeyEncryptionKey to disable encryption.
	// If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled *bool `json:"enabled,omitempty"`

	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings *[]*EncryptionSettingsElement `json:"encryptionSettings,omitempty"`

	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption
	// with AAD app.'1.1' corresponds to Azure Disk
	// Encryption.
	EncryptionSettingsVersion *string `json:"encryptionSettingsVersion,omitempty"`
}

// Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference `json:"diskEncryptionKey,omitempty"`

	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference `json:"keyEncryptionKey,omitempty"`
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `json:"name,omitempty"`

	// The type of the extended location.
	Type *ExtendedLocationTypes `json:"type,omitempty"`
}

// GalleriesBeginCreateOrUpdateOptions contains the optional parameters for the Galleries.BeginCreateOrUpdate method.
type GalleriesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleriesBeginDeleteOptions contains the optional parameters for the Galleries.BeginDelete method.
type GalleriesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GalleriesBeginUpdateOptions contains the optional parameters for the Galleries.BeginUpdate method.
type GalleriesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleriesGetOptions contains the optional parameters for the Galleries.Get method.
type GalleriesGetOptions struct {
	// placeholder for future optional parameters
}

// GalleriesListByResourceGroupOptions contains the optional parameters for the Galleries.ListByResourceGroup method.
type GalleriesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// GalleriesListOptions contains the optional parameters for the Galleries.List method.
type GalleriesListOptions struct {
	// placeholder for future optional parameters
}

// Specifies information about the Shared Image Gallery that you want to create or update.
type Gallery struct {
	Resource
	// Describes the properties of a Shared Image Gallery.
	Properties *GalleryProperties `json:"properties,omitempty"`
}

// Specifies information about the gallery Application Definition that you want to create or update.
type GalleryApplication struct {
	Resource
	// Describes the properties of a gallery Application Definition.
	Properties *GalleryApplicationProperties `json:"properties,omitempty"`
}

// The List Gallery Applications operation response.
type GalleryApplicationList struct {
	// The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch the next page of gallery Application
	// Definitions.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of Gallery Applications.
	Value *[]*GalleryApplication `json:"value,omitempty"`
}

// GalleryApplicationListResponse is the response envelope for operations that return a GalleryApplicationList type.
type GalleryApplicationListResponse struct {
	// The List Gallery Applications operation response.
	GalleryApplicationList *GalleryApplicationList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationPollerResponse is the response envelope for operations that asynchronously return a GalleryApplication type.
type GalleryApplicationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GalleryApplicationResponse, error)

	// Poller contains an initialized poller.
	Poller GalleryApplicationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a gallery Application Definition.
type GalleryApplicationProperties struct {
	// The description of this gallery Application Definition resource. This property is updatable.
	Description *string `json:"description,omitempty"`

	// The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty"`

	// The Eula agreement for the gallery Application Definition.
	Eula *string `json:"eula,omitempty"`

	// The privacy statement uri.
	PrivacyStatementURI *string `json:"privacyStatementUri,omitempty"`

	// The release note uri.
	ReleaseNoteURI *string `json:"releaseNoteUri,omitempty"`

	// This property allows you to specify the supported type of the OS that application is built for.
	// Possible values are:
	// Windows
	// Linux
	SupportedOSType *OperatingSystemTypes `json:"supportedOSType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryApplicationProperties.
func (g GalleryApplicationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", g.Description)
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(g.EndOfLifeDate))
	populate(objectMap, "eula", g.Eula)
	populate(objectMap, "privacyStatementUri", g.PrivacyStatementURI)
	populate(objectMap, "releaseNoteUri", g.ReleaseNoteURI)
	populate(objectMap, "supportedOSType", g.SupportedOSType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GalleryApplicationProperties.
func (g *GalleryApplicationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &g.Description)
			delete(rawMsg, key)
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "eula":
			err = unpopulate(val, &g.Eula)
			delete(rawMsg, key)
		case "privacyStatementUri":
			err = unpopulate(val, &g.PrivacyStatementURI)
			delete(rawMsg, key)
		case "releaseNoteUri":
			err = unpopulate(val, &g.ReleaseNoteURI)
			delete(rawMsg, key)
		case "supportedOSType":
			err = unpopulate(val, &g.SupportedOSType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GalleryApplicationResponse is the response envelope for operations that return a GalleryApplication type.
type GalleryApplicationResponse struct {
	// Specifies information about the gallery Application Definition that you want to create or update.
	GalleryApplication *GalleryApplication

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the gallery Application Definition that you want to update.
type GalleryApplicationUpdate struct {
	UpdateResourceDefinition
	// Describes the properties of a gallery Application Definition.
	Properties *GalleryApplicationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryApplicationUpdate.
func (g GalleryApplicationUpdate) MarshalJSON() ([]byte, error) {
	objectMap := g.UpdateResourceDefinition.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// Specifies information about the gallery Application Version that you want to create or update.
type GalleryApplicationVersion struct {
	Resource
	// Describes the properties of a gallery Image Version.
	Properties *GalleryApplicationVersionProperties `json:"properties,omitempty"`
}

// The List Gallery Application version operation response.
type GalleryApplicationVersionList struct {
	// The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of gallery Application Versions.
	Value *[]*GalleryApplicationVersion `json:"value,omitempty"`
}

// GalleryApplicationVersionListResponse is the response envelope for operations that return a GalleryApplicationVersionList type.
type GalleryApplicationVersionListResponse struct {
	// The List Gallery Application version operation response.
	GalleryApplicationVersionList *GalleryApplicationVersionList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryApplicationVersionPollerResponse is the response envelope for operations that asynchronously return a GalleryApplicationVersion type.
type GalleryApplicationVersionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GalleryApplicationVersionResponse, error)

	// Poller contains an initialized poller.
	Poller GalleryApplicationVersionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a gallery Image Version.
type GalleryApplicationVersionProperties struct {
	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryApplicationVersionPropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The publishing profile of a gallery image version.
	PublishingProfile *GalleryApplicationVersionPublishingProfile `json:"publishingProfile,omitempty"`

	// READ-ONLY; This is the replication status of the gallery Image Version.
	ReplicationStatus *ReplicationStatus `json:"replicationStatus,omitempty" azure:"ro"`
}

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfile struct {
	GalleryArtifactPublishingProfileBase
	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool               `json:"enableHealthCheck,omitempty"`
	ManageActions     *UserArtifactManage `json:"manageActions,omitempty"`

	// The source image from which the Image Version is going to be created.
	Source *UserArtifactSource `json:"source,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryApplicationVersionPublishingProfile.
func (g GalleryApplicationVersionPublishingProfile) MarshalJSON() ([]byte, error) {
	objectMap := g.GalleryArtifactPublishingProfileBase.marshalInternal()
	populate(objectMap, "enableHealthCheck", g.EnableHealthCheck)
	populate(objectMap, "manageActions", g.ManageActions)
	populate(objectMap, "source", g.Source)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GalleryApplicationVersionPublishingProfile.
func (g *GalleryApplicationVersionPublishingProfile) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "enableHealthCheck":
			err = unpopulate(val, &g.EnableHealthCheck)
			delete(rawMsg, key)
		case "manageActions":
			err = unpopulate(val, &g.ManageActions)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &g.Source)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return g.GalleryArtifactPublishingProfileBase.unmarshalInternal(rawMsg)
}

// GalleryApplicationVersionResponse is the response envelope for operations that return a GalleryApplicationVersion type.
type GalleryApplicationVersionResponse struct {
	// Specifies information about the gallery Application Version that you want to create or update.
	GalleryApplicationVersion *GalleryApplicationVersion

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the gallery Application Version that you want to update.
type GalleryApplicationVersionUpdate struct {
	UpdateResourceDefinition
	// Describes the properties of a gallery Image Version.
	Properties *GalleryApplicationVersionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryApplicationVersionUpdate.
func (g GalleryApplicationVersionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := g.UpdateResourceDefinition.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GalleryApplicationVersionsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryApplicationVersions.BeginCreateOrUpdate method.
type GalleryApplicationVersionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationVersionsBeginDeleteOptions contains the optional parameters for the GalleryApplicationVersions.BeginDelete method.
type GalleryApplicationVersionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationVersionsBeginUpdateOptions contains the optional parameters for the GalleryApplicationVersions.BeginUpdate method.
type GalleryApplicationVersionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationVersionsGetOptions contains the optional parameters for the GalleryApplicationVersions.Get method.
type GalleryApplicationVersionsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *ReplicationStatusTypes
}

// GalleryApplicationVersionsListByGalleryApplicationOptions contains the optional parameters for the GalleryApplicationVersions.ListByGalleryApplication
// method.
type GalleryApplicationVersionsListByGalleryApplicationOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryApplications.BeginCreateOrUpdate method.
type GalleryApplicationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationsBeginDeleteOptions contains the optional parameters for the GalleryApplications.BeginDelete method.
type GalleryApplicationsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationsBeginUpdateOptions contains the optional parameters for the GalleryApplications.BeginUpdate method.
type GalleryApplicationsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationsGetOptions contains the optional parameters for the GalleryApplications.Get method.
type GalleryApplicationsGetOptions struct {
	// placeholder for future optional parameters
}

// GalleryApplicationsListByGalleryOptions contains the optional parameters for the GalleryApplications.ListByGallery method.
type GalleryApplicationsListByGalleryOptions struct {
	// placeholder for future optional parameters
}

// Describes the basic gallery artifact publishing profile.
type GalleryArtifactPublishingProfileBase struct {
	// The end of life date of the gallery Image Version. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty"`

	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool `json:"excludeFromLatest,omitempty"`

	// READ-ONLY; The timestamp for when the gallery Image Version is published.
	PublishedDate *time.Time `json:"publishedDate,omitempty" azure:"ro"`

	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified.
	// This property is updatable.
	ReplicaCount *int32 `json:"replicaCount,omitempty"`

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType `json:"storageAccountType,omitempty"`

	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions *[]*TargetRegion `json:"targetRegions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryArtifactPublishingProfileBase.
func (g GalleryArtifactPublishingProfileBase) MarshalJSON() ([]byte, error) {
	objectMap := g.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GalleryArtifactPublishingProfileBase.
func (g *GalleryArtifactPublishingProfileBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return g.unmarshalInternal(rawMsg)
}

func (g GalleryArtifactPublishingProfileBase) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(g.EndOfLifeDate))
	populate(objectMap, "excludeFromLatest", g.ExcludeFromLatest)
	populate(objectMap, "publishedDate", (*timeRFC3339)(g.PublishedDate))
	populate(objectMap, "replicaCount", g.ReplicaCount)
	populate(objectMap, "storageAccountType", g.StorageAccountType)
	populate(objectMap, "targetRegions", g.TargetRegions)
	return objectMap
}

func (g *GalleryArtifactPublishingProfileBase) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "excludeFromLatest":
			err = unpopulate(val, &g.ExcludeFromLatest)
			delete(rawMsg, key)
		case "publishedDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.PublishedDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "replicaCount":
			err = unpopulate(val, &g.ReplicaCount)
			delete(rawMsg, key)
		case "storageAccountType":
			err = unpopulate(val, &g.StorageAccountType)
			delete(rawMsg, key)
		case "targetRegions":
			err = unpopulate(val, &g.TargetRegions)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// The source image from which the Image Version is going to be created.
type GalleryArtifactSource struct {
	// The managed artifact.
	ManagedImage *ManagedArtifact `json:"managedImage,omitempty"`
}

// The gallery artifact version source.
type GalleryArtifactVersionSource struct {
	// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, or user image.
	ID *string `json:"id,omitempty"`
}

// This is the data disk image.
type GalleryDataDiskImage struct {
	GalleryDiskImage
	// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore
	// must be unique for each data disk attached to the
	// Virtual Machine.
	Lun *int32 `json:"lun,omitempty"`
}

// This is the disk image base class.
type GalleryDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *HostCaching `json:"hostCaching,omitempty"`

	// READ-ONLY; This property indicates the size of the VHD to be created.
	SizeInGB *int32 `json:"sizeInGB,omitempty" azure:"ro"`

	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource `json:"source,omitempty"`
}

// Describes the gallery unique name.
type GalleryIdentifier struct {
	// READ-ONLY; The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
	UniqueName *string `json:"uniqueName,omitempty" azure:"ro"`
}

// Specifies information about the gallery Image Definition that you want to create or update.
type GalleryImage struct {
	Resource
	// Describes the properties of a gallery Image Definition.
	Properties *GalleryImageProperties `json:"properties,omitempty"`
}

// This is the gallery Image Definition identifier.
type GalleryImageIdentifier struct {
	// The name of the gallery Image Definition offer.
	Offer *string `json:"offer,omitempty"`

	// The name of the gallery Image Definition publisher.
	Publisher *string `json:"publisher,omitempty"`

	// The name of the gallery Image Definition SKU.
	SKU *string `json:"sku,omitempty"`
}

// The List Gallery Images operation response.
type GalleryImageList struct {
	// The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery Image Definitions.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of Shared Image Gallery images.
	Value *[]*GalleryImage `json:"value,omitempty"`
}

// GalleryImageListResponse is the response envelope for operations that return a GalleryImageList type.
type GalleryImageListResponse struct {
	// The List Gallery Images operation response.
	GalleryImageList *GalleryImageList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImagePollerResponse is the response envelope for operations that asynchronously return a GalleryImage type.
type GalleryImagePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GalleryImageResponse, error)

	// Poller contains an initialized poller.
	Poller GalleryImagePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a gallery Image Definition.
type GalleryImageProperties struct {
	// The description of this gallery Image Definition resource. This property is updatable.
	Description *string `json:"description,omitempty"`

	// Describes the disallowed disk types.
	Disallowed *Disallowed `json:"disallowed,omitempty"`

	// The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty"`

	// The Eula agreement for the gallery Image Definition.
	Eula *string `json:"eula,omitempty"`

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration `json:"hyperVGeneration,omitempty"`

	// This is the gallery Image Definition identifier.
	Identifier *GalleryImageIdentifier `json:"identifier,omitempty"`

	// This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
	OSState *OperatingSystemStateTypes `json:"osState,omitempty"`

	// This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// The privacy statement uri.
	PrivacyStatementURI *string `json:"privacyStatementUri,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryImagePropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Describes the gallery Image Definition purchase plan. This is used by marketplace images.
	PurchasePlan *ImagePurchasePlan `json:"purchasePlan,omitempty"`

	// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
	Recommended *RecommendedMachineConfiguration `json:"recommended,omitempty"`

	// The release note uri.
	ReleaseNoteURI *string `json:"releaseNoteUri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryImageProperties.
func (g GalleryImageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", g.Description)
	populate(objectMap, "disallowed", g.Disallowed)
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(g.EndOfLifeDate))
	populate(objectMap, "eula", g.Eula)
	populate(objectMap, "hyperVGeneration", g.HyperVGeneration)
	populate(objectMap, "identifier", g.Identifier)
	populate(objectMap, "osState", g.OSState)
	populate(objectMap, "osType", g.OSType)
	populate(objectMap, "privacyStatementUri", g.PrivacyStatementURI)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "purchasePlan", g.PurchasePlan)
	populate(objectMap, "recommended", g.Recommended)
	populate(objectMap, "releaseNoteUri", g.ReleaseNoteURI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GalleryImageProperties.
func (g *GalleryImageProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &g.Description)
			delete(rawMsg, key)
		case "disallowed":
			err = unpopulate(val, &g.Disallowed)
			delete(rawMsg, key)
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			g.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "eula":
			err = unpopulate(val, &g.Eula)
			delete(rawMsg, key)
		case "hyperVGeneration":
			err = unpopulate(val, &g.HyperVGeneration)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, &g.Identifier)
			delete(rawMsg, key)
		case "osState":
			err = unpopulate(val, &g.OSState)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &g.OSType)
			delete(rawMsg, key)
		case "privacyStatementUri":
			err = unpopulate(val, &g.PrivacyStatementURI)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &g.ProvisioningState)
			delete(rawMsg, key)
		case "purchasePlan":
			err = unpopulate(val, &g.PurchasePlan)
			delete(rawMsg, key)
		case "recommended":
			err = unpopulate(val, &g.Recommended)
			delete(rawMsg, key)
		case "releaseNoteUri":
			err = unpopulate(val, &g.ReleaseNoteURI)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GalleryImageResponse is the response envelope for operations that return a GalleryImage type.
type GalleryImageResponse struct {
	// Specifies information about the gallery Image Definition that you want to create or update.
	GalleryImage *GalleryImage

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the gallery Image Definition that you want to update.
type GalleryImageUpdate struct {
	UpdateResourceDefinition
	// Describes the properties of a gallery Image Definition.
	Properties *GalleryImageProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryImageUpdate.
func (g GalleryImageUpdate) MarshalJSON() ([]byte, error) {
	objectMap := g.UpdateResourceDefinition.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// Specifies information about the gallery Image Version that you want to create or update.
type GalleryImageVersion struct {
	Resource
	// Describes the properties of a gallery Image Version.
	Properties *GalleryImageVersionProperties `json:"properties,omitempty"`
}

// The List Gallery Image version operation response.
type GalleryImageVersionList struct {
	// The uri to fetch the next page of gallery Image Versions. Call ListNext() with this to fetch the next page of gallery Image Versions.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of gallery Image Versions.
	Value *[]*GalleryImageVersion `json:"value,omitempty"`
}

// GalleryImageVersionListResponse is the response envelope for operations that return a GalleryImageVersionList type.
type GalleryImageVersionListResponse struct {
	// The List Gallery Image version operation response.
	GalleryImageVersionList *GalleryImageVersionList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GalleryImageVersionPollerResponse is the response envelope for operations that asynchronously return a GalleryImageVersion type.
type GalleryImageVersionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GalleryImageVersionResponse, error)

	// Poller contains an initialized poller.
	Poller GalleryImageVersionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a gallery Image Version.
type GalleryImageVersionProperties struct {
	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryImageVersionPropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The publishing profile of a gallery Image Version.
	PublishingProfile *GalleryImageVersionPublishingProfile `json:"publishingProfile,omitempty"`

	// READ-ONLY; This is the replication status of the gallery Image Version.
	ReplicationStatus *ReplicationStatus `json:"replicationStatus,omitempty" azure:"ro"`

	// This is the storage profile of a Gallery Image Version.
	StorageProfile *GalleryImageVersionStorageProfile `json:"storageProfile,omitempty"`
}

// The publishing profile of a gallery Image Version.
type GalleryImageVersionPublishingProfile struct {
	GalleryArtifactPublishingProfileBase
}

// GalleryImageVersionResponse is the response envelope for operations that return a GalleryImageVersion type.
type GalleryImageVersionResponse struct {
	// Specifies information about the gallery Image Version that you want to create or update.
	GalleryImageVersion *GalleryImageVersion

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfile struct {
	// A list of data disk images.
	DataDiskImages *[]*GalleryDataDiskImage `json:"dataDiskImages,omitempty"`

	// This is the OS disk image.
	OSDiskImage *GalleryOSDiskImage `json:"osDiskImage,omitempty"`

	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource `json:"source,omitempty"`
}

// Specifies information about the gallery Image Version that you want to update.
type GalleryImageVersionUpdate struct {
	UpdateResourceDefinition
	// Describes the properties of a gallery Image Version.
	Properties *GalleryImageVersionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryImageVersionUpdate.
func (g GalleryImageVersionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := g.UpdateResourceDefinition.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GalleryImageVersionsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryImageVersions.BeginCreateOrUpdate method.
type GalleryImageVersionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryImageVersionsBeginDeleteOptions contains the optional parameters for the GalleryImageVersions.BeginDelete method.
type GalleryImageVersionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GalleryImageVersionsBeginUpdateOptions contains the optional parameters for the GalleryImageVersions.BeginUpdate method.
type GalleryImageVersionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryImageVersionsGetOptions contains the optional parameters for the GalleryImageVersions.Get method.
type GalleryImageVersionsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *ReplicationStatusTypes
}

// GalleryImageVersionsListByGalleryImageOptions contains the optional parameters for the GalleryImageVersions.ListByGalleryImage method.
type GalleryImageVersionsListByGalleryImageOptions struct {
	// placeholder for future optional parameters
}

// GalleryImagesBeginCreateOrUpdateOptions contains the optional parameters for the GalleryImages.BeginCreateOrUpdate method.
type GalleryImagesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryImagesBeginDeleteOptions contains the optional parameters for the GalleryImages.BeginDelete method.
type GalleryImagesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// GalleryImagesBeginUpdateOptions contains the optional parameters for the GalleryImages.BeginUpdate method.
type GalleryImagesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// GalleryImagesGetOptions contains the optional parameters for the GalleryImages.Get method.
type GalleryImagesGetOptions struct {
	// placeholder for future optional parameters
}

// GalleryImagesListByGalleryOptions contains the optional parameters for the GalleryImages.ListByGallery method.
type GalleryImagesListByGalleryOptions struct {
	// placeholder for future optional parameters
}

// The List Galleries operation response.
type GalleryList struct {
	// The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of galleries.
	Value *[]*Gallery `json:"value,omitempty"`
}

// GalleryListResponse is the response envelope for operations that return a GalleryList type.
type GalleryListResponse struct {
	// The List Galleries operation response.
	GalleryList *GalleryList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// This is the OS disk image.
type GalleryOSDiskImage struct {
	GalleryDiskImage
}

// GalleryPollerResponse is the response envelope for operations that asynchronously return a Gallery type.
type GalleryPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GalleryResponse, error)

	// Poller contains an initialized poller.
	Poller GalleryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Shared Image Gallery.
type GalleryProperties struct {
	// The description of this Shared Image Gallery resource. This property is updatable.
	Description *string `json:"description,omitempty"`

	// Describes the gallery unique name.
	Identifier *GalleryIdentifier `json:"identifier,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryPropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// GalleryResponse is the response envelope for operations that return a Gallery type.
type GalleryResponse struct {
	// Specifies information about the Shared Image Gallery that you want to create or update.
	Gallery *Gallery

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the Shared Image Gallery that you want to update.
type GalleryUpdate struct {
	UpdateResourceDefinition
	// Describes the properties of a Shared Image Gallery.
	Properties *GalleryProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GalleryUpdate.
func (g GalleryUpdate) MarshalJSON() ([]byte, error) {
	objectMap := g.UpdateResourceDefinition.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// Data used for requesting a SAS.
type GrantAccessData struct {
	Access *AccessLevel `json:"access,omitempty"`

	// Time duration in seconds until the SAS access expires.
	DurationInSeconds *int32 `json:"durationInSeconds,omitempty"`
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies the hardware settings for the virtual machine.
type HardwareProfile struct {
	// Specifies the size of the virtual machine.
	// The enum data type is currently deprecated and will be removed by December 23rd 2023.
	// Recommended way to get the list of available sizes is using these APIs:
	// List all available virtual machine sizes in an availability set [https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes]
	// List all available virtual machine sizes in a region [https://docs.microsoft.com/en-us/rest/api/compute/resourceskus/list]
	// List all available virtual machine sizes for resizing [https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes]. For more information
	// about virtual machine sizes, see Sizes for
	// virtual machines [https://docs.microsoft.com/en-us/azure/virtual-machines/sizes].
	// The available VM sizes depend on region and availability set.
	VMSize *VirtualMachineSizeTypes `json:"vmSize,omitempty"`
}

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided,
// the destination virtual hard drive must not
// exist.
type Image struct {
	Resource
	// The extended location of the Image.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Describes the properties of an Image.
	Properties *ImageProperties `json:"properties,omitempty"`
}

// Describes a data disk.
type ImageDataDisk struct {
	ImageDisk
	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data
	// disk attached to a VM.
	Lun *int32 `json:"lun,omitempty"`
}

// Describes a image disk.
type ImageDisk struct {
	// The Virtual Hard Disk.
	BlobURI *string `json:"blobUri,omitempty"`

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes `json:"caching,omitempty"`

	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `json:"diskEncryptionSet,omitempty"`

	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The managedDisk.
	ManagedDisk *SubResource `json:"managedDisk,omitempty"`

	// The snapshot.
	Snapshot *SubResource `json:"snapshot,omitempty"`

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *StorageAccountTypes `json:"storageAccountType,omitempty"`
}

// The source image used for creating the disk.
type ImageDiskReference struct {
	// A relative uri containing either a Platform Image Repository or user image reference.
	ID *string `json:"id,omitempty"`

	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field
	// is null.
	Lun *int32 `json:"lun,omitempty"`
}

// The List Image operation response.
type ImageListResult struct {
	// The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of Images.
	Value *[]*Image `json:"value,omitempty"`
}

// ImageListResultResponse is the response envelope for operations that return a ImageListResult type.
type ImageListResultResponse struct {
	// The List Image operation response.
	ImageListResult *ImageListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes an Operating System disk.
type ImageOSDisk struct {
	ImageDisk
	// The OS State.
	OSState *OperatingSystemStateTypes `json:"osState,omitempty"`

	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes `json:"osType,omitempty"`
}

// ImagePollerResponse is the response envelope for operations that asynchronously return a Image type.
type ImagePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ImageResponse, error)

	// Poller contains an initialized poller.
	Poller ImagePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of an Image.
type ImageProperties struct {
	// Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need
	// the user to specify the value, if the source is
	// managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource.
	HyperVGeneration *HyperVGenerationTypes `json:"hyperVGeneration,omitempty"`

	// READ-ONLY; The provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// The source virtual machine from which Image is created.
	SourceVirtualMachine *SubResource `json:"sourceVirtualMachine,omitempty"`

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *ImageStorageProfile `json:"storageProfile,omitempty"`
}

// Describes the gallery Image Definition purchase plan. This is used by marketplace images.
type ImagePurchasePlan struct {
	// The plan ID.
	Name *string `json:"name,omitempty"`

	// The product ID.
	Product *string `json:"product,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This
// element is required when you want to use a platform
// image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only
// be set when you create the scale set.
type ImageReference struct {
	SubResource
	// READ-ONLY; Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs
	// from 'version', only if the value specified in
	// 'version' field is 'latest'.
	ExactVersion *string `json:"exactVersion,omitempty" azure:"ro"`

	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `json:"offer,omitempty"`

	// The image publisher.
	Publisher *string `json:"publisher,omitempty"`

	// The image SKU.
	SKU *string `json:"sku,omitempty"`

	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'.
	// Major, Minor, and Build are decimal numbers.
	// Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update
	// after deploy time even if a new version becomes
	// available.
	Version *string `json:"version,omitempty"`
}

// ImageResponse is the response envelope for operations that return a Image type.
type ImageResponse struct {
	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided,
	// the destination virtual hard drive must not exist.
	Image *Image

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes a storage profile.
type ImageStorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	DataDisks *[]*ImageDataDisk `json:"dataDisks,omitempty"`

	// Specifies information about the operating system disk used by the virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	OSDisk *ImageOSDisk `json:"osDisk,omitempty"`

	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant
	// Storage (ZRS).
	ZoneResilient *bool `json:"zoneResilient,omitempty"`
}

// The source user image virtual hard disk. Only tags may be updated.
type ImageUpdate struct {
	UpdateResource
	// Describes the properties of an Image.
	Properties *ImageProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ImageUpdate.
func (i ImageUpdate) MarshalJSON() ([]byte, error) {
	objectMap := i.UpdateResource.marshalInternal()
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// ImagesBeginCreateOrUpdateOptions contains the optional parameters for the Images.BeginCreateOrUpdate method.
type ImagesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ImagesBeginDeleteOptions contains the optional parameters for the Images.BeginDelete method.
type ImagesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ImagesBeginUpdateOptions contains the optional parameters for the Images.BeginUpdate method.
type ImagesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ImagesGetOptions contains the optional parameters for the Images.Get method.
type ImagesGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// ImagesListByResourceGroupOptions contains the optional parameters for the Images.ListByResourceGroup method.
type ImagesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ImagesListOptions contains the optional parameters for the Images.List method.
type ImagesListOptions struct {
	// placeholder for future optional parameters
}

// Inner error details.
type InnerError struct {
	// The internal error message or exception dump.
	Errordetail *string `json:"errordetail,omitempty"`

	// The exception type.
	Exceptiontype *string `json:"exceptiontype,omitempty"`
}

// Instance view status.
type InstanceViewStatus struct {
	// The status code.
	Code *string `json:"code,omitempty"`

	// The short localizable label for the status.
	DisplayStatus *string `json:"displayStatus,omitempty"`

	// The level code.
	Level *StatusLevelTypes `json:"level,omitempty"`

	// The detailed status message, including for alerts and error messages.
	Message *string `json:"message,omitempty"`

	// The time of the status.
	Time *time.Time `json:"time,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InstanceViewStatus.
func (i InstanceViewStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", i.Code)
	populate(objectMap, "displayStatus", i.DisplayStatus)
	populate(objectMap, "level", i.Level)
	populate(objectMap, "message", i.Message)
	populate(objectMap, "time", (*timeRFC3339)(i.Time))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InstanceViewStatus.
func (i *InstanceViewStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, &i.Code)
			delete(rawMsg, key)
		case "displayStatus":
			err = unpopulate(val, &i.DisplayStatus)
			delete(rawMsg, key)
		case "level":
			err = unpopulate(val, &i.Level)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &i.Message)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			i.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSet struct {
	// Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
	KeyURL *string `json:"keyUrl,omitempty"`

	// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as
	// the Disk Encryption Set subscription.
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference struct {
	// Url pointing to a key or secret in KeyVault
	KeyURL *string `json:"keyUrl,omitempty"`

	// Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// Url pointing to a key or secret in KeyVault
	SecretURL *string `json:"secretUrl,omitempty"`

	// Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault `json:"sourceVault,omitempty"`
}

// Describes a reference to Key Vault Key
type KeyVaultKeyReference struct {
	// The URL referencing a key encryption key in Key Vault.
	KeyURL *string `json:"keyUrl,omitempty"`

	// The relative URL of the Key Vault containing the key.
	SourceVault *SubResource `json:"sourceVault,omitempty"`
}

// Describes a reference to Key Vault Secret
type KeyVaultSecretReference struct {
	// The URL referencing a secret in a Key Vault.
	SecretURL *string `json:"secretUrl,omitempty"`

	// The relative URL of the Key Vault containing the secret.
	SourceVault *SubResource `json:"sourceVault,omitempty"`
}

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummary struct {
	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
	ExcludedPatchCount *int32 `json:"excludedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The count of patches that failed installation.
	FailedPatchCount *int32 `json:"failedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	InstallationActivityID *string `json:"installationActivityId,omitempty" azure:"ro"`

	// READ-ONLY; The count of patches that successfully installed.
	InstalledPatchCount *int32 `json:"installedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Describes whether the operation ran out of time before it completed all its intended actions
	MaintenanceWindowExceeded *bool `json:"maintenanceWindowExceeded,omitempty" azure:"ro"`

	// READ-ONLY; The number of all available patches but not going to be installed because it didn't match a classification or inclusion list entry.
	NotSelectedPatchCount *int32 `json:"notSelectedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of all available patches expected to be installed over the course of the patch installation operation.
	PendingPatchCount *int32 `json:"pendingPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become
	// "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LastPatchInstallationSummary.
func (l LastPatchInstallationSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", l.Error)
	populate(objectMap, "excludedPatchCount", l.ExcludedPatchCount)
	populate(objectMap, "failedPatchCount", l.FailedPatchCount)
	populate(objectMap, "installationActivityId", l.InstallationActivityID)
	populate(objectMap, "installedPatchCount", l.InstalledPatchCount)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(l.LastModifiedTime))
	populate(objectMap, "maintenanceWindowExceeded", l.MaintenanceWindowExceeded)
	populate(objectMap, "notSelectedPatchCount", l.NotSelectedPatchCount)
	populate(objectMap, "pendingPatchCount", l.PendingPatchCount)
	populate(objectMap, "startTime", (*timeRFC3339)(l.StartTime))
	populate(objectMap, "status", l.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LastPatchInstallationSummary.
func (l *LastPatchInstallationSummary) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &l.Error)
			delete(rawMsg, key)
		case "excludedPatchCount":
			err = unpopulate(val, &l.ExcludedPatchCount)
			delete(rawMsg, key)
		case "failedPatchCount":
			err = unpopulate(val, &l.FailedPatchCount)
			delete(rawMsg, key)
		case "installationActivityId":
			err = unpopulate(val, &l.InstallationActivityID)
			delete(rawMsg, key)
		case "installedPatchCount":
			err = unpopulate(val, &l.InstalledPatchCount)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "maintenanceWindowExceeded":
			err = unpopulate(val, &l.MaintenanceWindowExceeded)
			delete(rawMsg, key)
		case "notSelectedPatchCount":
			err = unpopulate(val, &l.NotSelectedPatchCount)
			delete(rawMsg, key)
		case "pendingPatchCount":
			err = unpopulate(val, &l.PendingPatchCount)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &l.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Specifies the Linux operating system settings on the virtual machine.
// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `json:"disablePasswordAuthentication,omitempty"`

	// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
	PatchSettings *LinuxPatchSettings `json:"patchSettings,omitempty"`

	// Indicates whether virtual machine agent should be provisioned on the virtual machine.
	// When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM
	// so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	// Specifies the ssh key configuration for a Linux OS.
	SSH *SSHConfiguration `json:"ssh,omitempty"`
}

// Input for InstallPatches on a Linux VM, as directly received by the API
type LinuxParameters struct {
	// The update classifications to select when installing patches for Linux.
	ClassificationsToInclude *[]*VMGuestPatchClassificationLinux `json:"classificationsToInclude,omitempty"`

	// This is used as a maintenance run identifier for Auto VM Guest Patching in Linux.
	MaintenanceRunID *string `json:"maintenanceRunId,omitempty"`

	// packages to exclude in the patch operation. Format: packageName_packageVersion
	PackageNameMasksToExclude *[]*string `json:"packageNameMasksToExclude,omitempty"`

	// packages to include in the patch operation. Format: packageName_packageVersion
	PackageNameMasksToInclude *[]*string `json:"packageNameMasksToInclude,omitempty"`
}

// Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettings struct {
	// Specifies the mode of VM Guest Patching to IaaS virtual machine.
	// Possible values are:
	// ImageDefault - The virtual machine's default patching configuration is used.
	// AutomaticByPlatform - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
	PatchMode *LinuxVMGuestPatchMode `json:"patchMode,omitempty"`
}

// The List Usages operation response.
type ListUsagesResult struct {
	// The URI to fetch the next page of compute resource usage information. Call ListNext() with this to fetch the next page of compute resource usage information.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of compute resource usages.
	Value *[]*Usage `json:"value,omitempty"`
}

// ListUsagesResultResponse is the response envelope for operations that return a ListUsagesResult type.
type ListUsagesResultResponse struct {
	// The List Usages operation response.
	ListUsagesResult *ListUsagesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogAnalyticsBeginExportRequestRateByIntervalOptions contains the optional parameters for the LogAnalytics.BeginExportRequestRateByInterval method.
type LogAnalyticsBeginExportRequestRateByIntervalOptions struct {
	// placeholder for future optional parameters
}

// LogAnalyticsBeginExportThrottledRequestsOptions contains the optional parameters for the LogAnalytics.BeginExportThrottledRequests method.
type LogAnalyticsBeginExportThrottledRequestsOptions struct {
	// placeholder for future optional parameters
}

// Api input base class for LogAnalytics Api.
type LogAnalyticsInputBase struct {
	// SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
	BlobContainerSasURI *string `json:"blobContainerSasUri,omitempty"`

	// From time of the query
	FromTime *time.Time `json:"fromTime,omitempty"`

	// Group query result by Client Application ID.
	GroupByClientApplicationID *bool `json:"groupByClientApplicationId,omitempty"`

	// Group query result by Operation Name.
	GroupByOperationName *bool `json:"groupByOperationName,omitempty"`

	// Group query result by Resource Name.
	GroupByResourceName *bool `json:"groupByResourceName,omitempty"`

	// Group query result by Throttle Policy applied.
	GroupByThrottlePolicy *bool `json:"groupByThrottlePolicy,omitempty"`

	// Group query result by User Agent.
	GroupByUserAgent *bool `json:"groupByUserAgent,omitempty"`

	// To time of the query
	ToTime *time.Time `json:"toTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LogAnalyticsInputBase.
func (l LogAnalyticsInputBase) MarshalJSON() ([]byte, error) {
	objectMap := l.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LogAnalyticsInputBase.
func (l *LogAnalyticsInputBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return l.unmarshalInternal(rawMsg)
}

func (l LogAnalyticsInputBase) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blobContainerSasUri", l.BlobContainerSasURI)
	populate(objectMap, "fromTime", (*timeRFC3339)(l.FromTime))
	populate(objectMap, "groupByClientApplicationId", l.GroupByClientApplicationID)
	populate(objectMap, "groupByOperationName", l.GroupByOperationName)
	populate(objectMap, "groupByResourceName", l.GroupByResourceName)
	populate(objectMap, "groupByThrottlePolicy", l.GroupByThrottlePolicy)
	populate(objectMap, "groupByUserAgent", l.GroupByUserAgent)
	populate(objectMap, "toTime", (*timeRFC3339)(l.ToTime))
	return objectMap
}

func (l *LogAnalyticsInputBase) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blobContainerSasUri":
			err = unpopulate(val, &l.BlobContainerSasURI)
			delete(rawMsg, key)
		case "fromTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.FromTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "groupByClientApplicationId":
			err = unpopulate(val, &l.GroupByClientApplicationID)
			delete(rawMsg, key)
		case "groupByOperationName":
			err = unpopulate(val, &l.GroupByOperationName)
			delete(rawMsg, key)
		case "groupByResourceName":
			err = unpopulate(val, &l.GroupByResourceName)
			delete(rawMsg, key)
		case "groupByThrottlePolicy":
			err = unpopulate(val, &l.GroupByThrottlePolicy)
			delete(rawMsg, key)
		case "groupByUserAgent":
			err = unpopulate(val, &l.GroupByUserAgent)
			delete(rawMsg, key)
		case "toTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.ToTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LogAnalytics operation status response
type LogAnalyticsOperationResult struct {
	// READ-ONLY; LogAnalyticsOutput
	Properties *LogAnalyticsOutput `json:"properties,omitempty" azure:"ro"`
}

// LogAnalyticsOperationResultPollerResponse is the response envelope for operations that asynchronously return a LogAnalyticsOperationResult type.
type LogAnalyticsOperationResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (LogAnalyticsOperationResultResponse, error)

	// Poller contains an initialized poller.
	Poller LogAnalyticsOperationResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogAnalyticsOperationResultResponse is the response envelope for operations that return a LogAnalyticsOperationResult type.
type LogAnalyticsOperationResultResponse struct {
	// LogAnalytics operation status response
	LogAnalyticsOperationResult *LogAnalyticsOperationResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogAnalytics output properties
type LogAnalyticsOutput struct {
	// READ-ONLY; Output file Uri path to blob container.
	Output *string `json:"output,omitempty" azure:"ro"`
}

// Maintenance Operation Status.
type MaintenanceRedeployStatus struct {
	// True, if customer is allowed to perform Maintenance.
	IsCustomerInitiatedMaintenanceAllowed *bool `json:"isCustomerInitiatedMaintenanceAllowed,omitempty"`

	// Message returned for the last Maintenance Operation.
	LastOperationMessage *string `json:"lastOperationMessage,omitempty"`

	// The Last Maintenance Operation Result Code.
	LastOperationResultCode *MaintenanceOperationResultCodeTypes `json:"lastOperationResultCode,omitempty"`

	// End Time for the Maintenance Window.
	MaintenanceWindowEndTime *time.Time `json:"maintenanceWindowEndTime,omitempty"`

	// Start Time for the Maintenance Window.
	MaintenanceWindowStartTime *time.Time `json:"maintenanceWindowStartTime,omitempty"`

	// End Time for the Pre Maintenance Window.
	PreMaintenanceWindowEndTime *time.Time `json:"preMaintenanceWindowEndTime,omitempty"`

	// Start Time for the Pre Maintenance Window.
	PreMaintenanceWindowStartTime *time.Time `json:"preMaintenanceWindowStartTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MaintenanceRedeployStatus.
func (m MaintenanceRedeployStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "isCustomerInitiatedMaintenanceAllowed", m.IsCustomerInitiatedMaintenanceAllowed)
	populate(objectMap, "lastOperationMessage", m.LastOperationMessage)
	populate(objectMap, "lastOperationResultCode", m.LastOperationResultCode)
	populate(objectMap, "maintenanceWindowEndTime", (*timeRFC3339)(m.MaintenanceWindowEndTime))
	populate(objectMap, "maintenanceWindowStartTime", (*timeRFC3339)(m.MaintenanceWindowStartTime))
	populate(objectMap, "preMaintenanceWindowEndTime", (*timeRFC3339)(m.PreMaintenanceWindowEndTime))
	populate(objectMap, "preMaintenanceWindowStartTime", (*timeRFC3339)(m.PreMaintenanceWindowStartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MaintenanceRedeployStatus.
func (m *MaintenanceRedeployStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "isCustomerInitiatedMaintenanceAllowed":
			err = unpopulate(val, &m.IsCustomerInitiatedMaintenanceAllowed)
			delete(rawMsg, key)
		case "lastOperationMessage":
			err = unpopulate(val, &m.LastOperationMessage)
			delete(rawMsg, key)
		case "lastOperationResultCode":
			err = unpopulate(val, &m.LastOperationResultCode)
			delete(rawMsg, key)
		case "maintenanceWindowEndTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.MaintenanceWindowEndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "maintenanceWindowStartTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.MaintenanceWindowStartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "preMaintenanceWindowEndTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.PreMaintenanceWindowEndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "preMaintenanceWindowStartTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.PreMaintenanceWindowStartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// The managed artifact.
type ManagedArtifact struct {
	// The managed artifact id.
	ID *string `json:"id,omitempty"`
}

// The parameters of a managed disk.
type ManagedDiskParameters struct {
	SubResource
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `json:"diskEncryptionSet,omitempty"`

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *StorageAccountTypes `json:"storageAccountType,omitempty"`
}

// Describes a network interface reference.
type NetworkInterfaceReference struct {
	SubResource
	// Describes a network interface reference properties.
	Properties *NetworkInterfaceReferenceProperties `json:"properties,omitempty"`
}

// Describes a network interface reference properties.
type NetworkInterfaceReferenceProperties struct {
	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`
}

// Specifies the network interfaces of the virtual machine.
type NetworkProfile struct {
	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces *[]*NetworkInterfaceReference `json:"networkInterfaces,omitempty"`
}

// Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type OSDisk struct {
	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *CachingTypes `json:"caching,omitempty"`

	// Specifies how the virtual machine should be created.
	// Possible values are:
	// Attach \u2013 This value is used when you are using a specialized disk to create the virtual machine.
	// FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference
	// element described above. If you are
	// using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes `json:"createOption,omitempty"`

	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings `json:"diffDiskSettings,omitempty"`

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// Specifies the encryption settings for the OS Disk.
	// Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettings `json:"encryptionSettings,omitempty"`

	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided,
	// the destination virtual hard drive must not
	// exist.
	Image *VirtualHardDisk `json:"image,omitempty"`

	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters `json:"managedDisk,omitempty"`

	// The disk name.
	Name *string `json:"name,omitempty"`

	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// The virtual hard disk.
	Vhd *VirtualHardDisk `json:"vhd,omitempty"`

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

// Contains the os disk image information.
type OSDiskImage struct {
	// The operating system of the osDiskImage.
	OperatingSystem *OperatingSystemTypes `json:"operatingSystem,omitempty"`
}

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryption struct {
	DiskImageEncryption
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account.
	// Minimum-length (Windows): 8 characters
	// Minimum-length (Linux): 6 characters
	// Max-length (Windows): 123 characters
	// Max-length (Linux): 72 characters
	// Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	// Has lower characters
	// Has upper characters
	// Has a digit
	// Has a special character (Regex match [\W_])
	// Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	// For resetting the password, see How to reset the Remote Desktop service or its login password in a Windows VM
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
	// For resetting root password, see Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password]
	AdminPassword *string `json:"adminPassword,omitempty"`

	// Specifies the name of the administrator account.
	// This property cannot be updated after the VM is created.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	// "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters
	// For root access to the Linux VM, see Using root privileges on Linux virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For a list of built-in system users on Linux that should not be used in this field, see Selecting User Names for Linux on Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	AdminUsername *string `json:"adminUsername,omitempty"`

	// Specifies whether extension operations should be allowed on the virtual machine.
	// This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool `json:"allowExtensionOperations,omitempty"`

	// Specifies the host OS name of the virtual machine.
	// This name cannot be updated after the VM is created.
	// Max-length (Windows): 15 characters
	// Max-length (Linux): 64 characters.
	// For naming conventions and restrictions see Azure infrastructure services implementation guidelines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions].
	ComputerName *string `json:"computerName,omitempty"`

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine.
	// The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file, for more information see Custom Data on Azure VMs [https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string `json:"customData,omitempty"`

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	LinuxConfiguration *LinuxConfiguration `json:"linuxConfiguration,omitempty"`

	// Specifies whether the guest provision signal is required to infer provision success of the virtual machine. Note: This property is for private testing
	// only, and all customers must not set the property
	// to false.
	RequireGuestProvisionSignal *bool `json:"requireGuestProvisionSignal,omitempty"`

	// Specifies set of certificates that should be installed onto the virtual machine.
	Secrets *[]*VaultSecretGroup `json:"secrets,omitempty"`

	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// The input for OrchestrationServiceState
type OrchestrationServiceStateInput struct {
	// The action to be performed.
	Action *OrchestrationServiceStateAction `json:"action,omitempty"`

	// The name of the service.
	ServiceName *OrchestrationServiceNames `json:"serviceName,omitempty"`
}

// Summary for an orchestration service of a virtual machine scale set.
type OrchestrationServiceSummary struct {
	// READ-ONLY; The name of the service.
	ServiceName *OrchestrationServiceNames `json:"serviceName,omitempty" azure:"ro"`

	// READ-ONLY; The current state of the service.
	ServiceState *OrchestrationServiceState `json:"serviceState,omitempty" azure:"ro"`
}

// Information about a specific patch that was encountered during an installation action.
type PatchInstallationDetail struct {
	// READ-ONLY; The classification(s) of the patch as provided by the patch publisher.
	Classifications *[]*string `json:"classifications,omitempty" azure:"ro"`

	// READ-ONLY; The state of the patch after the installation operation completed.
	InstallationState *PatchInstallationState `json:"installationState,omitempty" azure:"ro"`

	// READ-ONLY; The KBID of the patch. Only applies to Windows patches.
	KbID *string `json:"kbId,omitempty" azure:"ro"`

	// READ-ONLY; The friendly name of the patch.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; A unique identifier for the patch.
	PatchID *string `json:"patchId,omitempty" azure:"ro"`

	// READ-ONLY; The version string of the package. It may conform to Semantic Versioning. Only applies to Linux.
	Version *string `json:"version,omitempty" azure:"ro"`
}

// Specifies settings related to VM Guest Patching on Windows.
type PatchSettings struct {
	// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode'
	// must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool `json:"enableHotpatching,omitempty"`

	// Specifies the mode of VM Guest Patching to IaaS virtual machine.
	// Possible values are:
	// Manual - You control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic
	// updates are disabled; the property
	// WindowsConfiguration.enableAutomaticUpdates must be false
	// AutomaticByOS - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true.
	// AutomaticByPlatform - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates
	// must be true
	PatchMode *WindowsVMGuestPatchMode `json:"patchMode,omitempty"`
}

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
// use a marketplace image from an API, you must
// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
// Get Started ->. Enter any required
// information and then click Save.
type Plan struct {
	// The plan ID.
	Name *string `json:"name,omitempty"`

	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	// The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

// The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string `json:"id,omitempty" azure:"ro"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	// READ-ONLY; private endpoint connection Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; private endpoint connection name
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; private endpoint connection type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// A list of private link resources
type PrivateEndpointConnectionListResult struct {
	// The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
	NextLink *string `json:"nextLink,omitempty"`

	// Array of private endpoint connections
	Value *[]*PrivateEndpointConnection `json:"value,omitempty"`
}

// PrivateEndpointConnectionListResultResponse is the response envelope for operations that return a PrivateEndpointConnectionListResult type.
type PrivateEndpointConnectionListResultResponse struct {
	// A list of private link resources
	PrivateEndpointConnectionListResult *PrivateEndpointConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionPollerResponse is the response envelope for operations that asynchronously return a PrivateEndpointConnection type.
type PrivateEndpointConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateEndpointConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateEndpointConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty" azure:"ro"`

	// A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse struct {
	// The Private Endpoint Connection resource.
	PrivateEndpointConnection *PrivateEndpointConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// A private link resource
type PrivateLinkResource struct {
	// READ-ONLY; private link resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; private link resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`

	// READ-ONLY; private link resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value *[]*PrivateLinkResource `json:"value,omitempty"`
}

// PrivateLinkResourceListResultResponse is the response envelope for operations that return a PrivateLinkResourceListResult type.
type PrivateLinkResourceListResultResponse struct {
	// A list of private link resources
	PrivateLinkResourceListResult *PrivateLinkResourceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers *[]*string `json:"requiredMembers,omitempty" azure:"ro"`

	// The private link resource DNS zone name.
	RequiredZoneNames *[]*string `json:"requiredZoneNames,omitempty"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus `json:"status,omitempty"`
}

// Properties of the disk for which update is pending.
type PropertyUpdatesInProgress struct {
	// The target performance tier of the disk if a tier change operation is in progress.
	TargetTier *string `json:"targetTier,omitempty"`
}

// Specifies information about the proximity placement group.
type ProximityPlacementGroup struct {
	Resource
	// Describes the properties of a Proximity Placement Group.
	Properties *ProximityPlacementGroupProperties `json:"properties,omitempty"`
}

// The List Proximity Placement Group operation response.
type ProximityPlacementGroupListResult struct {
	// The URI to fetch the next page of proximity placement groups.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of proximity placement groups
	Value *[]*ProximityPlacementGroup `json:"value,omitempty"`
}

// ProximityPlacementGroupListResultResponse is the response envelope for operations that return a ProximityPlacementGroupListResult type.
type ProximityPlacementGroupListResultResponse struct {
	// The List Proximity Placement Group operation response.
	ProximityPlacementGroupListResult *ProximityPlacementGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Proximity Placement Group.
type ProximityPlacementGroupProperties struct {
	// READ-ONLY; A list of references to all availability sets in the proximity placement group.
	AvailabilitySets *[]*SubResourceWithColocationStatus `json:"availabilitySets,omitempty" azure:"ro"`

	// Describes colocation status of the Proximity Placement Group.
	ColocationStatus *InstanceViewStatus `json:"colocationStatus,omitempty"`

	// Specifies the type of the proximity placement group.
	// Possible values are:
	// Standard : Co-locate resources within an Azure region or Availability Zone.
	// Ultra : For future use.
	ProximityPlacementGroupType *ProximityPlacementGroupType `json:"proximityPlacementGroupType,omitempty"`

	// READ-ONLY; A list of references to all virtual machine scale sets in the proximity placement group.
	VirtualMachineScaleSets *[]*SubResourceWithColocationStatus `json:"virtualMachineScaleSets,omitempty" azure:"ro"`

	// READ-ONLY; A list of references to all virtual machines in the proximity placement group.
	VirtualMachines *[]*SubResourceWithColocationStatus `json:"virtualMachines,omitempty" azure:"ro"`
}

// ProximityPlacementGroupResponse is the response envelope for operations that return a ProximityPlacementGroup type.
type ProximityPlacementGroupResponse struct {
	// Specifies information about the proximity placement group.
	ProximityPlacementGroup *ProximityPlacementGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Specifies information about the proximity placement group.
type ProximityPlacementGroupUpdate struct {
	UpdateResource
}

// ProximityPlacementGroupsCreateOrUpdateOptions contains the optional parameters for the ProximityPlacementGroups.CreateOrUpdate method.
type ProximityPlacementGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ProximityPlacementGroupsDeleteOptions contains the optional parameters for the ProximityPlacementGroups.Delete method.
type ProximityPlacementGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ProximityPlacementGroupsGetOptions contains the optional parameters for the ProximityPlacementGroups.Get method.
type ProximityPlacementGroupsGetOptions struct {
	// includeColocationStatus=true enables fetching the colocation status of all the resources in the proximity placement group.
	IncludeColocationStatus *string
}

// ProximityPlacementGroupsListByResourceGroupOptions contains the optional parameters for the ProximityPlacementGroups.ListByResourceGroup method.
type ProximityPlacementGroupsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ProximityPlacementGroupsListBySubscriptionOptions contains the optional parameters for the ProximityPlacementGroups.ListBySubscription method.
type ProximityPlacementGroupsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ProximityPlacementGroupsUpdateOptions contains the optional parameters for the ProximityPlacementGroups.Update method.
type ProximityPlacementGroupsUpdateOptions struct {
	// placeholder for future optional parameters
}

// The ProxyOnly Resource model definition.
type ProxyOnlyResource struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlan struct {
	// The plan ID.
	Name *string `json:"name,omitempty"`

	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlanAutoGenerated struct {
	// The plan ID.
	Name *string `json:"name,omitempty"`

	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string `json:"product,omitempty"`

	// The Offer Promotion Code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`
}

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfiguration struct {
	// Describes the resource range.
	Memory *ResourceRange `json:"memory,omitempty"`

	// Describes the resource range.
	VCPUs *ResourceRange `json:"vCPUs,omitempty"`
}

// Response after calling a manual recovery walk
type RecoveryWalkResponse struct {
	// READ-ONLY; The next update domain that needs to be walked. Null means walk spanning all update domains has been completed
	NextPlatformUpdateDomain *int32 `json:"nextPlatformUpdateDomain,omitempty" azure:"ro"`

	// READ-ONLY; Whether the recovery walk was performed
	WalkPerformed *bool `json:"walkPerformed,omitempty" azure:"ro"`
}

// RecoveryWalkResponseResponse is the response envelope for operations that return a RecoveryWalkResponse type.
type RecoveryWalkResponseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response after calling a manual recovery walk
	RecoveryWalkResponse *RecoveryWalkResponse
}

// This is the regional replication status.
type RegionalReplicationStatus struct {
	// READ-ONLY; The details of the replication status.
	Details *string `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; It indicates progress of the replication job.
	Progress *int32 `json:"progress,omitempty" azure:"ro"`

	// READ-ONLY; The region to which the gallery Image Version is being replicated to.
	Region *string `json:"region,omitempty" azure:"ro"`

	// READ-ONLY; This is the regional replication state.
	State *ReplicationState `json:"state,omitempty" azure:"ro"`
}

// This is the replication status of the gallery Image Version.
type ReplicationStatus struct {
	// READ-ONLY; This is the aggregated replication status based on all the regional replication status flags.
	AggregatedState *AggregatedReplicationState `json:"aggregatedState,omitempty" azure:"ro"`

	// READ-ONLY; This is a summary of replication status for each region.
	Summary *[]*RegionalReplicationStatus `json:"summary,omitempty" azure:"ro"`
}

// Api request input for LogAnalytics getRequestRateByInterval Api.
type RequestRateByIntervalInput struct {
	LogAnalyticsInputBase
	// Interval value in minutes used to create LogAnalytics call rate logs.
	IntervalLength *IntervalInMins `json:"intervalLength,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RequestRateByIntervalInput.
func (r RequestRateByIntervalInput) MarshalJSON() ([]byte, error) {
	objectMap := r.LogAnalyticsInputBase.marshalInternal()
	populate(objectMap, "intervalLength", r.IntervalLength)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RequestRateByIntervalInput.
func (r *RequestRateByIntervalInput) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "intervalLength":
			err = unpopulate(val, &r.IntervalLength)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return r.LogAnalyticsInputBase.unmarshalInternal(rawMsg)
}

// The Resource model definition.
type Resource struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// Resource location
	Location *string `json:"location,omitempty"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Describes the resource range.
type ResourceRange struct {
	// The maximum number of the resource.
	Max *int32 `json:"max,omitempty"`

	// The minimum number of the resource.
	Min *int32 `json:"min,omitempty"`
}

// Describes an available Compute SKU.
type ResourceSKU struct {
	// READ-ONLY; The api versions that support this SKU.
	APIVersions *[]*string `json:"apiVersions,omitempty" azure:"ro"`

	// READ-ONLY; A name value pair to describe the capability.
	Capabilities *[]*ResourceSKUCapabilities `json:"capabilities,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the number of virtual machines in the scale set.
	Capacity *ResourceSKUCapacity `json:"capacity,omitempty" azure:"ro"`

	// READ-ONLY; Metadata for retrieving price info.
	Costs *[]*ResourceSKUCosts `json:"costs,omitempty" azure:"ro"`

	// READ-ONLY; The Family of this particular SKU.
	Family *string `json:"family,omitempty" azure:"ro"`

	// READ-ONLY; The Kind of resources that are supported in this SKU.
	Kind *string `json:"kind,omitempty" azure:"ro"`

	// READ-ONLY; A list of locations and availability zones in those locations where the SKU is available.
	LocationInfo *[]*ResourceSKULocationInfo `json:"locationInfo,omitempty" azure:"ro"`

	// READ-ONLY; The set of locations that the SKU is available.
	Locations *[]*string `json:"locations,omitempty" azure:"ro"`

	// READ-ONLY; The name of SKU.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of resource the SKU applies to.
	ResourceType *string `json:"resourceType,omitempty" azure:"ro"`

	// READ-ONLY; The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
	Restrictions *[]*ResourceSKURestrictions `json:"restrictions,omitempty" azure:"ro"`

	// READ-ONLY; The Size of the SKU.
	Size *string `json:"size,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string `json:"tier,omitempty" azure:"ro"`
}

// Describes The SKU capabilities object.
type ResourceSKUCapabilities struct {
	// READ-ONLY; An invariant to describe the feature.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; An invariant if the feature is measured by quantity.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// Describes scaling information of a SKU.
type ResourceSKUCapacity struct {
	// READ-ONLY; The default capacity.
	Default *int64 `json:"default,omitempty" azure:"ro"`

	// READ-ONLY; The maximum capacity that can be set.
	Maximum *int64 `json:"maximum,omitempty" azure:"ro"`

	// READ-ONLY; The minimum capacity.
	Minimum *int64 `json:"minimum,omitempty" azure:"ro"`

	// READ-ONLY; The scale type applicable to the sku.
	ScaleType *ResourceSKUCapacityScaleType `json:"scaleType,omitempty" azure:"ro"`
}

// Describes metadata for retrieving price info.
type ResourceSKUCosts struct {
	// READ-ONLY; An invariant to show the extended unit.
	ExtendedUnit *string `json:"extendedUnit,omitempty" azure:"ro"`

	// READ-ONLY; Used for querying price from commerce.
	MeterID *string `json:"meterID,omitempty" azure:"ro"`

	// READ-ONLY; The multiplier is needed to extend the base metered cost.
	Quantity *int64 `json:"quantity,omitempty" azure:"ro"`
}

type ResourceSKULocationInfo struct {
	// READ-ONLY; Location of the SKU
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Details of capabilities available to a SKU in specific zones.
	ZoneDetails *[]*ResourceSKUZoneDetails `json:"zoneDetails,omitempty" azure:"ro"`

	// READ-ONLY; List of availability zones where the SKU is supported.
	Zones *[]*string `json:"zones,omitempty" azure:"ro"`
}

type ResourceSKURestrictionInfo struct {
	// READ-ONLY; Locations where the SKU is restricted
	Locations *[]*string `json:"locations,omitempty" azure:"ro"`

	// READ-ONLY; List of availability zones where the SKU is restricted.
	Zones *[]*string `json:"zones,omitempty" azure:"ro"`
}

// Describes scaling information of a SKU.
type ResourceSKURestrictions struct {
	// READ-ONLY; The reason for restriction.
	ReasonCode *ResourceSKURestrictionsReasonCode `json:"reasonCode,omitempty" azure:"ro"`

	// READ-ONLY; The information about the restriction where the SKU cannot be used.
	RestrictionInfo *ResourceSKURestrictionInfo `json:"restrictionInfo,omitempty" azure:"ro"`

	// READ-ONLY; The type of restrictions.
	Type *ResourceSKURestrictionsType `json:"type,omitempty" azure:"ro"`

	// READ-ONLY; The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
	Values *[]*string `json:"values,omitempty" azure:"ro"`
}

// Describes The zonal capabilities of a SKU.
type ResourceSKUZoneDetails struct {
	// READ-ONLY; A list of capabilities that are available for the SKU in the specified list of zones.
	Capabilities *[]*ResourceSKUCapabilities `json:"capabilities,omitempty" azure:"ro"`

	// READ-ONLY; The set of zones that the SKU is available in with the specified capabilities.
	Name *[]*string `json:"name,omitempty" azure:"ro"`
}

// ResourceSKUsListOptions contains the optional parameters for the ResourceSKUs.List method.
type ResourceSKUsListOptions struct {
	// The filter to apply on the operation. Only **location** filter is supported currently.
	Filter *string
}

// The List Resource Skus operation response.
type ResourceSKUsResult struct {
	// The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus
	NextLink *string `json:"nextLink,omitempty"`

	// The list of skus available for the subscription.
	Value *[]*ResourceSKU `json:"value,omitempty"`
}

// ResourceSKUsResultResponse is the response envelope for operations that return a ResourceSKUsResult type.
type ResourceSKUsResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Resource Skus operation response.
	ResourceSKUsResult *ResourceSKUsResult
}

// The List resources which are encrypted with the disk encryption set.
type ResourceURIList struct {
	// The uri to fetch the next page of encrypted resources. Call ListNext() with this to fetch the next page of encrypted resources.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of IDs or Owner IDs of resources which are encrypted with the disk encryption set.
	Value *[]*string `json:"value,omitempty"`
}

// ResourceURIListResponse is the response envelope for operations that return a ResourceURIList type.
type ResourceURIListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List resources which are encrypted with the disk encryption set.
	ResourceURIList *ResourceURIList
}

// The SAS URIs of the console screenshot and serial log blobs.
type RetrieveBootDiagnosticsDataResult struct {
	// READ-ONLY; The console screenshot blob URI
	ConsoleScreenshotBlobURI *string `json:"consoleScreenshotBlobUri,omitempty" azure:"ro"`

	// READ-ONLY; The serial console log blob URI.
	SerialConsoleLogBlobURI *string `json:"serialConsoleLogBlobUri,omitempty" azure:"ro"`
}

// RetrieveBootDiagnosticsDataResultResponse is the response envelope for operations that return a RetrieveBootDiagnosticsDataResult type.
type RetrieveBootDiagnosticsDataResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The SAS URIs of the console screenshot and serial log blobs.
	RetrieveBootDiagnosticsDataResult *RetrieveBootDiagnosticsDataResult
}

// Information about rollback on failed VM instances after a OS Upgrade operation.
type RollbackStatusInfo struct {
	// READ-ONLY; The number of instances which failed to rollback.
	FailedRolledbackInstanceCount *int32 `json:"failedRolledbackInstanceCount,omitempty" azure:"ro"`

	// READ-ONLY; Error details if OS rollback failed.
	RollbackError *APIError `json:"rollbackError,omitempty" azure:"ro"`

	// READ-ONLY; The number of instances which have been successfully rolled back.
	SuccessfullyRolledbackInstanceCount *int32 `json:"successfullyRolledbackInstanceCount,omitempty" azure:"ro"`
}

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicy struct {
	// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine
	// the batch size.
	EnableCrossZoneUpgrade *bool `json:"enableCrossZoneUpgrade,omitempty"`

	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum,
	// unhealthy instances in previous or future batches
	// can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
	MaxBatchInstancePercent *int32 `json:"maxBatchInstancePercent,omitempty"`

	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded,
	// or by being found in an unhealthy state by
	// the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for
	// this parameter is 20%.
	MaxUnhealthyInstancePercent *int32 `json:"maxUnhealthyInstancePercent,omitempty"`

	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is
	// upgraded. If this percentage is ever exceeded,
	// the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int32 `json:"maxUnhealthyUpgradedInstancePercent,omitempty"`

	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified
	// in ISO 8601 format. The default value is 0 seconds
	// (PT0S).
	PauseTimeBetweenBatches *string `json:"pauseTimeBetweenBatches,omitempty"`

	// Upgrade all unhealthy instances in a scale set before any healthy instances.
	PrioritizeUnhealthyInstances *bool `json:"prioritizeUnhealthyInstances,omitempty"`
}

// Information about the number of virtual machine instances in each upgrade state.
type RollingUpgradeProgressInfo struct {
	// READ-ONLY; The number of instances that have failed to be upgraded successfully.
	FailedInstanceCount *int32 `json:"failedInstanceCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of instances that are currently being upgraded.
	InProgressInstanceCount *int32 `json:"inProgressInstanceCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of instances that have not yet begun to be upgraded.
	PendingInstanceCount *int32 `json:"pendingInstanceCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of instances that have been successfully upgraded.
	SuccessfulInstanceCount *int32 `json:"successfulInstanceCount,omitempty" azure:"ro"`
}

// Information about the current running state of the overall upgrade.
type RollingUpgradeRunningStatus struct {
	// READ-ONLY; Code indicating the current status of the upgrade.
	Code *RollingUpgradeStatusCode `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The last action performed on the rolling upgrade.
	LastAction *RollingUpgradeActionType `json:"lastAction,omitempty" azure:"ro"`

	// READ-ONLY; Last action time of the upgrade.
	LastActionTime *time.Time `json:"lastActionTime,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the upgrade.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RollingUpgradeRunningStatus.
func (r RollingUpgradeRunningStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", r.Code)
	populate(objectMap, "lastAction", r.LastAction)
	populate(objectMap, "lastActionTime", (*timeRFC3339)(r.LastActionTime))
	populate(objectMap, "startTime", (*timeRFC3339)(r.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RollingUpgradeRunningStatus.
func (r *RollingUpgradeRunningStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, &r.Code)
			delete(rawMsg, key)
		case "lastAction":
			err = unpopulate(val, &r.LastAction)
			delete(rawMsg, key)
		case "lastActionTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.LastActionTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfo struct {
	Resource
	// The status of the latest virtual machine scale set rolling upgrade.
	Properties *RollingUpgradeStatusInfoProperties `json:"properties,omitempty"`
}

// The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfoProperties struct {
	// READ-ONLY; Error details for this upgrade, if there are any.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The rolling upgrade policies applied for this upgrade.
	Policy *RollingUpgradePolicy `json:"policy,omitempty" azure:"ro"`

	// READ-ONLY; Information about the number of virtual machine instances in each upgrade state.
	Progress *RollingUpgradeProgressInfo `json:"progress,omitempty" azure:"ro"`

	// READ-ONLY; Information about the current running state of the overall upgrade.
	RunningStatus *RollingUpgradeRunningStatus `json:"runningStatus,omitempty" azure:"ro"`
}

// RollingUpgradeStatusInfoResponse is the response envelope for operations that return a RollingUpgradeStatusInfo type.
type RollingUpgradeStatusInfoResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The status of the latest virtual machine scale set rolling upgrade.
	RollingUpgradeStatusInfo *RollingUpgradeStatusInfo
}

// Describes the properties of a Run Command.
type RunCommandDocument struct {
	RunCommandDocumentBase
	// The parameters used by the script.
	Parameters *[]*RunCommandParameterDefinition `json:"parameters,omitempty"`

	// The script to be executed.
	Script *[]*string `json:"script,omitempty"`
}

// Describes the properties of a Run Command metadata.
type RunCommandDocumentBase struct {
	// The VM run command description.
	Description *string `json:"description,omitempty"`

	// The VM run command id.
	ID *string `json:"id,omitempty"`

	// The VM run command label.
	Label *string `json:"label,omitempty"`

	// The Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// The VM run command schema.
	Schema *string `json:"$schema,omitempty"`
}

// RunCommandDocumentResponse is the response envelope for operations that return a RunCommandDocument type.
type RunCommandDocumentResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes the properties of a Run Command.
	RunCommandDocument *RunCommandDocument
}

// Capture Virtual Machine parameters.
type RunCommandInput struct {
	// The run command id.
	CommandID *string `json:"commandId,omitempty"`

	// The run command parameters.
	Parameters *[]*RunCommandInputParameter `json:"parameters,omitempty"`

	// Optional. The script to be executed. When this value is given, the given script will override the default script of the command.
	Script *[]*string `json:"script,omitempty"`
}

// Describes the properties of a run command parameter.
type RunCommandInputParameter struct {
	// The run command parameter name.
	Name *string `json:"name,omitempty"`

	// The run command parameter value.
	Value *string `json:"value,omitempty"`
}

// The List Virtual Machine operation response.
type RunCommandListResult struct {
	// The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of virtual machine run commands.
	Value *[]*RunCommandDocumentBase `json:"value,omitempty"`
}

// RunCommandListResultResponse is the response envelope for operations that return a RunCommandListResult type.
type RunCommandListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine operation response.
	RunCommandListResult *RunCommandListResult
}

// Describes the properties of a run command parameter.
type RunCommandParameterDefinition struct {
	// The run command parameter default value.
	DefaultValue *string `json:"defaultValue,omitempty"`

	// The run command parameter name.
	Name *string `json:"name,omitempty"`

	// The run command parameter required.
	Required *bool `json:"required,omitempty"`

	// The run command parameter type.
	Type *string `json:"type,omitempty"`
}

type RunCommandResult struct {
	// Run command operation response.
	Value *[]*InstanceViewStatus `json:"value,omitempty"`
}

// RunCommandResultPollerResponse is the response envelope for operations that asynchronously return a RunCommandResult type.
type RunCommandResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RunCommandResultResponse, error)

	// Poller contains an initialized poller.
	Poller RunCommandResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RunCommandResultResponse is the response envelope for operations that return a RunCommandResult type.
type RunCommandResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse      *http.Response
	RunCommandResult *RunCommandResult
}

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate
// the VMs in the scale set before you modify the
// SKU name.
type SKU struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *int64 `json:"capacity,omitempty"`

	// The sku name.
	Name *string `json:"name,omitempty"`

	// Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string `json:"tier,omitempty"`
}

// SSH configuration for Linux based VMs running on Azure
type SSHConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys *[]*SSHPublicKey `json:"publicKeys,omitempty"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SSHPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format.
	// For creating ssh keys, see Create SSH keys on Linux and Mac for Linux VMs in Azure
	// [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	KeyData *string `json:"keyData,omitempty"`

	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example:
	// /home/user/.ssh/authorized_keys
	Path *string `json:"path,omitempty"`
}

// Response from generation of an SSH key pair.
type SSHPublicKeyGenerateKeyPairResult struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}
	ID *string `json:"id,omitempty"`

	// Private key portion of the key pair used to authenticate to a virtual machine through ssh. The private key is returned in RFC3447 format and should be
	// treated as a secret.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Public key portion of the key pair used to authenticate to a virtual machine through ssh. The public key is in ssh-rsa format.
	PublicKey *string `json:"publicKey,omitempty"`
}

// SSHPublicKeyGenerateKeyPairResultResponse is the response envelope for operations that return a SSHPublicKeyGenerateKeyPairResult type.
type SSHPublicKeyGenerateKeyPairResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response from generation of an SSH key pair.
	SSHPublicKeyGenerateKeyPairResult *SSHPublicKeyGenerateKeyPairResult
}

// Specifies information about the SSH public key.
type SSHPublicKeyResource struct {
	Resource
	// Properties of the SSH public key.
	Properties *SSHPublicKeyResourceProperties `json:"properties,omitempty"`
}

// Properties of the SSH public key.
type SSHPublicKeyResourceProperties struct {
	// SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey
	// property will be populated when
	// generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa
	// format.
	PublicKey *string `json:"publicKey,omitempty"`
}

// SSHPublicKeyResourceResponse is the response envelope for operations that return a SSHPublicKeyResource type.
type SSHPublicKeyResourceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Specifies information about the SSH public key.
	SSHPublicKeyResource *SSHPublicKeyResource
}

// Specifies information about the SSH public key.
type SSHPublicKeyUpdateResource struct {
	UpdateResource
	// Properties of the SSH public key.
	Properties *SSHPublicKeyResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SSHPublicKeyUpdateResource.
func (s SSHPublicKeyUpdateResource) MarshalJSON() ([]byte, error) {
	objectMap := s.UpdateResource.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SSHPublicKeysCreateOptions contains the optional parameters for the SSHPublicKeys.Create method.
type SSHPublicKeysCreateOptions struct {
	// placeholder for future optional parameters
}

// SSHPublicKeysDeleteOptions contains the optional parameters for the SSHPublicKeys.Delete method.
type SSHPublicKeysDeleteOptions struct {
	// placeholder for future optional parameters
}

// SSHPublicKeysGenerateKeyPairOptions contains the optional parameters for the SSHPublicKeys.GenerateKeyPair method.
type SSHPublicKeysGenerateKeyPairOptions struct {
	// placeholder for future optional parameters
}

// SSHPublicKeysGetOptions contains the optional parameters for the SSHPublicKeys.Get method.
type SSHPublicKeysGetOptions struct {
	// placeholder for future optional parameters
}

// The list SSH public keys operation response.
type SSHPublicKeysGroupListResult struct {
	// The URI to fetch the next page of SSH public keys. Call ListNext() with this URI to fetch the next page of SSH public keys.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of SSH public keys
	Value *[]*SSHPublicKeyResource `json:"value,omitempty"`
}

// SSHPublicKeysGroupListResultResponse is the response envelope for operations that return a SSHPublicKeysGroupListResult type.
type SSHPublicKeysGroupListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The list SSH public keys operation response.
	SSHPublicKeysGroupListResult *SSHPublicKeysGroupListResult
}

// SSHPublicKeysListByResourceGroupOptions contains the optional parameters for the SSHPublicKeys.ListByResourceGroup method.
type SSHPublicKeysListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SSHPublicKeysListBySubscriptionOptions contains the optional parameters for the SSHPublicKeys.ListBySubscription method.
type SSHPublicKeysListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// SSHPublicKeysUpdateOptions contains the optional parameters for the SSHPublicKeys.Update method.
type SSHPublicKeysUpdateOptions struct {
	// placeholder for future optional parameters
}

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicy struct {
	// The rules to be followed when scaling-in a virtual machine scale set.
	// Possible values are:
	// Default When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be
	// balanced across Fault Domains as far as possible.
	// Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in.
	// OldestVM When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal.
	// For zonal virtual machine scale sets, the
	// scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal.
	// NewestVM When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal.
	// For zonal virtual machine scale sets, the
	// scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal.
	Rules *[]*VirtualMachineScaleSetScaleInRules `json:"rules,omitempty"`
}

type ScheduledEventsProfile struct {
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfile `json:"terminateNotificationProfile,omitempty"`
}

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfile struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This
	// will enable the encryption for all the disks
	// including Resource/Temp disk at host itself.
	// Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool `json:"encryptionAtHost,omitempty"`

	// Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings.
	// Default: UefiSettings will not be enabled unless this property is set as TrustedLaunch.
	SecurityType *string `json:"securityType,omitempty"`

	// Specifies the security settings like secure boot and vTPM used while creating the virtual machine.
	// Minimum api-version: 2020-12-01
	UefiSettings *UefiSettings `json:"uefiSettings,omitempty"`
}

type ShareInfoElement struct {
	// READ-ONLY; A relative URI containing the ID of the VM that has the disk attached.
	VMURI *string `json:"vmUri,omitempty" azure:"ro"`
}

// Snapshot resource.
type Snapshot struct {
	Resource
	// The extended location where the snapshot will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// READ-ONLY; Unused. Always Null.
	ManagedBy *string `json:"managedBy,omitempty" azure:"ro"`

	// Snapshot resource properties.
	Properties *SnapshotProperties `json:"properties,omitempty"`

	// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior
	// is the SKU will be set to the same sku as the
	// previous snapshot
	SKU *SnapshotSKU `json:"sku,omitempty"`
}

// The List Snapshots operation response.
type SnapshotList struct {
	// The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of snapshots.
	Value *[]*Snapshot `json:"value,omitempty"`
}

// SnapshotListResponse is the response envelope for operations that return a SnapshotList type.
type SnapshotListResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Snapshots operation response.
	SnapshotList *SnapshotList
}

// SnapshotPollerResponse is the response envelope for operations that asynchronously return a Snapshot type.
type SnapshotPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SnapshotResponse, error)

	// Poller contains an initialized poller.
	Poller SnapshotPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Snapshot resource properties.
type SnapshotProperties struct {
	// Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData `json:"creationData,omitempty"`

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string `json:"diskAccessId,omitempty"`

	// READ-ONLY; The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int64 `json:"diskSizeBytes,omitempty" azure:"ro"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates
	// or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// READ-ONLY; The state of the snapshot.
	DiskState *DiskState `json:"diskState,omitempty" azure:"ro"`

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration `json:"hyperVGeneration,omitempty"`

	// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
	Incremental *bool `json:"incremental,omitempty"`

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	// The Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// READ-ONLY; The disk provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Purchase plan information for the image from which the source disk for the snapshot was originally created.
	PurchasePlan *PurchasePlanAutoGenerated `json:"purchasePlan,omitempty"`

	// Indicates the OS on a snapshot supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`

	// READ-ONLY; The time when the snapshot was created.
	TimeCreated *time.Time `json:"timeCreated,omitempty" azure:"ro"`

	// READ-ONLY; Unique Guid identifying the resource.
	UniqueID *string `json:"uniqueId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SnapshotProperties.
func (s SnapshotProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationData", s.CreationData)
	populate(objectMap, "diskAccessId", s.DiskAccessID)
	populate(objectMap, "diskSizeBytes", s.DiskSizeBytes)
	populate(objectMap, "diskSizeGB", s.DiskSizeGB)
	populate(objectMap, "diskState", s.DiskState)
	populate(objectMap, "encryption", s.Encryption)
	populate(objectMap, "encryptionSettingsCollection", s.EncryptionSettingsCollection)
	populate(objectMap, "hyperVGeneration", s.HyperVGeneration)
	populate(objectMap, "incremental", s.Incremental)
	populate(objectMap, "networkAccessPolicy", s.NetworkAccessPolicy)
	populate(objectMap, "osType", s.OSType)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "purchasePlan", s.PurchasePlan)
	populate(objectMap, "supportsHibernation", s.SupportsHibernation)
	populate(objectMap, "timeCreated", (*timeRFC3339)(s.TimeCreated))
	populate(objectMap, "uniqueId", s.UniqueID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SnapshotProperties.
func (s *SnapshotProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationData":
			err = unpopulate(val, &s.CreationData)
			delete(rawMsg, key)
		case "diskAccessId":
			err = unpopulate(val, &s.DiskAccessID)
			delete(rawMsg, key)
		case "diskSizeBytes":
			err = unpopulate(val, &s.DiskSizeBytes)
			delete(rawMsg, key)
		case "diskSizeGB":
			err = unpopulate(val, &s.DiskSizeGB)
			delete(rawMsg, key)
		case "diskState":
			err = unpopulate(val, &s.DiskState)
			delete(rawMsg, key)
		case "encryption":
			err = unpopulate(val, &s.Encryption)
			delete(rawMsg, key)
		case "encryptionSettingsCollection":
			err = unpopulate(val, &s.EncryptionSettingsCollection)
			delete(rawMsg, key)
		case "hyperVGeneration":
			err = unpopulate(val, &s.HyperVGeneration)
			delete(rawMsg, key)
		case "incremental":
			err = unpopulate(val, &s.Incremental)
			delete(rawMsg, key)
		case "networkAccessPolicy":
			err = unpopulate(val, &s.NetworkAccessPolicy)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &s.OSType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "purchasePlan":
			err = unpopulate(val, &s.PurchasePlan)
			delete(rawMsg, key)
		case "supportsHibernation":
			err = unpopulate(val, &s.SupportsHibernation)
			delete(rawMsg, key)
		case "timeCreated":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.TimeCreated = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "uniqueId":
			err = unpopulate(val, &s.UniqueID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SnapshotResponse is the response envelope for operations that return a Snapshot type.
type SnapshotResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Snapshot resource.
	Snapshot *Snapshot
}

// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior
// is the SKU will be set to the same sku as the
// previous snapshot
type SnapshotSKU struct {
	// The sku name.
	Name *SnapshotStorageAccountTypes `json:"name,omitempty"`

	// READ-ONLY; The sku tier.
	Tier *string `json:"tier,omitempty" azure:"ro"`
}

// Snapshot update resource.
type SnapshotUpdate struct {
	// Snapshot resource update properties.
	Properties *SnapshotUpdateProperties `json:"properties,omitempty"`

	// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior
	// is the SKU will be set to the same sku as the
	// previous snapshot
	SKU *SnapshotSKU `json:"sku,omitempty"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SnapshotUpdate.
func (s SnapshotUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// Snapshot resource update properties.
type SnapshotUpdateProperties struct {
	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string `json:"diskAccessId,omitempty"`

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates
	// or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption `json:"encryption,omitempty"`

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection `json:"encryptionSettingsCollection,omitempty"`

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy `json:"networkAccessPolicy,omitempty"`

	// the Operating System type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// Indicates the OS on a snapshot supports hibernation.
	SupportsHibernation *bool `json:"supportsHibernation,omitempty"`
}

// SnapshotsBeginCreateOrUpdateOptions contains the optional parameters for the Snapshots.BeginCreateOrUpdate method.
type SnapshotsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsBeginDeleteOptions contains the optional parameters for the Snapshots.BeginDelete method.
type SnapshotsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsBeginGrantAccessOptions contains the optional parameters for the Snapshots.BeginGrantAccess method.
type SnapshotsBeginGrantAccessOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsBeginRevokeAccessOptions contains the optional parameters for the Snapshots.BeginRevokeAccess method.
type SnapshotsBeginRevokeAccessOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsBeginUpdateOptions contains the optional parameters for the Snapshots.BeginUpdate method.
type SnapshotsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsGetOptions contains the optional parameters for the Snapshots.Get method.
type SnapshotsGetOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsListByResourceGroupOptions contains the optional parameters for the Snapshots.ListByResourceGroup method.
type SnapshotsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SnapshotsListOptions contains the optional parameters for the Snapshots.List method.
type SnapshotsListOptions struct {
	// placeholder for future optional parameters
}

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	ID *string `json:"id,omitempty"`
}

// Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	DataDisks *[]*DataDisk `json:"dataDisks,omitempty"`

	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This
	// element is required when you want to use a platform
	// image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `json:"imageReference,omitempty"`

	// Specifies information about the operating system disk used by the virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	OSDisk *OSDisk `json:"osDisk,omitempty"`
}

type SubResource struct {
	// Resource Id
	ID *string `json:"id,omitempty"`
}

type SubResourceReadOnly struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`
}

func (s SubResourceReadOnly) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	return objectMap
}

type SubResourceWithColocationStatus struct {
	SubResource
	// Describes colocation status of a resource in the Proximity Placement Group.
	ColocationStatus *InstanceViewStatus `json:"colocationStatus,omitempty"`
}

// Describes the target region information.
type TargetRegion struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages `json:"encryption,omitempty"`

	// The name of the region.
	Name *string `json:"name,omitempty"`

	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int32 `json:"regionalReplicaCount,omitempty"`

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType `json:"storageAccountType,omitempty"`
}

type TerminateNotificationProfile struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool `json:"enable,omitempty"`

	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved
	// (timed out). The configuration must be
	// specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string `json:"notBeforeTimeout,omitempty"`
}

// Api request input for LogAnalytics getThrottledRequests Api.
type ThrottledRequestsInput struct {
	LogAnalyticsInputBase
}

// Specifies the security settings like secure boot and vTPM used while creating the virtual machine.
// Minimum api-version: 2020-12-01
type UefiSettings struct {
	// Specifies whether secure boot should be enabled on the virtual machine.
	// Minimum api-version: 2020-12-01
	SecureBootEnabled *bool `json:"secureBootEnabled,omitempty"`

	// Specifies whether vTPM should be enabled on the virtual machine.
	// Minimum api-version: 2020-12-01
	VTpmEnabled *bool `json:"vTpmEnabled,omitempty"`
}

// The Update Resource model definition.
type UpdateResource struct {
	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`
}

func (u UpdateResource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", u.Tags)
	return objectMap
}

// The Update Resource model definition.
type UpdateResourceDefinition struct {
	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource tags
	Tags *map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

func (u UpdateResourceDefinition) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", u.ID)
	populate(objectMap, "name", u.Name)
	populate(objectMap, "tags", u.Tags)
	populate(objectMap, "type", u.Type)
	return objectMap
}

// Virtual Machine Scale Set OS Upgrade History operation response.
type UpgradeOperationHistoricalStatusInfo struct {
	// READ-ONLY; Resource location
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Information about the properties of the upgrade operation.
	Properties *UpgradeOperationHistoricalStatusInfoProperties `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Describes each OS upgrade on the Virtual Machine Scale Set.
type UpgradeOperationHistoricalStatusInfoProperties struct {
	// READ-ONLY; Error Details for this upgrade if there are any.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; Counts of the VMs in each state.
	Progress *RollingUpgradeProgressInfo `json:"progress,omitempty" azure:"ro"`

	// READ-ONLY; Information about OS rollback if performed
	RollbackInfo *RollbackStatusInfo `json:"rollbackInfo,omitempty" azure:"ro"`

	// READ-ONLY; Information about the overall status of the upgrade operation.
	RunningStatus *UpgradeOperationHistoryStatus `json:"runningStatus,omitempty" azure:"ro"`

	// READ-ONLY; Invoker of the Upgrade Operation
	StartedBy *UpgradeOperationInvoker `json:"startedBy,omitempty" azure:"ro"`

	// READ-ONLY; Image Reference details
	TargetImageReference *ImageReference `json:"targetImageReference,omitempty" azure:"ro"`
}

// Information about the current running state of the overall upgrade.
type UpgradeOperationHistoryStatus struct {
	// READ-ONLY; Code indicating the current status of the upgrade.
	Code *UpgradeState `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; End time of the upgrade.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the upgrade.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UpgradeOperationHistoryStatus.
func (u UpgradeOperationHistoryStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", u.Code)
	populate(objectMap, "endTime", (*timeRFC3339)(u.EndTime))
	populate(objectMap, "startTime", (*timeRFC3339)(u.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpgradeOperationHistoryStatus.
func (u *UpgradeOperationHistoryStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, &u.Code)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicy struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicy `json:"automaticOSUpgradePolicy,omitempty"`

	// Specifies the mode of an upgrade to virtual machines in the scale set.
	// Possible values are:
	// Manual - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.
	// Automatic - All virtual machines in the scale set are automatically updated at the same time.
	Mode *UpgradeMode `json:"mode,omitempty"`

	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicy `json:"rollingUpgradePolicy,omitempty"`
}

// Describes Compute Resource Usage.
type Usage struct {
	// The current usage of the resource.
	CurrentValue *int32 `json:"currentValue,omitempty"`

	// The maximum permitted usage of the resource.
	Limit *int64 `json:"limit,omitempty"`

	// The name of the type of usage.
	Name *UsageName `json:"name,omitempty"`

	// An enum describing the unit of usage measurement.
	Unit *string `json:"unit,omitempty"`
}

// UsageListOptions contains the optional parameters for the Usage.List method.
type UsageListOptions struct {
	// placeholder for future optional parameters
}

// The Usage Names.
type UsageName struct {
	// The localized name of the resource.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// The name of the resource.
	Value *string `json:"value,omitempty"`
}

type UserArtifactManage struct {
	// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
	Install *string `json:"install,omitempty"`

	// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
	Remove *string `json:"remove,omitempty"`

	// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous
	// version and install command on the current version
	// of the gallery application. This is limited to 4096 characters.
	Update *string `json:"update,omitempty"`
}

// The source image from which the Image Version is going to be created.
type UserArtifactSource struct {
	// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
	DefaultConfigurationLink *string `json:"defaultConfigurationLink,omitempty"`

	// Required. The mediaLink of the artifact, must be a readable storage page blob.
	MediaLink *string `json:"mediaLink,omitempty"`
}

type UserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

type VMScaleSetConvertToSinglePlacementGroupInput struct {
	// Id of the placement group in which you want future virtual machine instances to be placed. To query placement group Id, please use Virtual Machine Scale
	// Set VMs - Get API. If not provided, the
	// platform will choose one with maximum number of virtual machine instances.
	ActivePlacementGroupID *string `json:"activePlacementGroupId,omitempty"`
}

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificate struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is
	// implicitly in the LocalMachine account.
	// For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt for the X509 certificate
	// file and <UppercaseThumbprint>.prv for private
	// key. Both of these files are .pem formatted.
	CertificateStore *string `json:"certificateStore,omitempty"`

	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see Add a key or secret to the
	// key vault
	// [https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add]. In this case, your certificate needs to be It is the Base64 encoding of the
	// following JSON Object which is encoded in UTF-8:
	// {
	// "data":"",
	// "dataType":"pfx",
	// "password":""
	// }
	CertificateURL *string `json:"certificateUrl,omitempty"`
}

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource `json:"sourceVault,omitempty"`

	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates *[]*VaultCertificate `json:"vaultCertificates,omitempty"`
}

// Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	URI *string `json:"uri,omitempty"`
}

// Describes a Virtual Machine.
type VirtualMachine struct {
	Resource
	// The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity `json:"identity,omitempty"`

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
	// use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
	// Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan `json:"plan,omitempty"`

	// Describes the properties of a Virtual Machine.
	Properties *VirtualMachineProperties `json:"properties,omitempty"`

	// READ-ONLY; The virtual machine child extension resources.
	Resources *[]*VirtualMachineExtension `json:"resources,omitempty" azure:"ro"`

	// The virtual machine zones.
	Zones *[]*string `json:"zones,omitempty"`
}

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceView struct {
	// The virtual machine extension handler instance view.
	ExtensionHandlers *[]*VirtualMachineExtensionHandlerInstanceView `json:"extensionHandlers,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`

	// The VM Agent full version.
	VMAgentVersion *string `json:"vmAgentVersion,omitempty"`
}

// Describes the properties of an AssessPatches result.
type VirtualMachineAssessPatchesResult struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	AssessmentActivityID *string `json:"assessmentActivityId,omitempty" azure:"ro"`

	// READ-ONLY; The list of patches that have been detected as available for installation.
	AvailablePatches *[]*VirtualMachineSoftwarePatchProperties `json:"availablePatches,omitempty" azure:"ro"`

	// READ-ONLY; The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount *int32 `json:"criticalAndSecurityPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The number of all available patches excluding critical and security.
	OtherPatchCount *int32 `json:"otherPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot
	// has not yet occurred.
	RebootPending *bool `json:"rebootPending,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	StartDateTime *time.Time `json:"startDateTime,omitempty" azure:"ro"`

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become
	// "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineAssessPatchesResult.
func (v VirtualMachineAssessPatchesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assessmentActivityId", v.AssessmentActivityID)
	populate(objectMap, "availablePatches", v.AvailablePatches)
	populate(objectMap, "criticalAndSecurityPatchCount", v.CriticalAndSecurityPatchCount)
	populate(objectMap, "error", v.Error)
	populate(objectMap, "otherPatchCount", v.OtherPatchCount)
	populate(objectMap, "rebootPending", v.RebootPending)
	populate(objectMap, "startDateTime", (*timeRFC3339)(v.StartDateTime))
	populate(objectMap, "status", v.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VirtualMachineAssessPatchesResult.
func (v *VirtualMachineAssessPatchesResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assessmentActivityId":
			err = unpopulate(val, &v.AssessmentActivityID)
			delete(rawMsg, key)
		case "availablePatches":
			err = unpopulate(val, &v.AvailablePatches)
			delete(rawMsg, key)
		case "criticalAndSecurityPatchCount":
			err = unpopulate(val, &v.CriticalAndSecurityPatchCount)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &v.Error)
			delete(rawMsg, key)
		case "otherPatchCount":
			err = unpopulate(val, &v.OtherPatchCount)
			delete(rawMsg, key)
		case "rebootPending":
			err = unpopulate(val, &v.RebootPending)
			delete(rawMsg, key)
		case "startDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.StartDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &v.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// VirtualMachineAssessPatchesResultPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineAssessPatchesResult
// type.
type VirtualMachineAssessPatchesResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineAssessPatchesResultResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineAssessPatchesResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineAssessPatchesResultResponse is the response envelope for operations that return a VirtualMachineAssessPatchesResult type.
type VirtualMachineAssessPatchesResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes the properties of an AssessPatches result.
	VirtualMachineAssessPatchesResult *VirtualMachineAssessPatchesResult
}

// Capture Virtual Machine parameters.
type VirtualMachineCaptureParameters struct {
	// The destination container name.
	DestinationContainerName *string `json:"destinationContainerName,omitempty"`

	// Specifies whether to overwrite the destination virtual hard disk, in case of conflict.
	OverwriteVhds *bool `json:"overwriteVhds,omitempty"`

	// The captured virtual hard disk's name prefix.
	VhdPrefix *string `json:"vhdPrefix,omitempty"`
}

// Output of virtual machine capture operation.
type VirtualMachineCaptureResult struct {
	SubResource
	// READ-ONLY; the version of the content
	ContentVersion *string `json:"contentVersion,omitempty" azure:"ro"`

	// READ-ONLY; parameters of the captured virtual machine
	Parameters interface{} `json:"parameters,omitempty" azure:"ro"`

	// READ-ONLY; a list of resource items of the captured virtual machine
	Resources *[]interface{} `json:"resources,omitempty" azure:"ro"`

	// READ-ONLY; the schema of the captured virtual machine
	Schema *string `json:"$schema,omitempty" azure:"ro"`
}

// VirtualMachineCaptureResultPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineCaptureResult type.
type VirtualMachineCaptureResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineCaptureResultResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineCaptureResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineCaptureResultResponse is the response envelope for operations that return a VirtualMachineCaptureResult type.
type VirtualMachineCaptureResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Output of virtual machine capture operation.
	VirtualMachineCaptureResult *VirtualMachineCaptureResult
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtension struct {
	Resource
	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionProperties `json:"properties,omitempty"`
}

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceView struct {
	// The extension handler status.
	Status *InstanceViewStatus `json:"status,omitempty"`

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	// Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

// Describes a Virtual Machine Extension Image.
type VirtualMachineExtensionImage struct {
	Resource
	// Describes the properties of a Virtual Machine Extension Image.
	Properties *VirtualMachineExtensionImageProperties `json:"properties,omitempty"`
}

// VirtualMachineExtensionImageArrayResponse is the response envelope for operations that return a []*VirtualMachineExtensionImage type.
type VirtualMachineExtensionImageArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Array of VirtualMachineExtensionImage
	VirtualMachineExtensionImageArray []*VirtualMachineExtensionImage
}

// Describes the properties of a Virtual Machine Extension Image.
type VirtualMachineExtensionImageProperties struct {
	// The type of role (IaaS or PaaS) this extension supports.
	ComputeRole *string `json:"computeRole,omitempty"`

	// The schema defined by publisher, where extension consumers should provide settings in a matching schema.
	HandlerSchema *string `json:"handlerSchema,omitempty"`

	// The operating system this extension supports.
	OperatingSystem *string `json:"operatingSystem,omitempty"`

	// Whether the handler can support multiple extensions.
	SupportsMultipleExtensions *bool `json:"supportsMultipleExtensions,omitempty"`

	// Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher
	// wants to explicitly indicate the extension is
	// only enabled for CRP VMs but not VMSS.
	VMScaleSetEnabled *bool `json:"vmScaleSetEnabled,omitempty"`
}

// VirtualMachineExtensionImageResponse is the response envelope for operations that return a VirtualMachineExtensionImage type.
type VirtualMachineExtensionImageResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine Extension Image.
	VirtualMachineExtensionImage *VirtualMachineExtensionImage
}

// VirtualMachineExtensionImagesGetOptions contains the optional parameters for the VirtualMachineExtensionImages.Get method.
type VirtualMachineExtensionImagesGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineExtensionImagesListTypesOptions contains the optional parameters for the VirtualMachineExtensionImages.ListTypes method.
type VirtualMachineExtensionImagesListTypesOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineExtensionImagesListVersionsOptions contains the optional parameters for the VirtualMachineExtensionImages.ListVersions method.
type VirtualMachineExtensionImagesListVersionsOptions struct {
	// The filter to apply on the operation.
	Filter  *string
	Orderby *string
	Top     *int32
}

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceView struct {
	// The virtual machine extension name.
	Name *string `json:"name,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`

	// The resource status information.
	Substatuses *[]*InstanceViewStatus `json:"substatuses,omitempty"`

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	// Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

// VirtualMachineExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineExtension type.
type VirtualMachineExtensionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineExtensionResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineExtensionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not
	// upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty"`

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `json:"enableAutomaticUpgrade,omitempty"`

	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `json:"forceUpdateTag,omitempty"`

	// The virtual machine extension instance view.
	InstanceView *VirtualMachineExtensionInstanceView `json:"instanceView,omitempty"`

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `json:"protectedSettings,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// The name of the extension handler publisher.
	Publisher *string `json:"publisher,omitempty"`

	// Json formatted public settings for the extension.
	Settings interface{} `json:"settings,omitempty"`

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	// Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

// VirtualMachineExtensionResponse is the response envelope for operations that return a VirtualMachineExtension type.
type VirtualMachineExtensionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine Extension.
	VirtualMachineExtension *VirtualMachineExtension
}

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionUpdate struct {
	UpdateResource
	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineExtensionUpdate.
func (v VirtualMachineExtensionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.UpdateResource.marshalInternal()
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionUpdateProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not
	// upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty"`

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `json:"enableAutomaticUpgrade,omitempty"`

	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string `json:"forceUpdateTag,omitempty"`

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `json:"protectedSettings,omitempty"`

	// The name of the extension handler publisher.
	Publisher *string `json:"publisher,omitempty"`

	// Json formatted public settings for the extension.
	Settings interface{} `json:"settings,omitempty"`

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	// Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

// VirtualMachineExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineExtensions.BeginCreateOrUpdate method.
type VirtualMachineExtensionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineExtensions.BeginDelete method.
type VirtualMachineExtensionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineExtensions.BeginUpdate method.
type VirtualMachineExtensionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineExtensionsGetOptions contains the optional parameters for the VirtualMachineExtensions.Get method.
type VirtualMachineExtensionsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineExtensionsListOptions contains the optional parameters for the VirtualMachineExtensions.List method.
type VirtualMachineExtensionsListOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// The List Extension operation response
type VirtualMachineExtensionsListResult struct {
	// The list of extensions
	Value *[]*VirtualMachineExtension `json:"value,omitempty"`
}

// VirtualMachineExtensionsListResultResponse is the response envelope for operations that return a VirtualMachineExtensionsListResult type.
type VirtualMachineExtensionsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Extension operation response
	VirtualMachineExtensionsListResult *VirtualMachineExtensionsListResult
}

// The health status of the VM.
type VirtualMachineHealthStatus struct {
	// READ-ONLY; The health status information for the VM.
	Status *InstanceViewStatus `json:"status,omitempty" azure:"ro"`
}

// Identity for the virtual machine.
type VirtualMachineIdentity struct {
	// READ-ONLY; The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id associated with the virtual machine. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`

	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of
	// user assigned identities. The type 'None' will
	// remove any identities from the virtual machine.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities *map[string]*UserAssignedIdentitiesValue `json:"userAssignedIdentities,omitempty"`
}

// Describes a Virtual Machine Image.
type VirtualMachineImage struct {
	VirtualMachineImageResource
	// Describes the properties of a Virtual Machine Image.
	Properties *VirtualMachineImageProperties `json:"properties,omitempty"`
}

// Specifies additional capabilities supported by the image
type VirtualMachineImageFeature struct {
	// The name of the feature.
	Name *string `json:"name,omitempty"`

	// The corresponding value for the feature.
	Value *string `json:"value,omitempty"`
}

// Describes the properties of a Virtual Machine Image.
type VirtualMachineImageProperties struct {
	// Describes automatic OS upgrade properties on the image.
	AutomaticOSUpgradeProperties *AutomaticOSUpgradeProperties `json:"automaticOSUpgradeProperties,omitempty"`
	DataDiskImages               *[]*DataDiskImage             `json:"dataDiskImages,omitempty"`

	// Specifies disallowed configuration for the VirtualMachine created from the image
	Disallowed *DisallowedConfiguration       `json:"disallowed,omitempty"`
	Features   *[]*VirtualMachineImageFeature `json:"features,omitempty"`

	// Specifies the HyperVGeneration Type
	HyperVGeneration *HyperVGenerationTypes `json:"hyperVGeneration,omitempty"`

	// Contains the os disk image information.
	OSDiskImage *OSDiskImage `json:"osDiskImage,omitempty"`

	// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
	Plan *PurchasePlan `json:"plan,omitempty"`
}

// Virtual machine image resource information.
type VirtualMachineImageResource struct {
	SubResource
	// The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// The supported Azure location of the resource.
	Location *string `json:"location,omitempty"`

	// The name of the resource.
	Name *string `json:"name,omitempty"`

	// Specifies the tags that are assigned to the virtual machine. For more information about using tags, see Using tags to organize your Azure resources
	// [https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md].
	Tags *map[string]*string `json:"tags,omitempty"`
}

// VirtualMachineImageResourceArrayResponse is the response envelope for operations that return a []*VirtualMachineImageResource type.
type VirtualMachineImageResourceArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Array of VirtualMachineImageResource
	VirtualMachineImageResourceArray []*VirtualMachineImageResource
}

// VirtualMachineImageResponse is the response envelope for operations that return a VirtualMachineImage type.
type VirtualMachineImageResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine Image.
	VirtualMachineImage *VirtualMachineImage
}

// VirtualMachineImagesEdgeZoneGetOptions contains the optional parameters for the VirtualMachineImagesEdgeZone.Get method.
type VirtualMachineImagesEdgeZoneGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesEdgeZoneListOffersOptions contains the optional parameters for the VirtualMachineImagesEdgeZone.ListOffers method.
type VirtualMachineImagesEdgeZoneListOffersOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesEdgeZoneListOptions contains the optional parameters for the VirtualMachineImagesEdgeZone.List method.
type VirtualMachineImagesEdgeZoneListOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
	// Specifies the order of the results returned. Formatted as an OData query.
	Orderby *string
	// An integer value specifying the number of images to return that matches supplied values.
	Top *int32
}

// VirtualMachineImagesEdgeZoneListPublishersOptions contains the optional parameters for the VirtualMachineImagesEdgeZone.ListPublishers method.
type VirtualMachineImagesEdgeZoneListPublishersOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesEdgeZoneListSKUsOptions contains the optional parameters for the VirtualMachineImagesEdgeZone.ListSKUs method.
type VirtualMachineImagesEdgeZoneListSKUsOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesGetOptions contains the optional parameters for the VirtualMachineImages.Get method.
type VirtualMachineImagesGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesListOffersOptions contains the optional parameters for the VirtualMachineImages.ListOffers method.
type VirtualMachineImagesListOffersOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesListOptions contains the optional parameters for the VirtualMachineImages.List method.
type VirtualMachineImagesListOptions struct {
	// The expand expression to apply on the operation.
	Expand  *string
	Orderby *string
	Top     *int32
}

// VirtualMachineImagesListPublishersOptions contains the optional parameters for the VirtualMachineImages.ListPublishers method.
type VirtualMachineImagesListPublishersOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineImagesListSKUsOptions contains the optional parameters for the VirtualMachineImages.ListSKUs method.
type VirtualMachineImagesListSKUsOptions struct {
	// placeholder for future optional parameters
}

// Input for InstallPatches as directly received by the API
type VirtualMachineInstallPatchesParameters struct {
	// Input for InstallPatches on a Linux VM, as directly received by the API
	LinuxParameters *LinuxParameters `json:"linuxParameters,omitempty"`

	// Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours)
	MaximumDuration *string `json:"maximumDuration,omitempty"`

	// Defines when it is acceptable to reboot a VM during a software update operation.
	RebootSetting *VMGuestPatchRebootSetting `json:"rebootSetting,omitempty"`

	// Input for InstallPatches on a Windows VM, as directly received by the API
	WindowsParameters *WindowsParameters `json:"windowsParameters,omitempty"`
}

// The result summary of an installation operation.
type VirtualMachineInstallPatchesResult struct {
	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The number of patches that were not installed due to the user blocking their installation.
	ExcludedPatchCount *int32 `json:"excludedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of patches that could not be installed due to some issue. See errors for details.
	FailedPatchCount *int32 `json:"failedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	InstallationActivityID *string `json:"installationActivityId,omitempty" azure:"ro"`

	// READ-ONLY; The number of patches successfully installed.
	InstalledPatchCount *int32 `json:"installedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; Whether the operation ran out of time before it completed all its intended actions.
	MaintenanceWindowExceeded *bool `json:"maintenanceWindowExceeded,omitempty" azure:"ro"`

	// READ-ONLY; The number of patches that were detected as available for install, but did not meet the operation's criteria.
	NotSelectedPatchCount *int32 `json:"notSelectedPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The patches that were installed during the operation.
	Patches *[]*PatchInstallationDetail `json:"patches,omitempty" azure:"ro"`

	// READ-ONLY; The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens
	// when maintenanceWindowExceeded == true.
	PendingPatchCount *int32 `json:"pendingPatchCount,omitempty" azure:"ro"`

	// READ-ONLY; The reboot state of the VM following completion of the operation.
	RebootStatus *VMGuestPatchRebootStatus `json:"rebootStatus,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the operation began.
	StartDateTime *time.Time `json:"startDateTime,omitempty" azure:"ro"`

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become
	// "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
	Status *PatchOperationStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineInstallPatchesResult.
func (v VirtualMachineInstallPatchesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", v.Error)
	populate(objectMap, "excludedPatchCount", v.ExcludedPatchCount)
	populate(objectMap, "failedPatchCount", v.FailedPatchCount)
	populate(objectMap, "installationActivityId", v.InstallationActivityID)
	populate(objectMap, "installedPatchCount", v.InstalledPatchCount)
	populate(objectMap, "maintenanceWindowExceeded", v.MaintenanceWindowExceeded)
	populate(objectMap, "notSelectedPatchCount", v.NotSelectedPatchCount)
	populate(objectMap, "patches", v.Patches)
	populate(objectMap, "pendingPatchCount", v.PendingPatchCount)
	populate(objectMap, "rebootStatus", v.RebootStatus)
	populate(objectMap, "startDateTime", (*timeRFC3339)(v.StartDateTime))
	populate(objectMap, "status", v.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VirtualMachineInstallPatchesResult.
func (v *VirtualMachineInstallPatchesResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &v.Error)
			delete(rawMsg, key)
		case "excludedPatchCount":
			err = unpopulate(val, &v.ExcludedPatchCount)
			delete(rawMsg, key)
		case "failedPatchCount":
			err = unpopulate(val, &v.FailedPatchCount)
			delete(rawMsg, key)
		case "installationActivityId":
			err = unpopulate(val, &v.InstallationActivityID)
			delete(rawMsg, key)
		case "installedPatchCount":
			err = unpopulate(val, &v.InstalledPatchCount)
			delete(rawMsg, key)
		case "maintenanceWindowExceeded":
			err = unpopulate(val, &v.MaintenanceWindowExceeded)
			delete(rawMsg, key)
		case "notSelectedPatchCount":
			err = unpopulate(val, &v.NotSelectedPatchCount)
			delete(rawMsg, key)
		case "patches":
			err = unpopulate(val, &v.Patches)
			delete(rawMsg, key)
		case "pendingPatchCount":
			err = unpopulate(val, &v.PendingPatchCount)
			delete(rawMsg, key)
		case "rebootStatus":
			err = unpopulate(val, &v.RebootStatus)
			delete(rawMsg, key)
		case "startDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.StartDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &v.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// VirtualMachineInstallPatchesResultPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineInstallPatchesResult
// type.
type VirtualMachineInstallPatchesResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineInstallPatchesResultResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineInstallPatchesResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineInstallPatchesResultResponse is the response envelope for operations that return a VirtualMachineInstallPatchesResult type.
type VirtualMachineInstallPatchesResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The result summary of an installation operation.
	VirtualMachineInstallPatchesResult *VirtualMachineInstallPatchesResult
}

// The instance view of a virtual machine.
type VirtualMachineInstanceView struct {
	// READ-ONLY; Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated
	// with a dedicated host group that has automatic
	// placement enabled.
	// Minimum api-version: 2020-06-01.
	AssignedHost *string `json:"assignedHost,omitempty" azure:"ro"`

	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceView `json:"bootDiagnostics,omitempty"`

	// The computer name assigned to the virtual machine.
	ComputerName *string `json:"computerName,omitempty"`

	// The virtual machine disk information.
	Disks *[]*DiskInstanceView `json:"disks,omitempty"`

	// The extensions information.
	Extensions *[]*VirtualMachineExtensionInstanceView `json:"extensions,omitempty"`

	// Specifies the HyperVGeneration Type associated with a resource
	HyperVGeneration *HyperVGenerationType `json:"hyperVGeneration,omitempty"`

	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatus `json:"maintenanceRedeployStatus,omitempty"`

	// The Operating System running on the virtual machine.
	OSName *string `json:"osName,omitempty"`

	// The version of Operating System running on the virtual machine.
	OSVersion *string `json:"osVersion,omitempty"`

	// [Preview Feature] The status of virtual machine patch operations.
	PatchStatus *VirtualMachinePatchStatus `json:"patchStatus,omitempty"`

	// Specifies the fault domain of the virtual machine.
	PlatformFaultDomain *int32 `json:"platformFaultDomain,omitempty"`

	// Specifies the update domain of the virtual machine.
	PlatformUpdateDomain *int32 `json:"platformUpdateDomain,omitempty"`

	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `json:"rdpThumbPrint,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`

	// The VM Agent running on the virtual machine.
	VMAgent *VirtualMachineAgentInstanceView `json:"vmAgent,omitempty"`

	// READ-ONLY; The health status for the VM.
	VMHealth *VirtualMachineHealthStatus `json:"vmHealth,omitempty" azure:"ro"`
}

// VirtualMachineInstanceViewResponse is the response envelope for operations that return a VirtualMachineInstanceView type.
type VirtualMachineInstanceViewResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The instance view of a virtual machine.
	VirtualMachineInstanceView *VirtualMachineInstanceView
}

// The List Virtual Machine operation response.
type VirtualMachineListResult struct {
	// The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of virtual machines.
	Value *[]*VirtualMachine `json:"value,omitempty"`
}

// VirtualMachineListResultResponse is the response envelope for operations that return a VirtualMachineListResult type.
type VirtualMachineListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine operation response.
	VirtualMachineListResult *VirtualMachineListResult
}

// The status of virtual machine patch operations.
type VirtualMachinePatchStatus struct {
	// The available patch summary of the latest assessment operation for the virtual machine.
	AvailablePatchSummary *AvailablePatchSummary `json:"availablePatchSummary,omitempty"`

	// READ-ONLY; The enablement status of the specified patchMode
	ConfigurationStatuses *[]*InstanceViewStatus `json:"configurationStatuses,omitempty" azure:"ro"`

	// The installation summary of the latest installation operation for the virtual machine.
	LastPatchInstallationSummary *LastPatchInstallationSummary `json:"lastPatchInstallationSummary,omitempty"`
}

// VirtualMachinePollerResponse is the response envelope for operations that asynchronously return a VirtualMachine type.
type VirtualMachinePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachinePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Virtual Machine.
type VirtualMachineProperties struct {
	// Specifies additional capabilities enabled or disabled on the virtual machine.
	AdditionalCapabilities *AdditionalCapabilities `json:"additionalCapabilities,omitempty"`

	// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability
	// set are allocated to different nodes to maximize
	// availability. For more information about availability sets, see Manage the availability of virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	// For more information on Azure planned maintenance, see Planned maintenance for virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
	// Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same
	// resource group as the availability set resource. An
	// existing VM cannot be added to an availability set.
	// This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
	AvailabilitySet *SubResource `json:"availabilitySet,omitempty"`

	// Specifies the billing related details of a Azure Spot virtual machine.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile `json:"billingProfile,omitempty"`

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile `json:"diagnosticsProfile,omitempty"`

	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set.
	// For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01.
	// For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *VirtualMachineEvictionPolicyTypes `json:"evictionPolicy,omitempty"`

	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified
	// in ISO 8601 format. The default value is 90
	// minutes (PT1H30M).
	// Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty"`

	// Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile `json:"hardwareProfile,omitempty"`

	// Specifies information about the dedicated host that the virtual machine resides in.
	// Minimum api-version: 2018-10-01.
	Host *SubResource `json:"host,omitempty"`

	// Specifies information about the dedicated host group that the virtual machine resides in.
	// Minimum api-version: 2020-06-01.
	// NOTE: User cannot specify both host and hostGroup properties.
	HostGroup *SubResource `json:"hostGroup,omitempty"`

	// READ-ONLY; The virtual machine instance view.
	InstanceView *VirtualMachineInstanceView `json:"instanceView,omitempty" azure:"ro"`

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	// Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`

	// Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned.
	OSProfile *OSProfile `json:"osProfile,omitempty"`

	// Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned
	// to a fault domain that best maintains
	// balance across available fault domains.
	// This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.The Virtual Machine Scale Set that is referenced, must
	// have 'platformFaultDomainCount' > 1.This property
	// cannot be updated once the Virtual Machine is created.Fault domain assignment can be viewed in the Virtual Machine Instance View.
	// Minimum api‐version: 2020‐12‐01
	PlatformFaultDomain *int32 `json:"platformFaultDomain,omitempty"`

	// Specifies the priority for the virtual machine.
	// Minimum api-version: 2019-03-01
	Priority *VirtualMachinePriorityTypes `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Specifies information about the proximity placement group that the virtual machine should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource `json:"proximityPlacementGroup,omitempty"`

	// Specifies the Security related profile settings for the virtual machine.
	SecurityProfile *SecurityProfile `json:"securityProfile,omitempty"`

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// READ-ONLY; Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform
	// BIOS commands.
	VMID *string `json:"vmId,omitempty" azure:"ro"`

	// Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual
	// machine scale set are allocated to different
	// nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a
	// virtual machine scale set.
	// This property cannot exist along with a non-null properties.availabilitySet reference.
	// Minimum api‐version: 2019‐03‐01
	VirtualMachineScaleSet *SubResource `json:"virtualMachineScaleSet,omitempty"`
}

// Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be reimaged
type VirtualMachineReimageParameters struct {
	// Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported for VM/VMSS with Ephemeral OS
	// disk.
	TempDisk *bool `json:"tempDisk,omitempty"`
}

// VirtualMachineResponse is the response envelope for operations that return a VirtualMachine type.
type VirtualMachineResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine.
	VirtualMachine *VirtualMachine
}

// Describes a Virtual Machine run command.
type VirtualMachineRunCommand struct {
	Resource
	// Describes the properties of a Virtual Machine run command.
	Properties *VirtualMachineRunCommandProperties `json:"properties,omitempty"`
}

// The instance view of a virtual machine run command.
type VirtualMachineRunCommandInstanceView struct {
	// Script end time.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Script error stream.
	Error *string `json:"error,omitempty"`

	// Communicate script configuration errors or execution messages.
	ExecutionMessage *string `json:"executionMessage,omitempty"`

	// Script execution status.
	ExecutionState *ExecutionState `json:"executionState,omitempty"`

	// Exit code returned from script execution.
	ExitCode *int32 `json:"exitCode,omitempty"`

	// Script output stream.
	Output *string `json:"output,omitempty"`

	// Script start time.
	StartTime *time.Time `json:"startTime,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineRunCommandInstanceView.
func (v VirtualMachineRunCommandInstanceView) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(v.EndTime))
	populate(objectMap, "error", v.Error)
	populate(objectMap, "executionMessage", v.ExecutionMessage)
	populate(objectMap, "executionState", v.ExecutionState)
	populate(objectMap, "exitCode", v.ExitCode)
	populate(objectMap, "output", v.Output)
	populate(objectMap, "startTime", (*timeRFC3339)(v.StartTime))
	populate(objectMap, "statuses", v.Statuses)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VirtualMachineRunCommandInstanceView.
func (v *VirtualMachineRunCommandInstanceView) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &v.Error)
			delete(rawMsg, key)
		case "executionMessage":
			err = unpopulate(val, &v.ExecutionMessage)
			delete(rawMsg, key)
		case "executionState":
			err = unpopulate(val, &v.ExecutionState)
			delete(rawMsg, key)
		case "exitCode":
			err = unpopulate(val, &v.ExitCode)
			delete(rawMsg, key)
		case "output":
			err = unpopulate(val, &v.Output)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "statuses":
			err = unpopulate(val, &v.Statuses)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// VirtualMachineRunCommandPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineRunCommand type.
type VirtualMachineRunCommandPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineRunCommandResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineRunCommandPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Virtual Machine run command.
type VirtualMachineRunCommandProperties struct {
	// Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
	AsyncExecution *bool `json:"asyncExecution,omitempty"`

	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobURI *string `json:"errorBlobUri,omitempty"`

	// READ-ONLY; The virtual machine run command instance view.
	InstanceView *VirtualMachineRunCommandInstanceView `json:"instanceView,omitempty" azure:"ro"`

	// Specifies the Azure storage blob where script output stream will be uploaded.
	OutputBlobURI *string `json:"outputBlobUri,omitempty"`

	// The parameters used by the script.
	Parameters *[]*RunCommandInputParameter `json:"parameters,omitempty"`

	// The parameters used by the script.
	ProtectedParameters *[]*RunCommandInputParameter `json:"protectedParameters,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Specifies the user account password on the VM when executing the run command.
	RunAsPassword *string `json:"runAsPassword,omitempty"`

	// Specifies the user account on the VM when executing the run command.
	RunAsUser *string `json:"runAsUser,omitempty"`

	// The source of the run command script.
	Source *VirtualMachineRunCommandScriptSource `json:"source,omitempty"`

	// The timeout in seconds to execute the run command.
	TimeoutInSeconds *int32 `json:"timeoutInSeconds,omitempty"`
}

// VirtualMachineRunCommandResponse is the response envelope for operations that return a VirtualMachineRunCommand type.
type VirtualMachineRunCommandResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine run command.
	VirtualMachineRunCommand *VirtualMachineRunCommand
}

// Describes the script sources for run command.
type VirtualMachineRunCommandScriptSource struct {
	// Specifies a commandId of predefined built-in script.
	CommandID *string `json:"commandId,omitempty"`

	// Specifies the script content to be executed on the VM.
	Script *string `json:"script,omitempty"`

	// Specifies the script download location.
	ScriptURI *string `json:"scriptUri,omitempty"`
}

// Describes a Virtual Machine run command.
type VirtualMachineRunCommandUpdate struct {
	UpdateResource
	// Describes the properties of a Virtual Machine run command.
	Properties *VirtualMachineRunCommandProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineRunCommandUpdate.
func (v VirtualMachineRunCommandUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.UpdateResource.marshalInternal()
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VirtualMachineRunCommandsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineRunCommands.BeginCreateOrUpdate method.
type VirtualMachineRunCommandsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineRunCommandsBeginDeleteOptions contains the optional parameters for the VirtualMachineRunCommands.BeginDelete method.
type VirtualMachineRunCommandsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineRunCommandsBeginUpdateOptions contains the optional parameters for the VirtualMachineRunCommands.BeginUpdate method.
type VirtualMachineRunCommandsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineRunCommandsGetByVirtualMachineOptions contains the optional parameters for the VirtualMachineRunCommands.GetByVirtualMachine method.
type VirtualMachineRunCommandsGetByVirtualMachineOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineRunCommandsGetOptions contains the optional parameters for the VirtualMachineRunCommands.Get method.
type VirtualMachineRunCommandsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineRunCommandsListByVirtualMachineOptions contains the optional parameters for the VirtualMachineRunCommands.ListByVirtualMachine method.
type VirtualMachineRunCommandsListByVirtualMachineOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineRunCommandsListOptions contains the optional parameters for the VirtualMachineRunCommands.List method.
type VirtualMachineRunCommandsListOptions struct {
	// placeholder for future optional parameters
}

// The List run command operation response
type VirtualMachineRunCommandsListResult struct {
	// The uri to fetch the next page of run commands.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of run commands
	Value *[]*VirtualMachineRunCommand `json:"value,omitempty"`
}

// VirtualMachineRunCommandsListResultResponse is the response envelope for operations that return a VirtualMachineRunCommandsListResult type.
type VirtualMachineRunCommandsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List run command operation response
	VirtualMachineRunCommandsListResult *VirtualMachineRunCommandsListResult
}

// Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSet struct {
	Resource
	// The extended location of the Virtual Machine Scale Set.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentity `json:"identity,omitempty"`

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
	// use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
	// Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan `json:"plan,omitempty"`

	// Describes the properties of a Virtual Machine Scale Set.
	Properties *VirtualMachineScaleSetProperties `json:"properties,omitempty"`

	// The virtual machine scale set sku.
	SKU *SKU `json:"sku,omitempty"`

	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set
	Zones *[]*string `json:"zones,omitempty"`
}

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDisk struct {
	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes `json:"caching,omitempty"`

	// The create option.
	CreateOption *DiskCreateOptionTypes `json:"createOption,omitempty"`

	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would
	// be assigned based on diskSizeGB.
	DiskIOPSReadWrite *int64 `json:"diskIOPSReadWrite,omitempty"`

	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default
	// value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *int64 `json:"diskMBpsReadWrite,omitempty"`

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data
	// disk attached to a VM.
	Lun *int32 `json:"lun,omitempty"`

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `json:"managedDisk,omitempty"`

	// The disk name.
	Name *string `json:"name,omitempty"`

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtension struct {
	SubResourceReadOnly
	// The name of the extension.
	Name *string `json:"name,omitempty"`

	// Describes the properties of a Virtual Machine Scale Set Extension.
	Properties *VirtualMachineScaleSetExtensionProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// The List VM scale set extension operation response.
type VirtualMachineScaleSetExtensionListResult struct {
	// The uri to fetch the next page of VM scale set extensions. Call ListNext() with this to fetch the next page of VM scale set extensions.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of VM scale set extensions.
	Value *[]*VirtualMachineScaleSetExtension `json:"value,omitempty"`
}

// VirtualMachineScaleSetExtensionListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetExtensionListResult type.
type VirtualMachineScaleSetExtensionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List VM scale set extension operation response.
	VirtualMachineScaleSetExtensionListResult *VirtualMachineScaleSetExtensionListResult
}

// VirtualMachineScaleSetExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetExtension type.
type VirtualMachineScaleSetExtensionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineScaleSetExtensionResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineScaleSetExtensionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfile struct {
	// The virtual machine scale set child extension resources.
	Extensions *[]*VirtualMachineScaleSetExtension `json:"extensions,omitempty"`

	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified
	// in ISO 8601 format. The default value is 90
	// minutes (PT1H30M).
	// Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string `json:"extensionsTimeBudget,omitempty"`
}

// Describes the properties of a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not
	// upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool `json:"autoUpgradeMinorVersion,omitempty"`

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
	EnableAutomaticUpgrade *bool `json:"enableAutomaticUpgrade,omitempty"`

	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has
	// not changed.
	ForceUpdateTag *string `json:"forceUpdateTag,omitempty"`

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings interface{} `json:"protectedSettings,omitempty"`

	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions *[]*string `json:"provisionAfterExtensions,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// The name of the extension handler publisher.
	Publisher *string `json:"publisher,omitempty"`

	// Json formatted public settings for the extension.
	Settings interface{} `json:"settings,omitempty"`

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string `json:"type,omitempty"`

	// Specifies the version of the script handler.
	TypeHandlerVersion *string `json:"typeHandlerVersion,omitempty"`
}

// VirtualMachineScaleSetExtensionResponse is the response envelope for operations that return a VirtualMachineScaleSetExtension type.
type VirtualMachineScaleSetExtensionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine Scale Set Extension.
	VirtualMachineScaleSetExtension *VirtualMachineScaleSetExtension
}

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionUpdate struct {
	SubResourceReadOnly
	// READ-ONLY; The name of the extension.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Describes the properties of a Virtual Machine Scale Set Extension.
	Properties *VirtualMachineScaleSetExtensionProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineScaleSetExtensionUpdate.
func (v VirtualMachineScaleSetExtensionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.SubResourceReadOnly.marshalInternal()
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// VirtualMachineScaleSetExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetExtensionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginDelete method.
type VirtualMachineScaleSetExtensionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginUpdate method.
type VirtualMachineScaleSetExtensionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetExtensionsGetOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.Get method.
type VirtualMachineScaleSetExtensionsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineScaleSetExtensionsListOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.List method.
type VirtualMachineScaleSetExtensionsListOptions struct {
	// placeholder for future optional parameters
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfiguration struct {
	SubResource
	// The IP configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machine scale set network profile's IP configuration properties.
	Properties *VirtualMachineScaleSetIPConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machine scale set network profile's IP configuration properties.
type VirtualMachineScaleSetIPConfigurationProperties struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application
	// gateways. Multiple scale sets cannot use the
	// same application gateway.
	ApplicationGatewayBackendAddressPools *[]*SubResource `json:"applicationGatewayBackendAddressPools,omitempty"`

	// Specifies an array of references to application security group.
	ApplicationSecurityGroups *[]*SubResource `json:"applicationSecurityGroups,omitempty"`

	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal
	// load balancer. Multiple scale sets cannot
	// use the same basic sku load balancer.
	LoadBalancerBackendAddressPools *[]*SubResource `json:"loadBalancerBackendAddressPools,omitempty"`

	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal
	// load balancer. Multiple scale sets cannot use
	// the same basic sku load balancer.
	LoadBalancerInboundNatPools *[]*SubResource `json:"loadBalancerInboundNatPools,omitempty"`

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`

	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible
	// values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *IPVersion `json:"privateIPAddressVersion,omitempty"`

	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfiguration `json:"publicIPAddressConfiguration,omitempty"`

	// Specifies the identifier of the subnet.
	Subnet *APIEntityReference `json:"subnet,omitempty"`
}

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIPTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IPTagType *string `json:"ipTagType,omitempty"`

	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string `json:"tag,omitempty"`
}

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentity struct {
	// READ-ONLY; The principal id of virtual machine scale set identity. This property will only be provided for a system assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id associated with the virtual machine scale set. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`

	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and
	// a set of user assigned identities. The type 'None'
	// will remove any identities from the virtual machine scale set.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references will be ARM resource ids in the
	// form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities *map[string]*VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue `json:"userAssignedIdentities,omitempty"`
}

type VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// The instance view of a virtual machine scale set.
type VirtualMachineScaleSetInstanceView struct {
	// READ-ONLY; The extensions information.
	Extensions *[]*VirtualMachineScaleSetVMExtensionsSummary `json:"extensions,omitempty" azure:"ro"`

	// READ-ONLY; The orchestration services information.
	OrchestrationServices *[]*OrchestrationServiceSummary `json:"orchestrationServices,omitempty" azure:"ro"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`

	// READ-ONLY; The instance view status summary for the virtual machine scale set.
	VirtualMachine *VirtualMachineScaleSetInstanceViewStatusesSummary `json:"virtualMachine,omitempty" azure:"ro"`
}

// VirtualMachineScaleSetInstanceViewResponse is the response envelope for operations that return a VirtualMachineScaleSetInstanceView type.
type VirtualMachineScaleSetInstanceViewResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The instance view of a virtual machine scale set.
	VirtualMachineScaleSetInstanceView *VirtualMachineScaleSetInstanceView
}

// Instance view statuses summary for virtual machines of a virtual machine scale set.
type VirtualMachineScaleSetInstanceViewStatusesSummary struct {
	// READ-ONLY; The extensions information.
	StatusesSummary *[]*VirtualMachineStatusCodeCount `json:"statusesSummary,omitempty" azure:"ro"`
}

// List of Virtual Machine Scale Set OS Upgrade History operation response.
type VirtualMachineScaleSetListOSUpgradeHistory struct {
	// The uri to fetch the next page of OS Upgrade History. Call ListNext() with this to fetch the next page of history of upgrades.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of OS upgrades performed on the virtual machine scale set.
	Value *[]*UpgradeOperationHistoricalStatusInfo `json:"value,omitempty"`
}

// VirtualMachineScaleSetListOSUpgradeHistoryResponse is the response envelope for operations that return a VirtualMachineScaleSetListOSUpgradeHistory type.
type VirtualMachineScaleSetListOSUpgradeHistoryResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of Virtual Machine Scale Set OS Upgrade History operation response.
	VirtualMachineScaleSetListOSUpgradeHistory *VirtualMachineScaleSetListOSUpgradeHistory
}

// The List Virtual Machine operation response.
type VirtualMachineScaleSetListResult struct {
	// The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of VMSS.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of virtual machine scale sets.
	Value *[]*VirtualMachineScaleSet `json:"value,omitempty"`
}

// VirtualMachineScaleSetListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListResult type.
type VirtualMachineScaleSetListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine operation response.
	VirtualMachineScaleSetListResult *VirtualMachineScaleSetListResult
}

// The Virtual Machine Scale Set List Skus operation response.
type VirtualMachineScaleSetListSKUsResult struct {
	// The uri to fetch the next page of Virtual Machine Scale Set Skus. Call ListNext() with this to fetch the next page of VMSS Skus.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of skus available for the virtual machine scale set.
	Value *[]*VirtualMachineScaleSetSKU `json:"value,omitempty"`
}

// VirtualMachineScaleSetListSKUsResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListSKUsResult type.
type VirtualMachineScaleSetListSKUsResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The Virtual Machine Scale Set List Skus operation response.
	VirtualMachineScaleSetListSKUsResult *VirtualMachineScaleSetListSKUsResult
}

// The List Virtual Machine operation response.
type VirtualMachineScaleSetListWithLinkResult struct {
	// The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of Virtual Machine Scale Sets.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of virtual machine scale sets.
	Value *[]*VirtualMachineScaleSet `json:"value,omitempty"`
}

// VirtualMachineScaleSetListWithLinkResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListWithLinkResult type.
type VirtualMachineScaleSetListWithLinkResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine operation response.
	VirtualMachineScaleSetListWithLinkResult *VirtualMachineScaleSetListWithLinkResult
}

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters `json:"diskEncryptionSet,omitempty"`

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
	StorageAccountType *StorageAccountTypes `json:"storageAccountType,omitempty"`
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfiguration struct {
	SubResource
	// The network configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machine scale set network profile's IP configuration.
	Properties *VirtualMachineScaleSetNetworkConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDNSSettings struct {
	// List of DNS servers IP addresses
	DNSServers *[]*string `json:"dnsServers,omitempty"`
}

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetNetworkConfigurationProperties struct {
	// The dns settings to be applied on the network interfaces.
	DNSSettings *VirtualMachineScaleSetNetworkConfigurationDNSSettings `json:"dnsSettings,omitempty"`

	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`

	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `json:"enableFpga,omitempty"`

	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`

	// Specifies the IP configurations of the network interface.
	IPConfigurations *[]*VirtualMachineScaleSetIPConfiguration `json:"ipConfigurations,omitempty"`

	// The network security group.
	NetworkSecurityGroup *SubResource `json:"networkSecurityGroup,omitempty"`

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool `json:"primary,omitempty"`
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *APIEntityReference `json:"healthProbe,omitempty"`

	// The list of network configurations.
	NetworkInterfaceConfigurations *[]*VirtualMachineScaleSetNetworkConfiguration `json:"networkInterfaceConfigurations,omitempty"`
}

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDisk struct {
	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes `json:"caching,omitempty"`

	// Specifies how the virtual machines in the scale set should be created.
	// The only allowed value is: FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform
	// image, you also use the imageReference element
	// described above. If you are using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes `json:"createOption,omitempty"`

	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettings `json:"diffDiskSettings,omitempty"`

	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDisk `json:"image,omitempty"`

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `json:"managedDisk,omitempty"`

	// The disk name.
	Name *string `json:"name,omitempty"`

	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers *[]*string `json:"vhdContainers,omitempty"`

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfile struct {
	// Specifies the password of the administrator account.
	// Minimum-length (Windows): 8 characters
	// Minimum-length (Linux): 6 characters
	// Max-length (Windows): 123 characters
	// Max-length (Linux): 72 characters
	// Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	// Has lower characters
	// Has upper characters
	// Has a digit
	// Has a special character (Regex match [\W_])
	// Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!"
	// For resetting the password, see How to reset the Remote Desktop service or its login password in a Windows VM
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-reset-rdp?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
	// For resetting root password, see Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-vmaccess-extension?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#reset-root-password]
	AdminPassword *string `json:"adminPassword,omitempty"`

	// Specifies the name of the administrator account.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	// "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters
	// For root access to the Linux VM, see Using root privileges on Linux virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For a list of built-in system users on Linux that should not be used in this field, see Selecting User Names for Linux on Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	AdminUsername *string `json:"adminUsername,omitempty"`

	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long.
	ComputerNamePrefix *string `json:"computerNamePrefix,omitempty"`

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine.
	// The maximum length of the binary array is
	// 65535 bytes.
	// For using cloud-init for your VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string `json:"customData,omitempty"`

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	LinuxConfiguration *LinuxConfiguration `json:"linuxConfiguration,omitempty"`

	// Specifies set of certificates that should be installed onto the virtual machines in the scale set.
	Secrets *[]*VaultSecretGroup `json:"secrets,omitempty"`

	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
}

// VirtualMachineScaleSetPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSet type.
type VirtualMachineScaleSetPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineScaleSetResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineScaleSetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetProperties struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines
	// have the capability to support attaching
	// managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities `json:"additionalCapabilities,omitempty"`

	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicy `json:"automaticRepairsPolicy,omitempty"`

	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that
	// the extensions do not run on the extra
	// overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool `json:"doNotRunExtensionsOnOverprovisionedVMs,omitempty"`

	// Specifies information about the dedicated host group that the virtual machine scale set resides in.
	// Minimum api-version: 2020-06-01.
	HostGroup *SubResource `json:"hostGroup,omitempty"`

	// Specifies the orchestration mode for the virtual machine scale set.
	OrchestrationMode *OrchestrationMode `json:"orchestrationMode,omitempty"`

	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool `json:"overprovision,omitempty"`

	// Fault Domain count for each placement group.
	PlatformFaultDomainCount *int32 `json:"platformFaultDomainCount,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource `json:"proximityPlacementGroup,omitempty"`

	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy *ScaleInPolicy `json:"scaleInPolicy,omitempty"`

	// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified
	// to false. However, if singlePlacementGroup
	// is false, it may not be modified to true.
	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty"`

	// READ-ONLY; Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueID *string `json:"uniqueId,omitempty" azure:"ro"`

	// The upgrade policy.
	UpgradePolicy *UpgradePolicy `json:"upgradePolicy,omitempty"`

	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetVMProfile `json:"virtualMachineProfile,omitempty"`

	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance *bool `json:"zoneBalance,omitempty"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfiguration struct {
	// The publicIP address configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
	Properties *VirtualMachineScaleSetPublicIPAddressConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings struct {
	// The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels of the PublicIPAddress resources that will
	// be created
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationProperties struct {
	// The dns settings to be applied on the publicIP addresses .
	DNSSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings `json:"dnsSettings,omitempty"`

	// The list of IP tags associated with the public IP address.
	IPTags *[]*VirtualMachineScaleSetIPTag `json:"ipTags,omitempty"`

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible
	// values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *IPVersion `json:"publicIPAddressVersion,omitempty"`

	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`
}

// Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetReimageParameters struct {
	VirtualMachineScaleSetVMReimageParameters
	// The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual
	// machines in the virtual machine scale set.
	InstanceIDs *[]*string `json:"instanceIds,omitempty"`
}

// VirtualMachineScaleSetResponse is the response envelope for operations that return a VirtualMachineScaleSet type.
type VirtualMachineScaleSetResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a Virtual Machine Scale Set.
	VirtualMachineScaleSet *VirtualMachineScaleSet
}

// VirtualMachineScaleSetRollingUpgradesBeginCancelOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginCancel method.
type VirtualMachineScaleSetRollingUpgradesBeginCancelOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetRollingUpgradesBeginStartExtensionUpgradeOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginStartExtensionUpgrade
// method.
type VirtualMachineScaleSetRollingUpgradesBeginStartExtensionUpgradeOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetRollingUpgradesBeginStartOSUpgradeOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginStartOSUpgrade
// method.
type VirtualMachineScaleSetRollingUpgradesBeginStartOSUpgradeOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetRollingUpgradesGetLatestOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.GetLatest method.
type VirtualMachineScaleSetRollingUpgradesGetLatestOptions struct {
	// placeholder for future optional parameters
}

// Describes an available virtual machine scale set sku.
type VirtualMachineScaleSetSKU struct {
	// READ-ONLY; Specifies the number of virtual machines in the scale set.
	Capacity *VirtualMachineScaleSetSKUCapacity `json:"capacity,omitempty" azure:"ro"`

	// READ-ONLY; The type of resource the sku applies to.
	ResourceType *string `json:"resourceType,omitempty" azure:"ro"`

	// READ-ONLY; The Sku.
	SKU *SKU `json:"sku,omitempty" azure:"ro"`
}

// Describes scaling information of a sku.
type VirtualMachineScaleSetSKUCapacity struct {
	// READ-ONLY; The default capacity.
	DefaultCapacity *int64 `json:"defaultCapacity,omitempty" azure:"ro"`

	// READ-ONLY; The maximum capacity that can be set.
	Maximum *int64 `json:"maximum,omitempty" azure:"ro"`

	// READ-ONLY; The minimum capacity.
	Minimum *int64 `json:"minimum,omitempty" azure:"ro"`

	// READ-ONLY; The scale type applicable to the sku.
	ScaleType *VirtualMachineScaleSetSKUScaleType `json:"scaleType,omitempty" azure:"ro"`
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfile struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	DataDisks *[]*VirtualMachineScaleSetDataDisk `json:"dataDisks,omitempty"`

	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This
	// element is required when you want to use a platform
	// image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference `json:"imageReference,omitempty"`

	// Specifies information about the operating system disk used by the virtual machines in the scale set.
	// For more information about disks, see About disks and VHDs for Azure virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	OSDisk *VirtualMachineScaleSetOSDisk `json:"osDisk,omitempty"`
}

// Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdate struct {
	UpdateResource
	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentity `json:"identity,omitempty"`

	// The purchase plan when deploying a virtual machine scale set from VM Marketplace images.
	Plan *Plan `json:"plan,omitempty"`

	// Describes the properties of a Virtual Machine Scale Set.
	Properties *VirtualMachineScaleSetUpdateProperties `json:"properties,omitempty"`

	// The virtual machine scale set sku.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineScaleSetUpdate.
func (v VirtualMachineScaleSetUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.UpdateResource.marshalInternal()
	populate(objectMap, "identity", v.Identity)
	populate(objectMap, "plan", v.Plan)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "sku", v.SKU)
	return json.Marshal(objectMap)
}

// Describes a virtual machine scale set network profile's IP configuration. NOTE: The subnet of a scale set may be modified as long as the original subnet
// and the new subnet are in the same virtual
// network
type VirtualMachineScaleSetUpdateIPConfiguration struct {
	SubResource
	// The IP configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machine scale set network profile's IP configuration properties.
	Properties *VirtualMachineScaleSetUpdateIPConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machine scale set network profile's IP configuration properties.
type VirtualMachineScaleSetUpdateIPConfigurationProperties struct {
	// The application gateway backend address pools.
	ApplicationGatewayBackendAddressPools *[]*SubResource `json:"applicationGatewayBackendAddressPools,omitempty"`

	// Specifies an array of references to application security group.
	ApplicationSecurityGroups *[]*SubResource `json:"applicationSecurityGroups,omitempty"`

	// The load balancer backend address pools.
	LoadBalancerBackendAddressPools *[]*SubResource `json:"loadBalancerBackendAddressPools,omitempty"`

	// The load balancer inbound nat pools.
	LoadBalancerInboundNatPools *[]*SubResource `json:"loadBalancerInboundNatPools,omitempty"`

	// Specifies the primary IP Configuration in case the network interface has more than one IP Configuration.
	Primary *bool `json:"primary,omitempty"`

	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible
	// values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *IPVersion `json:"privateIPAddressVersion,omitempty"`

	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetUpdatePublicIPAddressConfiguration `json:"publicIPAddressConfiguration,omitempty"`

	// The subnet.
	Subnet *APIEntityReference `json:"subnet,omitempty"`
}

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetUpdateNetworkConfiguration struct {
	SubResource
	// The network configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machine scale set updatable network profile's IP configuration.Use this object for updating network profile's IP Configuration.
	Properties *VirtualMachineScaleSetUpdateNetworkConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machine scale set updatable network profile's IP configuration.Use this object for updating network profile's IP Configuration.
type VirtualMachineScaleSetUpdateNetworkConfigurationProperties struct {
	// The dns settings to be applied on the network interfaces.
	DNSSettings *VirtualMachineScaleSetNetworkConfigurationDNSSettings `json:"dnsSettings,omitempty"`

	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`

	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool `json:"enableFpga,omitempty"`

	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`

	// The virtual machine scale set IP Configuration.
	IPConfigurations *[]*VirtualMachineScaleSetUpdateIPConfiguration `json:"ipConfigurations,omitempty"`

	// The network security group.
	NetworkSecurityGroup *SubResource `json:"networkSecurityGroup,omitempty"`

	// Whether this is a primary NIC on a virtual machine.
	Primary *bool `json:"primary,omitempty"`
}

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetUpdateNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *APIEntityReference `json:"healthProbe,omitempty"`

	// The list of network configurations.
	NetworkInterfaceConfigurations *[]*VirtualMachineScaleSetUpdateNetworkConfiguration `json:"networkInterfaceConfigurations,omitempty"`
}

// Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk.
type VirtualMachineScaleSetUpdateOSDisk struct {
	// The caching type.
	Caching *CachingTypes `json:"caching,omitempty"`

	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before using it to attach to the Virtual Machine. If SourceImage is provided,
	// the destination VirtualHardDisk should not
	// exist.
	Image *VirtualHardDisk `json:"image,omitempty"`

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters `json:"managedDisk,omitempty"`

	// The list of virtual hard disk container uris.
	VhdContainers *[]*string `json:"vhdContainers,omitempty"`

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool `json:"writeAcceleratorEnabled,omitempty"`
}

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetUpdateOSProfile struct {
	// A base-64 encoded string of custom data.
	CustomData *string `json:"customData,omitempty"`

	// The Linux Configuration of the OS profile.
	LinuxConfiguration *LinuxConfiguration `json:"linuxConfiguration,omitempty"`

	// The List of certificates for addition to the VM.
	Secrets *[]*VaultSecretGroup `json:"secrets,omitempty"`

	// The Windows Configuration of the OS profile.
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
}

// Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdateProperties struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines
	// have the capability to support attaching
	// managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities `json:"additionalCapabilities,omitempty"`

	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicy `json:"automaticRepairsPolicy,omitempty"`

	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that
	// the extensions do not run on the extra
	// overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool `json:"doNotRunExtensionsOnOverprovisionedVMs,omitempty"`

	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool `json:"overprovision,omitempty"`

	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource `json:"proximityPlacementGroup,omitempty"`

	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy *ScaleInPolicy `json:"scaleInPolicy,omitempty"`

	// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified
	// to false. However, if singlePlacementGroup
	// is false, it may not be modified to true.
	SinglePlacementGroup *bool `json:"singlePlacementGroup,omitempty"`

	// The upgrade policy.
	UpgradePolicy *UpgradePolicy `json:"upgradePolicy,omitempty"`

	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetUpdateVMProfile `json:"virtualMachineProfile,omitempty"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfiguration struct {
	// The publicIP address configuration name.
	Name *string `json:"name,omitempty"`

	// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
	Properties *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties `json:"properties,omitempty"`
}

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties struct {
	// The dns settings to be applied on the publicIP addresses .
	DNSSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings `json:"dnsSettings,omitempty"`

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`
}

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetUpdateStorageProfile struct {
	// The data disks.
	DataDisks *[]*VirtualMachineScaleSetDataDisk `json:"dataDisks,omitempty"`

	// The image reference.
	ImageReference *ImageReference `json:"imageReference,omitempty"`

	// The OS disk.
	OSDisk *VirtualMachineScaleSetUpdateOSDisk `json:"osDisk,omitempty"`
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetUpdateVMProfile struct {
	// Specifies the billing related details of a Azure Spot VMSS.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile `json:"billingProfile,omitempty"`

	// The virtual machine scale set diagnostics profile.
	DiagnosticsProfile *DiagnosticsProfile `json:"diagnosticsProfile,omitempty"`

	// The virtual machine scale set extension profile.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile `json:"extensionProfile,omitempty"`

	// The license type, which is for bring your own license scenario.
	LicenseType *string `json:"licenseType,omitempty"`

	// The virtual machine scale set network profile.
	NetworkProfile *VirtualMachineScaleSetUpdateNetworkProfile `json:"networkProfile,omitempty"`

	// The virtual machine scale set OS profile.
	OSProfile *VirtualMachineScaleSetUpdateOSProfile `json:"osProfile,omitempty"`

	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile `json:"scheduledEventsProfile,omitempty"`

	// The virtual machine scale set Security profile
	SecurityProfile *SecurityProfile `json:"securityProfile,omitempty"`

	// The virtual machine scale set storage profile.
	StorageProfile *VirtualMachineScaleSetUpdateStorageProfile `json:"storageProfile,omitempty"`
}

// Describes a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVM struct {
	Resource
	// READ-ONLY; The virtual machine instance ID.
	InstanceID *string `json:"instanceId,omitempty" azure:"ro"`

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
	// use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
	// Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan `json:"plan,omitempty"`

	// Describes the properties of a virtual machine scale set virtual machine.
	Properties *VirtualMachineScaleSetVMProperties `json:"properties,omitempty"`

	// READ-ONLY; The virtual machine child extension resources.
	Resources *[]*VirtualMachineExtension `json:"resources,omitempty" azure:"ro"`

	// READ-ONLY; The virtual machine SKU.
	SKU *SKU `json:"sku,omitempty" azure:"ro"`

	// READ-ONLY; The virtual machine zones.
	Zones *[]*string `json:"zones,omitempty" azure:"ro"`
}

// Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtension struct {
	SubResourceReadOnly
	// READ-ONLY; The name of the extension.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// VirtualMachineScaleSetVMExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetVMExtension
// type.
type VirtualMachineScaleSetVMExtensionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineScaleSetVMExtensionResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineScaleSetVMExtensionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineScaleSetVMExtensionResponse is the response envelope for operations that return a VirtualMachineScaleSetVMExtension type.
type VirtualMachineScaleSetVMExtensionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a VMSS VM Extension.
	VirtualMachineScaleSetVMExtension *VirtualMachineScaleSetVMExtension
}

// Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtensionUpdate struct {
	SubResourceReadOnly
	// READ-ONLY; The name of the extension.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionUpdateProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineScaleSetVMExtensionUpdate.
func (v VirtualMachineScaleSetVMExtensionUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.SubResourceReadOnly.marshalInternal()
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// VirtualMachineScaleSetVMExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetVMExtensionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginDelete method.
type VirtualMachineScaleSetVMExtensionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginUpdate method.
type VirtualMachineScaleSetVMExtensionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMExtensionsGetOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.Get method.
type VirtualMachineScaleSetVMExtensionsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineScaleSetVMExtensionsListOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.List method.
type VirtualMachineScaleSetVMExtensionsListOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// The List VMSS VM Extension operation response
type VirtualMachineScaleSetVMExtensionsListResult struct {
	// The list of VMSS VM extensions
	Value *[]*VirtualMachineScaleSetVMExtension `json:"value,omitempty"`
}

// VirtualMachineScaleSetVMExtensionsListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetVMExtensionsListResult
// type.
type VirtualMachineScaleSetVMExtensionsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List VMSS VM Extension operation response
	VirtualMachineScaleSetVMExtensionsListResult *VirtualMachineScaleSetVMExtensionsListResult
}

// Extensions summary for virtual machines of a virtual machine scale set.
type VirtualMachineScaleSetVMExtensionsSummary struct {
	// READ-ONLY; The extension name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The extensions information.
	StatusesSummary *[]*VirtualMachineStatusCodeCount `json:"statusesSummary,omitempty" azure:"ro"`
}

// Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceIDs struct {
	// The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation being performed on all virtual
	// machines in the virtual machine scale set.
	InstanceIDs *[]*string `json:"instanceIds,omitempty"`
}

// Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceRequiredIDs struct {
	// The virtual machine scale set instance ids.
	InstanceIDs *[]*string `json:"instanceIds,omitempty"`
}

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceView struct {
	// READ-ONLY; Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated
	// with a dedicated host group that has automatic
	// placement enabled.
	// Minimum api-version: 2020-06-01.
	AssignedHost *string `json:"assignedHost,omitempty" azure:"ro"`

	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceView `json:"bootDiagnostics,omitempty"`

	// The disks information.
	Disks *[]*DiskInstanceView `json:"disks,omitempty"`

	// The extensions information.
	Extensions *[]*VirtualMachineExtensionInstanceView `json:"extensions,omitempty"`

	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatus `json:"maintenanceRedeployStatus,omitempty"`

	// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
	PlacementGroupID *string `json:"placementGroupId,omitempty"`

	// The Fault Domain count.
	PlatformFaultDomain *int32 `json:"platformFaultDomain,omitempty"`

	// The Update Domain count.
	PlatformUpdateDomain *int32 `json:"platformUpdateDomain,omitempty"`

	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string `json:"rdpThumbPrint,omitempty"`

	// The resource status information.
	Statuses *[]*InstanceViewStatus `json:"statuses,omitempty"`

	// The VM Agent running on the virtual machine.
	VMAgent *VirtualMachineAgentInstanceView `json:"vmAgent,omitempty"`

	// READ-ONLY; The health status for the VM.
	VMHealth *VirtualMachineHealthStatus `json:"vmHealth,omitempty" azure:"ro"`
}

// VirtualMachineScaleSetVMInstanceViewResponse is the response envelope for operations that return a VirtualMachineScaleSetVMInstanceView type.
type VirtualMachineScaleSetVMInstanceViewResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The instance view of a virtual machine scale set VM.
	VirtualMachineScaleSetVMInstanceView *VirtualMachineScaleSetVMInstanceView
}

// The List Virtual Machine Scale Set VMs operation response.
type VirtualMachineScaleSetVMListResult struct {
	// The uri to fetch the next page of Virtual Machine Scale Set VMs. Call ListNext() with this to fetch the next page of VMSS VMs
	NextLink *string `json:"nextLink,omitempty"`

	// The list of virtual machine scale sets VMs.
	Value *[]*VirtualMachineScaleSetVM `json:"value,omitempty"`
}

// VirtualMachineScaleSetVMListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetVMListResult type.
type VirtualMachineScaleSetVMListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine Scale Set VMs operation response.
	VirtualMachineScaleSetVMListResult *VirtualMachineScaleSetVMListResult
}

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfiguration struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations *[]*VirtualMachineScaleSetNetworkConfiguration `json:"networkInterfaceConfigurations,omitempty"`
}

// VirtualMachineScaleSetVMPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetVM type.
type VirtualMachineScaleSetVMPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualMachineScaleSetVMResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualMachineScaleSetVMPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfile struct {
	// Specifies the billing related details of a Azure Spot VMSS.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile `json:"billingProfile,omitempty"`

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile `json:"diagnosticsProfile,omitempty"`

	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set.
	// For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01.
	// For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *VirtualMachineEvictionPolicyTypes `json:"evictionPolicy,omitempty"`

	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile `json:"extensionProfile,omitempty"`

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfile `json:"networkProfile,omitempty"`

	// Specifies the operating system settings for the virtual machines in the scale set.
	OSProfile *VirtualMachineScaleSetOSProfile `json:"osProfile,omitempty"`

	// Specifies the priority for the virtual machines in the scale set.
	// Minimum api-version: 2017-10-30-preview
	Priority *VirtualMachinePriorityTypes `json:"priority,omitempty"`

	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile `json:"scheduledEventsProfile,omitempty"`

	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfile `json:"securityProfile,omitempty"`

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfile `json:"storageProfile,omitempty"`
}

// Describes the properties of a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVMProperties struct {
	// Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability
	// to support attaching managed data disks with
	// UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities `json:"additionalCapabilities,omitempty"`

	// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability
	// set are allocated to different nodes to maximize
	// availability. For more information about availability sets, see Manage the availability of virtual machines
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
	// For more information on Azure planned maintenance, see Planned maintenance for virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
	// Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
	AvailabilitySet *SubResource `json:"availabilitySet,omitempty"`

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile `json:"diagnosticsProfile,omitempty"`

	// Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile `json:"hardwareProfile,omitempty"`

	// READ-ONLY; The virtual machine instance view.
	InstanceView *VirtualMachineScaleSetVMInstanceView `json:"instanceView,omitempty" azure:"ro"`

	// READ-ONLY; Specifies whether the latest model has been applied to the virtual machine.
	LatestModelApplied *bool `json:"latestModelApplied,omitempty" azure:"ro"`

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string `json:"licenseType,omitempty"`

	// READ-ONLY; Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual
	// machine.
	ModelDefinitionApplied *string `json:"modelDefinitionApplied,omitempty" azure:"ro"`

	// Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`

	// Specifies the network profile configuration of the virtual machine.
	NetworkProfileConfiguration *VirtualMachineScaleSetVMNetworkProfileConfiguration `json:"networkProfileConfiguration,omitempty"`

	// Specifies the operating system settings for the virtual machine.
	OSProfile *OSProfile `json:"osProfile,omitempty"`

	// Specifies the protection policy of the virtual machine.
	ProtectionPolicy *VirtualMachineScaleSetVMProtectionPolicy `json:"protectionPolicy,omitempty"`

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Specifies the Security related profile settings for the virtual machine.
	SecurityProfile *SecurityProfile `json:"securityProfile,omitempty"`

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// READ-ONLY; Azure VM unique ID.
	VMID *string `json:"vmId,omitempty" azure:"ro"`
}

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicy struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool `json:"protectFromScaleIn,omitempty"`

	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine
	// scale set VM.
	ProtectFromScaleSetActions *bool `json:"protectFromScaleSetActions,omitempty"`
}

// Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetVMReimageParameters struct {
	VirtualMachineReimageParameters
}

// VirtualMachineScaleSetVMResponse is the response envelope for operations that return a VirtualMachineScaleSetVM type.
type VirtualMachineScaleSetVMResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Describes a virtual machine scale set virtual machine.
	VirtualMachineScaleSetVM *VirtualMachineScaleSetVM
}

// VirtualMachineScaleSetVMRunCommandsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetVMRunCommandsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMRunCommandsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginDelete method.
type VirtualMachineScaleSetVMRunCommandsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMRunCommandsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginUpdate method.
type VirtualMachineScaleSetVMRunCommandsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMRunCommandsGetOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.Get method.
type VirtualMachineScaleSetVMRunCommandsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineScaleSetVMRunCommandsListOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.List method.
type VirtualMachineScaleSetVMRunCommandsListOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineScaleSetVMsBeginDeallocateOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginDeallocate method.
type VirtualMachineScaleSetVMsBeginDeallocateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginDelete method.
type VirtualMachineScaleSetVMsBeginDeleteOptions struct {
	// Optional parameter to force delete a virtual machine from a VM scale set. (Feature in Preview)
	ForceDeletion *bool
}

// VirtualMachineScaleSetVMsBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginPerformMaintenance method.
type VirtualMachineScaleSetVMsBeginPerformMaintenanceOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginPowerOffOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginPowerOff method.
type VirtualMachineScaleSetVMsBeginPowerOffOptions struct {
	// The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default
	// value for this flag is false if not specified
	SkipShutdown *bool
}

// VirtualMachineScaleSetVMsBeginRedeployOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginRedeploy method.
type VirtualMachineScaleSetVMsBeginRedeployOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginReimageAllOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginReimageAll method.
type VirtualMachineScaleSetVMsBeginReimageAllOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginReimageOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginReimage method.
type VirtualMachineScaleSetVMsBeginReimageOptions struct {
	// Parameters for the Reimaging Virtual machine in ScaleSet.
	VMScaleSetVMReimageInput *VirtualMachineScaleSetVMReimageParameters
}

// VirtualMachineScaleSetVMsBeginRestartOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginRestart method.
type VirtualMachineScaleSetVMsBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginRunCommandOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginRunCommand method.
type VirtualMachineScaleSetVMsBeginRunCommandOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginStartOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginStart method.
type VirtualMachineScaleSetVMsBeginStartOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMs.BeginUpdate method.
type VirtualMachineScaleSetVMsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsGetInstanceViewOptions contains the optional parameters for the VirtualMachineScaleSetVMs.GetInstanceView method.
type VirtualMachineScaleSetVMsGetInstanceViewOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetVMsGetOptions contains the optional parameters for the VirtualMachineScaleSetVMs.Get method.
type VirtualMachineScaleSetVMsGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachineScaleSetVMsListOptions contains the optional parameters for the VirtualMachineScaleSetVMs.List method.
type VirtualMachineScaleSetVMsListOptions struct {
	// The expand expression to apply to the operation. Allowed values are 'instanceView'.
	Expand *string
	// The filter to apply to the operation. Allowed values are 'startswith(instanceView/statuses/code, 'PowerState') eq true', 'properties/latestModelApplied
	// eq true', 'properties/latestModelApplied eq false'.
	Filter *string
	// The list parameters. Allowed values are 'instanceView', 'instanceView/statuses'.
	Select *string
}

// VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataOptions contains the optional parameters for the VirtualMachineScaleSetVMs.RetrieveBootDiagnosticsData
// method.
type VirtualMachineScaleSetVMsRetrieveBootDiagnosticsDataOptions struct {
	// Expiration duration in minutes for the SAS URIs with a value between 1 to 1440 minutes. <br><br>NOTE: If not specified, SAS URIs will be generated with
	// a default expiration duration of 120 minutes.
	SasURIExpirationTimeInMinutes *int32
}

// VirtualMachineScaleSetVMsSimulateEvictionOptions contains the optional parameters for the VirtualMachineScaleSetVMs.SimulateEviction method.
type VirtualMachineScaleSetVMsSimulateEvictionOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginCreateOrUpdate method.
type VirtualMachineScaleSetsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsBeginDeallocateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDeallocate method.
type VirtualMachineScaleSetsBeginDeallocateOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginDeleteInstancesOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDeleteInstances method.
type VirtualMachineScaleSetsBeginDeleteInstancesOptions struct {
	// Optional parameter to force delete virtual machines from the VM scale set. (Feature in Preview)
	ForceDeletion *bool
}

// VirtualMachineScaleSetsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDelete method.
type VirtualMachineScaleSetsBeginDeleteOptions struct {
	// Optional parameter to force delete a VM scale set. (Feature in Preview)
	ForceDeletion *bool
}

// VirtualMachineScaleSetsBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachineScaleSets.BeginPerformMaintenance method.
type VirtualMachineScaleSetsBeginPerformMaintenanceOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginPowerOffOptions contains the optional parameters for the VirtualMachineScaleSets.BeginPowerOff method.
type VirtualMachineScaleSetsBeginPowerOffOptions struct {
	// The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default
	// value for this flag is false if not specified
	SkipShutdown *bool
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginRedeployOptions contains the optional parameters for the VirtualMachineScaleSets.BeginRedeploy method.
type VirtualMachineScaleSetsBeginRedeployOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginReimageAllOptions contains the optional parameters for the VirtualMachineScaleSets.BeginReimageAll method.
type VirtualMachineScaleSetsBeginReimageAllOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginReimageOptions contains the optional parameters for the VirtualMachineScaleSets.BeginReimage method.
type VirtualMachineScaleSetsBeginReimageOptions struct {
	// Parameters for Reimaging VM ScaleSet.
	VMScaleSetReimageInput *VirtualMachineScaleSetReimageParameters
}

// VirtualMachineScaleSetsBeginRestartOptions contains the optional parameters for the VirtualMachineScaleSets.BeginRestart method.
type VirtualMachineScaleSetsBeginRestartOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginSetOrchestrationServiceStateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginSetOrchestrationServiceState
// method.
type VirtualMachineScaleSetsBeginSetOrchestrationServiceStateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsBeginStartOptions contains the optional parameters for the VirtualMachineScaleSets.BeginStart method.
type VirtualMachineScaleSetsBeginStartOptions struct {
	// A list of virtual machine instance IDs from the VM scale set.
	VMInstanceIDs *VirtualMachineScaleSetVMInstanceIDs
}

// VirtualMachineScaleSetsBeginUpdateInstancesOptions contains the optional parameters for the VirtualMachineScaleSets.BeginUpdateInstances method.
type VirtualMachineScaleSetsBeginUpdateInstancesOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginUpdate method.
type VirtualMachineScaleSetsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsConvertToSinglePlacementGroupOptions contains the optional parameters for the VirtualMachineScaleSets.ConvertToSinglePlacementGroup
// method.
type VirtualMachineScaleSetsConvertToSinglePlacementGroupOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions contains the optional parameters for the VirtualMachineScaleSets.ForceRecoveryServiceFabricPlatformUpdateDomainWalk
// method.
type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsGetInstanceViewOptions contains the optional parameters for the VirtualMachineScaleSets.GetInstanceView method.
type VirtualMachineScaleSetsGetInstanceViewOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsGetOSUpgradeHistoryOptions contains the optional parameters for the VirtualMachineScaleSets.GetOSUpgradeHistory method.
type VirtualMachineScaleSetsGetOSUpgradeHistoryOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsGetOptions contains the optional parameters for the VirtualMachineScaleSets.Get method.
type VirtualMachineScaleSetsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsListAllOptions contains the optional parameters for the VirtualMachineScaleSets.ListAll method.
type VirtualMachineScaleSetsListAllOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsListByLocationOptions contains the optional parameters for the VirtualMachineScaleSets.ListByLocation method.
type VirtualMachineScaleSetsListByLocationOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsListOptions contains the optional parameters for the VirtualMachineScaleSets.List method.
type VirtualMachineScaleSetsListOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachineScaleSetsListSKUsOptions contains the optional parameters for the VirtualMachineScaleSets.ListSKUs method.
type VirtualMachineScaleSetsListSKUsOptions struct {
	// placeholder for future optional parameters
}

// Describes the properties of a VM size.
type VirtualMachineSize struct {
	// The maximum number of data disks that can be attached to the virtual machine size.
	MaxDataDiskCount *int32 `json:"maxDataDiskCount,omitempty"`

	// The amount of memory, in MB, supported by the virtual machine size.
	MemoryInMB *int32 `json:"memoryInMB,omitempty"`

	// The name of the virtual machine size.
	Name *string `json:"name,omitempty"`

	// The number of cores supported by the virtual machine size.
	NumberOfCores *int32 `json:"numberOfCores,omitempty"`

	// The OS disk size, in MB, allowed by the virtual machine size.
	OSDiskSizeInMB *int32 `json:"osDiskSizeInMB,omitempty"`

	// The resource disk size, in MB, allowed by the virtual machine size.
	ResourceDiskSizeInMB *int32 `json:"resourceDiskSizeInMB,omitempty"`
}

// The List Virtual Machine operation response.
type VirtualMachineSizeListResult struct {
	// The list of virtual machine sizes.
	Value *[]*VirtualMachineSize `json:"value,omitempty"`
}

// VirtualMachineSizeListResultResponse is the response envelope for operations that return a VirtualMachineSizeListResult type.
type VirtualMachineSizeListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The List Virtual Machine operation response.
	VirtualMachineSizeListResult *VirtualMachineSizeListResult
}

// VirtualMachineSizesListOptions contains the optional parameters for the VirtualMachineSizes.List method.
type VirtualMachineSizesListOptions struct {
	// placeholder for future optional parameters
}

// Describes the properties of a Virtual Machine software patch.
type VirtualMachineSoftwarePatchProperties struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
	ActivityID *string `json:"activityId,omitempty" azure:"ro"`

	// READ-ONLY; Describes the availability of a given patch.
	AssessmentState *PatchAssessmentState `json:"assessmentState,omitempty" azure:"ro"`

	// READ-ONLY; The classification(s) of the patch as provided by the patch publisher.
	Classifications *[]*string `json:"classifications,omitempty" azure:"ro"`

	// READ-ONLY; The KBID of the patch. Only applies to Windows patches.
	KbID *string `json:"kbId,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp of the last update to this patch record.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty" azure:"ro"`

	// READ-ONLY; The friendly name of the patch.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; A unique identifier for the patch.
	PatchID *string `json:"patchId,omitempty" azure:"ro"`

	// READ-ONLY; The UTC timestamp when the repository published this patch.
	PublishedDate *time.Time `json:"publishedDate,omitempty" azure:"ro"`

	// READ-ONLY; Describes the reboot requirements of the patch.
	RebootBehavior *VMGuestPatchRebootBehavior `json:"rebootBehavior,omitempty" azure:"ro"`

	// READ-ONLY; The version number of the patch. This property applies only to Linux patches.
	Version *string `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineSoftwarePatchProperties.
func (v VirtualMachineSoftwarePatchProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activityId", v.ActivityID)
	populate(objectMap, "assessmentState", v.AssessmentState)
	populate(objectMap, "classifications", v.Classifications)
	populate(objectMap, "kbId", v.KbID)
	populate(objectMap, "lastModifiedDateTime", (*timeRFC3339)(v.LastModifiedDateTime))
	populate(objectMap, "name", v.Name)
	populate(objectMap, "patchId", v.PatchID)
	populate(objectMap, "publishedDate", (*timeRFC3339)(v.PublishedDate))
	populate(objectMap, "rebootBehavior", v.RebootBehavior)
	populate(objectMap, "version", v.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VirtualMachineSoftwarePatchProperties.
func (v *VirtualMachineSoftwarePatchProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activityId":
			err = unpopulate(val, &v.ActivityID)
			delete(rawMsg, key)
		case "assessmentState":
			err = unpopulate(val, &v.AssessmentState)
			delete(rawMsg, key)
		case "classifications":
			err = unpopulate(val, &v.Classifications)
			delete(rawMsg, key)
		case "kbId":
			err = unpopulate(val, &v.KbID)
			delete(rawMsg, key)
		case "lastModifiedDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.LastModifiedDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &v.Name)
			delete(rawMsg, key)
		case "patchId":
			err = unpopulate(val, &v.PatchID)
			delete(rawMsg, key)
		case "publishedDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.PublishedDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "rebootBehavior":
			err = unpopulate(val, &v.RebootBehavior)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &v.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// The status code and count of the virtual machine scale set instance view status summary.
type VirtualMachineStatusCodeCount struct {
	// READ-ONLY; The instance view status code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The number of instances having a particular status code.
	Count *int32 `json:"count,omitempty" azure:"ro"`
}

// Describes a Virtual Machine Update.
type VirtualMachineUpdate struct {
	UpdateResource
	// The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity `json:"identity,omitempty"`

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
	// use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
	// Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan `json:"plan,omitempty"`

	// Describes the properties of a Virtual Machine.
	Properties *VirtualMachineProperties `json:"properties,omitempty"`

	// The virtual machine zones.
	Zones *[]*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineUpdate.
func (v VirtualMachineUpdate) MarshalJSON() ([]byte, error) {
	objectMap := v.UpdateResource.marshalInternal()
	populate(objectMap, "identity", v.Identity)
	populate(objectMap, "plan", v.Plan)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "zones", v.Zones)
	return json.Marshal(objectMap)
}

// VirtualMachinesBeginAssessPatchesOptions contains the optional parameters for the VirtualMachines.BeginAssessPatches method.
type VirtualMachinesBeginAssessPatchesOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginCaptureOptions contains the optional parameters for the VirtualMachines.BeginCapture method.
type VirtualMachinesBeginCaptureOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginConvertToManagedDisksOptions contains the optional parameters for the VirtualMachines.BeginConvertToManagedDisks method.
type VirtualMachinesBeginConvertToManagedDisksOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachines.BeginCreateOrUpdate method.
type VirtualMachinesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginDeallocateOptions contains the optional parameters for the VirtualMachines.BeginDeallocate method.
type VirtualMachinesBeginDeallocateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginDeleteOptions contains the optional parameters for the VirtualMachines.BeginDelete method.
type VirtualMachinesBeginDeleteOptions struct {
	// Optional parameter to force delete virtual machines.(Feature in Preview)
	ForceDeletion *bool
}

// VirtualMachinesBeginInstallPatchesOptions contains the optional parameters for the VirtualMachines.BeginInstallPatches method.
type VirtualMachinesBeginInstallPatchesOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachines.BeginPerformMaintenance method.
type VirtualMachinesBeginPerformMaintenanceOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginPowerOffOptions contains the optional parameters for the VirtualMachines.BeginPowerOff method.
type VirtualMachinesBeginPowerOffOptions struct {
	// The parameter to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Default
	// value for this flag is false if not specified
	SkipShutdown *bool
}

// VirtualMachinesBeginReapplyOptions contains the optional parameters for the VirtualMachines.BeginReapply method.
type VirtualMachinesBeginReapplyOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginRedeployOptions contains the optional parameters for the VirtualMachines.BeginRedeploy method.
type VirtualMachinesBeginRedeployOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginReimageOptions contains the optional parameters for the VirtualMachines.BeginReimage method.
type VirtualMachinesBeginReimageOptions struct {
	// Parameters supplied to the Reimage Virtual Machine operation.
	Parameters *VirtualMachineReimageParameters
}

// VirtualMachinesBeginRestartOptions contains the optional parameters for the VirtualMachines.BeginRestart method.
type VirtualMachinesBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginRunCommandOptions contains the optional parameters for the VirtualMachines.BeginRunCommand method.
type VirtualMachinesBeginRunCommandOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginStartOptions contains the optional parameters for the VirtualMachines.BeginStart method.
type VirtualMachinesBeginStartOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesBeginUpdateOptions contains the optional parameters for the VirtualMachines.BeginUpdate method.
type VirtualMachinesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesGeneralizeOptions contains the optional parameters for the VirtualMachines.Generalize method.
type VirtualMachinesGeneralizeOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesGetOptions contains the optional parameters for the VirtualMachines.Get method.
type VirtualMachinesGetOptions struct {
	// The expand expression to apply on the operation.
	Expand *string
}

// VirtualMachinesInstanceViewOptions contains the optional parameters for the VirtualMachines.InstanceView method.
type VirtualMachinesInstanceViewOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesListAllOptions contains the optional parameters for the VirtualMachines.ListAll method.
type VirtualMachinesListAllOptions struct {
	// statusOnly=true enables fetching run time status of all Virtual Machines in the subscription.
	StatusOnly *string
}

// VirtualMachinesListAvailableSizesOptions contains the optional parameters for the VirtualMachines.ListAvailableSizes method.
type VirtualMachinesListAvailableSizesOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesListByLocationOptions contains the optional parameters for the VirtualMachines.ListByLocation method.
type VirtualMachinesListByLocationOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesListOptions contains the optional parameters for the VirtualMachines.List method.
type VirtualMachinesListOptions struct {
	// placeholder for future optional parameters
}

// VirtualMachinesRetrieveBootDiagnosticsDataOptions contains the optional parameters for the VirtualMachines.RetrieveBootDiagnosticsData method.
type VirtualMachinesRetrieveBootDiagnosticsDataOptions struct {
	// Expiration duration in minutes for the SAS URIs with a value between 1 to 1440 minutes. <br><br>NOTE: If not specified, SAS URIs will be generated with
	// a default expiration duration of 120 minutes.
	SasURIExpirationTimeInMinutes *int32
}

// VirtualMachinesSimulateEvictionOptions contains the optional parameters for the VirtualMachines.SimulateEviction method.
type VirtualMachinesSimulateEvictionOptions struct {
	// placeholder for future optional parameters
}

// Describes Windows Remote Management configuration of the VM
type WinRMConfiguration struct {
	// The list of Windows Remote Management listeners
	Listeners *[]*WinRMListener `json:"listeners,omitempty"`
}

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListener struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see Add a key or secret to the
	// key vault
	// [https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add]. In this case, your certificate needs to be It is the Base64 encoding of the
	// following JSON Object which is encoded in UTF-8:
	// {
	// "data":"",
	// "dataType":"pfx",
	// "password":""
	// }
	CertificateURL *string `json:"certificateUrl,omitempty"`

	// Specifies the protocol of WinRM listener.
	// Possible values are:
	// http
	// https
	Protocol *ProtocolTypes `json:"protocol,omitempty"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup.
	AdditionalUnattendContent *[]*AdditionalUnattendContent `json:"additionalUnattendContent,omitempty"`

	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true.
	// For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`

	// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
	PatchSettings *PatchSettings `json:"patchSettings,omitempty"`

	// Indicates whether virtual machine agent should be provisioned on the virtual machine.
	// When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM
	// so that extensions can be added to the VM later.
	ProvisionVMAgent *bool `json:"provisionVMAgent,omitempty"`

	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
	// Possible values can be TimeZoneInfo.Id [https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id] value from time zones
	// returned by TimeZoneInfo.GetSystemTimeZones
	// [https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.getsystemtimezones].
	TimeZone *string `json:"timeZone,omitempty"`

	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfiguration `json:"winRM,omitempty"`
}

// Input for InstallPatches on a Windows VM, as directly received by the API
type WindowsParameters struct {
	// The update classifications to select when installing patches for Windows.
	ClassificationsToInclude *[]*VMGuestPatchClassificationWindows `json:"classificationsToInclude,omitempty"`

	// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
	ExcludeKbsRequiringReboot *bool `json:"excludeKbsRequiringReboot,omitempty"`

	// Kbs to exclude in the patch operation
	KbNumbersToExclude *[]*string `json:"kbNumbersToExclude,omitempty"`

	// Kbs to include in the patch operation
	KbNumbersToInclude *[]*string `json:"kbNumbersToInclude,omitempty"`

	// This is used to install patches that were published on or before this given max published date.
	MaxPatchPublishDate *time.Time `json:"maxPatchPublishDate,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WindowsParameters.
func (w WindowsParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "classificationsToInclude", w.ClassificationsToInclude)
	populate(objectMap, "excludeKbsRequiringReboot", w.ExcludeKbsRequiringReboot)
	populate(objectMap, "kbNumbersToExclude", w.KbNumbersToExclude)
	populate(objectMap, "kbNumbersToInclude", w.KbNumbersToInclude)
	populate(objectMap, "maxPatchPublishDate", (*timeRFC3339)(w.MaxPatchPublishDate))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WindowsParameters.
func (w *WindowsParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "classificationsToInclude":
			err = unpopulate(val, &w.ClassificationsToInclude)
			delete(rawMsg, key)
		case "excludeKbsRequiringReboot":
			err = unpopulate(val, &w.ExcludeKbsRequiringReboot)
			delete(rawMsg, key)
		case "kbNumbersToExclude":
			err = unpopulate(val, &w.KbNumbersToExclude)
			delete(rawMsg, key)
		case "kbNumbersToInclude":
			err = unpopulate(val, &w.KbNumbersToInclude)
			delete(rawMsg, key)
		case "maxPatchPublishDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.MaxPatchPublishDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data *json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(*data, v)
}
