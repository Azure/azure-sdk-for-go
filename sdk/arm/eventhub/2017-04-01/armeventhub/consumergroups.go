// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ConsumerGroupsOperations contains the methods for the ConsumerGroups group.
type ConsumerGroupsOperations interface {
	// CreateOrUpdate - Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string, parameters ConsumerGroup) (*ConsumerGroupResponse, error)
	// Delete - Deletes a consumer group from the specified Event Hub and resource group.
	Delete(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*http.Response, error)
	// Get - Gets a description for the specified consumer group.
	Get(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*ConsumerGroupResponse, error)
	// ListByEventHub - Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
	ListByEventHub(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupsListByEventHubOptions *ConsumerGroupsListByEventHubOptions) (ConsumerGroupListResultPager, error)
}

// consumerGroupsOperations implements the ConsumerGroupsOperations interface.
type consumerGroupsOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
func (client *consumerGroupsOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string, parameters ConsumerGroup) (*ConsumerGroupResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, namespaceName, eventHubName, consumerGroupName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *consumerGroupsOperations) createOrUpdateCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string, parameters ConsumerGroup) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{consumerGroupName}", url.PathEscape(consumerGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *consumerGroupsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ConsumerGroupResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := ConsumerGroupResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ConsumerGroup)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *consumerGroupsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes a consumer group from the specified Event Hub and resource group.
func (client *consumerGroupsOperations) Delete(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, namespaceName, eventHubName, consumerGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *consumerGroupsOperations) deleteCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{consumerGroupName}", url.PathEscape(consumerGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *consumerGroupsOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *consumerGroupsOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets a description for the specified consumer group.
func (client *consumerGroupsOperations) Get(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*ConsumerGroupResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, namespaceName, eventHubName, consumerGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *consumerGroupsOperations) getCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{consumerGroupName}", url.PathEscape(consumerGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *consumerGroupsOperations) getHandleResponse(resp *azcore.Response) (*ConsumerGroupResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ConsumerGroupResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ConsumerGroup)
}

// getHandleError handles the Get error response.
func (client *consumerGroupsOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByEventHub - Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists in the Namespace.
func (client *consumerGroupsOperations) ListByEventHub(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupsListByEventHubOptions *ConsumerGroupsListByEventHubOptions) (ConsumerGroupListResultPager, error) {
	req, err := client.listByEventHubCreateRequest(resourceGroupName, namespaceName, eventHubName, consumerGroupsListByEventHubOptions)
	if err != nil {
		return nil, err
	}
	return &consumerGroupListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listByEventHubHandleResponse,
		advancer: func(resp *ConsumerGroupListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ConsumerGroupListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ConsumerGroupListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listByEventHubCreateRequest creates the ListByEventHub request.
func (client *consumerGroupsOperations) listByEventHubCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, consumerGroupsListByEventHubOptions *ConsumerGroupsListByEventHubOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	if consumerGroupsListByEventHubOptions != nil && consumerGroupsListByEventHubOptions.Skip != nil {
		query.Set("$skip", strconv.FormatInt(int64(*consumerGroupsListByEventHubOptions.Skip), 10))
	}
	if consumerGroupsListByEventHubOptions != nil && consumerGroupsListByEventHubOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*consumerGroupsListByEventHubOptions.Top), 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByEventHubHandleResponse handles the ListByEventHub response.
func (client *consumerGroupsOperations) listByEventHubHandleResponse(resp *azcore.Response) (*ConsumerGroupListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByEventHubHandleError(resp)
	}
	result := ConsumerGroupListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ConsumerGroupListResult)
}

// listByEventHubHandleError handles the ListByEventHub error response.
func (client *consumerGroupsOperations) listByEventHubHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
