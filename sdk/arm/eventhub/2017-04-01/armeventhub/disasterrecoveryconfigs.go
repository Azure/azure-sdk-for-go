// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azeventhub

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// DisasterRecoveryConfigsOperations contains the methods for the DisasterRecoveryConfigs group.
type DisasterRecoveryConfigsOperations interface {
	// BreakPairing - This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
	BreakPairing(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error)
	// CheckNameAvailability - Check the give Namespace name availability.
	CheckNameAvailability(ctx context.Context, resourceGroupName string, namespaceName string, parameters CheckNameAvailabilityParameter) (*CheckNameAvailabilityResultResponse, error)
	// CreateOrUpdate - Creates or updates a new Alias(Disaster Recovery configuration)
	CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, alias string, parameters ArmDisasterRecovery) (*ArmDisasterRecoveryResponse, error)
	// Delete - Deletes an Alias(Disaster Recovery configuration)
	Delete(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error)
	// FailOver - Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
	FailOver(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error)
	// Get - Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
	Get(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*ArmDisasterRecoveryResponse, error)
	// GetAuthorizationRule - Gets an AuthorizationRule for a Namespace by rule name.
	GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*AuthorizationRuleResponse, error)
	// List - Gets all Alias(Disaster Recovery configurations)
	List(resourceGroupName string, namespaceName string) (ArmDisasterRecoveryListResultPager, error)
	// ListAuthorizationRules - Gets a list of authorization rules for a Namespace.
	ListAuthorizationRules(resourceGroupName string, namespaceName string, alias string) (AuthorizationRuleListResultPager, error)
	// ListKeys - Gets the primary and secondary connection strings for the Namespace.
	ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*AccessKeysResponse, error)
}

// disasterRecoveryConfigsOperations implements the DisasterRecoveryConfigsOperations interface.
type disasterRecoveryConfigsOperations struct {
	*Client
	subscriptionID string
}

// BreakPairing - This operation disables the Disaster Recovery and stops replicating changes from primary to secondary namespaces
func (client *disasterRecoveryConfigsOperations) BreakPairing(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error) {
	req, err := client.breakPairingCreateRequest(resourceGroupName, namespaceName, alias)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.breakPairingHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// breakPairingCreateRequest creates the BreakPairing request.
func (client *disasterRecoveryConfigsOperations) breakPairingCreateRequest(resourceGroupName string, namespaceName string, alias string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// breakPairingHandleResponse handles the BreakPairing response.
func (client *disasterRecoveryConfigsOperations) breakPairingHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.breakPairingHandleError(resp)
	}
	return resp.Response, nil
}

// breakPairingHandleError handles the BreakPairing error response.
func (client *disasterRecoveryConfigsOperations) breakPairingHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CheckNameAvailability - Check the give Namespace name availability.
func (client *disasterRecoveryConfigsOperations) CheckNameAvailability(ctx context.Context, resourceGroupName string, namespaceName string, parameters CheckNameAvailabilityParameter) (*CheckNameAvailabilityResultResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(resourceGroupName, namespaceName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *disasterRecoveryConfigsOperations) checkNameAvailabilityCreateRequest(resourceGroupName string, namespaceName string, parameters CheckNameAvailabilityParameter) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *disasterRecoveryConfigsOperations) checkNameAvailabilityHandleResponse(resp *azcore.Response) (*CheckNameAvailabilityResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.checkNameAvailabilityHandleError(resp)
	}
	result := CheckNameAvailabilityResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CheckNameAvailabilityResult)
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *disasterRecoveryConfigsOperations) checkNameAvailabilityHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdate - Creates or updates a new Alias(Disaster Recovery configuration)
func (client *disasterRecoveryConfigsOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, alias string, parameters ArmDisasterRecovery) (*ArmDisasterRecoveryResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, namespaceName, alias, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *disasterRecoveryConfigsOperations) createOrUpdateCreateRequest(resourceGroupName string, namespaceName string, alias string, parameters ArmDisasterRecovery) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *disasterRecoveryConfigsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ArmDisasterRecoveryResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := ArmDisasterRecoveryResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArmDisasterRecovery)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *disasterRecoveryConfigsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes an Alias(Disaster Recovery configuration)
func (client *disasterRecoveryConfigsOperations) Delete(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, namespaceName, alias)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *disasterRecoveryConfigsOperations) deleteCreateRequest(resourceGroupName string, namespaceName string, alias string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *disasterRecoveryConfigsOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *disasterRecoveryConfigsOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// FailOver - Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
func (client *disasterRecoveryConfigsOperations) FailOver(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*http.Response, error) {
	req, err := client.failOverCreateRequest(resourceGroupName, namespaceName, alias)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.failOverHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// failOverCreateRequest creates the FailOver request.
func (client *disasterRecoveryConfigsOperations) failOverCreateRequest(resourceGroupName string, namespaceName string, alias string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// failOverHandleResponse handles the FailOver response.
func (client *disasterRecoveryConfigsOperations) failOverHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.failOverHandleError(resp)
	}
	return resp.Response, nil
}

// failOverHandleError handles the FailOver error response.
func (client *disasterRecoveryConfigsOperations) failOverHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
func (client *disasterRecoveryConfigsOperations) Get(ctx context.Context, resourceGroupName string, namespaceName string, alias string) (*ArmDisasterRecoveryResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, namespaceName, alias)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *disasterRecoveryConfigsOperations) getCreateRequest(resourceGroupName string, namespaceName string, alias string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *disasterRecoveryConfigsOperations) getHandleResponse(resp *azcore.Response) (*ArmDisasterRecoveryResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ArmDisasterRecoveryResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArmDisasterRecovery)
}

// getHandleError handles the Get error response.
func (client *disasterRecoveryConfigsOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetAuthorizationRule - Gets an AuthorizationRule for a Namespace by rule name.
func (client *disasterRecoveryConfigsOperations) GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*AuthorizationRuleResponse, error) {
	req, err := client.getAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, alias, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getAuthorizationRuleCreateRequest creates the GetAuthorizationRule request.
func (client *disasterRecoveryConfigsOperations) getAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getAuthorizationRuleHandleResponse handles the GetAuthorizationRule response.
func (client *disasterRecoveryConfigsOperations) getAuthorizationRuleHandleResponse(resp *azcore.Response) (*AuthorizationRuleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getAuthorizationRuleHandleError(resp)
	}
	result := AuthorizationRuleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRule)
}

// getAuthorizationRuleHandleError handles the GetAuthorizationRule error response.
func (client *disasterRecoveryConfigsOperations) getAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Gets all Alias(Disaster Recovery configurations)
func (client *disasterRecoveryConfigsOperations) List(resourceGroupName string, namespaceName string) (ArmDisasterRecoveryListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	return &armDisasterRecoveryListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ArmDisasterRecoveryListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ArmDisasterRecoveryListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ArmDisasterRecoveryListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *disasterRecoveryConfigsOperations) listCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *disasterRecoveryConfigsOperations) listHandleResponse(resp *azcore.Response) (*ArmDisasterRecoveryListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ArmDisasterRecoveryListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ArmDisasterRecoveryListResult)
}

// listHandleError handles the List error response.
func (client *disasterRecoveryConfigsOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAuthorizationRules - Gets a list of authorization rules for a Namespace.
func (client *disasterRecoveryConfigsOperations) ListAuthorizationRules(resourceGroupName string, namespaceName string, alias string) (AuthorizationRuleListResultPager, error) {
	req, err := client.listAuthorizationRulesCreateRequest(resourceGroupName, namespaceName, alias)
	if err != nil {
		return nil, err
	}
	return &authorizationRuleListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAuthorizationRulesHandleResponse,
		advancer: func(resp *AuthorizationRuleListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.AuthorizationRuleListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.AuthorizationRuleListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAuthorizationRulesCreateRequest creates the ListAuthorizationRules request.
func (client *disasterRecoveryConfigsOperations) listAuthorizationRulesCreateRequest(resourceGroupName string, namespaceName string, alias string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAuthorizationRulesHandleResponse handles the ListAuthorizationRules response.
func (client *disasterRecoveryConfigsOperations) listAuthorizationRulesHandleResponse(resp *azcore.Response) (*AuthorizationRuleListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAuthorizationRulesHandleError(resp)
	}
	result := AuthorizationRuleListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRuleListResult)
}

// listAuthorizationRulesHandleError handles the ListAuthorizationRules error response.
func (client *disasterRecoveryConfigsOperations) listAuthorizationRulesHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListKeys - Gets the primary and secondary connection strings for the Namespace.
func (client *disasterRecoveryConfigsOperations) ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*AccessKeysResponse, error) {
	req, err := client.listKeysCreateRequest(resourceGroupName, namespaceName, alias, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listKeysHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listKeysCreateRequest creates the ListKeys request.
func (client *disasterRecoveryConfigsOperations) listKeysCreateRequest(resourceGroupName string, namespaceName string, alias string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}/listKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{alias}", url.PathEscape(alias))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// listKeysHandleResponse handles the ListKeys response.
func (client *disasterRecoveryConfigsOperations) listKeysHandleResponse(resp *azcore.Response) (*AccessKeysResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listKeysHandleError(resp)
	}
	result := AccessKeysResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AccessKeys)
}

// listKeysHandleError handles the ListKeys error response.
func (client *disasterRecoveryConfigsOperations) listKeysHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
