// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// NamespacesOperations contains the methods for the Namespaces group.
type NamespacesOperations interface {
	// CheckNameAvailability - Check the give Namespace name availability.
	CheckNameAvailability(ctx context.Context, parameters CheckNameAvailabilityParameter) (*CheckNameAvailabilityResultResponse, error)
	// BeginCreateOrUpdate - Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
	BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, parameters EhNamespace) (*EhNamespacePollerResponse, error)
	// ResumeCreateOrUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdate(token string) (EhNamespacePoller, error)
	// CreateOrUpdateAuthorizationRule - Creates or updates an AuthorizationRule for a Namespace.
	CreateOrUpdateAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string, parameters AuthorizationRule) (*AuthorizationRuleResponse, error)
	// CreateOrUpdateNetworkRuleSet - Create or update NetworkRuleSet for a Namespace.
	CreateOrUpdateNetworkRuleSet(ctx context.Context, resourceGroupName string, namespaceName string, parameters NetworkRuleSet) (*NetworkRuleSetResponse, error)
	// BeginDelete - Deletes an existing namespace. This operation also removes all associated resources under the namespace.
	BeginDelete(ctx context.Context, resourceGroupName string, namespaceName string) (*HTTPPollerResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// DeleteAuthorizationRule - Deletes an AuthorizationRule for a Namespace.
	DeleteAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*http.Response, error)
	// Get - Gets the description of the specified namespace.
	Get(ctx context.Context, resourceGroupName string, namespaceName string) (*EhNamespaceResponse, error)
	// GetAuthorizationRule - Gets an AuthorizationRule for a Namespace by rule name.
	GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*AuthorizationRuleResponse, error)
	// GetMessagingPlan - Gets messaging plan for specified namespace.
	GetMessagingPlan(ctx context.Context, resourceGroupName string, namespaceName string) (*MessagingPlanResponse, error)
	// GetNetworkRuleSet - Gets NetworkRuleSet for a Namespace.
	GetNetworkRuleSet(ctx context.Context, resourceGroupName string, namespaceName string) (*NetworkRuleSetResponse, error)
	// List - Lists all the available Namespaces within a subscription, irrespective of the resource groups.
	List() (EhNamespaceListResultPager, error)
	// ListAuthorizationRules - Gets a list of authorization rules for a Namespace.
	ListAuthorizationRules(resourceGroupName string, namespaceName string) (AuthorizationRuleListResultPager, error)
	// ListByResourceGroup - Lists the available Namespaces within a resource group.
	ListByResourceGroup(resourceGroupName string) (EhNamespaceListResultPager, error)
	// ListKeys - Gets the primary and secondary connection strings for the Namespace.
	ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*AccessKeysResponse, error)
	// ListNetworkRuleSets - Gets list of NetworkRuleSet for a Namespace.
	ListNetworkRuleSets(resourceGroupName string, namespaceName string) (NetworkRuleSetListResultPager, error)
	// RegenerateKeys - Regenerates the primary or secondary connection strings for the specified Namespace.
	RegenerateKeys(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*AccessKeysResponse, error)
	// Update - Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
	Update(ctx context.Context, resourceGroupName string, namespaceName string, parameters EhNamespace) (*EhNamespaceResponse, error)
}

// namespacesOperations implements the NamespacesOperations interface.
type namespacesOperations struct {
	*Client
	subscriptionID string
}

// CheckNameAvailability - Check the give Namespace name availability.
func (client *namespacesOperations) CheckNameAvailability(ctx context.Context, parameters CheckNameAvailabilityParameter) (*CheckNameAvailabilityResultResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *namespacesOperations) checkNameAvailabilityCreateRequest(parameters CheckNameAvailabilityParameter) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *namespacesOperations) checkNameAvailabilityHandleResponse(resp *azcore.Response) (*CheckNameAvailabilityResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.checkNameAvailabilityHandleError(resp)
	}
	result := CheckNameAvailabilityResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CheckNameAvailabilityResult)
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *namespacesOperations) checkNameAvailabilityHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdate - Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
func (client *namespacesOperations) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, parameters EhNamespace) (*EhNamespacePollerResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, namespaceName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("namespacesOperations.CreateOrUpdate", "", resp, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &ehNamespacePoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*EhNamespaceResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *namespacesOperations) ResumeCreateOrUpdate(token string) (EhNamespacePoller, error) {
	pt, err := resumePollingTracker("namespacesOperations.CreateOrUpdate", token, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &ehNamespacePoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *namespacesOperations) createOrUpdateCreateRequest(resourceGroupName string, namespaceName string, parameters EhNamespace) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *namespacesOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*EhNamespacePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return &EhNamespacePollerResponse{RawResponse: resp.Response}, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *namespacesOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdateAuthorizationRule - Creates or updates an AuthorizationRule for a Namespace.
func (client *namespacesOperations) CreateOrUpdateAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string, parameters AuthorizationRule) (*AuthorizationRuleResponse, error) {
	req, err := client.createOrUpdateAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, authorizationRuleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateAuthorizationRuleCreateRequest creates the CreateOrUpdateAuthorizationRule request.
func (client *namespacesOperations) createOrUpdateAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, authorizationRuleName string, parameters AuthorizationRule) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAuthorizationRuleHandleResponse handles the CreateOrUpdateAuthorizationRule response.
func (client *namespacesOperations) createOrUpdateAuthorizationRuleHandleResponse(resp *azcore.Response) (*AuthorizationRuleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateAuthorizationRuleHandleError(resp)
	}
	result := AuthorizationRuleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRule)
}

// createOrUpdateAuthorizationRuleHandleError handles the CreateOrUpdateAuthorizationRule error response.
func (client *namespacesOperations) createOrUpdateAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdateNetworkRuleSet - Create or update NetworkRuleSet for a Namespace.
func (client *namespacesOperations) CreateOrUpdateNetworkRuleSet(ctx context.Context, resourceGroupName string, namespaceName string, parameters NetworkRuleSet) (*NetworkRuleSetResponse, error) {
	req, err := client.createOrUpdateNetworkRuleSetCreateRequest(resourceGroupName, namespaceName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateNetworkRuleSetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateNetworkRuleSetCreateRequest creates the CreateOrUpdateNetworkRuleSet request.
func (client *namespacesOperations) createOrUpdateNetworkRuleSetCreateRequest(resourceGroupName string, namespaceName string, parameters NetworkRuleSet) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateNetworkRuleSetHandleResponse handles the CreateOrUpdateNetworkRuleSet response.
func (client *namespacesOperations) createOrUpdateNetworkRuleSetHandleResponse(resp *azcore.Response) (*NetworkRuleSetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateNetworkRuleSetHandleError(resp)
	}
	result := NetworkRuleSetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkRuleSet)
}

// createOrUpdateNetworkRuleSetHandleError handles the CreateOrUpdateNetworkRuleSet error response.
func (client *namespacesOperations) createOrUpdateNetworkRuleSetHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes an existing namespace. This operation also removes all associated resources under the namespace.
func (client *namespacesOperations) BeginDelete(ctx context.Context, resourceGroupName string, namespaceName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("namespacesOperations.Delete", "", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *namespacesOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("namespacesOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *namespacesOperations) deleteCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *namespacesOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *namespacesOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteAuthorizationRule - Deletes an AuthorizationRule for a Namespace.
func (client *namespacesOperations) DeleteAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*http.Response, error) {
	req, err := client.deleteAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteAuthorizationRuleCreateRequest creates the DeleteAuthorizationRule request.
func (client *namespacesOperations) deleteAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAuthorizationRuleHandleResponse handles the DeleteAuthorizationRule response.
func (client *namespacesOperations) deleteAuthorizationRuleHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteAuthorizationRuleHandleError(resp)
	}
	return resp.Response, nil
}

// deleteAuthorizationRuleHandleError handles the DeleteAuthorizationRule error response.
func (client *namespacesOperations) deleteAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the description of the specified namespace.
func (client *namespacesOperations) Get(ctx context.Context, resourceGroupName string, namespaceName string) (*EhNamespaceResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *namespacesOperations) getCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *namespacesOperations) getHandleResponse(resp *azcore.Response) (*EhNamespaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.getHandleError(resp)
	}
	result := EhNamespaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EhNamespace)
}

// getHandleError handles the Get error response.
func (client *namespacesOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetAuthorizationRule - Gets an AuthorizationRule for a Namespace by rule name.
func (client *namespacesOperations) GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*AuthorizationRuleResponse, error) {
	req, err := client.getAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getAuthorizationRuleCreateRequest creates the GetAuthorizationRule request.
func (client *namespacesOperations) getAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getAuthorizationRuleHandleResponse handles the GetAuthorizationRule response.
func (client *namespacesOperations) getAuthorizationRuleHandleResponse(resp *azcore.Response) (*AuthorizationRuleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getAuthorizationRuleHandleError(resp)
	}
	result := AuthorizationRuleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRule)
}

// getAuthorizationRuleHandleError handles the GetAuthorizationRule error response.
func (client *namespacesOperations) getAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetMessagingPlan - Gets messaging plan for specified namespace.
func (client *namespacesOperations) GetMessagingPlan(ctx context.Context, resourceGroupName string, namespaceName string) (*MessagingPlanResponse, error) {
	req, err := client.getMessagingPlanCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getMessagingPlanHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getMessagingPlanCreateRequest creates the GetMessagingPlan request.
func (client *namespacesOperations) getMessagingPlanCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/messagingplan"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getMessagingPlanHandleResponse handles the GetMessagingPlan response.
func (client *namespacesOperations) getMessagingPlanHandleResponse(resp *azcore.Response) (*MessagingPlanResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getMessagingPlanHandleError(resp)
	}
	result := MessagingPlanResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MessagingPlan)
}

// getMessagingPlanHandleError handles the GetMessagingPlan error response.
func (client *namespacesOperations) getMessagingPlanHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNetworkRuleSet - Gets NetworkRuleSet for a Namespace.
func (client *namespacesOperations) GetNetworkRuleSet(ctx context.Context, resourceGroupName string, namespaceName string) (*NetworkRuleSetResponse, error) {
	req, err := client.getNetworkRuleSetCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNetworkRuleSetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getNetworkRuleSetCreateRequest creates the GetNetworkRuleSet request.
func (client *namespacesOperations) getNetworkRuleSetCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getNetworkRuleSetHandleResponse handles the GetNetworkRuleSet response.
func (client *namespacesOperations) getNetworkRuleSetHandleResponse(resp *azcore.Response) (*NetworkRuleSetResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getNetworkRuleSetHandleError(resp)
	}
	result := NetworkRuleSetResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkRuleSet)
}

// getNetworkRuleSetHandleError handles the GetNetworkRuleSet error response.
func (client *namespacesOperations) getNetworkRuleSetHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Lists all the available Namespaces within a subscription, irrespective of the resource groups.
func (client *namespacesOperations) List() (EhNamespaceListResultPager, error) {
	req, err := client.listCreateRequest()
	if err != nil {
		return nil, err
	}
	return &ehNamespaceListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *EhNamespaceListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.EhNamespaceListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.EhNamespaceListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *namespacesOperations) listCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/namespaces"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *namespacesOperations) listHandleResponse(resp *azcore.Response) (*EhNamespaceListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := EhNamespaceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EhNamespaceListResult)
}

// listHandleError handles the List error response.
func (client *namespacesOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAuthorizationRules - Gets a list of authorization rules for a Namespace.
func (client *namespacesOperations) ListAuthorizationRules(resourceGroupName string, namespaceName string) (AuthorizationRuleListResultPager, error) {
	req, err := client.listAuthorizationRulesCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	return &authorizationRuleListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAuthorizationRulesHandleResponse,
		advancer: func(resp *AuthorizationRuleListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.AuthorizationRuleListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.AuthorizationRuleListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAuthorizationRulesCreateRequest creates the ListAuthorizationRules request.
func (client *namespacesOperations) listAuthorizationRulesCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAuthorizationRulesHandleResponse handles the ListAuthorizationRules response.
func (client *namespacesOperations) listAuthorizationRulesHandleResponse(resp *azcore.Response) (*AuthorizationRuleListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAuthorizationRulesHandleError(resp)
	}
	result := AuthorizationRuleListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRuleListResult)
}

// listAuthorizationRulesHandleError handles the ListAuthorizationRules error response.
func (client *namespacesOperations) listAuthorizationRulesHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByResourceGroup - Lists the available Namespaces within a resource group.
func (client *namespacesOperations) ListByResourceGroup(resourceGroupName string) (EhNamespaceListResultPager, error) {
	req, err := client.listByResourceGroupCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	return &ehNamespaceListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listByResourceGroupHandleResponse,
		advancer: func(resp *EhNamespaceListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.EhNamespaceListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.EhNamespaceListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *namespacesOperations) listByResourceGroupCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *namespacesOperations) listByResourceGroupHandleResponse(resp *azcore.Response) (*EhNamespaceListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByResourceGroupHandleError(resp)
	}
	result := EhNamespaceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EhNamespaceListResult)
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *namespacesOperations) listByResourceGroupHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListKeys - Gets the primary and secondary connection strings for the Namespace.
func (client *namespacesOperations) ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string) (*AccessKeysResponse, error) {
	req, err := client.listKeysCreateRequest(resourceGroupName, namespaceName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listKeysHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listKeysCreateRequest creates the ListKeys request.
func (client *namespacesOperations) listKeysCreateRequest(resourceGroupName string, namespaceName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// listKeysHandleResponse handles the ListKeys response.
func (client *namespacesOperations) listKeysHandleResponse(resp *azcore.Response) (*AccessKeysResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listKeysHandleError(resp)
	}
	result := AccessKeysResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AccessKeys)
}

// listKeysHandleError handles the ListKeys error response.
func (client *namespacesOperations) listKeysHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListNetworkRuleSets - Gets list of NetworkRuleSet for a Namespace.
func (client *namespacesOperations) ListNetworkRuleSets(resourceGroupName string, namespaceName string) (NetworkRuleSetListResultPager, error) {
	req, err := client.listNetworkRuleSetsCreateRequest(resourceGroupName, namespaceName)
	if err != nil {
		return nil, err
	}
	return &networkRuleSetListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listNetworkRuleSetsHandleResponse,
		advancer: func(resp *NetworkRuleSetListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.NetworkRuleSetListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.NetworkRuleSetListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listNetworkRuleSetsCreateRequest creates the ListNetworkRuleSets request.
func (client *namespacesOperations) listNetworkRuleSetsCreateRequest(resourceGroupName string, namespaceName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listNetworkRuleSetsHandleResponse handles the ListNetworkRuleSets response.
func (client *namespacesOperations) listNetworkRuleSetsHandleResponse(resp *azcore.Response) (*NetworkRuleSetListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listNetworkRuleSetsHandleError(resp)
	}
	result := NetworkRuleSetListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkRuleSetListResult)
}

// listNetworkRuleSetsHandleError handles the ListNetworkRuleSets error response.
func (client *namespacesOperations) listNetworkRuleSetsHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// RegenerateKeys - Regenerates the primary or secondary connection strings for the specified Namespace.
func (client *namespacesOperations) RegenerateKeys(ctx context.Context, resourceGroupName string, namespaceName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*AccessKeysResponse, error) {
	req, err := client.regenerateKeysCreateRequest(resourceGroupName, namespaceName, authorizationRuleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.regenerateKeysHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// regenerateKeysCreateRequest creates the RegenerateKeys request.
func (client *namespacesOperations) regenerateKeysCreateRequest(resourceGroupName string, namespaceName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// regenerateKeysHandleResponse handles the RegenerateKeys response.
func (client *namespacesOperations) regenerateKeysHandleResponse(resp *azcore.Response) (*AccessKeysResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.regenerateKeysHandleError(resp)
	}
	result := AccessKeysResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AccessKeys)
}

// regenerateKeysHandleError handles the RegenerateKeys error response.
func (client *namespacesOperations) regenerateKeysHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
func (client *namespacesOperations) Update(ctx context.Context, resourceGroupName string, namespaceName string, parameters EhNamespace) (*EhNamespaceResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, namespaceName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *namespacesOperations) updateCreateRequest(resourceGroupName string, namespaceName string, parameters EhNamespace) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateHandleResponse handles the Update response.
func (client *namespacesOperations) updateHandleResponse(resp *azcore.Response) (*EhNamespaceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, client.updateHandleError(resp)
	}
	result := EhNamespaceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EhNamespace)
}

// updateHandleError handles the Update error response.
func (client *namespacesOperations) updateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
