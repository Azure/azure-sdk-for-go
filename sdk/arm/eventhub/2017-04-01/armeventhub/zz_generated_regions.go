// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventhub

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// RegionsOperations contains the methods for the Regions group.
type RegionsOperations interface {
	// ListBySKU - Gets the available Regions for a given sku
	ListBySKU(sku string) MessagingRegionsListResultPager
}

// RegionsClient implements the RegionsOperations interface.
// Don't use this type directly, use NewRegionsClient() instead.
type RegionsClient struct {
	*Client
	subscriptionID string
}

// NewRegionsClient creates a new instance of RegionsClient with the specified values.
func NewRegionsClient(c *Client, subscriptionID string) RegionsOperations {
	return &RegionsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *RegionsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// ListBySKU - Gets the available Regions for a given sku
func (client *RegionsClient) ListBySKU(sku string) MessagingRegionsListResultPager {
	return &messagingRegionsListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListBySKUCreateRequest(ctx, sku)
		},
		responder: client.ListBySKUHandleResponse,
		errorer:   client.ListBySKUHandleError,
		advancer: func(ctx context.Context, resp *MessagingRegionsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.MessagingRegionsListResult.NextLink)
		},
	}
}

// ListBySKUCreateRequest creates the ListBySKU request.
func (client *RegionsClient) ListBySKUCreateRequest(ctx context.Context, sku string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/sku/{sku}/regions"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2017-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListBySKUHandleResponse handles the ListBySKU response.
func (client *RegionsClient) ListBySKUHandleResponse(resp *azcore.Response) (*MessagingRegionsListResultResponse, error) {
	result := MessagingRegionsListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MessagingRegionsListResult)
}

// ListBySKUHandleError handles the ListBySKU error response.
func (client *RegionsClient) ListBySKUHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
