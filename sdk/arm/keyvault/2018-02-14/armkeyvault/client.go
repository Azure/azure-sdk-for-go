// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/url"
)

const scope = "https://management.azure.com//.default"

// ClientOptions contains configuration settings for the default client's pipeline.
type ClientOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// LogOptions configures the built-in request logging policy behavior.
	LogOptions azcore.RequestLogOptions
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
}

// DefaultClientOptions creates a ClientOptions type initialized with default values.
func DefaultClientOptions() ClientOptions {
	return ClientOptions{
		HTTPClient: azcore.DefaultHTTPClientTransport(),
		Retry:      azcore.DefaultRetryOptions(),
	}
}

// Client - The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
type Client struct {
	u *url.URL
	p azcore.Pipeline
}

// DefaultEndpoint is the default service endpoint.
const DefaultEndpoint = "https://management.azure.com"

// NewDefaultClient creates an instance of the Client type using the DefaultEndpoint.
func NewDefaultClient(cred azcore.Credential, options *ClientOptions) (*Client, error) {
	return NewClient(DefaultEndpoint, cred, options)
}

// NewClient creates an instance of the Client type with the specified endpoint.
func NewClient(endpoint string, cred azcore.Credential, options *ClientOptions) (*Client, error) {
	if options == nil {
		o := DefaultClientOptions()
		options = &o
	}
	p := azcore.NewPipeline(options.HTTPClient,
		azcore.NewTelemetryPolicy(options.Telemetry),
		azcore.NewUniqueRequestIDPolicy(),
		azcore.NewRetryPolicy(&options.Retry),
		cred.AuthenticationPolicy(azcore.AuthenticationPolicyOptions{Options: azcore.TokenRequestOptions{Scopes: []string{scope}}}),
		azcore.NewRequestLogPolicy(options.LogOptions))
	return NewClientWithPipeline(endpoint, p)
}

// NewClientWithPipeline creates an instance of the Client type with the specified endpoint and pipeline.
func NewClientWithPipeline(endpoint string, p azcore.Pipeline) (*Client, error) {
	u, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		return nil, fmt.Errorf("no scheme detected in endpoint %s", endpoint)
	}
	return &Client{u: u, p: p}, nil
}

// VaultsOperations returns the VaultsOperations associated with this client.
func (client *Client) VaultsOperations(subscriptionID string) VaultsOperations {
	return &vaultsOperations{Client: client, subscriptionID: subscriptionID}
}

// PrivateEndpointConnectionsOperations returns the PrivateEndpointConnectionsOperations associated with this client.
func (client *Client) PrivateEndpointConnectionsOperations(subscriptionID string) PrivateEndpointConnectionsOperations {
	return &privateEndpointConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// PrivateLinkResourcesOperations returns the PrivateLinkResourcesOperations associated with this client.
func (client *Client) PrivateLinkResourcesOperations(subscriptionID string) PrivateLinkResourcesOperations {
	return &privateLinkResourcesOperations{Client: client, subscriptionID: subscriptionID}
}

// Operations returns the Operations associated with this client.
func (client *Client) Operations() Operations {
	return &operations{Client: client}
}
