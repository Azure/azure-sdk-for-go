// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// VaultsOperations contains the methods for the Vaults group.
type VaultsOperations interface {
	// CheckNameAvailability - Checks that the vault name is valid and is not already in use.
	CheckNameAvailability(ctx context.Context, vaultName VaultCheckNameAvailabilityParameters) (*CheckNameAvailabilityResultResponse, error)
	// BeginCreateOrUpdate - Create or update a key vault in the specified subscription.
	BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*VaultResponse, error)
	// ResumeCreateOrUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdate(token string) (VaultPoller, error)
	// Delete - Deletes the specified Azure key vault.
	Delete(ctx context.Context, resourceGroupName string, vaultName string) (*http.Response, error)
	// Get - Gets the specified Azure key vault.
	Get(ctx context.Context, resourceGroupName string, vaultName string) (*VaultResponse, error)
	// GetDeleted - Gets the deleted Azure key vault.
	GetDeleted(ctx context.Context, vaultName string, location string) (*DeletedVaultResponse, error)
	// List - The List operation gets information about the vaults associated with the subscription.
	List(vaultsListOptions *VaultsListOptions) (ResourceListResultPager, error)
	// ListByResourceGroup - The List operation gets information about the vaults associated with the subscription and within the specified resource group.
	ListByResourceGroup(resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) (VaultListResultPager, error)
	// ListBySubscription - The List operation gets information about the vaults associated with the subscription.
	ListBySubscription(vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) (VaultListResultPager, error)
	// ListDeleted - Gets information about the deleted vaults in a subscription.
	ListDeleted() (DeletedVaultListResultPager, error)
	// BeginPurgeDeleted - Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
	BeginPurgeDeleted(ctx context.Context, vaultName string, location string) (*HTTPResponse, error)
	// ResumePurgeDeleted - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumePurgeDeleted(token string) (HTTPPoller, error)
	// Update - Update a key vault in the specified subscription.
	Update(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*VaultResponse, error)
	// UpdateAccessPolicy - Update access policies in a key vault in the specified subscription.
	UpdateAccessPolicy(ctx context.Context, resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*VaultAccessPolicyParametersResponse, error)
}

// vaultsOperations implements the VaultsOperations interface.
type vaultsOperations struct {
	*Client
	subscriptionID string
}

// CheckNameAvailability - Checks that the vault name is valid and is not already in use.
func (client *vaultsOperations) CheckNameAvailability(ctx context.Context, vaultName VaultCheckNameAvailabilityParameters) (*CheckNameAvailabilityResultResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *vaultsOperations) checkNameAvailabilityCreateRequest(vaultName VaultCheckNameAvailabilityParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(vaultName)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *vaultsOperations) checkNameAvailabilityHandleResponse(resp *azcore.Response) (*CheckNameAvailabilityResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.checkNameAvailabilityHandleError(resp)
	}
	result := CheckNameAvailabilityResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CheckNameAvailabilityResult)
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *vaultsOperations) checkNameAvailabilityHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// CreateOrUpdate - Create or update a key vault in the specified subscription.
func (client *vaultsOperations) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*VaultResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, vaultName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("vaultsOperations.CreateOrUpdate", "", resp, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &vaultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VaultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *vaultsOperations) ResumeCreateOrUpdate(token string) (VaultPoller, error) {
	pt, err := resumePollingTracker("vaultsOperations.CreateOrUpdate", token, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &vaultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *vaultsOperations) createOrUpdateCreateRequest(resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *vaultsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNoContent) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *vaultsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Delete - Deletes the specified Azure key vault.
func (client *vaultsOperations) Delete(ctx context.Context, resourceGroupName string, vaultName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *vaultsOperations) deleteCreateRequest(resourceGroupName string, vaultName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *vaultsOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *vaultsOperations) deleteHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Get - Gets the specified Azure key vault.
func (client *vaultsOperations) Get(ctx context.Context, resourceGroupName string, vaultName string) (*VaultResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *vaultsOperations) getCreateRequest(resourceGroupName string, vaultName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *vaultsOperations) getHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// getHandleError handles the Get error response.
func (client *vaultsOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GetDeleted - Gets the deleted Azure key vault.
func (client *vaultsOperations) GetDeleted(ctx context.Context, vaultName string, location string) (*DeletedVaultResponse, error) {
	req, err := client.getDeletedCreateRequest(vaultName, location)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getDeletedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getDeletedCreateRequest creates the GetDeleted request.
func (client *vaultsOperations) getDeletedCreateRequest(vaultName string, location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getDeletedHandleResponse handles the GetDeleted response.
func (client *vaultsOperations) getDeletedHandleResponse(resp *azcore.Response) (*DeletedVaultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getDeletedHandleError(resp)
	}
	result := DeletedVaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeletedVault)
}

// getDeletedHandleError handles the GetDeleted error response.
func (client *vaultsOperations) getDeletedHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// List - The List operation gets information about the vaults associated with the subscription.
func (client *vaultsOperations) List(vaultsListOptions *VaultsListOptions) (ResourceListResultPager, error) {
	req, err := client.listCreateRequest(vaultsListOptions)
	if err != nil {
		return nil, err
	}
	return &resourceListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ResourceListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ResourceListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ResourceListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *vaultsOperations) listCreateRequest(vaultsListOptions *VaultsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resources"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("$filter", "resourceType eq 'Microsoft.KeyVault/vaults'")
	if vaultsListOptions != nil && vaultsListOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListOptions.Top), 10))
	}
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *vaultsOperations) listHandleResponse(resp *azcore.Response) (*ResourceListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ResourceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceListResult)
}

// listHandleError handles the List error response.
func (client *vaultsOperations) listHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListByResourceGroup - The List operation gets information about the vaults associated with the subscription and within the specified resource group.
func (client *vaultsOperations) ListByResourceGroup(resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) (VaultListResultPager, error) {
	req, err := client.listByResourceGroupCreateRequest(resourceGroupName, vaultsListByResourceGroupOptions)
	if err != nil {
		return nil, err
	}
	return &vaultListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listByResourceGroupHandleResponse,
		advancer: func(resp *VaultListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.VaultListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.VaultListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *vaultsOperations) listByResourceGroupCreateRequest(resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if vaultsListByResourceGroupOptions != nil && vaultsListByResourceGroupOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListByResourceGroupOptions.Top), 10))
	}
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *vaultsOperations) listByResourceGroupHandleResponse(resp *azcore.Response) (*VaultListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByResourceGroupHandleError(resp)
	}
	result := VaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultListResult)
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *vaultsOperations) listByResourceGroupHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListBySubscription - The List operation gets information about the vaults associated with the subscription.
func (client *vaultsOperations) ListBySubscription(vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) (VaultListResultPager, error) {
	req, err := client.listBySubscriptionCreateRequest(vaultsListBySubscriptionOptions)
	if err != nil {
		return nil, err
	}
	return &vaultListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listBySubscriptionHandleResponse,
		advancer: func(resp *VaultListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.VaultListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.VaultListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *vaultsOperations) listBySubscriptionCreateRequest(vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if vaultsListBySubscriptionOptions != nil && vaultsListBySubscriptionOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListBySubscriptionOptions.Top), 10))
	}
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *vaultsOperations) listBySubscriptionHandleResponse(resp *azcore.Response) (*VaultListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listBySubscriptionHandleError(resp)
	}
	result := VaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultListResult)
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *vaultsOperations) listBySubscriptionHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListDeleted - Gets information about the deleted vaults in a subscription.
func (client *vaultsOperations) ListDeleted() (DeletedVaultListResultPager, error) {
	req, err := client.listDeletedCreateRequest()
	if err != nil {
		return nil, err
	}
	return &deletedVaultListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listDeletedHandleResponse,
		advancer: func(resp *DeletedVaultListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DeletedVaultListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DeletedVaultListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listDeletedCreateRequest creates the ListDeleted request.
func (client *vaultsOperations) listDeletedCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listDeletedHandleResponse handles the ListDeleted response.
func (client *vaultsOperations) listDeletedHandleResponse(resp *azcore.Response) (*DeletedVaultListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listDeletedHandleError(resp)
	}
	result := DeletedVaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeletedVaultListResult)
}

// listDeletedHandleError handles the ListDeleted error response.
func (client *vaultsOperations) listDeletedHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// PurgeDeleted - Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
func (client *vaultsOperations) BeginPurgeDeleted(ctx context.Context, vaultName string, location string) (*HTTPResponse, error) {
	req, err := client.purgeDeletedCreateRequest(vaultName, location)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.purgeDeletedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("vaultsOperations.PurgeDeleted", "", resp, client.purgeDeletedHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *vaultsOperations) ResumePurgeDeleted(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("vaultsOperations.PurgeDeleted", token, client.purgeDeletedHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// purgeDeletedCreateRequest creates the PurgeDeleted request.
func (client *vaultsOperations) purgeDeletedCreateRequest(vaultName string, location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge"
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// purgeDeletedHandleResponse handles the PurgeDeleted response.
func (client *vaultsOperations) purgeDeletedHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.purgeDeletedHandleError(resp)
	}
	result := HTTPResponse{RawResponse: resp.Response}
	return &result, nil
}

// purgeDeletedHandleError handles the PurgeDeleted error response.
func (client *vaultsOperations) purgeDeletedHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Update - Update a key vault in the specified subscription.
func (client *vaultsOperations) Update(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*VaultResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, vaultName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *vaultsOperations) updateCreateRequest(resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateHandleResponse handles the Update response.
func (client *vaultsOperations) updateHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.updateHandleError(resp)
	}
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// updateHandleError handles the Update error response.
func (client *vaultsOperations) updateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// UpdateAccessPolicy - Update access policies in a key vault in the specified subscription.
func (client *vaultsOperations) UpdateAccessPolicy(ctx context.Context, resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*VaultAccessPolicyParametersResponse, error) {
	req, err := client.updateAccessPolicyCreateRequest(resourceGroupName, vaultName, operationKind, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateAccessPolicyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateAccessPolicyCreateRequest creates the UpdateAccessPolicy request.
func (client *vaultsOperations) updateAccessPolicyCreateRequest(resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{operationKind}", url.PathEscape(string(operationKind)))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-02-14")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateAccessPolicyHandleResponse handles the UpdateAccessPolicy response.
func (client *vaultsOperations) updateAccessPolicyHandleResponse(resp *azcore.Response) (*VaultAccessPolicyParametersResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.updateAccessPolicyHandleError(resp)
	}
	result := VaultAccessPolicyParametersResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultAccessPolicyParameters)
}

// updateAccessPolicyHandleError handles the UpdateAccessPolicy error response.
func (client *vaultsOperations) updateAccessPolicyHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
