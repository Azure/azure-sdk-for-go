// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// VaultsOperations contains the methods for the Vaults group.
type VaultsOperations interface {
	// CheckNameAvailability - Checks that the vault name is valid and is not already in use.
	CheckNameAvailability(ctx context.Context, vaultName VaultCheckNameAvailabilityParameters) (*CheckNameAvailabilityResultResponse, error)
	// BeginCreateOrUpdate - Create or update a key vault in the specified subscription.
	BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*VaultPollerResponse, error)
	// ResumeCreateOrUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdate(token string) (VaultPoller, error)
	// Delete - Deletes the specified Azure key vault.
	Delete(ctx context.Context, resourceGroupName string, vaultName string) (*http.Response, error)
	// Get - Gets the specified Azure key vault.
	Get(ctx context.Context, resourceGroupName string, vaultName string) (*VaultResponse, error)
	// GetDeleted - Gets the deleted Azure key vault.
	GetDeleted(ctx context.Context, vaultName string, location string) (*DeletedVaultResponse, error)
	// List - The List operation gets information about the vaults associated with the subscription.
	List(vaultsListOptions *VaultsListOptions) ResourceListResultPager
	// ListByResourceGroup - The List operation gets information about the vaults associated with the subscription and within the specified resource group.
	ListByResourceGroup(resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) VaultListResultPager
	// ListBySubscription - The List operation gets information about the vaults associated with the subscription.
	ListBySubscription(vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) VaultListResultPager
	// ListDeleted - Gets information about the deleted vaults in a subscription.
	ListDeleted() DeletedVaultListResultPager
	// BeginPurgeDeleted - Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
	BeginPurgeDeleted(ctx context.Context, vaultName string, location string) (*HTTPPollerResponse, error)
	// ResumePurgeDeleted - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumePurgeDeleted(token string) (HTTPPoller, error)
	// Update - Update a key vault in the specified subscription.
	Update(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*VaultResponse, error)
	// UpdateAccessPolicy - Update access policies in a key vault in the specified subscription.
	UpdateAccessPolicy(ctx context.Context, resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*VaultAccessPolicyParametersResponse, error)
}

// VaultsClient implements the VaultsOperations interface.
// Don't use this type directly, use NewVaultsClient() instead.
type VaultsClient struct {
	*Client
	subscriptionID string
}

// NewVaultsClient creates a new instance of VaultsClient with the specified values.
func NewVaultsClient(c *Client, subscriptionID string) VaultsOperations {
	return &VaultsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *VaultsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CheckNameAvailability - Checks that the vault name is valid and is not already in use.
func (client *VaultsClient) CheckNameAvailability(ctx context.Context, vaultName VaultCheckNameAvailabilityParameters) (*CheckNameAvailabilityResultResponse, error) {
	req, err := client.CheckNameAvailabilityCreateRequest(ctx, vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CheckNameAvailabilityHandleError(resp)
	}
	result, err := client.CheckNameAvailabilityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CheckNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *VaultsClient) CheckNameAvailabilityCreateRequest(ctx context.Context, vaultName VaultCheckNameAvailabilityParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(vaultName)
}

// CheckNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *VaultsClient) CheckNameAvailabilityHandleResponse(resp *azcore.Response) (*CheckNameAvailabilityResultResponse, error) {
	result := CheckNameAvailabilityResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CheckNameAvailabilityResult)
}

// CheckNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *VaultsClient) CheckNameAvailabilityHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

func (client *VaultsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*VaultPollerResponse, error) {
	resp, err := client.CreateOrUpdate(ctx, resourceGroupName, vaultName, parameters)
	if err != nil {
		return nil, err
	}
	result := &VaultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("VaultsClient.CreateOrUpdate", "", resp, client.CreateOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &vaultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VaultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *VaultsClient) ResumeCreateOrUpdate(token string) (VaultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("VaultsClient.CreateOrUpdate", token, client.CreateOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &vaultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// CreateOrUpdate - Create or update a key vault in the specified subscription.
func (client *VaultsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*azcore.Response, error) {
	req, err := client.CreateOrUpdateCreateRequest(ctx, resourceGroupName, vaultName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.CreateOrUpdateHandleError(resp)
	}
	return resp, nil
}

// CreateOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *VaultsClient) CreateOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultCreateOrUpdateParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// CreateOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *VaultsClient) CreateOrUpdateHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// CreateOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *VaultsClient) CreateOrUpdateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Delete - Deletes the specified Azure key vault.
func (client *VaultsClient) Delete(ctx context.Context, resourceGroupName string, vaultName string) (*http.Response, error) {
	req, err := client.DeleteCreateRequest(ctx, resourceGroupName, vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.DeleteHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteCreateRequest creates the Delete request.
func (client *VaultsClient) DeleteCreateRequest(ctx context.Context, resourceGroupName string, vaultName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// DeleteHandleError handles the Delete error response.
func (client *VaultsClient) DeleteHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Get - Gets the specified Azure key vault.
func (client *VaultsClient) Get(ctx context.Context, resourceGroupName string, vaultName string) (*VaultResponse, error) {
	req, err := client.GetCreateRequest(ctx, resourceGroupName, vaultName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *VaultsClient) GetCreateRequest(ctx context.Context, resourceGroupName string, vaultName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *VaultsClient) GetHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// GetHandleError handles the Get error response.
func (client *VaultsClient) GetHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// GetDeleted - Gets the deleted Azure key vault.
func (client *VaultsClient) GetDeleted(ctx context.Context, vaultName string, location string) (*DeletedVaultResponse, error) {
	req, err := client.GetDeletedCreateRequest(ctx, vaultName, location)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetDeletedHandleError(resp)
	}
	result, err := client.GetDeletedHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetDeletedCreateRequest creates the GetDeleted request.
func (client *VaultsClient) GetDeletedCreateRequest(ctx context.Context, vaultName string, location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetDeletedHandleResponse handles the GetDeleted response.
func (client *VaultsClient) GetDeletedHandleResponse(resp *azcore.Response) (*DeletedVaultResponse, error) {
	result := DeletedVaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeletedVault)
}

// GetDeletedHandleError handles the GetDeleted error response.
func (client *VaultsClient) GetDeletedHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// List - The List operation gets information about the vaults associated with the subscription.
func (client *VaultsClient) List(vaultsListOptions *VaultsListOptions) ResourceListResultPager {
	return &resourceListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, vaultsListOptions)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *ResourceListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ResourceListResult.NextLink)
		},
	}
}

// ListCreateRequest creates the List request.
func (client *VaultsClient) ListCreateRequest(ctx context.Context, vaultsListOptions *VaultsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resources"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("$filter", "resourceType eq 'Microsoft.KeyVault/vaults'")
	if vaultsListOptions != nil && vaultsListOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListOptions.Top), 10))
	}
	query.Set("api-version", "2015-11-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *VaultsClient) ListHandleResponse(resp *azcore.Response) (*ResourceListResultResponse, error) {
	result := ResourceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceListResult)
}

// ListHandleError handles the List error response.
func (client *VaultsClient) ListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ListByResourceGroup - The List operation gets information about the vaults associated with the subscription and within the specified resource group.
func (client *VaultsClient) ListByResourceGroup(resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) VaultListResultPager {
	return &vaultListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListByResourceGroupCreateRequest(ctx, resourceGroupName, vaultsListByResourceGroupOptions)
		},
		responder: client.ListByResourceGroupHandleResponse,
		errorer:   client.ListByResourceGroupHandleError,
		advancer: func(ctx context.Context, resp *VaultListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.VaultListResult.NextLink)
		},
	}
}

// ListByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *VaultsClient) ListByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, vaultsListByResourceGroupOptions *VaultsListByResourceGroupOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if vaultsListByResourceGroupOptions != nil && vaultsListByResourceGroupOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListByResourceGroupOptions.Top), 10))
	}
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *VaultsClient) ListByResourceGroupHandleResponse(resp *azcore.Response) (*VaultListResultResponse, error) {
	result := VaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultListResult)
}

// ListByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *VaultsClient) ListByResourceGroupHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ListBySubscription - The List operation gets information about the vaults associated with the subscription.
func (client *VaultsClient) ListBySubscription(vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) VaultListResultPager {
	return &vaultListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListBySubscriptionCreateRequest(ctx, vaultsListBySubscriptionOptions)
		},
		responder: client.ListBySubscriptionHandleResponse,
		errorer:   client.ListBySubscriptionHandleError,
		advancer: func(ctx context.Context, resp *VaultListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.VaultListResult.NextLink)
		},
	}
}

// ListBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *VaultsClient) ListBySubscriptionCreateRequest(ctx context.Context, vaultsListBySubscriptionOptions *VaultsListBySubscriptionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if vaultsListBySubscriptionOptions != nil && vaultsListBySubscriptionOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*vaultsListBySubscriptionOptions.Top), 10))
	}
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *VaultsClient) ListBySubscriptionHandleResponse(resp *azcore.Response) (*VaultListResultResponse, error) {
	result := VaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultListResult)
}

// ListBySubscriptionHandleError handles the ListBySubscription error response.
func (client *VaultsClient) ListBySubscriptionHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ListDeleted - Gets information about the deleted vaults in a subscription.
func (client *VaultsClient) ListDeleted() DeletedVaultListResultPager {
	return &deletedVaultListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListDeletedCreateRequest(ctx)
		},
		responder: client.ListDeletedHandleResponse,
		errorer:   client.ListDeletedHandleError,
		advancer: func(ctx context.Context, resp *DeletedVaultListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeletedVaultListResult.NextLink)
		},
	}
}

// ListDeletedCreateRequest creates the ListDeleted request.
func (client *VaultsClient) ListDeletedCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/deletedVaults"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListDeletedHandleResponse handles the ListDeleted response.
func (client *VaultsClient) ListDeletedHandleResponse(resp *azcore.Response) (*DeletedVaultListResultResponse, error) {
	result := DeletedVaultListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeletedVaultListResult)
}

// ListDeletedHandleError handles the ListDeleted error response.
func (client *VaultsClient) ListDeletedHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

func (client *VaultsClient) BeginPurgeDeleted(ctx context.Context, vaultName string, location string) (*HTTPPollerResponse, error) {
	resp, err := client.PurgeDeleted(ctx, vaultName, location)
	if err != nil {
		return nil, err
	}
	result := &HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("VaultsClient.PurgeDeleted", "", resp, client.PurgeDeletedHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *VaultsClient) ResumePurgeDeleted(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("VaultsClient.PurgeDeleted", token, client.PurgeDeletedHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// PurgeDeleted - Permanently deletes the specified vault. aka Purges the deleted Azure key vault.
func (client *VaultsClient) PurgeDeleted(ctx context.Context, vaultName string, location string) (*azcore.Response, error) {
	req, err := client.PurgeDeletedCreateRequest(ctx, vaultName, location)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.PurgeDeletedHandleError(resp)
	}
	return resp, nil
}

// PurgeDeletedCreateRequest creates the PurgeDeleted request.
func (client *VaultsClient) PurgeDeletedCreateRequest(ctx context.Context, vaultName string, location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/locations/{location}/deletedVaults/{vaultName}/purge"
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// PurgeDeletedHandleError handles the PurgeDeleted error response.
func (client *VaultsClient) PurgeDeletedHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Update - Update a key vault in the specified subscription.
func (client *VaultsClient) Update(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*VaultResponse, error) {
	req, err := client.UpdateCreateRequest(ctx, resourceGroupName, vaultName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.UpdateHandleError(resp)
	}
	result, err := client.UpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateCreateRequest creates the Update request.
func (client *VaultsClient) UpdateCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, parameters VaultPatchParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// UpdateHandleResponse handles the Update response.
func (client *VaultsClient) UpdateHandleResponse(resp *azcore.Response) (*VaultResponse, error) {
	result := VaultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Vault)
}

// UpdateHandleError handles the Update error response.
func (client *VaultsClient) UpdateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// UpdateAccessPolicy - Update access policies in a key vault in the specified subscription.
func (client *VaultsClient) UpdateAccessPolicy(ctx context.Context, resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*VaultAccessPolicyParametersResponse, error) {
	req, err := client.UpdateAccessPolicyCreateRequest(ctx, resourceGroupName, vaultName, operationKind, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.UpdateAccessPolicyHandleError(resp)
	}
	result, err := client.UpdateAccessPolicyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateAccessPolicyCreateRequest creates the UpdateAccessPolicy request.
func (client *VaultsClient) UpdateAccessPolicyCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, operationKind AccessPolicyUpdateKind, parameters VaultAccessPolicyParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/{operationKind}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	urlPath = strings.ReplaceAll(urlPath, "{operationKind}", url.PathEscape(string(operationKind)))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-02-14")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// UpdateAccessPolicyHandleResponse handles the UpdateAccessPolicy response.
func (client *VaultsClient) UpdateAccessPolicyHandleResponse(resp *azcore.Response) (*VaultAccessPolicyParametersResponse, error) {
	result := VaultAccessPolicyParametersResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VaultAccessPolicyParameters)
}

// UpdateAccessPolicyHandleError handles the UpdateAccessPolicy error response.
func (client *VaultsClient) UpdateAccessPolicyHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
