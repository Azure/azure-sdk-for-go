// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// DeletedVaultListResultPager provides iteration over DeletedVaultListResult pages.
type DeletedVaultListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current DeletedVaultListResultResponse.
	PageResponse() *DeletedVaultListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type deletedVaultListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedVaultListResultHandleError func(*azcore.Response) error

type deletedVaultListResultHandleResponse func(*azcore.Response) (*DeletedVaultListResultResponse, error)

type deletedVaultListResultAdvancePage func(context.Context, *DeletedVaultListResultResponse) (*azcore.Request, error)

type deletedVaultListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedVaultListResultCreateRequest
	// callback for handling response errors
	errorer deletedVaultListResultHandleError
	// callback for handling the HTTP response
	responder deletedVaultListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedVaultListResultAdvancePage
	// contains the current response
	current *DeletedVaultListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedVaultListResultPager) Err() error {
	return p.err
}

func (p *deletedVaultListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.DeletedVaultListResult.NextLink == nil || len(*p.current.DeletedVaultListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedVaultListResultPager) PageResponse() *DeletedVaultListResultResponse {
	return p.current
}

// KeyListResultPager provides iteration over KeyListResult pages.
type KeyListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current KeyListResultResponse.
	PageResponse() *KeyListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type keyListResultCreateRequest func(context.Context) (*azcore.Request, error)

type keyListResultHandleError func(*azcore.Response) error

type keyListResultHandleResponse func(*azcore.Response) (*KeyListResultResponse, error)

type keyListResultAdvancePage func(context.Context, *KeyListResultResponse) (*azcore.Request, error)

type keyListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester keyListResultCreateRequest
	// callback for handling response errors
	errorer keyListResultHandleError
	// callback for handling the HTTP response
	responder keyListResultHandleResponse
	// callback for advancing to the next page
	advancer keyListResultAdvancePage
	// contains the current response
	current *KeyListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *keyListResultPager) Err() error {
	return p.err
}

func (p *keyListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.KeyListResult.NextLink == nil || len(*p.current.KeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *keyListResultPager) PageResponse() *KeyListResultResponse {
	return p.current
}

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current OperationListResultResponse.
	PageResponse() *OperationListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type operationListResultCreateRequest func(context.Context) (*azcore.Request, error)

type operationListResultHandleError func(*azcore.Response) error

type operationListResultHandleResponse func(*azcore.Response) (*OperationListResultResponse, error)

type operationListResultAdvancePage func(context.Context, *OperationListResultResponse) (*azcore.Request, error)

type operationListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListResultCreateRequest
	// callback for handling response errors
	errorer operationListResultHandleError
	// callback for handling the HTTP response
	responder operationListResultHandleResponse
	// callback for advancing to the next page
	advancer operationListResultAdvancePage
	// contains the current response
	current *OperationListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListResultPager) Err() error {
	return p.err
}

func (p *operationListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListResultPager) PageResponse() *OperationListResultResponse {
	return p.current
}

// ResourceListResultPager provides iteration over ResourceListResult pages.
type ResourceListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current ResourceListResultResponse.
	PageResponse() *ResourceListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type resourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type resourceListResultHandleError func(*azcore.Response) error

type resourceListResultHandleResponse func(*azcore.Response) (*ResourceListResultResponse, error)

type resourceListResultAdvancePage func(context.Context, *ResourceListResultResponse) (*azcore.Request, error)

type resourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester resourceListResultCreateRequest
	// callback for handling response errors
	errorer resourceListResultHandleError
	// callback for handling the HTTP response
	responder resourceListResultHandleResponse
	// callback for advancing to the next page
	advancer resourceListResultAdvancePage
	// contains the current response
	current *ResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *resourceListResultPager) Err() error {
	return p.err
}

func (p *resourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.ResourceListResult.NextLink == nil || len(*p.current.ResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceListResultPager) PageResponse() *ResourceListResultResponse {
	return p.current
}

// VaultListResultPager provides iteration over VaultListResult pages.
type VaultListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current VaultListResultResponse.
	PageResponse() *VaultListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type vaultListResultCreateRequest func(context.Context) (*azcore.Request, error)

type vaultListResultHandleError func(*azcore.Response) error

type vaultListResultHandleResponse func(*azcore.Response) (*VaultListResultResponse, error)

type vaultListResultAdvancePage func(context.Context, *VaultListResultResponse) (*azcore.Request, error)

type vaultListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester vaultListResultCreateRequest
	// callback for handling response errors
	errorer vaultListResultHandleError
	// callback for handling the HTTP response
	responder vaultListResultHandleResponse
	// callback for advancing to the next page
	advancer vaultListResultAdvancePage
	// contains the current response
	current *VaultListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *vaultListResultPager) Err() error {
	return p.err
}

func (p *vaultListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if p.current != nil {
		if p.current.VaultListResult.NextLink == nil || len(*p.current.VaultListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vaultListResultPager) PageResponse() *VaultListResultResponse {
	return p.current
}
