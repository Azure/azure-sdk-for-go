// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// ActionGroupsOperations contains the methods for the ActionGroups group.
type ActionGroupsOperations interface {
	// CreateOrUpdate - Create a new action group or update an existing one.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, actionGroupName string, actionGroup ActionGroupResource) (*ActionGroupResourceResponse, error)
	// Delete - Delete an action group.
	Delete(ctx context.Context, resourceGroupName string, actionGroupName string) (*http.Response, error)
	// EnableReceiver - Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
	EnableReceiver(ctx context.Context, resourceGroupName string, actionGroupName string, enableRequest EnableRequest) (*http.Response, error)
	// Get - Get an action group.
	Get(ctx context.Context, resourceGroupName string, actionGroupName string) (*ActionGroupResourceResponse, error)
	// ListByResourceGroup - Get a list of all action groups in a resource group.
	ListByResourceGroup(ctx context.Context, resourceGroupName string) (*ActionGroupListResponse, error)
	// ListBySubscriptionID - Get a list of all action groups in a subscription.
	ListBySubscriptionID(ctx context.Context) (*ActionGroupListResponse, error)
	// Update - Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.
	Update(ctx context.Context, resourceGroupName string, actionGroupName string, actionGroupPatch ActionGroupPatchBody) (*ActionGroupResourceResponse, error)
}

// actionGroupsOperations implements the ActionGroupsOperations interface.
type actionGroupsOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Create a new action group or update an existing one.
func (client *actionGroupsOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, actionGroupName string, actionGroup ActionGroupResource) (*ActionGroupResourceResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, actionGroupName, actionGroup)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *actionGroupsOperations) createOrUpdateCreateRequest(resourceGroupName string, actionGroupName string, actionGroup ActionGroupResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{actionGroupName}", url.PathEscape(actionGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(actionGroup)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *actionGroupsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ActionGroupResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := ActionGroupResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActionGroupResource)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *actionGroupsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Delete an action group.
func (client *actionGroupsOperations) Delete(ctx context.Context, resourceGroupName string, actionGroupName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, actionGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *actionGroupsOperations) deleteCreateRequest(resourceGroupName string, actionGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{actionGroupName}", url.PathEscape(actionGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *actionGroupsOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *actionGroupsOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// EnableReceiver - Enable a receiver in an action group. This changes the receiver's status from Disabled to Enabled. This operation is only supported for Email or SMS receivers.
func (client *actionGroupsOperations) EnableReceiver(ctx context.Context, resourceGroupName string, actionGroupName string, enableRequest EnableRequest) (*http.Response, error) {
	req, err := client.enableReceiverCreateRequest(resourceGroupName, actionGroupName, enableRequest)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.enableReceiverHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// enableReceiverCreateRequest creates the EnableReceiver request.
func (client *actionGroupsOperations) enableReceiverCreateRequest(resourceGroupName string, actionGroupName string, enableRequest EnableRequest) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}/subscribe"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{actionGroupName}", url.PathEscape(actionGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(enableRequest)
}

// enableReceiverHandleResponse handles the EnableReceiver response.
func (client *actionGroupsOperations) enableReceiverHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusConflict) {
		return nil, client.enableReceiverHandleError(resp)
	}
	return resp.Response, nil
}

// enableReceiverHandleError handles the EnableReceiver error response.
func (client *actionGroupsOperations) enableReceiverHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Get an action group.
func (client *actionGroupsOperations) Get(ctx context.Context, resourceGroupName string, actionGroupName string) (*ActionGroupResourceResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, actionGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *actionGroupsOperations) getCreateRequest(resourceGroupName string, actionGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{actionGroupName}", url.PathEscape(actionGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *actionGroupsOperations) getHandleResponse(resp *azcore.Response) (*ActionGroupResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ActionGroupResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActionGroupResource)
}

// getHandleError handles the Get error response.
func (client *actionGroupsOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByResourceGroup - Get a list of all action groups in a resource group.
func (client *actionGroupsOperations) ListByResourceGroup(ctx context.Context, resourceGroupName string) (*ActionGroupListResponse, error) {
	req, err := client.listByResourceGroupCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *actionGroupsOperations) listByResourceGroupCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *actionGroupsOperations) listByResourceGroupHandleResponse(resp *azcore.Response) (*ActionGroupListResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByResourceGroupHandleError(resp)
	}
	result := ActionGroupListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActionGroupList)
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *actionGroupsOperations) listByResourceGroupHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListBySubscriptionID - Get a list of all action groups in a subscription.
func (client *actionGroupsOperations) ListBySubscriptionID(ctx context.Context) (*ActionGroupListResponse, error) {
	req, err := client.listBySubscriptionIdCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listBySubscriptionIdHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listBySubscriptionIdCreateRequest creates the ListBySubscriptionID request.
func (client *actionGroupsOperations) listBySubscriptionIdCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/actionGroups"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listBySubscriptionIdHandleResponse handles the ListBySubscriptionID response.
func (client *actionGroupsOperations) listBySubscriptionIdHandleResponse(resp *azcore.Response) (*ActionGroupListResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listBySubscriptionIdHandleError(resp)
	}
	result := ActionGroupListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActionGroupList)
}

// listBySubscriptionIdHandleError handles the ListBySubscriptionID error response.
func (client *actionGroupsOperations) listBySubscriptionIdHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Updates an existing action group's tags. To update other fields use the CreateOrUpdate method.
func (client *actionGroupsOperations) Update(ctx context.Context, resourceGroupName string, actionGroupName string, actionGroupPatch ActionGroupPatchBody) (*ActionGroupResourceResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, actionGroupName, actionGroupPatch)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *actionGroupsOperations) updateCreateRequest(resourceGroupName string, actionGroupName string, actionGroupPatch ActionGroupPatchBody) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/actionGroups/{actionGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{actionGroupName}", url.PathEscape(actionGroupName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(actionGroupPatch)
}

// updateHandleResponse handles the Update response.
func (client *actionGroupsOperations) updateHandleResponse(resp *azcore.Response) (*ActionGroupResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := ActionGroupResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ActionGroupResource)
}

// updateHandleError handles the Update error response.
func (client *actionGroupsOperations) updateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
