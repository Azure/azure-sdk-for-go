// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

// BaselinesOperations contains the methods for the Baselines group.
type BaselinesOperations interface {
	// List - **Lists the metric baseline values for a resource**.
	List(ctx context.Context, resourceUri string, baselinesListOptions *BaselinesListOptions) (*MetricBaselinesResponseResponse, error)
}

// baselinesOperations implements the BaselinesOperations interface.
type baselinesOperations struct {
	*Client
}

// List - **Lists the metric baseline values for a resource**.
func (client *baselinesOperations) List(ctx context.Context, resourceUri string, baselinesListOptions *BaselinesListOptions) (*MetricBaselinesResponseResponse, error) {
	req, err := client.listCreateRequest(resourceUri, baselinesListOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *baselinesOperations) listCreateRequest(resourceUri string, baselinesListOptions *BaselinesListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/metricBaselines"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if baselinesListOptions != nil && baselinesListOptions.Metricnames != nil {
		query.Set("metricnames", *baselinesListOptions.Metricnames)
	}
	if baselinesListOptions != nil && baselinesListOptions.Metricnamespace != nil {
		query.Set("metricnamespace", *baselinesListOptions.Metricnamespace)
	}
	if baselinesListOptions != nil && baselinesListOptions.Timespan != nil {
		query.Set("timespan", *baselinesListOptions.Timespan)
	}
	if baselinesListOptions != nil && baselinesListOptions.Interval != nil {
		query.Set("interval", baselinesListOptions.Interval.String())
	}
	if baselinesListOptions != nil && baselinesListOptions.Aggregation != nil {
		query.Set("aggregation", *baselinesListOptions.Aggregation)
	}
	if baselinesListOptions != nil && baselinesListOptions.Sensitivities != nil {
		query.Set("sensitivities", *baselinesListOptions.Sensitivities)
	}
	if baselinesListOptions != nil && baselinesListOptions.Filter != nil {
		query.Set("$filter", *baselinesListOptions.Filter)
	}
	if baselinesListOptions != nil && baselinesListOptions.ResultType != nil {
		query.Set("resultType", string(*baselinesListOptions.ResultType))
	}
	query.Set("api-version", "2019-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *baselinesOperations) listHandleResponse(resp *azcore.Response) (*MetricBaselinesResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := MetricBaselinesResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricBaselinesResponse)
}

// listHandleError handles the List error response.
func (client *baselinesOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
