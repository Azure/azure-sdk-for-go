// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// LogProfilesOperations contains the methods for the LogProfiles group.
type LogProfilesOperations interface {
	// CreateOrUpdate - Create or update a log profile in Azure Monitoring REST API.
	CreateOrUpdate(ctx context.Context, logProfileName string, parameters LogProfileResource) (*LogProfileResourceResponse, error)
	// Delete - Deletes the log profile.
	Delete(ctx context.Context, logProfileName string) (*http.Response, error)
	// Get - Gets the log profile.
	Get(ctx context.Context, logProfileName string) (*LogProfileResourceResponse, error)
	// List - List the log profiles.
	List(ctx context.Context) (*LogProfileCollectionResponse, error)
	// Update - Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.
	Update(ctx context.Context, logProfileName string, logProfilesResource LogProfileResourcePatch) (*LogProfileResourceResponse, error)
}

// logProfilesOperations implements the LogProfilesOperations interface.
type logProfilesOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Create or update a log profile in Azure Monitoring REST API.
func (client *logProfilesOperations) CreateOrUpdate(ctx context.Context, logProfileName string, parameters LogProfileResource) (*LogProfileResourceResponse, error) {
	req, err := client.createOrUpdateCreateRequest(logProfileName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *logProfilesOperations) createOrUpdateCreateRequest(logProfileName string, parameters LogProfileResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *logProfilesOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *logProfilesOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Delete - Deletes the log profile.
func (client *logProfilesOperations) Delete(ctx context.Context, logProfileName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(logProfileName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *logProfilesOperations) deleteCreateRequest(logProfileName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *logProfilesOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *logProfilesOperations) deleteHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Get - Gets the log profile.
func (client *logProfilesOperations) Get(ctx context.Context, logProfileName string) (*LogProfileResourceResponse, error) {
	req, err := client.getCreateRequest(logProfileName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *logProfilesOperations) getCreateRequest(logProfileName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *logProfilesOperations) getHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// getHandleError handles the Get error response.
func (client *logProfilesOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - List the log profiles.
func (client *logProfilesOperations) List(ctx context.Context) (*LogProfileCollectionResponse, error) {
	req, err := client.listCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *logProfilesOperations) listCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *logProfilesOperations) listHandleResponse(resp *azcore.Response) (*LogProfileCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := LogProfileCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileCollection)
}

// listHandleError handles the List error response.
func (client *logProfilesOperations) listHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Update - Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.
func (client *logProfilesOperations) Update(ctx context.Context, logProfileName string, logProfilesResource LogProfileResourcePatch) (*LogProfileResourceResponse, error) {
	req, err := client.updateCreateRequest(logProfileName, logProfilesResource)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *logProfilesOperations) updateCreateRequest(logProfileName string, logProfilesResource LogProfileResourcePatch) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(logProfilesResource)
}

// updateHandleResponse handles the Update response.
func (client *logProfilesOperations) updateHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// updateHandleError handles the Update error response.
func (client *logProfilesOperations) updateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
