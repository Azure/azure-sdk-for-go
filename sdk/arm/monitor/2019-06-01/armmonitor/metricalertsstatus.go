// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// MetricAlertsStatusOperations contains the methods for the MetricAlertsStatus group.
type MetricAlertsStatusOperations interface {
	// List - Retrieve an alert rule status.
	List(ctx context.Context, resourceGroupName string, ruleName string) (*MetricAlertStatusCollectionResponse, error)
	// ListByName - Retrieve an alert rule status.
	ListByName(ctx context.Context, resourceGroupName string, ruleName string, statusName string) (*MetricAlertStatusCollectionResponse, error)
}

// metricAlertsStatusOperations implements the MetricAlertsStatusOperations interface.
type metricAlertsStatusOperations struct {
	*Client
	subscriptionID string
}

// List - Retrieve an alert rule status.
func (client *metricAlertsStatusOperations) List(ctx context.Context, resourceGroupName string, ruleName string) (*MetricAlertStatusCollectionResponse, error) {
	req, err := client.listCreateRequest(resourceGroupName, ruleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *metricAlertsStatusOperations) listCreateRequest(resourceGroupName string, ruleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *metricAlertsStatusOperations) listHandleResponse(resp *azcore.Response) (*MetricAlertStatusCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := MetricAlertStatusCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertStatusCollection)
}

// listHandleError handles the List error response.
func (client *metricAlertsStatusOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByName - Retrieve an alert rule status.
func (client *metricAlertsStatusOperations) ListByName(ctx context.Context, resourceGroupName string, ruleName string, statusName string) (*MetricAlertStatusCollectionResponse, error) {
	req, err := client.listByNameCreateRequest(resourceGroupName, ruleName, statusName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listByNameHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listByNameCreateRequest creates the ListByName request.
func (client *metricAlertsStatusOperations) listByNameCreateRequest(resourceGroupName string, ruleName string, statusName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}/status/{statusName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	urlPath = strings.ReplaceAll(urlPath, "{statusName}", url.PathEscape(statusName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByNameHandleResponse handles the ListByName response.
func (client *metricAlertsStatusOperations) listByNameHandleResponse(resp *azcore.Response) (*MetricAlertStatusCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByNameHandleError(resp)
	}
	result := MetricAlertStatusCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertStatusCollection)
}

// listByNameHandleError handles the ListByName error response.
func (client *metricAlertsStatusOperations) listByNameHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
