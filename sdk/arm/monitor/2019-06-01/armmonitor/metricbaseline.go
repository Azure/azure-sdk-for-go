// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// MetricBaselineOperations contains the methods for the MetricBaseline group.
type MetricBaselineOperations interface {
	// CalculateBaseline - **Lists the baseline values for a resource**.
	CalculateBaseline(ctx context.Context, resourceUri string, timeSeriesInformation TimeSeriesInformation) (*CalculateBaselineResponseResponse, error)
	// Get - **Gets the baseline values for a specific metric**.
	Get(ctx context.Context, resourceUri string, metricName string, metricBaselineGetOptions *MetricBaselineGetOptions) (*BaselineResponseResponse, error)
}

// metricBaselineOperations implements the MetricBaselineOperations interface.
type metricBaselineOperations struct {
	*Client
}

// CalculateBaseline - **Lists the baseline values for a resource**.
func (client *metricBaselineOperations) CalculateBaseline(ctx context.Context, resourceUri string, timeSeriesInformation TimeSeriesInformation) (*CalculateBaselineResponseResponse, error) {
	req, err := client.calculateBaselineCreateRequest(resourceUri, timeSeriesInformation)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.calculateBaselineHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// calculateBaselineCreateRequest creates the CalculateBaseline request.
func (client *metricBaselineOperations) calculateBaselineCreateRequest(resourceUri string, timeSeriesInformation TimeSeriesInformation) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/calculatebaseline"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-11-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(timeSeriesInformation)
}

// calculateBaselineHandleResponse handles the CalculateBaseline response.
func (client *metricBaselineOperations) calculateBaselineHandleResponse(resp *azcore.Response) (*CalculateBaselineResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.calculateBaselineHandleError(resp)
	}
	result := CalculateBaselineResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.CalculateBaselineResponse)
}

// calculateBaselineHandleError handles the CalculateBaseline error response.
func (client *metricBaselineOperations) calculateBaselineHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - **Gets the baseline values for a specific metric**.
func (client *metricBaselineOperations) Get(ctx context.Context, resourceUri string, metricName string, metricBaselineGetOptions *MetricBaselineGetOptions) (*BaselineResponseResponse, error) {
	req, err := client.getCreateRequest(resourceUri, metricName, metricBaselineGetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *metricBaselineOperations) getCreateRequest(resourceUri string, metricName string, metricBaselineGetOptions *MetricBaselineGetOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/baseline/{metricName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	urlPath = strings.ReplaceAll(urlPath, "{metricName}", url.PathEscape(metricName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if metricBaselineGetOptions != nil && metricBaselineGetOptions.Timespan != nil {
		query.Set("timespan", *metricBaselineGetOptions.Timespan)
	}
	if metricBaselineGetOptions != nil && metricBaselineGetOptions.Interval != nil {
		query.Set("interval", metricBaselineGetOptions.Interval.String())
	}
	if metricBaselineGetOptions != nil && metricBaselineGetOptions.Aggregation != nil {
		query.Set("aggregation", *metricBaselineGetOptions.Aggregation)
	}
	if metricBaselineGetOptions != nil && metricBaselineGetOptions.Sensitivities != nil {
		query.Set("sensitivities", *metricBaselineGetOptions.Sensitivities)
	}
	if metricBaselineGetOptions != nil && metricBaselineGetOptions.ResultType != nil {
		query.Set("resultType", string(*metricBaselineGetOptions.ResultType))
	}
	query.Set("api-version", "2017-11-01-preview")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *metricBaselineOperations) getHandleResponse(resp *azcore.Response) (*BaselineResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := BaselineResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BaselineResponse)
}

// getHandleError handles the Get error response.
func (client *metricBaselineOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
