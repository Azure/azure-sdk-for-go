// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
)

// MetricsOperations contains the methods for the Metrics group.
type MetricsOperations interface {
	// List - **Lists the metric values for a resource**.
	List(ctx context.Context, resourceUri string, metricsListOptions *MetricsListOptions) (*ResponseResponse, error)
}

// metricsOperations implements the MetricsOperations interface.
type metricsOperations struct {
	*Client
}

// List - **Lists the metric values for a resource**.
func (client *metricsOperations) List(ctx context.Context, resourceUri string, metricsListOptions *MetricsListOptions) (*ResponseResponse, error) {
	req, err := client.listCreateRequest(resourceUri, metricsListOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *metricsOperations) listCreateRequest(resourceUri string, metricsListOptions *MetricsListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/metrics"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if metricsListOptions != nil && metricsListOptions.Timespan != nil {
		query.Set("timespan", *metricsListOptions.Timespan)
	}
	if metricsListOptions != nil && metricsListOptions.Interval != nil {
		query.Set("interval", metricsListOptions.Interval.String())
	}
	if metricsListOptions != nil && metricsListOptions.Metricnames != nil {
		query.Set("metricnames", *metricsListOptions.Metricnames)
	}
	if metricsListOptions != nil && metricsListOptions.Aggregation != nil {
		query.Set("aggregation", *metricsListOptions.Aggregation)
	}
	if metricsListOptions != nil && metricsListOptions.Top != nil {
		query.Set("top", strconv.FormatInt(int64(*metricsListOptions.Top), 10))
	}
	if metricsListOptions != nil && metricsListOptions.Orderby != nil {
		query.Set("orderby", *metricsListOptions.Orderby)
	}
	if metricsListOptions != nil && metricsListOptions.Filter != nil {
		query.Set("$filter", *metricsListOptions.Filter)
	}
	if metricsListOptions != nil && metricsListOptions.ResultType != nil {
		query.Set("resultType", string(*metricsListOptions.ResultType))
	}
	query.Set("api-version", "2018-01-01")
	if metricsListOptions != nil && metricsListOptions.Metricnamespace != nil {
		query.Set("metricnamespace", *metricsListOptions.Metricnamespace)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *metricsOperations) listHandleResponse(resp *azcore.Response) (*ResponseResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Response)
}

// listHandleError handles the List error response.
func (client *metricsOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
