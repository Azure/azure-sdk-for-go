// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// AutoscaleSettingsOperations contains the methods for the AutoscaleSettings group.
type AutoscaleSettingsOperations interface {
	// CreateOrUpdate - Creates or updates an autoscale setting.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, autoscaleSettingName string, parameters AutoscaleSettingResource) (*AutoscaleSettingResourceResponse, error)
	// Delete - Deletes and autoscale setting
	Delete(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*http.Response, error)
	// Get - Gets an autoscale setting
	Get(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*AutoscaleSettingResourceResponse, error)
	// ListByResourceGroup - Lists the autoscale settings for a resource group
	ListByResourceGroup(resourceGroupName string) AutoscaleSettingResourceCollectionPager
	// ListBySubscription - Lists the autoscale settings for a subscription
	ListBySubscription() AutoscaleSettingResourceCollectionPager
	// Update - Updates an existing AutoscaleSettingsResource. To update other fields use the CreateOrUpdate method.
	Update(ctx context.Context, resourceGroupName string, autoscaleSettingName string, autoscaleSettingResource AutoscaleSettingResourcePatch) (*AutoscaleSettingResourceResponse, error)
}

// AutoscaleSettingsClient implements the AutoscaleSettingsOperations interface.
// Don't use this type directly, use NewAutoscaleSettingsClient() instead.
type AutoscaleSettingsClient struct {
	*Client
	subscriptionID string
}

// NewAutoscaleSettingsClient creates a new instance of AutoscaleSettingsClient with the specified values.
func NewAutoscaleSettingsClient(c *Client, subscriptionID string) AutoscaleSettingsOperations {
	return &AutoscaleSettingsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *AutoscaleSettingsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdate - Creates or updates an autoscale setting.
func (client *AutoscaleSettingsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, autoscaleSettingName string, parameters AutoscaleSettingResource) (*AutoscaleSettingResourceResponse, error) {
	req, err := client.CreateOrUpdateCreateRequest(ctx, resourceGroupName, autoscaleSettingName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.CreateOrUpdateHandleError(resp)
	}
	result, err := client.CreateOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AutoscaleSettingsClient) CreateOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, autoscaleSettingName string, parameters AutoscaleSettingResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{autoscaleSettingName}", url.PathEscape(autoscaleSettingName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// CreateOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *AutoscaleSettingsClient) CreateOrUpdateHandleResponse(resp *azcore.Response) (*AutoscaleSettingResourceResponse, error) {
	result := AutoscaleSettingResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AutoscaleSettingResource)
}

// CreateOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *AutoscaleSettingsClient) CreateOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes and autoscale setting
func (client *AutoscaleSettingsClient) Delete(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*http.Response, error) {
	req, err := client.DeleteCreateRequest(ctx, resourceGroupName, autoscaleSettingName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.DeleteHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteCreateRequest creates the Delete request.
func (client *AutoscaleSettingsClient) DeleteCreateRequest(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{autoscaleSettingName}", url.PathEscape(autoscaleSettingName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// DeleteHandleError handles the Delete error response.
func (client *AutoscaleSettingsClient) DeleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets an autoscale setting
func (client *AutoscaleSettingsClient) Get(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*AutoscaleSettingResourceResponse, error) {
	req, err := client.GetCreateRequest(ctx, resourceGroupName, autoscaleSettingName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *AutoscaleSettingsClient) GetCreateRequest(ctx context.Context, resourceGroupName string, autoscaleSettingName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{autoscaleSettingName}", url.PathEscape(autoscaleSettingName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *AutoscaleSettingsClient) GetHandleResponse(resp *azcore.Response) (*AutoscaleSettingResourceResponse, error) {
	result := AutoscaleSettingResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AutoscaleSettingResource)
}

// GetHandleError handles the Get error response.
func (client *AutoscaleSettingsClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByResourceGroup - Lists the autoscale settings for a resource group
func (client *AutoscaleSettingsClient) ListByResourceGroup(resourceGroupName string) AutoscaleSettingResourceCollectionPager {
	return &autoscaleSettingResourceCollectionPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListByResourceGroupCreateRequest(ctx, resourceGroupName)
		},
		responder: client.ListByResourceGroupHandleResponse,
		errorer:   client.ListByResourceGroupHandleError,
		advancer: func(ctx context.Context, resp *AutoscaleSettingResourceCollectionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.AutoscaleSettingResourceCollection.NextLink)
		},
	}
}

// ListByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AutoscaleSettingsClient) ListByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AutoscaleSettingsClient) ListByResourceGroupHandleResponse(resp *azcore.Response) (*AutoscaleSettingResourceCollectionResponse, error) {
	result := AutoscaleSettingResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AutoscaleSettingResourceCollection)
}

// ListByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *AutoscaleSettingsClient) ListByResourceGroupHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListBySubscription - Lists the autoscale settings for a subscription
func (client *AutoscaleSettingsClient) ListBySubscription() AutoscaleSettingResourceCollectionPager {
	return &autoscaleSettingResourceCollectionPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListBySubscriptionCreateRequest(ctx)
		},
		responder: client.ListBySubscriptionHandleResponse,
		errorer:   client.ListBySubscriptionHandleError,
		advancer: func(ctx context.Context, resp *AutoscaleSettingResourceCollectionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.AutoscaleSettingResourceCollection.NextLink)
		},
	}
}

// ListBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *AutoscaleSettingsClient) ListBySubscriptionCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/autoscalesettings"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *AutoscaleSettingsClient) ListBySubscriptionHandleResponse(resp *azcore.Response) (*AutoscaleSettingResourceCollectionResponse, error) {
	result := AutoscaleSettingResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AutoscaleSettingResourceCollection)
}

// ListBySubscriptionHandleError handles the ListBySubscription error response.
func (client *AutoscaleSettingsClient) ListBySubscriptionHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Updates an existing AutoscaleSettingsResource. To update other fields use the CreateOrUpdate method.
func (client *AutoscaleSettingsClient) Update(ctx context.Context, resourceGroupName string, autoscaleSettingName string, autoscaleSettingResource AutoscaleSettingResourcePatch) (*AutoscaleSettingResourceResponse, error) {
	req, err := client.UpdateCreateRequest(ctx, resourceGroupName, autoscaleSettingName, autoscaleSettingResource)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.UpdateHandleError(resp)
	}
	result, err := client.UpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateCreateRequest creates the Update request.
func (client *AutoscaleSettingsClient) UpdateCreateRequest(ctx context.Context, resourceGroupName string, autoscaleSettingName string, autoscaleSettingResource AutoscaleSettingResourcePatch) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/autoscalesettings/{autoscaleSettingName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{autoscaleSettingName}", url.PathEscape(autoscaleSettingName))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(autoscaleSettingResource)
}

// UpdateHandleResponse handles the Update response.
func (client *AutoscaleSettingsClient) UpdateHandleResponse(resp *azcore.Response) (*AutoscaleSettingResourceResponse, error) {
	result := AutoscaleSettingResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AutoscaleSettingResource)
}

// UpdateHandleError handles the Update error response.
func (client *AutoscaleSettingsClient) UpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
