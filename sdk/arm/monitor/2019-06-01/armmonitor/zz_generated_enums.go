// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

// AggregationType - the aggregation type of the metric.
type AggregationType string

const (
	AggregationTypeNone    AggregationType = "None"
	AggregationTypeAverage AggregationType = "Average"
	AggregationTypeCount   AggregationType = "Count"
	AggregationTypeMinimum AggregationType = "Minimum"
	AggregationTypeMaximum AggregationType = "Maximum"
	AggregationTypeTotal   AggregationType = "Total"
)

func PossibleAggregationTypeValues() []AggregationType {
	return []AggregationType{
		AggregationTypeNone,
		AggregationTypeAverage,
		AggregationTypeCount,
		AggregationTypeMinimum,
		AggregationTypeMaximum,
		AggregationTypeTotal,
	}
}

func (c AggregationType) ToPtr() *AggregationType {
	return &c
}

// AlertSeverity - Severity Level of Alert
type AlertSeverity string

const (
	AlertSeverityFour  AlertSeverity = "4"
	AlertSeverityOne   AlertSeverity = "1"
	AlertSeverityThree AlertSeverity = "3"
	AlertSeverityTwo   AlertSeverity = "2"
	AlertSeverityZero  AlertSeverity = "0"
)

func PossibleAlertSeverityValues() []AlertSeverity {
	return []AlertSeverity{
		AlertSeverityFour,
		AlertSeverityOne,
		AlertSeverityThree,
		AlertSeverityTwo,
		AlertSeverityZero,
	}
}

func (c AlertSeverity) ToPtr() *AlertSeverity {
	return &c
}

// BaselineSensitivity - the sensitivity of the baseline.
type BaselineSensitivity string

const (
	BaselineSensitivityHigh   BaselineSensitivity = "High"
	BaselineSensitivityLow    BaselineSensitivity = "Low"
	BaselineSensitivityMedium BaselineSensitivity = "Medium"
)

func PossibleBaselineSensitivityValues() []BaselineSensitivity {
	return []BaselineSensitivity{
		BaselineSensitivityHigh,
		BaselineSensitivityLow,
		BaselineSensitivityMedium,
	}
}

func (c BaselineSensitivity) ToPtr() *BaselineSensitivity {
	return &c
}

// CategoryType - The type of the diagnostic settings category.
type CategoryType string

const (
	CategoryTypeMetrics CategoryType = "Metrics"
	CategoryTypeLogs    CategoryType = "Logs"
)

func PossibleCategoryTypeValues() []CategoryType {
	return []CategoryType{
		CategoryTypeMetrics,
		CategoryTypeLogs,
	}
}

func (c CategoryType) ToPtr() *CategoryType {
	return &c
}

// ComparisonOperationType - the operator that is used to compare the metric data and the threshold.
type ComparisonOperationType string

const (
	ComparisonOperationTypeEquals             ComparisonOperationType = "Equals"
	ComparisonOperationTypeNotEquals          ComparisonOperationType = "NotEquals"
	ComparisonOperationTypeGreaterThan        ComparisonOperationType = "GreaterThan"
	ComparisonOperationTypeGreaterThanOrEqual ComparisonOperationType = "GreaterThanOrEqual"
	ComparisonOperationTypeLessThan           ComparisonOperationType = "LessThan"
	ComparisonOperationTypeLessThanOrEqual    ComparisonOperationType = "LessThanOrEqual"
)

func PossibleComparisonOperationTypeValues() []ComparisonOperationType {
	return []ComparisonOperationType{
		ComparisonOperationTypeEquals,
		ComparisonOperationTypeNotEquals,
		ComparisonOperationTypeGreaterThan,
		ComparisonOperationTypeGreaterThanOrEqual,
		ComparisonOperationTypeLessThan,
		ComparisonOperationTypeLessThanOrEqual,
	}
}

func (c ComparisonOperationType) ToPtr() *ComparisonOperationType {
	return &c
}

// ConditionOperator - Operators allowed in the rule condition.
type ConditionOperator string

const (
	ConditionOperatorGreaterThan        ConditionOperator = "GreaterThan"
	ConditionOperatorGreaterThanOrEqual ConditionOperator = "GreaterThanOrEqual"
	ConditionOperatorLessThan           ConditionOperator = "LessThan"
	ConditionOperatorLessThanOrEqual    ConditionOperator = "LessThanOrEqual"
)

func PossibleConditionOperatorValues() []ConditionOperator {
	return []ConditionOperator{
		ConditionOperatorGreaterThan,
		ConditionOperatorGreaterThanOrEqual,
		ConditionOperatorLessThan,
		ConditionOperatorLessThanOrEqual,
	}
}

func (c ConditionOperator) ToPtr() *ConditionOperator {
	return &c
}

// ConditionalOperator - Result Condition Evaluation criteria. Supported Values - 'GreaterThan' or 'LessThan' or 'Equal'.
type ConditionalOperator string

const (
	ConditionalOperatorEqual       ConditionalOperator = "Equal"
	ConditionalOperatorGreaterThan ConditionalOperator = "GreaterThan"
	ConditionalOperatorLessThan    ConditionalOperator = "LessThan"
)

func PossibleConditionalOperatorValues() []ConditionalOperator {
	return []ConditionalOperator{
		ConditionalOperatorEqual,
		ConditionalOperatorGreaterThan,
		ConditionalOperatorLessThan,
	}
}

func (c ConditionalOperator) ToPtr() *ConditionalOperator {
	return &c
}

// CriterionType - Specifies the type of threshold criteria
type CriterionType string

const (
	CriterionTypeDynamicThresholdCriterion CriterionType = "DynamicThresholdCriterion"
	CriterionTypeStaticThresholdCriterion  CriterionType = "StaticThresholdCriterion"
)

func PossibleCriterionTypeValues() []CriterionType {
	return []CriterionType{
		CriterionTypeDynamicThresholdCriterion,
		CriterionTypeStaticThresholdCriterion,
	}
}

func (c CriterionType) ToPtr() *CriterionType {
	return &c
}

// DataStatus - The status of VM Insights data from the resource. When reported as `present` the data array will contain information about the data containers to which data for the specified resource is being routed.
type DataStatus string

const (
	DataStatusNotPresent DataStatus = "notPresent"
	DataStatusPresent    DataStatus = "present"
)

func PossibleDataStatusValues() []DataStatus {
	return []DataStatus{
		DataStatusNotPresent,
		DataStatusPresent,
	}
}

func (c DataStatus) ToPtr() *DataStatus {
	return &c
}

// DynamicThresholdOperator - The operator used to compare the metric value against the threshold.
type DynamicThresholdOperator string

const (
	DynamicThresholdOperatorGreaterOrLessThan DynamicThresholdOperator = "GreaterOrLessThan"
	DynamicThresholdOperatorGreaterThan       DynamicThresholdOperator = "GreaterThan"
	DynamicThresholdOperatorLessThan          DynamicThresholdOperator = "LessThan"
)

func PossibleDynamicThresholdOperatorValues() []DynamicThresholdOperator {
	return []DynamicThresholdOperator{
		DynamicThresholdOperatorGreaterOrLessThan,
		DynamicThresholdOperatorGreaterThan,
		DynamicThresholdOperatorLessThan,
	}
}

func (c DynamicThresholdOperator) ToPtr() *DynamicThresholdOperator {
	return &c
}

// DynamicThresholdSensitivity - The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
type DynamicThresholdSensitivity string

const (
	DynamicThresholdSensitivityHigh   DynamicThresholdSensitivity = "High"
	DynamicThresholdSensitivityLow    DynamicThresholdSensitivity = "Low"
	DynamicThresholdSensitivityMedium DynamicThresholdSensitivity = "Medium"
)

func PossibleDynamicThresholdSensitivityValues() []DynamicThresholdSensitivity {
	return []DynamicThresholdSensitivity{
		DynamicThresholdSensitivityHigh,
		DynamicThresholdSensitivityLow,
		DynamicThresholdSensitivityMedium,
	}
}

func (c DynamicThresholdSensitivity) ToPtr() *DynamicThresholdSensitivity {
	return &c
}

// Enabled - The flag which indicates whether the Log Search rule is enabled. Value should be true or false
type Enabled string

const (
	EnabledFalse Enabled = "false"
	EnabledTrue  Enabled = "true"
)

func PossibleEnabledValues() []Enabled {
	return []Enabled{
		EnabledFalse,
		EnabledTrue,
	}
}

func (c Enabled) ToPtr() *Enabled {
	return &c
}

// EventLevel - the event level
type EventLevel string

const (
	EventLevelCritical      EventLevel = "Critical"
	EventLevelError         EventLevel = "Error"
	EventLevelWarning       EventLevel = "Warning"
	EventLevelInformational EventLevel = "Informational"
	EventLevelVerbose       EventLevel = "Verbose"
)

func PossibleEventLevelValues() []EventLevel {
	return []EventLevel{
		EventLevelCritical,
		EventLevelError,
		EventLevelWarning,
		EventLevelInformational,
		EventLevelVerbose,
	}
}

func (c EventLevel) ToPtr() *EventLevel {
	return &c
}

// MetricStatisticType - the metric statistic type. How the metrics from multiple instances are combined.
type MetricStatisticType string

const (
	MetricStatisticTypeAverage MetricStatisticType = "Average"
	MetricStatisticTypeMin     MetricStatisticType = "Min"
	MetricStatisticTypeMax     MetricStatisticType = "Max"
	MetricStatisticTypeSum     MetricStatisticType = "Sum"
)

func PossibleMetricStatisticTypeValues() []MetricStatisticType {
	return []MetricStatisticType{
		MetricStatisticTypeAverage,
		MetricStatisticTypeMin,
		MetricStatisticTypeMax,
		MetricStatisticTypeSum,
	}
}

func (c MetricStatisticType) ToPtr() *MetricStatisticType {
	return &c
}

// MetricTriggerType - Metric Trigger Evaluation Type
type MetricTriggerType string

const (
	MetricTriggerTypeConsecutive MetricTriggerType = "Consecutive"
	MetricTriggerTypeTotal       MetricTriggerType = "Total"
)

func PossibleMetricTriggerTypeValues() []MetricTriggerType {
	return []MetricTriggerType{
		MetricTriggerTypeConsecutive,
		MetricTriggerTypeTotal,
	}
}

func (c MetricTriggerType) ToPtr() *MetricTriggerType {
	return &c
}

// Odatatype - specifies the type of the alert criteria.
type Odatatype string

const (
	OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria Odatatype = "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria"
	OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria   Odatatype = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
	OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria    Odatatype = "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria"
)

func PossibleOdatatypeValues() []Odatatype {
	return []Odatatype{
		OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria,
		OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria,
		OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria,
	}
}

func (c Odatatype) ToPtr() *Odatatype {
	return &c
}

// OnboardingStatus - The onboarding status for the resource. Note that, a higher level scope, e.g., resource group or subscription, is considered onboarded if at least one resource under it is onboarded.
type OnboardingStatus string

const (
	OnboardingStatusNotOnboarded OnboardingStatus = "notOnboarded"
	OnboardingStatusOnboarded    OnboardingStatus = "onboarded"
	OnboardingStatusUnknown      OnboardingStatus = "unknown"
)

func PossibleOnboardingStatusValues() []OnboardingStatus {
	return []OnboardingStatus{
		OnboardingStatusNotOnboarded,
		OnboardingStatusOnboarded,
		OnboardingStatusUnknown,
	}
}

func (c OnboardingStatus) ToPtr() *OnboardingStatus {
	return &c
}

// Operator - the criteria operator.
type Operator string

const (
	OperatorEquals             Operator = "Equals"
	OperatorGreaterThan        Operator = "GreaterThan"
	OperatorGreaterThanOrEqual Operator = "GreaterThanOrEqual"
	OperatorInclude            Operator = "Include"
	OperatorLessThan           Operator = "LessThan"
	OperatorLessThanOrEqual    Operator = "LessThanOrEqual"
	OperatorNotEquals          Operator = "NotEquals"
)

func PossibleOperatorValues() []Operator {
	return []Operator{
		OperatorEquals,
		OperatorGreaterThan,
		OperatorGreaterThanOrEqual,
		OperatorInclude,
		OperatorLessThan,
		OperatorLessThanOrEqual,
		OperatorNotEquals,
	}
}

func (c Operator) ToPtr() *Operator {
	return &c
}

// ProvisioningState - Provisioning state of the scheduled query rule
type ProvisioningState string

const (
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateDeploying ProvisioningState = "Deploying"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateDeploying,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// QueryType - Set value to 'ResultAccount'
type QueryType string

const (
	QueryTypeResultCount QueryType = "ResultCount"
)

func PossibleQueryTypeValues() []QueryType {
	return []QueryType{
		QueryTypeResultCount,
	}
}

func (c QueryType) ToPtr() *QueryType {
	return &c
}

// ReceiverStatus - Indicates the status of the receiver. Receivers that are not Enabled will not receive any communications.
type ReceiverStatus string

const (
	ReceiverStatusNotSpecified ReceiverStatus = "NotSpecified"
	ReceiverStatusEnabled      ReceiverStatus = "Enabled"
	ReceiverStatusDisabled     ReceiverStatus = "Disabled"
)

func PossibleReceiverStatusValues() []ReceiverStatus {
	return []ReceiverStatus{
		ReceiverStatusNotSpecified,
		ReceiverStatusEnabled,
		ReceiverStatusDisabled,
	}
}

func (c ReceiverStatus) ToPtr() *ReceiverStatus {
	return &c
}

// RecurrenceFrequency - the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
type RecurrenceFrequency string

const (
	RecurrenceFrequencyNone   RecurrenceFrequency = "None"
	RecurrenceFrequencySecond RecurrenceFrequency = "Second"
	RecurrenceFrequencyMinute RecurrenceFrequency = "Minute"
	RecurrenceFrequencyHour   RecurrenceFrequency = "Hour"
	RecurrenceFrequencyDay    RecurrenceFrequency = "Day"
	RecurrenceFrequencyWeek   RecurrenceFrequency = "Week"
	RecurrenceFrequencyMonth  RecurrenceFrequency = "Month"
	RecurrenceFrequencyYear   RecurrenceFrequency = "Year"
)

func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{
		RecurrenceFrequencyNone,
		RecurrenceFrequencySecond,
		RecurrenceFrequencyMinute,
		RecurrenceFrequencyHour,
		RecurrenceFrequencyDay,
		RecurrenceFrequencyWeek,
		RecurrenceFrequencyMonth,
		RecurrenceFrequencyYear,
	}
}

func (c RecurrenceFrequency) ToPtr() *RecurrenceFrequency {
	return &c
}

type ResultType string

const (
	ResultTypeData     ResultType = "Data"
	ResultTypeMetadata ResultType = "Metadata"
)

func PossibleResultTypeValues() []ResultType {
	return []ResultType{
		ResultTypeData,
		ResultTypeMetadata,
	}
}

func (c ResultType) ToPtr() *ResultType {
	return &c
}

// ScaleDirection - the scale direction. Whether the scaling action increases or decreases the number of instances.
type ScaleDirection string

const (
	ScaleDirectionNone     ScaleDirection = "None"
	ScaleDirectionIncrease ScaleDirection = "Increase"
	ScaleDirectionDecrease ScaleDirection = "Decrease"
)

func PossibleScaleDirectionValues() []ScaleDirection {
	return []ScaleDirection{
		ScaleDirectionNone,
		ScaleDirectionIncrease,
		ScaleDirectionDecrease,
	}
}

func (c ScaleDirection) ToPtr() *ScaleDirection {
	return &c
}

// ScaleRuleMetricDimensionOperationType - the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
type ScaleRuleMetricDimensionOperationType string

const (
	ScaleRuleMetricDimensionOperationTypeEquals    ScaleRuleMetricDimensionOperationType = "Equals"
	ScaleRuleMetricDimensionOperationTypeNotEquals ScaleRuleMetricDimensionOperationType = "NotEquals"
)

func PossibleScaleRuleMetricDimensionOperationTypeValues() []ScaleRuleMetricDimensionOperationType {
	return []ScaleRuleMetricDimensionOperationType{
		ScaleRuleMetricDimensionOperationTypeEquals,
		ScaleRuleMetricDimensionOperationTypeNotEquals,
	}
}

func (c ScaleRuleMetricDimensionOperationType) ToPtr() *ScaleRuleMetricDimensionOperationType {
	return &c
}

// ScaleType - the type of action that should occur when the scale rule fires.
type ScaleType string

const (
	ScaleTypeChangeCount        ScaleType = "ChangeCount"
	ScaleTypePercentChangeCount ScaleType = "PercentChangeCount"
	ScaleTypeExactCount         ScaleType = "ExactCount"
)

func PossibleScaleTypeValues() []ScaleType {
	return []ScaleType{
		ScaleTypeChangeCount,
		ScaleTypePercentChangeCount,
		ScaleTypeExactCount,
	}
}

func (c ScaleType) ToPtr() *ScaleType {
	return &c
}

// Sensitivity - the sensitivity of the baseline.
type Sensitivity string

const (
	SensitivityLow    Sensitivity = "Low"
	SensitivityMedium Sensitivity = "Medium"
	SensitivityHigh   Sensitivity = "High"
)

func PossibleSensitivityValues() []Sensitivity {
	return []Sensitivity{
		SensitivityLow,
		SensitivityMedium,
		SensitivityHigh,
	}
}

func (c Sensitivity) ToPtr() *Sensitivity {
	return &c
}

// TimeAggregationOperator - Aggregation operators allowed in a rule.
type TimeAggregationOperator string

const (
	TimeAggregationOperatorAverage TimeAggregationOperator = "Average"
	TimeAggregationOperatorMinimum TimeAggregationOperator = "Minimum"
	TimeAggregationOperatorMaximum TimeAggregationOperator = "Maximum"
	TimeAggregationOperatorTotal   TimeAggregationOperator = "Total"
	TimeAggregationOperatorLast    TimeAggregationOperator = "Last"
)

func PossibleTimeAggregationOperatorValues() []TimeAggregationOperator {
	return []TimeAggregationOperator{
		TimeAggregationOperatorAverage,
		TimeAggregationOperatorMinimum,
		TimeAggregationOperatorMaximum,
		TimeAggregationOperatorTotal,
		TimeAggregationOperatorLast,
	}
}

func (c TimeAggregationOperator) ToPtr() *TimeAggregationOperator {
	return &c
}

// TimeAggregationType - time aggregation type. How the data that is collected should be combined over time. The default value is Average.
type TimeAggregationType string

const (
	TimeAggregationTypeAverage TimeAggregationType = "Average"
	TimeAggregationTypeMinimum TimeAggregationType = "Minimum"
	TimeAggregationTypeMaximum TimeAggregationType = "Maximum"
	TimeAggregationTypeTotal   TimeAggregationType = "Total"
	TimeAggregationTypeCount   TimeAggregationType = "Count"
	TimeAggregationTypeLast    TimeAggregationType = "Last"
)

func PossibleTimeAggregationTypeValues() []TimeAggregationType {
	return []TimeAggregationType{
		TimeAggregationTypeAverage,
		TimeAggregationTypeMinimum,
		TimeAggregationTypeMaximum,
		TimeAggregationTypeTotal,
		TimeAggregationTypeCount,
		TimeAggregationTypeLast,
	}
}

func (c TimeAggregationType) ToPtr() *TimeAggregationType {
	return &c
}

// Unit - the unit of the metric.
type Unit string

const (
	UnitCount          Unit = "Count"
	UnitBytes          Unit = "Bytes"
	UnitSeconds        Unit = "Seconds"
	UnitCountPerSecond Unit = "CountPerSecond"
	UnitBytesPerSecond Unit = "BytesPerSecond"
	UnitPercent        Unit = "Percent"
	UnitMilliSeconds   Unit = "MilliSeconds"
	UnitByteSeconds    Unit = "ByteSeconds"
	UnitUnspecified    Unit = "Unspecified"
	UnitCores          Unit = "Cores"
	UnitMilliCores     Unit = "MilliCores"
	UnitNanoCores      Unit = "NanoCores"
	UnitBitsPerSecond  Unit = "BitsPerSecond"
)

func PossibleUnitValues() []Unit {
	return []Unit{
		UnitCount,
		UnitBytes,
		UnitSeconds,
		UnitCountPerSecond,
		UnitBytesPerSecond,
		UnitPercent,
		UnitMilliSeconds,
		UnitByteSeconds,
		UnitUnspecified,
		UnitCores,
		UnitMilliCores,
		UnitNanoCores,
		UnitBitsPerSecond,
	}
}

func (c Unit) ToPtr() *Unit {
	return &c
}
