// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// EventCategoriesOperations contains the methods for the EventCategories group.
type EventCategoriesOperations interface {
	// List - Get the list of available event categories supported in the Activity Logs Service.<br>The current list includes the following: Administrative, Security, ServiceHealth, Alert, Recommendation, Policy.
	List(ctx context.Context) (*EventCategoryCollectionResponse, error)
}

// EventCategoriesClient implements the EventCategoriesOperations interface.
// Don't use this type directly, use NewEventCategoriesClient() instead.
type EventCategoriesClient struct {
	*Client
}

// NewEventCategoriesClient creates a new instance of EventCategoriesClient with the specified values.
func NewEventCategoriesClient(c *Client) EventCategoriesOperations {
	return &EventCategoriesClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *EventCategoriesClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// List - Get the list of available event categories supported in the Activity Logs Service.<br>The current list includes the following: Administrative, Security, ServiceHealth, Alert, Recommendation, Policy.
func (client *EventCategoriesClient) List(ctx context.Context) (*EventCategoryCollectionResponse, error) {
	req, err := client.ListCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListHandleError(resp)
	}
	result, err := client.ListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListCreateRequest creates the List request.
func (client *EventCategoriesClient) ListCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/providers/microsoft.insights/eventcategories"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *EventCategoriesClient) ListHandleResponse(resp *azcore.Response) (*EventCategoryCollectionResponse, error) {
	result := EventCategoryCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EventCategoryCollection)
}

// ListHandleError handles the List error response.
func (client *EventCategoriesClient) ListHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
