// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// LogProfilesOperations contains the methods for the LogProfiles group.
type LogProfilesOperations interface {
	// CreateOrUpdate - Create or update a log profile in Azure Monitoring REST API.
	CreateOrUpdate(ctx context.Context, logProfileName string, parameters LogProfileResource) (*LogProfileResourceResponse, error)
	// Delete - Deletes the log profile.
	Delete(ctx context.Context, logProfileName string) (*http.Response, error)
	// Get - Gets the log profile.
	Get(ctx context.Context, logProfileName string) (*LogProfileResourceResponse, error)
	// List - List the log profiles.
	List(ctx context.Context) (*LogProfileCollectionResponse, error)
	// Update - Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.
	Update(ctx context.Context, logProfileName string, logProfilesResource LogProfileResourcePatch) (*LogProfileResourceResponse, error)
}

// LogProfilesClient implements the LogProfilesOperations interface.
// Don't use this type directly, use NewLogProfilesClient() instead.
type LogProfilesClient struct {
	*Client
	subscriptionID string
}

// NewLogProfilesClient creates a new instance of LogProfilesClient with the specified values.
func NewLogProfilesClient(c *Client, subscriptionID string) LogProfilesOperations {
	return &LogProfilesClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *LogProfilesClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdate - Create or update a log profile in Azure Monitoring REST API.
func (client *LogProfilesClient) CreateOrUpdate(ctx context.Context, logProfileName string, parameters LogProfileResource) (*LogProfileResourceResponse, error) {
	req, err := client.CreateOrUpdateCreateRequest(ctx, logProfileName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CreateOrUpdateHandleError(resp)
	}
	result, err := client.CreateOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LogProfilesClient) CreateOrUpdateCreateRequest(ctx context.Context, logProfileName string, parameters LogProfileResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2016-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// CreateOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *LogProfilesClient) CreateOrUpdateHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// CreateOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *LogProfilesClient) CreateOrUpdateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Delete - Deletes the log profile.
func (client *LogProfilesClient) Delete(ctx context.Context, logProfileName string) (*http.Response, error) {
	req, err := client.DeleteCreateRequest(ctx, logProfileName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.DeleteHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteCreateRequest creates the Delete request.
func (client *LogProfilesClient) DeleteCreateRequest(ctx context.Context, logProfileName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2016-03-01")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// DeleteHandleError handles the Delete error response.
func (client *LogProfilesClient) DeleteHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Get - Gets the log profile.
func (client *LogProfilesClient) Get(ctx context.Context, logProfileName string) (*LogProfileResourceResponse, error) {
	req, err := client.GetCreateRequest(ctx, logProfileName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *LogProfilesClient) GetCreateRequest(ctx context.Context, logProfileName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2016-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *LogProfilesClient) GetHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// GetHandleError handles the Get error response.
func (client *LogProfilesClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - List the log profiles.
func (client *LogProfilesClient) List(ctx context.Context) (*LogProfileCollectionResponse, error) {
	req, err := client.ListCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListHandleError(resp)
	}
	result, err := client.ListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListCreateRequest creates the List request.
func (client *LogProfilesClient) ListCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2016-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *LogProfilesClient) ListHandleResponse(resp *azcore.Response) (*LogProfileCollectionResponse, error) {
	result := LogProfileCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileCollection)
}

// ListHandleError handles the List error response.
func (client *LogProfilesClient) ListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Update - Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.
func (client *LogProfilesClient) Update(ctx context.Context, logProfileName string, logProfilesResource LogProfileResourcePatch) (*LogProfileResourceResponse, error) {
	req, err := client.UpdateCreateRequest(ctx, logProfileName, logProfilesResource)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.UpdateHandleError(resp)
	}
	result, err := client.UpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateCreateRequest creates the Update request.
func (client *LogProfilesClient) UpdateCreateRequest(ctx context.Context, logProfileName string, logProfilesResource LogProfileResourcePatch) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{logProfileName}", url.PathEscape(logProfileName))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2016-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(logProfilesResource)
}

// UpdateHandleResponse handles the Update response.
func (client *LogProfilesClient) UpdateHandleResponse(resp *azcore.Response) (*LogProfileResourceResponse, error) {
	result := LogProfileResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.LogProfileResource)
}

// UpdateHandleError handles the Update error response.
func (client *LogProfilesClient) UpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
