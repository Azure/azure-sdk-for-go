// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// MetricAlertsOperations contains the methods for the MetricAlerts group.
type MetricAlertsOperations interface {
	// CreateOrUpdate - Create or update an metric alert definition.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResource) (*MetricAlertResourceResponse, error)
	// Delete - Delete an alert rule definition.
	Delete(ctx context.Context, resourceGroupName string, ruleName string) (*http.Response, error)
	// Get - Retrieve an alert rule definition.
	Get(ctx context.Context, resourceGroupName string, ruleName string) (*MetricAlertResourceResponse, error)
	// ListByResourceGroup - Retrieve alert rule definitions in a resource group.
	ListByResourceGroup(ctx context.Context, resourceGroupName string) (*MetricAlertResourceCollectionResponse, error)
	// ListBySubscription - Retrieve alert rule definitions in a subscription.
	ListBySubscription(ctx context.Context) (*MetricAlertResourceCollectionResponse, error)
	// Update - Update an metric alert definition.
	Update(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResourcePatch) (*MetricAlertResourceResponse, error)
}

// MetricAlertsClient implements the MetricAlertsOperations interface.
// Don't use this type directly, use NewMetricAlertsClient() instead.
type MetricAlertsClient struct {
	*Client
	subscriptionID string
}

// NewMetricAlertsClient creates a new instance of MetricAlertsClient with the specified values.
func NewMetricAlertsClient(c *Client, subscriptionID string) MetricAlertsOperations {
	return &MetricAlertsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *MetricAlertsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdate - Create or update an metric alert definition.
func (client *MetricAlertsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResource) (*MetricAlertResourceResponse, error) {
	req, err := client.CreateOrUpdateCreateRequest(ctx, resourceGroupName, ruleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.CreateOrUpdateHandleError(resp)
	}
	result, err := client.CreateOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MetricAlertsClient) CreateOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// CreateOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *MetricAlertsClient) CreateOrUpdateHandleResponse(resp *azcore.Response) (*MetricAlertResourceResponse, error) {
	result := MetricAlertResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertResource)
}

// CreateOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *MetricAlertsClient) CreateOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Delete an alert rule definition.
func (client *MetricAlertsClient) Delete(ctx context.Context, resourceGroupName string, ruleName string) (*http.Response, error) {
	req, err := client.DeleteCreateRequest(ctx, resourceGroupName, ruleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.DeleteHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteCreateRequest creates the Delete request.
func (client *MetricAlertsClient) DeleteCreateRequest(ctx context.Context, resourceGroupName string, ruleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// DeleteHandleError handles the Delete error response.
func (client *MetricAlertsClient) DeleteHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Get - Retrieve an alert rule definition.
func (client *MetricAlertsClient) Get(ctx context.Context, resourceGroupName string, ruleName string) (*MetricAlertResourceResponse, error) {
	req, err := client.GetCreateRequest(ctx, resourceGroupName, ruleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *MetricAlertsClient) GetCreateRequest(ctx context.Context, resourceGroupName string, ruleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *MetricAlertsClient) GetHandleResponse(resp *azcore.Response) (*MetricAlertResourceResponse, error) {
	result := MetricAlertResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertResource)
}

// GetHandleError handles the Get error response.
func (client *MetricAlertsClient) GetHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByResourceGroup - Retrieve alert rule definitions in a resource group.
func (client *MetricAlertsClient) ListByResourceGroup(ctx context.Context, resourceGroupName string) (*MetricAlertResourceCollectionResponse, error) {
	req, err := client.ListByResourceGroupCreateRequest(ctx, resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListByResourceGroupHandleError(resp)
	}
	result, err := client.ListByResourceGroupHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *MetricAlertsClient) ListByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *MetricAlertsClient) ListByResourceGroupHandleResponse(resp *azcore.Response) (*MetricAlertResourceCollectionResponse, error) {
	result := MetricAlertResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertResourceCollection)
}

// ListByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *MetricAlertsClient) ListByResourceGroupHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListBySubscription - Retrieve alert rule definitions in a subscription.
func (client *MetricAlertsClient) ListBySubscription(ctx context.Context) (*MetricAlertResourceCollectionResponse, error) {
	req, err := client.ListBySubscriptionCreateRequest(ctx)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListBySubscriptionHandleError(resp)
	}
	result, err := client.ListBySubscriptionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *MetricAlertsClient) ListBySubscriptionCreateRequest(ctx context.Context) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *MetricAlertsClient) ListBySubscriptionHandleResponse(resp *azcore.Response) (*MetricAlertResourceCollectionResponse, error) {
	result := MetricAlertResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertResourceCollection)
}

// ListBySubscriptionHandleError handles the ListBySubscription error response.
func (client *MetricAlertsClient) ListBySubscriptionHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Update an metric alert definition.
func (client *MetricAlertsClient) Update(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResourcePatch) (*MetricAlertResourceResponse, error) {
	req, err := client.UpdateCreateRequest(ctx, resourceGroupName, ruleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.UpdateHandleError(resp)
	}
	result, err := client.UpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UpdateCreateRequest creates the Update request.
func (client *MetricAlertsClient) UpdateCreateRequest(ctx context.Context, resourceGroupName string, ruleName string, parameters MetricAlertResourcePatch) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2018-03-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// UpdateHandleResponse handles the Update response.
func (client *MetricAlertsClient) UpdateHandleResponse(resp *azcore.Response) (*MetricAlertResourceResponse, error) {
	result := MetricAlertResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricAlertResource)
}

// UpdateHandleError handles the Update error response.
func (client *MetricAlertsClient) UpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
