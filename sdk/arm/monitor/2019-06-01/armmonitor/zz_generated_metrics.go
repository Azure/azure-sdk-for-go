// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strconv"
	"strings"
)

// MetricsOperations contains the methods for the Metrics group.
type MetricsOperations interface {
	// List - **Lists the metric values for a resource**.
	List(ctx context.Context, resourceUri string, options *MetricsListOptions) (*ResponseResponse, error)
}

// MetricsClient implements the MetricsOperations interface.
// Don't use this type directly, use NewMetricsClient() instead.
type MetricsClient struct {
	*Client
}

// NewMetricsClient creates a new instance of MetricsClient with the specified values.
func NewMetricsClient(c *Client) MetricsOperations {
	return &MetricsClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *MetricsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// List - **Lists the metric values for a resource**.
func (client *MetricsClient) List(ctx context.Context, resourceUri string, options *MetricsListOptions) (*ResponseResponse, error) {
	req, err := client.ListCreateRequest(ctx, resourceUri, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListHandleError(resp)
	}
	result, err := client.ListHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListCreateRequest creates the List request.
func (client *MetricsClient) ListCreateRequest(ctx context.Context, resourceUri string, options *MetricsListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/metrics"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if options != nil && options.Timespan != nil {
		query.Set("timespan", *options.Timespan)
	}
	if options != nil && options.Interval != nil {
		query.Set("interval", *options.Interval)
	}
	if options != nil && options.Metricnames != nil {
		query.Set("metricnames", *options.Metricnames)
	}
	if options != nil && options.Aggregation != nil {
		query.Set("aggregation", *options.Aggregation)
	}
	if options != nil && options.Top != nil {
		query.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Orderby != nil {
		query.Set("orderby", *options.Orderby)
	}
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.ResultType != nil {
		query.Set("resultType", string(*options.ResultType))
	}
	query.Set("api-version", "2018-01-01")
	if options != nil && options.Metricnamespace != nil {
		query.Set("metricnamespace", *options.Metricnamespace)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *MetricsClient) ListHandleResponse(resp *azcore.Response) (*ResponseResponse, error) {
	result := ResponseResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Response)
}

// ListHandleError handles the List error response.
func (client *MetricsClient) ListHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
