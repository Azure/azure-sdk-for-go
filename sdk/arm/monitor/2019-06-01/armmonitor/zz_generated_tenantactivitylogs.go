// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// TenantActivityLogsOperations contains the methods for the TenantActivityLogs group.
type TenantActivityLogsOperations interface {
	// List - Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.
	List(tenantActivityLogsListOptions *TenantActivityLogsListOptions) EventDataCollectionPager
}

// TenantActivityLogsClient implements the TenantActivityLogsOperations interface.
// Don't use this type directly, use NewTenantActivityLogsClient() instead.
type TenantActivityLogsClient struct {
	*Client
}

// NewTenantActivityLogsClient creates a new instance of TenantActivityLogsClient with the specified values.
func NewTenantActivityLogsClient(c *Client) TenantActivityLogsOperations {
	return &TenantActivityLogsClient{Client: c}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *TenantActivityLogsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// List - Gets the Activity Logs for the Tenant.<br>Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).<br>One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.
func (client *TenantActivityLogsClient) List(tenantActivityLogsListOptions *TenantActivityLogsListOptions) EventDataCollectionPager {
	return &eventDataCollectionPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, tenantActivityLogsListOptions)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *EventDataCollectionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.EventDataCollection.NextLink)
		},
	}
}

// ListCreateRequest creates the List request.
func (client *TenantActivityLogsClient) ListCreateRequest(ctx context.Context, tenantActivityLogsListOptions *TenantActivityLogsListOptions) (*azcore.Request, error) {
	urlPath := "/providers/microsoft.insights/eventtypes/management/values"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2015-04-01")
	if tenantActivityLogsListOptions != nil && tenantActivityLogsListOptions.Filter != nil {
		query.Set("$filter", *tenantActivityLogsListOptions.Filter)
	}
	if tenantActivityLogsListOptions != nil && tenantActivityLogsListOptions.SelectParameter != nil {
		query.Set("$select", *tenantActivityLogsListOptions.SelectParameter)
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *TenantActivityLogsClient) ListHandleResponse(resp *azcore.Response) (*EventDataCollectionResponse, error) {
	result := EventDataCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EventDataCollection)
}

// ListHandleError handles the List error response.
func (client *TenantActivityLogsClient) ListHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
