// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ApplicationGatewaysOperations contains the methods for the ApplicationGateways group.
type ApplicationGatewaysOperations interface {
	// BeginBackendHealth - Gets the backend health of the specified application gateway in a resource group.
	BeginBackendHealth(ctx context.Context, resourceGroupName string, applicationGatewayName string, applicationGatewaysBackendHealthOptions *ApplicationGatewaysBackendHealthOptions) (*ApplicationGatewayBackendHealthPollerResponse, error)
	// ResumeBackendHealth - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeBackendHealth(token string) (ApplicationGatewayBackendHealthPoller, error)
	// BeginBackendHealthOnDemand - Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
	BeginBackendHealthOnDemand(ctx context.Context, resourceGroupName string, applicationGatewayName string, probeRequest ApplicationGatewayOnDemandProbe, applicationGatewaysBackendHealthOnDemandOptions *ApplicationGatewaysBackendHealthOnDemandOptions) (*ApplicationGatewayBackendHealthOnDemandPollerResponse, error)
	// ResumeBackendHealthOnDemand - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeBackendHealthOnDemand(token string) (ApplicationGatewayBackendHealthOnDemandPoller, error)
	// BeginCreateOrUpdate - Creates or updates the specified application gateway.
	BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, applicationGatewayName string, parameters ApplicationGateway) (*ApplicationGatewayPollerResponse, error)
	// ResumeCreateOrUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdate(token string) (ApplicationGatewayPoller, error)
	// BeginDelete - Deletes the specified application gateway.
	BeginDelete(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// Get - Gets the specified application gateway.
	Get(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*ApplicationGatewayResponse, error)
	// GetSslPredefinedPolicy - Gets Ssl predefined policy with the specified policy name.
	GetSslPredefinedPolicy(ctx context.Context, predefinedPolicyName string) (*ApplicationGatewaySslPredefinedPolicyResponse, error)
	// List - Lists all application gateways in a resource group.
	List(resourceGroupName string) (ApplicationGatewayListResultPager, error)
	// ListAll - Gets all the application gateways in a subscription.
	ListAll() (ApplicationGatewayListResultPager, error)
	// ListAvailableRequestHeaders - Lists all available request headers.
	ListAvailableRequestHeaders(ctx context.Context) (*StringArrayResponse, error)
	// ListAvailableResponseHeaders - Lists all available response headers.
	ListAvailableResponseHeaders(ctx context.Context) (*StringArrayResponse, error)
	// ListAvailableServerVariables - Lists all available server variables.
	ListAvailableServerVariables(ctx context.Context) (*StringArrayResponse, error)
	// ListAvailableSslOptions - Lists available Ssl options for configuring Ssl policy.
	ListAvailableSslOptions(ctx context.Context) (*ApplicationGatewayAvailableSslOptionsResponse, error)
	// ListAvailableSslPredefinedPolicies - Lists all SSL predefined policies for configuring Ssl policy.
	ListAvailableSslPredefinedPolicies() (ApplicationGatewayAvailableSslPredefinedPoliciesPager, error)
	// ListAvailableWafRuleSets - Lists all available web application firewall rule sets.
	ListAvailableWafRuleSets(ctx context.Context) (*ApplicationGatewayAvailableWafRuleSetsResultResponse, error)
	// BeginStart - Starts the specified application gateway.
	BeginStart(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error)
	// ResumeStart - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStart(token string) (HTTPPoller, error)
	// BeginStop - Stops the specified application gateway in a resource group.
	BeginStop(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error)
	// ResumeStop - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStop(token string) (HTTPPoller, error)
	// UpdateTags - Updates the specified application gateway tags.
	UpdateTags(ctx context.Context, resourceGroupName string, applicationGatewayName string, parameters TagsObject) (*ApplicationGatewayResponse, error)
}

// applicationGatewaysOperations implements the ApplicationGatewaysOperations interface.
type applicationGatewaysOperations struct {
	*Client
	subscriptionID string
}

// BackendHealth - Gets the backend health of the specified application gateway in a resource group.
func (client *applicationGatewaysOperations) BeginBackendHealth(ctx context.Context, resourceGroupName string, applicationGatewayName string, applicationGatewaysBackendHealthOptions *ApplicationGatewaysBackendHealthOptions) (*ApplicationGatewayBackendHealthPollerResponse, error) {
	req, err := client.backendHealthCreateRequest(resourceGroupName, applicationGatewayName, applicationGatewaysBackendHealthOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.backendHealthHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.BackendHealth", "location", resp, client.backendHealthHandleError)
	if err != nil {
		return nil, err
	}
	poller := &applicationGatewayBackendHealthPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayBackendHealthResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeBackendHealth(token string) (ApplicationGatewayBackendHealthPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.BackendHealth", token, client.backendHealthHandleError)
	if err != nil {
		return nil, err
	}
	return &applicationGatewayBackendHealthPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// backendHealthCreateRequest creates the BackendHealth request.
func (client *applicationGatewaysOperations) backendHealthCreateRequest(resourceGroupName string, applicationGatewayName string, applicationGatewaysBackendHealthOptions *ApplicationGatewaysBackendHealthOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	if applicationGatewaysBackendHealthOptions != nil && applicationGatewaysBackendHealthOptions.Expand != nil {
		query.Set("$expand", *applicationGatewaysBackendHealthOptions.Expand)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// backendHealthHandleResponse handles the BackendHealth response.
func (client *applicationGatewaysOperations) backendHealthHandleResponse(resp *azcore.Response) (*ApplicationGatewayBackendHealthPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.backendHealthHandleError(resp)
	}
	return &ApplicationGatewayBackendHealthPollerResponse{RawResponse: resp.Response}, nil
}

// backendHealthHandleError handles the BackendHealth error response.
func (client *applicationGatewaysOperations) backendHealthHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// BackendHealthOnDemand - Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
func (client *applicationGatewaysOperations) BeginBackendHealthOnDemand(ctx context.Context, resourceGroupName string, applicationGatewayName string, probeRequest ApplicationGatewayOnDemandProbe, applicationGatewaysBackendHealthOnDemandOptions *ApplicationGatewaysBackendHealthOnDemandOptions) (*ApplicationGatewayBackendHealthOnDemandPollerResponse, error) {
	req, err := client.backendHealthOnDemandCreateRequest(resourceGroupName, applicationGatewayName, probeRequest, applicationGatewaysBackendHealthOnDemandOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.backendHealthOnDemandHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.BackendHealthOnDemand", "location", resp, client.backendHealthOnDemandHandleError)
	if err != nil {
		return nil, err
	}
	poller := &applicationGatewayBackendHealthOnDemandPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayBackendHealthOnDemandResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeBackendHealthOnDemand(token string) (ApplicationGatewayBackendHealthOnDemandPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.BackendHealthOnDemand", token, client.backendHealthOnDemandHandleError)
	if err != nil {
		return nil, err
	}
	return &applicationGatewayBackendHealthOnDemandPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// backendHealthOnDemandCreateRequest creates the BackendHealthOnDemand request.
func (client *applicationGatewaysOperations) backendHealthOnDemandCreateRequest(resourceGroupName string, applicationGatewayName string, probeRequest ApplicationGatewayOnDemandProbe, applicationGatewaysBackendHealthOnDemandOptions *ApplicationGatewaysBackendHealthOnDemandOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/getBackendHealthOnDemand"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	if applicationGatewaysBackendHealthOnDemandOptions != nil && applicationGatewaysBackendHealthOnDemandOptions.Expand != nil {
		query.Set("$expand", *applicationGatewaysBackendHealthOnDemandOptions.Expand)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(probeRequest)
}

// backendHealthOnDemandHandleResponse handles the BackendHealthOnDemand response.
func (client *applicationGatewaysOperations) backendHealthOnDemandHandleResponse(resp *azcore.Response) (*ApplicationGatewayBackendHealthOnDemandPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.backendHealthOnDemandHandleError(resp)
	}
	return &ApplicationGatewayBackendHealthOnDemandPollerResponse{RawResponse: resp.Response}, nil
}

// backendHealthOnDemandHandleError handles the BackendHealthOnDemand error response.
func (client *applicationGatewaysOperations) backendHealthOnDemandHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdate - Creates or updates the specified application gateway.
func (client *applicationGatewaysOperations) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, applicationGatewayName string, parameters ApplicationGateway) (*ApplicationGatewayPollerResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, applicationGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.CreateOrUpdate", "azure-async-operation", resp, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &applicationGatewayPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeCreateOrUpdate(token string) (ApplicationGatewayPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.CreateOrUpdate", token, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &applicationGatewayPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *applicationGatewaysOperations) createOrUpdateCreateRequest(resourceGroupName string, applicationGatewayName string, parameters ApplicationGateway) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *applicationGatewaysOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ApplicationGatewayPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNoContent) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return &ApplicationGatewayPollerResponse{RawResponse: resp.Response}, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *applicationGatewaysOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the specified application gateway.
func (client *applicationGatewaysOperations) BeginDelete(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.Delete", "location", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *applicationGatewaysOperations) deleteCreateRequest(resourceGroupName string, applicationGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *applicationGatewaysOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *applicationGatewaysOperations) deleteHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the specified application gateway.
func (client *applicationGatewaysOperations) Get(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*ApplicationGatewayResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *applicationGatewaysOperations) getCreateRequest(resourceGroupName string, applicationGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *applicationGatewaysOperations) getHandleResponse(resp *azcore.Response) (*ApplicationGatewayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ApplicationGatewayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGateway)
}

// getHandleError handles the Get error response.
func (client *applicationGatewaysOperations) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetSslPredefinedPolicy - Gets Ssl predefined policy with the specified policy name.
func (client *applicationGatewaysOperations) GetSslPredefinedPolicy(ctx context.Context, predefinedPolicyName string) (*ApplicationGatewaySslPredefinedPolicyResponse, error) {
	req, err := client.getSslPredefinedPolicyCreateRequest(predefinedPolicyName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getSslPredefinedPolicyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getSslPredefinedPolicyCreateRequest creates the GetSslPredefinedPolicy request.
func (client *applicationGatewaysOperations) getSslPredefinedPolicyCreateRequest(predefinedPolicyName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{predefinedPolicyName}", url.PathEscape(predefinedPolicyName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getSslPredefinedPolicyHandleResponse handles the GetSslPredefinedPolicy response.
func (client *applicationGatewaysOperations) getSslPredefinedPolicyHandleResponse(resp *azcore.Response) (*ApplicationGatewaySslPredefinedPolicyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getSslPredefinedPolicyHandleError(resp)
	}
	result := ApplicationGatewaySslPredefinedPolicyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewaySslPredefinedPolicy)
}

// getSslPredefinedPolicyHandleError handles the GetSslPredefinedPolicy error response.
func (client *applicationGatewaysOperations) getSslPredefinedPolicyHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Lists all application gateways in a resource group.
func (client *applicationGatewaysOperations) List(resourceGroupName string) (ApplicationGatewayListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	return &applicationGatewayListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ApplicationGatewayListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ApplicationGatewayListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ApplicationGatewayListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *applicationGatewaysOperations) listCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *applicationGatewaysOperations) listHandleResponse(resp *azcore.Response) (*ApplicationGatewayListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ApplicationGatewayListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewayListResult)
}

// listHandleError handles the List error response.
func (client *applicationGatewaysOperations) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAll - Gets all the application gateways in a subscription.
func (client *applicationGatewaysOperations) ListAll() (ApplicationGatewayListResultPager, error) {
	req, err := client.listAllCreateRequest()
	if err != nil {
		return nil, err
	}
	return &applicationGatewayListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAllHandleResponse,
		advancer: func(resp *ApplicationGatewayListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ApplicationGatewayListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ApplicationGatewayListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAllCreateRequest creates the ListAll request.
func (client *applicationGatewaysOperations) listAllCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *applicationGatewaysOperations) listAllHandleResponse(resp *azcore.Response) (*ApplicationGatewayListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAllHandleError(resp)
	}
	result := ApplicationGatewayListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewayListResult)
}

// listAllHandleError handles the ListAll error response.
func (client *applicationGatewaysOperations) listAllHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableRequestHeaders - Lists all available request headers.
func (client *applicationGatewaysOperations) ListAvailableRequestHeaders(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.listAvailableRequestHeadersCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableRequestHeadersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAvailableRequestHeadersCreateRequest creates the ListAvailableRequestHeaders request.
func (client *applicationGatewaysOperations) listAvailableRequestHeadersCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableRequestHeadersHandleResponse handles the ListAvailableRequestHeaders response.
func (client *applicationGatewaysOperations) listAvailableRequestHeadersHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableRequestHeadersHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// listAvailableRequestHeadersHandleError handles the ListAvailableRequestHeaders error response.
func (client *applicationGatewaysOperations) listAvailableRequestHeadersHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableResponseHeaders - Lists all available response headers.
func (client *applicationGatewaysOperations) ListAvailableResponseHeaders(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.listAvailableResponseHeadersCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableResponseHeadersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAvailableResponseHeadersCreateRequest creates the ListAvailableResponseHeaders request.
func (client *applicationGatewaysOperations) listAvailableResponseHeadersCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableResponseHeadersHandleResponse handles the ListAvailableResponseHeaders response.
func (client *applicationGatewaysOperations) listAvailableResponseHeadersHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableResponseHeadersHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// listAvailableResponseHeadersHandleError handles the ListAvailableResponseHeaders error response.
func (client *applicationGatewaysOperations) listAvailableResponseHeadersHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableServerVariables - Lists all available server variables.
func (client *applicationGatewaysOperations) ListAvailableServerVariables(ctx context.Context) (*StringArrayResponse, error) {
	req, err := client.listAvailableServerVariablesCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableServerVariablesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAvailableServerVariablesCreateRequest creates the ListAvailableServerVariables request.
func (client *applicationGatewaysOperations) listAvailableServerVariablesCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableServerVariablesHandleResponse handles the ListAvailableServerVariables response.
func (client *applicationGatewaysOperations) listAvailableServerVariablesHandleResponse(resp *azcore.Response) (*StringArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableServerVariablesHandleError(resp)
	}
	result := StringArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StringArray)
}

// listAvailableServerVariablesHandleError handles the ListAvailableServerVariables error response.
func (client *applicationGatewaysOperations) listAvailableServerVariablesHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableSslOptions - Lists available Ssl options for configuring Ssl policy.
func (client *applicationGatewaysOperations) ListAvailableSslOptions(ctx context.Context) (*ApplicationGatewayAvailableSslOptionsResponse, error) {
	req, err := client.listAvailableSslOptionsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableSslOptionsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAvailableSslOptionsCreateRequest creates the ListAvailableSslOptions request.
func (client *applicationGatewaysOperations) listAvailableSslOptionsCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableSslOptionsHandleResponse handles the ListAvailableSslOptions response.
func (client *applicationGatewaysOperations) listAvailableSslOptionsHandleResponse(resp *azcore.Response) (*ApplicationGatewayAvailableSslOptionsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableSslOptionsHandleError(resp)
	}
	result := ApplicationGatewayAvailableSslOptionsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewayAvailableSslOptions)
}

// listAvailableSslOptionsHandleError handles the ListAvailableSslOptions error response.
func (client *applicationGatewaysOperations) listAvailableSslOptionsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableSslPredefinedPolicies - Lists all SSL predefined policies for configuring Ssl policy.
func (client *applicationGatewaysOperations) ListAvailableSslPredefinedPolicies() (ApplicationGatewayAvailableSslPredefinedPoliciesPager, error) {
	req, err := client.listAvailableSslPredefinedPoliciesCreateRequest()
	if err != nil {
		return nil, err
	}
	return &applicationGatewayAvailableSslPredefinedPoliciesPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAvailableSslPredefinedPoliciesHandleResponse,
		advancer: func(resp *ApplicationGatewayAvailableSslPredefinedPoliciesResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ApplicationGatewayAvailableSslPredefinedPolicies.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ApplicationGatewayAvailableSslPredefinedPolicies.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAvailableSslPredefinedPoliciesCreateRequest creates the ListAvailableSslPredefinedPolicies request.
func (client *applicationGatewaysOperations) listAvailableSslPredefinedPoliciesCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableSslPredefinedPoliciesHandleResponse handles the ListAvailableSslPredefinedPolicies response.
func (client *applicationGatewaysOperations) listAvailableSslPredefinedPoliciesHandleResponse(resp *azcore.Response) (*ApplicationGatewayAvailableSslPredefinedPoliciesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableSslPredefinedPoliciesHandleError(resp)
	}
	result := ApplicationGatewayAvailableSslPredefinedPoliciesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewayAvailableSslPredefinedPolicies)
}

// listAvailableSslPredefinedPoliciesHandleError handles the ListAvailableSslPredefinedPolicies error response.
func (client *applicationGatewaysOperations) listAvailableSslPredefinedPoliciesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableWafRuleSets - Lists all available web application firewall rule sets.
func (client *applicationGatewaysOperations) ListAvailableWafRuleSets(ctx context.Context) (*ApplicationGatewayAvailableWafRuleSetsResultResponse, error) {
	req, err := client.listAvailableWafRuleSetsCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableWafRuleSetsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAvailableWafRuleSetsCreateRequest creates the ListAvailableWafRuleSets request.
func (client *applicationGatewaysOperations) listAvailableWafRuleSetsCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAvailableWafRuleSetsHandleResponse handles the ListAvailableWafRuleSets response.
func (client *applicationGatewaysOperations) listAvailableWafRuleSetsHandleResponse(resp *azcore.Response) (*ApplicationGatewayAvailableWafRuleSetsResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAvailableWafRuleSetsHandleError(resp)
	}
	result := ApplicationGatewayAvailableWafRuleSetsResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGatewayAvailableWafRuleSetsResult)
}

// listAvailableWafRuleSetsHandleError handles the ListAvailableWafRuleSets error response.
func (client *applicationGatewaysOperations) listAvailableWafRuleSetsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Start - Starts the specified application gateway.
func (client *applicationGatewaysOperations) BeginStart(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error) {
	req, err := client.startCreateRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.Start", "location", resp, client.startHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeStart(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.Start", token, client.startHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// startCreateRequest creates the Start request.
func (client *applicationGatewaysOperations) startCreateRequest(resourceGroupName string, applicationGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// startHandleResponse handles the Start response.
func (client *applicationGatewaysOperations) startHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.startHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// startHandleError handles the Start error response.
func (client *applicationGatewaysOperations) startHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Stop - Stops the specified application gateway in a resource group.
func (client *applicationGatewaysOperations) BeginStop(ctx context.Context, resourceGroupName string, applicationGatewayName string) (*HTTPPollerResponse, error) {
	req, err := client.stopCreateRequest(resourceGroupName, applicationGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stopHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("applicationGatewaysOperations.Stop", "location", resp, client.stopHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *applicationGatewaysOperations) ResumeStop(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("applicationGatewaysOperations.Stop", token, client.stopHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// stopCreateRequest creates the Stop request.
func (client *applicationGatewaysOperations) stopCreateRequest(resourceGroupName string, applicationGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// stopHandleResponse handles the Stop response.
func (client *applicationGatewaysOperations) stopHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.stopHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// stopHandleError handles the Stop error response.
func (client *applicationGatewaysOperations) stopHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UpdateTags - Updates the specified application gateway tags.
func (client *applicationGatewaysOperations) UpdateTags(ctx context.Context, resourceGroupName string, applicationGatewayName string, parameters TagsObject) (*ApplicationGatewayResponse, error) {
	req, err := client.updateTagsCreateRequest(resourceGroupName, applicationGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateTagsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *applicationGatewaysOperations) updateTagsCreateRequest(resourceGroupName string, applicationGatewayName string, parameters TagsObject) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{applicationGatewayName}", url.PathEscape(applicationGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *applicationGatewaysOperations) updateTagsHandleResponse(resp *azcore.Response) (*ApplicationGatewayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateTagsHandleError(resp)
	}
	result := ApplicationGatewayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ApplicationGateway)
}

// updateTagsHandleError handles the UpdateTags error response.
func (client *applicationGatewaysOperations) updateTagsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
