// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/url"
	"strings"
)

const scope = "https://management.azure.com//.default"
const telemetryInfo = "azsdk-go-armnetwork/<version>"

// ClientOptions contains configuration settings for the default client's pipeline.
type ClientOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// LogOptions configures the built-in request logging policy behavior.
	LogOptions azcore.RequestLogOptions
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
	// ApplicationID is an application-specific identification string used in telemetry.
	// It has a maximum length of 24 characters and must not contain any spaces.
	ApplicationID string
	// DisableRPRegistration controls if an unregistered resource provider should
	// automatically be registered. See https://aka.ms/rps-not-found for more information.
	// The default value is false, meaning registration will be attempted.
	DisableRPRegistration bool
}

// DefaultClientOptions creates a ClientOptions type initialized with default values.
func DefaultClientOptions() ClientOptions {
	return ClientOptions{
		HTTPClient: azcore.DefaultHTTPClientTransport(),
		Retry:      azcore.DefaultRetryOptions(),
	}
}

func (c *ClientOptions) telemetryOptions() azcore.TelemetryOptions {
	t := telemetryInfo
	if c.ApplicationID != "" {
		a := strings.ReplaceAll(c.ApplicationID, " ", "/")
		if len(a) > 24 {
			a = a[:24]
		}
		t = fmt.Sprintf("%s %s", a, telemetryInfo)
	}
	if c.Telemetry.Value == "" {
		return azcore.TelemetryOptions{Value: t}
	}
	return azcore.TelemetryOptions{Value: fmt.Sprintf("%s %s", c.Telemetry.Value, t)}
}

// Client - Network Client
type Client struct {
	u *url.URL
	p azcore.Pipeline
}

// DefaultEndpoint is the default service endpoint.
const DefaultEndpoint = "https://management.azure.com"

// NewDefaultClient creates an instance of the Client type using the DefaultEndpoint.
func NewDefaultClient(cred azcore.Credential, options *ClientOptions) (*Client, error) {
	return NewClient(DefaultEndpoint, cred, options)
}

// NewClient creates an instance of the Client type with the specified endpoint.
func NewClient(endpoint string, cred azcore.Credential, options *ClientOptions) (*Client, error) {
	if options == nil {
		o := DefaultClientOptions()
		options = &o
	}
	policies := []azcore.Policy{
		azcore.NewTelemetryPolicy(options.telemetryOptions()),
		azcore.NewUniqueRequestIDPolicy(),
	}
	if !options.DisableRPRegistration {
		rpOpts := armcore.DefaultRegistrationOptions()
		rpOpts.HTTPClient = options.HTTPClient
		rpOpts.LogOptions = options.LogOptions
		rpOpts.Retry = options.Retry
		policies = append(policies, armcore.NewRPRegistrationPolicy(cred, &rpOpts))
	}
	policies = append(policies,
		azcore.NewRetryPolicy(&options.Retry),
		cred.AuthenticationPolicy(azcore.AuthenticationPolicyOptions{Options: azcore.TokenRequestOptions{Scopes: []string{scope}}}),
		azcore.NewRequestLogPolicy(options.LogOptions))
	p := azcore.NewPipeline(options.HTTPClient, policies...)
	return NewClientWithPipeline(endpoint, p)
}

// NewClientWithPipeline creates an instance of the Client type with the specified endpoint and pipeline.
func NewClientWithPipeline(endpoint string, p azcore.Pipeline) (*Client, error) {
	u, err := url.Parse(endpoint)
	if err != nil {
		return nil, err
	}
	if u.Scheme == "" {
		return nil, fmt.Errorf("no scheme detected in endpoint %s", endpoint)
	}
	return &Client{u: u, p: p}, nil
}

// ApplicationGatewaysOperations returns the ApplicationGatewaysOperations associated with this client.
func (client *Client) ApplicationGatewaysOperations(subscriptionID string) ApplicationGatewaysOperations {
	return &applicationGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// ApplicationSecurityGroupsOperations returns the ApplicationSecurityGroupsOperations associated with this client.
func (client *Client) ApplicationSecurityGroupsOperations(subscriptionID string) ApplicationSecurityGroupsOperations {
	return &applicationSecurityGroupsOperations{Client: client, subscriptionID: subscriptionID}
}

// AvailableDelegationsOperations returns the AvailableDelegationsOperations associated with this client.
func (client *Client) AvailableDelegationsOperations(subscriptionID string) AvailableDelegationsOperations {
	return &availableDelegationsOperations{Client: client, subscriptionID: subscriptionID}
}

// AvailableResourceGroupDelegationsOperations returns the AvailableResourceGroupDelegationsOperations associated with this client.
func (client *Client) AvailableResourceGroupDelegationsOperations(subscriptionID string) AvailableResourceGroupDelegationsOperations {
	return &availableResourceGroupDelegationsOperations{Client: client, subscriptionID: subscriptionID}
}

// AvailableServiceAliasesOperations returns the AvailableServiceAliasesOperations associated with this client.
func (client *Client) AvailableServiceAliasesOperations(subscriptionID string) AvailableServiceAliasesOperations {
	return &availableServiceAliasesOperations{Client: client, subscriptionID: subscriptionID}
}

// AzureFirewallsOperations returns the AzureFirewallsOperations associated with this client.
func (client *Client) AzureFirewallsOperations(subscriptionID string) AzureFirewallsOperations {
	return &azureFirewallsOperations{Client: client, subscriptionID: subscriptionID}
}

// AzureFirewallFqdnTagsOperations returns the AzureFirewallFqdnTagsOperations associated with this client.
func (client *Client) AzureFirewallFqdnTagsOperations(subscriptionID string) AzureFirewallFqdnTagsOperations {
	return &azureFirewallFqdnTagsOperations{Client: client, subscriptionID: subscriptionID}
}

// BastionHostsOperations returns the BastionHostsOperations associated with this client.
func (client *Client) BastionHostsOperations(subscriptionID string) BastionHostsOperations {
	return &bastionHostsOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkManagementClientOperations returns the NetworkManagementClientOperations associated with this client.
func (client *Client) NetworkManagementClientOperations(subscriptionID string) NetworkManagementClientOperations {
	return &networkManagementClientOperations{Client: client, subscriptionID: subscriptionID}
}

// DdosCustomPoliciesOperations returns the DdosCustomPoliciesOperations associated with this client.
func (client *Client) DdosCustomPoliciesOperations(subscriptionID string) DdosCustomPoliciesOperations {
	return &ddosCustomPoliciesOperations{Client: client, subscriptionID: subscriptionID}
}

// DdosProtectionPlansOperations returns the DdosProtectionPlansOperations associated with this client.
func (client *Client) DdosProtectionPlansOperations(subscriptionID string) DdosProtectionPlansOperations {
	return &ddosProtectionPlansOperations{Client: client, subscriptionID: subscriptionID}
}

// AvailableEndpointServicesOperations returns the AvailableEndpointServicesOperations associated with this client.
func (client *Client) AvailableEndpointServicesOperations(subscriptionID string) AvailableEndpointServicesOperations {
	return &availableEndpointServicesOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCircuitAuthorizationsOperations returns the ExpressRouteCircuitAuthorizationsOperations associated with this client.
func (client *Client) ExpressRouteCircuitAuthorizationsOperations(subscriptionID string) ExpressRouteCircuitAuthorizationsOperations {
	return &expressRouteCircuitAuthorizationsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCircuitPeeringsOperations returns the ExpressRouteCircuitPeeringsOperations associated with this client.
func (client *Client) ExpressRouteCircuitPeeringsOperations(subscriptionID string) ExpressRouteCircuitPeeringsOperations {
	return &expressRouteCircuitPeeringsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCircuitConnectionsOperations returns the ExpressRouteCircuitConnectionsOperations associated with this client.
func (client *Client) ExpressRouteCircuitConnectionsOperations(subscriptionID string) ExpressRouteCircuitConnectionsOperations {
	return &expressRouteCircuitConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// PeerExpressRouteCircuitConnectionsOperations returns the PeerExpressRouteCircuitConnectionsOperations associated with this client.
func (client *Client) PeerExpressRouteCircuitConnectionsOperations(subscriptionID string) PeerExpressRouteCircuitConnectionsOperations {
	return &peerExpressRouteCircuitConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCircuitsOperations returns the ExpressRouteCircuitsOperations associated with this client.
func (client *Client) ExpressRouteCircuitsOperations(subscriptionID string) ExpressRouteCircuitsOperations {
	return &expressRouteCircuitsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteServiceProvidersOperations returns the ExpressRouteServiceProvidersOperations associated with this client.
func (client *Client) ExpressRouteServiceProvidersOperations(subscriptionID string) ExpressRouteServiceProvidersOperations {
	return &expressRouteServiceProvidersOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCrossConnectionsOperations returns the ExpressRouteCrossConnectionsOperations associated with this client.
func (client *Client) ExpressRouteCrossConnectionsOperations(subscriptionID string) ExpressRouteCrossConnectionsOperations {
	return &expressRouteCrossConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteCrossConnectionPeeringsOperations returns the ExpressRouteCrossConnectionPeeringsOperations associated with this client.
func (client *Client) ExpressRouteCrossConnectionPeeringsOperations(subscriptionID string) ExpressRouteCrossConnectionPeeringsOperations {
	return &expressRouteCrossConnectionPeeringsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRoutePortsLocationsOperations returns the ExpressRoutePortsLocationsOperations associated with this client.
func (client *Client) ExpressRoutePortsLocationsOperations(subscriptionID string) ExpressRoutePortsLocationsOperations {
	return &expressRoutePortsLocationsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRoutePortsOperations returns the ExpressRoutePortsOperations associated with this client.
func (client *Client) ExpressRoutePortsOperations(subscriptionID string) ExpressRoutePortsOperations {
	return &expressRoutePortsOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteLinksOperations returns the ExpressRouteLinksOperations associated with this client.
func (client *Client) ExpressRouteLinksOperations(subscriptionID string) ExpressRouteLinksOperations {
	return &expressRouteLinksOperations{Client: client, subscriptionID: subscriptionID}
}

// FirewallPoliciesOperations returns the FirewallPoliciesOperations associated with this client.
func (client *Client) FirewallPoliciesOperations(subscriptionID string) FirewallPoliciesOperations {
	return &firewallPoliciesOperations{Client: client, subscriptionID: subscriptionID}
}

// FirewallPolicyRuleGroupsOperations returns the FirewallPolicyRuleGroupsOperations associated with this client.
func (client *Client) FirewallPolicyRuleGroupsOperations(subscriptionID string) FirewallPolicyRuleGroupsOperations {
	return &firewallPolicyRuleGroupsOperations{Client: client, subscriptionID: subscriptionID}
}

// IPAllocationsOperations returns the IPAllocationsOperations associated with this client.
func (client *Client) IPAllocationsOperations(subscriptionID string) IPAllocationsOperations {
	return &ipAllocationsOperations{Client: client, subscriptionID: subscriptionID}
}

// IPGroupsOperations returns the IPGroupsOperations associated with this client.
func (client *Client) IPGroupsOperations(subscriptionID string) IPGroupsOperations {
	return &ipGroupsOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancersOperations returns the LoadBalancersOperations associated with this client.
func (client *Client) LoadBalancersOperations(subscriptionID string) LoadBalancersOperations {
	return &loadBalancersOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerBackendAddressPoolsOperations returns the LoadBalancerBackendAddressPoolsOperations associated with this client.
func (client *Client) LoadBalancerBackendAddressPoolsOperations(subscriptionID string) LoadBalancerBackendAddressPoolsOperations {
	return &loadBalancerBackendAddressPoolsOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerFrontendIPConfigurationsOperations returns the LoadBalancerFrontendIPConfigurationsOperations associated with this client.
func (client *Client) LoadBalancerFrontendIPConfigurationsOperations(subscriptionID string) LoadBalancerFrontendIPConfigurationsOperations {
	return &loadBalancerFrontendIPConfigurationsOperations{Client: client, subscriptionID: subscriptionID}
}

// InboundNatRulesOperations returns the InboundNatRulesOperations associated with this client.
func (client *Client) InboundNatRulesOperations(subscriptionID string) InboundNatRulesOperations {
	return &inboundNatRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerLoadBalancingRulesOperations returns the LoadBalancerLoadBalancingRulesOperations associated with this client.
func (client *Client) LoadBalancerLoadBalancingRulesOperations(subscriptionID string) LoadBalancerLoadBalancingRulesOperations {
	return &loadBalancerLoadBalancingRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerOutboundRulesOperations returns the LoadBalancerOutboundRulesOperations associated with this client.
func (client *Client) LoadBalancerOutboundRulesOperations(subscriptionID string) LoadBalancerOutboundRulesOperations {
	return &loadBalancerOutboundRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerNetworkInterfacesOperations returns the LoadBalancerNetworkInterfacesOperations associated with this client.
func (client *Client) LoadBalancerNetworkInterfacesOperations(subscriptionID string) LoadBalancerNetworkInterfacesOperations {
	return &loadBalancerNetworkInterfacesOperations{Client: client, subscriptionID: subscriptionID}
}

// LoadBalancerProbesOperations returns the LoadBalancerProbesOperations associated with this client.
func (client *Client) LoadBalancerProbesOperations(subscriptionID string) LoadBalancerProbesOperations {
	return &loadBalancerProbesOperations{Client: client, subscriptionID: subscriptionID}
}

// NatGatewaysOperations returns the NatGatewaysOperations associated with this client.
func (client *Client) NatGatewaysOperations(subscriptionID string) NatGatewaysOperations {
	return &natGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkInterfacesOperations returns the NetworkInterfacesOperations associated with this client.
func (client *Client) NetworkInterfacesOperations(subscriptionID string) NetworkInterfacesOperations {
	return &networkInterfacesOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkInterfaceIPConfigurationsOperations returns the NetworkInterfaceIPConfigurationsOperations associated with this client.
func (client *Client) NetworkInterfaceIPConfigurationsOperations(subscriptionID string) NetworkInterfaceIPConfigurationsOperations {
	return &networkInterfaceIPConfigurationsOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkInterfaceLoadBalancersOperations returns the NetworkInterfaceLoadBalancersOperations associated with this client.
func (client *Client) NetworkInterfaceLoadBalancersOperations(subscriptionID string) NetworkInterfaceLoadBalancersOperations {
	return &networkInterfaceLoadBalancersOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkInterfaceTapConfigurationsOperations returns the NetworkInterfaceTapConfigurationsOperations associated with this client.
func (client *Client) NetworkInterfaceTapConfigurationsOperations(subscriptionID string) NetworkInterfaceTapConfigurationsOperations {
	return &networkInterfaceTapConfigurationsOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkProfilesOperations returns the NetworkProfilesOperations associated with this client.
func (client *Client) NetworkProfilesOperations(subscriptionID string) NetworkProfilesOperations {
	return &networkProfilesOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkSecurityGroupsOperations returns the NetworkSecurityGroupsOperations associated with this client.
func (client *Client) NetworkSecurityGroupsOperations(subscriptionID string) NetworkSecurityGroupsOperations {
	return &networkSecurityGroupsOperations{Client: client, subscriptionID: subscriptionID}
}

// SecurityRulesOperations returns the SecurityRulesOperations associated with this client.
func (client *Client) SecurityRulesOperations(subscriptionID string) SecurityRulesOperations {
	return &securityRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// DefaultSecurityRulesOperations returns the DefaultSecurityRulesOperations associated with this client.
func (client *Client) DefaultSecurityRulesOperations(subscriptionID string) DefaultSecurityRulesOperations {
	return &defaultSecurityRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkVirtualAppliancesOperations returns the NetworkVirtualAppliancesOperations associated with this client.
func (client *Client) NetworkVirtualAppliancesOperations(subscriptionID string) NetworkVirtualAppliancesOperations {
	return &networkVirtualAppliancesOperations{Client: client, subscriptionID: subscriptionID}
}

// NetworkWatchersOperations returns the NetworkWatchersOperations associated with this client.
func (client *Client) NetworkWatchersOperations(subscriptionID string) NetworkWatchersOperations {
	return &networkWatchersOperations{Client: client, subscriptionID: subscriptionID}
}

// PacketCapturesOperations returns the PacketCapturesOperations associated with this client.
func (client *Client) PacketCapturesOperations(subscriptionID string) PacketCapturesOperations {
	return &packetCapturesOperations{Client: client, subscriptionID: subscriptionID}
}

// ConnectionMonitorsOperations returns the ConnectionMonitorsOperations associated with this client.
func (client *Client) ConnectionMonitorsOperations(subscriptionID string) ConnectionMonitorsOperations {
	return &connectionMonitorsOperations{Client: client, subscriptionID: subscriptionID}
}

// FlowLogsOperations returns the FlowLogsOperations associated with this client.
func (client *Client) FlowLogsOperations(subscriptionID string) FlowLogsOperations {
	return &flowLogsOperations{Client: client, subscriptionID: subscriptionID}
}

// Operations returns the Operations associated with this client.
func (client *Client) Operations() Operations {
	return &operations{Client: client}
}

// PrivateEndpointsOperations returns the PrivateEndpointsOperations associated with this client.
func (client *Client) PrivateEndpointsOperations(subscriptionID string) PrivateEndpointsOperations {
	return &privateEndpointsOperations{Client: client, subscriptionID: subscriptionID}
}

// AvailablePrivateEndpointTypesOperations returns the AvailablePrivateEndpointTypesOperations associated with this client.
func (client *Client) AvailablePrivateEndpointTypesOperations(subscriptionID string) AvailablePrivateEndpointTypesOperations {
	return &availablePrivateEndpointTypesOperations{Client: client, subscriptionID: subscriptionID}
}

// PrivateDNSZoneGroupsOperations returns the PrivateDNSZoneGroupsOperations associated with this client.
func (client *Client) PrivateDNSZoneGroupsOperations(subscriptionID string) PrivateDNSZoneGroupsOperations {
	return &privateDnsZoneGroupsOperations{Client: client, subscriptionID: subscriptionID}
}

// PrivateLinkServicesOperations returns the PrivateLinkServicesOperations associated with this client.
func (client *Client) PrivateLinkServicesOperations(subscriptionID string) PrivateLinkServicesOperations {
	return &privateLinkServicesOperations{Client: client, subscriptionID: subscriptionID}
}

// PublicIPAddressesOperations returns the PublicIPAddressesOperations associated with this client.
func (client *Client) PublicIPAddressesOperations(subscriptionID string) PublicIPAddressesOperations {
	return &publicIPAddressesOperations{Client: client, subscriptionID: subscriptionID}
}

// PublicIPPrefixesOperations returns the PublicIPPrefixesOperations associated with this client.
func (client *Client) PublicIPPrefixesOperations(subscriptionID string) PublicIPPrefixesOperations {
	return &publicIPPrefixesOperations{Client: client, subscriptionID: subscriptionID}
}

// RouteFiltersOperations returns the RouteFiltersOperations associated with this client.
func (client *Client) RouteFiltersOperations(subscriptionID string) RouteFiltersOperations {
	return &routeFiltersOperations{Client: client, subscriptionID: subscriptionID}
}

// RouteFilterRulesOperations returns the RouteFilterRulesOperations associated with this client.
func (client *Client) RouteFilterRulesOperations(subscriptionID string) RouteFilterRulesOperations {
	return &routeFilterRulesOperations{Client: client, subscriptionID: subscriptionID}
}

// RouteTablesOperations returns the RouteTablesOperations associated with this client.
func (client *Client) RouteTablesOperations(subscriptionID string) RouteTablesOperations {
	return &routeTablesOperations{Client: client, subscriptionID: subscriptionID}
}

// RoutesOperations returns the RoutesOperations associated with this client.
func (client *Client) RoutesOperations(subscriptionID string) RoutesOperations {
	return &routesOperations{Client: client, subscriptionID: subscriptionID}
}

// SecurityPartnerProvidersOperations returns the SecurityPartnerProvidersOperations associated with this client.
func (client *Client) SecurityPartnerProvidersOperations(subscriptionID string) SecurityPartnerProvidersOperations {
	return &securityPartnerProvidersOperations{Client: client, subscriptionID: subscriptionID}
}

// BgpServiceCommunitiesOperations returns the BgpServiceCommunitiesOperations associated with this client.
func (client *Client) BgpServiceCommunitiesOperations(subscriptionID string) BgpServiceCommunitiesOperations {
	return &bgpServiceCommunitiesOperations{Client: client, subscriptionID: subscriptionID}
}

// ServiceEndpointPoliciesOperations returns the ServiceEndpointPoliciesOperations associated with this client.
func (client *Client) ServiceEndpointPoliciesOperations(subscriptionID string) ServiceEndpointPoliciesOperations {
	return &serviceEndpointPoliciesOperations{Client: client, subscriptionID: subscriptionID}
}

// ServiceEndpointPolicyDefinitionsOperations returns the ServiceEndpointPolicyDefinitionsOperations associated with this client.
func (client *Client) ServiceEndpointPolicyDefinitionsOperations(subscriptionID string) ServiceEndpointPolicyDefinitionsOperations {
	return &serviceEndpointPolicyDefinitionsOperations{Client: client, subscriptionID: subscriptionID}
}

// ServiceTagsOperations returns the ServiceTagsOperations associated with this client.
func (client *Client) ServiceTagsOperations(subscriptionID string) ServiceTagsOperations {
	return &serviceTagsOperations{Client: client, subscriptionID: subscriptionID}
}

// UsagesOperations returns the UsagesOperations associated with this client.
func (client *Client) UsagesOperations(subscriptionID string) UsagesOperations {
	return &usagesOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualNetworksOperations returns the VirtualNetworksOperations associated with this client.
func (client *Client) VirtualNetworksOperations(subscriptionID string) VirtualNetworksOperations {
	return &virtualNetworksOperations{Client: client, subscriptionID: subscriptionID}
}

// SubnetsOperations returns the SubnetsOperations associated with this client.
func (client *Client) SubnetsOperations(subscriptionID string) SubnetsOperations {
	return &subnetsOperations{Client: client, subscriptionID: subscriptionID}
}

// ResourceNavigationLinksOperations returns the ResourceNavigationLinksOperations associated with this client.
func (client *Client) ResourceNavigationLinksOperations(subscriptionID string) ResourceNavigationLinksOperations {
	return &resourceNavigationLinksOperations{Client: client, subscriptionID: subscriptionID}
}

// ServiceAssociationLinksOperations returns the ServiceAssociationLinksOperations associated with this client.
func (client *Client) ServiceAssociationLinksOperations(subscriptionID string) ServiceAssociationLinksOperations {
	return &serviceAssociationLinksOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualNetworkPeeringsOperations returns the VirtualNetworkPeeringsOperations associated with this client.
func (client *Client) VirtualNetworkPeeringsOperations(subscriptionID string) VirtualNetworkPeeringsOperations {
	return &virtualNetworkPeeringsOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualNetworkGatewaysOperations returns the VirtualNetworkGatewaysOperations associated with this client.
func (client *Client) VirtualNetworkGatewaysOperations(subscriptionID string) VirtualNetworkGatewaysOperations {
	return &virtualNetworkGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualNetworkGatewayConnectionsOperations returns the VirtualNetworkGatewayConnectionsOperations associated with this client.
func (client *Client) VirtualNetworkGatewayConnectionsOperations(subscriptionID string) VirtualNetworkGatewayConnectionsOperations {
	return &virtualNetworkGatewayConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// LocalNetworkGatewaysOperations returns the LocalNetworkGatewaysOperations associated with this client.
func (client *Client) LocalNetworkGatewaysOperations(subscriptionID string) LocalNetworkGatewaysOperations {
	return &localNetworkGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualNetworkTapsOperations returns the VirtualNetworkTapsOperations associated with this client.
func (client *Client) VirtualNetworkTapsOperations(subscriptionID string) VirtualNetworkTapsOperations {
	return &virtualNetworkTapsOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualRoutersOperations returns the VirtualRoutersOperations associated with this client.
func (client *Client) VirtualRoutersOperations(subscriptionID string) VirtualRoutersOperations {
	return &virtualRoutersOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualRouterPeeringsOperations returns the VirtualRouterPeeringsOperations associated with this client.
func (client *Client) VirtualRouterPeeringsOperations(subscriptionID string) VirtualRouterPeeringsOperations {
	return &virtualRouterPeeringsOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualWansOperations returns the VirtualWansOperations associated with this client.
func (client *Client) VirtualWansOperations(subscriptionID string) VirtualWansOperations {
	return &virtualWansOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnSitesOperations returns the VpnSitesOperations associated with this client.
func (client *Client) VpnSitesOperations(subscriptionID string) VpnSitesOperations {
	return &vpnSitesOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnSiteLinksOperations returns the VpnSiteLinksOperations associated with this client.
func (client *Client) VpnSiteLinksOperations(subscriptionID string) VpnSiteLinksOperations {
	return &vpnSiteLinksOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnSitesConfigurationOperations returns the VpnSitesConfigurationOperations associated with this client.
func (client *Client) VpnSitesConfigurationOperations(subscriptionID string) VpnSitesConfigurationOperations {
	return &vpnSitesConfigurationOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnServerConfigurationsOperations returns the VpnServerConfigurationsOperations associated with this client.
func (client *Client) VpnServerConfigurationsOperations(subscriptionID string) VpnServerConfigurationsOperations {
	return &vpnServerConfigurationsOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualHubsOperations returns the VirtualHubsOperations associated with this client.
func (client *Client) VirtualHubsOperations(subscriptionID string) VirtualHubsOperations {
	return &virtualHubsOperations{Client: client, subscriptionID: subscriptionID}
}

// HubVirtualNetworkConnectionsOperations returns the HubVirtualNetworkConnectionsOperations associated with this client.
func (client *Client) HubVirtualNetworkConnectionsOperations(subscriptionID string) HubVirtualNetworkConnectionsOperations {
	return &hubVirtualNetworkConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnGatewaysOperations returns the VpnGatewaysOperations associated with this client.
func (client *Client) VpnGatewaysOperations(subscriptionID string) VpnGatewaysOperations {
	return &vpnGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnConnectionsOperations returns the VpnConnectionsOperations associated with this client.
func (client *Client) VpnConnectionsOperations(subscriptionID string) VpnConnectionsOperations {
	return &vpnConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnSiteLinkConnectionsOperations returns the VpnSiteLinkConnectionsOperations associated with this client.
func (client *Client) VpnSiteLinkConnectionsOperations(subscriptionID string) VpnSiteLinkConnectionsOperations {
	return &vpnSiteLinkConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnLinkConnectionsOperations returns the VpnLinkConnectionsOperations associated with this client.
func (client *Client) VpnLinkConnectionsOperations(subscriptionID string) VpnLinkConnectionsOperations {
	return &vpnLinkConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// P2SVpnGatewaysOperations returns the P2SVpnGatewaysOperations associated with this client.
func (client *Client) P2SVpnGatewaysOperations(subscriptionID string) P2SVpnGatewaysOperations {
	return &p2SVpnGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// VpnServerConfigurationsAssociatedWithVirtualWanOperations returns the VpnServerConfigurationsAssociatedWithVirtualWanOperations associated with this client.
func (client *Client) VpnServerConfigurationsAssociatedWithVirtualWanOperations(subscriptionID string) VpnServerConfigurationsAssociatedWithVirtualWanOperations {
	return &vpnServerConfigurationsAssociatedWithVirtualWanOperations{Client: client, subscriptionID: subscriptionID}
}

// VirtualHubRouteTableV2SOperations returns the VirtualHubRouteTableV2SOperations associated with this client.
func (client *Client) VirtualHubRouteTableV2SOperations(subscriptionID string) VirtualHubRouteTableV2SOperations {
	return &virtualHubRouteTableV2SOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteGatewaysOperations returns the ExpressRouteGatewaysOperations associated with this client.
func (client *Client) ExpressRouteGatewaysOperations(subscriptionID string) ExpressRouteGatewaysOperations {
	return &expressRouteGatewaysOperations{Client: client, subscriptionID: subscriptionID}
}

// ExpressRouteConnectionsOperations returns the ExpressRouteConnectionsOperations associated with this client.
func (client *Client) ExpressRouteConnectionsOperations(subscriptionID string) ExpressRouteConnectionsOperations {
	return &expressRouteConnectionsOperations{Client: client, subscriptionID: subscriptionID}
}

// WebApplicationFirewallPoliciesOperations returns the WebApplicationFirewallPoliciesOperations associated with this client.
func (client *Client) WebApplicationFirewallPoliciesOperations(subscriptionID string) WebApplicationFirewallPoliciesOperations {
	return &webApplicationFirewallPoliciesOperations{Client: client, subscriptionID: subscriptionID}
}
