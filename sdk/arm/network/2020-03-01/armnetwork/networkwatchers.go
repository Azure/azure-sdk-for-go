// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// NetworkWatchersOperations contains the methods for the NetworkWatchers group.
type NetworkWatchersOperations interface {
	// BeginCheckConnectivity - Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
	BeginCheckConnectivity(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters ConnectivityParameters) (*ConnectivityInformationPollerResponse, error)
	// ResumeCheckConnectivity - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCheckConnectivity(token string) (ConnectivityInformationPoller, error)
	// CreateOrUpdate - Creates or updates a network watcher in the specified resource group.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NetworkWatcher) (*NetworkWatcherResponse, error)
	// BeginDelete - Deletes the specified network watcher resource.
	BeginDelete(ctx context.Context, resourceGroupName string, networkWatcherName string) (*HTTPPollerResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// Get - Gets the specified network watcher by resource group.
	Get(ctx context.Context, resourceGroupName string, networkWatcherName string) (*NetworkWatcherResponse, error)
	// BeginGetAzureReachabilityReport - NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions.
	BeginGetAzureReachabilityReport(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters AzureReachabilityReportParameters) (*AzureReachabilityReportPollerResponse, error)
	// ResumeGetAzureReachabilityReport - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetAzureReachabilityReport(token string) (AzureReachabilityReportPoller, error)
	// BeginGetFlowLogStatus - Queries status of flow log and traffic analytics (optional) on a specified resource.
	BeginGetFlowLogStatus(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters FlowLogStatusParameters) (*FlowLogInformationPollerResponse, error)
	// ResumeGetFlowLogStatus - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetFlowLogStatus(token string) (FlowLogInformationPoller, error)
	// BeginGetNetworkConfigurationDiagnostic - Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results.
	BeginGetNetworkConfigurationDiagnostic(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NetworkConfigurationDiagnosticParameters) (*NetworkConfigurationDiagnosticResponsePollerResponse, error)
	// ResumeGetNetworkConfigurationDiagnostic - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetNetworkConfigurationDiagnostic(token string) (NetworkConfigurationDiagnosticResponsePoller, error)
	// BeginGetNextHop - Gets the next hop from the specified VM.
	BeginGetNextHop(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NextHopParameters) (*NextHopResultPollerResponse, error)
	// ResumeGetNextHop - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetNextHop(token string) (NextHopResultPoller, error)
	// GetTopology - Gets the current network topology by resource group.
	GetTopology(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TopologyParameters) (*TopologyResponse, error)
	// BeginGetTroubleshooting - Initiate troubleshooting on a specified resource.
	BeginGetTroubleshooting(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TroubleshootingParameters) (*TroubleshootingResultPollerResponse, error)
	// ResumeGetTroubleshooting - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetTroubleshooting(token string) (TroubleshootingResultPoller, error)
	// BeginGetTroubleshootingResult - Get the last completed troubleshooting result on a specified resource.
	BeginGetTroubleshootingResult(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters QueryTroubleshootingParameters) (*TroubleshootingResultPollerResponse, error)
	// ResumeGetTroubleshootingResult - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetTroubleshootingResult(token string) (TroubleshootingResultPoller, error)
	// BeginGetVMSecurityRules - Gets the configured and effective security group rules on the specified VM.
	BeginGetVMSecurityRules(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters SecurityGroupViewParameters) (*SecurityGroupViewResultPollerResponse, error)
	// ResumeGetVMSecurityRules - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetVMSecurityRules(token string) (SecurityGroupViewResultPoller, error)
	// List - Gets all network watchers by resource group.
	List(ctx context.Context, resourceGroupName string) (*NetworkWatcherListResultResponse, error)
	// ListAll - Gets all network watchers by subscription.
	ListAll(ctx context.Context) (*NetworkWatcherListResultResponse, error)
	// BeginListAvailableProviders - NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region.
	BeginListAvailableProviders(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters AvailableProvidersListParameters) (*AvailableProvidersListPollerResponse, error)
	// ResumeListAvailableProviders - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeListAvailableProviders(token string) (AvailableProvidersListPoller, error)
	// BeginSetFlowLogConfiguration - Configures flow log and traffic analytics (optional) on a specified resource.
	BeginSetFlowLogConfiguration(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters FlowLogInformation) (*FlowLogInformationPollerResponse, error)
	// ResumeSetFlowLogConfiguration - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeSetFlowLogConfiguration(token string) (FlowLogInformationPoller, error)
	// UpdateTags - Updates a network watcher tags.
	UpdateTags(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TagsObject) (*NetworkWatcherResponse, error)
	// BeginVerifyIPFlow - Verify IP flow from the specified VM to a location given the currently configured NSG rules.
	BeginVerifyIPFlow(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters VerificationIPFlowParameters) (*VerificationIPFlowResultPollerResponse, error)
	// ResumeVerifyIPFlow - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeVerifyIPFlow(token string) (VerificationIPFlowResultPoller, error)
}

// networkWatchersOperations implements the NetworkWatchersOperations interface.
type networkWatchersOperations struct {
	*Client
	subscriptionID string
}

// CheckConnectivity - Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
func (client *networkWatchersOperations) BeginCheckConnectivity(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters ConnectivityParameters) (*ConnectivityInformationPollerResponse, error) {
	req, err := client.checkConnectivityCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkConnectivityHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.CheckConnectivity", "location", resp, client.checkConnectivityHandleError)
	if err != nil {
		return nil, err
	}
	poller := &connectivityInformationPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*ConnectivityInformationResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeCheckConnectivity(token string) (ConnectivityInformationPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.CheckConnectivity", token, client.checkConnectivityHandleError)
	if err != nil {
		return nil, err
	}
	return &connectivityInformationPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// checkConnectivityCreateRequest creates the CheckConnectivity request.
func (client *networkWatchersOperations) checkConnectivityCreateRequest(resourceGroupName string, networkWatcherName string, parameters ConnectivityParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// checkConnectivityHandleResponse handles the CheckConnectivity response.
func (client *networkWatchersOperations) checkConnectivityHandleResponse(resp *azcore.Response) (*ConnectivityInformationPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.checkConnectivityHandleError(resp)
	}
	return &ConnectivityInformationPollerResponse{RawResponse: resp.Response}, nil
}

// checkConnectivityHandleError handles the CheckConnectivity error response.
func (client *networkWatchersOperations) checkConnectivityHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdate - Creates or updates a network watcher in the specified resource group.
func (client *networkWatchersOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NetworkWatcher) (*NetworkWatcherResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *networkWatchersOperations) createOrUpdateCreateRequest(resourceGroupName string, networkWatcherName string, parameters NetworkWatcher) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *networkWatchersOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*NetworkWatcherResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := NetworkWatcherResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkWatcher)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *networkWatchersOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the specified network watcher resource.
func (client *networkWatchersOperations) BeginDelete(ctx context.Context, resourceGroupName string, networkWatcherName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, networkWatcherName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.Delete", "location", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *networkWatchersOperations) deleteCreateRequest(resourceGroupName string, networkWatcherName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *networkWatchersOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *networkWatchersOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the specified network watcher by resource group.
func (client *networkWatchersOperations) Get(ctx context.Context, resourceGroupName string, networkWatcherName string) (*NetworkWatcherResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, networkWatcherName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *networkWatchersOperations) getCreateRequest(resourceGroupName string, networkWatcherName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *networkWatchersOperations) getHandleResponse(resp *azcore.Response) (*NetworkWatcherResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := NetworkWatcherResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkWatcher)
}

// getHandleError handles the Get error response.
func (client *networkWatchersOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetAzureReachabilityReport - NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions.
func (client *networkWatchersOperations) BeginGetAzureReachabilityReport(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters AzureReachabilityReportParameters) (*AzureReachabilityReportPollerResponse, error) {
	req, err := client.getAzureReachabilityReportCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAzureReachabilityReportHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetAzureReachabilityReport", "location", resp, client.getAzureReachabilityReportHandleError)
	if err != nil {
		return nil, err
	}
	poller := &azureReachabilityReportPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*AzureReachabilityReportResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetAzureReachabilityReport(token string) (AzureReachabilityReportPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetAzureReachabilityReport", token, client.getAzureReachabilityReportHandleError)
	if err != nil {
		return nil, err
	}
	return &azureReachabilityReportPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getAzureReachabilityReportCreateRequest creates the GetAzureReachabilityReport request.
func (client *networkWatchersOperations) getAzureReachabilityReportCreateRequest(resourceGroupName string, networkWatcherName string, parameters AzureReachabilityReportParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getAzureReachabilityReportHandleResponse handles the GetAzureReachabilityReport response.
func (client *networkWatchersOperations) getAzureReachabilityReportHandleResponse(resp *azcore.Response) (*AzureReachabilityReportPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getAzureReachabilityReportHandleError(resp)
	}
	return &AzureReachabilityReportPollerResponse{RawResponse: resp.Response}, nil
}

// getAzureReachabilityReportHandleError handles the GetAzureReachabilityReport error response.
func (client *networkWatchersOperations) getAzureReachabilityReportHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetFlowLogStatus - Queries status of flow log and traffic analytics (optional) on a specified resource.
func (client *networkWatchersOperations) BeginGetFlowLogStatus(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters FlowLogStatusParameters) (*FlowLogInformationPollerResponse, error) {
	req, err := client.getFlowLogStatusCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getFlowLogStatusHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetFlowLogStatus", "location", resp, client.getFlowLogStatusHandleError)
	if err != nil {
		return nil, err
	}
	poller := &flowLogInformationPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*FlowLogInformationResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetFlowLogStatus(token string) (FlowLogInformationPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetFlowLogStatus", token, client.getFlowLogStatusHandleError)
	if err != nil {
		return nil, err
	}
	return &flowLogInformationPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getFlowLogStatusCreateRequest creates the GetFlowLogStatus request.
func (client *networkWatchersOperations) getFlowLogStatusCreateRequest(resourceGroupName string, networkWatcherName string, parameters FlowLogStatusParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getFlowLogStatusHandleResponse handles the GetFlowLogStatus response.
func (client *networkWatchersOperations) getFlowLogStatusHandleResponse(resp *azcore.Response) (*FlowLogInformationPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getFlowLogStatusHandleError(resp)
	}
	return &FlowLogInformationPollerResponse{RawResponse: resp.Response}, nil
}

// getFlowLogStatusHandleError handles the GetFlowLogStatus error response.
func (client *networkWatchersOperations) getFlowLogStatusHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNetworkConfigurationDiagnostic - Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results.
func (client *networkWatchersOperations) BeginGetNetworkConfigurationDiagnostic(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NetworkConfigurationDiagnosticParameters) (*NetworkConfigurationDiagnosticResponsePollerResponse, error) {
	req, err := client.getNetworkConfigurationDiagnosticCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNetworkConfigurationDiagnosticHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetNetworkConfigurationDiagnostic", "location", resp, client.getNetworkConfigurationDiagnosticHandleError)
	if err != nil {
		return nil, err
	}
	poller := &networkConfigurationDiagnosticResponsePoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*NetworkConfigurationDiagnosticResponseResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetNetworkConfigurationDiagnostic(token string) (NetworkConfigurationDiagnosticResponsePoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetNetworkConfigurationDiagnostic", token, client.getNetworkConfigurationDiagnosticHandleError)
	if err != nil {
		return nil, err
	}
	return &networkConfigurationDiagnosticResponsePoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getNetworkConfigurationDiagnosticCreateRequest creates the GetNetworkConfigurationDiagnostic request.
func (client *networkWatchersOperations) getNetworkConfigurationDiagnosticCreateRequest(resourceGroupName string, networkWatcherName string, parameters NetworkConfigurationDiagnosticParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getNetworkConfigurationDiagnosticHandleResponse handles the GetNetworkConfigurationDiagnostic response.
func (client *networkWatchersOperations) getNetworkConfigurationDiagnosticHandleResponse(resp *azcore.Response) (*NetworkConfigurationDiagnosticResponsePollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getNetworkConfigurationDiagnosticHandleError(resp)
	}
	return &NetworkConfigurationDiagnosticResponsePollerResponse{RawResponse: resp.Response}, nil
}

// getNetworkConfigurationDiagnosticHandleError handles the GetNetworkConfigurationDiagnostic error response.
func (client *networkWatchersOperations) getNetworkConfigurationDiagnosticHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetNextHop - Gets the next hop from the specified VM.
func (client *networkWatchersOperations) BeginGetNextHop(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters NextHopParameters) (*NextHopResultPollerResponse, error) {
	req, err := client.getNextHopCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getNextHopHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetNextHop", "location", resp, client.getNextHopHandleError)
	if err != nil {
		return nil, err
	}
	poller := &nextHopResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*NextHopResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetNextHop(token string) (NextHopResultPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetNextHop", token, client.getNextHopHandleError)
	if err != nil {
		return nil, err
	}
	return &nextHopResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getNextHopCreateRequest creates the GetNextHop request.
func (client *networkWatchersOperations) getNextHopCreateRequest(resourceGroupName string, networkWatcherName string, parameters NextHopParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getNextHopHandleResponse handles the GetNextHop response.
func (client *networkWatchersOperations) getNextHopHandleResponse(resp *azcore.Response) (*NextHopResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getNextHopHandleError(resp)
	}
	return &NextHopResultPollerResponse{RawResponse: resp.Response}, nil
}

// getNextHopHandleError handles the GetNextHop error response.
func (client *networkWatchersOperations) getNextHopHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTopology - Gets the current network topology by resource group.
func (client *networkWatchersOperations) GetTopology(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TopologyParameters) (*TopologyResponse, error) {
	req, err := client.getTopologyCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTopologyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getTopologyCreateRequest creates the GetTopology request.
func (client *networkWatchersOperations) getTopologyCreateRequest(resourceGroupName string, networkWatcherName string, parameters TopologyParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getTopologyHandleResponse handles the GetTopology response.
func (client *networkWatchersOperations) getTopologyHandleResponse(resp *azcore.Response) (*TopologyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getTopologyHandleError(resp)
	}
	result := TopologyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Topology)
}

// getTopologyHandleError handles the GetTopology error response.
func (client *networkWatchersOperations) getTopologyHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTroubleshooting - Initiate troubleshooting on a specified resource.
func (client *networkWatchersOperations) BeginGetTroubleshooting(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TroubleshootingParameters) (*TroubleshootingResultPollerResponse, error) {
	req, err := client.getTroubleshootingCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTroubleshootingHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetTroubleshooting", "location", resp, client.getTroubleshootingHandleError)
	if err != nil {
		return nil, err
	}
	poller := &troubleshootingResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*TroubleshootingResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetTroubleshooting(token string) (TroubleshootingResultPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetTroubleshooting", token, client.getTroubleshootingHandleError)
	if err != nil {
		return nil, err
	}
	return &troubleshootingResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getTroubleshootingCreateRequest creates the GetTroubleshooting request.
func (client *networkWatchersOperations) getTroubleshootingCreateRequest(resourceGroupName string, networkWatcherName string, parameters TroubleshootingParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getTroubleshootingHandleResponse handles the GetTroubleshooting response.
func (client *networkWatchersOperations) getTroubleshootingHandleResponse(resp *azcore.Response) (*TroubleshootingResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getTroubleshootingHandleError(resp)
	}
	return &TroubleshootingResultPollerResponse{RawResponse: resp.Response}, nil
}

// getTroubleshootingHandleError handles the GetTroubleshooting error response.
func (client *networkWatchersOperations) getTroubleshootingHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetTroubleshootingResult - Get the last completed troubleshooting result on a specified resource.
func (client *networkWatchersOperations) BeginGetTroubleshootingResult(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters QueryTroubleshootingParameters) (*TroubleshootingResultPollerResponse, error) {
	req, err := client.getTroubleshootingResultCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getTroubleshootingResultHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetTroubleshootingResult", "location", resp, client.getTroubleshootingResultHandleError)
	if err != nil {
		return nil, err
	}
	poller := &troubleshootingResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*TroubleshootingResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetTroubleshootingResult(token string) (TroubleshootingResultPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetTroubleshootingResult", token, client.getTroubleshootingResultHandleError)
	if err != nil {
		return nil, err
	}
	return &troubleshootingResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getTroubleshootingResultCreateRequest creates the GetTroubleshootingResult request.
func (client *networkWatchersOperations) getTroubleshootingResultCreateRequest(resourceGroupName string, networkWatcherName string, parameters QueryTroubleshootingParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getTroubleshootingResultHandleResponse handles the GetTroubleshootingResult response.
func (client *networkWatchersOperations) getTroubleshootingResultHandleResponse(resp *azcore.Response) (*TroubleshootingResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getTroubleshootingResultHandleError(resp)
	}
	return &TroubleshootingResultPollerResponse{RawResponse: resp.Response}, nil
}

// getTroubleshootingResultHandleError handles the GetTroubleshootingResult error response.
func (client *networkWatchersOperations) getTroubleshootingResultHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetVMSecurityRules - Gets the configured and effective security group rules on the specified VM.
func (client *networkWatchersOperations) BeginGetVMSecurityRules(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters SecurityGroupViewParameters) (*SecurityGroupViewResultPollerResponse, error) {
	req, err := client.getVMSecurityRulesCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getVMSecurityRulesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.GetVMSecurityRules", "location", resp, client.getVMSecurityRulesHandleError)
	if err != nil {
		return nil, err
	}
	poller := &securityGroupViewResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*SecurityGroupViewResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeGetVMSecurityRules(token string) (SecurityGroupViewResultPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.GetVMSecurityRules", token, client.getVMSecurityRulesHandleError)
	if err != nil {
		return nil, err
	}
	return &securityGroupViewResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getVMSecurityRulesCreateRequest creates the GetVMSecurityRules request.
func (client *networkWatchersOperations) getVMSecurityRulesCreateRequest(resourceGroupName string, networkWatcherName string, parameters SecurityGroupViewParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// getVMSecurityRulesHandleResponse handles the GetVMSecurityRules response.
func (client *networkWatchersOperations) getVMSecurityRulesHandleResponse(resp *azcore.Response) (*SecurityGroupViewResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getVMSecurityRulesHandleError(resp)
	}
	return &SecurityGroupViewResultPollerResponse{RawResponse: resp.Response}, nil
}

// getVMSecurityRulesHandleError handles the GetVMSecurityRules error response.
func (client *networkWatchersOperations) getVMSecurityRulesHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Gets all network watchers by resource group.
func (client *networkWatchersOperations) List(ctx context.Context, resourceGroupName string) (*NetworkWatcherListResultResponse, error) {
	req, err := client.listCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *networkWatchersOperations) listCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *networkWatchersOperations) listHandleResponse(resp *azcore.Response) (*NetworkWatcherListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := NetworkWatcherListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkWatcherListResult)
}

// listHandleError handles the List error response.
func (client *networkWatchersOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAll - Gets all network watchers by subscription.
func (client *networkWatchersOperations) ListAll(ctx context.Context) (*NetworkWatcherListResultResponse, error) {
	req, err := client.listAllCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAllHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listAllCreateRequest creates the ListAll request.
func (client *networkWatchersOperations) listAllCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *networkWatchersOperations) listAllHandleResponse(resp *azcore.Response) (*NetworkWatcherListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAllHandleError(resp)
	}
	result := NetworkWatcherListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkWatcherListResult)
}

// listAllHandleError handles the ListAll error response.
func (client *networkWatchersOperations) listAllHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAvailableProviders - NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region.
func (client *networkWatchersOperations) BeginListAvailableProviders(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters AvailableProvidersListParameters) (*AvailableProvidersListPollerResponse, error) {
	req, err := client.listAvailableProvidersCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listAvailableProvidersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.ListAvailableProviders", "location", resp, client.listAvailableProvidersHandleError)
	if err != nil {
		return nil, err
	}
	poller := &availableProvidersListPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*AvailableProvidersListResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeListAvailableProviders(token string) (AvailableProvidersListPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.ListAvailableProviders", token, client.listAvailableProvidersHandleError)
	if err != nil {
		return nil, err
	}
	return &availableProvidersListPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// listAvailableProvidersCreateRequest creates the ListAvailableProviders request.
func (client *networkWatchersOperations) listAvailableProvidersCreateRequest(resourceGroupName string, networkWatcherName string, parameters AvailableProvidersListParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// listAvailableProvidersHandleResponse handles the ListAvailableProviders response.
func (client *networkWatchersOperations) listAvailableProvidersHandleResponse(resp *azcore.Response) (*AvailableProvidersListPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.listAvailableProvidersHandleError(resp)
	}
	return &AvailableProvidersListPollerResponse{RawResponse: resp.Response}, nil
}

// listAvailableProvidersHandleError handles the ListAvailableProviders error response.
func (client *networkWatchersOperations) listAvailableProvidersHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// SetFlowLogConfiguration - Configures flow log and traffic analytics (optional) on a specified resource.
func (client *networkWatchersOperations) BeginSetFlowLogConfiguration(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters FlowLogInformation) (*FlowLogInformationPollerResponse, error) {
	req, err := client.setFlowLogConfigurationCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.setFlowLogConfigurationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.SetFlowLogConfiguration", "location", resp, client.setFlowLogConfigurationHandleError)
	if err != nil {
		return nil, err
	}
	poller := &flowLogInformationPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*FlowLogInformationResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeSetFlowLogConfiguration(token string) (FlowLogInformationPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.SetFlowLogConfiguration", token, client.setFlowLogConfigurationHandleError)
	if err != nil {
		return nil, err
	}
	return &flowLogInformationPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// setFlowLogConfigurationCreateRequest creates the SetFlowLogConfiguration request.
func (client *networkWatchersOperations) setFlowLogConfigurationCreateRequest(resourceGroupName string, networkWatcherName string, parameters FlowLogInformation) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// setFlowLogConfigurationHandleResponse handles the SetFlowLogConfiguration response.
func (client *networkWatchersOperations) setFlowLogConfigurationHandleResponse(resp *azcore.Response) (*FlowLogInformationPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.setFlowLogConfigurationHandleError(resp)
	}
	return &FlowLogInformationPollerResponse{RawResponse: resp.Response}, nil
}

// setFlowLogConfigurationHandleError handles the SetFlowLogConfiguration error response.
func (client *networkWatchersOperations) setFlowLogConfigurationHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UpdateTags - Updates a network watcher tags.
func (client *networkWatchersOperations) UpdateTags(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters TagsObject) (*NetworkWatcherResponse, error) {
	req, err := client.updateTagsCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateTagsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *networkWatchersOperations) updateTagsCreateRequest(resourceGroupName string, networkWatcherName string, parameters TagsObject) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *networkWatchersOperations) updateTagsHandleResponse(resp *azcore.Response) (*NetworkWatcherResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateTagsHandleError(resp)
	}
	result := NetworkWatcherResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkWatcher)
}

// updateTagsHandleError handles the UpdateTags error response.
func (client *networkWatchersOperations) updateTagsHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// VerifyIPFlow - Verify IP flow from the specified VM to a location given the currently configured NSG rules.
func (client *networkWatchersOperations) BeginVerifyIPFlow(ctx context.Context, resourceGroupName string, networkWatcherName string, parameters VerificationIPFlowParameters) (*VerificationIPFlowResultPollerResponse, error) {
	req, err := client.verifyIPFlowCreateRequest(resourceGroupName, networkWatcherName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.verifyIPFlowHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("networkWatchersOperations.VerifyIPFlow", "location", resp, client.verifyIPFlowHandleError)
	if err != nil {
		return nil, err
	}
	poller := &verificationIPFlowResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VerificationIPFlowResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *networkWatchersOperations) ResumeVerifyIPFlow(token string) (VerificationIPFlowResultPoller, error) {
	pt, err := resumePollingTracker("networkWatchersOperations.VerifyIPFlow", token, client.verifyIPFlowHandleError)
	if err != nil {
		return nil, err
	}
	return &verificationIPFlowResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// verifyIPFlowCreateRequest creates the VerifyIPFlow request.
func (client *networkWatchersOperations) verifyIPFlowCreateRequest(resourceGroupName string, networkWatcherName string, parameters VerificationIPFlowParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{networkWatcherName}", url.PathEscape(networkWatcherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// verifyIPFlowHandleResponse handles the VerifyIPFlow response.
func (client *networkWatchersOperations) verifyIPFlowHandleResponse(resp *azcore.Response) (*VerificationIPFlowResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.verifyIPFlowHandleError(resp)
	}
	return &VerificationIPFlowResultPollerResponse{RawResponse: resp.Response}, nil
}

// verifyIPFlowHandleError handles the VerifyIPFlow error response.
func (client *networkWatchersOperations) verifyIPFlowHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
