// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import "encoding/json"

func unmarshalFirewallPolicyRuleClassification(body []byte) (FirewallPolicyRuleClassification, error) {
	var m map[string]interface{}
	if err := json.Unmarshal(body, &m); err != nil {
		return nil, err
	}
	var b FirewallPolicyRuleClassification
	switch m["ruleType"] {
	case FirewallPolicyRuleTypeFirewallPolicyFilterRule:
		b = &FirewallPolicyFilterRule{}
	case FirewallPolicyRuleTypeFirewallPolicyNatRule:
		b = &FirewallPolicyNatRule{}
	default:
		b = &FirewallPolicyRule{}
	}
	return b, json.Unmarshal(body, &b)
}

func unmarshalFirewallPolicyRuleClassificationArray(body []byte) (*[]FirewallPolicyRuleClassification, error) {
	var rawMessages []*json.RawMessage
	if err := json.Unmarshal(body, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FirewallPolicyRuleClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFirewallPolicyRuleClassification(*rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return &fArray, nil
}

func unmarshalFirewallPolicyRuleConditionClassification(body []byte) (FirewallPolicyRuleConditionClassification, error) {
	var m map[string]interface{}
	if err := json.Unmarshal(body, &m); err != nil {
		return nil, err
	}
	var b FirewallPolicyRuleConditionClassification
	switch m["ruleConditionType"] {
	case FirewallPolicyRuleConditionTypeApplicationRuleCondition:
		b = &ApplicationRuleCondition{}
	case FirewallPolicyRuleConditionTypeNatRuleCondition:
		b = &NatRuleCondition{}
	case FirewallPolicyRuleConditionTypeNetworkRuleCondition:
		b = &NetworkRuleCondition{}
	default:
		b = &FirewallPolicyRuleCondition{}
	}
	return b, json.Unmarshal(body, &b)
}

func unmarshalFirewallPolicyRuleConditionClassificationArray(body []byte) (*[]FirewallPolicyRuleConditionClassification, error) {
	var rawMessages []*json.RawMessage
	if err := json.Unmarshal(body, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FirewallPolicyRuleConditionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFirewallPolicyRuleConditionClassification(*rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return &fArray, nil
}

func strptr(s string) *string {
	return &s
}
