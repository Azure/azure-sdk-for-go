// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// VirtualNetworkGatewaysOperations contains the methods for the VirtualNetworkGateways group.
type VirtualNetworkGatewaysOperations interface {
	// BeginCreateOrUpdate - Creates or updates a virtual network gateway in the specified resource group.
	BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (*VirtualNetworkGatewayPollerResponse, error)
	// ResumeCreateOrUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeCreateOrUpdate(token string) (VirtualNetworkGatewayPoller, error)
	// BeginDelete - Deletes the specified virtual network gateway.
	BeginDelete(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*HTTPPollerResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// BeginDisconnectVirtualNetworkGatewayVpnConnections - Disconnect vpn connections of virtual network gateway in the specified resource group.
	BeginDisconnectVirtualNetworkGatewayVpnConnections(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, request P2SVpnConnectionRequest) (*HTTPPollerResponse, error)
	// ResumeDisconnectVirtualNetworkGatewayVpnConnections - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDisconnectVirtualNetworkGatewayVpnConnections(token string) (HTTPPoller, error)
	// BeginGenerateVpnProfile - Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
	BeginGenerateVpnProfile(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*StringPollerResponse, error)
	// ResumeGenerateVpnProfile - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGenerateVpnProfile(token string) (StringPoller, error)
	// BeginGeneratevpnclientpackage - Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
	BeginGeneratevpnclientpackage(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*StringPollerResponse, error)
	// ResumeGeneratevpnclientpackage - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGeneratevpnclientpackage(token string) (StringPoller, error)
	// Get - Gets the specified virtual network gateway by resource group.
	Get(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VirtualNetworkGatewayResponse, error)
	// BeginGetAdvertisedRoutes - This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
	BeginGetAdvertisedRoutes(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, peer string) (*GatewayRouteListResultPollerResponse, error)
	// ResumeGetAdvertisedRoutes - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetAdvertisedRoutes(token string) (GatewayRouteListResultPoller, error)
	// BeginGetBgpPeerStatus - The GetBgpPeerStatus operation retrieves the status of all BGP peers.
	BeginGetBgpPeerStatus(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysGetBgpPeerStatusOptions *VirtualNetworkGatewaysGetBgpPeerStatusOptions) (*BgpPeerStatusListResultPollerResponse, error)
	// ResumeGetBgpPeerStatus - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetBgpPeerStatus(token string) (BgpPeerStatusListResultPoller, error)
	// BeginGetLearnedRoutes - This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
	BeginGetLearnedRoutes(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*GatewayRouteListResultPollerResponse, error)
	// ResumeGetLearnedRoutes - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetLearnedRoutes(token string) (GatewayRouteListResultPoller, error)
	// BeginGetVpnProfilePackageURL - Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
	BeginGetVpnProfilePackageURL(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*StringPollerResponse, error)
	// ResumeGetVpnProfilePackageURL - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetVpnProfilePackageURL(token string) (StringPoller, error)
	// BeginGetVpnclientConnectionHealth - Get VPN client connection health detail per P2S client connection of the virtual network gateway in the specified resource group.
	BeginGetVpnclientConnectionHealth(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VpnClientConnectionHealthDetailListResultPollerResponse, error)
	// ResumeGetVpnclientConnectionHealth - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetVpnclientConnectionHealth(token string) (VpnClientConnectionHealthDetailListResultPoller, error)
	// BeginGetVpnclientIPsecParameters - The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
	BeginGetVpnclientIPsecParameters(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VpnClientIPsecParametersPollerResponse, error)
	// ResumeGetVpnclientIPsecParameters - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeGetVpnclientIPsecParameters(token string) (VpnClientIPsecParametersPoller, error)
	// List - Gets all virtual network gateways by resource group.
	List(resourceGroupName string) (VirtualNetworkGatewayListResultPager, error)
	// ListConnections - Gets all the connections in a virtual network gateway.
	ListConnections(resourceGroupName string, virtualNetworkGatewayName string) (VirtualNetworkGatewayListConnectionsResultPager, error)
	// BeginReset - Resets the primary of the virtual network gateway in the specified resource group.
	BeginReset(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysResetOptions *VirtualNetworkGatewaysResetOptions) (*VirtualNetworkGatewayPollerResponse, error)
	// ResumeReset - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeReset(token string) (VirtualNetworkGatewayPoller, error)
	// BeginResetVpnClientSharedKey - Resets the VPN client shared key of the virtual network gateway in the specified resource group.
	BeginResetVpnClientSharedKey(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*HTTPPollerResponse, error)
	// ResumeResetVpnClientSharedKey - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeResetVpnClientSharedKey(token string) (HTTPPoller, error)
	// BeginSetVpnclientIPsecParameters - The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
	BeginSetVpnclientIPsecParameters(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, vpnclientIpsecParams VpnClientIPsecParameters) (*VpnClientIPsecParametersPollerResponse, error)
	// ResumeSetVpnclientIPsecParameters - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeSetVpnclientIPsecParameters(token string) (VpnClientIPsecParametersPoller, error)
	// BeginStartPacketCapture - Starts packet capture on virtual network gateway in the specified resource group.
	BeginStartPacketCapture(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysStartPacketCaptureOptions *VirtualNetworkGatewaysStartPacketCaptureOptions) (*StringPollerResponse, error)
	// ResumeStartPacketCapture - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStartPacketCapture(token string) (StringPoller, error)
	// BeginStopPacketCapture - Stops packet capture on virtual network gateway in the specified resource group.
	BeginStopPacketCapture(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnPacketCaptureStopParameters) (*StringPollerResponse, error)
	// ResumeStopPacketCapture - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStopPacketCapture(token string) (StringPoller, error)
	// SupportedVpnDevices - Gets a xml format representation for supported vpn devices.
	SupportedVpnDevices(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*StringResponse, error)
	// BeginUpdateTags - Updates a virtual network gateway tags.
	BeginUpdateTags(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters TagsObject) (*VirtualNetworkGatewayPollerResponse, error)
	// ResumeUpdateTags - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeUpdateTags(token string) (VirtualNetworkGatewayPoller, error)
	// VpnDeviceConfigurationScript - Gets a xml format representation for vpn device configuration script.
	VpnDeviceConfigurationScript(ctx context.Context, resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters VpnDeviceScriptParameters) (*StringResponse, error)
}

// virtualNetworkGatewaysOperations implements the VirtualNetworkGatewaysOperations interface.
type virtualNetworkGatewaysOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Creates or updates a virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (*VirtualNetworkGatewayPollerResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.CreateOrUpdate", "azure-async-operation", resp, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &virtualNetworkGatewayPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VirtualNetworkGatewayResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeCreateOrUpdate(token string) (VirtualNetworkGatewayPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.CreateOrUpdate", token, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &virtualNetworkGatewayPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *virtualNetworkGatewaysOperations) createOrUpdateCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VirtualNetworkGateway) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *virtualNetworkGatewaysOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusNoContent) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return &VirtualNetworkGatewayPollerResponse{RawResponse: resp.Response}, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *virtualNetworkGatewaysOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the specified virtual network gateway.
func (client *virtualNetworkGatewaysOperations) BeginDelete(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.Delete", "location", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *virtualNetworkGatewaysOperations) deleteCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *virtualNetworkGatewaysOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *virtualNetworkGatewaysOperations) deleteHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DisconnectVirtualNetworkGatewayVpnConnections - Disconnect vpn connections of virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginDisconnectVirtualNetworkGatewayVpnConnections(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, request P2SVpnConnectionRequest) (*HTTPPollerResponse, error) {
	req, err := client.disconnectVirtualNetworkGatewayVpnConnectionsCreateRequest(resourceGroupName, virtualNetworkGatewayName, request)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.disconnectVirtualNetworkGatewayVpnConnectionsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.DisconnectVirtualNetworkGatewayVpnConnections", "location", resp, client.disconnectVirtualNetworkGatewayVpnConnectionsHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeDisconnectVirtualNetworkGatewayVpnConnections(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.DisconnectVirtualNetworkGatewayVpnConnections", token, client.disconnectVirtualNetworkGatewayVpnConnectionsHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// disconnectVirtualNetworkGatewayVpnConnectionsCreateRequest creates the DisconnectVirtualNetworkGatewayVpnConnections request.
func (client *virtualNetworkGatewaysOperations) disconnectVirtualNetworkGatewayVpnConnectionsCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, request P2SVpnConnectionRequest) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/disconnectVirtualNetworkGatewayVpnConnections"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// disconnectVirtualNetworkGatewayVpnConnectionsHandleResponse handles the DisconnectVirtualNetworkGatewayVpnConnections response.
func (client *virtualNetworkGatewaysOperations) disconnectVirtualNetworkGatewayVpnConnectionsHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.disconnectVirtualNetworkGatewayVpnConnectionsHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// disconnectVirtualNetworkGatewayVpnConnectionsHandleError handles the DisconnectVirtualNetworkGatewayVpnConnections error response.
func (client *virtualNetworkGatewaysOperations) disconnectVirtualNetworkGatewayVpnConnectionsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GenerateVpnProfile - Generates VPN profile for P2S client of the virtual network gateway in the specified resource group. Used for IKEV2 and radius based authentication.
func (client *virtualNetworkGatewaysOperations) BeginGenerateVpnProfile(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*StringPollerResponse, error) {
	req, err := client.generateVpnProfileCreateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.generateVpnProfileHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GenerateVpnProfile", "location", resp, client.generateVpnProfileHandleError)
	if err != nil {
		return nil, err
	}
	poller := &stringPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*StringResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGenerateVpnProfile(token string) (StringPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GenerateVpnProfile", token, client.generateVpnProfileHandleError)
	if err != nil {
		return nil, err
	}
	return &stringPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// generateVpnProfileCreateRequest creates the GenerateVpnProfile request.
func (client *virtualNetworkGatewaysOperations) generateVpnProfileCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnprofile"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// generateVpnProfileHandleResponse handles the GenerateVpnProfile response.
func (client *virtualNetworkGatewaysOperations) generateVpnProfileHandleResponse(resp *azcore.Response) (*StringPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.generateVpnProfileHandleError(resp)
	}
	return &StringPollerResponse{RawResponse: resp.Response}, nil
}

// generateVpnProfileHandleError handles the GenerateVpnProfile error response.
func (client *virtualNetworkGatewaysOperations) generateVpnProfileHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Generatevpnclientpackage - Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginGeneratevpnclientpackage(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*StringPollerResponse, error) {
	req, err := client.generatevpnclientpackageCreateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.generatevpnclientpackageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.Generatevpnclientpackage", "location", resp, client.generatevpnclientpackageHandleError)
	if err != nil {
		return nil, err
	}
	poller := &stringPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*StringResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGeneratevpnclientpackage(token string) (StringPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.Generatevpnclientpackage", token, client.generatevpnclientpackageHandleError)
	if err != nil {
		return nil, err
	}
	return &stringPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// generatevpnclientpackageCreateRequest creates the Generatevpnclientpackage request.
func (client *virtualNetworkGatewaysOperations) generatevpnclientpackageCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VpnClientParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// generatevpnclientpackageHandleResponse handles the Generatevpnclientpackage response.
func (client *virtualNetworkGatewaysOperations) generatevpnclientpackageHandleResponse(resp *azcore.Response) (*StringPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.generatevpnclientpackageHandleError(resp)
	}
	return &StringPollerResponse{RawResponse: resp.Response}, nil
}

// generatevpnclientpackageHandleError handles the Generatevpnclientpackage error response.
func (client *virtualNetworkGatewaysOperations) generatevpnclientpackageHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the specified virtual network gateway by resource group.
func (client *virtualNetworkGatewaysOperations) Get(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VirtualNetworkGatewayResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *virtualNetworkGatewaysOperations) getCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *virtualNetworkGatewaysOperations) getHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := VirtualNetworkGatewayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualNetworkGateway)
}

// getHandleError handles the Get error response.
func (client *virtualNetworkGatewaysOperations) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetAdvertisedRoutes - This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.
func (client *virtualNetworkGatewaysOperations) BeginGetAdvertisedRoutes(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, peer string) (*GatewayRouteListResultPollerResponse, error) {
	req, err := client.getAdvertisedRoutesCreateRequest(resourceGroupName, virtualNetworkGatewayName, peer)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAdvertisedRoutesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetAdvertisedRoutes", "location", resp, client.getAdvertisedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	poller := &gatewayRouteListResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*GatewayRouteListResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetAdvertisedRoutes(token string) (GatewayRouteListResultPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetAdvertisedRoutes", token, client.getAdvertisedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	return &gatewayRouteListResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getAdvertisedRoutesCreateRequest creates the GetAdvertisedRoutes request.
func (client *virtualNetworkGatewaysOperations) getAdvertisedRoutesCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, peer string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("peer", peer)
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getAdvertisedRoutesHandleResponse handles the GetAdvertisedRoutes response.
func (client *virtualNetworkGatewaysOperations) getAdvertisedRoutesHandleResponse(resp *azcore.Response) (*GatewayRouteListResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getAdvertisedRoutesHandleError(resp)
	}
	return &GatewayRouteListResultPollerResponse{RawResponse: resp.Response}, nil
}

// getAdvertisedRoutesHandleError handles the GetAdvertisedRoutes error response.
func (client *virtualNetworkGatewaysOperations) getAdvertisedRoutesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetBgpPeerStatus - The GetBgpPeerStatus operation retrieves the status of all BGP peers.
func (client *virtualNetworkGatewaysOperations) BeginGetBgpPeerStatus(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysGetBgpPeerStatusOptions *VirtualNetworkGatewaysGetBgpPeerStatusOptions) (*BgpPeerStatusListResultPollerResponse, error) {
	req, err := client.getBgpPeerStatusCreateRequest(resourceGroupName, virtualNetworkGatewayName, virtualNetworkGatewaysGetBgpPeerStatusOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getBgpPeerStatusHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetBgpPeerStatus", "location", resp, client.getBgpPeerStatusHandleError)
	if err != nil {
		return nil, err
	}
	poller := &bgpPeerStatusListResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*BgpPeerStatusListResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetBgpPeerStatus(token string) (BgpPeerStatusListResultPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetBgpPeerStatus", token, client.getBgpPeerStatusHandleError)
	if err != nil {
		return nil, err
	}
	return &bgpPeerStatusListResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getBgpPeerStatusCreateRequest creates the GetBgpPeerStatus request.
func (client *virtualNetworkGatewaysOperations) getBgpPeerStatusCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysGetBgpPeerStatusOptions *VirtualNetworkGatewaysGetBgpPeerStatusOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if virtualNetworkGatewaysGetBgpPeerStatusOptions != nil && virtualNetworkGatewaysGetBgpPeerStatusOptions.Peer != nil {
		query.Set("peer", *virtualNetworkGatewaysGetBgpPeerStatusOptions.Peer)
	}
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getBgpPeerStatusHandleResponse handles the GetBgpPeerStatus response.
func (client *virtualNetworkGatewaysOperations) getBgpPeerStatusHandleResponse(resp *azcore.Response) (*BgpPeerStatusListResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getBgpPeerStatusHandleError(resp)
	}
	return &BgpPeerStatusListResultPollerResponse{RawResponse: resp.Response}, nil
}

// getBgpPeerStatusHandleError handles the GetBgpPeerStatus error response.
func (client *virtualNetworkGatewaysOperations) getBgpPeerStatusHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetLearnedRoutes - This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
func (client *virtualNetworkGatewaysOperations) BeginGetLearnedRoutes(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*GatewayRouteListResultPollerResponse, error) {
	req, err := client.getLearnedRoutesCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getLearnedRoutesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetLearnedRoutes", "location", resp, client.getLearnedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	poller := &gatewayRouteListResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*GatewayRouteListResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetLearnedRoutes(token string) (GatewayRouteListResultPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetLearnedRoutes", token, client.getLearnedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	return &gatewayRouteListResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getLearnedRoutesCreateRequest creates the GetLearnedRoutes request.
func (client *virtualNetworkGatewaysOperations) getLearnedRoutesCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getLearnedRoutesHandleResponse handles the GetLearnedRoutes response.
func (client *virtualNetworkGatewaysOperations) getLearnedRoutesHandleResponse(resp *azcore.Response) (*GatewayRouteListResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getLearnedRoutesHandleError(resp)
	}
	return &GatewayRouteListResultPollerResponse{RawResponse: resp.Response}, nil
}

// getLearnedRoutesHandleError handles the GetLearnedRoutes error response.
func (client *virtualNetworkGatewaysOperations) getLearnedRoutesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetVpnProfilePackageURL - Gets pre-generated VPN profile for P2S client of the virtual network gateway in the specified resource group. The profile needs to be generated first using generateVpnProfile.
func (client *virtualNetworkGatewaysOperations) BeginGetVpnProfilePackageURL(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*StringPollerResponse, error) {
	req, err := client.getVpnProfilePackageUrlCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getVpnProfilePackageUrlHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetVpnProfilePackageURL", "location", resp, client.getVpnProfilePackageUrlHandleError)
	if err != nil {
		return nil, err
	}
	poller := &stringPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*StringResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetVpnProfilePackageURL(token string) (StringPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetVpnProfilePackageURL", token, client.getVpnProfilePackageUrlHandleError)
	if err != nil {
		return nil, err
	}
	return &stringPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getVpnProfilePackageUrlCreateRequest creates the GetVpnProfilePackageURL request.
func (client *virtualNetworkGatewaysOperations) getVpnProfilePackageUrlCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnprofilepackageurl"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getVpnProfilePackageUrlHandleResponse handles the GetVpnProfilePackageURL response.
func (client *virtualNetworkGatewaysOperations) getVpnProfilePackageUrlHandleResponse(resp *azcore.Response) (*StringPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getVpnProfilePackageUrlHandleError(resp)
	}
	return &StringPollerResponse{RawResponse: resp.Response}, nil
}

// getVpnProfilePackageUrlHandleError handles the GetVpnProfilePackageURL error response.
func (client *virtualNetworkGatewaysOperations) getVpnProfilePackageUrlHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetVpnclientConnectionHealth - Get VPN client connection health detail per P2S client connection of the virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginGetVpnclientConnectionHealth(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VpnClientConnectionHealthDetailListResultPollerResponse, error) {
	req, err := client.getVpnclientConnectionHealthCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getVpnclientConnectionHealthHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetVpnclientConnectionHealth", "location", resp, client.getVpnclientConnectionHealthHandleError)
	if err != nil {
		return nil, err
	}
	poller := &vpnClientConnectionHealthDetailListResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VpnClientConnectionHealthDetailListResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetVpnclientConnectionHealth(token string) (VpnClientConnectionHealthDetailListResultPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetVpnclientConnectionHealth", token, client.getVpnclientConnectionHealthHandleError)
	if err != nil {
		return nil, err
	}
	return &vpnClientConnectionHealthDetailListResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getVpnclientConnectionHealthCreateRequest creates the GetVpnclientConnectionHealth request.
func (client *virtualNetworkGatewaysOperations) getVpnclientConnectionHealthCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getVpnClientConnectionHealth"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getVpnclientConnectionHealthHandleResponse handles the GetVpnclientConnectionHealth response.
func (client *virtualNetworkGatewaysOperations) getVpnclientConnectionHealthHandleResponse(resp *azcore.Response) (*VpnClientConnectionHealthDetailListResultPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.getVpnclientConnectionHealthHandleError(resp)
	}
	return &VpnClientConnectionHealthDetailListResultPollerResponse{RawResponse: resp.Response}, nil
}

// getVpnclientConnectionHealthHandleError handles the GetVpnclientConnectionHealth error response.
func (client *virtualNetworkGatewaysOperations) getVpnclientConnectionHealthHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetVpnclientIPsecParameters - The Get VpnclientIpsecParameters operation retrieves information about the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
func (client *virtualNetworkGatewaysOperations) BeginGetVpnclientIPsecParameters(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*VpnClientIPsecParametersPollerResponse, error) {
	req, err := client.getVpnclientIPsecParametersCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getVpnclientIPsecParametersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.GetVpnclientIPsecParameters", "location", resp, client.getVpnclientIPsecParametersHandleError)
	if err != nil {
		return nil, err
	}
	poller := &vpnClientIPsecParametersPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VpnClientIPsecParametersResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeGetVpnclientIPsecParameters(token string) (VpnClientIPsecParametersPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.GetVpnclientIPsecParameters", token, client.getVpnclientIPsecParametersHandleError)
	if err != nil {
		return nil, err
	}
	return &vpnClientIPsecParametersPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// getVpnclientIPsecParametersCreateRequest creates the GetVpnclientIPsecParameters request.
func (client *virtualNetworkGatewaysOperations) getVpnclientIPsecParametersCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getvpnclientipsecparameters"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// getVpnclientIPsecParametersHandleResponse handles the GetVpnclientIPsecParameters response.
func (client *virtualNetworkGatewaysOperations) getVpnclientIPsecParametersHandleResponse(resp *azcore.Response) (*VpnClientIPsecParametersPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.getVpnclientIPsecParametersHandleError(resp)
	}
	return &VpnClientIPsecParametersPollerResponse{RawResponse: resp.Response}, nil
}

// getVpnclientIPsecParametersHandleError handles the GetVpnclientIPsecParameters error response.
func (client *virtualNetworkGatewaysOperations) getVpnclientIPsecParametersHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Gets all virtual network gateways by resource group.
func (client *virtualNetworkGatewaysOperations) List(resourceGroupName string) (VirtualNetworkGatewayListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	return &virtualNetworkGatewayListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *VirtualNetworkGatewayListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.VirtualNetworkGatewayListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.VirtualNetworkGatewayListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *virtualNetworkGatewaysOperations) listCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *virtualNetworkGatewaysOperations) listHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := VirtualNetworkGatewayListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualNetworkGatewayListResult)
}

// listHandleError handles the List error response.
func (client *virtualNetworkGatewaysOperations) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListConnections - Gets all the connections in a virtual network gateway.
func (client *virtualNetworkGatewaysOperations) ListConnections(resourceGroupName string, virtualNetworkGatewayName string) (VirtualNetworkGatewayListConnectionsResultPager, error) {
	req, err := client.listConnectionsCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	return &virtualNetworkGatewayListConnectionsResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listConnectionsHandleResponse,
		advancer: func(resp *VirtualNetworkGatewayListConnectionsResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.VirtualNetworkGatewayListConnectionsResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.VirtualNetworkGatewayListConnectionsResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listConnectionsCreateRequest creates the ListConnections request.
func (client *virtualNetworkGatewaysOperations) listConnectionsCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/connections"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listConnectionsHandleResponse handles the ListConnections response.
func (client *virtualNetworkGatewaysOperations) listConnectionsHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayListConnectionsResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listConnectionsHandleError(resp)
	}
	result := VirtualNetworkGatewayListConnectionsResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualNetworkGatewayListConnectionsResult)
}

// listConnectionsHandleError handles the ListConnections error response.
func (client *virtualNetworkGatewaysOperations) listConnectionsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Reset - Resets the primary of the virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginReset(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysResetOptions *VirtualNetworkGatewaysResetOptions) (*VirtualNetworkGatewayPollerResponse, error) {
	req, err := client.resetCreateRequest(resourceGroupName, virtualNetworkGatewayName, virtualNetworkGatewaysResetOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.resetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.Reset", "location", resp, client.resetHandleError)
	if err != nil {
		return nil, err
	}
	poller := &virtualNetworkGatewayPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VirtualNetworkGatewayResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeReset(token string) (VirtualNetworkGatewayPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.Reset", token, client.resetHandleError)
	if err != nil {
		return nil, err
	}
	return &virtualNetworkGatewayPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// resetCreateRequest creates the Reset request.
func (client *virtualNetworkGatewaysOperations) resetCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysResetOptions *VirtualNetworkGatewaysResetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if virtualNetworkGatewaysResetOptions != nil && virtualNetworkGatewaysResetOptions.GatewayVip != nil {
		query.Set("gatewayVip", *virtualNetworkGatewaysResetOptions.GatewayVip)
	}
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// resetHandleResponse handles the Reset response.
func (client *virtualNetworkGatewaysOperations) resetHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.resetHandleError(resp)
	}
	return &VirtualNetworkGatewayPollerResponse{RawResponse: resp.Response}, nil
}

// resetHandleError handles the Reset error response.
func (client *virtualNetworkGatewaysOperations) resetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ResetVpnClientSharedKey - Resets the VPN client shared key of the virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginResetVpnClientSharedKey(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*HTTPPollerResponse, error) {
	req, err := client.resetVpnClientSharedKeyCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.resetVpnClientSharedKeyHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.ResetVpnClientSharedKey", "location", resp, client.resetVpnClientSharedKeyHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeResetVpnClientSharedKey(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.ResetVpnClientSharedKey", token, client.resetVpnClientSharedKeyHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// resetVpnClientSharedKeyCreateRequest creates the ResetVpnClientSharedKey request.
func (client *virtualNetworkGatewaysOperations) resetVpnClientSharedKeyCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/resetvpnclientsharedkey"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// resetVpnClientSharedKeyHandleResponse handles the ResetVpnClientSharedKey response.
func (client *virtualNetworkGatewaysOperations) resetVpnClientSharedKeyHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.resetVpnClientSharedKeyHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// resetVpnClientSharedKeyHandleError handles the ResetVpnClientSharedKey error response.
func (client *virtualNetworkGatewaysOperations) resetVpnClientSharedKeyHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// SetVpnclientIPsecParameters - The Set VpnclientIpsecParameters operation sets the vpnclient ipsec policy for P2S client of virtual network gateway in the specified resource group through Network resource provider.
func (client *virtualNetworkGatewaysOperations) BeginSetVpnclientIPsecParameters(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, vpnclientIpsecParams VpnClientIPsecParameters) (*VpnClientIPsecParametersPollerResponse, error) {
	req, err := client.setVpnclientIPsecParametersCreateRequest(resourceGroupName, virtualNetworkGatewayName, vpnclientIpsecParams)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.setVpnclientIPsecParametersHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.SetVpnclientIPsecParameters", "location", resp, client.setVpnclientIPsecParametersHandleError)
	if err != nil {
		return nil, err
	}
	poller := &vpnClientIPsecParametersPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VpnClientIPsecParametersResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeSetVpnclientIPsecParameters(token string) (VpnClientIPsecParametersPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.SetVpnclientIPsecParameters", token, client.setVpnclientIPsecParametersHandleError)
	if err != nil {
		return nil, err
	}
	return &vpnClientIPsecParametersPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// setVpnclientIPsecParametersCreateRequest creates the SetVpnclientIPsecParameters request.
func (client *virtualNetworkGatewaysOperations) setVpnclientIPsecParametersCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, vpnclientIpsecParams VpnClientIPsecParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/setvpnclientipsecparameters"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(vpnclientIpsecParams)
}

// setVpnclientIPsecParametersHandleResponse handles the SetVpnclientIPsecParameters response.
func (client *virtualNetworkGatewaysOperations) setVpnclientIPsecParametersHandleResponse(resp *azcore.Response) (*VpnClientIPsecParametersPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.setVpnclientIPsecParametersHandleError(resp)
	}
	return &VpnClientIPsecParametersPollerResponse{RawResponse: resp.Response}, nil
}

// setVpnclientIPsecParametersHandleError handles the SetVpnclientIPsecParameters error response.
func (client *virtualNetworkGatewaysOperations) setVpnclientIPsecParametersHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StartPacketCapture - Starts packet capture on virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginStartPacketCapture(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysStartPacketCaptureOptions *VirtualNetworkGatewaysStartPacketCaptureOptions) (*StringPollerResponse, error) {
	req, err := client.startPacketCaptureCreateRequest(resourceGroupName, virtualNetworkGatewayName, virtualNetworkGatewaysStartPacketCaptureOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startPacketCaptureHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.StartPacketCapture", "location", resp, client.startPacketCaptureHandleError)
	if err != nil {
		return nil, err
	}
	poller := &stringPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*StringResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeStartPacketCapture(token string) (StringPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.StartPacketCapture", token, client.startPacketCaptureHandleError)
	if err != nil {
		return nil, err
	}
	return &stringPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// startPacketCaptureCreateRequest creates the StartPacketCapture request.
func (client *virtualNetworkGatewaysOperations) startPacketCaptureCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, virtualNetworkGatewaysStartPacketCaptureOptions *VirtualNetworkGatewaysStartPacketCaptureOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/startPacketCapture"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if virtualNetworkGatewaysStartPacketCaptureOptions != nil {
		return req, req.MarshalAsJSON(virtualNetworkGatewaysStartPacketCaptureOptions.Parameters)
	}
	return req, nil
}

// startPacketCaptureHandleResponse handles the StartPacketCapture response.
func (client *virtualNetworkGatewaysOperations) startPacketCaptureHandleResponse(resp *azcore.Response) (*StringPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.startPacketCaptureHandleError(resp)
	}
	return &StringPollerResponse{RawResponse: resp.Response}, nil
}

// startPacketCaptureHandleError handles the StartPacketCapture error response.
func (client *virtualNetworkGatewaysOperations) startPacketCaptureHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// StopPacketCapture - Stops packet capture on virtual network gateway in the specified resource group.
func (client *virtualNetworkGatewaysOperations) BeginStopPacketCapture(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters VpnPacketCaptureStopParameters) (*StringPollerResponse, error) {
	req, err := client.stopPacketCaptureCreateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.stopPacketCaptureHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.StopPacketCapture", "location", resp, client.stopPacketCaptureHandleError)
	if err != nil {
		return nil, err
	}
	poller := &stringPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*StringResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeStopPacketCapture(token string) (StringPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.StopPacketCapture", token, client.stopPacketCaptureHandleError)
	if err != nil {
		return nil, err
	}
	return &stringPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// stopPacketCaptureCreateRequest creates the StopPacketCapture request.
func (client *virtualNetworkGatewaysOperations) stopPacketCaptureCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters VpnPacketCaptureStopParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/stopPacketCapture"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// stopPacketCaptureHandleResponse handles the StopPacketCapture response.
func (client *virtualNetworkGatewaysOperations) stopPacketCaptureHandleResponse(resp *azcore.Response) (*StringPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.stopPacketCaptureHandleError(resp)
	}
	return &StringPollerResponse{RawResponse: resp.Response}, nil
}

// stopPacketCaptureHandleError handles the StopPacketCapture error response.
func (client *virtualNetworkGatewaysOperations) stopPacketCaptureHandleError(resp *azcore.Response) error {
	var err Error
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// SupportedVpnDevices - Gets a xml format representation for supported vpn devices.
func (client *virtualNetworkGatewaysOperations) SupportedVpnDevices(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string) (*StringResponse, error) {
	req, err := client.supportedVpnDevicesCreateRequest(resourceGroupName, virtualNetworkGatewayName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.supportedVpnDevicesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// supportedVpnDevicesCreateRequest creates the SupportedVpnDevices request.
func (client *virtualNetworkGatewaysOperations) supportedVpnDevicesCreateRequest(resourceGroupName string, virtualNetworkGatewayName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/supportedvpndevices"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// supportedVpnDevicesHandleResponse handles the SupportedVpnDevices response.
func (client *virtualNetworkGatewaysOperations) supportedVpnDevicesHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.supportedVpnDevicesHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// supportedVpnDevicesHandleError handles the SupportedVpnDevices error response.
func (client *virtualNetworkGatewaysOperations) supportedVpnDevicesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// UpdateTags - Updates a virtual network gateway tags.
func (client *virtualNetworkGatewaysOperations) BeginUpdateTags(ctx context.Context, resourceGroupName string, virtualNetworkGatewayName string, parameters TagsObject) (*VirtualNetworkGatewayPollerResponse, error) {
	req, err := client.updateTagsCreateRequest(resourceGroupName, virtualNetworkGatewayName, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateTagsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualNetworkGatewaysOperations.UpdateTags", "azure-async-operation", resp, client.updateTagsHandleError)
	if err != nil {
		return nil, err
	}
	poller := &virtualNetworkGatewayPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VirtualNetworkGatewayResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualNetworkGatewaysOperations) ResumeUpdateTags(token string) (VirtualNetworkGatewayPoller, error) {
	pt, err := resumePollingTracker("virtualNetworkGatewaysOperations.UpdateTags", token, client.updateTagsHandleError)
	if err != nil {
		return nil, err
	}
	return &virtualNetworkGatewayPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *virtualNetworkGatewaysOperations) updateTagsCreateRequest(resourceGroupName string, virtualNetworkGatewayName string, parameters TagsObject) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayName}", url.PathEscape(virtualNetworkGatewayName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *virtualNetworkGatewaysOperations) updateTagsHandleResponse(resp *azcore.Response) (*VirtualNetworkGatewayPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.updateTagsHandleError(resp)
	}
	return &VirtualNetworkGatewayPollerResponse{RawResponse: resp.Response}, nil
}

// updateTagsHandleError handles the UpdateTags error response.
func (client *virtualNetworkGatewaysOperations) updateTagsHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// VpnDeviceConfigurationScript - Gets a xml format representation for vpn device configuration script.
func (client *virtualNetworkGatewaysOperations) VpnDeviceConfigurationScript(ctx context.Context, resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters VpnDeviceScriptParameters) (*StringResponse, error) {
	req, err := client.vpnDeviceConfigurationScriptCreateRequest(resourceGroupName, virtualNetworkGatewayConnectionName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.vpnDeviceConfigurationScriptHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// vpnDeviceConfigurationScriptCreateRequest creates the VpnDeviceConfigurationScript request.
func (client *virtualNetworkGatewaysOperations) vpnDeviceConfigurationScriptCreateRequest(resourceGroupName string, virtualNetworkGatewayConnectionName string, parameters VpnDeviceScriptParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/vpndeviceconfigurationscript"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualNetworkGatewayConnectionName}", url.PathEscape(virtualNetworkGatewayConnectionName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// vpnDeviceConfigurationScriptHandleResponse handles the VpnDeviceConfigurationScript response.
func (client *virtualNetworkGatewaysOperations) vpnDeviceConfigurationScriptHandleResponse(resp *azcore.Response) (*StringResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.vpnDeviceConfigurationScriptHandleError(resp)
	}
	result := StringResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Value)
}

// vpnDeviceConfigurationScriptHandleError handles the VpnDeviceConfigurationScript error response.
func (client *virtualNetworkGatewaysOperations) vpnDeviceConfigurationScriptHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
