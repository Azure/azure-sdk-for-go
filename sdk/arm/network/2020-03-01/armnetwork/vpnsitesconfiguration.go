// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// VpnSitesConfigurationOperations contains the methods for the VpnSitesConfiguration group.
type VpnSitesConfigurationOperations interface {
	// BeginDownload - Gives the sas-url to download the configurations for vpn-sites in a resource group.
	BeginDownload(ctx context.Context, resourceGroupName string, virtualWanName string, request GetVpnSitesConfigurationRequest) (*HTTPPollerResponse, error)
	// ResumeDownload - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDownload(token string) (HTTPPoller, error)
}

// vpnSitesConfigurationOperations implements the VpnSitesConfigurationOperations interface.
type vpnSitesConfigurationOperations struct {
	*Client
	subscriptionID string
}

// Download - Gives the sas-url to download the configurations for vpn-sites in a resource group.
func (client *vpnSitesConfigurationOperations) BeginDownload(ctx context.Context, resourceGroupName string, virtualWanName string, request GetVpnSitesConfigurationRequest) (*HTTPPollerResponse, error) {
	req, err := client.downloadCreateRequest(resourceGroupName, virtualWanName, request)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.downloadHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("vpnSitesConfigurationOperations.Download", "location", resp, client.downloadHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *vpnSitesConfigurationOperations) ResumeDownload(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("vpnSitesConfigurationOperations.Download", token, client.downloadHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// downloadCreateRequest creates the Download request.
func (client *vpnSitesConfigurationOperations) downloadCreateRequest(resourceGroupName string, virtualWanName string, request GetVpnSitesConfigurationRequest) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualWans/{virtualWANName}/vpnConfiguration"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualWANName}", url.PathEscape(virtualWanName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2020-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(request)
}

// downloadHandleResponse handles the Download response.
func (client *vpnSitesConfigurationOperations) downloadHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.downloadHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// downloadHandleError handles the Download error response.
func (client *vpnSitesConfigurationOperations) downloadHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
