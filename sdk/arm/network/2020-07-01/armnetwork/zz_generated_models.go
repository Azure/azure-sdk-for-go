// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// AAD Vpn authentication type related parameters.
type AadAuthenticationParameters struct {
	// AAD Vpn authentication parameter AAD audience.
	AadAudience *string `json:"aadAudience,omitempty"`

	// AAD Vpn authentication parameter AAD issuer.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	// AAD Vpn authentication parameter AAD tenant.
	AadTenant *string `json:"aadTenant,omitempty"`
}

// AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
type AddressSpace struct {
	// A list of address blocks reserved for this virtual network in CIDR notation.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`
}

// Application gateway resource.
type ApplicationGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The identity of the application gateway, if configured.
	IDentity *ManagedServiceIDentity `json:"identity,omitempty"`

	// Properties of the application gateway.
	Properties *ApplicationGatewayPropertiesFormat `json:"properties,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Authentication certificates of an application gateway.
type ApplicationGatewayAuthenticationCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the authentication certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway authentication certificate.
	Properties *ApplicationGatewayAuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Authentication certificates properties of an application gateway.
type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string `json:"data,omitempty"`

	// READ-ONLY; The provisioning state of the authentication certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Application Gateway autoscale configuration.
type ApplicationGatewayAutoscaleConfiguration struct {
	// Upper bound on number of Application Gateway capacity.
	MaxCapacity *int32 `json:"maxCapacity,omitempty"`

	// Lower bound on number of Application Gateway capacity.
	MinCapacity *int32 `json:"minCapacity,omitempty"`
}

// Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSslOptions struct {
	Resource
	// Properties of the application gateway available SSL options.
	Properties *ApplicationGatewayAvailableSslOptionsPropertiesFormat `json:"properties,omitempty"`
}

// Properties of ApplicationGatewayAvailableSslOptions.
type ApplicationGatewayAvailableSslOptionsPropertiesFormat struct {
	// List of available Ssl cipher suites.
	AvailableCipherSuites *[]ApplicationGatewaySslCipherSuite `json:"availableCipherSuites,omitempty"`

	// List of available Ssl protocols.
	AvailableProtocols *[]ApplicationGatewaySslProtocol `json:"availableProtocols,omitempty"`

	// Name of the Ssl predefined policy applied by default to application gateway.
	DefaultPolicy *ApplicationGatewaySslPolicyName `json:"defaultPolicy,omitempty"`

	// List of available Ssl predefined policy.
	PredefinedPolicies *[]SubResource `json:"predefinedPolicies,omitempty"`
}

// ApplicationGatewayAvailableSslOptionsResponse is the response envelope for operations that return a ApplicationGatewayAvailableSslOptions type.
type ApplicationGatewayAvailableSslOptionsResponse struct {
	// Response for ApplicationGatewayAvailableSslOptions API service call.
	ApplicationGatewayAvailableSslOptions *ApplicationGatewayAvailableSslOptions

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSslPredefinedPolicies struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of available Ssl predefined policy.
	Value *[]ApplicationGatewaySslPredefinedPolicy `json:"value,omitempty"`
}

// ApplicationGatewayAvailableSslPredefinedPoliciesResponse is the response envelope for operations that return a ApplicationGatewayAvailableSslPredefinedPolicies
// type.
type ApplicationGatewayAvailableSslPredefinedPoliciesResponse struct {
	// Response for ApplicationGatewayAvailableSslOptions API service call.
	ApplicationGatewayAvailableSslPredefinedPolicies *ApplicationGatewayAvailableSslPredefinedPolicies

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ApplicationGatewayAvailableWafRuleSets API service call.
type ApplicationGatewayAvailableWafRuleSetsResult struct {
	// The list of application gateway rule sets.
	Value *[]ApplicationGatewayFirewallRuleSet `json:"value,omitempty"`
}

// ApplicationGatewayAvailableWafRuleSetsResultResponse is the response envelope for operations that return a ApplicationGatewayAvailableWafRuleSetsResult
// type.
type ApplicationGatewayAvailableWafRuleSetsResultResponse struct {
	// Response for ApplicationGatewayAvailableWafRuleSets API service call.
	ApplicationGatewayAvailableWafRuleSetsResult *ApplicationGatewayAvailableWafRuleSetsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Backend address of an application gateway.
type ApplicationGatewayBackendAddress struct {
	// Fully qualified domain name (FQDN).
	Fqdn *string `json:"fqdn,omitempty"`

	// IP address.
	IPAddress *string `json:"ipAddress,omitempty"`
}

// Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPool struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the backend address pool that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway backend address pool.
	Properties *ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
	// Backend addresses.
	BackendAddresses *[]ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`

	// READ-ONLY; Collection of references to IPs defined in network interfaces.
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration `json:"backendIPConfigurations,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the backend address pool resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettings struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the backend http settings that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway backend HTTP settings.
	Properties *ApplicationGatewayBackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
	// Cookie name to use for the affinity cookie.
	AffinityCookieName *string `json:"affinityCookieName,omitempty"`

	// Array of references to application gateway authentication certificates.
	AuthenticationCertificates *[]SubResource `json:"authenticationCertificates,omitempty"`

	// Connection draining of the backend http settings resource.
	ConnectionDraining *ApplicationGatewayConnectionDraining `json:"connectionDraining,omitempty"`

	// Cookie based affinity.
	CookieBasedAffinity *ApplicationGatewayCookieBasedAffinity `json:"cookieBasedAffinity,omitempty"`

	// Host header to be sent to the backend servers.
	HostName *string `json:"hostName,omitempty"`

	// Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
	Path *string `json:"path,omitempty"`

	// Whether to pick host header should be picked from the host name of the backend server. Default value is false.
	PickHostNameFromBackendAddress *bool `json:"pickHostNameFromBackendAddress,omitempty"`

	// The destination port on the backend.
	Port *int32 `json:"port,omitempty"`

	// Probe resource of an application gateway.
	Probe *SubResource `json:"probe,omitempty"`

	// Whether the probe is enabled. Default value is false.
	ProbeEnabled *bool `json:"probeEnabled,omitempty"`

	// The protocol used to communicate with the backend.
	Protocol *ApplicationGatewayProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the backend HTTP settings resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1
	// second to 86400 seconds.
	RequestTimeout *int32 `json:"requestTimeout,omitempty"`

	// Array of references to application gateway trusted root certificates.
	TrustedRootCertificates *[]SubResource `json:"trustedRootCertificates,omitempty"`
}

// Response for ApplicationGatewayBackendHealth API service call.
type ApplicationGatewayBackendHealth struct {
	// A list of ApplicationGatewayBackendHealthPool resources.
	BackendAddressPools *[]ApplicationGatewayBackendHealthPool `json:"backendAddressPools,omitempty"`
}

// Application gateway BackendHealthHttp settings.
type ApplicationGatewayBackendHealthHTTPSettings struct {
	// Reference to an ApplicationGatewayBackendHttpSettings resource.
	BackendHTTPSettings *ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettings,omitempty"`

	// List of ApplicationGatewayBackendHealthServer resources.
	Servers *[]ApplicationGatewayBackendHealthServer `json:"servers,omitempty"`
}

// Result of on demand test probe.
type ApplicationGatewayBackendHealthOnDemand struct {
	// Reference to an ApplicationGatewayBackendAddressPool resource.
	BackendAddressPool *ApplicationGatewayBackendAddressPool `json:"backendAddressPool,omitempty"`

	// Application gateway BackendHealthHttp settings.
	BackendHealthHTTPSettings *ApplicationGatewayBackendHealthHTTPSettings `json:"backendHealthHttpSettings,omitempty"`
}

// ApplicationGatewayBackendHealthOnDemandPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealthOnDemand
// type.
type ApplicationGatewayBackendHealthOnDemandPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayBackendHealthOnDemandResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayBackendHealthOnDemandPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthOnDemandResponse is the response envelope for operations that return a ApplicationGatewayBackendHealthOnDemand type.
type ApplicationGatewayBackendHealthOnDemandResponse struct {
	// Result of on demand test probe.
	ApplicationGatewayBackendHealthOnDemand *ApplicationGatewayBackendHealthOnDemand

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayBackendHealthResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayBackendHealthPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Application gateway BackendHealth pool.
type ApplicationGatewayBackendHealthPool struct {
	// Reference to an ApplicationGatewayBackendAddressPool resource.
	BackendAddressPool *ApplicationGatewayBackendAddressPool `json:"backendAddressPool,omitempty"`

	// List of ApplicationGatewayBackendHealthHttpSettings resources.
	BackendHTTPSettingsCollection *[]ApplicationGatewayBackendHealthHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
}

// ApplicationGatewayBackendHealthResponse is the response envelope for operations that return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthResponse struct {
	// Response for ApplicationGatewayBackendHealth API service call.
	ApplicationGatewayBackendHealth *ApplicationGatewayBackendHealth

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Application gateway backendhealth http settings.
type ApplicationGatewayBackendHealthServer struct {
	// IP address or FQDN of backend server.
	Address *string `json:"address,omitempty"`

	// Health of backend server.
	Health *ApplicationGatewayBackendHealthServerHealth `json:"health,omitempty"`

	// Health Probe Log.
	HealthProbeLog *string `json:"healthProbeLog,omitempty"`

	// Reference to IP configuration of backend server.
	IPConfiguration *NetworkInterfaceIPConfiguration `json:"ipConfiguration,omitempty"`
}

// Application gateway client authentication configuration.
type ApplicationGatewayClientAuthConfiguration struct {
	// Verify client certificate issuer name on the application gateway.
	VerifyClientCertIssuerDn *bool `json:"verifyClientCertIssuerDN,omitempty"`
}

// Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
type ApplicationGatewayConnectionDraining struct {
	// The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
	DrainTimeoutInSec *int32 `json:"drainTimeoutInSec,omitempty"`

	// Whether connection draining is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`
}

// Customer error of an application gateway.
type ApplicationGatewayCustomError struct {
	// Error page URL of the application gateway customer error.
	CustomErrorPageURL *string `json:"customErrorPageUrl,omitempty"`

	// Status code of the application gateway customer error.
	StatusCode *ApplicationGatewayCustomErrorStatusCode `json:"statusCode,omitempty"`
}

// Allows to disable rules within a rule group or an entire rule group.
type ApplicationGatewayFirewallDisabledRuleGroup struct {
	// The name of the rule group that will be disabled.
	RuleGroupName *string `json:"ruleGroupName,omitempty"`

	// The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
	Rules *[]int32 `json:"rules,omitempty"`
}

// Allow to exclude some variable satisfy the condition for the WAF check.
type ApplicationGatewayFirewallExclusion struct {
	// The variable to be excluded.
	MatchVariable *string `json:"matchVariable,omitempty"`

	// When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
	Selector *string `json:"selector,omitempty"`

	// When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
	SelectorMatchOperator *string `json:"selectorMatchOperator,omitempty"`
}

// A web application firewall rule.
type ApplicationGatewayFirewallRule struct {
	// The description of the web application firewall rule.
	Description *string `json:"description,omitempty"`

	// The identifier of the web application firewall rule.
	RuleID *int32 `json:"ruleId,omitempty"`
}

// A web application firewall rule group.
type ApplicationGatewayFirewallRuleGroup struct {
	// The description of the web application firewall rule group.
	Description *string `json:"description,omitempty"`

	// The name of the web application firewall rule group.
	RuleGroupName *string `json:"ruleGroupName,omitempty"`

	// The rules of the web application firewall rule group.
	Rules *[]ApplicationGatewayFirewallRule `json:"rules,omitempty"`
}

// A web application firewall rule set.
type ApplicationGatewayFirewallRuleSet struct {
	Resource
	// Properties of the application gateway firewall rule set.
	Properties *ApplicationGatewayFirewallRuleSetPropertiesFormat `json:"properties,omitempty"`
}

// Properties of the web application firewall rule set.
type ApplicationGatewayFirewallRuleSetPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the web application firewall rule set.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The rule groups of the web application firewall rule set.
	RuleGroups *[]ApplicationGatewayFirewallRuleGroup `json:"ruleGroups,omitempty"`

	// The type of the web application firewall rule set.
	RuleSetType *string `json:"ruleSetType,omitempty"`

	// The version of the web application firewall rule set type.
	RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
}

// Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the frontend IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway frontend IP configuration.
	Properties *ApplicationGatewayFrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
	// PrivateIPAddress of the network interface IP Configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// Reference to the application gateway private link configuration.
	PrivateLinkConfiguration *SubResource `json:"privateLinkConfiguration,omitempty"`

	// READ-ONLY; The provisioning state of the frontend IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference to the PublicIP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// Reference to the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Frontend port of an application gateway.
type ApplicationGatewayFrontendPort struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the frontend port that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway frontend port.
	Properties *ApplicationGatewayFrontendPortPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of Frontend port of an application gateway.
type ApplicationGatewayFrontendPortPropertiesFormat struct {
	// Frontend port.
	Port *int32 `json:"port,omitempty"`

	// READ-ONLY; The provisioning state of the frontend port resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Http listener of an application gateway.
type ApplicationGatewayHTTPListener struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the HTTP listener that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway HTTP listener.
	Properties *ApplicationGatewayHTTPListenerPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of HTTP listener of an application gateway.
type ApplicationGatewayHTTPListenerPropertiesFormat struct {
	// Custom error configurations of the HTTP listener.
	CustomErrorConfigurations *[]ApplicationGatewayCustomError `json:"customErrorConfigurations,omitempty"`

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`

	// Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// Frontend port resource of an application gateway.
	FrontendPort *SubResource `json:"frontendPort,omitempty"`

	// Host name of HTTP listener.
	HostName *string `json:"hostName,omitempty"`

	// List of Host names for HTTP Listener that allows special wildcard characters as well.
	HostNames *[]string `json:"hostNames,omitempty"`

	// Protocol of the HTTP listener.
	Protocol *ApplicationGatewayProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the HTTP listener resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Applicable only if protocol is https. Enables SNI for multi-hosting.
	RequireServerNameIndication *bool `json:"requireServerNameIndication,omitempty"`

	// SSL certificate resource of an application gateway.
	SslCertificate *SubResource `json:"sslCertificate,omitempty"`

	// SSL profile resource of the application gateway.
	SslProfile *SubResource `json:"sslProfile,omitempty"`
}

// Header configuration of the Actions set in Application Gateway.
type ApplicationGatewayHeaderConfiguration struct {
	// Header name of the header configuration.
	HeaderName *string `json:"headerName,omitempty"`

	// Header value of the header configuration.
	HeaderValue *string `json:"headerValue,omitempty"`
}

// IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
type ApplicationGatewayIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the IP configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway IP configuration.
	Properties *ApplicationGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of IP configuration of an application gateway.
type ApplicationGatewayIPConfigurationPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the application gateway IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference to the subnet resource. A subnet from where application gateway gets its private address.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Response for ListApplicationGateways API service call.
type ApplicationGatewayListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of an application gateways in a resource group.
	Value *[]ApplicationGateway `json:"value,omitempty"`
}

// ApplicationGatewayListResultResponse is the response envelope for operations that return a ApplicationGatewayListResult type.
type ApplicationGatewayListResultResponse struct {
	// Response for ListApplicationGateways API service call.
	ApplicationGatewayListResult *ApplicationGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Details of on demand test probe request.
type ApplicationGatewayOnDemandProbe struct {
	// Reference to backend pool of application gateway to which probe request will be sent.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// Reference to backend http setting of application gateway to be used for test probe.
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`

	// Host name to send the probe to.
	Host *string `json:"host,omitempty"`

	// Criterion for classifying a healthy probe response.
	Match *ApplicationGatewayProbeHealthResponseMatch `json:"match,omitempty"`

	// Relative path of probe. Valid path starts from '/'. Probe is sent to ://:.
	Path *string `json:"path,omitempty"`

	// Whether the host header should be picked from the backend http settings. Default value is false.
	PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty"`

	// The protocol used for the probe.
	Protocol *ApplicationGatewayProtocol `json:"protocol,omitempty"`

	// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second
	// to 86400 seconds.
	Timeout *int32 `json:"timeout,omitempty"`
}

// Path rule of URL path map of an application gateway.
type ApplicationGatewayPathRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the path rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway path rule.
	Properties *ApplicationGatewayPathRulePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of path rule of an application gateway.
type ApplicationGatewayPathRulePropertiesFormat struct {
	// Backend address pool resource of URL path map path rule.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// Backend http settings resource of URL path map path rule.
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`

	// Path rules of URL path map.
	Paths *[]string `json:"paths,omitempty"`

	// READ-ONLY; The provisioning state of the path rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Redirect configuration resource of URL path map path rule.
	RedirectConfiguration *SubResource `json:"redirectConfiguration,omitempty"`

	// Rewrite rule set resource of URL path map path rule.
	RewriteRuleSet *SubResource `json:"rewriteRuleSet,omitempty"`
}

// ApplicationGatewayPollerResponse is the response envelope for operations that asynchronously return a ApplicationGateway type.
type ApplicationGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Private Endpoint connection on an application gateway.
type ApplicationGatewayPrivateEndpointConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the private endpoint connection on an application gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway private endpoint connection.
	Properties *ApplicationGatewayPrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.
type ApplicationGatewayPrivateEndpointConnectionListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of private endpoint connections on an application gateway.
	Value *[]ApplicationGatewayPrivateEndpointConnection `json:"value,omitempty"`
}

// ApplicationGatewayPrivateEndpointConnectionListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnectionListResult
// type.
type ApplicationGatewayPrivateEndpointConnectionListResultResponse struct {
	// Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.
	ApplicationGatewayPrivateEndpointConnectionListResult *ApplicationGatewayPrivateEndpointConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateEndpointConnectionPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ApplicationGatewayPrivateEndpointConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayPrivateEndpointConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of Private Link Resource of an application gateway.
type ApplicationGatewayPrivateEndpointConnectionProperties struct {
	// READ-ONLY; The consumer link id.
	LinkIDentifier *string `json:"linkIdentifier,omitempty" azure:"ro"`

	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty" azure:"ro"`

	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; The provisioning state of the application gateway private endpoint connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ApplicationGatewayPrivateEndpointConnectionResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionResponse struct {
	// Private Endpoint connection on an application gateway.
	ApplicationGatewayPrivateEndpointConnection *ApplicationGatewayPrivateEndpointConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateEndpointConnectionsDeleteOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.Delete
// method.
type ApplicationGatewayPrivateEndpointConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewayPrivateEndpointConnectionsGetOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.Get method.
type ApplicationGatewayPrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewayPrivateEndpointConnectionsListOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.List method.
type ApplicationGatewayPrivateEndpointConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewayPrivateEndpointConnectionsUpdateOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.Update
// method.
type ApplicationGatewayPrivateEndpointConnectionsUpdateOptions struct {
	// placeholder for future optional parameters
}

// Private Link Configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the private link configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway private link configuration.
	Properties *ApplicationGatewayPrivateLinkConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of private link configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfigurationProperties struct {
	// An array of application gateway private link ip configurations.
	IPConfigurations *[]ApplicationGatewayPrivateLinkIPConfiguration `json:"ipConfigurations,omitempty"`

	// READ-ONLY; The provisioning state of the application gateway private link configuration.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// The application gateway private link ip configuration.
type ApplicationGatewayPrivateLinkIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of application gateway private link ip configuration.
	Name *string `json:"name,omitempty"`

	// Properties of an application gateway private link ip configuration.
	Properties *ApplicationGatewayPrivateLinkIPConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of an application gateway private link IP configuration.
type ApplicationGatewayPrivateLinkIPConfigurationProperties struct {
	// Whether the ip configuration is primary or not.
	Primary *bool `json:"primary,omitempty"`

	// The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the application gateway private link IP configuration.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference to the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// PrivateLink Resource of an application gateway.
type ApplicationGatewayPrivateLinkResource struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the private link resource that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway private link resource.
	Properties *ApplicationGatewayPrivateLinkResourceProperties `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.
type ApplicationGatewayPrivateLinkResourceListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of private link resources of an application gateway.
	Value *[]ApplicationGatewayPrivateLinkResource `json:"value,omitempty"`
}

// ApplicationGatewayPrivateLinkResourceListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateLinkResourceListResult
// type.
type ApplicationGatewayPrivateLinkResourceListResultResponse struct {
	// Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.
	ApplicationGatewayPrivateLinkResourceListResult *ApplicationGatewayPrivateLinkResourceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of a private link resource.
type ApplicationGatewayPrivateLinkResourceProperties struct {
	// READ-ONLY; Group identifier of private link resource.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; Required member names of private link resource.
	RequiredMembers *[]string `json:"requiredMembers,omitempty" azure:"ro"`

	// Required DNS zone names of the the private link resource.
	RequiredZoneNames *[]string `json:"requiredZoneNames,omitempty"`
}

// ApplicationGatewayPrivateLinkResourcesListOptions contains the optional parameters for the ApplicationGatewayPrivateLinkResources.List method.
type ApplicationGatewayPrivateLinkResourcesListOptions struct {
	// placeholder for future optional parameters
}

// Probe of the application gateway.
type ApplicationGatewayProbe struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the probe that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway probe.
	Properties *ApplicationGatewayProbePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Application gateway probe health response match.
type ApplicationGatewayProbeHealthResponseMatch struct {
	// Body that must be contained in the health response. Default value is empty.
	Body *string `json:"body,omitempty"`

	// Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
	StatusCodes *[]string `json:"statusCodes,omitempty"`
}

// Properties of probe of an application gateway.
type ApplicationGatewayProbePropertiesFormat struct {
	// Host name to send the probe to.
	Host *string `json:"host,omitempty"`

	// The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
	Interval *int32 `json:"interval,omitempty"`

	// Criterion for classifying a healthy probe response.
	Match *ApplicationGatewayProbeHealthResponseMatch `json:"match,omitempty"`

	// Minimum number of servers that are always marked healthy. Default value is 0.
	MinServers *int32 `json:"minServers,omitempty"`

	// Relative path of probe. Valid path starts from '/'. Probe is sent to ://:.
	Path *string `json:"path,omitempty"`

	// Whether the host header should be picked from the backend http settings. Default value is false.
	PickHostNameFromBackendHTTPSettings *bool `json:"pickHostNameFromBackendHttpSettings,omitempty"`

	// Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will
	// be used. This property is valid for Standardv2 and
	// WAFv2 only.
	Port *int32 `json:"port,omitempty"`

	// The protocol used for the probe.
	Protocol *ApplicationGatewayProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the probe resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second
	// to 86400 seconds.
	Timeout *int32 `json:"timeout,omitempty"`

	// The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second
	// to 20.
	UnhealthyThreshold *int32 `json:"unhealthyThreshold,omitempty"`
}

// Properties of the application gateway.
type ApplicationGatewayPropertiesFormat struct {
	// Authentication certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	AuthenticationCertificates *[]ApplicationGatewayAuthenticationCertificate `json:"authenticationCertificates,omitempty"`

	// Autoscale Configuration.
	AutoscaleConfiguration *ApplicationGatewayAutoscaleConfiguration `json:"autoscaleConfiguration,omitempty"`

	// Backend address pool of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	BackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"backendAddressPools,omitempty"`

	// Backend http settings of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	BackendHTTPSettingsCollection *[]ApplicationGatewayBackendHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`

	// Custom error configurations of the application gateway resource.
	CustomErrorConfigurations *[]ApplicationGatewayCustomError `json:"customErrorConfigurations,omitempty"`

	// Whether FIPS is enabled on the application gateway resource.
	EnableFips *bool `json:"enableFips,omitempty"`

	// Whether HTTP2 is enabled on the application gateway resource.
	EnableHTTP2 *bool `json:"enableHttp2,omitempty"`

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`

	// If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
	ForceFirewallPolicyAssociation *bool `json:"forceFirewallPolicyAssociation,omitempty"`

	// Frontend IP addresses of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	FrontendIPConfigurations *[]ApplicationGatewayFrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`

	// Frontend ports of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	FrontendPorts *[]ApplicationGatewayFrontendPort `json:"frontendPorts,omitempty"`

	// Subnets of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	GatewayIPConfigurations *[]ApplicationGatewayIPConfiguration `json:"gatewayIPConfigurations,omitempty"`

	// Http listeners of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	HTTPListeners *[]ApplicationGatewayHTTPListener `json:"httpListeners,omitempty"`

	// READ-ONLY; Operational state of the application gateway resource.
	OperationalState *ApplicationGatewayOperationalState `json:"operationalState,omitempty" azure:"ro"`

	// READ-ONLY; Private Endpoint connections on application gateway.
	PrivateEndpointConnections *[]ApplicationGatewayPrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// PrivateLink configurations on application gateway.
	PrivateLinkConfigurations *[]ApplicationGatewayPrivateLinkConfiguration `json:"privateLinkConfigurations,omitempty"`

	// Probes of the application gateway resource.
	Probes *[]ApplicationGatewayProbe `json:"probes,omitempty"`

	// READ-ONLY; The provisioning state of the application gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Redirect configurations of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	RedirectConfigurations *[]ApplicationGatewayRedirectConfiguration `json:"redirectConfigurations,omitempty"`

	// Request routing rules of the application gateway resource.
	RequestRoutingRules *[]ApplicationGatewayRequestRoutingRule `json:"requestRoutingRules,omitempty"`

	// READ-ONLY; The resource GUID property of the application gateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// Rewrite rules for the application gateway resource.
	RewriteRuleSets *[]ApplicationGatewayRewriteRuleSet `json:"rewriteRuleSets,omitempty"`

	// SKU of the application gateway resource.
	SKU *ApplicationGatewaySKU `json:"sku,omitempty"`

	// SSL certificates of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits]
	// .
	SslCertificates *[]ApplicationGatewaySslCertificate `json:"sslCertificates,omitempty"`

	// SSL policy of the application gateway resource.
	SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`

	// SSL profiles of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	SslProfiles *[]ApplicationGatewaySslProfile `json:"sslProfiles,omitempty"`

	// Trusted client certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	TrustedClientCertificates *[]ApplicationGatewayTrustedClientCertificate `json:"trustedClientCertificates,omitempty"`

	// Trusted Root certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	TrustedRootCertificates *[]ApplicationGatewayTrustedRootCertificate `json:"trustedRootCertificates,omitempty"`

	// URL path map of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	URLPathMaps *[]ApplicationGatewayURLPathMap `json:"urlPathMaps,omitempty"`

	// Web application firewall configuration.
	WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration `json:"webApplicationFirewallConfiguration,omitempty"`
}

// Redirect configuration of an application gateway.
type ApplicationGatewayRedirectConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the redirect configuration that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway redirect configuration.
	Properties *ApplicationGatewayRedirectConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of redirect configuration of the application gateway.
type ApplicationGatewayRedirectConfigurationPropertiesFormat struct {
	// Include path in the redirected url.
	IncludePath *bool `json:"includePath,omitempty"`

	// Include query string in the redirected url.
	IncludeQueryString *bool `json:"includeQueryString,omitempty"`

	// Path rules specifying redirect configuration.
	PathRules *[]SubResource `json:"pathRules,omitempty"`

	// HTTP redirection type.
	RedirectType *ApplicationGatewayRedirectType `json:"redirectType,omitempty"`

	// Request routing specifying redirect configuration.
	RequestRoutingRules *[]SubResource `json:"requestRoutingRules,omitempty"`

	// Reference to a listener to redirect the request to.
	TargetListener *SubResource `json:"targetListener,omitempty"`

	// Url to redirect the request to.
	TargetURL *string `json:"targetUrl,omitempty"`

	// Url path maps specifying default redirect configuration.
	URLPathMaps *[]SubResource `json:"urlPathMaps,omitempty"`
}

// Request routing rule of an application gateway.
type ApplicationGatewayRequestRoutingRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the request routing rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway request routing rule.
	Properties *ApplicationGatewayRequestRoutingRulePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of request routing rule of the application gateway.
type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
	// Backend address pool resource of the application gateway.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// Backend http settings resource of the application gateway.
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`

	// Http listener resource of the application gateway.
	HTTPListener *SubResource `json:"httpListener,omitempty"`

	// Priority of the request routing rule.
	Priority *int32 `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state of the request routing rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Redirect configuration resource of the application gateway.
	RedirectConfiguration *SubResource `json:"redirectConfiguration,omitempty"`

	// Rewrite Rule Set resource in Basic rule of the application gateway.
	RewriteRuleSet *SubResource `json:"rewriteRuleSet,omitempty"`

	// Rule type.
	RuleType *ApplicationGatewayRequestRoutingRuleType `json:"ruleType,omitempty"`

	// URL path map resource of the application gateway.
	URLPathMap *SubResource `json:"urlPathMap,omitempty"`
}

// ApplicationGatewayResponse is the response envelope for operations that return a ApplicationGateway type.
type ApplicationGatewayResponse struct {
	// Application gateway resource.
	ApplicationGateway *ApplicationGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Rewrite rule of an application gateway.
type ApplicationGatewayRewriteRule struct {
	// Set of actions to be done as part of the rewrite Rule.
	ActionSet *ApplicationGatewayRewriteRuleActionSet `json:"actionSet,omitempty"`

	// Conditions based on which the action set execution will be evaluated.
	Conditions *[]ApplicationGatewayRewriteRuleCondition `json:"conditions,omitempty"`

	// Name of the rewrite rule that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
	RuleSequence *int32 `json:"ruleSequence,omitempty"`
}

// Set of actions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleActionSet struct {
	// Request Header Actions in the Action Set.
	RequestHeaderConfigurations *[]ApplicationGatewayHeaderConfiguration `json:"requestHeaderConfigurations,omitempty"`

	// Response Header Actions in the Action Set.
	ResponseHeaderConfigurations *[]ApplicationGatewayHeaderConfiguration `json:"responseHeaderConfigurations,omitempty"`

	// Url Configuration Action in the Action Set.
	URLConfiguration *ApplicationGatewayURLConfiguration `json:"urlConfiguration,omitempty"`
}

// Set of conditions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleCondition struct {
	// Setting this paramter to truth value with force the pattern to do a case in-sensitive comparison.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`

	// Setting this value as truth will force to check the negation of the condition given by the user.
	Negate *bool `json:"negate,omitempty"`

	// The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
	Pattern *string `json:"pattern,omitempty"`

	// The condition parameter of the RewriteRuleCondition.
	Variable *string `json:"variable,omitempty"`
}

// Rewrite rule set of an application gateway.
type ApplicationGatewayRewriteRuleSet struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the rewrite rule set that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway rewrite rule set.
	Properties *ApplicationGatewayRewriteRuleSetPropertiesFormat `json:"properties,omitempty"`
}

// Properties of rewrite rule set of the application gateway.
type ApplicationGatewayRewriteRuleSetPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the rewrite rule set resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Rewrite rules in the rewrite rule set.
	RewriteRules *[]ApplicationGatewayRewriteRule `json:"rewriteRules,omitempty"`
}

// SKU of an application gateway.
type ApplicationGatewaySKU struct {
	// Capacity (instance count) of an application gateway.
	Capacity *int32 `json:"capacity,omitempty"`

	// Name of an application gateway SKU.
	Name *ApplicationGatewaySKUName `json:"name,omitempty"`

	// Tier of an application gateway.
	Tier *ApplicationGatewayTier `json:"tier,omitempty"`
}

// SSL certificates of an application gateway.
type ApplicationGatewaySslCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the SSL certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway SSL certificate.
	Properties *ApplicationGatewaySslCertificatePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of SSL certificates of an application gateway.
type ApplicationGatewaySslCertificatePropertiesFormat struct {
	// Base-64 encoded pfx certificate. Only applicable in PUT Request.
	Data *string `json:"data,omitempty"`

	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty"`

	// Password for the pfx file specified in data. Only applicable in PUT request.
	Password *string `json:"password,omitempty"`

	// READ-ONLY; The provisioning state of the SSL certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
	PublicCertData *string `json:"publicCertData,omitempty" azure:"ro"`
}

// Application Gateway Ssl policy.
type ApplicationGatewaySslPolicy struct {
	// Ssl cipher suites to be enabled in the specified order to application gateway.
	CipherSuites *[]ApplicationGatewaySslCipherSuite `json:"cipherSuites,omitempty"`

	// Ssl protocols to be disabled on application gateway.
	DisabledSslProtocols *[]ApplicationGatewaySslProtocol `json:"disabledSslProtocols,omitempty"`

	// Minimum version of Ssl protocol to be supported on application gateway.
	MinProtocolVersion *ApplicationGatewaySslProtocol `json:"minProtocolVersion,omitempty"`

	// Name of Ssl predefined policy.
	PolicyName *ApplicationGatewaySslPolicyName `json:"policyName,omitempty"`

	// Type of Ssl Policy.
	PolicyType *ApplicationGatewaySslPolicyType `json:"policyType,omitempty"`
}

// An Ssl predefined policy.
type ApplicationGatewaySslPredefinedPolicy struct {
	SubResource
	// Name of the Ssl predefined policy.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway SSL predefined policy.
	Properties *ApplicationGatewaySslPredefinedPolicyPropertiesFormat `json:"properties,omitempty"`
}

// Properties of ApplicationGatewaySslPredefinedPolicy.
type ApplicationGatewaySslPredefinedPolicyPropertiesFormat struct {
	// Ssl cipher suites to be enabled in the specified order for application gateway.
	CipherSuites *[]ApplicationGatewaySslCipherSuite `json:"cipherSuites,omitempty"`

	// Minimum version of Ssl protocol to be supported on application gateway.
	MinProtocolVersion *ApplicationGatewaySslProtocol `json:"minProtocolVersion,omitempty"`
}

// ApplicationGatewaySslPredefinedPolicyResponse is the response envelope for operations that return a ApplicationGatewaySslPredefinedPolicy type.
type ApplicationGatewaySslPredefinedPolicyResponse struct {
	// An Ssl predefined policy.
	ApplicationGatewaySslPredefinedPolicy *ApplicationGatewaySslPredefinedPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SSL profile of an application gateway.
type ApplicationGatewaySslProfile struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the SSL profile that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway SSL profile.
	Properties *ApplicationGatewaySslProfilePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of SSL profile of an application gateway.
type ApplicationGatewaySslProfilePropertiesFormat struct {
	// Client authentication configuration of the application gateway resource.
	ClientAuthConfiguration *ApplicationGatewayClientAuthConfiguration `json:"clientAuthConfiguration,omitempty"`

	// READ-ONLY; The provisioning state of the HTTP listener resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// SSL policy of the application gateway resource.
	SslPolicy *ApplicationGatewaySslPolicy `json:"sslPolicy,omitempty"`

	// Array of references to application gateway trusted client certificates.
	TrustedClientCertificates *[]SubResource `json:"trustedClientCertificates,omitempty"`
}

// Trusted client certificates of an application gateway.
type ApplicationGatewayTrustedClientCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the trusted client certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway trusted client certificate.
	Properties *ApplicationGatewayTrustedClientCertificatePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Trusted client certificates properties of an application gateway.
type ApplicationGatewayTrustedClientCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string `json:"data,omitempty"`

	// READ-ONLY; The provisioning state of the trusted client certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Trusted Root certificates of an application gateway.
type ApplicationGatewayTrustedRootCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the trusted root certificate that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway trusted root certificate.
	Properties *ApplicationGatewayTrustedRootCertificatePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Trusted Root certificates properties of an application gateway.
type ApplicationGatewayTrustedRootCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string `json:"data,omitempty"`

	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty"`

	// READ-ONLY; The provisioning state of the trusted root certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Url configuration of the Actions set in Application Gateway.
type ApplicationGatewayURLConfiguration struct {
	// Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
	ModifiedPath *string `json:"modifiedPath,omitempty"`

	// Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
	ModifiedQueryString *string `json:"modifiedQueryString,omitempty"`

	// If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.
	Reroute *bool `json:"reroute,omitempty"`
}

// UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
type ApplicationGatewayURLPathMap struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the URL path map that is unique within an Application Gateway.
	Name *string `json:"name,omitempty"`

	// Properties of the application gateway URL path map.
	Properties *ApplicationGatewayURLPathMapPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of UrlPathMap of the application gateway.
type ApplicationGatewayURLPathMapPropertiesFormat struct {
	// Default backend address pool resource of URL path map.
	DefaultBackendAddressPool *SubResource `json:"defaultBackendAddressPool,omitempty"`

	// Default backend http settings resource of URL path map.
	DefaultBackendHTTPSettings *SubResource `json:"defaultBackendHttpSettings,omitempty"`

	// Default redirect configuration resource of URL path map.
	DefaultRedirectConfiguration *SubResource `json:"defaultRedirectConfiguration,omitempty"`

	// Default Rewrite rule set resource of URL path map.
	DefaultRewriteRuleSet *SubResource `json:"defaultRewriteRuleSet,omitempty"`

	// Path rule of URL path map resource.
	PathRules *[]ApplicationGatewayPathRule `json:"pathRules,omitempty"`

	// READ-ONLY; The provisioning state of the URL path map resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Application gateway web application firewall configuration.
type ApplicationGatewayWebApplicationFirewallConfiguration struct {
	// The disabled rule groups.
	DisabledRuleGroups *[]ApplicationGatewayFirewallDisabledRuleGroup `json:"disabledRuleGroups,omitempty"`

	// Whether the web application firewall is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// The exclusion list.
	Exclusions *[]ApplicationGatewayFirewallExclusion `json:"exclusions,omitempty"`

	// Maximum file upload size in Mb for WAF.
	FileUploadLimitInMb *int32 `json:"fileUploadLimitInMb,omitempty"`

	// Web application firewall mode.
	FirewallMode *ApplicationGatewayFirewallMode `json:"firewallMode,omitempty"`

	// Maximum request body size for WAF.
	MaxRequestBodySize *int32 `json:"maxRequestBodySize,omitempty"`

	// Maximum request body size in Kb for WAF.
	MaxRequestBodySizeInKb *int32 `json:"maxRequestBodySizeInKb,omitempty"`

	// Whether allow WAF to check request Body.
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty"`

	// The type of the web application firewall rule set. Possible values are: 'OWASP'.
	RuleSetType *string `json:"ruleSetType,omitempty"`

	// The version of the rule set type.
	RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
}

// ApplicationGatewaysBackendHealthOnDemandOptions contains the optional parameters for the ApplicationGateways.BackendHealthOnDemand method.
type ApplicationGatewaysBackendHealthOnDemandOptions struct {
	// Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
	Expand *string
}

// ApplicationGatewaysBackendHealthOptions contains the optional parameters for the ApplicationGateways.BackendHealth method.
type ApplicationGatewaysBackendHealthOptions struct {
	// Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
	Expand *string
}

// ApplicationGatewaysCreateOrUpdateOptions contains the optional parameters for the ApplicationGateways.CreateOrUpdate method.
type ApplicationGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysDeleteOptions contains the optional parameters for the ApplicationGateways.Delete method.
type ApplicationGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysGetOptions contains the optional parameters for the ApplicationGateways.Get method.
type ApplicationGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysGetSslPredefinedPolicyOptions contains the optional parameters for the ApplicationGateways.GetSslPredefinedPolicy method.
type ApplicationGatewaysGetSslPredefinedPolicyOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAllOptions contains the optional parameters for the ApplicationGateways.ListAll method.
type ApplicationGatewaysListAllOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableRequestHeadersOptions contains the optional parameters for the ApplicationGateways.ListAvailableRequestHeaders method.
type ApplicationGatewaysListAvailableRequestHeadersOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableResponseHeadersOptions contains the optional parameters for the ApplicationGateways.ListAvailableResponseHeaders method.
type ApplicationGatewaysListAvailableResponseHeadersOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableServerVariablesOptions contains the optional parameters for the ApplicationGateways.ListAvailableServerVariables method.
type ApplicationGatewaysListAvailableServerVariablesOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableSslOptionsOptions contains the optional parameters for the ApplicationGateways.ListAvailableSslOptions method.
type ApplicationGatewaysListAvailableSslOptionsOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableSslPredefinedPoliciesOptions contains the optional parameters for the ApplicationGateways.ListAvailableSslPredefinedPolicies
// method.
type ApplicationGatewaysListAvailableSslPredefinedPoliciesOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListAvailableWafRuleSetsOptions contains the optional parameters for the ApplicationGateways.ListAvailableWafRuleSets method.
type ApplicationGatewaysListAvailableWafRuleSetsOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysListOptions contains the optional parameters for the ApplicationGateways.List method.
type ApplicationGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysStartOptions contains the optional parameters for the ApplicationGateways.Start method.
type ApplicationGatewaysStartOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysStopOptions contains the optional parameters for the ApplicationGateways.Stop method.
type ApplicationGatewaysStopOptions struct {
	// placeholder for future optional parameters
}

// ApplicationGatewaysUpdateTagsOptions contains the optional parameters for the ApplicationGateways.UpdateTags method.
type ApplicationGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Rule of type application.
type ApplicationRule struct {
	FirewallPolicyRule
	// List of destination IP addresses or Service Tags.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of FQDN Tags for this rule.
	FqdnTags *[]string `json:"fqdnTags,omitempty"`

	// Array of Application Protocols.
	Protocols *[]FirewallPolicyRuleApplicationProtocol `json:"protocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`

	// List of FQDNs for this rule.
	TargetFqdns *[]string `json:"targetFqdns,omitempty"`

	// List of Urls for this rule condition.
	TargetURLs *[]string `json:"targetUrls,omitempty"`

	// Terminate TLS connections for this rule.
	TerminateTLS *bool `json:"terminateTLS,omitempty"`

	// List of destination azure web categories.
	WebCategories *[]string `json:"webCategories,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationRule.
func (a ApplicationRule) MarshalJSON() ([]byte, error) {
	objectMap := a.FirewallPolicyRule.marshalInternal(FirewallPolicyRuleTypeApplicationRule)
	if a.DestinationAddresses != nil {
		objectMap["destinationAddresses"] = a.DestinationAddresses
	}
	if a.FqdnTags != nil {
		objectMap["fqdnTags"] = a.FqdnTags
	}
	if a.Protocols != nil {
		objectMap["protocols"] = a.Protocols
	}
	if a.SourceAddresses != nil {
		objectMap["sourceAddresses"] = a.SourceAddresses
	}
	if a.SourceIPGroups != nil {
		objectMap["sourceIpGroups"] = a.SourceIPGroups
	}
	if a.TargetFqdns != nil {
		objectMap["targetFqdns"] = a.TargetFqdns
	}
	if a.TargetURLs != nil {
		objectMap["targetUrls"] = a.TargetURLs
	}
	if a.TerminateTLS != nil {
		objectMap["terminateTLS"] = a.TerminateTLS
	}
	if a.WebCategories != nil {
		objectMap["webCategories"] = a.WebCategories
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationRule.
func (a *ApplicationRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destinationAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &a.DestinationAddresses)
			}
			delete(rawMsg, key)
		case "fqdnTags":
			if val != nil {
				err = json.Unmarshal(*val, &a.FqdnTags)
			}
			delete(rawMsg, key)
		case "protocols":
			if val != nil {
				err = json.Unmarshal(*val, &a.Protocols)
			}
			delete(rawMsg, key)
		case "sourceAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &a.SourceAddresses)
			}
			delete(rawMsg, key)
		case "sourceIpGroups":
			if val != nil {
				err = json.Unmarshal(*val, &a.SourceIPGroups)
			}
			delete(rawMsg, key)
		case "targetFqdns":
			if val != nil {
				err = json.Unmarshal(*val, &a.TargetFqdns)
			}
			delete(rawMsg, key)
		case "targetUrls":
			if val != nil {
				err = json.Unmarshal(*val, &a.TargetURLs)
			}
			delete(rawMsg, key)
		case "terminateTLS":
			if val != nil {
				err = json.Unmarshal(*val, &a.TerminateTLS)
			}
			delete(rawMsg, key)
		case "webCategories":
			if val != nil {
				err = json.Unmarshal(*val, &a.WebCategories)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return a.FirewallPolicyRule.unmarshalInternal(rawMsg)
}

// An application security group in a resource group.
type ApplicationSecurityGroup struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the application security group.
	Properties *ApplicationSecurityGroupPropertiesFormat `json:"properties,omitempty"`
}

// A list of application security groups.
type ApplicationSecurityGroupListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of application security groups.
	Value *[]ApplicationSecurityGroup `json:"value,omitempty"`
}

// ApplicationSecurityGroupListResultResponse is the response envelope for operations that return a ApplicationSecurityGroupListResult type.
type ApplicationSecurityGroupListResultResponse struct {
	// A list of application security groups.
	ApplicationSecurityGroupListResult *ApplicationSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ApplicationSecurityGroupResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationSecurityGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Application security group properties.
type ApplicationSecurityGroupPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the application security group resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name
	// or migrate the resource across subscriptions or resource
	// groups.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// ApplicationSecurityGroupResponse is the response envelope for operations that return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupResponse struct {
	// An application security group in a resource group.
	ApplicationSecurityGroup *ApplicationSecurityGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationSecurityGroupsCreateOrUpdateOptions contains the optional parameters for the ApplicationSecurityGroups.CreateOrUpdate method.
type ApplicationSecurityGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationSecurityGroupsDeleteOptions contains the optional parameters for the ApplicationSecurityGroups.Delete method.
type ApplicationSecurityGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationSecurityGroupsGetOptions contains the optional parameters for the ApplicationSecurityGroups.Get method.
type ApplicationSecurityGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationSecurityGroupsListAllOptions contains the optional parameters for the ApplicationSecurityGroups.ListAll method.
type ApplicationSecurityGroupsListAllOptions struct {
	// placeholder for future optional parameters
}

// ApplicationSecurityGroupsListOptions contains the optional parameters for the ApplicationSecurityGroups.List method.
type ApplicationSecurityGroupsListOptions struct {
	// placeholder for future optional parameters
}

// ApplicationSecurityGroupsUpdateTagsOptions contains the optional parameters for the ApplicationSecurityGroups.UpdateTags method.
type ApplicationSecurityGroupsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
type AuthorizationListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The authorizations in an ExpressRoute Circuit.
	Value *[]ExpressRouteCircuitAuthorization `json:"value,omitempty"`
}

// AuthorizationListResultResponse is the response envelope for operations that return a AuthorizationListResult type.
type AuthorizationListResultResponse struct {
	// Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
	AuthorizationListResult *AuthorizationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of ExpressRouteCircuitAuthorization.
type AuthorizationPropertiesFormat struct {
	// The authorization key.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// The authorization use status.
	AuthorizationUseStatus *AuthorizationUseStatus `json:"authorizationUseStatus,omitempty"`

	// READ-ONLY; The provisioning state of the authorization resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// The information of an AutoApprovedPrivateLinkService.
type AutoApprovedPrivateLinkService struct {
	// The id of the private link service resource.
	PrivateLinkService *string `json:"privateLinkService,omitempty"`
}

// An array of private link service id that can be linked to a private end point with auto approved.
type AutoApprovedPrivateLinkServicesResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of auto approved private link service.
	Value *[]AutoApprovedPrivateLinkService `json:"value,omitempty"`
}

// AutoApprovedPrivateLinkServicesResultResponse is the response envelope for operations that return a AutoApprovedPrivateLinkServicesResult type.
type AutoApprovedPrivateLinkServicesResultResponse struct {
	// An array of private link service id that can be linked to a private end point with auto approved.
	AutoApprovedPrivateLinkServicesResult *AutoApprovedPrivateLinkServicesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Availability of the metric.
type Availability struct {
	// Duration of the availability blob.
	BlobDuration *string `json:"blobDuration,omitempty"`

	// The retention of the availability.
	Retention *string `json:"retention,omitempty"`

	// The time grain of the availability.
	TimeGrain *string `json:"timeGrain,omitempty"`
}

// The serviceName of an AvailableDelegation indicates a possible delegation for a subnet.
type AvailableDelegation struct {
	// The actions permitted to the service upon delegation.
	Actions *[]string `json:"actions,omitempty"`

	// A unique identifier of the AvailableDelegation resource.
	ID *string `json:"id,omitempty"`

	// The name of the AvailableDelegation resource.
	Name *string `json:"name,omitempty"`

	// The name of the service and resource.
	ServiceName *string `json:"serviceName,omitempty"`

	// Resource type.
	Type *string `json:"type,omitempty"`
}

// AvailableDelegationsListOptions contains the optional parameters for the AvailableDelegations.List method.
type AvailableDelegationsListOptions struct {
	// placeholder for future optional parameters
}

// An array of available delegations.
type AvailableDelegationsResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of available delegations.
	Value *[]AvailableDelegation `json:"value,omitempty"`
}

// AvailableDelegationsResultResponse is the response envelope for operations that return a AvailableDelegationsResult type.
type AvailableDelegationsResultResponse struct {
	// An array of available delegations.
	AvailableDelegationsResult *AvailableDelegationsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableEndpointServicesListOptions contains the optional parameters for the AvailableEndpointServices.List method.
type AvailableEndpointServicesListOptions struct {
	// placeholder for future optional parameters
}

// The information of an AvailablePrivateEndpointType.
type AvailablePrivateEndpointType struct {
	// A unique identifier of the AvailablePrivateEndpoint Type resource.
	ID *string `json:"id,omitempty"`

	// The name of the service and resource.
	Name *string `json:"name,omitempty"`

	// The name of the service and resource.
	ResourceName *string `json:"resourceName,omitempty"`

	// Resource type.
	Type *string `json:"type,omitempty"`
}

// AvailablePrivateEndpointTypesListByResourceGroupOptions contains the optional parameters for the AvailablePrivateEndpointTypes.ListByResourceGroup method.
type AvailablePrivateEndpointTypesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AvailablePrivateEndpointTypesListOptions contains the optional parameters for the AvailablePrivateEndpointTypes.List method.
type AvailablePrivateEndpointTypesListOptions struct {
	// placeholder for future optional parameters
}

// An array of available PrivateEndpoint types.
type AvailablePrivateEndpointTypesResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of available privateEndpoint type.
	Value *[]AvailablePrivateEndpointType `json:"value,omitempty"`
}

// AvailablePrivateEndpointTypesResultResponse is the response envelope for operations that return a AvailablePrivateEndpointTypesResult type.
type AvailablePrivateEndpointTypesResultResponse struct {
	// An array of available PrivateEndpoint types.
	AvailablePrivateEndpointTypesResult *AvailablePrivateEndpointTypesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of available countries with details.
type AvailableProvidersList struct {
	// List of available countries.
	Countries *[]AvailableProvidersListCountry `json:"countries,omitempty"`
}

// City or town details.
type AvailableProvidersListCity struct {
	// The city or town name.
	CityName *string `json:"cityName,omitempty"`

	// A list of Internet service providers.
	Providers *[]string `json:"providers,omitempty"`
}

// Country details.
type AvailableProvidersListCountry struct {
	// The country name.
	CountryName *string `json:"countryName,omitempty"`

	// A list of Internet service providers.
	Providers *[]string `json:"providers,omitempty"`

	// List of available states in the country.
	States *[]AvailableProvidersListState `json:"states,omitempty"`
}

// Constraints that determine the list of available Internet service providers.
type AvailableProvidersListParameters struct {
	// A list of Azure regions.
	AzureLocations *[]string `json:"azureLocations,omitempty"`

	// The city or town for available providers list.
	City *string `json:"city,omitempty"`

	// The country for available providers list.
	Country *string `json:"country,omitempty"`

	// The state for available providers list.
	State *string `json:"state,omitempty"`
}

// AvailableProvidersListPollerResponse is the response envelope for operations that asynchronously return a AvailableProvidersList type.
type AvailableProvidersListPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*AvailableProvidersListResponse, error)

	// Poller contains an initialized poller.
	Poller AvailableProvidersListPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableProvidersListResponse is the response envelope for operations that return a AvailableProvidersList type.
type AvailableProvidersListResponse struct {
	// List of available countries with details.
	AvailableProvidersList *AvailableProvidersList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// State details.
type AvailableProvidersListState struct {
	// List of available cities or towns in the state.
	Cities *[]AvailableProvidersListCity `json:"cities,omitempty"`

	// A list of Internet service providers.
	Providers *[]string `json:"providers,omitempty"`

	// The state name.
	StateName *string `json:"stateName,omitempty"`
}

// AvailableResourceGroupDelegationsListOptions contains the optional parameters for the AvailableResourceGroupDelegations.List method.
type AvailableResourceGroupDelegationsListOptions struct {
	// placeholder for future optional parameters
}

// The available service alias.
type AvailableServiceAlias struct {
	// The ID of the service alias.
	ID *string `json:"id,omitempty"`

	// The name of the service alias.
	Name *string `json:"name,omitempty"`

	// The resource name of the service alias.
	ResourceName *string `json:"resourceName,omitempty"`

	// The type of the resource.
	Type *string `json:"type,omitempty"`
}

// AvailableServiceAliasesListByResourceGroupOptions contains the optional parameters for the AvailableServiceAliases.ListByResourceGroup method.
type AvailableServiceAliasesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AvailableServiceAliasesListOptions contains the optional parameters for the AvailableServiceAliases.List method.
type AvailableServiceAliasesListOptions struct {
	// placeholder for future optional parameters
}

// An array of available service aliases.
type AvailableServiceAliasesResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of available service aliases.
	Value *[]AvailableServiceAlias `json:"value,omitempty"`
}

// AvailableServiceAliasesResultResponse is the response envelope for operations that return a AvailableServiceAliasesResult type.
type AvailableServiceAliasesResultResponse struct {
	// An array of available service aliases.
	AvailableServiceAliasesResult *AvailableServiceAliasesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note
// that this status is distinct from the HTTP
// status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status
// code for the successful request. If the
// asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.
type AzureAsyncOperationResult struct {
	// Details of the error occurred during specified asynchronous operation.
	Error *Error `json:"error,omitempty"`

	// Status of the Azure async operation.
	Status *NetworkOperationStatus `json:"status,omitempty"`
}

// Azure Firewall resource.
type AzureFirewall struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the azure firewall.
	Properties *AzureFirewallPropertiesFormat `json:"properties,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Properties of an application rule.
type AzureFirewallApplicationRule struct {
	// Description of the rule.
	Description *string `json:"description,omitempty"`

	// List of FQDN Tags for this rule.
	FqdnTags *[]string `json:"fqdnTags,omitempty"`

	// Name of the application rule.
	Name *string `json:"name,omitempty"`

	// Array of ApplicationRuleProtocols.
	Protocols *[]AzureFirewallApplicationRuleProtocol `json:"protocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`

	// List of FQDNs for this rule.
	TargetFqdns *[]string `json:"targetFqdns,omitempty"`
}

// Application rule collection resource.
type AzureFirewallApplicationRuleCollection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the azure firewall application rule collection.
	Properties *AzureFirewallApplicationRuleCollectionPropertiesFormat `json:"properties,omitempty"`
}

// Properties of the application rule collection.
type AzureFirewallApplicationRuleCollectionPropertiesFormat struct {
	// The action type of a rule collection.
	Action *AzureFirewallRcAction `json:"action,omitempty"`

	// Priority of the application rule collection resource.
	Priority *int32 `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state of the application rule collection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Collection of rules used by a application rule collection.
	Rules *[]AzureFirewallApplicationRule `json:"rules,omitempty"`
}

// Properties of the application rule protocol.
type AzureFirewallApplicationRuleProtocol struct {
	// Port number for the protocol, cannot be greater than 64000. This field is optional.
	Port *int32 `json:"port,omitempty"`

	// Protocol type.
	ProtocolType *AzureFirewallApplicationRuleProtocolType `json:"protocolType,omitempty"`
}

// Azure Firewall FQDN Tag Resource.
type AzureFirewallFqdnTag struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the azure firewall FQDN tag.
	Properties *AzureFirewallFqdnTagPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListAzureFirewallFqdnTags API service call.
type AzureFirewallFqdnTagListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Azure Firewall FQDN Tags in a resource group.
	Value *[]AzureFirewallFqdnTag `json:"value,omitempty"`
}

// AzureFirewallFqdnTagListResultResponse is the response envelope for operations that return a AzureFirewallFqdnTagListResult type.
type AzureFirewallFqdnTagListResultResponse struct {
	// Response for ListAzureFirewallFqdnTags API service call.
	AzureFirewallFqdnTagListResult *AzureFirewallFqdnTagListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Azure Firewall FQDN Tag Properties.
type AzureFirewallFqdnTagPropertiesFormat struct {
	// READ-ONLY; The name of this FQDN Tag.
	FqdnTagName *string `json:"fqdnTagName,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the Azure firewall FQDN tag resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// AzureFirewallFqdnTagsListAllOptions contains the optional parameters for the AzureFirewallFqdnTags.ListAll method.
type AzureFirewallFqdnTagsListAllOptions struct {
	// placeholder for future optional parameters
}

// IP configuration of an Azure Firewall.
type AzureFirewallIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the azure firewall IP configuration.
	Properties *AzureFirewallIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of IP configuration of an Azure Firewall.
type AzureFirewallIPConfigurationPropertiesFormat struct {
	// READ-ONLY; The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the Azure firewall IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// Reference to the subnet resource. This resource must be named 'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// IpGroups associated with azure firewall.
type AzureFirewallIPGroups struct {
	// READ-ONLY; The iteration number.
	ChangeNumber *string `json:"changeNumber,omitempty" azure:"ro"`

	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// Response for ListAzureFirewalls API service call.
type AzureFirewallListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Azure Firewalls in a resource group.
	Value *[]AzureFirewall `json:"value,omitempty"`
}

// AzureFirewallListResultResponse is the response envelope for operations that return a AzureFirewallListResult type.
type AzureFirewallListResultResponse struct {
	// Response for ListAzureFirewalls API service call.
	AzureFirewallListResult *AzureFirewallListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureFirewall NAT Rule Collection Action.
type AzureFirewallNatRcAction struct {
	// The type of action.
	Type *AzureFirewallNatRCActionType `json:"type,omitempty"`
}

// Properties of a NAT rule.
type AzureFirewallNatRule struct {
	// Description of the rule.
	Description *string `json:"description,omitempty"`

	// List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of destination ports.
	DestinationPorts *[]string `json:"destinationPorts,omitempty"`

	// Name of the NAT rule.
	Name *string `json:"name,omitempty"`

	// Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
	Protocols *[]AzureFirewallNetworkRuleProtocol `json:"protocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`

	// The translated address for this NAT rule.
	TranslatedAddress *string `json:"translatedAddress,omitempty"`

	// The translated FQDN for this NAT rule.
	TranslatedFqdn *string `json:"translatedFqdn,omitempty"`

	// The translated port for this NAT rule.
	TranslatedPort *string `json:"translatedPort,omitempty"`
}

// NAT rule collection resource.
type AzureFirewallNatRuleCollection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the azure firewall NAT rule collection.
	Properties *AzureFirewallNatRuleCollectionProperties `json:"properties,omitempty"`
}

// Properties of the NAT rule collection.
type AzureFirewallNatRuleCollectionProperties struct {
	// The action type of a NAT rule collection.
	Action *AzureFirewallNatRcAction `json:"action,omitempty"`

	// Priority of the NAT rule collection resource.
	Priority *int32 `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state of the NAT rule collection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Collection of rules used by a NAT rule collection.
	Rules *[]AzureFirewallNatRule `json:"rules,omitempty"`
}

// Properties of the network rule.
type AzureFirewallNetworkRule struct {
	// Description of the rule.
	Description *string `json:"description,omitempty"`

	// List of destination IP addresses.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of destination FQDNs.
	DestinationFqdns *[]string `json:"destinationFqdns,omitempty"`

	// List of destination IpGroups for this rule.
	DestinationIPGroups *[]string `json:"destinationIpGroups,omitempty"`

	// List of destination ports.
	DestinationPorts *[]string `json:"destinationPorts,omitempty"`

	// Name of the network rule.
	Name *string `json:"name,omitempty"`

	// Array of AzureFirewallNetworkRuleProtocols.
	Protocols *[]AzureFirewallNetworkRuleProtocol `json:"protocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`
}

// Network rule collection resource.
type AzureFirewallNetworkRuleCollection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the azure firewall network rule collection.
	Properties *AzureFirewallNetworkRuleCollectionPropertiesFormat `json:"properties,omitempty"`
}

// Properties of the network rule collection.
type AzureFirewallNetworkRuleCollectionPropertiesFormat struct {
	// The action type of a rule collection.
	Action *AzureFirewallRcAction `json:"action,omitempty"`

	// Priority of the network rule collection resource.
	Priority *int32 `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state of the network rule collection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Collection of rules used by a network rule collection.
	Rules *[]AzureFirewallNetworkRule `json:"rules,omitempty"`
}

// AzureFirewallPollerResponse is the response envelope for operations that asynchronously return a AzureFirewall type.
type AzureFirewallPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*AzureFirewallResponse, error)

	// Poller contains an initialized poller.
	Poller AzureFirewallPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the Azure Firewall.
type AzureFirewallPropertiesFormat struct {
	// The additional properties used to further config this azure firewall.
	AdditionalProperties *map[string]string `json:"additionalProperties,omitempty"`

	// Collection of application rule collections used by Azure Firewall.
	ApplicationRuleCollections *[]AzureFirewallApplicationRuleCollection `json:"applicationRuleCollections,omitempty"`

	// The firewallPolicy associated with this azure firewall.
	FirewallPolicy *SubResource `json:"firewallPolicy,omitempty"`

	// IP addresses associated with AzureFirewall.
	HubIPAddresses *HubIPAddresses `json:"hubIPAddresses,omitempty"`

	// IP configuration of the Azure Firewall resource.
	IPConfigurations *[]AzureFirewallIPConfiguration `json:"ipConfigurations,omitempty"`

	// READ-ONLY; IpGroups associated with AzureFirewall.
	IPGroups *[]AzureFirewallIPGroups `json:"ipGroups,omitempty" azure:"ro"`

	// IP configuration of the Azure Firewall used for management traffic.
	ManagementIPConfiguration *AzureFirewallIPConfiguration `json:"managementIpConfiguration,omitempty"`

	// Collection of NAT rule collections used by Azure Firewall.
	NatRuleCollections *[]AzureFirewallNatRuleCollection `json:"natRuleCollections,omitempty"`

	// Collection of network rule collections used by Azure Firewall.
	NetworkRuleCollections *[]AzureFirewallNetworkRuleCollection `json:"networkRuleCollections,omitempty"`

	// READ-ONLY; The provisioning state of the Azure firewall resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The Azure Firewall Resource SKU.
	SKU *AzureFirewallSKU `json:"sku,omitempty"`

	// The operation mode for Threat Intelligence.
	ThreatIntelMode *AzureFirewallThreatIntelMode `json:"threatIntelMode,omitempty"`

	// The virtualHub to which the firewall belongs.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`
}

// Public IP Address associated with azure firewall.
type AzureFirewallPublicIPAddress struct {
	// Public IP Address value.
	Address *string `json:"address,omitempty"`
}

// Properties of the AzureFirewallRCAction.
type AzureFirewallRcAction struct {
	// The type of action.
	Type *AzureFirewallRCActionType `json:"type,omitempty"`
}

// AzureFirewallResponse is the response envelope for operations that return a AzureFirewall type.
type AzureFirewallResponse struct {
	// Azure Firewall resource.
	AzureFirewall *AzureFirewall

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKU of an Azure Firewall.
type AzureFirewallSKU struct {
	// Name of an Azure Firewall SKU.
	Name *AzureFirewallSKUName `json:"name,omitempty"`

	// Tier of an Azure Firewall.
	Tier *AzureFirewallSKUTier `json:"tier,omitempty"`
}

// AzureFirewallsCreateOrUpdateOptions contains the optional parameters for the AzureFirewalls.CreateOrUpdate method.
type AzureFirewallsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AzureFirewallsDeleteOptions contains the optional parameters for the AzureFirewalls.Delete method.
type AzureFirewallsDeleteOptions struct {
	// placeholder for future optional parameters
}

// AzureFirewallsGetOptions contains the optional parameters for the AzureFirewalls.Get method.
type AzureFirewallsGetOptions struct {
	// placeholder for future optional parameters
}

// AzureFirewallsListAllOptions contains the optional parameters for the AzureFirewalls.ListAll method.
type AzureFirewallsListAllOptions struct {
	// placeholder for future optional parameters
}

// AzureFirewallsListOptions contains the optional parameters for the AzureFirewalls.List method.
type AzureFirewallsListOptions struct {
	// placeholder for future optional parameters
}

// AzureFirewallsUpdateTagsOptions contains the optional parameters for the AzureFirewalls.UpdateTags method.
type AzureFirewallsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Azure reachability report details.
type AzureReachabilityReport struct {
	// The aggregation level of Azure reachability report. Can be Country, State or City.
	AggregationLevel *string `json:"aggregationLevel,omitempty"`

	// Parameters that define a geographic location.
	ProviderLocation *AzureReachabilityReportLocation `json:"providerLocation,omitempty"`

	// List of Azure reachability report items.
	ReachabilityReport *[]AzureReachabilityReportItem `json:"reachabilityReport,omitempty"`
}

// Azure reachability report details for a given provider location.
type AzureReachabilityReportItem struct {
	// The Azure region.
	AzureLocation *string `json:"azureLocation,omitempty"`

	// List of latency details for each of the time series.
	Latencies *[]AzureReachabilityReportLatencyInfo `json:"latencies,omitempty"`

	// The Internet service provider.
	Provider *string `json:"provider,omitempty"`
}

// Details on latency for a time series.
type AzureReachabilityReportLatencyInfo struct {
	// The relative latency score between 1 and 100, higher values indicating a faster connection.
	Score *int32 `json:"score,omitempty"`

	// The time stamp.
	TimeStamp *time.Time `json:"timeStamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureReachabilityReportLatencyInfo.
func (a AzureReachabilityReportLatencyInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if a.Score != nil {
		objectMap["score"] = a.Score
	}
	if a.TimeStamp != nil {
		objectMap["timeStamp"] = (*timeRFC3339)(a.TimeStamp)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureReachabilityReportLatencyInfo.
func (a *AzureReachabilityReportLatencyInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "score":
			if val != nil {
				err = json.Unmarshal(*val, &a.Score)
			}
			delete(rawMsg, key)
		case "timeStamp":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				a.TimeStamp = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Parameters that define a geographic location.
type AzureReachabilityReportLocation struct {
	// The name of the city or town.
	City *string `json:"city,omitempty"`

	// The name of the country.
	Country *string `json:"country,omitempty"`

	// The name of the state.
	State *string `json:"state,omitempty"`
}

// Geographic and time constraints for Azure reachability report.
type AzureReachabilityReportParameters struct {
	// Optional Azure regions to scope the query to.
	AzureLocations *[]string `json:"azureLocations,omitempty"`

	// The end time for the Azure reachability report.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Parameters that define a geographic location.
	ProviderLocation *AzureReachabilityReportLocation `json:"providerLocation,omitempty"`

	// List of Internet service providers.
	Providers *[]string `json:"providers,omitempty"`

	// The start time for the Azure reachability report.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureReachabilityReportParameters.
func (a AzureReachabilityReportParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if a.AzureLocations != nil {
		objectMap["azureLocations"] = a.AzureLocations
	}
	if a.EndTime != nil {
		objectMap["endTime"] = (*timeRFC3339)(a.EndTime)
	}
	if a.ProviderLocation != nil {
		objectMap["providerLocation"] = a.ProviderLocation
	}
	if a.Providers != nil {
		objectMap["providers"] = a.Providers
	}
	if a.StartTime != nil {
		objectMap["startTime"] = (*timeRFC3339)(a.StartTime)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureReachabilityReportParameters.
func (a *AzureReachabilityReportParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureLocations":
			if val != nil {
				err = json.Unmarshal(*val, &a.AzureLocations)
			}
			delete(rawMsg, key)
		case "endTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				a.EndTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "providerLocation":
			if val != nil {
				err = json.Unmarshal(*val, &a.ProviderLocation)
			}
			delete(rawMsg, key)
		case "providers":
			if val != nil {
				err = json.Unmarshal(*val, &a.Providers)
			}
			delete(rawMsg, key)
		case "startTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				a.StartTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureReachabilityReportPollerResponse is the response envelope for operations that asynchronously return a AzureReachabilityReport type.
type AzureReachabilityReportPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*AzureReachabilityReportResponse, error)

	// Poller contains an initialized poller.
	Poller AzureReachabilityReportPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureReachabilityReportResponse is the response envelope for operations that return a AzureReachabilityReport type.
type AzureReachabilityReportResponse struct {
	// Azure reachability report details.
	AzureReachabilityReport *AzureReachabilityReport

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Azure Web Category Resource.
type AzureWebCategory struct {
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Resource ID.
	ID *string `json:"id,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the Azure Web Category.
	Properties *AzureWebCategoryPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListAzureWebCategories API service call.
type AzureWebCategoryListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Azure Web Categories for a given Subscription.
	Value *[]AzureWebCategory `json:"value,omitempty"`
}

// AzureWebCategoryListResultResponse is the response envelope for operations that return a AzureWebCategoryListResult type.
type AzureWebCategoryListResultResponse struct {
	// Response for ListAzureWebCategories API service call.
	AzureWebCategoryListResult *AzureWebCategoryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Azure Web Category Properties.
type AzureWebCategoryPropertiesFormat struct {
	// READ-ONLY; The name of the group that the category belongs to.
	Group *string `json:"group,omitempty" azure:"ro"`
}

// AzureWebCategoryResponse is the response envelope for operations that return a AzureWebCategory type.
type AzureWebCategoryResponse struct {
	// Azure Web Category Resource.
	AzureWebCategory *AzureWebCategory

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Pool of backend IP addresses.
type BackendAddressPool struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer backend address pool.
	Properties *BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// BackendAddressPoolPollerResponse is the response envelope for operations that asynchronously return a BackendAddressPool type.
type BackendAddressPoolPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*BackendAddressPoolResponse, error)

	// Poller contains an initialized poller.
	Poller BackendAddressPoolPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the backend address pool.
type BackendAddressPoolPropertiesFormat struct {
	// READ-ONLY; An array of references to IP addresses defined in network interfaces.
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration `json:"backendIPConfigurations,omitempty" azure:"ro"`

	// An array of backend addresses.
	LoadBalancerBackendAddresses *[]LoadBalancerBackendAddress `json:"loadBalancerBackendAddresses,omitempty"`

	// READ-ONLY; An array of references to load balancing rules that use this backend address pool.
	LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty" azure:"ro"`

	// READ-ONLY; A reference to an outbound rule that uses this backend address pool.
	OutboundRule *SubResource `json:"outboundRule,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to outbound rules that use this backend address pool.
	OutboundRules *[]SubResource `json:"outboundRules,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the backend address pool resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BackendAddressPoolResponse is the response envelope for operations that return a BackendAddressPool type.
type BackendAddressPoolResponse struct {
	// Pool of backend IP addresses.
	BackendAddressPool *BackendAddressPool

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The session detail for a target.
type BastionActiveSession struct {
	// READ-ONLY; The protocol used to connect to the target.
	Protocol *BastionConnectProtocol `json:"protocol,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	ResourceType *string `json:"resourceType,omitempty" azure:"ro"`

	// READ-ONLY; Duration in mins the session has been active.
	SessionDurationInMins *float32 `json:"sessionDurationInMins,omitempty" azure:"ro"`

	// READ-ONLY; A unique id for the session.
	SessionID *string `json:"sessionId,omitempty" azure:"ro"`

	// READ-ONLY; The time when the session started.
	StartTime *interface{} `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The host name of the target.
	TargetHostName *string `json:"targetHostName,omitempty" azure:"ro"`

	// READ-ONLY; The IP Address of the target.
	TargetIPAddress *string `json:"targetIpAddress,omitempty" azure:"ro"`

	// READ-ONLY; The resource group of the target.
	TargetResourceGroup *string `json:"targetResourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; The resource id of the target.
	TargetResourceID *string `json:"targetResourceId,omitempty" azure:"ro"`

	// READ-ONLY; The subscription id for the target virtual machine.
	TargetSubscriptionID *string `json:"targetSubscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; The user name who is active on this session.
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// Response for GetActiveSessions.
type BastionActiveSessionListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of active sessions on the bastion.
	Value *[]BastionActiveSession `json:"value,omitempty"`
}

// BastionActiveSessionListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionActiveSessionListResultPager
// type.
type BastionActiveSessionListResultPagerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BastionActiveSessionListResultPager, error)

	// Poller contains an initialized poller.
	Poller BastionActiveSessionListResultPagerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionActiveSessionListResultResponse is the response envelope for operations that return a BastionActiveSessionListResult type.
type BastionActiveSessionListResultResponse struct {
	// Response for GetActiveSessions.
	BastionActiveSessionListResult *BastionActiveSessionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Bastion Host resource.
type BastionHost struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Represents the bastion host resource.
	Properties *BastionHostPropertiesFormat `json:"properties,omitempty"`
}

// IP configuration of an Bastion Host.
type BastionHostIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Represents the ip configuration associated with the resource.
	Properties *BastionHostIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Ip configuration type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of IP configuration of an Bastion Host.
type BastionHostIPConfigurationPropertiesFormat struct {
	// Private IP allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the bastion host IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference of the PublicIP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// Reference of the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Response for ListBastionHosts API service call.
type BastionHostListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Bastion Hosts in a resource group.
	Value *[]BastionHost `json:"value,omitempty"`
}

// BastionHostListResultResponse is the response envelope for operations that return a BastionHostListResult type.
type BastionHostListResultResponse struct {
	// Response for ListBastionHosts API service call.
	BastionHostListResult *BastionHostListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionHostPollerResponse is the response envelope for operations that asynchronously return a BastionHost type.
type BastionHostPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*BastionHostResponse, error)

	// Poller contains an initialized poller.
	Poller BastionHostPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the Bastion Host.
type BastionHostPropertiesFormat struct {
	// FQDN for the endpoint on which bastion host is accessible.
	DNSName *string `json:"dnsName,omitempty"`

	// IP configuration of the Bastion Host resource.
	IPConfigurations *[]BastionHostIPConfiguration `json:"ipConfigurations,omitempty"`

	// READ-ONLY; The provisioning state of the bastion host resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BastionHostResponse is the response envelope for operations that return a BastionHost type.
type BastionHostResponse struct {
	// Bastion Host resource.
	BastionHost *BastionHost

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionHostsCreateOrUpdateOptions contains the optional parameters for the BastionHosts.CreateOrUpdate method.
type BastionHostsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BastionHostsDeleteOptions contains the optional parameters for the BastionHosts.Delete method.
type BastionHostsDeleteOptions struct {
	// placeholder for future optional parameters
}

// BastionHostsGetOptions contains the optional parameters for the BastionHosts.Get method.
type BastionHostsGetOptions struct {
	// placeholder for future optional parameters
}

// BastionHostsListByResourceGroupOptions contains the optional parameters for the BastionHosts.ListByResourceGroup method.
type BastionHostsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// BastionHostsListOptions contains the optional parameters for the BastionHosts.List method.
type BastionHostsListOptions struct {
	// placeholder for future optional parameters
}

// Response for DisconnectActiveSessions.
type BastionSessionDeleteResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of sessions with their corresponding state.
	Value *[]BastionSessionState `json:"value,omitempty"`
}

// BastionSessionDeleteResultResponse is the response envelope for operations that return a BastionSessionDeleteResult type.
type BastionSessionDeleteResultResponse struct {
	// Response for DisconnectActiveSessions.
	BastionSessionDeleteResult *BastionSessionDeleteResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The session state detail for a target.
type BastionSessionState struct {
	// READ-ONLY; Used for extra information.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; A unique id for the session.
	SessionID *string `json:"sessionId,omitempty" azure:"ro"`

	// READ-ONLY; The state of the session. Disconnected/Failed/NotFound.
	State *string `json:"state,omitempty" azure:"ro"`
}

// Bastion Shareable Link.
type BastionShareableLink struct {
	// READ-ONLY; The unique Bastion Shareable Link to the virtual machine.
	Bsl *string `json:"bsl,omitempty" azure:"ro"`

	// READ-ONLY; The time when the link was created.
	CreatedAt *string `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Optional field indicating the warning or error message related to the vm in case of partial failure.
	Message *string `json:"message,omitempty" azure:"ro"`

	// Reference of the virtual machine resource.
	VM *Resource `json:"vm,omitempty"`
}

// Post request for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListRequest struct {
	// List of VM references.
	VMs *[]BastionShareableLink `json:"vms,omitempty"`
}

// Response for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Bastion Shareable Links for the request.
	Value *[]BastionShareableLink `json:"value,omitempty"`
}

// BastionShareableLinkListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionShareableLinkListResultPager
// type.
type BastionShareableLinkListResultPagerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BastionShareableLinkListResultPager, error)

	// Poller contains an initialized poller.
	Poller BastionShareableLinkListResultPagerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionShareableLinkListResultResponse is the response envelope for operations that return a BastionShareableLinkListResult type.
type BastionShareableLinkListResultResponse struct {
	// Response for all the Bastion Shareable Link endpoints.
	BastionShareableLinkListResult *BastionShareableLinkListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Contains bgp community information offered in Service Community resources.
type BgpCommunity struct {
	// The name of the bgp community. e.g. Skype.
	CommunityName *string `json:"communityName,omitempty"`

	// The prefixes that the bgp community contains.
	CommunityPrefixes *[]string `json:"communityPrefixes,omitempty"`

	// The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
	CommunityValue *string `json:"communityValue,omitempty"`

	// Customer is authorized to use bgp community or not.
	IsAuthorizedToUse *bool `json:"isAuthorizedToUse,omitempty"`

	// The service group of the bgp community contains.
	ServiceGroup *string `json:"serviceGroup,omitempty"`

	// The region which the service support. e.g. For O365, region is Global.
	ServiceSupportedRegion *string `json:"serviceSupportedRegion,omitempty"`
}

// Virtual Appliance Site resource.
type BgpConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the connection.
	Name *string `json:"name,omitempty"`

	// The properties of the Bgp connections.
	Properties *BgpConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Connection type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// BgpConnectionPollerResponse is the response envelope for operations that asynchronously return a BgpConnection type.
type BgpConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*BgpConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller BgpConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the bgp connection.
type BgpConnectionProperties struct {
	// READ-ONLY; The current state of the VirtualHub to Peer.
	ConnectionState *HubBgpConnectionStatus `json:"connectionState,omitempty" azure:"ro"`

	// Peer ASN.
	PeerAsn *int64 `json:"peerAsn,omitempty"`

	// Peer IP.
	PeerIP *string `json:"peerIp,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BgpConnectionResponse is the response envelope for operations that return a BgpConnection type.
type BgpConnectionResponse struct {
	// Virtual Appliance Site resource.
	BgpConnection *BgpConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BGP peer status details.
type BgpPeerStatus struct {
	// READ-ONLY; The autonomous system number of the remote BGP peer.
	Asn *int64 `json:"asn,omitempty" azure:"ro"`

	// READ-ONLY; For how long the peering has been up.
	ConnectedDuration *string `json:"connectedDuration,omitempty" azure:"ro"`

	// READ-ONLY; The virtual network gateway's local address.
	LocalAddress *string `json:"localAddress,omitempty" azure:"ro"`

	// READ-ONLY; The number of BGP messages received.
	MessagesReceived *int64 `json:"messagesReceived,omitempty" azure:"ro"`

	// READ-ONLY; The number of BGP messages sent.
	MessagesSent *int64 `json:"messagesSent,omitempty" azure:"ro"`

	// READ-ONLY; The remote BGP peer.
	Neighbor *string `json:"neighbor,omitempty" azure:"ro"`

	// READ-ONLY; The number of routes learned from this peer.
	RoutesReceived *int64 `json:"routesReceived,omitempty" azure:"ro"`

	// READ-ONLY; The BGP peer state.
	State *BgpPeerState `json:"state,omitempty" azure:"ro"`
}

// Response for list BGP peer status API service call.
type BgpPeerStatusListResult struct {
	// List of BGP peers.
	Value *[]BgpPeerStatus `json:"value,omitempty"`
}

// BgpPeerStatusListResultPollerResponse is the response envelope for operations that asynchronously return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*BgpPeerStatusListResultResponse, error)

	// Poller contains an initialized poller.
	Poller BgpPeerStatusListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpPeerStatusListResultResponse is the response envelope for operations that return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultResponse struct {
	// Response for list BGP peer status API service call.
	BgpPeerStatusListResult *BgpPeerStatusListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpServiceCommunitiesListOptions contains the optional parameters for the BgpServiceCommunities.List method.
type BgpServiceCommunitiesListOptions struct {
	// placeholder for future optional parameters
}

// Service Community Properties.
type BgpServiceCommunity struct {
	Resource
	// Properties of the BGP service community.
	Properties *BgpServiceCommunityPropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListServiceCommunity API service call.
type BgpServiceCommunityListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of service community resources.
	Value *[]BgpServiceCommunity `json:"value,omitempty"`
}

// BgpServiceCommunityListResultResponse is the response envelope for operations that return a BgpServiceCommunityListResult type.
type BgpServiceCommunityListResultResponse struct {
	// Response for the ListServiceCommunity API service call.
	BgpServiceCommunityListResult *BgpServiceCommunityListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of Service Community.
type BgpServiceCommunityPropertiesFormat struct {
	// A list of bgp communities.
	BgpCommunities *[]BgpCommunity `json:"bgpCommunities,omitempty"`

	// The name of the bgp community. e.g. Skype.
	ServiceName *string `json:"serviceName,omitempty"`
}

// BGP settings details.
type BgpSettings struct {
	// The BGP speaker's ASN.
	Asn *int64 `json:"asn,omitempty"`

	// The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`

	// BGP peering address with IP configuration ID for virtual network gateway.
	BgpPeeringAddresses *[]IPConfigurationBgpPeeringAddress `json:"bgpPeeringAddresses,omitempty"`

	// The weight added to routes learned from this BGP speaker.
	PeerWeight *int32 `json:"peerWeight,omitempty"`
}

// Network Virtual Appliance Sku Properties.
type BreakOutCategoryPolicies struct {
	// Flag to control breakout of o365 allow category.
	Allow *bool `json:"allow,omitempty"`

	// Flag to control breakout of o365 default category.
	Default *bool `json:"default,omitempty"`

	// Flag to control breakout of o365 optimize category.
	Optimize *bool `json:"optimize,omitempty"`
}

// Request body of the CheckPrivateLinkServiceVisibility API service call.
type CheckPrivateLinkServiceVisibilityRequest struct {
	// The alias of the private link service.
	PrivateLinkServiceAlias *string `json:"privateLinkServiceAlias,omitempty"`
}

// An error response from the service.
type CloudError struct {
	// Cloud error body.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
func (e CloudError) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += fmt.Sprintf("InnerError: %v\n", *e.InnerError)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// An error response from the service.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details *[]CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

type Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// Parameters that define the operation to create a connection monitor.
type ConnectionMonitor struct {
	// Connection monitor location.
	Location *string `json:"location,omitempty"`

	// Properties of the connection monitor.
	Properties *ConnectionMonitorParameters `json:"properties,omitempty"`

	// Connection monitor tags.
	Tags *map[string]string `json:"tags,omitempty"`
}

// Describes the destination of connection monitor.
type ConnectionMonitorDestination struct {
	// Address of the connection monitor destination (IP or domain name).
	Address *string `json:"address,omitempty"`

	// The destination port used by connection monitor.
	Port *int32 `json:"port,omitempty"`

	// The ID of the resource used as the destination by connection monitor.
	ResourceID *string `json:"resourceId,omitempty"`
}

// Describes the connection monitor endpoint.
type ConnectionMonitorEndpoint struct {
	// Address of the connection monitor endpoint (IP or domain name).
	Address *string `json:"address,omitempty"`

	// Test coverage for the endpoint.
	CoverageLevel *CoverageLevel `json:"coverageLevel,omitempty"`

	// Filter for sub-items within the endpoint.
	Filter *ConnectionMonitorEndpointFilter `json:"filter,omitempty"`

	// The name of the connection monitor endpoint.
	Name *string `json:"name,omitempty"`

	// Resource ID of the connection monitor endpoint.
	ResourceID *string `json:"resourceId,omitempty"`

	// Endpoint scope.
	Scope *ConnectionMonitorEndpointScope `json:"scope,omitempty"`

	// The endpoint type.
	Type *EndpointType `json:"type,omitempty"`
}

// Describes the connection monitor endpoint filter.
type ConnectionMonitorEndpointFilter struct {
	// List of items in the filter.
	Items *[]ConnectionMonitorEndpointFilterItem `json:"items,omitempty"`

	// The behavior of the endpoint filter. Currently only 'Include' is supported.
	Type *ConnectionMonitorEndpointFilterType `json:"type,omitempty"`
}

// Describes the connection monitor endpoint filter item.
type ConnectionMonitorEndpointFilterItem struct {
	// The address of the filter item.
	Address *string `json:"address,omitempty"`

	// The type of item included in the filter. Currently only 'AgentAddress' is supported.
	Type *ConnectionMonitorEndpointFilterItemType `json:"type,omitempty"`
}

// Describes the connection monitor endpoint scope.
type ConnectionMonitorEndpointScope struct {
	// List of items which needs to be excluded from the endpoint scope.
	Exclude *[]ConnectionMonitorEndpointScopeItem `json:"exclude,omitempty"`

	// List of items which needs to be included to the endpoint scope.
	Include *[]ConnectionMonitorEndpointScopeItem `json:"include,omitempty"`
}

// Describes the connection monitor endpoint scope item.
type ConnectionMonitorEndpointScopeItem struct {
	// The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.
	Address *string `json:"address,omitempty"`
}

// Describes the HTTP configuration.
type ConnectionMonitorHTTPConfiguration struct {
	// The HTTP method to use.
	Method *HTTPConfigurationMethod `json:"method,omitempty"`

	// The path component of the URI. For instance, "/dir1/dir2".
	Path *string `json:"path,omitempty"`

	// The port to connect to.
	Port *int32 `json:"port,omitempty"`

	// Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.
	PreferHTTPs *bool `json:"preferHTTPS,omitempty"`

	// The HTTP headers to transmit with the request.
	RequestHeaders *[]HTTPHeader `json:"requestHeaders,omitempty"`

	// HTTP status codes to consider successful. For instance, "2xx,301-304,418".
	ValidStatusCodeRanges *[]string `json:"validStatusCodeRanges,omitempty"`
}

// Describes the ICMP configuration.
type ConnectionMonitorIcmpConfiguration struct {
	// Value indicating whether path evaluation with trace route should be disabled.
	DisableTraceRoute *bool `json:"disableTraceRoute,omitempty"`
}

// List of connection monitors.
type ConnectionMonitorListResult struct {
	// Information about connection monitors.
	Value *[]ConnectionMonitorResult `json:"value,omitempty"`
}

// ConnectionMonitorListResultResponse is the response envelope for operations that return a ConnectionMonitorListResult type.
type ConnectionMonitorListResultResponse struct {
	// List of connection monitors.
	ConnectionMonitorListResult *ConnectionMonitorListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes a connection monitor output destination.
type ConnectionMonitorOutput struct {
	// Connection monitor output destination type. Currently, only "Workspace" is supported.
	Type *OutputType `json:"type,omitempty"`

	// Describes the settings for producing output into a log analytics workspace.
	WorkspaceSettings *ConnectionMonitorWorkspaceSettings `json:"workspaceSettings,omitempty"`
}

// Parameters that define the operation to create a connection monitor.
type ConnectionMonitorParameters struct {
	// Determines if the connection monitor will start automatically once created.
	AutoStart *bool `json:"autoStart,omitempty"`

	// Describes the destination of connection monitor.
	Destination *ConnectionMonitorDestination `json:"destination,omitempty"`

	// List of connection monitor endpoints.
	Endpoints *[]ConnectionMonitorEndpoint `json:"endpoints,omitempty"`

	// Monitoring interval in seconds.
	MonitoringIntervalInSeconds *int32 `json:"monitoringIntervalInSeconds,omitempty"`

	// Optional notes to be associated with the connection monitor.
	Notes *string `json:"notes,omitempty"`

	// List of connection monitor outputs.
	Outputs *[]ConnectionMonitorOutput `json:"outputs,omitempty"`

	// Describes the source of connection monitor.
	Source *ConnectionMonitorSource `json:"source,omitempty"`

	// List of connection monitor test configurations.
	TestConfigurations *[]ConnectionMonitorTestConfiguration `json:"testConfigurations,omitempty"`

	// List of connection monitor test groups.
	TestGroups *[]ConnectionMonitorTestGroup `json:"testGroups,omitempty"`
}

func (c ConnectionMonitorParameters) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	if c.AutoStart != nil {
		objectMap["autoStart"] = c.AutoStart
	}
	if c.Destination != nil {
		objectMap["destination"] = c.Destination
	}
	if c.Endpoints != nil {
		objectMap["endpoints"] = c.Endpoints
	}
	if c.MonitoringIntervalInSeconds != nil {
		objectMap["monitoringIntervalInSeconds"] = c.MonitoringIntervalInSeconds
	}
	if c.Notes != nil {
		objectMap["notes"] = c.Notes
	}
	if c.Outputs != nil {
		objectMap["outputs"] = c.Outputs
	}
	if c.Source != nil {
		objectMap["source"] = c.Source
	}
	if c.TestConfigurations != nil {
		objectMap["testConfigurations"] = c.TestConfigurations
	}
	if c.TestGroups != nil {
		objectMap["testGroups"] = c.TestGroups
	}
	return objectMap
}

func (c *ConnectionMonitorParameters) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoStart":
			if val != nil {
				err = json.Unmarshal(*val, &c.AutoStart)
			}
			delete(rawMsg, key)
		case "destination":
			if val != nil {
				err = json.Unmarshal(*val, &c.Destination)
			}
			delete(rawMsg, key)
		case "endpoints":
			if val != nil {
				err = json.Unmarshal(*val, &c.Endpoints)
			}
			delete(rawMsg, key)
		case "monitoringIntervalInSeconds":
			if val != nil {
				err = json.Unmarshal(*val, &c.MonitoringIntervalInSeconds)
			}
			delete(rawMsg, key)
		case "notes":
			if val != nil {
				err = json.Unmarshal(*val, &c.Notes)
			}
			delete(rawMsg, key)
		case "outputs":
			if val != nil {
				err = json.Unmarshal(*val, &c.Outputs)
			}
			delete(rawMsg, key)
		case "source":
			if val != nil {
				err = json.Unmarshal(*val, &c.Source)
			}
			delete(rawMsg, key)
		case "testConfigurations":
			if val != nil {
				err = json.Unmarshal(*val, &c.TestConfigurations)
			}
			delete(rawMsg, key)
		case "testGroups":
			if val != nil {
				err = json.Unmarshal(*val, &c.TestGroups)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// List of connection states snapshots.
type ConnectionMonitorQueryResult struct {
	// Status of connection monitor source.
	SourceStatus *ConnectionMonitorSourceStatus `json:"sourceStatus,omitempty"`

	// Information about connection states.
	States *[]ConnectionStateSnapshot `json:"states,omitempty"`
}

// ConnectionMonitorQueryResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ConnectionMonitorQueryResultResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionMonitorQueryResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorQueryResultResponse is the response envelope for operations that return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultResponse struct {
	// List of connection states snapshots.
	ConnectionMonitorQueryResult *ConnectionMonitorQueryResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Information about the connection monitor.
type ConnectionMonitorResult struct {
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// READ-ONLY; ID of the connection monitor.
	ID *string `json:"id,omitempty" azure:"ro"`

	// Connection monitor location.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; Name of the connection monitor.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the connection monitor result.
	Properties *ConnectionMonitorResultProperties `json:"properties,omitempty"`

	// Connection monitor tags.
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; Connection monitor type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ConnectionMonitorResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorResult type.
type ConnectionMonitorResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ConnectionMonitorResultResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionMonitorResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the properties of a connection monitor.
type ConnectionMonitorResultProperties struct {
	ConnectionMonitorParameters
	// READ-ONLY; Type of connection monitor.
	ConnectionMonitorType *ConnectionMonitorType `json:"connectionMonitorType,omitempty" azure:"ro"`

	// READ-ONLY; The monitoring status of the connection monitor.
	MonitoringStatus *string `json:"monitoringStatus,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the connection monitor.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The date and time when the connection monitor was started.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorResultProperties.
func (c ConnectionMonitorResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := c.ConnectionMonitorParameters.marshalInternal()
	if c.ConnectionMonitorType != nil {
		objectMap["connectionMonitorType"] = c.ConnectionMonitorType
	}
	if c.MonitoringStatus != nil {
		objectMap["monitoringStatus"] = c.MonitoringStatus
	}
	if c.ProvisioningState != nil {
		objectMap["provisioningState"] = c.ProvisioningState
	}
	if c.StartTime != nil {
		objectMap["startTime"] = (*timeRFC3339)(c.StartTime)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionMonitorResultProperties.
func (c *ConnectionMonitorResultProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionMonitorType":
			if val != nil {
				err = json.Unmarshal(*val, &c.ConnectionMonitorType)
			}
			delete(rawMsg, key)
		case "monitoringStatus":
			if val != nil {
				err = json.Unmarshal(*val, &c.MonitoringStatus)
			}
			delete(rawMsg, key)
		case "provisioningState":
			if val != nil {
				err = json.Unmarshal(*val, &c.ProvisioningState)
			}
			delete(rawMsg, key)
		case "startTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				c.StartTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return c.ConnectionMonitorParameters.unmarshalInternal(rawMsg)
}

// ConnectionMonitorResultResponse is the response envelope for operations that return a ConnectionMonitorResult type.
type ConnectionMonitorResultResponse struct {
	// Information about the connection monitor.
	ConnectionMonitorResult *ConnectionMonitorResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Describes the source of connection monitor.
type ConnectionMonitorSource struct {
	// The source port used by connection monitor.
	Port *int32 `json:"port,omitempty"`

	// The ID of the resource used as the source by connection monitor.
	ResourceID *string `json:"resourceId,omitempty"`
}

// Describes the threshold for declaring a test successful.
type ConnectionMonitorSuccessThreshold struct {
	// The maximum percentage of failed checks permitted for a test to evaluate as successful.
	ChecksFailedPercent *int32 `json:"checksFailedPercent,omitempty"`

	// The maximum round-trip time in milliseconds permitted for a test to evaluate as successful.
	RoundTripTimeMS *float32 `json:"roundTripTimeMs,omitempty"`
}

// Describes the TCP configuration.
type ConnectionMonitorTCPConfiguration struct {
	// Destination port behavior.
	DestinationPortBehavior *DestinationPortBehavior `json:"destinationPortBehavior,omitempty"`

	// Value indicating whether path evaluation with trace route should be disabled.
	DisableTraceRoute *bool `json:"disableTraceRoute,omitempty"`

	// The port to connect to.
	Port *int32 `json:"port,omitempty"`
}

// Describes a connection monitor test configuration.
type ConnectionMonitorTestConfiguration struct {
	// The parameters used to perform test evaluation over HTTP.
	HTTPConfiguration *ConnectionMonitorHTTPConfiguration `json:"httpConfiguration,omitempty"`

	// The parameters used to perform test evaluation over ICMP.
	IcmpConfiguration *ConnectionMonitorIcmpConfiguration `json:"icmpConfiguration,omitempty"`

	// The name of the connection monitor test configuration.
	Name *string `json:"name,omitempty"`

	// The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
	PreferredIPVersion *PreferredIPVersion `json:"preferredIPVersion,omitempty"`

	// The protocol to use in test evaluation.
	Protocol *ConnectionMonitorTestConfigurationProtocol `json:"protocol,omitempty"`

	// The threshold for declaring a test successful.
	SuccessThreshold *ConnectionMonitorSuccessThreshold `json:"successThreshold,omitempty"`

	// The parameters used to perform test evaluation over TCP.
	TCPConfiguration *ConnectionMonitorTCPConfiguration `json:"tcpConfiguration,omitempty"`

	// The frequency of test evaluation, in seconds.
	TestFrequencySec *int32 `json:"testFrequencySec,omitempty"`
}

// Describes the connection monitor test group.
type ConnectionMonitorTestGroup struct {
	// List of destination endpoint names.
	Destinations *[]string `json:"destinations,omitempty"`

	// Value indicating whether test group is disabled.
	Disable *bool `json:"disable,omitempty"`

	// The name of the connection monitor test group.
	Name *string `json:"name,omitempty"`

	// List of source endpoint names.
	Sources *[]string `json:"sources,omitempty"`

	// List of test configuration names.
	TestConfigurations *[]string `json:"testConfigurations,omitempty"`
}

// Describes the settings for producing output into a log analytics workspace.
type ConnectionMonitorWorkspaceSettings struct {
	// Log analytics workspace resource ID.
	WorkspaceResourceID *string `json:"workspaceResourceId,omitempty"`
}

// ConnectionMonitorsCreateOrUpdateOptions contains the optional parameters for the ConnectionMonitors.CreateOrUpdate method.
type ConnectionMonitorsCreateOrUpdateOptions struct {
	// Value indicating whether connection monitor V1 should be migrated to V2 format.
	Migrate *string
}

// ConnectionMonitorsDeleteOptions contains the optional parameters for the ConnectionMonitors.Delete method.
type ConnectionMonitorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsGetOptions contains the optional parameters for the ConnectionMonitors.Get method.
type ConnectionMonitorsGetOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsListOptions contains the optional parameters for the ConnectionMonitors.List method.
type ConnectionMonitorsListOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsQueryOptions contains the optional parameters for the ConnectionMonitors.Query method.
type ConnectionMonitorsQueryOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsStartOptions contains the optional parameters for the ConnectionMonitors.Start method.
type ConnectionMonitorsStartOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsStopOptions contains the optional parameters for the ConnectionMonitors.Stop method.
type ConnectionMonitorsStopOptions struct {
	// placeholder for future optional parameters
}

// ConnectionMonitorsUpdateTagsOptions contains the optional parameters for the ConnectionMonitors.UpdateTags method.
type ConnectionMonitorsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// The virtual network connection reset shared key.
type ConnectionResetSharedKey struct {
	// The virtual network connection reset shared key length, should between 1 and 128.
	KeyLength *int32 `json:"keyLength,omitempty"`
}

// ConnectionResetSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ConnectionResetSharedKeyResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionResetSharedKeyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionResetSharedKeyResponse is the response envelope for operations that return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyResponse struct {
	// The virtual network connection reset shared key.
	ConnectionResetSharedKey *ConnectionResetSharedKey

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for GetConnectionSharedKey API service call.
type ConnectionSharedKey struct {
	SubResource
	// The virtual network connection shared key value.
	Value *string `json:"value,omitempty"`
}

// ConnectionSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionSharedKey type.
type ConnectionSharedKeyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ConnectionSharedKeyResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionSharedKeyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionSharedKeyResponse is the response envelope for operations that return a ConnectionSharedKey type.
type ConnectionSharedKeyResponse struct {
	// Response for GetConnectionSharedKey API service call.
	ConnectionSharedKey *ConnectionSharedKey

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Connection state snapshot.
type ConnectionStateSnapshot struct {
	// Average latency in ms.
	AvgLatencyInMS *int64 `json:"avgLatencyInMs,omitempty"`

	// The connection state.
	ConnectionState *ConnectionState `json:"connectionState,omitempty"`

	// The end time of the connection snapshot.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Connectivity analysis evaluation state.
	EvaluationState *EvaluationState `json:"evaluationState,omitempty"`

	// READ-ONLY; List of hops between the source and the destination.
	Hops *[]ConnectivityHop `json:"hops,omitempty" azure:"ro"`

	// Maximum latency in ms.
	MaxLatencyInMS *int64 `json:"maxLatencyInMs,omitempty"`

	// Minimum latency in ms.
	MinLatencyInMS *int64 `json:"minLatencyInMs,omitempty"`

	// The number of failed probes.
	ProbesFailed *int64 `json:"probesFailed,omitempty"`

	// The number of sent probes.
	ProbesSent *int64 `json:"probesSent,omitempty"`

	// The start time of the connection snapshot.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionStateSnapshot.
func (c ConnectionStateSnapshot) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if c.AvgLatencyInMS != nil {
		objectMap["avgLatencyInMs"] = c.AvgLatencyInMS
	}
	if c.ConnectionState != nil {
		objectMap["connectionState"] = c.ConnectionState
	}
	if c.EndTime != nil {
		objectMap["endTime"] = (*timeRFC3339)(c.EndTime)
	}
	if c.EvaluationState != nil {
		objectMap["evaluationState"] = c.EvaluationState
	}
	if c.Hops != nil {
		objectMap["hops"] = c.Hops
	}
	if c.MaxLatencyInMS != nil {
		objectMap["maxLatencyInMs"] = c.MaxLatencyInMS
	}
	if c.MinLatencyInMS != nil {
		objectMap["minLatencyInMs"] = c.MinLatencyInMS
	}
	if c.ProbesFailed != nil {
		objectMap["probesFailed"] = c.ProbesFailed
	}
	if c.ProbesSent != nil {
		objectMap["probesSent"] = c.ProbesSent
	}
	if c.StartTime != nil {
		objectMap["startTime"] = (*timeRFC3339)(c.StartTime)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionStateSnapshot.
func (c *ConnectionStateSnapshot) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "avgLatencyInMs":
			if val != nil {
				err = json.Unmarshal(*val, &c.AvgLatencyInMS)
			}
			delete(rawMsg, key)
		case "connectionState":
			if val != nil {
				err = json.Unmarshal(*val, &c.ConnectionState)
			}
			delete(rawMsg, key)
		case "endTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				c.EndTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "evaluationState":
			if val != nil {
				err = json.Unmarshal(*val, &c.EvaluationState)
			}
			delete(rawMsg, key)
		case "hops":
			if val != nil {
				err = json.Unmarshal(*val, &c.Hops)
			}
			delete(rawMsg, key)
		case "maxLatencyInMs":
			if val != nil {
				err = json.Unmarshal(*val, &c.MaxLatencyInMS)
			}
			delete(rawMsg, key)
		case "minLatencyInMs":
			if val != nil {
				err = json.Unmarshal(*val, &c.MinLatencyInMS)
			}
			delete(rawMsg, key)
		case "probesFailed":
			if val != nil {
				err = json.Unmarshal(*val, &c.ProbesFailed)
			}
			delete(rawMsg, key)
		case "probesSent":
			if val != nil {
				err = json.Unmarshal(*val, &c.ProbesSent)
			}
			delete(rawMsg, key)
		case "startTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				c.StartTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Parameters that define destination of connection.
type ConnectivityDestination struct {
	// The IP address or URI the resource to which a connection attempt will be made.
	Address *string `json:"address,omitempty"`

	// Port on which check connectivity will be performed.
	Port *int32 `json:"port,omitempty"`

	// The ID of the resource to which a connection attempt will be made.
	ResourceID *string `json:"resourceId,omitempty"`
}

// Information about a hop between the source and the destination.
type ConnectivityHop struct {
	// READ-ONLY; The IP address of the hop.
	Address *string `json:"address,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the hop.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; List of issues.
	Issues *[]ConnectivityIssue `json:"issues,omitempty" azure:"ro"`

	// READ-ONLY; List of hop links.
	Links *[]HopLink `json:"links,omitempty" azure:"ro"`

	// READ-ONLY; List of next hop identifiers.
	NextHopIDs *[]string `json:"nextHopIds,omitempty" azure:"ro"`

	// READ-ONLY; List of previous hop identifiers.
	PreviousHopIDs *[]string `json:"previousHopIds,omitempty" azure:"ro"`

	// READ-ONLY; List of previous hop links.
	PreviousLinks *[]HopLink `json:"previousLinks,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the resource corresponding to this hop.
	ResourceID *string `json:"resourceId,omitempty" azure:"ro"`

	// READ-ONLY; The type of the hop.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Information on the connectivity status.
type ConnectivityInformation struct {
	// READ-ONLY; Average latency in milliseconds.
	AvgLatencyInMS *int32 `json:"avgLatencyInMs,omitempty" azure:"ro"`

	// READ-ONLY; The connection status.
	ConnectionStatus *ConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; List of hops between the source and the destination.
	Hops *[]ConnectivityHop `json:"hops,omitempty" azure:"ro"`

	// READ-ONLY; Maximum latency in milliseconds.
	MaxLatencyInMS *int32 `json:"maxLatencyInMs,omitempty" azure:"ro"`

	// READ-ONLY; Minimum latency in milliseconds.
	MinLatencyInMS *int32 `json:"minLatencyInMs,omitempty" azure:"ro"`

	// READ-ONLY; Number of failed probes.
	ProbesFailed *int32 `json:"probesFailed,omitempty" azure:"ro"`

	// READ-ONLY; Total number of probes sent.
	ProbesSent *int32 `json:"probesSent,omitempty" azure:"ro"`
}

// ConnectivityInformationPollerResponse is the response envelope for operations that asynchronously return a ConnectivityInformation type.
type ConnectivityInformationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ConnectivityInformationResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectivityInformationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectivityInformationResponse is the response envelope for operations that return a ConnectivityInformation type.
type ConnectivityInformationResponse struct {
	// Information on the connectivity status.
	ConnectivityInformation *ConnectivityInformation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Information about an issue encountered in the process of checking for connectivity.
type ConnectivityIssue struct {
	// READ-ONLY; Provides additional context on the issue.
	Context *[]map[string]string `json:"context,omitempty" azure:"ro"`

	// READ-ONLY; The origin of the issue.
	Origin *Origin `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the issue.
	Severity *Severity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; The type of issue.
	Type *IssueType `json:"type,omitempty" azure:"ro"`
}

// Parameters that determine how the connectivity check will be performed.
type ConnectivityParameters struct {
	// The destination of connection.
	Destination *ConnectivityDestination `json:"destination,omitempty"`

	// Preferred IP version of the connection.
	PreferredIPVersion *IPVersion `json:"preferredIPVersion,omitempty"`

	// Network protocol.
	Protocol *Protocol `json:"protocol,omitempty"`

	// Configuration of the protocol.
	ProtocolConfiguration *ProtocolConfiguration `json:"protocolConfiguration,omitempty"`

	// The source of the connection.
	Source *ConnectivitySource `json:"source,omitempty"`
}

// Parameters that define the source of the connection.
type ConnectivitySource struct {
	// The source port from which a connectivity check will be performed.
	Port *int32 `json:"port,omitempty"`

	// The ID of the resource from which a connectivity check will be initiated.
	ResourceID *string `json:"resourceId,omitempty"`
}

// Reference to container resource in remote resource provider.
type Container struct {
	SubResource
}

// Container network interface child resource.
type ContainerNetworkInterface struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Container network interface properties.
	Properties *ContainerNetworkInterfacePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Sub Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Container network interface configuration child resource.
type ContainerNetworkInterfaceConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Container network interface configuration properties.
	Properties *ContainerNetworkInterfaceConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Sub Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Container network interface configuration properties.
type ContainerNetworkInterfaceConfigurationPropertiesFormat struct {
	// A list of container network interfaces created from this container network interface configuration.
	ContainerNetworkInterfaces *[]SubResource `json:"containerNetworkInterfaces,omitempty"`

	// A list of ip configurations of the container network interface configuration.
	IPConfigurations *[]IPConfigurationProfile `json:"ipConfigurations,omitempty"`

	// READ-ONLY; The provisioning state of the container network interface configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// The ip configuration for a container network interface.
type ContainerNetworkInterfaceIPConfiguration struct {
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the container network interface IP configuration.
	Properties *ContainerNetworkInterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Sub Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of the container network interface IP configuration.
type ContainerNetworkInterfaceIPConfigurationPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the container network interface IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Properties of container network interface.
type ContainerNetworkInterfacePropertiesFormat struct {
	// Reference to the container to which this container network interface is attached.
	Container *SubResource `json:"container,omitempty"`

	// READ-ONLY; Container network interface configuration from which this container network interface is created.
	ContainerNetworkInterfaceConfiguration *ContainerNetworkInterfaceConfiguration `json:"containerNetworkInterfaceConfiguration,omitempty" azure:"ro"`

	// READ-ONLY; Reference to the ip configuration on this container nic.
	IPConfigurations *[]ContainerNetworkInterfaceIPConfiguration `json:"ipConfigurations,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the container network interface resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Contains custom Dns resolution configuration from customer.
type CustomDNSConfigPropertiesFormat struct {
	// Fqdn that resolves to private endpoint ip address.
	Fqdn *string `json:"fqdn,omitempty"`

	// A list of private ip addresses of the private endpoint.
	IPAddresses *[]string `json:"ipAddresses,omitempty"`
}

// Custom IP prefix resource.
type CustomIPPrefix struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Custom IP prefix properties.
	Properties *CustomIPPrefixPropertiesFormat `json:"properties,omitempty"`

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Response for ListCustomIpPrefixes API service call.
type CustomIPPrefixListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of Custom IP prefixes that exists in a resource group.
	Value *[]CustomIPPrefix `json:"value,omitempty"`
}

// CustomIPPrefixListResultResponse is the response envelope for operations that return a CustomIPPrefixListResult type.
type CustomIPPrefixListResultResponse struct {
	// Response for ListCustomIpPrefixes API service call.
	CustomIPPrefixListResult *CustomIPPrefixListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomIPPrefixPollerResponse is the response envelope for operations that asynchronously return a CustomIPPrefix type.
type CustomIPPrefixPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*CustomIPPrefixResponse, error)

	// Poller contains an initialized poller.
	Poller CustomIPPrefixPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Custom IP prefix properties.
type CustomIPPrefixPropertiesFormat struct {
	// The prefix range in CIDR notation. Should include the start address and the prefix length.
	Cidr *string `json:"cidr,omitempty"`

	// The commissioned state of the Custom IP Prefix.
	CommissionedState *CommissionedState `json:"commissionedState,omitempty"`

	// READ-ONLY; The provisioning state of the custom IP prefix resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The list of all referenced PublicIpPrefixes.
	PublicIPPrefixes *[]SubResource `json:"publicIpPrefixes,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the custom IP prefix resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// CustomIPPrefixResponse is the response envelope for operations that return a CustomIPPrefix type.
type CustomIPPrefixResponse struct {
	// Custom IP prefix resource.
	CustomIPPrefix *CustomIPPrefix

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomIPPrefixesCreateOrUpdateOptions contains the optional parameters for the CustomIPPrefixes.CreateOrUpdate method.
type CustomIPPrefixesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomIPPrefixesDeleteOptions contains the optional parameters for the CustomIPPrefixes.Delete method.
type CustomIPPrefixesDeleteOptions struct {
	// placeholder for future optional parameters
}

// CustomIPPrefixesGetOptions contains the optional parameters for the CustomIPPrefixes.Get method.
type CustomIPPrefixesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// CustomIPPrefixesListAllOptions contains the optional parameters for the CustomIPPrefixes.ListAll method.
type CustomIPPrefixesListAllOptions struct {
	// placeholder for future optional parameters
}

// CustomIPPrefixesListOptions contains the optional parameters for the CustomIPPrefixes.List method.
type CustomIPPrefixesListOptions struct {
	// placeholder for future optional parameters
}

// CustomIPPrefixesUpdateTagsOptions contains the optional parameters for the CustomIPPrefixes.UpdateTags method.
type CustomIPPrefixesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Response for the CheckDnsNameAvailability API service call.
type DNSNameAvailabilityResult struct {
	// Domain availability (True/False).
	Available *bool `json:"available,omitempty"`
}

// DNSNameAvailabilityResultResponse is the response envelope for operations that return a DNSNameAvailabilityResult type.
type DNSNameAvailabilityResultResponse struct {
	// Response for the CheckDnsNameAvailability API service call.
	DNSNameAvailabilityResult *DNSNameAvailabilityResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DNS Proxy Settings in Firewall Policy.
type DNSSettings struct {
	// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
	EnableProxy *bool `json:"enableProxy,omitempty"`

	// FQDNs in Network Rules are supported when set to true.
	RequireProxyForNetworkRules *bool `json:"requireProxyForNetworkRules,omitempty"`

	// List of Custom DNS Servers.
	Servers *[]string `json:"servers,omitempty"`
}

// DdosCustomPoliciesCreateOrUpdateOptions contains the optional parameters for the DdosCustomPolicies.CreateOrUpdate method.
type DdosCustomPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DdosCustomPoliciesDeleteOptions contains the optional parameters for the DdosCustomPolicies.Delete method.
type DdosCustomPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// DdosCustomPoliciesGetOptions contains the optional parameters for the DdosCustomPolicies.Get method.
type DdosCustomPoliciesGetOptions struct {
	// placeholder for future optional parameters
}

// DdosCustomPoliciesUpdateTagsOptions contains the optional parameters for the DdosCustomPolicies.UpdateTags method.
type DdosCustomPoliciesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// A DDoS custom policy in a resource group.
type DdosCustomPolicy struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the DDoS custom policy.
	Properties *DdosCustomPolicyPropertiesFormat `json:"properties,omitempty"`
}

// DdosCustomPolicyPollerResponse is the response envelope for operations that asynchronously return a DdosCustomPolicy type.
type DdosCustomPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*DdosCustomPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller DdosCustomPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DDoS custom policy properties.
type DdosCustomPolicyPropertiesFormat struct {
	// The protocol-specific DDoS policy customization parameters.
	ProtocolCustomSettings *[]ProtocolCustomSettingsFormat `json:"protocolCustomSettings,omitempty"`

	// READ-ONLY; The provisioning state of the DDoS custom policy resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The list of public IPs associated with the DDoS custom policy resource. This list is read-only.
	PublicIPAddresses *[]SubResource `json:"publicIPAddresses,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the DDoS custom policy resource. It uniquely identifies the resource, even if the user changes its name or migrate
	// the resource across subscriptions or resource groups.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// DdosCustomPolicyResponse is the response envelope for operations that return a DdosCustomPolicy type.
type DdosCustomPolicyResponse struct {
	// A DDoS custom policy in a resource group.
	DdosCustomPolicy *DdosCustomPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// A DDoS protection plan in a resource group.
type DdosProtectionPlan struct {
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// Resource location.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the DDoS protection plan.
	Properties *DdosProtectionPlanPropertiesFormat `json:"properties,omitempty"`

	// Resource tags.
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// A list of DDoS protection plans.
type DdosProtectionPlanListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of DDoS protection plans.
	Value *[]DdosProtectionPlan `json:"value,omitempty"`
}

// DdosProtectionPlanListResultResponse is the response envelope for operations that return a DdosProtectionPlanListResult type.
type DdosProtectionPlanListResultResponse struct {
	// A list of DDoS protection plans.
	DdosProtectionPlanListResult *DdosProtectionPlanListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosProtectionPlanPollerResponse is the response envelope for operations that asynchronously return a DdosProtectionPlan type.
type DdosProtectionPlanPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*DdosProtectionPlanResponse, error)

	// Poller contains an initialized poller.
	Poller DdosProtectionPlanPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DDoS protection plan properties.
type DdosProtectionPlanPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the DDoS protection plan resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the DDoS protection plan resource. It uniquely identifies the resource, even if the user changes its name or
	// migrate the resource across subscriptions or resource groups.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// READ-ONLY; The list of virtual networks associated with the DDoS protection plan resource. This list is read-only.
	VirtualNetworks *[]SubResource `json:"virtualNetworks,omitempty" azure:"ro"`
}

// DdosProtectionPlanResponse is the response envelope for operations that return a DdosProtectionPlan type.
type DdosProtectionPlanResponse struct {
	// A DDoS protection plan in a resource group.
	DdosProtectionPlan *DdosProtectionPlan

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosProtectionPlansCreateOrUpdateOptions contains the optional parameters for the DdosProtectionPlans.CreateOrUpdate method.
type DdosProtectionPlansCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DdosProtectionPlansDeleteOptions contains the optional parameters for the DdosProtectionPlans.Delete method.
type DdosProtectionPlansDeleteOptions struct {
	// placeholder for future optional parameters
}

// DdosProtectionPlansGetOptions contains the optional parameters for the DdosProtectionPlans.Get method.
type DdosProtectionPlansGetOptions struct {
	// placeholder for future optional parameters
}

// DdosProtectionPlansListByResourceGroupOptions contains the optional parameters for the DdosProtectionPlans.ListByResourceGroup method.
type DdosProtectionPlansListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DdosProtectionPlansListOptions contains the optional parameters for the DdosProtectionPlans.List method.
type DdosProtectionPlansListOptions struct {
	// placeholder for future optional parameters
}

// DdosProtectionPlansUpdateTagsOptions contains the optional parameters for the DdosProtectionPlans.UpdateTags method.
type DdosProtectionPlansUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Contains the DDoS protection settings of the public IP.
type DdosSettings struct {
	// The DDoS custom policy associated with the public IP.
	DdosCustomPolicy *SubResource `json:"ddosCustomPolicy,omitempty"`

	// Enables DDoS protection on the public IP.
	ProtectedIP *bool `json:"protectedIP,omitempty"`

	// The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
	ProtectionCoverage *DdosSettingsProtectionCoverage `json:"protectionCoverage,omitempty"`
}

// DefaultSecurityRulesGetOptions contains the optional parameters for the DefaultSecurityRules.Get method.
type DefaultSecurityRulesGetOptions struct {
	// placeholder for future optional parameters
}

// DefaultSecurityRulesListOptions contains the optional parameters for the DefaultSecurityRules.List method.
type DefaultSecurityRulesListOptions struct {
	// placeholder for future optional parameters
}

// Details the service to which the subnet is delegated.
type Delegation struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a subnet. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the subnet.
	Properties *ServiceDelegationPropertiesFormat `json:"properties,omitempty"`
}

// List of properties of the device.
type DeviceProperties struct {
	// Model of the device.
	DeviceModel *string `json:"deviceModel,omitempty"`

	// Name of the device Vendor.
	DeviceVendor *string `json:"deviceVendor,omitempty"`

	// Link speed.
	LinkSpeedInMbps *int32 `json:"linkSpeedInMbps,omitempty"`
}

// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP
// options.
type DhcpOptions struct {
	// The list of DNS servers IP addresses.
	DNSServers *[]string `json:"dnsServers,omitempty"`
}

// Dimension of the metric.
type Dimension struct {
	// The display name of the dimension.
	DisplayName *string `json:"displayName,omitempty"`

	// The internal name of the dimension.
	InternalName *string `json:"internalName,omitempty"`

	// The name of the dimension.
	Name *string `json:"name,omitempty"`
}

// DSCP Configuration in a resource group.
type DscpConfiguration struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the network interface.
	Properties *DscpConfigurationPropertiesFormat `json:"properties,omitempty"`
}

// DscpConfigurationCreateOrUpdateOptions contains the optional parameters for the DscpConfiguration.CreateOrUpdate method.
type DscpConfigurationCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DscpConfigurationDeleteOptions contains the optional parameters for the DscpConfiguration.Delete method.
type DscpConfigurationDeleteOptions struct {
	// placeholder for future optional parameters
}

// DscpConfigurationGetOptions contains the optional parameters for the DscpConfiguration.Get method.
type DscpConfigurationGetOptions struct {
	// placeholder for future optional parameters
}

// DscpConfigurationListAllOptions contains the optional parameters for the DscpConfiguration.ListAll method.
type DscpConfigurationListAllOptions struct {
	// placeholder for future optional parameters
}

// DscpConfigurationListOptions contains the optional parameters for the DscpConfiguration.List method.
type DscpConfigurationListOptions struct {
	// placeholder for future optional parameters
}

// Response for the DscpConfigurationList API service call.
type DscpConfigurationListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of dscp configurations in a resource group.
	Value *[]DscpConfiguration `json:"value,omitempty"`
}

// DscpConfigurationListResultResponse is the response envelope for operations that return a DscpConfigurationListResult type.
type DscpConfigurationListResultResponse struct {
	// Response for the DscpConfigurationList API service call.
	DscpConfigurationListResult *DscpConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DscpConfigurationPollerResponse is the response envelope for operations that asynchronously return a DscpConfiguration type.
type DscpConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*DscpConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller DscpConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DSCP Configuration properties.
type DscpConfigurationPropertiesFormat struct {
	// READ-ONLY; Associated Network Interfaces to the DSCP Configuration.
	AssociatedNetworkInterfaces *[]NetworkInterface `json:"associatedNetworkInterfaces,omitempty" azure:"ro"`

	// Destination IP ranges.
	DestinationIPRanges *[]QosIPRange `json:"destinationIpRanges,omitempty"`

	// Destination port ranges.
	DestinationPortRanges *[]QosPortRange `json:"destinationPortRanges,omitempty"`

	// List of markings to be used in the configuration.
	Markings *[]int32 `json:"markings,omitempty"`

	// RNM supported protocol types.
	Protocol *ProtocolType `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the DSCP Configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Qos Collection ID generated by RNM.
	QosCollectionID *string `json:"qosCollectionId,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the DSCP Configuration resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// Source IP ranges.
	SourceIPRanges *[]QosIPRange `json:"sourceIpRanges,omitempty"`

	// Sources port ranges.
	SourcePortRanges *[]QosPortRange `json:"sourcePortRanges,omitempty"`
}

// DscpConfigurationResponse is the response envelope for operations that return a DscpConfiguration type.
type DscpConfigurationResponse struct {
	// DSCP Configuration in a resource group.
	DscpConfiguration *DscpConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Effective network security group.
type EffectiveNetworkSecurityGroup struct {
	// Associated resources.
	Association *EffectiveNetworkSecurityGroupAssociation `json:"association,omitempty"`

	// A collection of effective security rules.
	EffectiveSecurityRules *[]EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`

	// The ID of network security group that is applied.
	NetworkSecurityGroup *SubResource `json:"networkSecurityGroup,omitempty"`

	// Mapping of tags to list of IP Addresses included within the tag.
	TagMap *string `json:"tagMap,omitempty"`
}

// The effective network security group association.
type EffectiveNetworkSecurityGroupAssociation struct {
	// The ID of the network interface if assigned.
	NetworkInterface *SubResource `json:"networkInterface,omitempty"`

	// The ID of the subnet if assigned.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Response for list effective network security groups API service call.
type EffectiveNetworkSecurityGroupListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of effective network security groups.
	Value *[]EffectiveNetworkSecurityGroup `json:"value,omitempty"`
}

// EffectiveNetworkSecurityGroupListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveNetworkSecurityGroupListResult
// type.
type EffectiveNetworkSecurityGroupListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*EffectiveNetworkSecurityGroupListResultResponse, error)

	// Poller contains an initialized poller.
	Poller EffectiveNetworkSecurityGroupListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveNetworkSecurityGroupListResultResponse is the response envelope for operations that return a EffectiveNetworkSecurityGroupListResult type.
type EffectiveNetworkSecurityGroupListResultResponse struct {
	// Response for list effective network security groups API service call.
	EffectiveNetworkSecurityGroupListResult *EffectiveNetworkSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Effective network security rules.
type EffectiveNetworkSecurityRule struct {
	// Whether network traffic is allowed or denied.
	Access *SecurityRuleAccess `json:"access,omitempty"`

	// The destination address prefix.
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`

	// The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and
	// the asterisk (*).
	DestinationAddressPrefixes *[]string `json:"destinationAddressPrefixes,omitempty"`

	// The destination port or range.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`

	// The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk
	// (*).
	DestinationPortRanges *[]string `json:"destinationPortRanges,omitempty"`

	// The direction of the rule.
	Direction *SecurityRuleDirection `json:"direction,omitempty"`

	// Expanded destination address prefix.
	ExpandedDestinationAddressPrefix *[]string `json:"expandedDestinationAddressPrefix,omitempty"`

	// The expanded source address prefix.
	ExpandedSourceAddressPrefix *[]string `json:"expandedSourceAddressPrefix,omitempty"`

	// The name of the security rule specified by the user (if created by the user).
	Name *string `json:"name,omitempty"`

	// The priority of the rule.
	Priority *int32 `json:"priority,omitempty"`

	// The network protocol this rule applies to.
	Protocol *EffectiveSecurityRuleProtocol `json:"protocol,omitempty"`

	// The source address prefix.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`

	// The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the
	// asterisk (*).
	SourceAddressPrefixes *[]string `json:"sourceAddressPrefixes,omitempty"`

	// The source port or range.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`

	// The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
	SourcePortRanges *[]string `json:"sourcePortRanges,omitempty"`
}

// Effective Route.
type EffectiveRoute struct {
	// The address prefixes of the effective routes in CIDR notation.
	AddressPrefix *[]string `json:"addressPrefix,omitempty"`

	// If true, on-premises routes are not propagated to the network interfaces in the subnet.
	DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`

	// The name of the user defined route. This is optional.
	Name *string `json:"name,omitempty"`

	// The IP address of the next hop of the effective route.
	NextHopIPAddress *[]string `json:"nextHopIpAddress,omitempty"`

	// The type of Azure hop the packet should be sent to.
	NextHopType *RouteNextHopType `json:"nextHopType,omitempty"`

	// Who created the route.
	Source *EffectiveRouteSource `json:"source,omitempty"`

	// The value of effective route.
	State *EffectiveRouteState `json:"state,omitempty"`
}

// Response for list effective route API service call.
type EffectiveRouteListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of effective routes.
	Value *[]EffectiveRoute `json:"value,omitempty"`
}

// EffectiveRouteListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveRouteListResult type.
type EffectiveRouteListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*EffectiveRouteListResultResponse, error)

	// Poller contains an initialized poller.
	Poller EffectiveRouteListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveRouteListResultResponse is the response envelope for operations that return a EffectiveRouteListResult type.
type EffectiveRouteListResultResponse struct {
	// Response for list effective route API service call.
	EffectiveRouteListResult *EffectiveRouteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The parameters specifying the resource whose effective routes are being requested.
type EffectiveRoutesParameters struct {
	// The resource whose effective routes are being requested.
	ResourceID *string `json:"resourceId,omitempty"`

	// The type of the specified resource like RouteTable, ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and P2SConnection.
	VirtualWanResourceType *string `json:"virtualWanResourceType,omitempty"`
}

// Endpoint service.
type EndpointServiceResult struct {
	SubResource
	// READ-ONLY; Name of the endpoint service.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of the endpoint service.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for the ListAvailableEndpointServices API service call.
type EndpointServicesListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of available endpoint services in a region.
	Value *[]EndpointServiceResult `json:"value,omitempty"`
}

// EndpointServicesListResultResponse is the response envelope for operations that return a EndpointServicesListResult type.
type EndpointServicesListResultResponse struct {
	// Response for the ListAvailableEndpointServices API service call.
	EndpointServicesListResult *EndpointServicesListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Common error representation.
type Error struct {
	// Error code.
	Code *string `json:"code,omitempty"`

	// Error details.
	Details *[]ErrorDetails `json:"details,omitempty"`

	// Inner error message.
	InnerError *string `json:"innerError,omitempty"`

	// Error message.
	Message *string `json:"message,omitempty"`

	// Error target.
	Target *string `json:"target,omitempty"`
}

// Error implements the error interface for type Error.
func (e Error) Error() string {
	msg := ""
	if e.Code != nil {
		msg += fmt.Sprintf("Code: %v\n", *e.Code)
	}
	if e.Details != nil {
		msg += fmt.Sprintf("Details: %v\n", *e.Details)
	}
	if e.InnerError != nil {
		msg += fmt.Sprintf("InnerError: %v\n", *e.InnerError)
	}
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if e.Target != nil {
		msg += fmt.Sprintf("Target: %v\n", *e.Target)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Common error details representation.
type ErrorDetails struct {
	// Error code.
	Code *string `json:"code,omitempty"`

	// Error message.
	Message *string `json:"message,omitempty"`

	// Error target.
	Target *string `json:"target,omitempty"`
}

// The error object.
type ErrorResponse struct {
	// The error details object.
	InnerError *ErrorDetails `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
func (e ErrorResponse) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += fmt.Sprintf("InnerError: %v\n", *e.InnerError)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Results of network security group evaluation.
type EvaluatedNetworkSecurityGroup struct {
	// Resource ID of nic or subnet to which network security group is applied.
	AppliedTo *string `json:"appliedTo,omitempty"`

	// Matched network security rule.
	MatchedRule *MatchedRule `json:"matchedRule,omitempty"`

	// Network security group ID.
	NetworkSecurityGroupID *string `json:"networkSecurityGroupId,omitempty"`

	// READ-ONLY; List of network security rules evaluation results.
	RulesEvaluationResult *[]NetworkSecurityRulesEvaluationResult `json:"rulesEvaluationResult,omitempty" azure:"ro"`
}

// ExpressRouteCircuit resource.
type ExpressRouteCircuit struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the express route circuit.
	Properties *ExpressRouteCircuitPropertiesFormat `json:"properties,omitempty"`

	// The SKU.
	SKU *ExpressRouteCircuitSKU `json:"sku,omitempty"`
}

// The ARP table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitArpTable struct {
	// Entry age in minutes.
	Age *int32 `json:"age,omitempty"`

	// The IP address.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Interface address.
	Interface *string `json:"interface,omitempty"`

	// The MAC address.
	MacAddress *string `json:"macAddress,omitempty"`
}

// Authorization in an ExpressRouteCircuit resource.
type ExpressRouteCircuitAuthorization struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the express route circuit authorization.
	Properties *AuthorizationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExpressRouteCircuitAuthorizationPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitAuthorization
// type.
type ExpressRouteCircuitAuthorizationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitAuthorizationResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitAuthorizationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitAuthorizationResponse is the response envelope for operations that return a ExpressRouteCircuitAuthorization type.
type ExpressRouteCircuitAuthorizationResponse struct {
	// Authorization in an ExpressRouteCircuit resource.
	ExpressRouteCircuitAuthorization *ExpressRouteCircuitAuthorization

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitAuthorizationsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.CreateOrUpdate method.
type ExpressRouteCircuitAuthorizationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitAuthorizationsDeleteOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.Delete method.
type ExpressRouteCircuitAuthorizationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitAuthorizationsGetOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.Get method.
type ExpressRouteCircuitAuthorizationsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitAuthorizationsListOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.List method.
type ExpressRouteCircuitAuthorizationsListOptions struct {
	// placeholder for future optional parameters
}

// Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the express route circuit connection.
	Properties *ExpressRouteCircuitConnectionPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
type ExpressRouteCircuitConnectionListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The global reach connection associated with Private Peering in an ExpressRoute Circuit.
	Value *[]ExpressRouteCircuitConnection `json:"value,omitempty"`
}

// ExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCircuitConnectionListResult type.
type ExpressRouteCircuitConnectionListResultResponse struct {
	// Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
	ExpressRouteCircuitConnectionListResult *ExpressRouteCircuitConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the express route circuit connection.
type ExpressRouteCircuitConnectionPropertiesFormat struct {
	// /29 IP address space to carve out Customer addresses for tunnels.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// The authorization key.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus `json:"circuitConnectionStatus,omitempty" azure:"ro"`

	// Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
	ExpressRouteCircuitPeering *SubResource `json:"expressRouteCircuitPeering,omitempty"`

	// IPv6 Address PrefixProperties of the express route circuit connection.
	IPv6CircuitConnectionConfig *IPv6CircuitConnectionConfig `json:"ipv6CircuitConnectionConfig,omitempty"`

	// Reference to Express Route Circuit Private Peering Resource of the peered circuit.
	PeerExpressRouteCircuitPeering *SubResource `json:"peerExpressRouteCircuitPeering,omitempty"`

	// READ-ONLY; The provisioning state of the express route circuit connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ExpressRouteCircuitConnectionResponse is the response envelope for operations that return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionResponse struct {
	// Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
	ExpressRouteCircuitConnection *ExpressRouteCircuitConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitConnectionsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitConnections.CreateOrUpdate method.
type ExpressRouteCircuitConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitConnectionsDeleteOptions contains the optional parameters for the ExpressRouteCircuitConnections.Delete method.
type ExpressRouteCircuitConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitConnectionsGetOptions contains the optional parameters for the ExpressRouteCircuitConnections.Get method.
type ExpressRouteCircuitConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitConnectionsListOptions contains the optional parameters for the ExpressRouteCircuitConnections.List method.
type ExpressRouteCircuitConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// Response for ListExpressRouteCircuit API service call.
type ExpressRouteCircuitListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of ExpressRouteCircuits in a resource group.
	Value *[]ExpressRouteCircuit `json:"value,omitempty"`
}

// ExpressRouteCircuitListResultResponse is the response envelope for operations that return a ExpressRouteCircuitListResult type.
type ExpressRouteCircuitListResultResponse struct {
	// Response for ListExpressRouteCircuit API service call.
	ExpressRouteCircuitListResult *ExpressRouteCircuitListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Peering in an ExpressRouteCircuit resource.
type ExpressRouteCircuitPeering struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the express route circuit peering.
	Properties *ExpressRouteCircuitPeeringPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Specifies the peering configuration.
type ExpressRouteCircuitPeeringConfig struct {
	// The communities of bgp peering. Specified for microsoft peering.
	AdvertisedCommunities *[]string `json:"advertisedCommunities,omitempty"`

	// The reference to AdvertisedPublicPrefixes.
	AdvertisedPublicPrefixes *[]string `json:"advertisedPublicPrefixes,omitempty"`

	// READ-ONLY; The advertised public prefix state of the Peering resource.
	AdvertisedPublicPrefixesState *ExpressRouteCircuitPeeringAdvertisedPublicPrefixState `json:"advertisedPublicPrefixesState,omitempty" azure:"ro"`

	// The CustomerASN of the peering.
	CustomerAsn *int32 `json:"customerASN,omitempty"`

	// The legacy mode of the peering.
	LegacyMode *int32 `json:"legacyMode,omitempty"`

	// The RoutingRegistryName of the configuration.
	RoutingRegistryName *string `json:"routingRegistryName,omitempty"`
}

// ExpressRoute circuit peering identifier.
type ExpressRouteCircuitPeeringID struct {
	// The ID of the ExpressRoute circuit peering.
	ID *string `json:"id,omitempty"`
}

// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
type ExpressRouteCircuitPeeringListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The peerings in an express route circuit.
	Value *[]ExpressRouteCircuitPeering `json:"value,omitempty"`
}

// ExpressRouteCircuitPeeringListResultResponse is the response envelope for operations that return a ExpressRouteCircuitPeeringListResult type.
type ExpressRouteCircuitPeeringListResultResponse struct {
	// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
	ExpressRouteCircuitPeeringListResult *ExpressRouteCircuitPeeringListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the express route circuit peering.
type ExpressRouteCircuitPeeringPropertiesFormat struct {
	// The Azure ASN.
	AzureAsn *int32 `json:"azureASN,omitempty"`

	// The list of circuit connections associated with Azure Private Peering for this circuit.
	Connections *[]ExpressRouteCircuitConnection `json:"connections,omitempty"`

	// The ExpressRoute connection.
	ExpressRouteConnection *ExpressRouteConnectionID `json:"expressRouteConnection,omitempty"`

	// The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	// The IPv6 peering configuration.
	IPv6PeeringConfig *IPv6ExpressRouteCircuitPeeringConfig `json:"ipv6PeeringConfig,omitempty"`

	// READ-ONLY; Who was the last to modify the peering.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	// The peer ASN.
	PeerAsn *int64 `json:"peerASN,omitempty"`

	// READ-ONLY; The list of peered circuit connections associated with Azure Private Peering for this circuit.
	PeeredConnections *[]PeerExpressRouteCircuitConnection `json:"peeredConnections,omitempty" azure:"ro"`

	// The peering type.
	PeeringType *ExpressRoutePeeringType `json:"peeringType,omitempty"`

	// The primary port.
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty"`

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	// READ-ONLY; The provisioning state of the express route circuit peering resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the RouteFilter resource.
	RouteFilter *SubResource `json:"routeFilter,omitempty"`

	// The secondary port.
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty"`

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	// The shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	// The peering state.
	State *ExpressRoutePeeringState `json:"state,omitempty"`

	// The peering stats of express route circuit.
	Stats *ExpressRouteCircuitStats `json:"stats,omitempty"`

	// The VLAN ID.
	VlanID *int32 `json:"vlanId,omitempty"`
}

// ExpressRouteCircuitPeeringResponse is the response envelope for operations that return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringResponse struct {
	// Peering in an ExpressRouteCircuit resource.
	ExpressRouteCircuitPeering *ExpressRouteCircuitPeering

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPeeringsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitPeerings.CreateOrUpdate method.
type ExpressRouteCircuitPeeringsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitPeeringsDeleteOptions contains the optional parameters for the ExpressRouteCircuitPeerings.Delete method.
type ExpressRouteCircuitPeeringsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitPeeringsGetOptions contains the optional parameters for the ExpressRouteCircuitPeerings.Get method.
type ExpressRouteCircuitPeeringsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitPeeringsListOptions contains the optional parameters for the ExpressRouteCircuitPeerings.List method.
type ExpressRouteCircuitPeeringsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuit type.
type ExpressRouteCircuitPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of ExpressRouteCircuit.
type ExpressRouteCircuitPropertiesFormat struct {
	// Allow classic operations.
	AllowClassicOperations *bool `json:"allowClassicOperations,omitempty"`

	// The list of authorizations.
	Authorizations *[]ExpressRouteCircuitAuthorization `json:"authorizations,omitempty"`

	// The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
	BandwidthInGbps *float32 `json:"bandwidthInGbps,omitempty"`

	// The CircuitProvisioningState state of the resource.
	CircuitProvisioningState *string `json:"circuitProvisioningState,omitempty"`

	// The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
	ExpressRoutePort *SubResource `json:"expressRoutePort,omitempty"`

	// The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	// Flag denoting global reach status.
	GlobalReachEnabled *bool `json:"globalReachEnabled,omitempty"`

	// The list of peerings.
	Peerings *[]ExpressRouteCircuitPeering `json:"peerings,omitempty"`

	// READ-ONLY; The provisioning state of the express route circuit resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The ServiceKey.
	ServiceKey *string `json:"serviceKey,omitempty"`

	// The ServiceProviderNotes.
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`

	// The ServiceProviderProperties.
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties `json:"serviceProviderProperties,omitempty"`

	// The ServiceProviderProvisioningState state of the resource.
	ServiceProviderProvisioningState *ServiceProviderProvisioningState `json:"serviceProviderProvisioningState,omitempty"`

	// READ-ONLY; The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
	Stag *int32 `json:"stag,omitempty" azure:"ro"`
}

// Reference to an express route circuit.
type ExpressRouteCircuitReference struct {
	// Corresponding Express Route Circuit Id.
	ID *string `json:"id,omitempty"`
}

// ExpressRouteCircuitResponse is the response envelope for operations that return a ExpressRouteCircuit type.
type ExpressRouteCircuitResponse struct {
	// ExpressRouteCircuit resource.
	ExpressRouteCircuit *ExpressRouteCircuit

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTable struct {
	// Local preference value as set with the set local-preference route-map configuration command.
	LocPrf *string `json:"locPrf,omitempty"`

	// IP address of a network entity.
	Network *string `json:"network,omitempty"`

	// NextHop address.
	NextHop *string `json:"nextHop,omitempty"`

	// Autonomous system paths to the destination network.
	Path *string `json:"path,omitempty"`

	// Route Weight.
	Weight *int32 `json:"weight,omitempty"`
}

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTableSummary struct {
	// Autonomous system number.
	As *int32 `json:"as,omitempty"`

	// IP address of the neighbor.
	Neighbor *string `json:"neighbor,omitempty"`

	// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StatePfxRcd *string `json:"statePfxRcd,omitempty"`

	// The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
	UpDown *string `json:"upDown,omitempty"`

	// BGP version number spoken to the neighbor.
	V *int32 `json:"v,omitempty"`
}

// Contains SKU in an ExpressRouteCircuit.
type ExpressRouteCircuitSKU struct {
	// The family of the SKU.
	Family *ExpressRouteCircuitSKUFamily `json:"family,omitempty"`

	// The name of the SKU.
	Name *string `json:"name,omitempty"`

	// The tier of the SKU.
	Tier *ExpressRouteCircuitSKUTier `json:"tier,omitempty"`
}

// Contains ServiceProviderProperties in an ExpressRouteCircuit.
type ExpressRouteCircuitServiceProviderProperties struct {
	// The BandwidthInMbps.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`

	// The peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	// The serviceProviderName.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
}

// Contains stats associated with the peering.
type ExpressRouteCircuitStats struct {
	// The Primary BytesIn of the peering.
	PrimarybytesIn *int64 `json:"primarybytesIn,omitempty"`

	// The primary BytesOut of the peering.
	PrimarybytesOut *int64 `json:"primarybytesOut,omitempty"`

	// The secondary BytesIn of the peering.
	SecondarybytesIn *int64 `json:"secondarybytesIn,omitempty"`

	// The secondary BytesOut of the peering.
	SecondarybytesOut *int64 `json:"secondarybytesOut,omitempty"`
}

// ExpressRouteCircuitStatsResponse is the response envelope for operations that return a ExpressRouteCircuitStats type.
type ExpressRouteCircuitStatsResponse struct {
	// Contains stats associated with the peering.
	ExpressRouteCircuitStats *ExpressRouteCircuitStats

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ListArpTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsArpTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of the ARP tables.
	Value *[]ExpressRouteCircuitArpTable `json:"value,omitempty"`
}

// ExpressRouteCircuitsArpTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsArpTableListResult
// type.
type ExpressRouteCircuitsArpTableListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitsArpTableListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsArpTableListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsArpTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsArpTableListResult type.
type ExpressRouteCircuitsArpTableListResultResponse struct {
	// Response for ListArpTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsArpTableListResult *ExpressRouteCircuitsArpTableListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuits.CreateOrUpdate method.
type ExpressRouteCircuitsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsDeleteOptions contains the optional parameters for the ExpressRouteCircuits.Delete method.
type ExpressRouteCircuitsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsGetOptions contains the optional parameters for the ExpressRouteCircuits.Get method.
type ExpressRouteCircuitsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsGetPeeringStatsOptions contains the optional parameters for the ExpressRouteCircuits.GetPeeringStats method.
type ExpressRouteCircuitsGetPeeringStatsOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsGetStatsOptions contains the optional parameters for the ExpressRouteCircuits.GetStats method.
type ExpressRouteCircuitsGetStatsOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsListAllOptions contains the optional parameters for the ExpressRouteCircuits.ListAll method.
type ExpressRouteCircuitsListAllOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsListArpTableOptions contains the optional parameters for the ExpressRouteCircuits.ListArpTable method.
type ExpressRouteCircuitsListArpTableOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsListOptions contains the optional parameters for the ExpressRouteCircuits.List method.
type ExpressRouteCircuitsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsListRoutesTableOptions contains the optional parameters for the ExpressRouteCircuits.ListRoutesTable method.
type ExpressRouteCircuitsListRoutesTableOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCircuitsListRoutesTableSummaryOptions contains the optional parameters for the ExpressRouteCircuits.ListRoutesTableSummary method.
type ExpressRouteCircuitsListRoutesTableSummaryOptions struct {
	// placeholder for future optional parameters
}

// Response for ListRoutesTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsRoutesTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of routes table.
	Value *[]ExpressRouteCircuitRoutesTable `json:"value,omitempty"`
}

// ExpressRouteCircuitsRoutesTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableListResult
// type.
type ExpressRouteCircuitsRoutesTableListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitsRoutesTableListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsRoutesTableListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableListResult type.
type ExpressRouteCircuitsRoutesTableListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsRoutesTableListResult *ExpressRouteCircuitsRoutesTableListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ListRoutesTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsRoutesTableSummaryListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of the routes table.
	Value *[]ExpressRouteCircuitRoutesTableSummary `json:"value,omitempty"`
}

// ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCircuitsRoutesTableSummaryListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsRoutesTableSummaryListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsRoutesTableSummaryListResult *ExpressRouteCircuitsRoutesTableSummaryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsUpdateTagsOptions contains the optional parameters for the ExpressRouteCircuits.UpdateTags method.
type ExpressRouteCircuitsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteConnection resource.
type ExpressRouteConnection struct {
	SubResource
	// The name of the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the express route connection.
	Properties *ExpressRouteConnectionProperties `json:"properties,omitempty"`
}

// The ID of the ExpressRouteConnection.
type ExpressRouteConnectionID struct {
	// READ-ONLY; The ID of the ExpressRouteConnection.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ExpressRouteConnection list.
type ExpressRouteConnectionList struct {
	// The list of ExpressRoute connections.
	Value *[]ExpressRouteConnection `json:"value,omitempty"`
}

// ExpressRouteConnectionListResponse is the response envelope for operations that return a ExpressRouteConnectionList type.
type ExpressRouteConnectionListResponse struct {
	// ExpressRouteConnection list.
	ExpressRouteConnectionList *ExpressRouteConnectionList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteConnection type.
type ExpressRouteConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the ExpressRouteConnection subresource.
type ExpressRouteConnectionProperties struct {
	// Authorization key to establish the connection.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// Enable internet security.
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty"`

	// The ExpressRoute circuit peering.
	ExpressRouteCircuitPeering *ExpressRouteCircuitPeeringID `json:"expressRouteCircuitPeering,omitempty"`

	// READ-ONLY; The provisioning state of the express route connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration `json:"routingConfiguration,omitempty"`

	// The routing weight associated to the connection.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`
}

// ExpressRouteConnectionResponse is the response envelope for operations that return a ExpressRouteConnection type.
type ExpressRouteConnectionResponse struct {
	// ExpressRouteConnection resource.
	ExpressRouteConnection *ExpressRouteConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteConnectionsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteConnections.CreateOrUpdate method.
type ExpressRouteConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteConnectionsDeleteOptions contains the optional parameters for the ExpressRouteConnections.Delete method.
type ExpressRouteConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteConnectionsGetOptions contains the optional parameters for the ExpressRouteConnections.Get method.
type ExpressRouteConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteConnectionsListOptions contains the optional parameters for the ExpressRouteConnections.List method.
type ExpressRouteConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnection resource.
type ExpressRouteCrossConnection struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the express route cross connection.
	Properties *ExpressRouteCrossConnectionProperties `json:"properties,omitempty"`
}

// Response for ListExpressRouteCrossConnection API service call.
type ExpressRouteCrossConnectionListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of ExpressRouteCrossConnection resources.
	Value *[]ExpressRouteCrossConnection `json:"value,omitempty"`
}

// ExpressRouteCrossConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionListResult type.
type ExpressRouteCrossConnectionListResultResponse struct {
	// Response for ListExpressRouteCrossConnection API service call.
	ExpressRouteCrossConnectionListResult *ExpressRouteCrossConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Peering in an ExpressRoute Cross Connection resource.
type ExpressRouteCrossConnectionPeering struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the express route cross connection peering.
	Properties *ExpressRouteCrossConnectionPeeringProperties `json:"properties,omitempty"`
}

// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionPeeringList struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// The peerings in an express route cross connection.
	Value *[]ExpressRouteCrossConnectionPeering `json:"value,omitempty"`
}

// ExpressRouteCrossConnectionPeeringListResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeeringList type.
type ExpressRouteCrossConnectionPeeringListResponse struct {
	// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
	ExpressRouteCrossConnectionPeeringList *ExpressRouteCrossConnectionPeeringList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionPeering
// type.
type ExpressRouteCrossConnectionPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCrossConnectionPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of express route cross connection peering.
type ExpressRouteCrossConnectionPeeringProperties struct {
	// READ-ONLY; The Azure ASN.
	AzureAsn *int32 `json:"azureASN,omitempty" azure:"ro"`

	// The GatewayManager Etag.
	GatewayManagerEtag *string `json:"gatewayManagerEtag,omitempty"`

	// The IPv6 peering configuration.
	IPv6PeeringConfig *IPv6ExpressRouteCircuitPeeringConfig `json:"ipv6PeeringConfig,omitempty"`

	// READ-ONLY; Who was the last to modify the peering.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	// The peer ASN.
	PeerAsn *int64 `json:"peerASN,omitempty"`

	// The peering type.
	PeeringType *ExpressRoutePeeringType `json:"peeringType,omitempty"`

	// READ-ONLY; The primary port.
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty" azure:"ro"`

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	// READ-ONLY; The provisioning state of the express route cross connection peering resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The secondary port.
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty" azure:"ro"`

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	// The shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	// The peering state.
	State *ExpressRoutePeeringState `json:"state,omitempty"`

	// The VLAN ID.
	VlanID *int32 `json:"vlanId,omitempty"`
}

// ExpressRouteCrossConnectionPeeringResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeering type.
type ExpressRouteCrossConnectionPeeringResponse struct {
	// Peering in an ExpressRoute Cross Connection resource.
	ExpressRouteCrossConnectionPeering *ExpressRouteCrossConnectionPeering

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPeeringsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.CreateOrUpdate
// method.
type ExpressRouteCrossConnectionPeeringsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionPeeringsDeleteOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.Delete method.
type ExpressRouteCrossConnectionPeeringsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionPeeringsGetOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.Get method.
type ExpressRouteCrossConnectionPeeringsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionPeeringsListOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.List method.
type ExpressRouteCrossConnectionPeeringsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCrossConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionProperties struct {
	// READ-ONLY; The circuit bandwidth In Mbps.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty" azure:"ro"`

	// The ExpressRouteCircuit.
	ExpressRouteCircuit *ExpressRouteCircuitReference `json:"expressRouteCircuit,omitempty"`

	// READ-ONLY; The peering location of the ExpressRoute circuit.
	PeeringLocation *string `json:"peeringLocation,omitempty" azure:"ro"`

	// The list of peerings.
	Peerings *[]ExpressRouteCrossConnectionPeering `json:"peerings,omitempty"`

	// READ-ONLY; The name of the primary port.
	PrimaryAzurePort *string `json:"primaryAzurePort,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the express route cross connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The identifier of the circuit traffic.
	STag *int32 `json:"sTag,omitempty" azure:"ro"`

	// READ-ONLY; The name of the secondary port.
	SecondaryAzurePort *string `json:"secondaryAzurePort,omitempty" azure:"ro"`

	// Additional read only notes set by the connectivity provider.
	ServiceProviderNotes *string `json:"serviceProviderNotes,omitempty"`

	// The provisioning state of the circuit in the connectivity provider system.
	ServiceProviderProvisioningState *ServiceProviderProvisioningState `json:"serviceProviderProvisioningState,omitempty"`
}

// ExpressRouteCrossConnectionResponse is the response envelope for operations that return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionResponse struct {
	// ExpressRouteCrossConnection resource.
	ExpressRouteCrossConnection *ExpressRouteCrossConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCrossConnectionRoutesTableSummary struct {
	// Autonomous system number.
	Asn *int32 `json:"asn,omitempty"`

	// IP address of Neighbor router.
	Neighbor *string `json:"neighbor,omitempty"`

	// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StateOrPrefixesReceived *string `json:"stateOrPrefixesReceived,omitempty"`

	// The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.
	UpDown *string `json:"upDown,omitempty"`
}

// ExpressRouteCrossConnectionsCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCrossConnections.CreateOrUpdate method.
type ExpressRouteCrossConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsGetOptions contains the optional parameters for the ExpressRouteCrossConnections.Get method.
type ExpressRouteCrossConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsListArpTableOptions contains the optional parameters for the ExpressRouteCrossConnections.ListArpTable method.
type ExpressRouteCrossConnectionsListArpTableOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsListByResourceGroupOptions contains the optional parameters for the ExpressRouteCrossConnections.ListByResourceGroup method.
type ExpressRouteCrossConnectionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsListOptions contains the optional parameters for the ExpressRouteCrossConnections.List method.
type ExpressRouteCrossConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsListRoutesTableOptions contains the optional parameters for the ExpressRouteCrossConnections.ListRoutesTable method.
type ExpressRouteCrossConnectionsListRoutesTableOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteCrossConnectionsListRoutesTableSummaryOptions contains the optional parameters for the ExpressRouteCrossConnections.ListRoutesTableSummary
// method.
type ExpressRouteCrossConnectionsListRoutesTableSummaryOptions struct {
	// placeholder for future optional parameters
}

// Response for ListRoutesTable associated with the Express Route Cross Connections.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of the routes table.
	Value *[]ExpressRouteCrossConnectionRoutesTableSummary `json:"value,omitempty"`
}

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionsRoutesTableSummaryListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Cross Connections.
	ExpressRouteCrossConnectionsRoutesTableSummaryListResult *ExpressRouteCrossConnectionsRoutesTableSummaryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionsUpdateTagsOptions contains the optional parameters for the ExpressRouteCrossConnections.UpdateTags method.
type ExpressRouteCrossConnectionsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoute gateway resource.
type ExpressRouteGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the express route gateway.
	Properties *ExpressRouteGatewayProperties `json:"properties,omitempty"`
}

// List of ExpressRoute gateways.
type ExpressRouteGatewayList struct {
	// List of ExpressRoute gateways.
	Value *[]ExpressRouteGateway `json:"value,omitempty"`
}

// ExpressRouteGatewayListResponse is the response envelope for operations that return a ExpressRouteGatewayList type.
type ExpressRouteGatewayListResponse struct {
	// List of ExpressRoute gateways.
	ExpressRouteGatewayList *ExpressRouteGatewayList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteGatewayPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteGateway type.
type ExpressRouteGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRouteGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoute gateway resource properties.
type ExpressRouteGatewayProperties struct {
	// Configuration for auto scaling.
	AutoScaleConfiguration *ExpressRouteGatewayPropertiesAutoScaleConfiguration `json:"autoScaleConfiguration,omitempty"`

	// READ-ONLY; List of ExpressRoute connections to the ExpressRoute gateway.
	ExpressRouteConnections *[]ExpressRouteConnection `json:"expressRouteConnections,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the express route gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The Virtual Hub where the ExpressRoute gateway is or will be deployed.
	VirtualHub *VirtualHubID `json:"virtualHub,omitempty"`
}

// Configuration for auto scaling.
type ExpressRouteGatewayPropertiesAutoScaleConfiguration struct {
	// Minimum and maximum number of scale units to deploy.
	Bounds *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds `json:"bounds,omitempty"`
}

// Minimum and maximum number of scale units to deploy.
type ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds struct {
	// Maximum number of scale units deployed for ExpressRoute gateway.
	Max *int32 `json:"max,omitempty"`

	// Minimum number of scale units deployed for ExpressRoute gateway.
	Min *int32 `json:"min,omitempty"`
}

// ExpressRouteGatewayResponse is the response envelope for operations that return a ExpressRouteGateway type.
type ExpressRouteGatewayResponse struct {
	// ExpressRoute gateway resource.
	ExpressRouteGateway *ExpressRouteGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteGatewaysCreateOrUpdateOptions contains the optional parameters for the ExpressRouteGateways.CreateOrUpdate method.
type ExpressRouteGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteGatewaysDeleteOptions contains the optional parameters for the ExpressRouteGateways.Delete method.
type ExpressRouteGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteGatewaysGetOptions contains the optional parameters for the ExpressRouteGateways.Get method.
type ExpressRouteGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteGatewaysListByResourceGroupOptions contains the optional parameters for the ExpressRouteGateways.ListByResourceGroup method.
type ExpressRouteGatewaysListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteGatewaysListBySubscriptionOptions contains the optional parameters for the ExpressRouteGateways.ListBySubscription method.
type ExpressRouteGatewaysListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteLink child resource definition.
type ExpressRouteLink struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of child port resource that is unique among child port resources of the parent.
	Name *string `json:"name,omitempty"`

	// ExpressRouteLink properties.
	Properties *ExpressRouteLinkPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListExpressRouteLinks API service call.
type ExpressRouteLinkListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of ExpressRouteLink sub-resources.
	Value *[]ExpressRouteLink `json:"value,omitempty"`
}

// ExpressRouteLinkListResultResponse is the response envelope for operations that return a ExpressRouteLinkListResult type.
type ExpressRouteLinkListResultResponse struct {
	// Response for ListExpressRouteLinks API service call.
	ExpressRouteLinkListResult *ExpressRouteLinkListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteLink Mac Security Configuration.
type ExpressRouteLinkMacSecConfig struct {
	// Keyvault Secret Identifier URL containing Mac security CAK key.
	CakSecretIDentifier *string `json:"cakSecretIdentifier,omitempty"`

	// Mac security cipher.
	Cipher *ExpressRouteLinkMacSecCipher `json:"cipher,omitempty"`

	// Keyvault Secret Identifier URL containing Mac security CKN key.
	CknSecretIDentifier *string `json:"cknSecretIdentifier,omitempty"`

	// Sci mode enabled/disabled.
	SciState *ExpressRouteLinkMacSecSciState `json:"sciState,omitempty"`
}

// Properties specific to ExpressRouteLink resources.
type ExpressRouteLinkPropertiesFormat struct {
	// Administrative state of the physical port.
	AdminState *ExpressRouteLinkAdminState `json:"adminState,omitempty"`

	// READ-ONLY; Physical fiber port type.
	ConnectorType *ExpressRouteLinkConnectorType `json:"connectorType,omitempty" azure:"ro"`

	// READ-ONLY; Name of Azure router interface.
	InterfaceName *string `json:"interfaceName,omitempty" azure:"ro"`

	// MacSec configuration.
	MacSecConfig *ExpressRouteLinkMacSecConfig `json:"macSecConfig,omitempty"`

	// READ-ONLY; Mapping between physical port to patch panel port.
	PatchPanelID *string `json:"patchPanelId,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the express route link resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Mapping of physical patch panel to rack.
	RackID *string `json:"rackId,omitempty" azure:"ro"`

	// READ-ONLY; Name of Azure router associated with physical port.
	RouterName *string `json:"routerName,omitempty" azure:"ro"`
}

// ExpressRouteLinkResponse is the response envelope for operations that return a ExpressRouteLink type.
type ExpressRouteLinkResponse struct {
	// ExpressRouteLink child resource definition.
	ExpressRouteLink *ExpressRouteLink

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteLinksGetOptions contains the optional parameters for the ExpressRouteLinks.Get method.
type ExpressRouteLinksGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRouteLinksListOptions contains the optional parameters for the ExpressRouteLinks.List method.
type ExpressRouteLinksListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePort resource definition.
type ExpressRoutePort struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The identity of ExpressRoutePort, if configured.
	IDentity *ManagedServiceIDentity `json:"identity,omitempty"`

	// ExpressRoutePort properties.
	Properties *ExpressRoutePortPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListExpressRoutePorts API service call.
type ExpressRoutePortListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of ExpressRoutePort resources.
	Value *[]ExpressRoutePort `json:"value,omitempty"`
}

// ExpressRoutePortListResultResponse is the response envelope for operations that return a ExpressRoutePortListResult type.
type ExpressRoutePortListResultResponse struct {
	// Response for ListExpressRoutePorts API service call.
	ExpressRoutePortListResult *ExpressRoutePortListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortPollerResponse is the response envelope for operations that asynchronously return a ExpressRoutePort type.
type ExpressRoutePortPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ExpressRoutePortResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRoutePortPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties specific to ExpressRoutePort resources.
type ExpressRoutePortPropertiesFormat struct {
	// READ-ONLY; Date of the physical port allocation to be used in Letter of Authorization.
	AllocationDate *string `json:"allocationDate,omitempty" azure:"ro"`

	// Bandwidth of procured ports in Gbps.
	BandwidthInGbps *int32 `json:"bandwidthInGbps,omitempty"`

	// READ-ONLY; Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
	Circuits *[]SubResource `json:"circuits,omitempty" azure:"ro"`

	// Encapsulation method on physical ports.
	Encapsulation *ExpressRoutePortsEncapsulation `json:"encapsulation,omitempty"`

	// READ-ONLY; Ether type of the physical port.
	EtherType *string `json:"etherType,omitempty" azure:"ro"`

	// The set of physical links of the ExpressRoutePort resource.
	Links *[]ExpressRouteLink `json:"links,omitempty"`

	// READ-ONLY; Maximum transmission unit of the physical port pair(s).
	Mtu *string `json:"mtu,omitempty" azure:"ro"`

	// The name of the peering location that the ExpressRoutePort is mapped to physically.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	// READ-ONLY; Aggregate Gbps of associated circuit bandwidths.
	ProvisionedBandwidthInGbps *float32 `json:"provisionedBandwidthInGbps,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the express route port resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the express route port resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// ExpressRoutePortResponse is the response envelope for operations that return a ExpressRoutePort type.
type ExpressRoutePortResponse struct {
	// ExpressRoutePort resource definition.
	ExpressRoutePort *ExpressRoutePort

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortsCreateOrUpdateOptions contains the optional parameters for the ExpressRoutePorts.CreateOrUpdate method.
type ExpressRoutePortsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsDeleteOptions contains the optional parameters for the ExpressRoutePorts.Delete method.
type ExpressRoutePortsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsGenerateLoaOptions contains the optional parameters for the ExpressRoutePorts.GenerateLoa method.
type ExpressRoutePortsGenerateLoaOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsGetOptions contains the optional parameters for the ExpressRoutePorts.Get method.
type ExpressRoutePortsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsListByResourceGroupOptions contains the optional parameters for the ExpressRoutePorts.ListByResourceGroup method.
type ExpressRoutePortsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsListOptions contains the optional parameters for the ExpressRoutePorts.List method.
type ExpressRoutePortsListOptions struct {
	// placeholder for future optional parameters
}

// Definition of the ExpressRoutePorts peering location resource.
type ExpressRoutePortsLocation struct {
	Resource
	// ExpressRoutePort peering location properties.
	Properties *ExpressRoutePortsLocationPropertiesFormat `json:"properties,omitempty"`
}

// Real-time inventory of available ExpressRoute port bandwidths.
type ExpressRoutePortsLocationBandwidths struct {
	// READ-ONLY; Bandwidth descriptive name.
	OfferName *string `json:"offerName,omitempty" azure:"ro"`

	// READ-ONLY; Bandwidth value in Gbps.
	ValueInGbps *int32 `json:"valueInGbps,omitempty" azure:"ro"`
}

// Response for ListExpressRoutePortsLocations API service call.
type ExpressRoutePortsLocationListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of all ExpressRoutePort peering locations.
	Value *[]ExpressRoutePortsLocation `json:"value,omitempty"`
}

// ExpressRoutePortsLocationListResultResponse is the response envelope for operations that return a ExpressRoutePortsLocationListResult type.
type ExpressRoutePortsLocationListResultResponse struct {
	// Response for ListExpressRoutePortsLocations API service call.
	ExpressRoutePortsLocationListResult *ExpressRoutePortsLocationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties specific to ExpressRoutePorts peering location resources.
type ExpressRoutePortsLocationPropertiesFormat struct {
	// READ-ONLY; Address of peering location.
	Address *string `json:"address,omitempty" azure:"ro"`

	// The inventory of available ExpressRoutePort bandwidths.
	AvailableBandwidths *[]ExpressRoutePortsLocationBandwidths `json:"availableBandwidths,omitempty"`

	// READ-ONLY; Contact details of peering locations.
	Contact *string `json:"contact,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the express route port location resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ExpressRoutePortsLocationResponse is the response envelope for operations that return a ExpressRoutePortsLocation type.
type ExpressRoutePortsLocationResponse struct {
	// Definition of the ExpressRoutePorts peering location resource.
	ExpressRoutePortsLocation *ExpressRoutePortsLocation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortsLocationsGetOptions contains the optional parameters for the ExpressRoutePortsLocations.Get method.
type ExpressRoutePortsLocationsGetOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsLocationsListOptions contains the optional parameters for the ExpressRoutePortsLocations.List method.
type ExpressRoutePortsLocationsListOptions struct {
	// placeholder for future optional parameters
}

// ExpressRoutePortsUpdateTagsOptions contains the optional parameters for the ExpressRoutePorts.UpdateTags method.
type ExpressRoutePortsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// A ExpressRouteResourceProvider object.
type ExpressRouteServiceProvider struct {
	Resource
	// Properties of the express route service provider.
	Properties *ExpressRouteServiceProviderPropertiesFormat `json:"properties,omitempty"`
}

// Contains bandwidths offered in ExpressRouteServiceProvider resources.
type ExpressRouteServiceProviderBandwidthsOffered struct {
	// The OfferName.
	OfferName *string `json:"offerName,omitempty"`

	// The ValueInMbps.
	ValueInMbps *int32 `json:"valueInMbps,omitempty"`
}

// Response for the ListExpressRouteServiceProvider API service call.
type ExpressRouteServiceProviderListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of ExpressRouteResourceProvider resources.
	Value *[]ExpressRouteServiceProvider `json:"value,omitempty"`
}

// ExpressRouteServiceProviderListResultResponse is the response envelope for operations that return a ExpressRouteServiceProviderListResult type.
type ExpressRouteServiceProviderListResultResponse struct {
	// Response for the ListExpressRouteServiceProvider API service call.
	ExpressRouteServiceProviderListResult *ExpressRouteServiceProviderListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of ExpressRouteServiceProvider.
type ExpressRouteServiceProviderPropertiesFormat struct {
	// A list of bandwidths offered.
	BandwidthsOffered *[]ExpressRouteServiceProviderBandwidthsOffered `json:"bandwidthsOffered,omitempty"`

	// A list of peering locations.
	PeeringLocations *[]string `json:"peeringLocations,omitempty"`

	// READ-ONLY; The provisioning state of the express route service provider resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ExpressRouteServiceProvidersListOptions contains the optional parameters for the ExpressRouteServiceProviders.List method.
type ExpressRouteServiceProvidersListOptions struct {
	// placeholder for future optional parameters
}

// ExtendedLocation complex type.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `json:"name,omitempty"`

	// The type of the extended location.
	Type *ExtendedLocationTypes `json:"type,omitempty"`
}

// FirewallPoliciesCreateOrUpdateOptions contains the optional parameters for the FirewallPolicies.CreateOrUpdate method.
type FirewallPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallPoliciesDeleteOptions contains the optional parameters for the FirewallPolicies.Delete method.
type FirewallPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallPoliciesGetOptions contains the optional parameters for the FirewallPolicies.Get method.
type FirewallPoliciesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// FirewallPoliciesListAllOptions contains the optional parameters for the FirewallPolicies.ListAll method.
type FirewallPoliciesListAllOptions struct {
	// placeholder for future optional parameters
}

// FirewallPoliciesListOptions contains the optional parameters for the FirewallPolicies.List method.
type FirewallPoliciesListOptions struct {
	// placeholder for future optional parameters
}

// FirewallPolicy Resource.
type FirewallPolicy struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The identity of the firewall policy.
	IDentity *ManagedServiceIDentity `json:"identity,omitempty"`

	// Properties of the firewall policy.
	Properties *FirewallPolicyPropertiesFormat `json:"properties,omitempty"`
}

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthority struct {
	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string `json:"keyVaultSecretId,omitempty"`

	// Name of the CA certificate.
	Name *string `json:"name,omitempty"`
}

// Firewall Policy Filter Rule Collection.
type FirewallPolicyFilterRuleCollection struct {
	FirewallPolicyRuleCollection
	// The action type of a Filter rule collection.
	Action *FirewallPolicyFilterRuleCollectionAction `json:"action,omitempty"`

	// List of rules included in a rule collection.
	Rules *[]FirewallPolicyRuleClassification `json:"rules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyFilterRuleCollection.
func (f FirewallPolicyFilterRuleCollection) MarshalJSON() ([]byte, error) {
	objectMap := f.FirewallPolicyRuleCollection.marshalInternal(FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection)
	if f.Action != nil {
		objectMap["action"] = f.Action
	}
	if f.Rules != nil {
		objectMap["rules"] = f.Rules
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyFilterRuleCollection.
func (f *FirewallPolicyFilterRuleCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
			if val != nil {
				err = json.Unmarshal(*val, &f.Action)
			}
			delete(rawMsg, key)
		case "rules":
			if val != nil {
				f.Rules, err = unmarshalFirewallPolicyRuleClassificationArray(*val)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return f.FirewallPolicyRuleCollection.unmarshalInternal(rawMsg)
}

// Properties of the FirewallPolicyFilterRuleCollectionAction.
type FirewallPolicyFilterRuleCollectionAction struct {
	// The type of action.
	Type *FirewallPolicyFilterRuleCollectionActionType `json:"type,omitempty"`
}

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetection struct {
	// Intrusion detection configuration properties.
	Configuration *FirewallPolicyIntrusionDetectionConfiguration `json:"configuration,omitempty"`

	// Intrusion detection general state.
	Mode *FirewallPolicyIntrusionDetectionStateType `json:"mode,omitempty"`
}

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecifications struct {
	// Description of the bypass traffic rule.
	Description *string `json:"description,omitempty"`

	// List of destination IP addresses or ranges for this rule.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of destination IpGroups for this rule.
	DestinationIPGroups *[]string `json:"destinationIpGroups,omitempty"`

	// List of destination ports or ranges.
	DestinationPorts *[]string `json:"destinationPorts,omitempty"`

	// Name of the bypass traffic rule.
	Name *string `json:"name,omitempty"`

	// The rule bypass protocol.
	Protocol *FirewallPolicyIntrusionDetectionProtocol `json:"protocol,omitempty"`

	// List of source IP addresses or ranges for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`
}

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfiguration struct {
	// List of rules for traffic to bypass.
	BypassTrafficSettings *[]FirewallPolicyIntrusionDetectionBypassTrafficSpecifications `json:"bypassTrafficSettings,omitempty"`

	// List of specific signatures states.
	SignatureOverrides *[]FirewallPolicyIntrusionDetectionSignatureSpecification `json:"signatureOverrides,omitempty"`
}

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecification struct {
	// Signature id.
	ID *string `json:"id,omitempty"`

	// The signature state.
	Mode *FirewallPolicyIntrusionDetectionStateType `json:"mode,omitempty"`
}

// Response for ListFirewallPolicies API service call.
type FirewallPolicyListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Firewall Policies in a resource group.
	Value *[]FirewallPolicy `json:"value,omitempty"`
}

// FirewallPolicyListResultResponse is the response envelope for operations that return a FirewallPolicyListResult type.
type FirewallPolicyListResultResponse struct {
	// Response for ListFirewallPolicies API service call.
	FirewallPolicyListResult *FirewallPolicyListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Firewall Policy NAT Rule Collection.
type FirewallPolicyNatRuleCollection struct {
	FirewallPolicyRuleCollection
	// The action type of a Nat rule collection.
	Action *FirewallPolicyNatRuleCollectionAction `json:"action,omitempty"`

	// List of rules included in a rule collection.
	Rules *[]FirewallPolicyRuleClassification `json:"rules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyNatRuleCollection.
func (f FirewallPolicyNatRuleCollection) MarshalJSON() ([]byte, error) {
	objectMap := f.FirewallPolicyRuleCollection.marshalInternal(FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection)
	if f.Action != nil {
		objectMap["action"] = f.Action
	}
	if f.Rules != nil {
		objectMap["rules"] = f.Rules
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyNatRuleCollection.
func (f *FirewallPolicyNatRuleCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
			if val != nil {
				err = json.Unmarshal(*val, &f.Action)
			}
			delete(rawMsg, key)
		case "rules":
			if val != nil {
				f.Rules, err = unmarshalFirewallPolicyRuleClassificationArray(*val)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return f.FirewallPolicyRuleCollection.unmarshalInternal(rawMsg)
}

// Properties of the FirewallPolicyNatRuleCollectionAction.
type FirewallPolicyNatRuleCollectionAction struct {
	// The type of action.
	Type *FirewallPolicyNatRuleCollectionActionType `json:"type,omitempty"`
}

// FirewallPolicyPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicy type.
type FirewallPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*FirewallPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller FirewallPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Firewall Policy definition.
type FirewallPolicyPropertiesFormat struct {
	// The parent firewall policy from which rules are inherited.
	BasePolicy *SubResource `json:"basePolicy,omitempty"`

	// READ-ONLY; List of references to Child Firewall Policies.
	ChildPolicies *[]SubResource `json:"childPolicies,omitempty" azure:"ro"`

	// DNS Proxy Settings definition.
	DNSSettings *DNSSettings `json:"dnsSettings,omitempty"`

	// READ-ONLY; List of references to Azure Firewalls that this Firewall Policy is associated with.
	Firewalls *[]SubResource `json:"firewalls,omitempty" azure:"ro"`

	// The configuration for Intrusion detection.
	IntrusionDetection *FirewallPolicyIntrusionDetection `json:"intrusionDetection,omitempty"`

	// READ-ONLY; The provisioning state of the firewall policy resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; List of references to FirewallPolicyRuleCollectionGroups.
	RuleCollectionGroups *[]SubResource `json:"ruleCollectionGroups,omitempty" azure:"ro"`

	// The Firewall Policy SKU.
	SKU *FirewallPolicySKU `json:"sku,omitempty"`

	// The operation mode for Threat Intelligence.
	ThreatIntelMode *AzureFirewallThreatIntelMode `json:"threatIntelMode,omitempty"`

	// ThreatIntel Whitelist for Firewall Policy.
	ThreatIntelWhitelist *FirewallPolicyThreatIntelWhitelist `json:"threatIntelWhitelist,omitempty"`

	// TLS Configuration definition.
	TransportSecurity *FirewallPolicyTransportSecurity `json:"transportSecurity,omitempty"`
}

// FirewallPolicyResponse is the response envelope for operations that return a FirewallPolicy type.
type FirewallPolicyResponse struct {
	// FirewallPolicy Resource.
	FirewallPolicy *FirewallPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleClassification provides polymorphic access to related types.
// Call the interface's GetFirewallPolicyRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FirewallPolicyRule, *ApplicationRule, *NatRule, *NetworkRule
type FirewallPolicyRuleClassification interface {
	// GetFirewallPolicyRule() returns the FirewallPolicyRule content of the underlying type.
	GetFirewallPolicyRule() *FirewallPolicyRule
}

// Properties of a rule.
type FirewallPolicyRule struct {
	// Description of the rule.
	Description *string `json:"description,omitempty"`

	// Name of the rule.
	Name *string `json:"name,omitempty"`

	// Rule Type.
	RuleType *FirewallPolicyRuleType `json:"ruleType,omitempty"`
}

// GetFirewallPolicyRule implements the FirewallPolicyRuleClassification interface for type FirewallPolicyRule.
func (f *FirewallPolicyRule) GetFirewallPolicyRule() *FirewallPolicyRule { return f }

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyRule.
func (f *FirewallPolicyRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return f.unmarshalInternal(rawMsg)
}

func (f FirewallPolicyRule) marshalInternal(discValue FirewallPolicyRuleType) map[string]interface{} {
	objectMap := make(map[string]interface{})
	if f.Description != nil {
		objectMap["description"] = f.Description
	}
	if f.Name != nil {
		objectMap["name"] = f.Name
	}
	f.RuleType = &discValue
	objectMap["ruleType"] = f.RuleType
	return objectMap
}

func (f *FirewallPolicyRule) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			if val != nil {
				err = json.Unmarshal(*val, &f.Description)
			}
			delete(rawMsg, key)
		case "name":
			if val != nil {
				err = json.Unmarshal(*val, &f.Name)
			}
			delete(rawMsg, key)
		case "ruleType":
			if val != nil {
				err = json.Unmarshal(*val, &f.RuleType)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Properties of the application rule protocol.
type FirewallPolicyRuleApplicationProtocol struct {
	// Port number for the protocol, cannot be greater than 64000.
	Port *int32 `json:"port,omitempty"`

	// Protocol type.
	ProtocolType *FirewallPolicyRuleApplicationProtocolType `json:"protocolType,omitempty"`
}

// FirewallPolicyRuleCollectionClassification provides polymorphic access to related types.
// Call the interface's GetFirewallPolicyRuleCollection() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FirewallPolicyRuleCollection, *FirewallPolicyFilterRuleCollection, *FirewallPolicyNatRuleCollection
type FirewallPolicyRuleCollectionClassification interface {
	// GetFirewallPolicyRuleCollection() returns the FirewallPolicyRuleCollection content of the underlying type.
	GetFirewallPolicyRuleCollection() *FirewallPolicyRuleCollection
}

// Properties of the rule collection.
type FirewallPolicyRuleCollection struct {
	// The name of the rule collection.
	Name *string `json:"name,omitempty"`

	// Priority of the Firewall Policy Rule Collection resource.
	Priority *int32 `json:"priority,omitempty"`

	// The type of the rule collection.
	RuleCollectionType *FirewallPolicyRuleCollectionType `json:"ruleCollectionType,omitempty"`
}

// GetFirewallPolicyRuleCollection implements the FirewallPolicyRuleCollectionClassification interface for type FirewallPolicyRuleCollection.
func (f *FirewallPolicyRuleCollection) GetFirewallPolicyRuleCollection() *FirewallPolicyRuleCollection {
	return f
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyRuleCollection.
func (f *FirewallPolicyRuleCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return f.unmarshalInternal(rawMsg)
}

func (f FirewallPolicyRuleCollection) marshalInternal(discValue FirewallPolicyRuleCollectionType) map[string]interface{} {
	objectMap := make(map[string]interface{})
	if f.Name != nil {
		objectMap["name"] = f.Name
	}
	if f.Priority != nil {
		objectMap["priority"] = f.Priority
	}
	f.RuleCollectionType = &discValue
	objectMap["ruleCollectionType"] = f.RuleCollectionType
	return objectMap
}

func (f *FirewallPolicyRuleCollection) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			if val != nil {
				err = json.Unmarshal(*val, &f.Name)
			}
			delete(rawMsg, key)
		case "priority":
			if val != nil {
				err = json.Unmarshal(*val, &f.Priority)
			}
			delete(rawMsg, key)
		case "ruleCollectionType":
			if val != nil {
				err = json.Unmarshal(*val, &f.RuleCollectionType)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Rule Collection Group resource.
type FirewallPolicyRuleCollectionGroup struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// The properties of the firewall policy rule collection group.
	Properties *FirewallPolicyRuleCollectionGroupProperties `json:"properties,omitempty"`

	// READ-ONLY; Rule Group type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListFirewallPolicyRuleCollectionGroups API service call.
type FirewallPolicyRuleCollectionGroupListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
	Value *[]FirewallPolicyRuleCollectionGroup `json:"value,omitempty"`
}

// FirewallPolicyRuleCollectionGroupListResultResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroupListResult
// type.
type FirewallPolicyRuleCollectionGroupListResultResponse struct {
	// Response for ListFirewallPolicyRuleCollectionGroups API service call.
	FirewallPolicyRuleCollectionGroupListResult *FirewallPolicyRuleCollectionGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleCollectionGroupPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicyRuleCollectionGroup
// type.
type FirewallPolicyRuleCollectionGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*FirewallPolicyRuleCollectionGroupResponse, error)

	// Poller contains an initialized poller.
	Poller FirewallPolicyRuleCollectionGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the rule collection group.
type FirewallPolicyRuleCollectionGroupProperties struct {
	// Priority of the Firewall Policy Rule Collection Group resource.
	Priority *int32 `json:"priority,omitempty"`

	// READ-ONLY; The provisioning state of the firewall policy rule collection group resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Group of Firewall Policy rule collections.
	RuleCollections *[]FirewallPolicyRuleCollectionClassification `json:"ruleCollections,omitempty"`
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyRuleCollectionGroupProperties.
func (f *FirewallPolicyRuleCollectionGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "priority":
			if val != nil {
				err = json.Unmarshal(*val, &f.Priority)
			}
			delete(rawMsg, key)
		case "provisioningState":
			if val != nil {
				err = json.Unmarshal(*val, &f.ProvisioningState)
			}
			delete(rawMsg, key)
		case "ruleCollections":
			if val != nil {
				f.RuleCollections, err = unmarshalFirewallPolicyRuleCollectionClassificationArray(*val)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// FirewallPolicyRuleCollectionGroupResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroup type.
type FirewallPolicyRuleCollectionGroupResponse struct {
	// Rule Collection Group resource.
	FirewallPolicyRuleCollectionGroup *FirewallPolicyRuleCollectionGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleCollectionGroupsCreateOrUpdateOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.CreateOrUpdate method.
type FirewallPolicyRuleCollectionGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallPolicyRuleCollectionGroupsDeleteOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.Delete method.
type FirewallPolicyRuleCollectionGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallPolicyRuleCollectionGroupsGetOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.Get method.
type FirewallPolicyRuleCollectionGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallPolicyRuleCollectionGroupsListOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.List method.
type FirewallPolicyRuleCollectionGroupsListOptions struct {
	// placeholder for future optional parameters
}

// SKU of Firewall policy.
type FirewallPolicySKU struct {
	// Tier of Firewall Policy.
	Tier *FirewallPolicySKUTier `json:"tier,omitempty"`
}

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelist struct {
	// List of FQDNs for the ThreatIntel Whitelist.
	Fqdns *[]string `json:"fqdns,omitempty"`

	// List of IP addresses for the ThreatIntel Whitelist.
	IPAddresses *[]string `json:"ipAddresses,omitempty"`
}

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurity struct {
	// The CA used for intermediate CA generation.
	CertificateAuthority *FirewallPolicyCertificateAuthority `json:"certificateAuthority,omitempty"`
}

// A flow log resource.
type FlowLog struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the flow log.
	Properties *FlowLogPropertiesFormat `json:"properties,omitempty"`
}

// Parameters that define the flow log format.
type FlowLogFormatParameters struct {
	// The file type of flow log.
	Type *FlowLogFormatType `json:"type,omitempty"`

	// The version (revision) of the flow log.
	Version *int32 `json:"version,omitempty"`
}

// Information on the configuration of flow log and traffic analytics (optional) .
type FlowLogInformation struct {
	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration *TrafficAnalyticsProperties `json:"flowAnalyticsConfiguration,omitempty"`

	// Properties of the flow log.
	Properties *FlowLogProperties `json:"properties,omitempty"`

	// The ID of the resource to configure for flow log and traffic analytics (optional) .
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// FlowLogInformationPollerResponse is the response envelope for operations that asynchronously return a FlowLogInformation type.
type FlowLogInformationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*FlowLogInformationResponse, error)

	// Poller contains an initialized poller.
	Poller FlowLogInformationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogInformationResponse is the response envelope for operations that return a FlowLogInformation type.
type FlowLogInformationResponse struct {
	// Information on the configuration of flow log and traffic analytics (optional) .
	FlowLogInformation *FlowLogInformation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of flow logs.
type FlowLogListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// Information about flow log resource.
	Value *[]FlowLog `json:"value,omitempty"`
}

// FlowLogListResultResponse is the response envelope for operations that return a FlowLogListResult type.
type FlowLogListResultResponse struct {
	// List of flow logs.
	FlowLogListResult *FlowLogListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogPollerResponse is the response envelope for operations that asynchronously return a FlowLog type.
type FlowLogPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*FlowLogResponse, error)

	// Poller contains an initialized poller.
	Poller FlowLogPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters that define the configuration of flow log.
type FlowLogProperties struct {
	// Flag to enable/disable flow logging.
	Enabled *bool `json:"enabled,omitempty"`

	// Parameters that define the flow log format.
	Format *FlowLogFormatParameters `json:"format,omitempty"`

	// Parameters that define the retention policy for flow log.
	RetentionPolicy *RetentionPolicyParameters `json:"retentionPolicy,omitempty"`

	// ID of the storage account which is used to store the flow log.
	StorageID *string `json:"storageId,omitempty"`
}

// Parameters that define the configuration of flow log.
type FlowLogPropertiesFormat struct {
	// Flag to enable/disable flow logging.
	Enabled *bool `json:"enabled,omitempty"`

	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration *TrafficAnalyticsProperties `json:"flowAnalyticsConfiguration,omitempty"`

	// Parameters that define the flow log format.
	Format *FlowLogFormatParameters `json:"format,omitempty"`

	// READ-ONLY; The provisioning state of the flow log.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Parameters that define the retention policy for flow log.
	RetentionPolicy *RetentionPolicyParameters `json:"retentionPolicy,omitempty"`

	// ID of the storage account which is used to store the flow log.
	StorageID *string `json:"storageId,omitempty"`

	// READ-ONLY; Guid of network security group to which flow log will be applied.
	TargetResourceGUID *string `json:"targetResourceGuid,omitempty" azure:"ro"`

	// ID of network security group to which flow log will be applied.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// FlowLogResponse is the response envelope for operations that return a FlowLog type.
type FlowLogResponse struct {
	// A flow log resource.
	FlowLog *FlowLog

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters that define a resource to query flow log and traffic analytics (optional) status.
type FlowLogStatusParameters struct {
	// The target resource where getting the flow log and traffic analytics (optional) status.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// FlowLogsCreateOrUpdateOptions contains the optional parameters for the FlowLogs.CreateOrUpdate method.
type FlowLogsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FlowLogsDeleteOptions contains the optional parameters for the FlowLogs.Delete method.
type FlowLogsDeleteOptions struct {
	// placeholder for future optional parameters
}

// FlowLogsGetOptions contains the optional parameters for the FlowLogs.Get method.
type FlowLogsGetOptions struct {
	// placeholder for future optional parameters
}

// FlowLogsListOptions contains the optional parameters for the FlowLogs.List method.
type FlowLogsListOptions struct {
	// placeholder for future optional parameters
}

// FlowLogsUpdateTagsOptions contains the optional parameters for the FlowLogs.UpdateTags method.
type FlowLogsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Frontend IP address of the load balancer.
type FrontendIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the load balancer probe.
	Properties *FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Properties of Frontend IP Configuration of the load balancer.
type FrontendIPConfigurationPropertiesFormat struct {
	// READ-ONLY; An array of references to inbound pools that use this frontend IP.
	InboundNatPools *[]SubResource `json:"inboundNatPools,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to inbound rules that use this frontend IP.
	InboundNatRules *[]SubResource `json:"inboundNatRules,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to load balancing rules that use this frontend IP.
	LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to outbound rules that use this frontend IP.
	OutboundRules *[]SubResource `json:"outboundRules,omitempty" azure:"ro"`

	// The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
	PrivateIPAddressVersion *IPVersion `json:"privateIPAddressVersion,omitempty"`

	// The Private IP allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the frontend IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the Public IP resource.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`

	// The reference to the Public IP Prefix resource.
	PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`

	// The reference to the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// FrontendIPConfigurationResponse is the response envelope for operations that return a FrontendIPConfiguration type.
type FrontendIPConfigurationResponse struct {
	// Frontend IP address of the load balancer.
	FrontendIPConfiguration *FrontendIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Gateway routing details.
type GatewayRoute struct {
	// READ-ONLY; The route's AS path sequence.
	AsPath *string `json:"asPath,omitempty" azure:"ro"`

	// READ-ONLY; The gateway's local address.
	LocalAddress *string `json:"localAddress,omitempty" azure:"ro"`

	// READ-ONLY; The route's network prefix.
	Network *string `json:"network,omitempty" azure:"ro"`

	// READ-ONLY; The route's next hop.
	NextHop *string `json:"nextHop,omitempty" azure:"ro"`

	// READ-ONLY; The source this route was learned from.
	Origin *string `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; The peer this route was learned from.
	SourcePeer *string `json:"sourcePeer,omitempty" azure:"ro"`

	// READ-ONLY; The route's weight.
	Weight *int32 `json:"weight,omitempty" azure:"ro"`
}

// List of virtual network gateway routes.
type GatewayRouteListResult struct {
	// List of gateway routes.
	Value *[]GatewayRoute `json:"value,omitempty"`
}

// GatewayRouteListResultPollerResponse is the response envelope for operations that asynchronously return a GatewayRouteListResult type.
type GatewayRouteListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*GatewayRouteListResultResponse, error)

	// Poller contains an initialized poller.
	Poller GatewayRouteListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GatewayRouteListResultResponse is the response envelope for operations that return a GatewayRouteListResult type.
type GatewayRouteListResultResponse struct {
	// List of virtual network gateway routes.
	GatewayRouteListResult *GatewayRouteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The customer name to be printed on a letter of authorization.
type GenerateExpressRoutePortsLoaRequest struct {
	// The customer name.
	CustomerName *string `json:"customerName,omitempty"`
}

// Response for GenerateExpressRoutePortsLOA API service call.
type GenerateExpressRoutePortsLoaResult struct {
	// The content as a base64 encoded string.
	EncodedContent *string `json:"encodedContent,omitempty"`
}

// GenerateExpressRoutePortsLoaResultResponse is the response envelope for operations that return a GenerateExpressRoutePortsLoaResult type.
type GenerateExpressRoutePortsLoaResultResponse struct {
	// Response for GenerateExpressRoutePortsLOA API service call.
	GenerateExpressRoutePortsLoaResult *GenerateExpressRoutePortsLoaResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of Vpn-Sites.
type GetVpnSitesConfigurationRequest struct {
	// The sas-url to download the configurations for vpn-sites.
	OutputBlobSasURL *string `json:"outputBlobSasUrl,omitempty"`

	// List of resource-ids of the vpn-sites for which config is to be downloaded.
	VpnSites *[]string `json:"vpnSites,omitempty"`
}

// HTTP configuration of the connectivity check.
type HTTPConfiguration struct {
	// List of HTTP headers.
	Headers *[]HTTPHeader `json:"headers,omitempty"`

	// HTTP method.
	Method *HTTPMethod `json:"method,omitempty"`

	// Valid status codes.
	ValidStatusCodes *[]int32 `json:"validStatusCodes,omitempty"`
}

// The HTTP header.
type HTTPHeader struct {
	// The name in HTTP header.
	Name *string `json:"name,omitempty"`

	// The value in HTTP header.
	Value *string `json:"value,omitempty"`
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Hop link.
type HopLink struct {
	// READ-ONLY; Provides additional context on links.
	Context *map[string]string `json:"context,omitempty" azure:"ro"`

	// READ-ONLY; List of issues.
	Issues *[]ConnectivityIssue `json:"issues,omitempty" azure:"ro"`

	// READ-ONLY; Link type.
	LinkType *string `json:"linkType,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the next hop.
	NextHopID *string `json:"nextHopId,omitempty" azure:"ro"`

	// Hop link properties.
	Properties *HopLinkProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource ID.
	ResourceID *string `json:"resourceId,omitempty" azure:"ro"`
}

// Hop link properties.
type HopLinkProperties struct {
	// READ-ONLY; Average roundtrip time in milliseconds.
	RoundTripTimeAvg *int64 `json:"roundTripTimeAvg,omitempty" azure:"ro"`

	// READ-ONLY; Maximum roundtrip time in milliseconds.
	RoundTripTimeMax *int64 `json:"roundTripTimeMax,omitempty" azure:"ro"`

	// READ-ONLY; Minimum roundtrip time in milliseconds.
	RoundTripTimeMin *int64 `json:"roundTripTimeMin,omitempty" azure:"ro"`
}

// IP addresses associated with azure firewall.
type HubIPAddresses struct {
	// Private IP Address associated with azure firewall.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// Public IP addresses associated with azure firewall.
	PublicIPs *HubPublicIPAddresses `json:"publicIPs,omitempty"`
}

// IpConfigurations.
type HubIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the Ip Configuration.
	Name *string `json:"name,omitempty"`

	// The properties of the Virtual Hub IPConfigurations.
	Properties *HubIPConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Ipconfiguration type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// HubIPConfigurationPollerResponse is the response envelope for operations that asynchronously return a HubIPConfiguration type.
type HubIPConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*HubIPConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller HubIPConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of IP configuration.
type HubIPConfigurationPropertiesFormat struct {
	// The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`

	// The reference to the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// HubIPConfigurationResponse is the response envelope for operations that return a HubIPConfiguration type.
type HubIPConfigurationResponse struct {
	// IpConfigurations.
	HubIPConfiguration *HubIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Public IP addresses associated with azure firewall.
type HubPublicIPAddresses struct {
	// The list of Public IP addresses associated with azure firewall or IP addresses to be retained.
	Addresses *[]AzureFirewallPublicIPAddress `json:"addresses,omitempty"`

	// The number of Public IP addresses associated with azure firewall.
	Count *int32 `json:"count,omitempty"`
}

// RouteTable route.
type HubRoute struct {
	// The type of destinations (eg: CIDR, ResourceId, Service).
	DestinationType *string `json:"destinationType,omitempty"`

	// List of all destinations.
	Destinations *[]string `json:"destinations,omitempty"`

	// The name of the Route that is unique within a RouteTable. This name can be used to access this route.
	Name *string `json:"name,omitempty"`

	// NextHop resource ID.
	NextHop *string `json:"nextHop,omitempty"`

	// The type of next hop (eg: ResourceId).
	NextHopType *string `json:"nextHopType,omitempty"`
}

// RouteTable resource in a virtual hub.
type HubRouteTable struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the RouteTable resource.
	Properties *HubRouteTableProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// HubRouteTablePollerResponse is the response envelope for operations that asynchronously return a HubRouteTable type.
type HubRouteTablePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*HubRouteTableResponse, error)

	// Poller contains an initialized poller.
	Poller HubRouteTablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for RouteTable.
type HubRouteTableProperties struct {
	// READ-ONLY; List of all connections associated with this route table.
	AssociatedConnections *[]string `json:"associatedConnections,omitempty" azure:"ro"`

	// List of labels associated with this route table.
	Labels *[]string `json:"labels,omitempty"`

	// READ-ONLY; List of all connections that advertise to this route table.
	PropagatingConnections *[]string `json:"propagatingConnections,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the RouteTable resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// List of all routes.
	Routes *[]HubRoute `json:"routes,omitempty"`
}

// HubRouteTableResponse is the response envelope for operations that return a HubRouteTable type.
type HubRouteTableResponse struct {
	// RouteTable resource in a virtual hub.
	HubRouteTable *HubRouteTable

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubRouteTablesCreateOrUpdateOptions contains the optional parameters for the HubRouteTables.CreateOrUpdate method.
type HubRouteTablesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// HubRouteTablesDeleteOptions contains the optional parameters for the HubRouteTables.Delete method.
type HubRouteTablesDeleteOptions struct {
	// placeholder for future optional parameters
}

// HubRouteTablesGetOptions contains the optional parameters for the HubRouteTables.Get method.
type HubRouteTablesGetOptions struct {
	// placeholder for future optional parameters
}

// HubRouteTablesListOptions contains the optional parameters for the HubRouteTables.List method.
type HubRouteTablesListOptions struct {
	// placeholder for future optional parameters
}

// HubVirtualNetworkConnection Resource.
type HubVirtualNetworkConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the hub virtual network connection.
	Properties *HubVirtualNetworkConnectionProperties `json:"properties,omitempty"`
}

// HubVirtualNetworkConnectionPollerResponse is the response envelope for operations that asynchronously return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*HubVirtualNetworkConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller HubVirtualNetworkConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for HubVirtualNetworkConnection.
type HubVirtualNetworkConnectionProperties struct {
	// Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
	AllowHubToRemoteVnetTransit *bool `json:"allowHubToRemoteVnetTransit,omitempty"`

	// Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
	AllowRemoteVnetToUseHubVnetGateways *bool `json:"allowRemoteVnetToUseHubVnetGateways,omitempty"`

	// Enable internet security.
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty"`

	// READ-ONLY; The provisioning state of the hub virtual network connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Reference to the remote virtual network.
	RemoteVirtualNetwork *SubResource `json:"remoteVirtualNetwork,omitempty"`

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration `json:"routingConfiguration,omitempty"`
}

// HubVirtualNetworkConnectionResponse is the response envelope for operations that return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionResponse struct {
	// HubVirtualNetworkConnection Resource.
	HubVirtualNetworkConnection *HubVirtualNetworkConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubVirtualNetworkConnectionsCreateOrUpdateOptions contains the optional parameters for the HubVirtualNetworkConnections.CreateOrUpdate method.
type HubVirtualNetworkConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// HubVirtualNetworkConnectionsDeleteOptions contains the optional parameters for the HubVirtualNetworkConnections.Delete method.
type HubVirtualNetworkConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// HubVirtualNetworkConnectionsGetOptions contains the optional parameters for the HubVirtualNetworkConnections.Get method.
type HubVirtualNetworkConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// HubVirtualNetworkConnectionsListOptions contains the optional parameters for the HubVirtualNetworkConnections.List method.
type HubVirtualNetworkConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// Response for CheckIPAddressAvailability API service call.
type IPAddressAvailabilityResult struct {
	// Private IP address availability.
	Available *bool `json:"available,omitempty"`

	// Contains other available private IP addresses if the asked for address is taken.
	AvailableIPAddresses *[]string `json:"availableIPAddresses,omitempty"`
}

// IPAddressAvailabilityResultResponse is the response envelope for operations that return a IPAddressAvailabilityResult type.
type IPAddressAvailabilityResultResponse struct {
	// Response for CheckIPAddressAvailability API service call.
	IPAddressAvailabilityResult *IPAddressAvailabilityResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IpAllocation resource.
type IPAllocation struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the IpAllocation.
	Properties *IPAllocationPropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListIpAllocations API service call.
type IPAllocationListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of IpAllocation resources.
	Value *[]IPAllocation `json:"value,omitempty"`
}

// IPAllocationListResultResponse is the response envelope for operations that return a IPAllocationListResult type.
type IPAllocationListResultResponse struct {
	// Response for the ListIpAllocations API service call.
	IPAllocationListResult *IPAllocationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAllocationPollerResponse is the response envelope for operations that asynchronously return a IPAllocation type.
type IPAllocationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*IPAllocationResponse, error)

	// Poller contains an initialized poller.
	Poller IPAllocationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the IpAllocation.
type IPAllocationPropertiesFormat struct {
	// IpAllocation tags.
	AllocationTags *map[string]string `json:"allocationTags,omitempty"`

	// The IPAM allocation ID.
	IPamAllocationID *string `json:"ipamAllocationId,omitempty"`

	// The address prefix for the IpAllocation.
	Prefix *string `json:"prefix,omitempty"`

	// The address prefix length for the IpAllocation.
	PrefixLength *int32 `json:"prefixLength,omitempty"`

	// The address prefix Type for the IpAllocation.
	PrefixType *IPVersion `json:"prefixType,omitempty"`

	// READ-ONLY; The Subnet that using the prefix of this IpAllocation resource.
	Subnet *SubResource `json:"subnet,omitempty" azure:"ro"`

	// The type for the IpAllocation.
	Type *IPAllocationType `json:"type,omitempty"`

	// READ-ONLY; The VirtualNetwork that using the prefix of this IpAllocation resource.
	VirtualNetwork *SubResource `json:"virtualNetwork,omitempty" azure:"ro"`
}

// IPAllocationResponse is the response envelope for operations that return a IPAllocation type.
type IPAllocationResponse struct {
	// IpAllocation resource.
	IPAllocation *IPAllocation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAllocationsCreateOrUpdateOptions contains the optional parameters for the IPAllocations.CreateOrUpdate method.
type IPAllocationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// IPAllocationsDeleteOptions contains the optional parameters for the IPAllocations.Delete method.
type IPAllocationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// IPAllocationsGetOptions contains the optional parameters for the IPAllocations.Get method.
type IPAllocationsGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// IPAllocationsListByResourceGroupOptions contains the optional parameters for the IPAllocations.ListByResourceGroup method.
type IPAllocationsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// IPAllocationsListOptions contains the optional parameters for the IPAllocations.List method.
type IPAllocationsListOptions struct {
	// placeholder for future optional parameters
}

// IPAllocationsUpdateTagsOptions contains the optional parameters for the IPAllocations.UpdateTags method.
type IPAllocationsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// IP configuration.
type IPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the IP configuration.
	Properties *IPConfigurationPropertiesFormat `json:"properties,omitempty"`
}

// Properties of IPConfigurationBgpPeeringAddress.
type IPConfigurationBgpPeeringAddress struct {
	// The list of custom BGP peering addresses which belong to IP configuration.
	CustomBgpIPAddresses *[]string `json:"customBgpIpAddresses,omitempty"`

	// READ-ONLY; The list of default BGP peering addresses which belong to IP configuration.
	DefaultBgpIPAddresses *[]string `json:"defaultBgpIpAddresses,omitempty" azure:"ro"`

	// The ID of IP configuration which belongs to gateway.
	IPconfigurationID *string `json:"ipconfigurationId,omitempty"`

	// READ-ONLY; The list of tunnel public IP addresses which belong to IP configuration.
	TunnelIPAddresses *[]string `json:"tunnelIpAddresses,omitempty" azure:"ro"`
}

// IP configuration profile child resource.
type IPConfigurationProfile struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the IP configuration profile.
	Properties *IPConfigurationProfilePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Sub Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// IP configuration profile properties.
type IPConfigurationProfilePropertiesFormat struct {
	// READ-ONLY; The provisioning state of the IP configuration profile resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the subnet resource to create a container network interface ip configuration.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// Properties of IP configuration.
type IPConfigurationPropertiesFormat struct {
	// The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`

	// The reference to the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// The IpGroups resource information.
type IPGroup struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the IpGroups.
	Properties *IPGroupPropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListIpGroups API service call.
type IPGroupListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of IpGroups information resources.
	Value *[]IPGroup `json:"value,omitempty"`
}

// IPGroupListResultResponse is the response envelope for operations that return a IPGroupListResult type.
type IPGroupListResultResponse struct {
	// Response for the ListIpGroups API service call.
	IPGroupListResult *IPGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPGroupPollerResponse is the response envelope for operations that asynchronously return a IPGroup type.
type IPGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*IPGroupResponse, error)

	// Poller contains an initialized poller.
	Poller IPGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The IpGroups property information.
type IPGroupPropertiesFormat struct {
	// READ-ONLY; List of references to Firewall Policies resources that this IpGroups is associated with.
	FirewallPolicies *[]SubResource `json:"firewallPolicies,omitempty" azure:"ro"`

	// READ-ONLY; List of references to Firewall resources that this IpGroups is associated with.
	Firewalls *[]SubResource `json:"firewalls,omitempty" azure:"ro"`

	// IpAddresses/IpAddressPrefixes in the IpGroups resource.
	IPAddresses *[]string `json:"ipAddresses,omitempty"`

	// READ-ONLY; The provisioning state of the IpGroups resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// IPGroupResponse is the response envelope for operations that return a IPGroup type.
type IPGroupResponse struct {
	// The IpGroups resource information.
	IPGroup *IPGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPGroupsCreateOrUpdateOptions contains the optional parameters for the IPGroups.CreateOrUpdate method.
type IPGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// IPGroupsDeleteOptions contains the optional parameters for the IPGroups.Delete method.
type IPGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// IPGroupsGetOptions contains the optional parameters for the IPGroups.Get method.
type IPGroupsGetOptions struct {
	// Expands resourceIds (of Firewalls/Network Security Groups etc.) back referenced by the IpGroups resource.
	Expand *string
}

// IPGroupsListByResourceGroupOptions contains the optional parameters for the IPGroups.ListByResourceGroup method.
type IPGroupsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// IPGroupsListOptions contains the optional parameters for the IPGroups.List method.
type IPGroupsListOptions struct {
	// placeholder for future optional parameters
}

// IPGroupsUpdateGroupsOptions contains the optional parameters for the IPGroups.UpdateGroups method.
type IPGroupsUpdateGroupsOptions struct {
	// placeholder for future optional parameters
}

// Contains the IpTag associated with the object.
type IPTag struct {
	// The IP tag type. Example: FirstPartyUsage.
	IPTagType *string `json:"ipTagType,omitempty"`

	// The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string `json:"tag,omitempty"`
}

// An IPSec Policy configuration for a virtual network gateway connection.
type IPsecPolicy struct {
	// The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *DhGroup `json:"dhGroup,omitempty"`

	// The IPSec encryption algorithm (IKE phase 1).
	IPsecEncryption *IPsecEncryption `json:"ipsecEncryption,omitempty"`

	// The IPSec integrity algorithm (IKE phase 1).
	IPsecIntegrity *IPsecIntegrity `json:"ipsecIntegrity,omitempty"`

	// The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IkeEncryption `json:"ikeEncryption,omitempty"`

	// The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IkeIntegrity `json:"ikeIntegrity,omitempty"`

	// The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *PfsGroup `json:"pfsGroup,omitempty"`

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
	SaDataSizeKilobytes *int32 `json:"saDataSizeKilobytes,omitempty"`

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
	SaLifeTimeSeconds *int32 `json:"saLifeTimeSeconds,omitempty"`
}

// IPv6 Circuit Connection properties for global reach.
type IPv6CircuitConnectionConfig struct {
	// /125 IP address space to carve out customer addresses for global reach.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus `json:"circuitConnectionStatus,omitempty" azure:"ro"`
}

// Contains IPv6 peering config.
type IPv6ExpressRouteCircuitPeeringConfig struct {
	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig `json:"microsoftPeeringConfig,omitempty"`

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string `json:"primaryPeerAddressPrefix,omitempty"`

	// The reference to the RouteFilter resource.
	RouteFilter *SubResource `json:"routeFilter,omitempty"`

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string `json:"secondaryPeerAddressPrefix,omitempty"`

	// The state of peering.
	State *ExpressRouteCircuitPeeringState `json:"state,omitempty"`
}

// Inbound NAT pool of the load balancer.
type InboundNatPool struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer inbound nat pool.
	Properties *InboundNatPoolPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of Inbound NAT pool.
type InboundNatPoolPropertiesFormat struct {
	// The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
	BackendPort *int32 `json:"backendPort,omitempty"`

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required
	// when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to
	// TCP.
	EnableTCPReset *bool `json:"enableTcpReset,omitempty"`

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values
	// range between 1 and 65535.
	FrontendPortRangeEnd *int32 `json:"frontendPortRangeEnd,omitempty"`

	// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values
	// range between 1 and 65534.
	FrontendPortRangeStart *int32 `json:"frontendPortRangeStart,omitempty"`

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when
	// the protocol is set to TCP.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// The reference to the transport protocol used by the inbound NAT pool.
	Protocol *TransportProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the inbound NAT pool resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// Inbound NAT rule of the load balancer.
type InboundNatRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer inbound nat rule.
	Properties *InboundNatRulePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListInboundNatRule API service call.
type InboundNatRuleListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of inbound nat rules in a load balancer.
	Value *[]InboundNatRule `json:"value,omitempty"`
}

// InboundNatRuleListResultResponse is the response envelope for operations that return a InboundNatRuleListResult type.
type InboundNatRuleListResultResponse struct {
	// Response for ListInboundNatRule API service call.
	InboundNatRuleListResult *InboundNatRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundNatRulePollerResponse is the response envelope for operations that asynchronously return a InboundNatRule type.
type InboundNatRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*InboundNatRuleResponse, error)

	// Poller contains an initialized poller.
	Poller InboundNatRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat struct {
	// READ-ONLY; A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations
	// is forwarded to the backend IP.
	BackendIPConfiguration *NetworkInterfaceIPConfiguration `json:"backendIPConfiguration,omitempty" azure:"ro"`

	// The port used for the internal endpoint. Acceptable values range from 1 to 65535.
	BackendPort *int32 `json:"backendPort,omitempty"`

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required
	// when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to
	// TCP.
	EnableTCPReset *bool `json:"enableTcpReset,omitempty"`

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
	FrontendPort *int32 `json:"frontendPort,omitempty"`

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when
	// the protocol is set to TCP.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// The reference to the transport protocol used by the load balancing rule.
	Protocol *TransportProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the inbound NAT rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// InboundNatRuleResponse is the response envelope for operations that return a InboundNatRule type.
type InboundNatRuleResponse struct {
	// Inbound NAT rule of the load balancer.
	InboundNatRule *InboundNatRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundNatRulesCreateOrUpdateOptions contains the optional parameters for the InboundNatRules.CreateOrUpdate method.
type InboundNatRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// InboundNatRulesDeleteOptions contains the optional parameters for the InboundNatRules.Delete method.
type InboundNatRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// InboundNatRulesGetOptions contains the optional parameters for the InboundNatRules.Get method.
type InboundNatRulesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// InboundNatRulesListOptions contains the optional parameters for the InboundNatRules.List method.
type InboundNatRulesListOptions struct {
	// placeholder for future optional parameters
}

// NVA Inbound Security Rule resource.
type InboundSecurityRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of security rule collection.
	Name *string `json:"name,omitempty"`

	// The properties of the Inbound Security Rules.
	Properties *InboundSecurityRuleProperties `json:"properties,omitempty"`

	// READ-ONLY; NVA inbound security rule type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// InboundSecurityRuleCreateOrUpdateOptions contains the optional parameters for the InboundSecurityRule.CreateOrUpdate method.
type InboundSecurityRuleCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// InboundSecurityRulePollerResponse is the response envelope for operations that asynchronously return a InboundSecurityRule type.
type InboundSecurityRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*InboundSecurityRuleResponse, error)

	// Poller contains an initialized poller.
	Poller InboundSecurityRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the Inbound Security Rules resource.
type InboundSecurityRuleProperties struct {
	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// List of allowed rules.
	Rules *[]InboundSecurityRules `json:"rules,omitempty"`
}

// InboundSecurityRuleResponse is the response envelope for operations that return a InboundSecurityRule type.
type InboundSecurityRuleResponse struct {
	// NVA Inbound Security Rule resource.
	InboundSecurityRule *InboundSecurityRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the Inbound Security Rules resource.
type InboundSecurityRules struct {
	// NVA port ranges to be opened up. One needs to provide specific ports.
	DestinationPortRange *int32 `json:"destinationPortRange,omitempty"`

	// Protocol. This should be either TCP or UDP.
	Protocol *InboundSecurityRulesProtocol `json:"protocol,omitempty"`

	// The CIDR or source IP range. Only /30, /31 and /32 Ip ranges are allowed.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`
}

// List of RouteTables and a URL nextLink to get the next set of results.
type ListHubRouteTablesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of RouteTables.
	Value *[]HubRouteTable `json:"value,omitempty"`
}

// ListHubRouteTablesResultResponse is the response envelope for operations that return a ListHubRouteTablesResult type.
type ListHubRouteTablesResultResponse struct {
	// List of RouteTables and a URL nextLink to get the next set of results.
	ListHubRouteTablesResult *ListHubRouteTablesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.
type ListHubVirtualNetworkConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of HubVirtualNetworkConnections.
	Value *[]HubVirtualNetworkConnection `json:"value,omitempty"`
}

// ListHubVirtualNetworkConnectionsResultResponse is the response envelope for operations that return a ListHubVirtualNetworkConnectionsResult type.
type ListHubVirtualNetworkConnectionsResultResponse struct {
	// List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.
	ListHubVirtualNetworkConnectionsResult *ListHubVirtualNetworkConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.
type ListP2SVpnGatewaysResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of P2SVpnGateways.
	Value *[]P2SVpnGateway `json:"value,omitempty"`
}

// ListP2SVpnGatewaysResultResponse is the response envelope for operations that return a ListP2SVpnGatewaysResult type.
type ListP2SVpnGatewaysResultResponse struct {
	// Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.
	ListP2SVpnGatewaysResult *ListP2SVpnGatewaysResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualHubBgpConnections list.
type ListVirtualHubBgpConnectionResults struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of VirtualHubBgpConnections.
	Value *[]BgpConnection `json:"value,omitempty"`
}

// ListVirtualHubBgpConnectionResultsResponse is the response envelope for operations that return a ListVirtualHubBgpConnectionResults type.
type ListVirtualHubBgpConnectionResultsResponse struct {
	// VirtualHubBgpConnections list.
	ListVirtualHubBgpConnectionResults *ListVirtualHubBgpConnectionResults

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualHubIpConfigurations list.
type ListVirtualHubIPConfigurationResults struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of VirtualHubIpConfigurations.
	Value *[]HubIPConfiguration `json:"value,omitempty"`
}

// ListVirtualHubIPConfigurationResultsResponse is the response envelope for operations that return a ListVirtualHubIPConfigurationResults type.
type ListVirtualHubIPConfigurationResultsResponse struct {
	// VirtualHubIpConfigurations list.
	ListVirtualHubIPConfigurationResults *ListVirtualHubIPConfigurationResults

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
type ListVirtualHubRouteTableV2SResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VirtualHubRouteTableV2s.
	Value *[]VirtualHubRouteTableV2 `json:"value,omitempty"`
}

// ListVirtualHubRouteTableV2SResultResponse is the response envelope for operations that return a ListVirtualHubRouteTableV2SResult type.
type ListVirtualHubRouteTableV2SResultResponse struct {
	// List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
	ListVirtualHubRouteTableV2SResult *ListVirtualHubRouteTableV2SResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.
type ListVirtualHubsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VirtualHubs.
	Value *[]VirtualHub `json:"value,omitempty"`
}

// ListVirtualHubsResultResponse is the response envelope for operations that return a ListVirtualHubsResult type.
type ListVirtualHubsResultResponse struct {
	// Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.
	ListVirtualHubsResult *ListVirtualHubsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.
type ListVirtualWaNsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VirtualWANs.
	Value *[]VirtualWan `json:"value,omitempty"`
}

// ListVirtualWaNsResultResponse is the response envelope for operations that return a ListVirtualWaNsResult type.
type ListVirtualWaNsResultResponse struct {
	// Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.
	ListVirtualWaNsResult *ListVirtualWaNsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
// set of results.
type ListVpnConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Vpn Connections.
	Value *[]VpnConnection `json:"value,omitempty"`
}

// ListVpnConnectionsResultResponse is the response envelope for operations that return a ListVpnConnectionsResult type.
type ListVpnConnectionsResultResponse struct {
	// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
	// set of results.
	ListVpnConnectionsResult *ListVpnConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.
type ListVpnGatewaysResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VpnGateways.
	Value *[]VpnGateway `json:"value,omitempty"`
}

// ListVpnGatewaysResultResponse is the response envelope for operations that return a ListVpnGatewaysResult type.
type ListVpnGatewaysResultResponse struct {
	// Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.
	ListVpnGatewaysResult *ListVpnGatewaysResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.
type ListVpnServerConfigurationsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VpnServerConfigurations.
	Value *[]VpnServerConfiguration `json:"value,omitempty"`
}

// ListVpnServerConfigurationsResultResponse is the response envelope for operations that return a ListVpnServerConfigurationsResult type.
type ListVpnServerConfigurationsResultResponse struct {
	// Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.
	ListVpnServerConfigurationsResult *ListVpnServerConfigurationsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
// set of results.
type ListVpnSiteLinkConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VpnSiteLinkConnections.
	Value *[]VpnSiteLinkConnection `json:"value,omitempty"`
}

// ListVpnSiteLinkConnectionsResultResponse is the response envelope for operations that return a ListVpnSiteLinkConnectionsResult type.
type ListVpnSiteLinkConnectionsResultResponse struct {
	// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
	// set of results.
	ListVpnSiteLinkConnectionsResult *ListVpnSiteLinkConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.
type ListVpnSiteLinksResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VpnSitesLinks.
	Value *[]VpnSiteLink `json:"value,omitempty"`
}

// ListVpnSiteLinksResultResponse is the response envelope for operations that return a ListVpnSiteLinksResult type.
type ListVpnSiteLinksResultResponse struct {
	// Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.
	ListVpnSiteLinksResult *ListVpnSiteLinksResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.
type ListVpnSitesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VpnSites.
	Value *[]VpnSite `json:"value,omitempty"`
}

// ListVpnSitesResultResponse is the response envelope for operations that return a ListVpnSitesResult type.
type ListVpnSitesResultResponse struct {
	// Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.
	ListVpnSitesResult *ListVpnSitesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancer resource.
type LoadBalancer struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Properties of load balancer.
	Properties *LoadBalancerPropertiesFormat `json:"properties,omitempty"`

	// The load balancer SKU.
	SKU *LoadBalancerSKU `json:"sku,omitempty"`
}

// Load balancer backend addresses.
type LoadBalancerBackendAddress struct {
	// Name of the backend address.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer backend address pool.
	Properties *LoadBalancerBackendAddressPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListBackendAddressPool API service call.
type LoadBalancerBackendAddressPoolListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of backend address pools in a load balancer.
	Value *[]BackendAddressPool `json:"value,omitempty"`
}

// LoadBalancerBackendAddressPoolListResultResponse is the response envelope for operations that return a LoadBalancerBackendAddressPoolListResult type.
type LoadBalancerBackendAddressPoolListResultResponse struct {
	// Response for ListBackendAddressPool API service call.
	LoadBalancerBackendAddressPoolListResult *LoadBalancerBackendAddressPoolListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerBackendAddressPoolsCreateOrUpdateOptions contains the optional parameters for the LoadBalancerBackendAddressPools.CreateOrUpdate method.
type LoadBalancerBackendAddressPoolsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerBackendAddressPoolsDeleteOptions contains the optional parameters for the LoadBalancerBackendAddressPools.Delete method.
type LoadBalancerBackendAddressPoolsDeleteOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerBackendAddressPoolsGetOptions contains the optional parameters for the LoadBalancerBackendAddressPools.Get method.
type LoadBalancerBackendAddressPoolsGetOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerBackendAddressPoolsListOptions contains the optional parameters for the LoadBalancerBackendAddressPools.List method.
type LoadBalancerBackendAddressPoolsListOptions struct {
	// placeholder for future optional parameters
}

// Properties of the load balancer backend addresses.
type LoadBalancerBackendAddressPropertiesFormat struct {
	// IP Address belonging to the referenced virtual network.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Reference to the frontend ip address configuration defined in regional loadbalancer.
	LoadBalancerFrontendIPConfiguration *SubResource `json:"loadBalancerFrontendIPConfiguration,omitempty"`

	// READ-ONLY; Reference to IP address defined in network interfaces.
	NetworkInterfaceIPConfiguration *SubResource `json:"networkInterfaceIPConfiguration,omitempty" azure:"ro"`

	// Reference to an existing virtual network.
	VirtualNetwork *SubResource `json:"virtualNetwork,omitempty"`
}

// Response for ListFrontendIPConfiguration API service call.
type LoadBalancerFrontendIPConfigurationListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of frontend IP configurations in a load balancer.
	Value *[]FrontendIPConfiguration `json:"value,omitempty"`
}

// LoadBalancerFrontendIPConfigurationListResultResponse is the response envelope for operations that return a LoadBalancerFrontendIPConfigurationListResult
// type.
type LoadBalancerFrontendIPConfigurationListResultResponse struct {
	// Response for ListFrontendIPConfiguration API service call.
	LoadBalancerFrontendIPConfigurationListResult *LoadBalancerFrontendIPConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerFrontendIPConfigurationsGetOptions contains the optional parameters for the LoadBalancerFrontendIPConfigurations.Get method.
type LoadBalancerFrontendIPConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerFrontendIPConfigurationsListOptions contains the optional parameters for the LoadBalancerFrontendIPConfigurations.List method.
type LoadBalancerFrontendIPConfigurationsListOptions struct {
	// placeholder for future optional parameters
}

// Response for ListLoadBalancers API service call.
type LoadBalancerListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of load balancers in a resource group.
	Value *[]LoadBalancer `json:"value,omitempty"`
}

// LoadBalancerListResultResponse is the response envelope for operations that return a LoadBalancerListResult type.
type LoadBalancerListResultResponse struct {
	// Response for ListLoadBalancers API service call.
	LoadBalancerListResult *LoadBalancerListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ListLoadBalancingRule API service call.
type LoadBalancerLoadBalancingRuleListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of load balancing rules in a load balancer.
	Value *[]LoadBalancingRule `json:"value,omitempty"`
}

// LoadBalancerLoadBalancingRuleListResultResponse is the response envelope for operations that return a LoadBalancerLoadBalancingRuleListResult type.
type LoadBalancerLoadBalancingRuleListResultResponse struct {
	// Response for ListLoadBalancingRule API service call.
	LoadBalancerLoadBalancingRuleListResult *LoadBalancerLoadBalancingRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerLoadBalancingRulesGetOptions contains the optional parameters for the LoadBalancerLoadBalancingRules.Get method.
type LoadBalancerLoadBalancingRulesGetOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerLoadBalancingRulesListOptions contains the optional parameters for the LoadBalancerLoadBalancingRules.List method.
type LoadBalancerLoadBalancingRulesListOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerNetworkInterfacesListOptions contains the optional parameters for the LoadBalancerNetworkInterfaces.List method.
type LoadBalancerNetworkInterfacesListOptions struct {
	// placeholder for future optional parameters
}

// Response for ListOutboundRule API service call.
type LoadBalancerOutboundRuleListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of outbound rules in a load balancer.
	Value *[]OutboundRule `json:"value,omitempty"`
}

// LoadBalancerOutboundRuleListResultResponse is the response envelope for operations that return a LoadBalancerOutboundRuleListResult type.
type LoadBalancerOutboundRuleListResultResponse struct {
	// Response for ListOutboundRule API service call.
	LoadBalancerOutboundRuleListResult *LoadBalancerOutboundRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerOutboundRulesGetOptions contains the optional parameters for the LoadBalancerOutboundRules.Get method.
type LoadBalancerOutboundRulesGetOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerOutboundRulesListOptions contains the optional parameters for the LoadBalancerOutboundRules.List method.
type LoadBalancerOutboundRulesListOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerPollerResponse is the response envelope for operations that asynchronously return a LoadBalancer type.
type LoadBalancerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*LoadBalancerResponse, error)

	// Poller contains an initialized poller.
	Poller LoadBalancerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ListProbe API service call.
type LoadBalancerProbeListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of probes in a load balancer.
	Value *[]Probe `json:"value,omitempty"`
}

// LoadBalancerProbeListResultResponse is the response envelope for operations that return a LoadBalancerProbeListResult type.
type LoadBalancerProbeListResultResponse struct {
	// Response for ListProbe API service call.
	LoadBalancerProbeListResult *LoadBalancerProbeListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerProbesGetOptions contains the optional parameters for the LoadBalancerProbes.Get method.
type LoadBalancerProbesGetOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancerProbesListOptions contains the optional parameters for the LoadBalancerProbes.List method.
type LoadBalancerProbesListOptions struct {
	// placeholder for future optional parameters
}

// Properties of the load balancer.
type LoadBalancerPropertiesFormat struct {
	// Collection of backend address pools used by a load balancer.
	BackendAddressPools *[]BackendAddressPool `json:"backendAddressPools,omitempty"`

	// Object representing the frontend IPs to be used for the load balancer.
	FrontendIPConfigurations *[]FrontendIPConfiguration `json:"frontendIPConfigurations,omitempty"`

	// Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically
	// for each NIC associated with the Load
	// Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules.
	// Inbound NAT pools are referenced from virtual
	// machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual
	// inbound NAT rules.
	InboundNatPools *[]InboundNatPool `json:"inboundNatPools,omitempty"`

	// Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound
	// NAT pool. Inbound NAT pools are referenced from
	// virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual
	// inbound NAT rules.
	InboundNatRules *[]InboundNatRule `json:"inboundNatRules,omitempty"`

	// Object collection representing the load balancing rules Gets the provisioning.
	LoadBalancingRules *[]LoadBalancingRule `json:"loadBalancingRules,omitempty"`

	// The outbound rules.
	OutboundRules *[]OutboundRule `json:"outboundRules,omitempty"`

	// Collection of probe objects used in the load balancer.
	Probes *[]Probe `json:"probes,omitempty"`

	// READ-ONLY; The provisioning state of the load balancer resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the load balancer resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// LoadBalancerResponse is the response envelope for operations that return a LoadBalancer type.
type LoadBalancerResponse struct {
	// LoadBalancer resource.
	LoadBalancer *LoadBalancer

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKU of a load balancer.
type LoadBalancerSKU struct {
	// Name of a load balancer SKU.
	Name *LoadBalancerSKUName `json:"name,omitempty"`

	// Tier of a load balancer SKU.
	Tier *LoadBalancerSKUTier `json:"tier,omitempty"`
}

// LoadBalancersCreateOrUpdateOptions contains the optional parameters for the LoadBalancers.CreateOrUpdate method.
type LoadBalancersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancersDeleteOptions contains the optional parameters for the LoadBalancers.Delete method.
type LoadBalancersDeleteOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancersGetOptions contains the optional parameters for the LoadBalancers.Get method.
type LoadBalancersGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// LoadBalancersListAllOptions contains the optional parameters for the LoadBalancers.ListAll method.
type LoadBalancersListAllOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancersListOptions contains the optional parameters for the LoadBalancers.List method.
type LoadBalancersListOptions struct {
	// placeholder for future optional parameters
}

// LoadBalancersUpdateTagsOptions contains the optional parameters for the LoadBalancers.UpdateTags method.
type LoadBalancersUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// A load balancing rule for a load balancer.
type LoadBalancingRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer load balancing rule.
	Properties *LoadBalancingRulePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of the load balancer.
type LoadBalancingRulePropertiesFormat struct {
	// A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port".
	BackendPort *int32 `json:"backendPort,omitempty"`

	// Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
	DisableOutboundSnat *bool `json:"disableOutboundSnat,omitempty"`

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required
	// when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool `json:"enableFloatingIP,omitempty"`

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to
	// TCP.
	EnableTCPReset *bool `json:"enableTcpReset,omitempty"`

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource `json:"frontendIPConfiguration,omitempty"`

	// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note
	// that value 0 enables "Any Port".
	FrontendPort *int32 `json:"frontendPort,omitempty"`

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when
	// the protocol is set to TCP.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// The load distribution policy for this rule.
	LoadDistribution *LoadDistribution `json:"loadDistribution,omitempty"`

	// The reference to the load balancer probe used by the load balancing rule.
	Probe *SubResource `json:"probe,omitempty"`

	// The reference to the transport protocol used by the load balancing rule.
	Protocol *TransportProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the load balancing rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// LoadBalancingRuleResponse is the response envelope for operations that return a LoadBalancingRule type.
type LoadBalancingRuleResponse struct {
	// A load balancing rule for a load balancer.
	LoadBalancingRule *LoadBalancingRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// A common class for general resource information.
type LocalNetworkGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the local network gateway.
	Properties *LocalNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListLocalNetworkGateways API service call.
type LocalNetworkGatewayListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of local network gateways that exists in a resource group.
	Value *[]LocalNetworkGateway `json:"value,omitempty"`
}

// LocalNetworkGatewayListResultResponse is the response envelope for operations that return a LocalNetworkGatewayListResult type.
type LocalNetworkGatewayListResultResponse struct {
	// Response for ListLocalNetworkGateways API service call.
	LocalNetworkGatewayListResult *LocalNetworkGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a LocalNetworkGateway type.
type LocalNetworkGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*LocalNetworkGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller LocalNetworkGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGateway properties.
type LocalNetworkGatewayPropertiesFormat struct {
	// Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	// FQDN of local network gateway.
	Fqdn *string `json:"fqdn,omitempty"`

	// IP address of local network gateway.
	GatewayIPAddress *string `json:"gatewayIpAddress,omitempty"`

	// Local network site address space.
	LocalNetworkAddressSpace *AddressSpace `json:"localNetworkAddressSpace,omitempty"`

	// READ-ONLY; The provisioning state of the local network gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the local network gateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// LocalNetworkGatewayResponse is the response envelope for operations that return a LocalNetworkGateway type.
type LocalNetworkGatewayResponse struct {
	// A common class for general resource information.
	LocalNetworkGateway *LocalNetworkGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGatewaysCreateOrUpdateOptions contains the optional parameters for the LocalNetworkGateways.CreateOrUpdate method.
type LocalNetworkGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LocalNetworkGatewaysDeleteOptions contains the optional parameters for the LocalNetworkGateways.Delete method.
type LocalNetworkGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// LocalNetworkGatewaysGetOptions contains the optional parameters for the LocalNetworkGateways.Get method.
type LocalNetworkGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// LocalNetworkGatewaysListOptions contains the optional parameters for the LocalNetworkGateways.List method.
type LocalNetworkGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// LocalNetworkGatewaysUpdateTagsOptions contains the optional parameters for the LocalNetworkGateways.UpdateTags method.
type LocalNetworkGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Description of logging specification.
type LogSpecification struct {
	// Duration of the blob.
	BlobDuration *string `json:"blobDuration,omitempty"`

	// The display name of the specification.
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the specification.
	Name *string `json:"name,omitempty"`
}

// Defines a managed rule group override setting.
type ManagedRuleGroupOverride struct {
	// The managed rule group to override.
	RuleGroupName *string `json:"ruleGroupName,omitempty"`

	// List of rules that will be disabled. If none specified, all rules in the group will be disabled.
	Rules *[]ManagedRuleOverride `json:"rules,omitempty"`
}

// Defines a managed rule group override setting.
type ManagedRuleOverride struct {
	// Identifier for the managed rule.
	RuleID *string `json:"ruleId,omitempty"`

	// The state of the managed rule. Defaults to Disabled if not specified.
	State *ManagedRuleEnabledState `json:"state,omitempty"`
}

// Defines a managed rule set.
type ManagedRuleSet struct {
	// Defines the rule group overrides to apply to the rule set.
	RuleGroupOverrides *[]ManagedRuleGroupOverride `json:"ruleGroupOverrides,omitempty"`

	// Defines the rule set type to use.
	RuleSetType *string `json:"ruleSetType,omitempty"`

	// Defines the version of the rule set to use.
	RuleSetVersion *string `json:"ruleSetVersion,omitempty"`
}

// Allow to exclude some variable satisfy the condition for the WAF check.
type ManagedRulesDefinition struct {
	// The Exclusions that are applied on the policy.
	Exclusions *[]OwaspCrsExclusionEntry `json:"exclusions,omitempty"`

	// The managed rule sets that are associated with the policy.
	ManagedRuleSets *[]ManagedRuleSet `json:"managedRuleSets,omitempty"`
}

// Identity for the resource.
type ManagedServiceIDentity struct {
	// READ-ONLY; The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`

	// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned
	// identities. The type 'None' will remove any
	// identities from the virtual machine.
	Type *ResourceIDentityType `json:"type,omitempty"`

	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIDentities *map[string]Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties `json:"userAssignedIdentities,omitempty"`
}

// Define match conditions.
type MatchCondition struct {
	// Match value.
	MatchValues *[]string `json:"matchValues,omitempty"`

	// List of match variables.
	MatchVariables *[]MatchVariable `json:"matchVariables,omitempty"`

	// Whether this is negate condition or not.
	NegationConditon *bool `json:"negationConditon,omitempty"`

	// The operator to be matched.
	Operator *WebApplicationFirewallOperator `json:"operator,omitempty"`

	// List of transforms.
	Transforms *[]WebApplicationFirewallTransform `json:"transforms,omitempty"`
}

// Define match variables.
type MatchVariable struct {
	// The selector of match variable.
	Selector *string `json:"selector,omitempty"`

	// Match Variable.
	VariableName *WebApplicationFirewallMatchVariable `json:"variableName,omitempty"`
}

// Matched rule.
type MatchedRule struct {
	// The network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
	Action *string `json:"action,omitempty"`

	// Name of the matched network security rule.
	RuleName *string `json:"ruleName,omitempty"`
}

// Description of metrics specification.
type MetricSpecification struct {
	// The aggregation type.
	AggregationType *string `json:"aggregationType,omitempty"`

	// List of availability.
	Availabilities *[]Availability `json:"availabilities,omitempty"`

	// List of dimensions.
	Dimensions *[]Dimension `json:"dimensions,omitempty"`

	// The description of the metric.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// The display name of the metric.
	DisplayName *string `json:"displayName,omitempty"`

	// Whether regional MDM account enabled.
	EnableRegionalMdmAccount *bool `json:"enableRegionalMdmAccount,omitempty"`

	// Whether gaps would be filled with zeros.
	FillGapWithZero *bool `json:"fillGapWithZero,omitempty"`

	// Whether the metric is internal.
	IsInternal *bool `json:"isInternal,omitempty"`

	// Pattern for the filter of the metric.
	MetricFilterPattern *string `json:"metricFilterPattern,omitempty"`

	// The name of the metric.
	Name *string `json:"name,omitempty"`

	// The resource Id dimension name override.
	ResourceIDDimensionNameOverride *string `json:"resourceIdDimensionNameOverride,omitempty"`

	// The source MDM account.
	SourceMdmAccount *string `json:"sourceMdmAccount,omitempty"`

	// The source MDM namespace.
	SourceMdmNamespace *string `json:"sourceMdmNamespace,omitempty"`

	// Units the metric to be displayed in.
	Unit *string `json:"unit,omitempty"`
}

// Nat Gateway resource.
type NatGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Nat Gateway properties.
	Properties *NatGatewayPropertiesFormat `json:"properties,omitempty"`

	// The nat gateway SKU.
	SKU *NatGatewaySKU `json:"sku,omitempty"`

	// A list of availability zones denoting the zone in which Nat Gateway should be deployed.
	Zones *[]string `json:"zones,omitempty"`
}

// Response for ListNatGateways API service call.
type NatGatewayListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of Nat Gateways that exists in a resource group.
	Value *[]NatGateway `json:"value,omitempty"`
}

// NatGatewayListResultResponse is the response envelope for operations that return a NatGatewayListResult type.
type NatGatewayListResultResponse struct {
	// Response for ListNatGateways API service call.
	NatGatewayListResult *NatGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NatGatewayPollerResponse is the response envelope for operations that asynchronously return a NatGateway type.
type NatGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NatGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller NatGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Nat Gateway properties.
type NatGatewayPropertiesFormat struct {
	// The idle timeout of the nat gateway.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// READ-ONLY; The provisioning state of the NAT gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// An array of public ip addresses associated with the nat gateway resource.
	PublicIPAddresses *[]SubResource `json:"publicIpAddresses,omitempty"`

	// An array of public ip prefixes associated with the nat gateway resource.
	PublicIPPrefixes *[]SubResource `json:"publicIpPrefixes,omitempty"`

	// READ-ONLY; The resource GUID property of the NAT gateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to the subnets using this nat gateway resource.
	Subnets *[]SubResource `json:"subnets,omitempty" azure:"ro"`
}

// NatGatewayResponse is the response envelope for operations that return a NatGateway type.
type NatGatewayResponse struct {
	// Nat Gateway resource.
	NatGateway *NatGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKU of nat gateway.
type NatGatewaySKU struct {
	// Name of Nat Gateway SKU.
	Name *NatGatewaySKUName `json:"name,omitempty"`
}

// NatGatewaysCreateOrUpdateOptions contains the optional parameters for the NatGateways.CreateOrUpdate method.
type NatGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NatGatewaysDeleteOptions contains the optional parameters for the NatGateways.Delete method.
type NatGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// NatGatewaysGetOptions contains the optional parameters for the NatGateways.Get method.
type NatGatewaysGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NatGatewaysListAllOptions contains the optional parameters for the NatGateways.ListAll method.
type NatGatewaysListAllOptions struct {
	// placeholder for future optional parameters
}

// NatGatewaysListOptions contains the optional parameters for the NatGateways.List method.
type NatGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// NatGatewaysUpdateTagsOptions contains the optional parameters for the NatGateways.UpdateTags method.
type NatGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Rule of type nat.
type NatRule struct {
	FirewallPolicyRule
	// List of destination IP addresses or Service Tags.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of destination ports.
	DestinationPorts *[]string `json:"destinationPorts,omitempty"`

	// Array of FirewallPolicyRuleNetworkProtocols.
	IPProtocols *[]FirewallPolicyRuleNetworkProtocol `json:"ipProtocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`

	// The translated address for this NAT rule.
	TranslatedAddress *string `json:"translatedAddress,omitempty"`

	// The translated FQDN for this NAT rule.
	TranslatedFqdn *string `json:"translatedFqdn,omitempty"`

	// The translated port for this NAT rule.
	TranslatedPort *string `json:"translatedPort,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NatRule.
func (n NatRule) MarshalJSON() ([]byte, error) {
	objectMap := n.FirewallPolicyRule.marshalInternal(FirewallPolicyRuleTypeNatRule)
	if n.DestinationAddresses != nil {
		objectMap["destinationAddresses"] = n.DestinationAddresses
	}
	if n.DestinationPorts != nil {
		objectMap["destinationPorts"] = n.DestinationPorts
	}
	if n.IPProtocols != nil {
		objectMap["ipProtocols"] = n.IPProtocols
	}
	if n.SourceAddresses != nil {
		objectMap["sourceAddresses"] = n.SourceAddresses
	}
	if n.SourceIPGroups != nil {
		objectMap["sourceIpGroups"] = n.SourceIPGroups
	}
	if n.TranslatedAddress != nil {
		objectMap["translatedAddress"] = n.TranslatedAddress
	}
	if n.TranslatedFqdn != nil {
		objectMap["translatedFqdn"] = n.TranslatedFqdn
	}
	if n.TranslatedPort != nil {
		objectMap["translatedPort"] = n.TranslatedPort
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NatRule.
func (n *NatRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destinationAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationAddresses)
			}
			delete(rawMsg, key)
		case "destinationPorts":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationPorts)
			}
			delete(rawMsg, key)
		case "ipProtocols":
			if val != nil {
				err = json.Unmarshal(*val, &n.IPProtocols)
			}
			delete(rawMsg, key)
		case "sourceAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &n.SourceAddresses)
			}
			delete(rawMsg, key)
		case "sourceIpGroups":
			if val != nil {
				err = json.Unmarshal(*val, &n.SourceIPGroups)
			}
			delete(rawMsg, key)
		case "translatedAddress":
			if val != nil {
				err = json.Unmarshal(*val, &n.TranslatedAddress)
			}
			delete(rawMsg, key)
		case "translatedFqdn":
			if val != nil {
				err = json.Unmarshal(*val, &n.TranslatedFqdn)
			}
			delete(rawMsg, key)
		case "translatedPort":
			if val != nil {
				err = json.Unmarshal(*val, &n.TranslatedPort)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return n.FirewallPolicyRule.unmarshalInternal(rawMsg)
}

// Parameters to get network configuration diagnostic.
type NetworkConfigurationDiagnosticParameters struct {
	// List of network configuration diagnostic profiles.
	Profiles *[]NetworkConfigurationDiagnosticProfile `json:"profiles,omitempty"`

	// The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface, VMSS/NetworkInterface and Application
	// Gateway.
	TargetResourceID *string `json:"targetResourceId,omitempty"`

	// Verbosity level.
	VerbosityLevel *VerbosityLevel `json:"verbosityLevel,omitempty"`
}

// Parameters to compare with network configuration.
type NetworkConfigurationDiagnosticProfile struct {
	// Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.
	Destination *string `json:"destination,omitempty"`

	// Traffic destination port. Accepted values are '*' and a single port in the range (0 - 65535).
	DestinationPort *string `json:"destinationPort,omitempty"`

	// The direction of the traffic.
	Direction *Direction `json:"direction,omitempty"`

	// Protocol to be verified on. Accepted values are '*', TCP, UDP.
	Protocol *string `json:"protocol,omitempty"`

	// Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.
	Source *string `json:"source,omitempty"`
}

// Results of network configuration diagnostic on the target resource.
type NetworkConfigurationDiagnosticResponse struct {
	// READ-ONLY; List of network configuration diagnostic results.
	Results *[]NetworkConfigurationDiagnosticResult `json:"results,omitempty" azure:"ro"`
}

// NetworkConfigurationDiagnosticResponsePollerResponse is the response envelope for operations that asynchronously return a NetworkConfigurationDiagnosticResponse
// type.
type NetworkConfigurationDiagnosticResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NetworkConfigurationDiagnosticResponseResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkConfigurationDiagnosticResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkConfigurationDiagnosticResponseResponse is the response envelope for operations that return a NetworkConfigurationDiagnosticResponse type.
type NetworkConfigurationDiagnosticResponseResponse struct {
	// Results of network configuration diagnostic on the target resource.
	NetworkConfigurationDiagnosticResponse *NetworkConfigurationDiagnosticResponse

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Network configuration diagnostic result corresponded to provided traffic query.
type NetworkConfigurationDiagnosticResult struct {
	// Network security group result.
	NetworkSecurityGroupResult *NetworkSecurityGroupResult `json:"networkSecurityGroupResult,omitempty"`

	// Network configuration diagnostic profile.
	Profile *NetworkConfigurationDiagnosticProfile `json:"profile,omitempty"`
}

// Network Intent Policy resource.
type NetworkIntentPolicy struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`
}

// Details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.
type NetworkIntentPolicyConfiguration struct {
	// The name of the Network Intent Policy for storing in target subscription.
	NetworkIntentPolicyName *string `json:"networkIntentPolicyName,omitempty"`

	// Source network intent policy.
	SourceNetworkIntentPolicy *NetworkIntentPolicy `json:"sourceNetworkIntentPolicy,omitempty"`
}

// A network interface in a resource group.
type NetworkInterface struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The extended location of the network interface.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Properties of the network interface.
	Properties *NetworkInterfacePropertiesFormat `json:"properties,omitempty"`
}

// Network interface and its custom security rules.
type NetworkInterfaceAssociation struct {
	// READ-ONLY; Network interface ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// Collection of custom security rules.
	SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`
}

// DNS settings of a network interface.
type NetworkInterfaceDNSSettings struct {
	// READ-ONLY; If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are
	// part of the Availability Set. This property is what is
	// configured on each of those VMs.
	AppliedDNSServers *[]string `json:"appliedDnsServers,omitempty" azure:"ro"`

	// List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with
	// other IPs, it must be the only value in dnsServers
	// collection.
	DNSServers *[]string `json:"dnsServers,omitempty"`

	// Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
	InternalDNSNameLabel *string `json:"internalDnsNameLabel,omitempty"`

	// READ-ONLY; Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating
	// the VM name with the value of
	// internalDomainNameSuffix.
	InternalDomainNameSuffix *string `json:"internalDomainNameSuffix,omitempty" azure:"ro"`

	// READ-ONLY; Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
	InternalFqdn *string `json:"internalFqdn,omitempty" azure:"ro"`
}

// IPConfiguration in a network interface.
type NetworkInterfaceIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Network interface IP configuration properties.
	Properties *NetworkInterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
}

// Response for list ip configurations API service call.
type NetworkInterfaceIPConfigurationListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of ip configurations.
	Value *[]NetworkInterfaceIPConfiguration `json:"value,omitempty"`
}

// NetworkInterfaceIPConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceIPConfigurationListResult type.
type NetworkInterfaceIPConfigurationListResultResponse struct {
	// Response for list ip configurations API service call.
	NetworkInterfaceIPConfigurationListResult *NetworkInterfaceIPConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkConnection properties for the network interface.
type NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties struct {
	// READ-ONLY; List of FQDNs for current private link connection.
	Fqdns *[]string `json:"fqdns,omitempty" azure:"ro"`

	// READ-ONLY; The group ID for current private link connection.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The required member name for current private link connection.
	RequiredMemberName *string `json:"requiredMemberName,omitempty" azure:"ro"`
}

// Properties of IP configuration.
type NetworkInterfaceIPConfigurationPropertiesFormat struct {
	// The reference to ApplicationGatewayBackendAddressPool resource.
	ApplicationGatewayBackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`

	// Application security groups in which the IP configuration is included.
	ApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"applicationSecurityGroups,omitempty"`

	// The reference to LoadBalancerBackendAddressPool resource.
	LoadBalancerBackendAddressPools *[]BackendAddressPool `json:"loadBalancerBackendAddressPools,omitempty"`

	// A list of references of LoadBalancerInboundNatRules.
	LoadBalancerInboundNatRules *[]InboundNatRule `json:"loadBalancerInboundNatRules,omitempty"`

	// Whether this is a primary customer address on the network interface.
	Primary *bool `json:"primary,omitempty"`

	// Private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
	PrivateIPAddressVersion *IPVersion `json:"privateIPAddressVersion,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; PrivateLinkConnection properties for the network interface.
	PrivateLinkConnectionProperties *NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties `json:"privateLinkConnectionProperties,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the network interface IP configuration.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Public IP address bound to the IP configuration.
	PublicIPAddress *PublicIPAddress `json:"publicIPAddress,omitempty"`

	// Subnet bound to the IP configuration.
	Subnet *Subnet `json:"subnet,omitempty"`

	// The reference to Virtual Network Taps.
	VirtualNetworkTaps *[]VirtualNetworkTap `json:"virtualNetworkTaps,omitempty"`
}

// NetworkInterfaceIPConfigurationResponse is the response envelope for operations that return a NetworkInterfaceIPConfiguration type.
type NetworkInterfaceIPConfigurationResponse struct {
	// IPConfiguration in a network interface.
	NetworkInterfaceIPConfiguration *NetworkInterfaceIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceIPConfigurationsGetOptions contains the optional parameters for the NetworkInterfaceIPConfigurations.Get method.
type NetworkInterfaceIPConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfaceIPConfigurationsListOptions contains the optional parameters for the NetworkInterfaceIPConfigurations.List method.
type NetworkInterfaceIPConfigurationsListOptions struct {
	// placeholder for future optional parameters
}

// Response for the ListNetworkInterface API service call.
type NetworkInterfaceListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of network interfaces in a resource group.
	Value *[]NetworkInterface `json:"value,omitempty"`
}

// NetworkInterfaceListResultResponse is the response envelope for operations that return a NetworkInterfaceListResult type.
type NetworkInterfaceListResultResponse struct {
	// Response for the ListNetworkInterface API service call.
	NetworkInterfaceListResult *NetworkInterfaceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for list ip configurations API service call.
type NetworkInterfaceLoadBalancerListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of load balancers.
	Value *[]LoadBalancer `json:"value,omitempty"`
}

// NetworkInterfaceLoadBalancerListResultResponse is the response envelope for operations that return a NetworkInterfaceLoadBalancerListResult type.
type NetworkInterfaceLoadBalancerListResultResponse struct {
	// Response for list ip configurations API service call.
	NetworkInterfaceLoadBalancerListResult *NetworkInterfaceLoadBalancerListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceLoadBalancersListOptions contains the optional parameters for the NetworkInterfaceLoadBalancers.List method.
type NetworkInterfaceLoadBalancersListOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacePollerResponse is the response envelope for operations that asynchronously return a NetworkInterface type.
type NetworkInterfacePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NetworkInterfaceResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkInterfacePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterface properties.
type NetworkInterfacePropertiesFormat struct {
	// The DNS settings in network interface.
	DNSSettings *NetworkInterfaceDNSSettings `json:"dnsSettings,omitempty"`

	// READ-ONLY; A reference to the dscp configuration to which the network interface is linked.
	DscpConfiguration *SubResource `json:"dscpConfiguration,omitempty" azure:"ro"`

	// If the network interface is accelerated networking enabled.
	EnableAcceleratedNetworking *bool `json:"enableAcceleratedNetworking,omitempty"`

	// Indicates whether IP forwarding is enabled on this network interface.
	EnableIPForwarding *bool `json:"enableIPForwarding,omitempty"`

	// READ-ONLY; A list of references to linked BareMetal resources.
	HostedWorkloads *[]string `json:"hostedWorkloads,omitempty" azure:"ro"`

	// A list of IPConfigurations of the network interface.
	IPConfigurations *[]NetworkInterfaceIPConfiguration `json:"ipConfigurations,omitempty"`

	// READ-ONLY; The MAC address of the network interface.
	MacAddress *string `json:"macAddress,omitempty" azure:"ro"`

	// The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup `json:"networkSecurityGroup,omitempty"`

	// READ-ONLY; Whether this is a primary network interface on a virtual machine.
	Primary *bool `json:"primary,omitempty" azure:"ro"`

	// READ-ONLY; A reference to the private endpoint to which the network interface is linked.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the network interface resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the network interface resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// READ-ONLY; A list of TapConfigurations of the network interface.
	TapConfigurations *[]NetworkInterfaceTapConfiguration `json:"tapConfigurations,omitempty" azure:"ro"`

	// READ-ONLY; The reference to a virtual machine.
	VirtualMachine *SubResource `json:"virtualMachine,omitempty" azure:"ro"`
}

// NetworkInterfaceResponse is the response envelope for operations that return a NetworkInterface type.
type NetworkInterfaceResponse struct {
	// A network interface in a resource group.
	NetworkInterface *NetworkInterface

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Tap configuration in a Network Interface.
type NetworkInterfaceTapConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the Virtual Network Tap configuration.
	Properties *NetworkInterfaceTapConfigurationPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Sub Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for list tap configurations API service call.
type NetworkInterfaceTapConfigurationListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of tap configurations.
	Value *[]NetworkInterfaceTapConfiguration `json:"value,omitempty"`
}

// NetworkInterfaceTapConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceTapConfigurationListResult type.
type NetworkInterfaceTapConfigurationListResultResponse struct {
	// Response for list tap configurations API service call.
	NetworkInterfaceTapConfigurationListResult *NetworkInterfaceTapConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceTapConfigurationPollerResponse is the response envelope for operations that asynchronously return a NetworkInterfaceTapConfiguration
// type.
type NetworkInterfaceTapConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NetworkInterfaceTapConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkInterfaceTapConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of Virtual Network Tap configuration.
type NetworkInterfaceTapConfigurationPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the network interface tap configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the Virtual Network Tap resource.
	VirtualNetworkTap *VirtualNetworkTap `json:"virtualNetworkTap,omitempty"`
}

// NetworkInterfaceTapConfigurationResponse is the response envelope for operations that return a NetworkInterfaceTapConfiguration type.
type NetworkInterfaceTapConfigurationResponse struct {
	// Tap configuration in a Network Interface.
	NetworkInterfaceTapConfiguration *NetworkInterfaceTapConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceTapConfigurationsCreateOrUpdateOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.CreateOrUpdate method.
type NetworkInterfaceTapConfigurationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfaceTapConfigurationsDeleteOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.Delete method.
type NetworkInterfaceTapConfigurationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfaceTapConfigurationsGetOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.Get method.
type NetworkInterfaceTapConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfaceTapConfigurationsListOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.List method.
type NetworkInterfaceTapConfigurationsListOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesCreateOrUpdateOptions contains the optional parameters for the NetworkInterfaces.CreateOrUpdate method.
type NetworkInterfacesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesDeleteOptions contains the optional parameters for the NetworkInterfaces.Delete method.
type NetworkInterfacesDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesGetEffectiveRouteTableOptions contains the optional parameters for the NetworkInterfaces.GetEffectiveRouteTable method.
type NetworkInterfacesGetEffectiveRouteTableOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesGetOptions contains the optional parameters for the NetworkInterfaces.Get method.
type NetworkInterfacesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions contains the optional parameters for the NetworkInterfaces.GetVirtualMachineScaleSetIPConfiguration
// method.
type NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions contains the optional parameters for the NetworkInterfaces.GetVirtualMachineScaleSetNetworkInterface
// method.
type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkInterfacesListAllOptions contains the optional parameters for the NetworkInterfaces.ListAll method.
type NetworkInterfacesListAllOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesListEffectiveNetworkSecurityGroupsOptions contains the optional parameters for the NetworkInterfaces.ListEffectiveNetworkSecurityGroups
// method.
type NetworkInterfacesListEffectiveNetworkSecurityGroupsOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesListOptions contains the optional parameters for the NetworkInterfaces.List method.
type NetworkInterfacesListOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetIPConfigurations
// method.
type NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetNetworkInterfaces
// method.
type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetVMNetworkInterfaces
// method.
type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesUpdateTagsOptions contains the optional parameters for the NetworkInterfaces.UpdateTags method.
type NetworkInterfacesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientCheckDNSNameAvailabilityOptions contains the optional parameters for the NetworkManagementClient.CheckDNSNameAvailability method.
type NetworkManagementClientCheckDNSNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientDeleteBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.DeleteBastionShareableLink
// method.
type NetworkManagementClientDeleteBastionShareableLinkOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientDisconnectActiveSessionsOptions contains the optional parameters for the NetworkManagementClient.DisconnectActiveSessions method.
type NetworkManagementClientDisconnectActiveSessionsOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileOptions contains the optional parameters for the NetworkManagementClient.Generatevirtualwanvpnserverconfigurationvpnprofile
// method.
type NetworkManagementClientGeneratevirtualwanvpnserverconfigurationvpnprofileOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientGetActiveSessionsOptions contains the optional parameters for the NetworkManagementClient.GetActiveSessions method.
type NetworkManagementClientGetActiveSessionsOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientGetBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.GetBastionShareableLink method.
type NetworkManagementClientGetBastionShareableLinkOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientPutBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.PutBastionShareableLink method.
type NetworkManagementClientPutBastionShareableLinkOptions struct {
	// placeholder for future optional parameters
}

// NetworkManagementClientSupportedSecurityProvidersOptions contains the optional parameters for the NetworkManagementClient.SupportedSecurityProviders
// method.
type NetworkManagementClientSupportedSecurityProvidersOptions struct {
	// placeholder for future optional parameters
}

// Network profile resource.
type NetworkProfile struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Network profile properties.
	Properties *NetworkProfilePropertiesFormat `json:"properties,omitempty"`
}

// Response for ListNetworkProfiles API service call.
type NetworkProfileListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of network profiles that exist in a resource group.
	Value *[]NetworkProfile `json:"value,omitempty"`
}

// NetworkProfileListResultResponse is the response envelope for operations that return a NetworkProfileListResult type.
type NetworkProfileListResultResponse struct {
	// Response for ListNetworkProfiles API service call.
	NetworkProfileListResult *NetworkProfileListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Network profile properties.
type NetworkProfilePropertiesFormat struct {
	// List of chid container network interface configurations.
	ContainerNetworkInterfaceConfigurations *[]ContainerNetworkInterfaceConfiguration `json:"containerNetworkInterfaceConfigurations,omitempty"`

	// READ-ONLY; List of child container network interfaces.
	ContainerNetworkInterfaces *[]ContainerNetworkInterface `json:"containerNetworkInterfaces,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the network profile resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the network profile resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// NetworkProfileResponse is the response envelope for operations that return a NetworkProfile type.
type NetworkProfileResponse struct {
	// Network profile resource.
	NetworkProfile *NetworkProfile

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkProfilesCreateOrUpdateOptions contains the optional parameters for the NetworkProfiles.CreateOrUpdate method.
type NetworkProfilesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkProfilesDeleteOptions contains the optional parameters for the NetworkProfiles.Delete method.
type NetworkProfilesDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkProfilesGetOptions contains the optional parameters for the NetworkProfiles.Get method.
type NetworkProfilesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkProfilesListAllOptions contains the optional parameters for the NetworkProfiles.ListAll method.
type NetworkProfilesListAllOptions struct {
	// placeholder for future optional parameters
}

// NetworkProfilesListOptions contains the optional parameters for the NetworkProfiles.List method.
type NetworkProfilesListOptions struct {
	// placeholder for future optional parameters
}

// NetworkProfilesUpdateTagsOptions contains the optional parameters for the NetworkProfiles.UpdateTags method.
type NetworkProfilesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Rule of type network.
type NetworkRule struct {
	FirewallPolicyRule
	// List of destination IP addresses or Service Tags.
	DestinationAddresses *[]string `json:"destinationAddresses,omitempty"`

	// List of destination FQDNs.
	DestinationFqdns *[]string `json:"destinationFqdns,omitempty"`

	// List of destination IpGroups for this rule.
	DestinationIPGroups *[]string `json:"destinationIpGroups,omitempty"`

	// List of destination ports.
	DestinationPorts *[]string `json:"destinationPorts,omitempty"`

	// Array of FirewallPolicyRuleNetworkProtocols.
	IPProtocols *[]FirewallPolicyRuleNetworkProtocol `json:"ipProtocols,omitempty"`

	// List of source IP addresses for this rule.
	SourceAddresses *[]string `json:"sourceAddresses,omitempty"`

	// List of source IpGroups for this rule.
	SourceIPGroups *[]string `json:"sourceIpGroups,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkRule.
func (n NetworkRule) MarshalJSON() ([]byte, error) {
	objectMap := n.FirewallPolicyRule.marshalInternal(FirewallPolicyRuleTypeNetworkRule)
	if n.DestinationAddresses != nil {
		objectMap["destinationAddresses"] = n.DestinationAddresses
	}
	if n.DestinationFqdns != nil {
		objectMap["destinationFqdns"] = n.DestinationFqdns
	}
	if n.DestinationIPGroups != nil {
		objectMap["destinationIpGroups"] = n.DestinationIPGroups
	}
	if n.DestinationPorts != nil {
		objectMap["destinationPorts"] = n.DestinationPorts
	}
	if n.IPProtocols != nil {
		objectMap["ipProtocols"] = n.IPProtocols
	}
	if n.SourceAddresses != nil {
		objectMap["sourceAddresses"] = n.SourceAddresses
	}
	if n.SourceIPGroups != nil {
		objectMap["sourceIpGroups"] = n.SourceIPGroups
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NetworkRule.
func (n *NetworkRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destinationAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationAddresses)
			}
			delete(rawMsg, key)
		case "destinationFqdns":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationFqdns)
			}
			delete(rawMsg, key)
		case "destinationIpGroups":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationIPGroups)
			}
			delete(rawMsg, key)
		case "destinationPorts":
			if val != nil {
				err = json.Unmarshal(*val, &n.DestinationPorts)
			}
			delete(rawMsg, key)
		case "ipProtocols":
			if val != nil {
				err = json.Unmarshal(*val, &n.IPProtocols)
			}
			delete(rawMsg, key)
		case "sourceAddresses":
			if val != nil {
				err = json.Unmarshal(*val, &n.SourceAddresses)
			}
			delete(rawMsg, key)
		case "sourceIpGroups":
			if val != nil {
				err = json.Unmarshal(*val, &n.SourceIPGroups)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return n.FirewallPolicyRule.unmarshalInternal(rawMsg)
}

// NetworkSecurityGroup resource.
type NetworkSecurityGroup struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the network security group.
	Properties *NetworkSecurityGroupPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListNetworkSecurityGroups API service call.
type NetworkSecurityGroupListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of NetworkSecurityGroup resources.
	Value *[]NetworkSecurityGroup `json:"value,omitempty"`
}

// NetworkSecurityGroupListResultResponse is the response envelope for operations that return a NetworkSecurityGroupListResult type.
type NetworkSecurityGroupListResultResponse struct {
	// Response for ListNetworkSecurityGroups API service call.
	NetworkSecurityGroupListResult *NetworkSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a NetworkSecurityGroup type.
type NetworkSecurityGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NetworkSecurityGroupResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkSecurityGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Network Security Group resource.
type NetworkSecurityGroupPropertiesFormat struct {
	// READ-ONLY; The default security rules of network security group.
	DefaultSecurityRules *[]SecurityRule `json:"defaultSecurityRules,omitempty" azure:"ro"`

	// READ-ONLY; A collection of references to flow log resources.
	FlowLogs *[]FlowLog `json:"flowLogs,omitempty" azure:"ro"`

	// READ-ONLY; A collection of references to network interfaces.
	NetworkInterfaces *[]NetworkInterface `json:"networkInterfaces,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the network security group resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the network security group resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// A collection of security rules of the network security group.
	SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`

	// READ-ONLY; A collection of references to subnets.
	Subnets *[]Subnet `json:"subnets,omitempty" azure:"ro"`
}

// NetworkSecurityGroupResponse is the response envelope for operations that return a NetworkSecurityGroup type.
type NetworkSecurityGroupResponse struct {
	// NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Network configuration diagnostic result corresponded provided traffic query.
type NetworkSecurityGroupResult struct {
	// READ-ONLY; List of results network security groups diagnostic.
	EvaluatedNetworkSecurityGroups *[]EvaluatedNetworkSecurityGroup `json:"evaluatedNetworkSecurityGroups,omitempty" azure:"ro"`

	// The network traffic is allowed or denied.
	SecurityRuleAccessResult *SecurityRuleAccess `json:"securityRuleAccessResult,omitempty"`
}

// NetworkSecurityGroupsCreateOrUpdateOptions contains the optional parameters for the NetworkSecurityGroups.CreateOrUpdate method.
type NetworkSecurityGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityGroupsDeleteOptions contains the optional parameters for the NetworkSecurityGroups.Delete method.
type NetworkSecurityGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityGroupsGetOptions contains the optional parameters for the NetworkSecurityGroups.Get method.
type NetworkSecurityGroupsGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkSecurityGroupsListAllOptions contains the optional parameters for the NetworkSecurityGroups.ListAll method.
type NetworkSecurityGroupsListAllOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityGroupsListOptions contains the optional parameters for the NetworkSecurityGroups.List method.
type NetworkSecurityGroupsListOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityGroupsUpdateTagsOptions contains the optional parameters for the NetworkSecurityGroups.UpdateTags method.
type NetworkSecurityGroupsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Network security rules evaluation result.
type NetworkSecurityRulesEvaluationResult struct {
	// Value indicating whether destination is matched.
	DestinationMatched *bool `json:"destinationMatched,omitempty"`

	// Value indicating whether destination port is matched.
	DestinationPortMatched *bool `json:"destinationPortMatched,omitempty"`

	// Name of the network security rule.
	Name *string `json:"name,omitempty"`

	// Value indicating whether protocol is matched.
	ProtocolMatched *bool `json:"protocolMatched,omitempty"`

	// Value indicating whether source is matched.
	SourceMatched *bool `json:"sourceMatched,omitempty"`

	// Value indicating whether source port is matched.
	SourcePortMatched *bool `json:"sourcePortMatched,omitempty"`
}

// NetworkVirtualAppliance Resource.
type NetworkVirtualAppliance struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The service principal that has read access to cloud-init and config blob.
	IDentity *ManagedServiceIDentity `json:"identity,omitempty"`

	// Properties of the Network Virtual Appliance.
	Properties *NetworkVirtualAppliancePropertiesFormat `json:"properties,omitempty"`
}

// Response for ListNetworkVirtualAppliances API service call.
type NetworkVirtualApplianceListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Network Virtual Appliances.
	Value *[]NetworkVirtualAppliance `json:"value,omitempty"`
}

// NetworkVirtualApplianceListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceListResult type.
type NetworkVirtualApplianceListResultResponse struct {
	// Response for ListNetworkVirtualAppliances API service call.
	NetworkVirtualApplianceListResult *NetworkVirtualApplianceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualAppliancePollerResponse is the response envelope for operations that asynchronously return a NetworkVirtualAppliance type.
type NetworkVirtualAppliancePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NetworkVirtualApplianceResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkVirtualAppliancePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Network Virtual Appliance definition.
type NetworkVirtualAppliancePropertiesFormat struct {
	// READ-ONLY; Address Prefix.
	AddressPrefix *string `json:"addressPrefix,omitempty" azure:"ro"`

	// BootStrapConfigurationBlobs storage URLs.
	BootStrapConfigurationBlobs *[]string `json:"bootStrapConfigurationBlobs,omitempty"`

	// CloudInitConfiguration string in plain text.
	CloudInitConfiguration *string `json:"cloudInitConfiguration,omitempty"`

	// CloudInitConfigurationBlob storage URLs.
	CloudInitConfigurationBlobs *[]string `json:"cloudInitConfigurationBlobs,omitempty"`

	// READ-ONLY; List of references to InboundSecurityRules.
	InboundSecurityRules *[]SubResource `json:"inboundSecurityRules,omitempty" azure:"ro"`

	// Network Virtual Appliance SKU.
	NvaSKU *VirtualApplianceSKUProperties `json:"nvaSku,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// VirtualAppliance ASN.
	VirtualApplianceAsn *int64 `json:"virtualApplianceAsn,omitempty"`

	// READ-ONLY; List of Virtual Appliance Network Interfaces.
	VirtualApplianceNics *[]VirtualApplianceNicProperties `json:"virtualApplianceNics,omitempty" azure:"ro"`

	// READ-ONLY; List of references to VirtualApplianceSite.
	VirtualApplianceSites *[]SubResource `json:"virtualApplianceSites,omitempty" azure:"ro"`

	// The Virtual Hub where Network Virtual Appliance is being deployed.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`
}

// NetworkVirtualApplianceResponse is the response envelope for operations that return a NetworkVirtualAppliance type.
type NetworkVirtualApplianceResponse struct {
	// NetworkVirtualAppliance Resource.
	NetworkVirtualAppliance *NetworkVirtualAppliance

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Definition of the NetworkVirtualApplianceSkus resource.
type NetworkVirtualApplianceSKU struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// NetworkVirtualApplianceSku properties.
	Properties *NetworkVirtualApplianceSKUPropertiesFormat `json:"properties,omitempty"`
}

// List of available Sku and instances.
type NetworkVirtualApplianceSKUInstances struct {
	// READ-ONLY; Instance Count.
	InstanceCount *int32 `json:"instanceCount,omitempty" azure:"ro"`

	// READ-ONLY; Scale Unit.
	ScaleUnit *string `json:"scaleUnit,omitempty" azure:"ro"`
}

// Response for ListNetworkVirtualApplianceSkus API service call.
type NetworkVirtualApplianceSKUListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Network Virtual Appliance Skus that are available.
	Value *[]NetworkVirtualApplianceSKU `json:"value,omitempty"`
}

// NetworkVirtualApplianceSKUListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSKUListResult type.
type NetworkVirtualApplianceSKUListResultResponse struct {
	// Response for ListNetworkVirtualApplianceSkus API service call.
	NetworkVirtualApplianceSKUListResult *NetworkVirtualApplianceSKUListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties specific to NetworkVirtualApplianceSkus.
type NetworkVirtualApplianceSKUPropertiesFormat struct {
	// The list of scale units available.
	AvailableScaleUnits *[]NetworkVirtualApplianceSKUInstances `json:"availableScaleUnits,omitempty"`

	// READ-ONLY; Available Network Virtual Appliance versions.
	AvailableVersions *[]string `json:"availableVersions,omitempty" azure:"ro"`

	// READ-ONLY; Network Virtual Appliance Sku vendor.
	Vendor *string `json:"vendor,omitempty" azure:"ro"`
}

// NetworkVirtualApplianceSKUResponse is the response envelope for operations that return a NetworkVirtualApplianceSKU type.
type NetworkVirtualApplianceSKUResponse struct {
	// Definition of the NetworkVirtualApplianceSkus resource.
	NetworkVirtualApplianceSKU *NetworkVirtualApplianceSKU

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for ListNetworkVirtualApplianceSites API service call.
type NetworkVirtualApplianceSiteListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Network Virtual Appliance sites.
	Value *[]VirtualApplianceSite `json:"value,omitempty"`
}

// NetworkVirtualApplianceSiteListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSiteListResult type.
type NetworkVirtualApplianceSiteListResultResponse struct {
	// Response for ListNetworkVirtualApplianceSites API service call.
	NetworkVirtualApplianceSiteListResult *NetworkVirtualApplianceSiteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualAppliancesCreateOrUpdateOptions contains the optional parameters for the NetworkVirtualAppliances.CreateOrUpdate method.
type NetworkVirtualAppliancesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkVirtualAppliancesDeleteOptions contains the optional parameters for the NetworkVirtualAppliances.Delete method.
type NetworkVirtualAppliancesDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkVirtualAppliancesGetOptions contains the optional parameters for the NetworkVirtualAppliances.Get method.
type NetworkVirtualAppliancesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// NetworkVirtualAppliancesListByResourceGroupOptions contains the optional parameters for the NetworkVirtualAppliances.ListByResourceGroup method.
type NetworkVirtualAppliancesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkVirtualAppliancesListOptions contains the optional parameters for the NetworkVirtualAppliances.List method.
type NetworkVirtualAppliancesListOptions struct {
	// placeholder for future optional parameters
}

// NetworkVirtualAppliancesUpdateTagsOptions contains the optional parameters for the NetworkVirtualAppliances.UpdateTags method.
type NetworkVirtualAppliancesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Network watcher in a resource group.
type NetworkWatcher struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the network watcher.
	Properties *NetworkWatcherPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListNetworkWatchers API service call.
type NetworkWatcherListResult struct {
	// List of network watcher resources.
	Value *[]NetworkWatcher `json:"value,omitempty"`
}

// NetworkWatcherListResultResponse is the response envelope for operations that return a NetworkWatcherListResult type.
type NetworkWatcherListResultResponse struct {
	// Response for ListNetworkWatchers API service call.
	NetworkWatcherListResult *NetworkWatcherListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The network watcher properties.
type NetworkWatcherPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the network watcher resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// NetworkWatcherResponse is the response envelope for operations that return a NetworkWatcher type.
type NetworkWatcherResponse struct {
	// Network watcher in a resource group.
	NetworkWatcher *NetworkWatcher

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkWatchersCheckConnectivityOptions contains the optional parameters for the NetworkWatchers.CheckConnectivity method.
type NetworkWatchersCheckConnectivityOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersCreateOrUpdateOptions contains the optional parameters for the NetworkWatchers.CreateOrUpdate method.
type NetworkWatchersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersDeleteOptions contains the optional parameters for the NetworkWatchers.Delete method.
type NetworkWatchersDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetAzureReachabilityReportOptions contains the optional parameters for the NetworkWatchers.GetAzureReachabilityReport method.
type NetworkWatchersGetAzureReachabilityReportOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetFlowLogStatusOptions contains the optional parameters for the NetworkWatchers.GetFlowLogStatus method.
type NetworkWatchersGetFlowLogStatusOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetNetworkConfigurationDiagnosticOptions contains the optional parameters for the NetworkWatchers.GetNetworkConfigurationDiagnostic method.
type NetworkWatchersGetNetworkConfigurationDiagnosticOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetNextHopOptions contains the optional parameters for the NetworkWatchers.GetNextHop method.
type NetworkWatchersGetNextHopOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetOptions contains the optional parameters for the NetworkWatchers.Get method.
type NetworkWatchersGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetTopologyOptions contains the optional parameters for the NetworkWatchers.GetTopology method.
type NetworkWatchersGetTopologyOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetTroubleshootingOptions contains the optional parameters for the NetworkWatchers.GetTroubleshooting method.
type NetworkWatchersGetTroubleshootingOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetTroubleshootingResultOptions contains the optional parameters for the NetworkWatchers.GetTroubleshootingResult method.
type NetworkWatchersGetTroubleshootingResultOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersGetVMSecurityRulesOptions contains the optional parameters for the NetworkWatchers.GetVMSecurityRules method.
type NetworkWatchersGetVMSecurityRulesOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersListAllOptions contains the optional parameters for the NetworkWatchers.ListAll method.
type NetworkWatchersListAllOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersListAvailableProvidersOptions contains the optional parameters for the NetworkWatchers.ListAvailableProviders method.
type NetworkWatchersListAvailableProvidersOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersListOptions contains the optional parameters for the NetworkWatchers.List method.
type NetworkWatchersListOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersSetFlowLogConfigurationOptions contains the optional parameters for the NetworkWatchers.SetFlowLogConfiguration method.
type NetworkWatchersSetFlowLogConfigurationOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersUpdateTagsOptions contains the optional parameters for the NetworkWatchers.UpdateTags method.
type NetworkWatchersUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// NetworkWatchersVerifyIPFlowOptions contains the optional parameters for the NetworkWatchers.VerifyIPFlow method.
type NetworkWatchersVerifyIPFlowOptions struct {
	// placeholder for future optional parameters
}

// Parameters that define the source and destination endpoint.
type NextHopParameters struct {
	// The destination IP address.
	DestinationIPAddress *string `json:"destinationIPAddress,omitempty"`

	// The source IP address.
	SourceIPAddress *string `json:"sourceIPAddress,omitempty"`

	// The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified. Otherwise optional).
	TargetNicResourceID *string `json:"targetNicResourceId,omitempty"`

	// The resource identifier of the target resource against which the action is to be performed.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// The information about next hop from the specified VM.
type NextHopResult struct {
	// Next hop IP Address.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`

	// Next hop type.
	NextHopType *NextHopType `json:"nextHopType,omitempty"`

	// The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created
	// routes then this field will be the string
	// 'System Route'.
	RouteTableID *string `json:"routeTableId,omitempty"`
}

// NextHopResultPollerResponse is the response envelope for operations that asynchronously return a NextHopResult type.
type NextHopResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*NextHopResultResponse, error)

	// Poller contains an initialized poller.
	Poller NextHopResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NextHopResultResponse is the response envelope for operations that return a NextHopResult type.
type NextHopResultResponse struct {
	// The information about next hop from the specified VM.
	NextHopResult *NextHopResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Office365 breakout categories.
type O365BreakOutCategoryPolicies struct {
	// Flag to control allow category.
	Allow *bool `json:"allow,omitempty"`

	// Flag to control default category.
	Default *bool `json:"default,omitempty"`

	// Flag to control optimize category.
	Optimize *bool `json:"optimize,omitempty"`
}

// The Office365 breakout policy.
type O365PolicyProperties struct {
	// Office365 breakout categories.
	BreakOutCategories *O365BreakOutCategoryPolicies `json:"breakOutCategories,omitempty"`
}

// Network Virtual Appliance Sku Properties.
type Office365PolicyProperties struct {
	// Office 365 breakout categories.
	BreakOutCategories *BreakOutCategoryPolicies `json:"breakOutCategories,omitempty"`
}

// Network REST API operation definition.
type Operation struct {
	// Display metadata associated with the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`

	// Origin of the operation.
	Origin *string `json:"origin,omitempty"`

	// Operation properties format.
	Properties *OperationPropertiesFormat `json:"properties,omitempty"`
}

// Display metadata associated with the operation.
type OperationDisplay struct {
	// Description of the operation.
	Description *string `json:"description,omitempty"`

	// Type of the operation: get, read, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft Network.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Network operations supported by the Network resource provider.
	Value *[]Operation `json:"value,omitempty"`
}

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse struct {
	// Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.
	OperationListResult *OperationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Description of operation properties format.
type OperationPropertiesFormat struct {
	// Specification of the service.
	ServiceSpecification *OperationPropertiesFormatServiceSpecification `json:"serviceSpecification,omitempty"`
}

// Specification of the service.
type OperationPropertiesFormatServiceSpecification struct {
	// Operation log specification.
	LogSpecifications *[]LogSpecification `json:"logSpecifications,omitempty"`

	// Operation service specification.
	MetricSpecifications *[]MetricSpecification `json:"metricSpecifications,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Outbound rule of the load balancer.
type OutboundRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer outbound rule.
	Properties *OutboundRulePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Outbound rule of the load balancer.
type OutboundRulePropertiesFormat struct {
	// The number of outbound ports to be used for NAT.
	AllocatedOutboundPorts *int32 `json:"allocatedOutboundPorts,omitempty"`

	// A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool *SubResource `json:"backendAddressPool,omitempty"`

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to
	// TCP.
	EnableTCPReset *bool `json:"enableTcpReset,omitempty"`

	// The Frontend IP addresses of the load balancer.
	FrontendIPConfigurations *[]SubResource `json:"frontendIPConfigurations,omitempty"`

	// The timeout for the TCP idle connection.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// The protocol for the outbound rule in load balancer.
	Protocol *LoadBalancerOutboundRuleProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the outbound rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// OutboundRuleResponse is the response envelope for operations that return a OutboundRule type.
type OutboundRuleResponse struct {
	// Outbound rule of the load balancer.
	OutboundRule *OutboundRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Allow to exclude some variable satisfy the condition for the WAF check.
type OwaspCrsExclusionEntry struct {
	// The variable to be excluded.
	MatchVariable *OwaspCrsExclusionEntryMatchVariable `json:"matchVariable,omitempty"`

	// When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
	Selector *string `json:"selector,omitempty"`

	// When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
	SelectorMatchOperator *OwaspCrsExclusionEntrySelectorMatchOperator `json:"selectorMatchOperator,omitempty"`
}

// P2SConnectionConfiguration Resource.
type P2SConnectionConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the P2S connection configuration.
	Properties *P2SConnectionConfigurationProperties `json:"properties,omitempty"`
}

// Parameters for P2SConnectionConfiguration.
type P2SConnectionConfigurationProperties struct {
	// Flag indicating whether the enable internet security flag is turned on for the P2S Connections or not.
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty"`

	// READ-ONLY; The provisioning state of the P2SConnectionConfiguration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration `json:"routingConfiguration,omitempty"`

	// The reference to the address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`
}

// P2S Vpn connection detailed health written to sas url.
type P2SVpnConnectionHealth struct {
	// Returned sas url of the blob to which the p2s vpn connection detailed health will be written.
	SasURL *string `json:"sasUrl,omitempty"`
}

// P2SVpnConnectionHealthPollerResponse is the response envelope for operations that asynchronously return a P2SVpnConnectionHealth type.
type P2SVpnConnectionHealthPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*P2SVpnConnectionHealthResponse, error)

	// Poller contains an initialized poller.
	Poller P2SVpnConnectionHealthPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of P2S Vpn connection health request.
type P2SVpnConnectionHealthRequest struct {
	// The sas-url to download the P2S Vpn connection health detail.
	OutputBlobSasURL *string `json:"outputBlobSasUrl,omitempty"`

	// The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for.
	VpnUserNamesFilter *[]string `json:"vpnUserNamesFilter,omitempty"`
}

// P2SVpnConnectionHealthResponse is the response envelope for operations that return a P2SVpnConnectionHealth type.
type P2SVpnConnectionHealthResponse struct {
	// P2S Vpn connection detailed health written to sas url.
	P2SVpnConnectionHealth *P2SVpnConnectionHealth

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of p2s vpn connections to be disconnected.
type P2SVpnConnectionRequest struct {
	// List of p2s vpn connection Ids.
	VpnConnectionIDs *[]string `json:"vpnConnectionIds,omitempty"`
}

// P2SVpnGateway Resource.
type P2SVpnGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the P2SVpnGateway.
	Properties *P2SVpnGatewayProperties `json:"properties,omitempty"`
}

// P2SVpnGatewayPollerResponse is the response envelope for operations that asynchronously return a P2SVpnGateway type.
type P2SVpnGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*P2SVpnGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller P2SVpnGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for P2SVpnGateway.
type P2SVpnGatewayProperties struct {
	// List of all customer specified DNS servers IP addresses.
	CustomDNSServers *[]string `json:"customDnsServers,omitempty"`

	// Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
	IsRoutingPreferenceInternet *bool `json:"isRoutingPreferenceInternet,omitempty"`

	// List of all p2s connection configurations of the gateway.
	P2SConnectionConfigurations *[]P2SConnectionConfiguration `json:"p2SConnectionConfigurations,omitempty"`

	// READ-ONLY; The provisioning state of the P2S VPN gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`

	// READ-ONLY; All P2S VPN clients' connection health status.
	VpnClientConnectionHealth *VpnClientConnectionHealth `json:"vpnClientConnectionHealth,omitempty" azure:"ro"`

	// The scale unit for this p2s vpn gateway.
	VpnGatewayScaleUnit *int32 `json:"vpnGatewayScaleUnit,omitempty"`

	// The VpnServerConfiguration to which the p2sVpnGateway is attached to.
	VpnServerConfiguration *SubResource `json:"vpnServerConfiguration,omitempty"`
}

// P2SVpnGatewayResponse is the response envelope for operations that return a P2SVpnGateway type.
type P2SVpnGatewayResponse struct {
	// P2SVpnGateway Resource.
	P2SVpnGateway *P2SVpnGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// P2SVpnGatewaysCreateOrUpdateOptions contains the optional parameters for the P2SVpnGateways.CreateOrUpdate method.
type P2SVpnGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysDeleteOptions contains the optional parameters for the P2SVpnGateways.Delete method.
type P2SVpnGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysDisconnectP2SVpnConnectionsOptions contains the optional parameters for the P2SVpnGateways.DisconnectP2SVpnConnections method.
type P2SVpnGatewaysDisconnectP2SVpnConnectionsOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysGenerateVpnProfileOptions contains the optional parameters for the P2SVpnGateways.GenerateVpnProfile method.
type P2SVpnGatewaysGenerateVpnProfileOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysGetOptions contains the optional parameters for the P2SVpnGateways.Get method.
type P2SVpnGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOptions contains the optional parameters for the P2SVpnGateways.GetP2SVpnConnectionHealthDetailed method.
type P2SVpnGatewaysGetP2SVpnConnectionHealthDetailedOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysGetP2SVpnConnectionHealthOptions contains the optional parameters for the P2SVpnGateways.GetP2SVpnConnectionHealth method.
type P2SVpnGatewaysGetP2SVpnConnectionHealthOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysListByResourceGroupOptions contains the optional parameters for the P2SVpnGateways.ListByResourceGroup method.
type P2SVpnGatewaysListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysListOptions contains the optional parameters for the P2SVpnGateways.List method.
type P2SVpnGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysResetOptions contains the optional parameters for the P2SVpnGateways.Reset method.
type P2SVpnGatewaysResetOptions struct {
	// placeholder for future optional parameters
}

// P2SVpnGatewaysUpdateTagsOptions contains the optional parameters for the P2SVpnGateways.UpdateTags method.
type P2SVpnGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Vpn Client Parameters for package generation.
type P2SVpnProfileParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod `json:"authenticationMethod,omitempty"`
}

// Parameters that define the create packet capture operation.
type PacketCapture struct {
	// Properties of the packet capture.
	Properties *PacketCaptureParameters `json:"properties,omitempty"`
}

// Filter that is applied to packet capture request. Multiple filters can be applied.
type PacketCaptureFilter struct {
	// Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5"? for multiple
	// entries. Multiple ranges not currently
	// supported. Mixing ranges with multiple entries not currently supported. Default = null.
	LocalIPAddress *string `json:"localIPAddress,omitempty"`

	// Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently supported.
	// Mixing ranges with multiple entries not
	// currently supported. Default = null.
	LocalPort *string `json:"localPort,omitempty"`

	// Protocol to be filtered on.
	Protocol *PcProtocol `json:"protocol,omitempty"`

	// Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range. "127.0.0.1;127.0.0.5;" for multiple
	// entries. Multiple ranges not currently
	// supported. Mixing ranges with multiple entries not currently supported. Default = null.
	RemoteIPAddress *string `json:"remoteIPAddress,omitempty"`

	// Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple ranges not currently
	// supported. Mixing ranges with multiple entries not
	// currently supported. Default = null.
	RemotePort *string `json:"remotePort,omitempty"`
}

// List of packet capture sessions.
type PacketCaptureListResult struct {
	// Information about packet capture sessions.
	Value *[]PacketCaptureResult `json:"value,omitempty"`
}

// PacketCaptureListResultResponse is the response envelope for operations that return a PacketCaptureListResult type.
type PacketCaptureListResultResponse struct {
	// List of packet capture sessions.
	PacketCaptureListResult *PacketCaptureListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters that define the create packet capture operation.
type PacketCaptureParameters struct {
	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int64 `json:"bytesToCapturePerPacket,omitempty"`

	// A list of packet capture filters.
	Filters *[]PacketCaptureFilter `json:"filters,omitempty"`

	// The storage location for a packet capture session.
	StorageLocation *PacketCaptureStorageLocation `json:"storageLocation,omitempty"`

	// The ID of the targeted resource, only VM is currently supported.
	Target *string `json:"target,omitempty"`

	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int32 `json:"timeLimitInSeconds,omitempty"`

	// Maximum size of the capture output.
	TotalBytesPerSession *int64 `json:"totalBytesPerSession,omitempty"`
}

// Status of packet capture session.
type PacketCaptureQueryStatusResult struct {
	// The start time of the packet capture session.
	CaptureStartTime *time.Time `json:"captureStartTime,omitempty"`

	// The ID of the packet capture resource.
	ID *string `json:"id,omitempty"`

	// The name of the packet capture resource.
	Name *string `json:"name,omitempty"`

	// List of errors of packet capture session.
	PacketCaptureError *[]PcError `json:"packetCaptureError,omitempty"`

	// The status of the packet capture session.
	PacketCaptureStatus *PcStatus `json:"packetCaptureStatus,omitempty"`

	// The reason the current packet capture session was stopped.
	StopReason *string `json:"stopReason,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PacketCaptureQueryStatusResult.
func (p PacketCaptureQueryStatusResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if p.CaptureStartTime != nil {
		objectMap["captureStartTime"] = (*timeRFC3339)(p.CaptureStartTime)
	}
	if p.ID != nil {
		objectMap["id"] = p.ID
	}
	if p.Name != nil {
		objectMap["name"] = p.Name
	}
	if p.PacketCaptureError != nil {
		objectMap["packetCaptureError"] = p.PacketCaptureError
	}
	if p.PacketCaptureStatus != nil {
		objectMap["packetCaptureStatus"] = p.PacketCaptureStatus
	}
	if p.StopReason != nil {
		objectMap["stopReason"] = p.StopReason
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PacketCaptureQueryStatusResult.
func (p *PacketCaptureQueryStatusResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "captureStartTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				p.CaptureStartTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "id":
			if val != nil {
				err = json.Unmarshal(*val, &p.ID)
			}
			delete(rawMsg, key)
		case "name":
			if val != nil {
				err = json.Unmarshal(*val, &p.Name)
			}
			delete(rawMsg, key)
		case "packetCaptureError":
			if val != nil {
				err = json.Unmarshal(*val, &p.PacketCaptureError)
			}
			delete(rawMsg, key)
		case "packetCaptureStatus":
			if val != nil {
				err = json.Unmarshal(*val, &p.PacketCaptureStatus)
			}
			delete(rawMsg, key)
		case "stopReason":
			if val != nil {
				err = json.Unmarshal(*val, &p.StopReason)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PacketCaptureQueryStatusResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PacketCaptureQueryStatusResultResponse, error)

	// Poller contains an initialized poller.
	Poller PacketCaptureQueryStatusResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureQueryStatusResultResponse is the response envelope for operations that return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultResponse struct {
	// Status of packet capture session.
	PacketCaptureQueryStatusResult *PacketCaptureQueryStatusResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Information about packet capture session.
type PacketCaptureResult struct {
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// READ-ONLY; ID of the packet capture operation.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the packet capture session.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the packet capture result.
	Properties *PacketCaptureResultProperties `json:"properties,omitempty"`
}

// PacketCaptureResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureResult type.
type PacketCaptureResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PacketCaptureResultResponse, error)

	// Poller contains an initialized poller.
	Poller PacketCaptureResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The properties of a packet capture session.
type PacketCaptureResultProperties struct {
	PacketCaptureParameters
	// READ-ONLY; The provisioning state of the packet capture session.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PacketCaptureResultResponse is the response envelope for operations that return a PacketCaptureResult type.
type PacketCaptureResultResponse struct {
	// Information about packet capture session.
	PacketCaptureResult *PacketCaptureResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The storage location for a packet capture session.
type PacketCaptureStorageLocation struct {
	// A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures.
	// Required if no storage ID is provided, otherwise
	// optional.
	FilePath *string `json:"filePath,omitempty"`

	// The ID of the storage account to save the packet capture session. Required if no local file path is provided.
	StorageID *string `json:"storageId,omitempty"`

	// The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.
	StoragePath *string `json:"storagePath,omitempty"`
}

// PacketCapturesCreateOptions contains the optional parameters for the PacketCaptures.Create method.
type PacketCapturesCreateOptions struct {
	// placeholder for future optional parameters
}

// PacketCapturesDeleteOptions contains the optional parameters for the PacketCaptures.Delete method.
type PacketCapturesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PacketCapturesGetOptions contains the optional parameters for the PacketCaptures.Get method.
type PacketCapturesGetOptions struct {
	// placeholder for future optional parameters
}

// PacketCapturesGetStatusOptions contains the optional parameters for the PacketCaptures.GetStatus method.
type PacketCapturesGetStatusOptions struct {
	// placeholder for future optional parameters
}

// PacketCapturesListOptions contains the optional parameters for the PacketCaptures.List method.
type PacketCapturesListOptions struct {
	// placeholder for future optional parameters
}

// PacketCapturesStopOptions contains the optional parameters for the PacketCaptures.Stop method.
type PacketCapturesStopOptions struct {
	// placeholder for future optional parameters
}

// Route Filter Resource.
type PatchRouteFilter struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the route filter.
	Properties *RouteFilterPropertiesFormat `json:"properties,omitempty"`

	// Resource tags.
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Route Filter Rule Resource.
type PatchRouteFilterRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
}

// Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type PeerExpressRouteCircuitConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the peer express route circuit connection.
	Properties *PeerExpressRouteCircuitConnectionPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
type PeerExpressRouteCircuitConnectionListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The global reach peer circuit connection associated with Private Peering in an ExpressRoute Circuit.
	Value *[]PeerExpressRouteCircuitConnection `json:"value,omitempty"`
}

// PeerExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnectionListResult
// type.
type PeerExpressRouteCircuitConnectionListResultResponse struct {
	// Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
	PeerExpressRouteCircuitConnectionListResult *PeerExpressRouteCircuitConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the peer express route circuit connection.
type PeerExpressRouteCircuitConnectionPropertiesFormat struct {
	// /29 IP address space to carve out Customer addresses for tunnels.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// The resource guid of the authorization used for the express route circuit connection.
	AuthResourceGUID *string `json:"authResourceGuid,omitempty"`

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus `json:"circuitConnectionStatus,omitempty" azure:"ro"`

	// The name of the express route circuit connection resource.
	ConnectionName *string `json:"connectionName,omitempty"`

	// Reference to Express Route Circuit Private Peering Resource of the circuit.
	ExpressRouteCircuitPeering *SubResource `json:"expressRouteCircuitPeering,omitempty"`

	// Reference to Express Route Circuit Private Peering Resource of the peered circuit.
	PeerExpressRouteCircuitPeering *SubResource `json:"peerExpressRouteCircuitPeering,omitempty"`

	// READ-ONLY; The provisioning state of the peer express route circuit connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PeerExpressRouteCircuitConnectionResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnection type.
type PeerExpressRouteCircuitConnectionResponse struct {
	// Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
	PeerExpressRouteCircuitConnection *PeerExpressRouteCircuitConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerExpressRouteCircuitConnectionsGetOptions contains the optional parameters for the PeerExpressRouteCircuitConnections.Get method.
type PeerExpressRouteCircuitConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PeerExpressRouteCircuitConnectionsListOptions contains the optional parameters for the PeerExpressRouteCircuitConnections.List method.
type PeerExpressRouteCircuitConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// Peer routing details.
type PeerRoute struct {
	// READ-ONLY; The route's AS path sequence.
	AsPath *string `json:"asPath,omitempty" azure:"ro"`

	// READ-ONLY; The peer's local address.
	LocalAddress *string `json:"localAddress,omitempty" azure:"ro"`

	// READ-ONLY; The route's network prefix.
	Network *string `json:"network,omitempty" azure:"ro"`

	// READ-ONLY; The route's next hop.
	NextHop *string `json:"nextHop,omitempty" azure:"ro"`

	// READ-ONLY; The source this route was learned from.
	Origin *string `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; The peer this route was learned from.
	SourcePeer *string `json:"sourcePeer,omitempty" azure:"ro"`

	// READ-ONLY; The route's weight.
	Weight *int32 `json:"weight,omitempty" azure:"ro"`
}

// List of virtual router peer routes.
type PeerRouteList struct {
	// List of peer routes.
	Value *[]PeerRoute `json:"value,omitempty"`
}

// PeerRouteListPollerResponse is the response envelope for operations that asynchronously return a PeerRouteList type.
type PeerRouteListPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PeerRouteListResponse, error)

	// Poller contains an initialized poller.
	Poller PeerRouteListPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerRouteListResponse is the response envelope for operations that return a PeerRouteList type.
type PeerRouteListResponse struct {
	// List of virtual router peer routes.
	PeerRouteList *PeerRouteList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Defines contents of a web application firewall global configuration.
type PolicySettings struct {
	// Maximum file upload size in Mb for WAF.
	FileUploadLimitInMb *int32 `json:"fileUploadLimitInMb,omitempty"`

	// Maximum request body size in Kb for WAF.
	MaxRequestBodySizeInKb *int32 `json:"maxRequestBodySizeInKb,omitempty"`

	// The mode of the policy.
	Mode *WebApplicationFirewallMode `json:"mode,omitempty"`

	// Whether to allow WAF to check request Body.
	RequestBodyCheck *bool `json:"requestBodyCheck,omitempty"`

	// The state of the policy.
	State *WebApplicationFirewallEnabledState `json:"state,omitempty"`
}

// Details of PrepareNetworkPolicies for Subnet.
type PrepareNetworkPoliciesRequest struct {
	// A list of NetworkIntentPolicyConfiguration.
	NetworkIntentPolicyConfigurations *[]NetworkIntentPolicyConfiguration `json:"networkIntentPolicyConfigurations,omitempty"`

	// The name of the service for which subnet is being prepared for.
	ServiceName *string `json:"serviceName,omitempty"`
}

// PrivateDnsZoneConfig resource.
type PrivateDNSZoneConfig struct {
	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the private dns zone configuration.
	Properties *PrivateDNSZonePropertiesFormat `json:"properties,omitempty"`
}

// Private dns zone group resource.
type PrivateDNSZoneGroup struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the private dns zone group.
	Properties *PrivateDNSZoneGroupPropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListPrivateDnsZoneGroups API service call.
type PrivateDNSZoneGroupListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of private dns zone group resources in a private endpoint.
	Value *[]PrivateDNSZoneGroup `json:"value,omitempty"`
}

// PrivateDNSZoneGroupListResultResponse is the response envelope for operations that return a PrivateDNSZoneGroupListResult type.
type PrivateDNSZoneGroupListResultResponse struct {
	// Response for the ListPrivateDnsZoneGroups API service call.
	PrivateDNSZoneGroupListResult *PrivateDNSZoneGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateDNSZoneGroupPollerResponse is the response envelope for operations that asynchronously return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PrivateDNSZoneGroupResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateDNSZoneGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the private dns zone group.
type PrivateDNSZoneGroupPropertiesFormat struct {
	// A collection of private dns zone configurations of the private dns zone group.
	PrivateDNSZoneConfigs *[]PrivateDNSZoneConfig `json:"privateDnsZoneConfigs,omitempty"`

	// READ-ONLY; The provisioning state of the private dns zone group resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateDNSZoneGroupResponse is the response envelope for operations that return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupResponse struct {
	// Private dns zone group resource.
	PrivateDNSZoneGroup *PrivateDNSZoneGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateDNSZoneGroupsCreateOrUpdateOptions contains the optional parameters for the PrivateDNSZoneGroups.CreateOrUpdate method.
type PrivateDNSZoneGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateDNSZoneGroupsDeleteOptions contains the optional parameters for the PrivateDNSZoneGroups.Delete method.
type PrivateDNSZoneGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateDNSZoneGroupsGetOptions contains the optional parameters for the PrivateDNSZoneGroups.Get method.
type PrivateDNSZoneGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateDNSZoneGroupsListOptions contains the optional parameters for the PrivateDNSZoneGroups.List method.
type PrivateDNSZoneGroupsListOptions struct {
	// placeholder for future optional parameters
}

// Properties of the private dns zone configuration resource.
type PrivateDNSZonePropertiesFormat struct {
	// The resource id of the private dns zone.
	PrivateDNSZoneID *string `json:"privateDnsZoneId,omitempty"`

	// READ-ONLY; A collection of information regarding a recordSet, holding information to identify private resources.
	RecordSets *[]RecordSet `json:"recordSets,omitempty" azure:"ro"`
}

// Private endpoint resource.
type PrivateEndpoint struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the private endpoint.
	Properties *PrivateEndpointProperties `json:"properties,omitempty"`
}

// PrivateEndpointConnection resource.
type PrivateEndpointConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the private end point connection.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for the ListPrivateEndpointConnection API service call.
type PrivateEndpointConnectionListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of PrivateEndpointConnection resources for a specific private link service.
	Value *[]PrivateEndpointConnection `json:"value,omitempty"`
}

// PrivateEndpointConnectionListResultResponse is the response envelope for operations that return a PrivateEndpointConnectionListResult type.
type PrivateEndpointConnectionListResultResponse struct {
	// Response for the ListPrivateEndpointConnection API service call.
	PrivateEndpointConnectionListResult *PrivateEndpointConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// READ-ONLY; The consumer link id.
	LinkIDentifier *string `json:"linkIdentifier,omitempty" azure:"ro"`

	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty" azure:"ro"`

	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse struct {
	// PrivateEndpointConnection resource.
	PrivateEndpointConnection *PrivateEndpointConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for the ListPrivateEndpoints API service call.
type PrivateEndpointListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of private endpoint resources in a resource group.
	Value *[]PrivateEndpoint `json:"value,omitempty"`
}

// PrivateEndpointListResultResponse is the response envelope for operations that return a PrivateEndpointListResult type.
type PrivateEndpointListResultResponse struct {
	// Response for the ListPrivateEndpoints API service call.
	PrivateEndpointListResult *PrivateEndpointListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointPollerResponse is the response envelope for operations that asynchronously return a PrivateEndpoint type.
type PrivateEndpointPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PrivateEndpointResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateEndpointPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the private endpoint.
type PrivateEndpointProperties struct {
	// An array of custom dns configurations.
	CustomDNSConfigs *[]CustomDNSConfigPropertiesFormat `json:"customDnsConfigs,omitempty"`

	// A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the
	// remote resource.
	ManualPrivateLinkServiceConnections *[]PrivateLinkServiceConnection `json:"manualPrivateLinkServiceConnections,omitempty"`

	// READ-ONLY; An array of references to the network interfaces created for this private endpoint.
	NetworkInterfaces *[]NetworkInterface `json:"networkInterfaces,omitempty" azure:"ro"`

	// A grouping of information about the connection to the remote resource.
	PrivateLinkServiceConnections *[]PrivateLinkServiceConnection `json:"privateLinkServiceConnections,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The ID of the subnet from which the private IP will be allocated.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// PrivateEndpointResponse is the response envelope for operations that return a PrivateEndpoint type.
type PrivateEndpointResponse struct {
	// Private endpoint resource.
	PrivateEndpoint *PrivateEndpoint

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointsCreateOrUpdateOptions contains the optional parameters for the PrivateEndpoints.CreateOrUpdate method.
type PrivateEndpointsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointsDeleteOptions contains the optional parameters for the PrivateEndpoints.Delete method.
type PrivateEndpointsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointsGetOptions contains the optional parameters for the PrivateEndpoints.Get method.
type PrivateEndpointsGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PrivateEndpointsListBySubscriptionOptions contains the optional parameters for the PrivateEndpoints.ListBySubscription method.
type PrivateEndpointsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointsListOptions contains the optional parameters for the PrivateEndpoints.List method.
type PrivateEndpointsListOptions struct {
	// placeholder for future optional parameters
}

// Private link service resource.
type PrivateLinkService struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the private link service.
	Properties *PrivateLinkServiceProperties `json:"properties,omitempty"`
}

// PrivateLinkServiceConnection resource.
type PrivateLinkServiceConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the private link service connection.
	Properties *PrivateLinkServiceConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of the PrivateLinkServiceConnection.
type PrivateLinkServiceConnectionProperties struct {
	// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
	GroupIDs *[]string `json:"groupIds,omitempty"`

	// A collection of read-only information about the state of the connection to the remote resource.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// The resource id of private link service.
	PrivateLinkServiceID *string `json:"privateLinkServiceId,omitempty"`

	// READ-ONLY; The provisioning state of the private link service connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
	RequestMessage *string `json:"requestMessage,omitempty"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `json:"status,omitempty"`
}

// The private link service ip configuration.
type PrivateLinkServiceIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of private link service ip configuration.
	Name *string `json:"name,omitempty"`

	// Properties of the private link service ip configuration.
	Properties *PrivateLinkServiceIPConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of private link service IP configuration.
type PrivateLinkServiceIPConfigurationProperties struct {
	// Whether the ip configuration is primary or not.
	Primary *bool `json:"primary,omitempty"`

	// The private IP address of the IP configuration.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
	PrivateIPAddressVersion *IPVersion `json:"privateIPAddressVersion,omitempty"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the private link service IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the subnet resource.
	Subnet *Subnet `json:"subnet,omitempty"`
}

// Response for the ListPrivateLinkService API service call.
type PrivateLinkServiceListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of PrivateLinkService resources in a resource group.
	Value *[]PrivateLinkService `json:"value,omitempty"`
}

// PrivateLinkServiceListResultResponse is the response envelope for operations that return a PrivateLinkServiceListResult type.
type PrivateLinkServiceListResultResponse struct {
	// Response for the ListPrivateLinkService API service call.
	PrivateLinkServiceListResult *PrivateLinkServiceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicePollerResponse is the response envelope for operations that asynchronously return a PrivateLinkService type.
type PrivateLinkServicePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PrivateLinkServiceResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateLinkServicePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the private link service.
type PrivateLinkServiceProperties struct {
	// READ-ONLY; The alias of the private link service.
	Alias *string `json:"alias,omitempty" azure:"ro"`

	// The auto-approval list of the private link service.
	AutoApproval *ResourceSet `json:"autoApproval,omitempty"`

	// Whether the private link service is enabled for proxy protocol or not.
	EnableProxyProtocol *bool `json:"enableProxyProtocol,omitempty"`

	// The list of Fqdn.
	Fqdns *[]string `json:"fqdns,omitempty"`

	// An array of private link service IP configurations.
	IPConfigurations *[]PrivateLinkServiceIPConfiguration `json:"ipConfigurations,omitempty"`

	// An array of references to the load balancer IP configurations.
	LoadBalancerFrontendIPConfigurations *[]FrontendIPConfiguration `json:"loadBalancerFrontendIpConfigurations,omitempty"`

	// READ-ONLY; An array of references to the network interfaces created for this private link service.
	NetworkInterfaces *[]NetworkInterface `json:"networkInterfaces,omitempty" azure:"ro"`

	// READ-ONLY; An array of list about connections to the private endpoint.
	PrivateEndpointConnections *[]PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the private link service resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The visibility list of the private link service.
	Visibility *ResourceSet `json:"visibility,omitempty"`
}

// The auto-approval list of the private link service.
type PrivateLinkServicePropertiesAutoApproval struct {
	ResourceSet
}

// The visibility list of the private link service.
type PrivateLinkServicePropertiesVisibility struct {
	ResourceSet
}

// PrivateLinkServiceResponse is the response envelope for operations that return a PrivateLinkService type.
type PrivateLinkServiceResponse struct {
	// Private link service resource.
	PrivateLinkService *PrivateLinkService

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Response for the CheckPrivateLinkServiceVisibility API service call.
type PrivateLinkServiceVisibility struct {
	// Private Link Service Visibility (True/False).
	Visible *bool `json:"visible,omitempty"`
}

// PrivateLinkServiceVisibilityPollerResponse is the response envelope for operations that asynchronously return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PrivateLinkServiceVisibilityResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateLinkServiceVisibilityPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServiceVisibilityResponse is the response envelope for operations that return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityResponse struct {
	// Response for the CheckPrivateLinkServiceVisibility API service call.
	PrivateLinkServiceVisibility *PrivateLinkServiceVisibility

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOptions contains the optional parameters for the PrivateLinkServices.CheckPrivateLinkServiceVisibilityByResourceGroup
// method.
type PrivateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesCheckPrivateLinkServiceVisibilityOptions contains the optional parameters for the PrivateLinkServices.CheckPrivateLinkServiceVisibility
// method.
type PrivateLinkServicesCheckPrivateLinkServiceVisibilityOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesCreateOrUpdateOptions contains the optional parameters for the PrivateLinkServices.CreateOrUpdate method.
type PrivateLinkServicesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesDeleteOptions contains the optional parameters for the PrivateLinkServices.Delete method.
type PrivateLinkServicesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesDeletePrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.DeletePrivateEndpointConnection
// method.
type PrivateLinkServicesDeletePrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesGetOptions contains the optional parameters for the PrivateLinkServices.Get method.
type PrivateLinkServicesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PrivateLinkServicesGetPrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.GetPrivateEndpointConnection method.
type PrivateLinkServicesGetPrivateEndpointConnectionOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions contains the optional parameters for the PrivateLinkServices.ListAutoApprovedPrivateLinkServicesByResourceGroup
// method.
type PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions contains the optional parameters for the PrivateLinkServices.ListAutoApprovedPrivateLinkServices
// method.
type PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesListBySubscriptionOptions contains the optional parameters for the PrivateLinkServices.ListBySubscription method.
type PrivateLinkServicesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesListOptions contains the optional parameters for the PrivateLinkServices.List method.
type PrivateLinkServicesListOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesListPrivateEndpointConnectionsOptions contains the optional parameters for the PrivateLinkServices.ListPrivateEndpointConnections
// method.
type PrivateLinkServicesListPrivateEndpointConnectionsOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServicesUpdatePrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.UpdatePrivateEndpointConnection
// method.
type PrivateLinkServicesUpdatePrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// A load balancer probe.
type Probe struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of load balancer probe.
	Properties *ProbePropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Load balancer probe resource.
type ProbePropertiesFormat struct {
	// The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated
	// timeout period (in seconds) which allows two full
	// probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
	IntervalInSeconds *int32 `json:"intervalInSeconds,omitempty"`

	// READ-ONLY; The load balancer rules that use this probe.
	LoadBalancingRules *[]SubResource `json:"loadBalancingRules,omitempty" azure:"ro"`

	// The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints
	// to be taken out of rotation faster or slower than
	// the typical times used in Azure.
	NumberOfProbes *int32 `json:"numberOfProbes,omitempty"`

	// The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
	Port *int32 `json:"port,omitempty"`

	// The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a
	// 200 OK response from the specifies URI is required
	// for the probe to be successful.
	Protocol *ProbeProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the probe resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default
	// value.
	RequestPath *string `json:"requestPath,omitempty"`
}

// ProbeResponse is the response envelope for operations that return a Probe type.
type ProbeResponse struct {
	// A load balancer probe.
	Probe *Probe

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// The list of RouteTables to advertise the routes to.
type PropagatedRouteTable struct {
	// The list of resource ids of all the RouteTables.
	IDs *[]SubResource `json:"ids,omitempty"`

	// The list of labels.
	Labels *[]string `json:"labels,omitempty"`
}

// Configuration of the protocol.
type ProtocolConfiguration struct {
	// HTTP configuration of the connectivity check.
	HTTPConfiguration *HTTPConfiguration `json:"HTTPConfiguration,omitempty"`
}

// DDoS custom policy properties.
type ProtocolCustomSettingsFormat struct {
	// The protocol for which the DDoS protection policy is being customized.
	Protocol *DdosCustomPolicyProtocol `json:"protocol,omitempty"`

	// The customized DDoS protection source rate.
	SourceRateOverride *string `json:"sourceRateOverride,omitempty"`

	// The customized DDoS protection trigger rate.
	TriggerRateOverride *string `json:"triggerRateOverride,omitempty"`

	// The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger
	// rate set with moderate sensitivity w.r.t. normal
	// traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
	TriggerSensitivityOverride *DdosCustomPolicyTriggerSensitivityOverride `json:"triggerSensitivityOverride,omitempty"`
}

// Public IP address resource.
type PublicIPAddress struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Public IP address properties.
	Properties *PublicIPAddressPropertiesFormat `json:"properties,omitempty"`

	// The public IP address SKU.
	SKU *PublicIPAddressSKU `json:"sku,omitempty"`

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Contains FQDN of the DNS record associated with the public IP address.
type PublicIPAddressDNSSettings struct {
	// The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with
	// the public IP address. If a domain name label is
	// specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`

	// The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized
	// DNS zone.
	Fqdn *string `json:"fqdn,omitempty"`

	// The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS
	// record is created pointing from the IP address in
	// the in-addr.arpa domain to the reverse FQDN.
	ReverseFqdn *string `json:"reverseFqdn,omitempty"`
}

// Response for ListPublicIpAddresses API service call.
type PublicIPAddressListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of public IP addresses that exists in a resource group.
	Value *[]PublicIPAddress `json:"value,omitempty"`
}

// PublicIPAddressListResultResponse is the response envelope for operations that return a PublicIPAddressListResult type.
type PublicIPAddressListResultResponse struct {
	// Response for ListPublicIpAddresses API service call.
	PublicIPAddressListResult *PublicIPAddressListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPAddressPollerResponse is the response envelope for operations that asynchronously return a PublicIPAddress type.
type PublicIPAddressPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PublicIPAddressResponse, error)

	// Poller contains an initialized poller.
	Poller PublicIPAddressPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Public IP address properties.
type PublicIPAddressPropertiesFormat struct {
	// The FQDN of the DNS record associated with the public IP address.
	DNSSettings *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`

	// The DDoS protection custom policy associated with the public IP address.
	DdosSettings *DdosSettings `json:"ddosSettings,omitempty"`

	// The idle timeout of the public IP address.
	IDleTimeoutInMinutes *int32 `json:"idleTimeoutInMinutes,omitempty"`

	// The IP address associated with the public IP address resource.
	IPAddress *string `json:"ipAddress,omitempty"`

	// READ-ONLY; The IP configuration associated with the public IP address.
	IPConfiguration *IPConfiguration `json:"ipConfiguration,omitempty" azure:"ro"`

	// The list of tags associated with the public IP address.
	IPTags *[]IPTag `json:"ipTags,omitempty"`

	// READ-ONLY; The provisioning state of the public IP address resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The public IP address version.
	PublicIPAddressVersion *IPVersion `json:"publicIPAddressVersion,omitempty"`

	// The public IP address allocation method.
	PublicIPAllocationMethod *IPAllocationMethod `json:"publicIPAllocationMethod,omitempty"`

	// The Public IP Prefix this Public IP Address should be allocated from.
	PublicIPPrefix *SubResource `json:"publicIPPrefix,omitempty"`

	// READ-ONLY; The resource GUID property of the public IP address resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// PublicIPAddressResponse is the response envelope for operations that return a PublicIPAddress type.
type PublicIPAddressResponse struct {
	// Public IP address resource.
	PublicIPAddress *PublicIPAddress

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKU of a public IP address.
type PublicIPAddressSKU struct {
	// Name of a public IP address SKU.
	Name *PublicIPAddressSKUName `json:"name,omitempty"`

	// Tier of a public IP address SKU.
	Tier *PublicIPAddressSKUTier `json:"tier,omitempty"`
}

// PublicIPAddressesCreateOrUpdateOptions contains the optional parameters for the PublicIPAddresses.CreateOrUpdate method.
type PublicIPAddressesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesDeleteOptions contains the optional parameters for the PublicIPAddresses.Delete method.
type PublicIPAddressesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesGetOptions contains the optional parameters for the PublicIPAddresses.Get method.
type PublicIPAddressesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions contains the optional parameters for the PublicIPAddresses.GetVirtualMachineScaleSetPublicIPAddress
// method.
type PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PublicIPAddressesListAllOptions contains the optional parameters for the PublicIPAddresses.ListAll method.
type PublicIPAddressesListAllOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesListOptions contains the optional parameters for the PublicIPAddresses.List method.
type PublicIPAddressesListOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions contains the optional parameters for the PublicIPAddresses.ListVirtualMachineScaleSetPublicIPAddresses
// method.
type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesListVirtualMachineScaleSetVMPublicIPaddressesOptions contains the optional parameters for the PublicIPAddresses.ListVirtualMachineScaleSetVMPublicIPaddresses
// method.
type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPaddressesOptions struct {
	// placeholder for future optional parameters
}

// PublicIPAddressesUpdateTagsOptions contains the optional parameters for the PublicIPAddresses.UpdateTags method.
type PublicIPAddressesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Public IP prefix resource.
type PublicIPPrefix struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Public IP prefix properties.
	Properties *PublicIPPrefixPropertiesFormat `json:"properties,omitempty"`

	// The public IP prefix SKU.
	SKU *PublicIPPrefixSKU `json:"sku,omitempty"`

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones *[]string `json:"zones,omitempty"`
}

// Response for ListPublicIpPrefixes API service call.
type PublicIPPrefixListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of public IP prefixes that exists in a resource group.
	Value *[]PublicIPPrefix `json:"value,omitempty"`
}

// PublicIPPrefixListResultResponse is the response envelope for operations that return a PublicIPPrefixListResult type.
type PublicIPPrefixListResultResponse struct {
	// Response for ListPublicIpPrefixes API service call.
	PublicIPPrefixListResult *PublicIPPrefixListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPPrefixPollerResponse is the response envelope for operations that asynchronously return a PublicIPPrefix type.
type PublicIPPrefixPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*PublicIPPrefixResponse, error)

	// Poller contains an initialized poller.
	Poller PublicIPPrefixPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Public IP prefix properties.
type PublicIPPrefixPropertiesFormat struct {
	// The customIpPrefix that this prefix is associated with.
	CustomIPPrefix *SubResource `json:"customIPPrefix,omitempty"`

	// READ-ONLY; The allocated Prefix.
	IPPrefix *string `json:"ipPrefix,omitempty" azure:"ro"`

	// The list of tags associated with the public IP prefix.
	IPTags *[]IPTag `json:"ipTags,omitempty"`

	// READ-ONLY; The reference to load balancer frontend IP configuration associated with the public IP prefix.
	LoadBalancerFrontendIPConfiguration *SubResource `json:"loadBalancerFrontendIpConfiguration,omitempty" azure:"ro"`

	// The Length of the Public IP Prefix.
	PrefixLength *int32 `json:"prefixLength,omitempty"`

	// READ-ONLY; The provisioning state of the public IP prefix resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The public IP address version.
	PublicIPAddressVersion *IPVersion `json:"publicIPAddressVersion,omitempty"`

	// READ-ONLY; The list of all referenced PublicIPAddresses.
	PublicIPAddresses *[]ReferencedPublicIPAddress `json:"publicIPAddresses,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the public IP prefix resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// PublicIPPrefixResponse is the response envelope for operations that return a PublicIPPrefix type.
type PublicIPPrefixResponse struct {
	// Public IP prefix resource.
	PublicIPPrefix *PublicIPPrefix

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKU of a public IP prefix.
type PublicIPPrefixSKU struct {
	// Name of a public IP prefix SKU.
	Name *PublicIPPrefixSKUName `json:"name,omitempty"`

	// Tier of a public IP prefix SKU.
	Tier *PublicIPPrefixSKUTier `json:"tier,omitempty"`
}

// PublicIPPrefixesCreateOrUpdateOptions contains the optional parameters for the PublicIPPrefixes.CreateOrUpdate method.
type PublicIPPrefixesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PublicIPPrefixesDeleteOptions contains the optional parameters for the PublicIPPrefixes.Delete method.
type PublicIPPrefixesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PublicIPPrefixesGetOptions contains the optional parameters for the PublicIPPrefixes.Get method.
type PublicIPPrefixesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// PublicIPPrefixesListAllOptions contains the optional parameters for the PublicIPPrefixes.ListAll method.
type PublicIPPrefixesListAllOptions struct {
	// placeholder for future optional parameters
}

// PublicIPPrefixesListOptions contains the optional parameters for the PublicIPPrefixes.List method.
type PublicIPPrefixesListOptions struct {
	// placeholder for future optional parameters
}

// PublicIPPrefixesUpdateTagsOptions contains the optional parameters for the PublicIPPrefixes.UpdateTags method.
type PublicIPPrefixesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Qos Traffic Profiler IP Range properties.
type QosIPRange struct {
	// End IP Address.
	EndIP *string `json:"endIP,omitempty"`

	// Start IP Address.
	StartIP *string `json:"startIP,omitempty"`
}

// Qos Traffic Profiler Port range properties.
type QosPortRange struct {
	// Qos Port Range end.
	End *int32 `json:"end,omitempty"`

	// Qos Port Range start.
	Start *int32 `json:"start,omitempty"`
}

// Parameters that define the resource to query the troubleshooting result.
type QueryTroubleshootingParameters struct {
	// The target resource ID to query the troubleshooting result.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// Radius Server Settings.
type RadiusServer struct {
	// The address of this radius server.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// The initial score assigned to this radius server.
	RadiusServerScore *int64 `json:"radiusServerScore,omitempty"`

	// The secret used for this radius server.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`
}

// A collective group of information about the record set information.
type RecordSet struct {
	// Fqdn that resolves to private endpoint ip address.
	Fqdn *string `json:"fqdn,omitempty"`

	// The private ip address of the private endpoint.
	IPAddresses *[]string `json:"ipAddresses,omitempty"`

	// READ-ONLY; The provisioning state of the recordset.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Recordset name.
	RecordSetName *string `json:"recordSetName,omitempty"`

	// Resource record type.
	RecordType *string `json:"recordType,omitempty"`

	// Recordset time to live.
	TTL *int32 `json:"ttl,omitempty"`
}

// Reference to a public IP address.
type ReferencedPublicIPAddress struct {
	// The PublicIPAddress Reference.
	ID *string `json:"id,omitempty"`
}

// Common resource representation.
type Resource struct {
	// Resource ID.
	ID *string `json:"id,omitempty"`

	// Resource location.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource tags.
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceNavigationLink resource.
type ResourceNavigationLink struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Resource navigation link properties format.
	Properties *ResourceNavigationLinkFormat `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat struct {
	// Link to the external resource.
	Link *string `json:"link,omitempty"`

	// Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	// READ-ONLY; The provisioning state of the resource navigation link resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ResourceNavigationLinksListOptions contains the optional parameters for the ResourceNavigationLinks.List method.
type ResourceNavigationLinksListOptions struct {
	// placeholder for future optional parameters
}

// Response for ResourceNavigationLinks_List operation.
type ResourceNavigationLinksListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// The resource navigation links in a subnet.
	Value *[]ResourceNavigationLink `json:"value,omitempty"`
}

// ResourceNavigationLinksListResultResponse is the response envelope for operations that return a ResourceNavigationLinksListResult type.
type ResourceNavigationLinksListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ResourceNavigationLinks_List operation.
	ResourceNavigationLinksListResult *ResourceNavigationLinksListResult
}

// The base resource set for visibility and auto-approval.
type ResourceSet struct {
	// The list of subscriptions.
	Subscriptions *[]string `json:"subscriptions,omitempty"`
}

// Parameters that define the retention policy for flow log.
type RetentionPolicyParameters struct {
	// Number of days to retain flow log records.
	Days *int32 `json:"days,omitempty"`

	// Flag to enable/disable retention.
	Enabled *bool `json:"enabled,omitempty"`
}

// Route resource.
type Route struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the route.
	Properties *RoutePropertiesFormat `json:"properties,omitempty"`
}

// Route Filter Resource.
type RouteFilter struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the route filter.
	Properties *RouteFilterPropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListRouteFilters API service call.
type RouteFilterListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of route filters in a resource group.
	Value *[]RouteFilter `json:"value,omitempty"`
}

// RouteFilterListResultResponse is the response envelope for operations that return a RouteFilterListResult type.
type RouteFilterListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteFilters API service call.
	RouteFilterListResult *RouteFilterListResult
}

// RouteFilterPollerResponse is the response envelope for operations that asynchronously return a RouteFilter type.
type RouteFilterPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*RouteFilterResponse, error)

	// Poller contains an initialized poller.
	Poller RouteFilterPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Route Filter Resource.
type RouteFilterPropertiesFormat struct {
	// READ-ONLY; A collection of references to express route circuit ipv6 peerings.
	IPv6Peerings *[]ExpressRouteCircuitPeering `json:"ipv6Peerings,omitempty" azure:"ro"`

	// READ-ONLY; A collection of references to express route circuit peerings.
	Peerings *[]ExpressRouteCircuitPeering `json:"peerings,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the route filter resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Collection of RouteFilterRules contained within a route filter.
	Rules *[]RouteFilterRule `json:"rules,omitempty"`
}

// RouteFilterResponse is the response envelope for operations that return a RouteFilter type.
type RouteFilterResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route Filter Resource.
	RouteFilter *RouteFilter
}

// Route Filter Rule Resource.
type RouteFilterRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Resource location.
	Location *string `json:"location,omitempty"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListRouteFilterRules API service call.
type RouteFilterRuleListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of RouteFilterRules in a resource group.
	Value *[]RouteFilterRule `json:"value,omitempty"`
}

// RouteFilterRuleListResultResponse is the response envelope for operations that return a RouteFilterRuleListResult type.
type RouteFilterRuleListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteFilterRules API service call.
	RouteFilterRuleListResult *RouteFilterRuleListResult
}

// RouteFilterRulePollerResponse is the response envelope for operations that asynchronously return a RouteFilterRule type.
type RouteFilterRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*RouteFilterRuleResponse, error)

	// Poller contains an initialized poller.
	Poller RouteFilterRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Route Filter Rule Resource.
type RouteFilterRulePropertiesFormat struct {
	// The access type of the rule.
	Access *Access `json:"access,omitempty"`

	// The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
	Communities *[]string `json:"communities,omitempty"`

	// READ-ONLY; The provisioning state of the route filter rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The rule type of the rule.
	RouteFilterRuleType *RouteFilterRuleType `json:"routeFilterRuleType,omitempty"`
}

// RouteFilterRuleResponse is the response envelope for operations that return a RouteFilterRule type.
type RouteFilterRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route Filter Rule Resource.
	RouteFilterRule *RouteFilterRule
}

// RouteFilterRulesCreateOrUpdateOptions contains the optional parameters for the RouteFilterRules.CreateOrUpdate method.
type RouteFilterRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RouteFilterRulesDeleteOptions contains the optional parameters for the RouteFilterRules.Delete method.
type RouteFilterRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// RouteFilterRulesGetOptions contains the optional parameters for the RouteFilterRules.Get method.
type RouteFilterRulesGetOptions struct {
	// placeholder for future optional parameters
}

// RouteFilterRulesListByRouteFilterOptions contains the optional parameters for the RouteFilterRules.ListByRouteFilter method.
type RouteFilterRulesListByRouteFilterOptions struct {
	// placeholder for future optional parameters
}

// RouteFiltersCreateOrUpdateOptions contains the optional parameters for the RouteFilters.CreateOrUpdate method.
type RouteFiltersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RouteFiltersDeleteOptions contains the optional parameters for the RouteFilters.Delete method.
type RouteFiltersDeleteOptions struct {
	// placeholder for future optional parameters
}

// RouteFiltersGetOptions contains the optional parameters for the RouteFilters.Get method.
type RouteFiltersGetOptions struct {
	// Expands referenced express route bgp peering resources.
	Expand *string
}

// RouteFiltersListByResourceGroupOptions contains the optional parameters for the RouteFilters.ListByResourceGroup method.
type RouteFiltersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// RouteFiltersListOptions contains the optional parameters for the RouteFilters.List method.
type RouteFiltersListOptions struct {
	// placeholder for future optional parameters
}

// RouteFiltersUpdateTagsOptions contains the optional parameters for the RouteFilters.UpdateTags method.
type RouteFiltersUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Response for the ListRoute API service call.
type RouteListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of routes in a resource group.
	Value *[]Route `json:"value,omitempty"`
}

// RouteListResultResponse is the response envelope for operations that return a RouteListResult type.
type RouteListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRoute API service call.
	RouteListResult *RouteListResult
}

// RoutePollerResponse is the response envelope for operations that asynchronously return a Route type.
type RoutePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*RouteResponse, error)

	// Poller contains an initialized poller.
	Poller RoutePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Route resource.
type RoutePropertiesFormat struct {
	// The destination CIDR to which the route applies.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`

	// The type of Azure hop the packet should be sent to.
	NextHopType *RouteNextHopType `json:"nextHopType,omitempty"`

	// READ-ONLY; The provisioning state of the route resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// RouteResponse is the response envelope for operations that return a Route type.
type RouteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route resource.
	Route *Route
}

// Route table resource.
type RouteTable struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the route table.
	Properties *RouteTablePropertiesFormat `json:"properties,omitempty"`
}

// Response for the ListRouteTable API service call.
type RouteTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of route tables in a resource group.
	Value *[]RouteTable `json:"value,omitempty"`
}

// RouteTableListResultResponse is the response envelope for operations that return a RouteTableListResult type.
type RouteTableListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteTable API service call.
	RouteTableListResult *RouteTableListResult
}

// RouteTablePollerResponse is the response envelope for operations that asynchronously return a RouteTable type.
type RouteTablePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*RouteTableResponse, error)

	// Poller contains an initialized poller.
	Poller RouteTablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Route Table resource.
type RouteTablePropertiesFormat struct {
	// Whether to disable the routes learned by BGP on that route table. True means disable.
	DisableBgpRoutePropagation *bool `json:"disableBgpRoutePropagation,omitempty"`

	// READ-ONLY; The provisioning state of the route table resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Collection of routes contained within a route table.
	Routes *[]Route `json:"routes,omitempty"`

	// READ-ONLY; A collection of references to subnets.
	Subnets *[]Subnet `json:"subnets,omitempty" azure:"ro"`
}

// RouteTableResponse is the response envelope for operations that return a RouteTable type.
type RouteTableResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route table resource.
	RouteTable *RouteTable
}

// RouteTablesCreateOrUpdateOptions contains the optional parameters for the RouteTables.CreateOrUpdate method.
type RouteTablesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RouteTablesDeleteOptions contains the optional parameters for the RouteTables.Delete method.
type RouteTablesDeleteOptions struct {
	// placeholder for future optional parameters
}

// RouteTablesGetOptions contains the optional parameters for the RouteTables.Get method.
type RouteTablesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// RouteTablesListAllOptions contains the optional parameters for the RouteTables.ListAll method.
type RouteTablesListAllOptions struct {
	// placeholder for future optional parameters
}

// RouteTablesListOptions contains the optional parameters for the RouteTables.List method.
type RouteTablesListOptions struct {
	// placeholder for future optional parameters
}

// RouteTablesUpdateTagsOptions contains the optional parameters for the RouteTables.UpdateTags method.
type RouteTablesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// RoutesCreateOrUpdateOptions contains the optional parameters for the Routes.CreateOrUpdate method.
type RoutesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RoutesDeleteOptions contains the optional parameters for the Routes.Delete method.
type RoutesDeleteOptions struct {
	// placeholder for future optional parameters
}

// RoutesGetOptions contains the optional parameters for the Routes.Get method.
type RoutesGetOptions struct {
	// placeholder for future optional parameters
}

// RoutesListOptions contains the optional parameters for the Routes.List method.
type RoutesListOptions struct {
	// placeholder for future optional parameters
}

// Routing Configuration indicating the associated and propagated route tables for this connection.
type RoutingConfiguration struct {
	// The resource id RouteTable associated with this RoutingConfiguration.
	AssociatedRouteTable *SubResource `json:"associatedRouteTable,omitempty"`

	// The list of RouteTables to advertise the routes to.
	PropagatedRouteTables *PropagatedRouteTable `json:"propagatedRouteTables,omitempty"`

	// List of routes that control routing from VirtualHub into a virtual network connection.
	VnetRoutes *VnetRoute `json:"vnetRoutes,omitempty"`
}

// Network interface and all its associated security rules.
type SecurityGroupNetworkInterface struct {
	// ID of the network interface.
	ID *string `json:"id,omitempty"`

	// All security rules associated with the network interface.
	SecurityRuleAssociations *SecurityRuleAssociations `json:"securityRuleAssociations,omitempty"`
}

// Parameters that define the VM to check security groups for.
type SecurityGroupViewParameters struct {
	// ID of the target VM.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// The information about security rules applied to the specified VM.
type SecurityGroupViewResult struct {
	// List of network interfaces on the specified VM.
	NetworkInterfaces *[]SecurityGroupNetworkInterface `json:"networkInterfaces,omitempty"`
}

// SecurityGroupViewResultPollerResponse is the response envelope for operations that asynchronously return a SecurityGroupViewResult type.
type SecurityGroupViewResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SecurityGroupViewResultResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityGroupViewResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityGroupViewResultResponse is the response envelope for operations that return a SecurityGroupViewResult type.
type SecurityGroupViewResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The information about security rules applied to the specified VM.
	SecurityGroupViewResult *SecurityGroupViewResult
}

// Security Partner Provider resource.
type SecurityPartnerProvider struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the Security Partner Provider.
	Properties *SecurityPartnerProviderPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListSecurityPartnerProviders API service call.
type SecurityPartnerProviderListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Security Partner Providers in a resource group.
	Value *[]SecurityPartnerProvider `json:"value,omitempty"`
}

// SecurityPartnerProviderListResultResponse is the response envelope for operations that return a SecurityPartnerProviderListResult type.
type SecurityPartnerProviderListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSecurityPartnerProviders API service call.
	SecurityPartnerProviderListResult *SecurityPartnerProviderListResult
}

// SecurityPartnerProviderPollerResponse is the response envelope for operations that asynchronously return a SecurityPartnerProvider type.
type SecurityPartnerProviderPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SecurityPartnerProviderResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityPartnerProviderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the Security Partner Provider.
type SecurityPartnerProviderPropertiesFormat struct {
	// READ-ONLY; The connection status with the Security Partner Provider.
	ConnectionStatus *SecurityPartnerProviderConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the Security Partner Provider resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The security provider name.
	SecurityProviderName *SecurityProviderName `json:"securityProviderName,omitempty"`

	// The virtualHub to which the Security Partner Provider belongs.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`
}

// SecurityPartnerProviderResponse is the response envelope for operations that return a SecurityPartnerProvider type.
type SecurityPartnerProviderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Security Partner Provider resource.
	SecurityPartnerProvider *SecurityPartnerProvider
}

// SecurityPartnerProvidersCreateOrUpdateOptions contains the optional parameters for the SecurityPartnerProviders.CreateOrUpdate method.
type SecurityPartnerProvidersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SecurityPartnerProvidersDeleteOptions contains the optional parameters for the SecurityPartnerProviders.Delete method.
type SecurityPartnerProvidersDeleteOptions struct {
	// placeholder for future optional parameters
}

// SecurityPartnerProvidersGetOptions contains the optional parameters for the SecurityPartnerProviders.Get method.
type SecurityPartnerProvidersGetOptions struct {
	// placeholder for future optional parameters
}

// SecurityPartnerProvidersListByResourceGroupOptions contains the optional parameters for the SecurityPartnerProviders.ListByResourceGroup method.
type SecurityPartnerProvidersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SecurityPartnerProvidersListOptions contains the optional parameters for the SecurityPartnerProviders.List method.
type SecurityPartnerProvidersListOptions struct {
	// placeholder for future optional parameters
}

// SecurityPartnerProvidersUpdateTagsOptions contains the optional parameters for the SecurityPartnerProviders.UpdateTags method.
type SecurityPartnerProvidersUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Network security rule.
type SecurityRule struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the security rule.
	Properties *SecurityRulePropertiesFormat `json:"properties,omitempty"`
}

// All security rules associated with the network interface.
type SecurityRuleAssociations struct {
	// Collection of default security rules of the network security group.
	DefaultSecurityRules *[]SecurityRule `json:"defaultSecurityRules,omitempty"`

	// Collection of effective security rules.
	EffectiveSecurityRules *[]EffectiveNetworkSecurityRule `json:"effectiveSecurityRules,omitempty"`

	// Network interface and it's custom security rules.
	NetworkInterfaceAssociation *NetworkInterfaceAssociation `json:"networkInterfaceAssociation,omitempty"`

	// Subnet and it's custom security rules.
	SubnetAssociation *SubnetAssociation `json:"subnetAssociation,omitempty"`
}

// Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.
type SecurityRuleListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The security rules in a network security group.
	Value *[]SecurityRule `json:"value,omitempty"`
}

// SecurityRuleListResultResponse is the response envelope for operations that return a SecurityRuleListResult type.
type SecurityRuleListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.
	SecurityRuleListResult *SecurityRuleListResult
}

// SecurityRulePollerResponse is the response envelope for operations that asynchronously return a SecurityRule type.
type SecurityRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SecurityRuleResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Security rule resource.
type SecurityRulePropertiesFormat struct {
	// The network traffic is allowed or denied.
	Access *SecurityRuleAccess `json:"access,omitempty"`

	// A description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`

	// The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork',
	// 'AzureLoadBalancer' and 'Internet' can also
	// be used.
	DestinationAddressPrefix *string `json:"destinationAddressPrefix,omitempty"`

	// The destination address prefixes. CIDR or destination IP ranges.
	DestinationAddressPrefixes *[]string `json:"destinationAddressPrefixes,omitempty"`

	// The application security group specified as destination.
	DestinationApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"destinationApplicationSecurityGroups,omitempty"`

	// The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
	DestinationPortRange *string `json:"destinationPortRange,omitempty"`

	// The destination port ranges.
	DestinationPortRanges *[]string `json:"destinationPortRanges,omitempty"`

	// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
	Direction *SecurityRuleDirection `json:"direction,omitempty"`

	// The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority
	// number, the higher the priority of the rule.
	Priority *int32 `json:"priority,omitempty"`

	// Network protocol this rule applies to.
	Protocol *SecurityRuleProtocol `json:"protocol,omitempty"`

	// READ-ONLY; The provisioning state of the security rule resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet'
	// can also be used. If this is an ingress
	// rule, specifies where network traffic originates from.
	SourceAddressPrefix *string `json:"sourceAddressPrefix,omitempty"`

	// The CIDR or source IP ranges.
	SourceAddressPrefixes *[]string `json:"sourceAddressPrefixes,omitempty"`

	// The application security group specified as source.
	SourceApplicationSecurityGroups *[]ApplicationSecurityGroup `json:"sourceApplicationSecurityGroups,omitempty"`

	// The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
	SourcePortRange *string `json:"sourcePortRange,omitempty"`

	// The source port ranges.
	SourcePortRanges *[]string `json:"sourcePortRanges,omitempty"`
}

// SecurityRuleResponse is the response envelope for operations that return a SecurityRule type.
type SecurityRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Network security rule.
	SecurityRule *SecurityRule
}

// SecurityRulesCreateOrUpdateOptions contains the optional parameters for the SecurityRules.CreateOrUpdate method.
type SecurityRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SecurityRulesDeleteOptions contains the optional parameters for the SecurityRules.Delete method.
type SecurityRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// SecurityRulesGetOptions contains the optional parameters for the SecurityRules.Get method.
type SecurityRulesGetOptions struct {
	// placeholder for future optional parameters
}

// SecurityRulesListOptions contains the optional parameters for the SecurityRules.List method.
type SecurityRulesListOptions struct {
	// placeholder for future optional parameters
}

// ServiceAssociationLink resource.
type ServiceAssociationLink struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Resource navigation link properties format.
	Properties *ServiceAssociationLinkPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Properties of ServiceAssociationLink.
type ServiceAssociationLinkPropertiesFormat struct {
	// If true, the resource can be deleted.
	AllowDelete *bool `json:"allowDelete,omitempty"`

	// Link to the external resource.
	Link *string `json:"link,omitempty"`

	// Resource type of the linked resource.
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`

	// A list of locations.
	Locations *[]string `json:"locations,omitempty"`

	// READ-ONLY; The provisioning state of the service association link resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ServiceAssociationLinksListOptions contains the optional parameters for the ServiceAssociationLinks.List method.
type ServiceAssociationLinksListOptions struct {
	// placeholder for future optional parameters
}

// Response for ServiceAssociationLinks_List operation.
type ServiceAssociationLinksListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// The service association links in a subnet.
	Value *[]ServiceAssociationLink `json:"value,omitempty"`
}

// ServiceAssociationLinksListResultResponse is the response envelope for operations that return a ServiceAssociationLinksListResult type.
type ServiceAssociationLinksListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ServiceAssociationLinks_List operation.
	ServiceAssociationLinksListResult *ServiceAssociationLinksListResult
}

// Properties of a service delegation.
type ServiceDelegationPropertiesFormat struct {
	// READ-ONLY; The actions permitted to the service upon delegation.
	Actions *[]string `json:"actions,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the service delegation resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
	ServiceName *string `json:"serviceName,omitempty"`
}

// ServiceEndpointPoliciesCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointPolicies.CreateOrUpdate method.
type ServiceEndpointPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPoliciesDeleteOptions contains the optional parameters for the ServiceEndpointPolicies.Delete method.
type ServiceEndpointPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPoliciesGetOptions contains the optional parameters for the ServiceEndpointPolicies.Get method.
type ServiceEndpointPoliciesGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// ServiceEndpointPoliciesListByResourceGroupOptions contains the optional parameters for the ServiceEndpointPolicies.ListByResourceGroup method.
type ServiceEndpointPoliciesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPoliciesListOptions contains the optional parameters for the ServiceEndpointPolicies.List method.
type ServiceEndpointPoliciesListOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPoliciesUpdateTagsOptions contains the optional parameters for the ServiceEndpointPolicies.UpdateTags method.
type ServiceEndpointPoliciesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Service End point policy resource.
type ServiceEndpointPolicy struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the service end point policy.
	Properties *ServiceEndpointPolicyPropertiesFormat `json:"properties,omitempty"`
}

// Service Endpoint policy definitions.
type ServiceEndpointPolicyDefinition struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the service endpoint policy definition.
	Properties *ServiceEndpointPolicyDefinitionPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint
// policy.
type ServiceEndpointPolicyDefinitionListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The service endpoint policy definition in a service endpoint policy.
	Value *[]ServiceEndpointPolicyDefinition `json:"value,omitempty"`
}

// ServiceEndpointPolicyDefinitionListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinitionListResult type.
type ServiceEndpointPolicyDefinitionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint
	// policy.
	ServiceEndpointPolicyDefinitionListResult *ServiceEndpointPolicyDefinitionListResult
}

// ServiceEndpointPolicyDefinitionPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ServiceEndpointPolicyDefinitionResponse, error)

	// Poller contains an initialized poller.
	Poller ServiceEndpointPolicyDefinitionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Service Endpoint policy definition resource.
type ServiceEndpointPolicyDefinitionPropertiesFormat struct {
	// A description for this rule. Restricted to 140 chars.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; The provisioning state of the service endpoint policy definition resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Service endpoint name.
	Service *string `json:"service,omitempty"`

	// A list of service resources.
	ServiceResources *[]string `json:"serviceResources,omitempty"`
}

// ServiceEndpointPolicyDefinitionResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Service Endpoint policy definitions.
	ServiceEndpointPolicyDefinition *ServiceEndpointPolicyDefinition
}

// ServiceEndpointPolicyDefinitionsCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.CreateOrUpdate method.
type ServiceEndpointPolicyDefinitionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPolicyDefinitionsDeleteOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.Delete method.
type ServiceEndpointPolicyDefinitionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPolicyDefinitionsGetOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.Get method.
type ServiceEndpointPolicyDefinitionsGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceEndpointPolicyDefinitionsListByResourceGroupOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.ListByResourceGroup
// method.
type ServiceEndpointPolicyDefinitionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// Response for ListServiceEndpointPolicies API service call.
type ServiceEndpointPolicyListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of ServiceEndpointPolicy resources.
	Value *[]ServiceEndpointPolicy `json:"value,omitempty"`
}

// ServiceEndpointPolicyListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyListResult type.
type ServiceEndpointPolicyListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListServiceEndpointPolicies API service call.
	ServiceEndpointPolicyListResult *ServiceEndpointPolicyListResult
}

// ServiceEndpointPolicyPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*ServiceEndpointPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller ServiceEndpointPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Service Endpoint Policy resource.
type ServiceEndpointPolicyPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the service endpoint policy resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the service endpoint policy resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// A collection of service endpoint policy definitions of the service endpoint policy.
	ServiceEndpointPolicyDefinitions *[]ServiceEndpointPolicyDefinition `json:"serviceEndpointPolicyDefinitions,omitempty"`

	// READ-ONLY; A collection of references to subnets.
	Subnets *[]Subnet `json:"subnets,omitempty" azure:"ro"`
}

// ServiceEndpointPolicyResponse is the response envelope for operations that return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Service End point policy resource.
	ServiceEndpointPolicy *ServiceEndpointPolicy
}

// The service endpoint properties.
type ServiceEndpointPropertiesFormat struct {
	// A list of locations.
	Locations *[]string `json:"locations,omitempty"`

	// READ-ONLY; The provisioning state of the service endpoint resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The type of the endpoint service.
	Service *string `json:"service,omitempty"`
}

// The service tag information.
type ServiceTagInformation struct {
	// READ-ONLY; The ID of service tag.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of service tag.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Properties of the service tag information.
	Properties *ServiceTagInformationPropertiesFormat `json:"properties,omitempty" azure:"ro"`
}

// Properties of the service tag information.
type ServiceTagInformationPropertiesFormat struct {
	// READ-ONLY; The list of IP address prefixes.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty" azure:"ro"`

	// READ-ONLY; The iteration number of service tag.
	ChangeNumber *string `json:"changeNumber,omitempty" azure:"ro"`

	// READ-ONLY; The region of service tag.
	Region *string `json:"region,omitempty" azure:"ro"`

	// READ-ONLY; The name of system service.
	SystemService *string `json:"systemService,omitempty" azure:"ro"`
}

// ServiceTagsListOptions contains the optional parameters for the ServiceTags.List method.
type ServiceTagsListOptions struct {
	// placeholder for future optional parameters
}

// Response for the ListServiceTags API service call.
type ServiceTagsListResult struct {
	// READ-ONLY; The iteration number.
	ChangeNumber *string `json:"changeNumber,omitempty" azure:"ro"`

	// READ-ONLY; The name of the cloud.
	Cloud *string `json:"cloud,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the cloud.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the cloud.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The URL to get next page of service tag information resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The azure resource type.
	Type *string `json:"type,omitempty" azure:"ro"`

	// READ-ONLY; The list of service tag information resources.
	Values *[]ServiceTagInformation `json:"values,omitempty" azure:"ro"`
}

// ServiceTagsListResultResponse is the response envelope for operations that return a ServiceTagsListResult type.
type ServiceTagsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListServiceTags API service call.
	ServiceTagsListResult *ServiceTagsListResult
}

// List of session IDs.
type SessionIDs struct {
	// List of session IDs.
	SessionIDs *[]string `json:"sessionIds,omitempty"`
}

// List of all Static Routes.
type StaticRoute struct {
	// List of all address prefixes.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`

	// The name of the StaticRoute that is unique within a VnetRoute.
	Name *string `json:"name,omitempty"`

	// The ip address of the next hop.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
}

// StringArrayResponse is the response envelope for operations that return a []string type.
type StringArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ApplicationGatewayAvailableServerVariables API service call.
	StringArray *[]string
}

// StringPollerResponse is the response envelope for operations that asynchronously return a string type.
type StringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*StringResponse, error)

	// Poller contains an initialized poller.
	Poller StringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StringResponse is the response envelope for operations that return a string type.
type StringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	Value       *string
}

// Reference to another subresource.
type SubResource struct {
	// Resource ID.
	ID *string `json:"id,omitempty"`
}

// Subnet in a virtual network resource.
type Subnet struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the subnet.
	Properties *SubnetPropertiesFormat `json:"properties,omitempty"`
}

// Subnet and it's custom security rules.
type SubnetAssociation struct {
	// READ-ONLY; Subnet ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// Collection of custom security rules.
	SecurityRules *[]SecurityRule `json:"securityRules,omitempty"`
}

// Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
type SubnetListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The subnets in a virtual network.
	Value *[]Subnet `json:"value,omitempty"`
}

// SubnetListResultResponse is the response envelope for operations that return a SubnetListResult type.
type SubnetListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
	SubnetListResult *SubnetListResult
}

// SubnetPollerResponse is the response envelope for operations that asynchronously return a Subnet type.
type SubnetPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*SubnetResponse, error)

	// Poller contains an initialized poller.
	Poller SubnetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the subnet.
type SubnetPropertiesFormat struct {
	// The address prefix for the subnet.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// List of address prefixes for the subnet.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`

	// An array of references to the delegations on the subnet.
	Delegations *[]Delegation `json:"delegations,omitempty"`

	// Array of IpAllocation which reference this subnet.
	IPAllocations *[]SubResource `json:"ipAllocations,omitempty"`

	// READ-ONLY; Array of IP configuration profiles which reference this subnet.
	IPConfigurationProfiles *[]IPConfigurationProfile `json:"ipConfigurationProfiles,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to the network interface IP configurations using subnet.
	IPConfigurations *[]IPConfiguration `json:"ipConfigurations,omitempty" azure:"ro"`

	// Nat gateway associated with this subnet.
	NatGateway *SubResource `json:"natGateway,omitempty"`

	// The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup `json:"networkSecurityGroup,omitempty"`

	// Enable or Disable apply network policies on private end point in the subnet.
	PrivateEndpointNetworkPolicies *string `json:"privateEndpointNetworkPolicies,omitempty"`

	// READ-ONLY; An array of references to private endpoints.
	PrivateEndpoints *[]PrivateEndpoint `json:"privateEndpoints,omitempty" azure:"ro"`

	// Enable or Disable apply network policies on private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *string `json:"privateLinkServiceNetworkPolicies,omitempty"`

	// READ-ONLY; The provisioning state of the subnet resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
	Purpose *string `json:"purpose,omitempty" azure:"ro"`

	// READ-ONLY; An array of references to the external resources using subnet.
	ResourceNavigationLinks *[]ResourceNavigationLink `json:"resourceNavigationLinks,omitempty" azure:"ro"`

	// The reference to the RouteTable resource.
	RouteTable *RouteTable `json:"routeTable,omitempty"`

	// READ-ONLY; An array of references to services injecting into this subnet.
	ServiceAssociationLinks *[]ServiceAssociationLink `json:"serviceAssociationLinks,omitempty" azure:"ro"`

	// An array of service endpoint policies.
	ServiceEndpointPolicies *[]ServiceEndpointPolicy `json:"serviceEndpointPolicies,omitempty"`

	// An array of service endpoints.
	ServiceEndpoints *[]ServiceEndpointPropertiesFormat `json:"serviceEndpoints,omitempty"`
}

// SubnetResponse is the response envelope for operations that return a Subnet type.
type SubnetResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Subnet in a virtual network resource.
	Subnet *Subnet
}

// SubnetsCreateOrUpdateOptions contains the optional parameters for the Subnets.CreateOrUpdate method.
type SubnetsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SubnetsDeleteOptions contains the optional parameters for the Subnets.Delete method.
type SubnetsDeleteOptions struct {
	// placeholder for future optional parameters
}

// SubnetsGetOptions contains the optional parameters for the Subnets.Get method.
type SubnetsGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// SubnetsListOptions contains the optional parameters for the Subnets.List method.
type SubnetsListOptions struct {
	// placeholder for future optional parameters
}

// SubnetsPrepareNetworkPoliciesOptions contains the optional parameters for the Subnets.PrepareNetworkPolicies method.
type SubnetsPrepareNetworkPoliciesOptions struct {
	// placeholder for future optional parameters
}

// SubnetsUnprepareNetworkPoliciesOptions contains the optional parameters for the Subnets.UnprepareNetworkPolicies method.
type SubnetsUnprepareNetworkPoliciesOptions struct {
	// placeholder for future optional parameters
}

// Tags object for patch operations.
type TagsObject struct {
	// Resource tags.
	Tags *map[string]string `json:"tags,omitempty"`
}

// Topology of the specified resource group.
type Topology struct {
	// READ-ONLY; The datetime when the topology was initially created for the resource group.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty" azure:"ro"`

	// READ-ONLY; GUID representing the operation id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The datetime when the topology was last modified.
	LastModified *time.Time `json:"lastModified,omitempty" azure:"ro"`

	// A list of topology resources.
	Resources *[]TopologyResource `json:"resources,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Topology.
func (t Topology) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if t.CreatedDateTime != nil {
		objectMap["createdDateTime"] = (*timeRFC3339)(t.CreatedDateTime)
	}
	if t.ID != nil {
		objectMap["id"] = t.ID
	}
	if t.LastModified != nil {
		objectMap["lastModified"] = (*timeRFC3339)(t.LastModified)
	}
	if t.Resources != nil {
		objectMap["resources"] = t.Resources
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Topology.
func (t *Topology) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				t.CreatedDateTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "id":
			if val != nil {
				err = json.Unmarshal(*val, &t.ID)
			}
			delete(rawMsg, key)
		case "lastModified":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				t.LastModified = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "resources":
			if val != nil {
				err = json.Unmarshal(*val, &t.Resources)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Resources that have an association with the parent resource.
type TopologyAssociation struct {
	// The association type of the child resource to the parent resource.
	AssociationType *AssociationType `json:"associationType,omitempty"`

	// The name of the resource that is associated with the parent resource.
	Name *string `json:"name,omitempty"`

	// The ID of the resource that is associated with the parent resource.
	ResourceID *string `json:"resourceId,omitempty"`
}

// Parameters that define the representation of topology.
type TopologyParameters struct {
	// The name of the target resource group to perform topology on.
	TargetResourceGroupName *string `json:"targetResourceGroupName,omitempty"`

	// The reference to the Subnet resource.
	TargetSubnet *SubResource `json:"targetSubnet,omitempty"`

	// The reference to the Virtual Network resource.
	TargetVirtualNetwork *SubResource `json:"targetVirtualNetwork,omitempty"`
}

// The network resource topology information for the given resource group.
type TopologyResource struct {
	// Holds the associations the resource has with other resources in the resource group.
	Associations *[]TopologyAssociation `json:"associations,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty"`

	// Resource location.
	Location *string `json:"location,omitempty"`

	// Name of the resource.
	Name *string `json:"name,omitempty"`
}

// TopologyResponse is the response envelope for operations that return a Topology type.
type TopologyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Topology of the specified resource group.
	Topology *Topology
}

// Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsConfigurationProperties struct {
	// Flag to enable/disable traffic analytics.
	Enabled *bool `json:"enabled,omitempty"`

	// The interval in minutes which would decide how frequently TA service should do flow analytics.
	TrafficAnalyticsInterval *int32 `json:"trafficAnalyticsInterval,omitempty"`

	// The resource guid of the attached workspace.
	WorkspaceID *string `json:"workspaceId,omitempty"`

	// The location of the attached workspace.
	WorkspaceRegion *string `json:"workspaceRegion,omitempty"`

	// Resource Id of the attached workspace.
	WorkspaceResourceID *string `json:"workspaceResourceId,omitempty"`
}

// Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsProperties struct {
	// Parameters that define the configuration of traffic analytics.
	NetworkWatcherFlowAnalyticsConfiguration *TrafficAnalyticsConfigurationProperties `json:"networkWatcherFlowAnalyticsConfiguration,omitempty"`
}

// An traffic selector policy for a virtual network gateway connection.
type TrafficSelectorPolicy struct {
	// A collection of local address spaces in CIDR format.
	LocalAddressRanges *[]string `json:"localAddressRanges,omitempty"`

	// A collection of remote address spaces in CIDR format.
	RemoteAddressRanges *[]string `json:"remoteAddressRanges,omitempty"`
}

// Information gained from troubleshooting of specified resource.
type TroubleshootingDetails struct {
	// Details on troubleshooting results.
	Detail *string `json:"detail,omitempty"`

	// The id of the get troubleshoot operation.
	ID *string `json:"id,omitempty"`

	// Reason type of failure.
	ReasonType *string `json:"reasonType,omitempty"`

	// List of recommended actions.
	RecommendedActions *[]TroubleshootingRecommendedActions `json:"recommendedActions,omitempty"`

	// A summary of troubleshooting.
	Summary *string `json:"summary,omitempty"`
}

// Parameters that define the resource to troubleshoot.
type TroubleshootingParameters struct {
	// Properties of the troubleshooting resource.
	Properties *TroubleshootingProperties `json:"properties,omitempty"`

	// The target resource to troubleshoot.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// Storage location provided for troubleshoot.
type TroubleshootingProperties struct {
	// The ID for the storage account to save the troubleshoot result.
	StorageID *string `json:"storageId,omitempty"`

	// The path to the blob to save the troubleshoot result in.
	StoragePath *string `json:"storagePath,omitempty"`
}

// Recommended actions based on discovered issues.
type TroubleshootingRecommendedActions struct {
	// ID of the recommended action.
	ActionID *string `json:"actionId,omitempty"`

	// Description of recommended actions.
	ActionText *string `json:"actionText,omitempty"`

	// The uri linking to a documentation for the recommended troubleshooting actions.
	ActionURI *string `json:"actionUri,omitempty"`

	// The information from the URI for the recommended troubleshooting actions.
	ActionURIText *string `json:"actionUriText,omitempty"`
}

// Troubleshooting information gained from specified resource.
type TroubleshootingResult struct {
	// The result code of the troubleshooting.
	Code *string `json:"code,omitempty"`

	// The end time of the troubleshooting.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Information from troubleshooting.
	Results *[]TroubleshootingDetails `json:"results,omitempty"`

	// The start time of the troubleshooting.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TroubleshootingResult.
func (t TroubleshootingResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if t.Code != nil {
		objectMap["code"] = t.Code
	}
	if t.EndTime != nil {
		objectMap["endTime"] = (*timeRFC3339)(t.EndTime)
	}
	if t.Results != nil {
		objectMap["results"] = t.Results
	}
	if t.StartTime != nil {
		objectMap["startTime"] = (*timeRFC3339)(t.StartTime)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TroubleshootingResult.
func (t *TroubleshootingResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			if val != nil {
				err = json.Unmarshal(*val, &t.Code)
			}
			delete(rawMsg, key)
		case "endTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				t.EndTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "results":
			if val != nil {
				err = json.Unmarshal(*val, &t.Results)
			}
			delete(rawMsg, key)
		case "startTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				t.StartTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TroubleshootingResultPollerResponse is the response envelope for operations that asynchronously return a TroubleshootingResult type.
type TroubleshootingResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*TroubleshootingResultResponse, error)

	// Poller contains an initialized poller.
	Poller TroubleshootingResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TroubleshootingResultResponse is the response envelope for operations that return a TroubleshootingResult type.
type TroubleshootingResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Troubleshooting information gained from specified resource.
	TroubleshootingResult *TroubleshootingResult
}

// VirtualNetworkGatewayConnection properties.
type TunnelConnectionHealth struct {
	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; The Egress Bytes Transferred in this connection.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The Ingress Bytes Transferred in this connection.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The time at which connection was established in Utc format.
	LastConnectionEstablishedUTCTime *string `json:"lastConnectionEstablishedUtcTime,omitempty" azure:"ro"`

	// READ-ONLY; Tunnel name.
	Tunnel *string `json:"tunnel,omitempty" azure:"ro"`
}

// Details of UnprepareNetworkPolicies for Subnet.
type UnprepareNetworkPoliciesRequest struct {
	// The name of the service for which subnet is being unprepared for.
	ServiceName *string `json:"serviceName,omitempty"`
}

// The network resource usage.
type Usage struct {
	// The current value of the usage.
	CurrentValue *int64 `json:"currentValue,omitempty"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// The limit of usage.
	Limit *int64 `json:"limit,omitempty"`

	// The name of the type of usage.
	Name *UsageName `json:"name,omitempty"`

	// An enum describing the unit of measurement.
	Unit *UsageUnit `json:"unit,omitempty"`
}

// The usage names.
type UsageName struct {
	// A localized string describing the resource name.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// A string describing the resource name.
	Value *string `json:"value,omitempty"`
}

// UsagesListOptions contains the optional parameters for the Usages.List method.
type UsagesListOptions struct {
	// placeholder for future optional parameters
}

// The list usages operation response.
type UsagesListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The list network resource usages.
	Value *[]Usage `json:"value,omitempty"`
}

// UsagesListResultResponse is the response envelope for operations that return a UsagesListResult type.
type UsagesListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The list usages operation response.
	UsagesListResult *UsagesListResult
}

// Describes a Virtual Machine.
type VM struct {
	Resource
}

// Parameters that define the IP flow to be verified.
type VerificationIPFlowParameters struct {
	// The direction of the packet represented as a 5-tuple.
	Direction *Direction `json:"direction,omitempty"`

	// The local IP address. Acceptable values are valid IPv4 addresses.
	LocalIPAddress *string `json:"localIPAddress,omitempty"`

	// The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
	LocalPort *string `json:"localPort,omitempty"`

	// Protocol to be verified on.
	Protocol *IPFlowProtocol `json:"protocol,omitempty"`

	// The remote IP address. Acceptable values are valid IPv4 addresses.
	RemoteIPAddress *string `json:"remoteIPAddress,omitempty"`

	// The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.
	RemotePort *string `json:"remotePort,omitempty"`

	// The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).
	TargetNicResourceID *string `json:"targetNicResourceId,omitempty"`

	// The ID of the target resource to perform next-hop on.
	TargetResourceID *string `json:"targetResourceId,omitempty"`
}

// Results of IP flow verification on the target resource.
type VerificationIPFlowResult struct {
	// Indicates whether the traffic is allowed or denied.
	Access *Access `json:"access,omitempty"`

	// Name of the rule. If input is not matched against any security rule, it is not displayed.
	RuleName *string `json:"ruleName,omitempty"`
}

// VerificationIPFlowResultPollerResponse is the response envelope for operations that asynchronously return a VerificationIPFlowResult type.
type VerificationIPFlowResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VerificationIPFlowResultResponse, error)

	// Poller contains an initialized poller.
	Poller VerificationIPFlowResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VerificationIPFlowResultResponse is the response envelope for operations that return a VerificationIPFlowResult type.
type VerificationIPFlowResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Results of IP flow verification on the target resource.
	VerificationIPFlowResult *VerificationIPFlowResult
}

// Network Virtual Appliance NIC properties.
type VirtualApplianceNicProperties struct {
	// READ-ONLY; NIC name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Private IP address.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" azure:"ro"`

	// READ-ONLY; Public IP address.
	PublicIPAddress *string `json:"publicIpAddress,omitempty" azure:"ro"`
}

// Network Virtual Appliance Sku Properties.
type VirtualApplianceSKUProperties struct {
	// Virtual Appliance Scale Unit.
	BundledScaleUnit *string `json:"bundledScaleUnit,omitempty"`

	// Virtual Appliance Version.
	MarketPlaceVersion *string `json:"marketPlaceVersion,omitempty"`

	// Virtual Appliance Vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// VirtualApplianceSKUsGetOptions contains the optional parameters for the VirtualApplianceSKUs.Get method.
type VirtualApplianceSKUsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualApplianceSKUsListOptions contains the optional parameters for the VirtualApplianceSKUs.List method.
type VirtualApplianceSKUsListOptions struct {
	// placeholder for future optional parameters
}

// Virtual Appliance Site resource.
type VirtualApplianceSite struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the virtual appliance site.
	Name *string `json:"name,omitempty"`

	// The properties of the Virtual Appliance Sites.
	Properties *VirtualApplianceSiteProperties `json:"properties,omitempty"`

	// READ-ONLY; Site type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// VirtualApplianceSitePollerResponse is the response envelope for operations that asynchronously return a VirtualApplianceSite type.
type VirtualApplianceSitePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualApplianceSiteResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualApplianceSitePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the rule group.
type VirtualApplianceSiteProperties struct {
	// Address Prefix.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// Office 365 Policy.
	O365Policy *Office365PolicyProperties `json:"o365Policy,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// VirtualApplianceSiteResponse is the response envelope for operations that return a VirtualApplianceSite type.
type VirtualApplianceSiteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Appliance Site resource.
	VirtualApplianceSite *VirtualApplianceSite
}

// VirtualApplianceSitesCreateOrUpdateOptions contains the optional parameters for the VirtualApplianceSites.CreateOrUpdate method.
type VirtualApplianceSitesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualApplianceSitesDeleteOptions contains the optional parameters for the VirtualApplianceSites.Delete method.
type VirtualApplianceSitesDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualApplianceSitesGetOptions contains the optional parameters for the VirtualApplianceSites.Get method.
type VirtualApplianceSitesGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualApplianceSitesListOptions contains the optional parameters for the VirtualApplianceSites.List method.
type VirtualApplianceSitesListOptions struct {
	// placeholder for future optional parameters
}

// VirtualHub Resource.
type VirtualHub struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the virtual hub.
	Properties *VirtualHubProperties `json:"properties,omitempty"`
}

// VirtualHubBgpConnectionCreateOrUpdateOptions contains the optional parameters for the VirtualHubBgpConnection.CreateOrUpdate method.
type VirtualHubBgpConnectionCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubBgpConnectionDeleteOptions contains the optional parameters for the VirtualHubBgpConnection.Delete method.
type VirtualHubBgpConnectionDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubBgpConnectionGetOptions contains the optional parameters for the VirtualHubBgpConnection.Get method.
type VirtualHubBgpConnectionGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubBgpConnectionsListAdvertisedRoutesOptions contains the optional parameters for the VirtualHubBgpConnections.ListAdvertisedRoutes method.
type VirtualHubBgpConnectionsListAdvertisedRoutesOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubBgpConnectionsListLearnedRoutesOptions contains the optional parameters for the VirtualHubBgpConnections.ListLearnedRoutes method.
type VirtualHubBgpConnectionsListLearnedRoutesOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubBgpConnectionsListOptions contains the optional parameters for the VirtualHubBgpConnections.List method.
type VirtualHubBgpConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// The effective route configured on the virtual hub or specified resource.
type VirtualHubEffectiveRoute struct {
	// The list of address prefixes.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`

	// The ASPath of this route.
	AsPath *string `json:"asPath,omitempty"`

	// The type of the next hop.
	NextHopType *string `json:"nextHopType,omitempty"`

	// The list of next hops.
	NextHops *[]string `json:"nextHops,omitempty"`

	// The origin of this route.
	RouteOrigin *string `json:"routeOrigin,omitempty"`
}

// EffectiveRoutes List.
type VirtualHubEffectiveRouteList struct {
	// The list of effective routes configured on the virtual hub or the specified resource.
	Value *[]VirtualHubEffectiveRoute `json:"value,omitempty"`
}

// Virtual Hub identifier.
type VirtualHubID struct {
	// The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and the ExpressRoute gateway resource
	// reside in the same subscription.
	ID *string `json:"id,omitempty"`
}

// VirtualHubIPConfigurationCreateOrUpdateOptions contains the optional parameters for the VirtualHubIPConfiguration.CreateOrUpdate method.
type VirtualHubIPConfigurationCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubIPConfigurationDeleteOptions contains the optional parameters for the VirtualHubIPConfiguration.Delete method.
type VirtualHubIPConfigurationDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubIPConfigurationGetOptions contains the optional parameters for the VirtualHubIPConfiguration.Get method.
type VirtualHubIPConfigurationGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubIPConfigurationListOptions contains the optional parameters for the VirtualHubIPConfiguration.List method.
type VirtualHubIPConfigurationListOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubPollerResponse is the response envelope for operations that asynchronously return a VirtualHub type.
type VirtualHubPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualHubResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualHubPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VirtualHub.
type VirtualHubProperties struct {
	// Address-prefix for this VirtualHub.
	AddressPrefix *string `json:"addressPrefix,omitempty"`

	// Flag to control transit for VirtualRouter hub.
	AllowBranchToBranchTraffic *bool `json:"allowBranchToBranchTraffic,omitempty"`

	// The azureFirewall associated with this VirtualHub.
	AzureFirewall *SubResource `json:"azureFirewall,omitempty"`

	// READ-ONLY; List of references to Bgp Connections.
	BgpConnections *[]SubResource `json:"bgpConnections,omitempty" azure:"ro"`

	// The expressRouteGateway associated with this VirtualHub.
	ExpressRouteGateway *SubResource `json:"expressRouteGateway,omitempty"`

	// READ-ONLY; List of references to IpConfigurations.
	IPConfigurations *[]SubResource `json:"ipConfigurations,omitempty" azure:"ro"`

	// The P2SVpnGateway associated with this VirtualHub.
	P2SVpnGateway *SubResource `json:"p2SVpnGateway,omitempty"`

	// READ-ONLY; The provisioning state of the virtual hub resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The routeTable associated with this virtual hub.
	RouteTable *VirtualHubRouteTable `json:"routeTable,omitempty"`

	// READ-ONLY; The routing state.
	RoutingState *RoutingState `json:"routingState,omitempty" azure:"ro"`

	// The sku of this VirtualHub.
	SKU *string `json:"sku,omitempty"`

	// The securityPartnerProvider associated with this VirtualHub.
	SecurityPartnerProvider *SubResource `json:"securityPartnerProvider,omitempty"`

	// The Security Provider name.
	SecurityProviderName *string `json:"securityProviderName,omitempty"`

	// List of all virtual hub route table v2s associated with this VirtualHub.
	VirtualHubRouteTableV2S *[]VirtualHubRouteTableV2 `json:"virtualHubRouteTableV2s,omitempty"`

	// VirtualRouter ASN.
	VirtualRouterAsn *int64 `json:"virtualRouterAsn,omitempty"`

	// VirtualRouter IPs.
	VirtualRouterIPs *[]string `json:"virtualRouterIps,omitempty"`

	// The VirtualWAN to which the VirtualHub belongs.
	VirtualWan *SubResource `json:"virtualWan,omitempty"`

	// The VpnGateway associated with this VirtualHub.
	VpnGateway *SubResource `json:"vpnGateway,omitempty"`
}

// VirtualHubResponse is the response envelope for operations that return a VirtualHub type.
type VirtualHubResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualHub Resource.
	VirtualHub *VirtualHub
}

// VirtualHub route.
type VirtualHubRoute struct {
	// List of all addressPrefixes.
	AddressPrefixes *[]string `json:"addressPrefixes,omitempty"`

	// NextHop ip address.
	NextHopIPAddress *string `json:"nextHopIpAddress,omitempty"`
}

// VirtualHub route table.
type VirtualHubRouteTable struct {
	// List of all routes.
	Routes *[]VirtualHubRoute `json:"routes,omitempty"`
}

// VirtualHubRouteTableV2 Resource.
type VirtualHubRouteTableV2 struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the virtual hub route table v2.
	Properties *VirtualHubRouteTableV2Properties `json:"properties,omitempty"`
}

// VirtualHubRouteTableV2PollerResponse is the response envelope for operations that asynchronously return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2PollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualHubRouteTableV2Response, error)

	// Poller contains an initialized poller.
	Poller VirtualHubRouteTableV2Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VirtualHubRouteTableV2.
type VirtualHubRouteTableV2Properties struct {
	// List of all connections attached to this route table v2.
	AttachedConnections *[]string `json:"attachedConnections,omitempty"`

	// READ-ONLY; The provisioning state of the virtual hub route table v2 resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// List of all routes.
	Routes *[]VirtualHubRouteV2 `json:"routes,omitempty"`
}

// VirtualHubRouteTableV2Response is the response envelope for operations that return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualHubRouteTableV2 Resource.
	VirtualHubRouteTableV2 *VirtualHubRouteTableV2
}

// VirtualHubRouteTableV2SCreateOrUpdateOptions contains the optional parameters for the VirtualHubRouteTableV2S.CreateOrUpdate method.
type VirtualHubRouteTableV2SCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubRouteTableV2SDeleteOptions contains the optional parameters for the VirtualHubRouteTableV2S.Delete method.
type VirtualHubRouteTableV2SDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubRouteTableV2SGetOptions contains the optional parameters for the VirtualHubRouteTableV2S.Get method.
type VirtualHubRouteTableV2SGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubRouteTableV2SListOptions contains the optional parameters for the VirtualHubRouteTableV2S.List method.
type VirtualHubRouteTableV2SListOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubRouteTableV2 route.
type VirtualHubRouteV2 struct {
	// The type of destinations.
	DestinationType *string `json:"destinationType,omitempty"`

	// List of all destinations.
	Destinations *[]string `json:"destinations,omitempty"`

	// The type of next hops.
	NextHopType *string `json:"nextHopType,omitempty"`

	// NextHops ip address.
	NextHops *[]string `json:"nextHops,omitempty"`
}

// VirtualHubsCreateOrUpdateOptions contains the optional parameters for the VirtualHubs.CreateOrUpdate method.
type VirtualHubsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubsDeleteOptions contains the optional parameters for the VirtualHubs.Delete method.
type VirtualHubsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubsGetEffectiveVirtualHubRoutesOptions contains the optional parameters for the VirtualHubs.GetEffectiveVirtualHubRoutes method.
type VirtualHubsGetEffectiveVirtualHubRoutesOptions struct {
	// Parameters supplied to get the effective routes for a specific resource.
	EffectiveRoutesParameters *EffectiveRoutesParameters
}

// VirtualHubsGetOptions contains the optional parameters for the VirtualHubs.Get method.
type VirtualHubsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubsListByResourceGroupOptions contains the optional parameters for the VirtualHubs.ListByResourceGroup method.
type VirtualHubsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubsListOptions contains the optional parameters for the VirtualHubs.List method.
type VirtualHubsListOptions struct {
	// placeholder for future optional parameters
}

// VirtualHubsUpdateTagsOptions contains the optional parameters for the VirtualHubs.UpdateTags method.
type VirtualHubsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Virtual Network resource.
type VirtualNetwork struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Properties of the virtual network.
	Properties *VirtualNetworkPropertiesFormat `json:"properties,omitempty"`
}

// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
type VirtualNetworkBgpCommunities struct {
	// READ-ONLY; The BGP community associated with the region of the virtual network.
	RegionalCommunity *string `json:"regionalCommunity,omitempty" azure:"ro"`

	// The BGP community associated with the virtual network.
	VirtualNetworkCommunity *string `json:"virtualNetworkCommunity,omitempty"`
}

// A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
type VirtualNetworkConnectionGatewayReference struct {
	// The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
	ID *string `json:"id,omitempty"`
}

// A common class for general resource information.
type VirtualNetworkGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the virtual network gateway.
	Properties *VirtualNetworkGatewayPropertiesFormat `json:"properties,omitempty"`
}

// A common class for general resource information.
type VirtualNetworkGatewayConnection struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the virtual network gateway connection.
	Properties *VirtualNetworkGatewayConnectionPropertiesFormat `json:"properties,omitempty"`
}

// A common class for general resource information.
type VirtualNetworkGatewayConnectionListEntity struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the virtual network gateway connection.
	Properties *VirtualNetworkGatewayConnectionListEntityPropertiesFormat `json:"properties,omitempty"`
}

// VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionListEntityPropertiesFormat struct {
	// The authorizationKey.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// The connection mode for this connection.
	ConnectionMode *VirtualNetworkGatewayConnectionMode `json:"connectionMode,omitempty"`

	// Connection protocol used for this connection.
	ConnectionProtocol *VirtualNetworkGatewayConnectionProtocol `json:"connectionProtocol,omitempty"`

	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// Gateway connection type.
	ConnectionType *VirtualNetworkGatewayConnectionType `json:"connectionType,omitempty"`

	// READ-ONLY; The egress bytes transferred in this connection.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool `json:"expressRouteGatewayBypass,omitempty"`

	// The IPSec Policies to be considered by this connection.
	IPsecPolicies *[]IPsecPolicy `json:"ipsecPolicies,omitempty"`

	// READ-ONLY; The ingress bytes transferred in this connection.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// The reference to local network gateway resource.
	LocalNetworkGateway2 *VirtualNetworkConnectionGatewayReference `json:"localNetworkGateway2,omitempty"`

	// The reference to peerings resource.
	Peer *SubResource `json:"peer,omitempty"`

	// READ-ONLY; The provisioning state of the virtual network gateway connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the virtual network gateway connection resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// The routing weight.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`

	// The IPSec shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	// The Traffic Selector Policies to be considered by this connection.
	TrafficSelectorPolicies *[]TrafficSelectorPolicy `json:"trafficSelectorPolicies,omitempty"`

	// READ-ONLY; Collection of all tunnels' connection health status.
	TunnelConnectionStatus *[]TunnelConnectionHealth `json:"tunnelConnectionStatus,omitempty" azure:"ro"`

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway1 *VirtualNetworkConnectionGatewayReference `json:"virtualNetworkGateway1,omitempty"`

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *VirtualNetworkConnectionGatewayReference `json:"virtualNetworkGateway2,omitempty"`
}

// Response for the ListVirtualNetworkGatewayConnections API service call.
type VirtualNetworkGatewayConnectionListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
	Value *[]VirtualNetworkGatewayConnection `json:"value,omitempty"`
}

// VirtualNetworkGatewayConnectionListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayConnectionListResult type.
type VirtualNetworkGatewayConnectionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworkGatewayConnections API service call.
	VirtualNetworkGatewayConnectionListResult *VirtualNetworkGatewayConnectionListResult
}

// VirtualNetworkGatewayConnectionPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualNetworkGatewayConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkGatewayConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionPropertiesFormat struct {
	// The authorizationKey.
	AuthorizationKey *string `json:"authorizationKey,omitempty"`

	// The connection mode for this connection.
	ConnectionMode *VirtualNetworkGatewayConnectionMode `json:"connectionMode,omitempty"`

	// Connection protocol used for this connection.
	ConnectionProtocol *VirtualNetworkGatewayConnectionProtocol `json:"connectionProtocol,omitempty"`

	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// Gateway connection type.
	ConnectionType *VirtualNetworkGatewayConnectionType `json:"connectionType,omitempty"`

	// The dead peer detection timeout of this connection in seconds.
	DpdTimeoutSeconds *int32 `json:"dpdTimeoutSeconds,omitempty"`

	// READ-ONLY; The egress bytes transferred in this connection.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool `json:"expressRouteGatewayBypass,omitempty"`

	// The IPSec Policies to be considered by this connection.
	IPsecPolicies *[]IPsecPolicy `json:"ipsecPolicies,omitempty"`

	// READ-ONLY; The ingress bytes transferred in this connection.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// The reference to local network gateway resource.
	LocalNetworkGateway2 *LocalNetworkGateway `json:"localNetworkGateway2,omitempty"`

	// The reference to peerings resource.
	Peer *SubResource `json:"peer,omitempty"`

	// READ-ONLY; The provisioning state of the virtual network gateway connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the virtual network gateway connection resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// The routing weight.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`

	// The IPSec shared key.
	SharedKey *string `json:"sharedKey,omitempty"`

	// The Traffic Selector Policies to be considered by this connection.
	TrafficSelectorPolicies *[]TrafficSelectorPolicy `json:"trafficSelectorPolicies,omitempty"`

	// READ-ONLY; Collection of all tunnels' connection health status.
	TunnelConnectionStatus *[]TunnelConnectionHealth `json:"tunnelConnectionStatus,omitempty" azure:"ro"`

	// Use private local Azure IP for the connection.
	UseLocalAzureIPAddress *bool `json:"useLocalAzureIpAddress,omitempty"`

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway1 *VirtualNetworkGateway `json:"virtualNetworkGateway1,omitempty"`

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *VirtualNetworkGateway `json:"virtualNetworkGateway2,omitempty"`
}

// VirtualNetworkGatewayConnectionResponse is the response envelope for operations that return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A common class for general resource information.
	VirtualNetworkGatewayConnection *VirtualNetworkGatewayConnection
}

// VirtualNetworkGatewayConnectionsCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkGatewayConnections.CreateOrUpdate method.
type VirtualNetworkGatewayConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsDeleteOptions contains the optional parameters for the VirtualNetworkGatewayConnections.Delete method.
type VirtualNetworkGatewayConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsGetOptions contains the optional parameters for the VirtualNetworkGatewayConnections.Get method.
type VirtualNetworkGatewayConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsGetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.GetSharedKey method.
type VirtualNetworkGatewayConnectionsGetSharedKeyOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsListOptions contains the optional parameters for the VirtualNetworkGatewayConnections.List method.
type VirtualNetworkGatewayConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsResetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.ResetSharedKey method.
type VirtualNetworkGatewayConnectionsResetSharedKeyOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsSetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.SetSharedKey method.
type VirtualNetworkGatewayConnectionsSetSharedKeyOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsStartPacketCaptureOptions contains the optional parameters for the VirtualNetworkGatewayConnections.StartPacketCapture
// method.
type VirtualNetworkGatewayConnectionsStartPacketCaptureOptions struct {
	// Virtual network gateway packet capture parameters supplied to start packet capture on gateway connection.
	Parameters *VpnPacketCaptureStartParameters
}

// VirtualNetworkGatewayConnectionsStopPacketCaptureOptions contains the optional parameters for the VirtualNetworkGatewayConnections.StopPacketCapture
// method.
type VirtualNetworkGatewayConnectionsStopPacketCaptureOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewayConnectionsUpdateTagsOptions contains the optional parameters for the VirtualNetworkGatewayConnections.UpdateTags method.
type VirtualNetworkGatewayConnectionsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// IP configuration for virtual network gateway.
type VirtualNetworkGatewayIPConfiguration struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the virtual network gateway ip configuration.
	Properties *VirtualNetworkGatewayIPConfigurationPropertiesFormat `json:"properties,omitempty"`
}

// Properties of VirtualNetworkGatewayIPConfiguration.
type VirtualNetworkGatewayIPConfigurationPropertiesFormat struct {
	// READ-ONLY; Private IP Address for this gateway.
	PrivateIPAddress *string `json:"privateIPAddress,omitempty" azure:"ro"`

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`

	// READ-ONLY; The provisioning state of the virtual network gateway IP configuration resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the public IP resource.
	PublicIPAddress *SubResource `json:"publicIPAddress,omitempty"`

	// The reference to the subnet resource.
	Subnet *SubResource `json:"subnet,omitempty"`
}

// Response for the VirtualNetworkGatewayListConnections API service call.
type VirtualNetworkGatewayListConnectionsResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
	Value *[]VirtualNetworkGatewayConnectionListEntity `json:"value,omitempty"`
}

// VirtualNetworkGatewayListConnectionsResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListConnectionsResult type.
type VirtualNetworkGatewayListConnectionsResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the VirtualNetworkGatewayListConnections API service call.
	VirtualNetworkGatewayListConnectionsResult *VirtualNetworkGatewayListConnectionsResult
}

// Response for the ListVirtualNetworkGateways API service call.
type VirtualNetworkGatewayListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// A list of VirtualNetworkGateway resources that exists in a resource group.
	Value *[]VirtualNetworkGateway `json:"value,omitempty"`
}

// VirtualNetworkGatewayListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListResult type.
type VirtualNetworkGatewayListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworkGateways API service call.
	VirtualNetworkGatewayListResult *VirtualNetworkGatewayListResult
}

// VirtualNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGateway type.
type VirtualNetworkGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualNetworkGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkGateway properties.
type VirtualNetworkGatewayPropertiesFormat struct {
	// ActiveActive flag.
	Active *bool `json:"activeActive,omitempty"`

	// Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	// The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and
	// VpnClient.
	CustomRoutes *AddressSpace `json:"customRoutes,omitempty"`

	// Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// Whether dns forwarding is enabled or not.
	EnableDNSForwarding *bool `json:"enableDnsForwarding,omitempty"`

	// Whether private IP needs to be enabled on this gateway for connections or not.
	EnablePrivateIPAddress *bool `json:"enablePrivateIpAddress,omitempty"`

	// The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing
	// default site setting.
	GatewayDefaultSite *SubResource `json:"gatewayDefaultSite,omitempty"`

	// The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayType `json:"gatewayType,omitempty"`

	// IP configurations for virtual network gateway.
	IPConfigurations *[]VirtualNetworkGatewayIPConfiguration `json:"ipConfigurations,omitempty"`

	// READ-ONLY; The IP address allocated by the gateway to which dns requests can be sent.
	InboundDNSForwardingEndpoint *string `json:"inboundDnsForwardingEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the virtual network gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the virtual network gateway resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
	SKU *VirtualNetworkGatewaySKU `json:"sku,omitempty"`

	// MAS FIJI customer vnet resource id. VirtualNetworkGateway of type local gateway is associated with the customer vnet.
	VirtualNetworkExtendedLocationResourceID *string `json:"virtualNetworkExtendedLocationResourceId,omitempty"`

	// The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
	VpnClientConfiguration *VpnClientConfiguration `json:"vpnClientConfiguration,omitempty"`

	// The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
	VpnGatewayGeneration *VpnGatewayGeneration `json:"vpnGatewayGeneration,omitempty"`

	// The type of this virtual network gateway.
	VpnType *VpnType `json:"vpnType,omitempty"`
}

// VirtualNetworkGatewayResponse is the response envelope for operations that return a VirtualNetworkGateway type.
type VirtualNetworkGatewayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A common class for general resource information.
	VirtualNetworkGateway *VirtualNetworkGateway
}

// VirtualNetworkGatewaySku details.
type VirtualNetworkGatewaySKU struct {
	// READ-ONLY; The capacity.
	Capacity *int32 `json:"capacity,omitempty" azure:"ro"`

	// Gateway SKU name.
	Name *VirtualNetworkGatewaySKUName `json:"name,omitempty"`

	// Gateway SKU tier.
	Tier *VirtualNetworkGatewaySKUTier `json:"tier,omitempty"`
}

// VirtualNetworkGatewaysCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkGateways.CreateOrUpdate method.
type VirtualNetworkGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysDeleteOptions contains the optional parameters for the VirtualNetworkGateways.Delete method.
type VirtualNetworkGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOptions contains the optional parameters for the VirtualNetworkGateways.DisconnectVirtualNetworkGatewayVpnConnections
// method.
type VirtualNetworkGatewaysDisconnectVirtualNetworkGatewayVpnConnectionsOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGenerateVpnProfileOptions contains the optional parameters for the VirtualNetworkGateways.GenerateVpnProfile method.
type VirtualNetworkGatewaysGenerateVpnProfileOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGeneratevpnclientpackageOptions contains the optional parameters for the VirtualNetworkGateways.Generatevpnclientpackage method.
type VirtualNetworkGatewaysGeneratevpnclientpackageOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetAdvertisedRoutesOptions contains the optional parameters for the VirtualNetworkGateways.GetAdvertisedRoutes method.
type VirtualNetworkGatewaysGetAdvertisedRoutesOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetBgpPeerStatusOptions contains the optional parameters for the VirtualNetworkGateways.GetBgpPeerStatus method.
type VirtualNetworkGatewaysGetBgpPeerStatusOptions struct {
	// The IP address of the peer to retrieve the status of.
	Peer *string
}

// VirtualNetworkGatewaysGetLearnedRoutesOptions contains the optional parameters for the VirtualNetworkGateways.GetLearnedRoutes method.
type VirtualNetworkGatewaysGetLearnedRoutesOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetOptions contains the optional parameters for the VirtualNetworkGateways.Get method.
type VirtualNetworkGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetVpnProfilePackageURLOptions contains the optional parameters for the VirtualNetworkGateways.GetVpnProfilePackageURL method.
type VirtualNetworkGatewaysGetVpnProfilePackageURLOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetVpnclientConnectionHealthOptions contains the optional parameters for the VirtualNetworkGateways.GetVpnclientConnectionHealth
// method.
type VirtualNetworkGatewaysGetVpnclientConnectionHealthOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysGetVpnclientIPsecParametersOptions contains the optional parameters for the VirtualNetworkGateways.GetVpnclientIPsecParameters
// method.
type VirtualNetworkGatewaysGetVpnclientIPsecParametersOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysListConnectionsOptions contains the optional parameters for the VirtualNetworkGateways.ListConnections method.
type VirtualNetworkGatewaysListConnectionsOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysListOptions contains the optional parameters for the VirtualNetworkGateways.List method.
type VirtualNetworkGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysResetOptions contains the optional parameters for the VirtualNetworkGateways.Reset method.
type VirtualNetworkGatewaysResetOptions struct {
	// Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway.
	GatewayVip *string
}

// VirtualNetworkGatewaysResetVpnClientSharedKeyOptions contains the optional parameters for the VirtualNetworkGateways.ResetVpnClientSharedKey method.
type VirtualNetworkGatewaysResetVpnClientSharedKeyOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysSetVpnclientIPsecParametersOptions contains the optional parameters for the VirtualNetworkGateways.SetVpnclientIPsecParameters
// method.
type VirtualNetworkGatewaysSetVpnclientIPsecParametersOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysStartPacketCaptureOptions contains the optional parameters for the VirtualNetworkGateways.StartPacketCapture method.
type VirtualNetworkGatewaysStartPacketCaptureOptions struct {
	// Virtual network gateway packet capture parameters supplied to start packet capture on gateway.
	Parameters *VpnPacketCaptureStartParameters
}

// VirtualNetworkGatewaysStopPacketCaptureOptions contains the optional parameters for the VirtualNetworkGateways.StopPacketCapture method.
type VirtualNetworkGatewaysStopPacketCaptureOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysSupportedVpnDevicesOptions contains the optional parameters for the VirtualNetworkGateways.SupportedVpnDevices method.
type VirtualNetworkGatewaysSupportedVpnDevicesOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysUpdateTagsOptions contains the optional parameters for the VirtualNetworkGateways.UpdateTags method.
type VirtualNetworkGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptions contains the optional parameters for the VirtualNetworkGateways.VpnDeviceConfigurationScript
// method.
type VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptions struct {
	// placeholder for future optional parameters
}

// Response for the ListVirtualNetworks API service call.
type VirtualNetworkListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of VirtualNetwork resources in a resource group.
	Value *[]VirtualNetwork `json:"value,omitempty"`
}

// VirtualNetworkListResultResponse is the response envelope for operations that return a VirtualNetworkListResult type.
type VirtualNetworkListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworks API service call.
	VirtualNetworkListResult *VirtualNetworkListResult
}

// Response for the virtual networks GetUsage API service call.
type VirtualNetworkListUsageResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// READ-ONLY; VirtualNetwork usage stats.
	Value *[]VirtualNetworkUsage `json:"value,omitempty" azure:"ro"`
}

// VirtualNetworkListUsageResultResponse is the response envelope for operations that return a VirtualNetworkListUsageResult type.
type VirtualNetworkListUsageResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the virtual networks GetUsage API service call.
	VirtualNetworkListUsageResult *VirtualNetworkListUsageResult
}

// Peerings in a virtual network resource.
type VirtualNetworkPeering struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the virtual network peering.
	Properties *VirtualNetworkPeeringPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.
type VirtualNetworkPeeringListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The peerings in a virtual network.
	Value *[]VirtualNetworkPeering `json:"value,omitempty"`
}

// VirtualNetworkPeeringListResultResponse is the response envelope for operations that return a VirtualNetworkPeeringListResult type.
type VirtualNetworkPeeringListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.
	VirtualNetworkPeeringListResult *VirtualNetworkPeeringListResult
}

// VirtualNetworkPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkPeering type.
type VirtualNetworkPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualNetworkPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the virtual network peering.
type VirtualNetworkPeeringPropertiesFormat struct {
	// Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool `json:"allowForwardedTraffic,omitempty"`

	// If gateway links can be used in remote virtual networking to link to this virtual network.
	AllowGatewayTransit *bool `json:"allowGatewayTransit,omitempty"`

	// Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
	AllowVirtualNetworkAccess *bool `json:"allowVirtualNetworkAccess,omitempty"`

	// The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringState `json:"peeringState,omitempty"`

	// The peering sync status of the virtual network peering.
	PeeringSyncLevel *VirtualNetworkPeeringLevel `json:"peeringSyncLevel,omitempty"`

	// READ-ONLY; The provisioning state of the virtual network peering resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The reference to the address space peered with the remote virtual network.
	RemoteAddressSpace *AddressSpace `json:"remoteAddressSpace,omitempty"`

	// The reference to the remote virtual network's Bgp Communities.
	RemoteBgpCommunities *VirtualNetworkBgpCommunities `json:"remoteBgpCommunities,omitempty"`

	// The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the
	// preview and learn more
	// (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork *SubResource `json:"remoteVirtualNetwork,omitempty"`

	// The reference to the current address space of the remote virtual network.
	RemoteVirtualNetworkAddressSpace *AddressSpace `json:"remoteVirtualNetworkAddressSpace,omitempty"`

	// Provided when user wants to sync the peering with address space on the remote virtual network after the address space is updated.
	SyncRemoteAddressSpace *bool `json:"syncRemoteAddressSpace,omitempty"`

	// If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network
	// will use gateways of remote virtual network
	// for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
	UseRemoteGateways *bool `json:"useRemoteGateways,omitempty"`
}

// VirtualNetworkPeeringResponse is the response envelope for operations that return a VirtualNetworkPeering type.
type VirtualNetworkPeeringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Peerings in a virtual network resource.
	VirtualNetworkPeering *VirtualNetworkPeering
}

// VirtualNetworkPeeringsCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkPeerings.CreateOrUpdate method.
type VirtualNetworkPeeringsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkPeeringsDeleteOptions contains the optional parameters for the VirtualNetworkPeerings.Delete method.
type VirtualNetworkPeeringsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkPeeringsGetOptions contains the optional parameters for the VirtualNetworkPeerings.Get method.
type VirtualNetworkPeeringsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkPeeringsListOptions contains the optional parameters for the VirtualNetworkPeerings.List method.
type VirtualNetworkPeeringsListOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkPollerResponse is the response envelope for operations that asynchronously return a VirtualNetwork type.
type VirtualNetworkPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualNetworkResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the virtual network.
type VirtualNetworkPropertiesFormat struct {
	// The AddressSpace that contains an array of IP address ranges that can be used by subnets.
	AddressSpace *AddressSpace `json:"addressSpace,omitempty"`

	// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities `json:"bgpCommunities,omitempty"`

	// The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource `json:"ddosProtectionPlan,omitempty"`

	// The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions `json:"dhcpOptions,omitempty"`

	// Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the
	// resource.
	EnableDdosProtection *bool `json:"enableDdosProtection,omitempty"`

	// Indicates if VM protection is enabled for all the subnets in the virtual network.
	EnableVMProtection *bool `json:"enableVmProtection,omitempty"`

	// Array of IpAllocation which reference this VNET.
	IPAllocations *[]SubResource `json:"ipAllocations,omitempty"`

	// READ-ONLY; The provisioning state of the virtual network resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resourceGuid property of the Virtual Network resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`

	// A list of subnets in a Virtual Network.
	Subnets *[]Subnet `json:"subnets,omitempty"`

	// A list of peerings in a Virtual Network.
	VirtualNetworkPeerings *[]VirtualNetworkPeering `json:"virtualNetworkPeerings,omitempty"`
}

// VirtualNetworkResponse is the response envelope for operations that return a VirtualNetwork type.
type VirtualNetworkResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Network resource.
	VirtualNetwork *VirtualNetwork
}

// Virtual Network Tap resource.
type VirtualNetworkTap struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Virtual Network Tap Properties.
	Properties *VirtualNetworkTapPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListVirtualNetworkTap API service call.
type VirtualNetworkTapListResult struct {
	// The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of VirtualNetworkTaps in a resource group.
	Value *[]VirtualNetworkTap `json:"value,omitempty"`
}

// VirtualNetworkTapListResultResponse is the response envelope for operations that return a VirtualNetworkTapListResult type.
type VirtualNetworkTapListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualNetworkTap API service call.
	VirtualNetworkTapListResult *VirtualNetworkTapListResult
}

// VirtualNetworkTapPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkTap type.
type VirtualNetworkTapPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualNetworkTapResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkTapPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Virtual Network Tap properties.
type VirtualNetworkTapPropertiesFormat struct {
	// The reference to the private IP address on the internal Load Balancer that will receive the tap.
	DestinationLoadBalancerFrontEndIPConfiguration *FrontendIPConfiguration `json:"destinationLoadBalancerFrontEndIPConfiguration,omitempty"`

	// The reference to the private IP Address of the collector nic that will receive the tap.
	DestinationNetworkInterfaceIPConfiguration *NetworkInterfaceIPConfiguration `json:"destinationNetworkInterfaceIPConfiguration,omitempty"`

	// The VXLAN destination port that will receive the tapped traffic.
	DestinationPort *int32 `json:"destinationPort,omitempty"`

	// READ-ONLY; Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
	NetworkInterfaceTapConfigurations *[]NetworkInterfaceTapConfiguration `json:"networkInterfaceTapConfigurations,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the virtual network tap resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The resource GUID property of the virtual network tap resource.
	ResourceGUID *string `json:"resourceGuid,omitempty" azure:"ro"`
}

// VirtualNetworkTapResponse is the response envelope for operations that return a VirtualNetworkTap type.
type VirtualNetworkTapResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Network Tap resource.
	VirtualNetworkTap *VirtualNetworkTap
}

// VirtualNetworkTapsCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkTaps.CreateOrUpdate method.
type VirtualNetworkTapsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkTapsDeleteOptions contains the optional parameters for the VirtualNetworkTaps.Delete method.
type VirtualNetworkTapsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkTapsGetOptions contains the optional parameters for the VirtualNetworkTaps.Get method.
type VirtualNetworkTapsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkTapsListAllOptions contains the optional parameters for the VirtualNetworkTaps.ListAll method.
type VirtualNetworkTapsListAllOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkTapsListByResourceGroupOptions contains the optional parameters for the VirtualNetworkTaps.ListByResourceGroup method.
type VirtualNetworkTapsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkTapsUpdateTagsOptions contains the optional parameters for the VirtualNetworkTaps.UpdateTags method.
type VirtualNetworkTapsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Usage details for subnet.
type VirtualNetworkUsage struct {
	// READ-ONLY; Indicates number of IPs used from the Subnet.
	CurrentValue *float64 `json:"currentValue,omitempty" azure:"ro"`

	// READ-ONLY; Subnet identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Indicates the size of the subnet.
	Limit *float64 `json:"limit,omitempty" azure:"ro"`

	// READ-ONLY; The name containing common and localized value for usage.
	Name *VirtualNetworkUsageName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Usage units. Returns 'Count'.
	Unit *string `json:"unit,omitempty" azure:"ro"`
}

// Usage strings container.
type VirtualNetworkUsageName struct {
	// READ-ONLY; Localized subnet size and usage string.
	LocalizedValue *string `json:"localizedValue,omitempty" azure:"ro"`

	// READ-ONLY; Subnet size and usage string.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// VirtualNetworksCheckIPAddressAvailabilityOptions contains the optional parameters for the VirtualNetworks.CheckIPAddressAvailability method.
type VirtualNetworksCheckIPAddressAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksCreateOrUpdateOptions contains the optional parameters for the VirtualNetworks.CreateOrUpdate method.
type VirtualNetworksCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksDeleteOptions contains the optional parameters for the VirtualNetworks.Delete method.
type VirtualNetworksDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksGetOptions contains the optional parameters for the VirtualNetworks.Get method.
type VirtualNetworksGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// VirtualNetworksListAllOptions contains the optional parameters for the VirtualNetworks.ListAll method.
type VirtualNetworksListAllOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksListOptions contains the optional parameters for the VirtualNetworks.List method.
type VirtualNetworksListOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksListUsageOptions contains the optional parameters for the VirtualNetworks.ListUsage method.
type VirtualNetworksListUsageOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworksUpdateTagsOptions contains the optional parameters for the VirtualNetworks.UpdateTags method.
type VirtualNetworksUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// VirtualRouter Resource.
type VirtualRouter struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the Virtual Router.
	Properties *VirtualRouterPropertiesFormat `json:"properties,omitempty"`
}

// Response for ListVirtualRouters API service call.
type VirtualRouterListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Virtual Routers.
	Value *[]VirtualRouter `json:"value,omitempty"`
}

// VirtualRouterListResultResponse is the response envelope for operations that return a VirtualRouterListResult type.
type VirtualRouterListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualRouters API service call.
	VirtualRouterListResult *VirtualRouterListResult
}

// Virtual Router Peering resource.
type VirtualRouterPeering struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Name of the virtual router peering that is unique within a virtual router.
	Name *string `json:"name,omitempty"`

	// The properties of the Virtual Router Peering.
	Properties *VirtualRouterPeeringProperties `json:"properties,omitempty"`

	// READ-ONLY; Peering type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Response for ListVirtualRouterPeerings API service call.
type VirtualRouterPeeringListResult struct {
	// URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of VirtualRouterPeerings in a VirtualRouter.
	Value *[]VirtualRouterPeering `json:"value,omitempty"`
}

// VirtualRouterPeeringListResultResponse is the response envelope for operations that return a VirtualRouterPeeringListResult type.
type VirtualRouterPeeringListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualRouterPeerings API service call.
	VirtualRouterPeeringListResult *VirtualRouterPeeringListResult
}

// VirtualRouterPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualRouterPeering type.
type VirtualRouterPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualRouterPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualRouterPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Properties of the rule group.
type VirtualRouterPeeringProperties struct {
	// Peer ASN.
	PeerAsn *int64 `json:"peerAsn,omitempty"`

	// Peer IP.
	PeerIP *string `json:"peerIp,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// VirtualRouterPeeringResponse is the response envelope for operations that return a VirtualRouterPeering type.
type VirtualRouterPeeringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Router Peering resource.
	VirtualRouterPeering *VirtualRouterPeering
}

// VirtualRouterPeeringsCreateOrUpdateOptions contains the optional parameters for the VirtualRouterPeerings.CreateOrUpdate method.
type VirtualRouterPeeringsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualRouterPeeringsDeleteOptions contains the optional parameters for the VirtualRouterPeerings.Delete method.
type VirtualRouterPeeringsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualRouterPeeringsGetOptions contains the optional parameters for the VirtualRouterPeerings.Get method.
type VirtualRouterPeeringsGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualRouterPeeringsListOptions contains the optional parameters for the VirtualRouterPeerings.List method.
type VirtualRouterPeeringsListOptions struct {
	// placeholder for future optional parameters
}

// VirtualRouterPollerResponse is the response envelope for operations that asynchronously return a VirtualRouter type.
type VirtualRouterPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualRouterResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualRouterPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Virtual Router definition.
type VirtualRouterPropertiesFormat struct {
	// The Gateway on which VirtualRouter is hosted.
	HostedGateway *SubResource `json:"hostedGateway,omitempty"`

	// The Subnet on which VirtualRouter is hosted.
	HostedSubnet *SubResource `json:"hostedSubnet,omitempty"`

	// READ-ONLY; List of references to VirtualRouterPeerings.
	Peerings *[]SubResource `json:"peerings,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// VirtualRouter ASN.
	VirtualRouterAsn *int64 `json:"virtualRouterAsn,omitempty"`

	// VirtualRouter IPs.
	VirtualRouterIPs *[]string `json:"virtualRouterIps,omitempty"`
}

// VirtualRouterResponse is the response envelope for operations that return a VirtualRouter type.
type VirtualRouterResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualRouter Resource.
	VirtualRouter *VirtualRouter
}

// VirtualRoutersCreateOrUpdateOptions contains the optional parameters for the VirtualRouters.CreateOrUpdate method.
type VirtualRoutersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualRoutersDeleteOptions contains the optional parameters for the VirtualRouters.Delete method.
type VirtualRoutersDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualRoutersGetOptions contains the optional parameters for the VirtualRouters.Get method.
type VirtualRoutersGetOptions struct {
	// Expands referenced resources.
	Expand *string
}

// VirtualRoutersListByResourceGroupOptions contains the optional parameters for the VirtualRouters.ListByResourceGroup method.
type VirtualRoutersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VirtualRoutersListOptions contains the optional parameters for the VirtualRouters.List method.
type VirtualRoutersListOptions struct {
	// placeholder for future optional parameters
}

// VirtualWAN Resource.
type VirtualWan struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the virtual WAN.
	Properties *VirtualWanProperties `json:"properties,omitempty"`
}

// VirtualWanPollerResponse is the response envelope for operations that asynchronously return a VirtualWan type.
type VirtualWanPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VirtualWanResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualWanPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VirtualWAN.
type VirtualWanProperties struct {
	// True if branch to branch traffic is allowed.
	AllowBranchToBranchTraffic *bool `json:"allowBranchToBranchTraffic,omitempty"`

	// True if Vnet to Vnet traffic is allowed.
	AllowVnetToVnetTraffic *bool `json:"allowVnetToVnetTraffic,omitempty"`

	// Vpn encryption to be disabled or not.
	DisableVpnEncryption *bool `json:"disableVpnEncryption,omitempty"`

	// READ-ONLY; The office local breakout category.
	Office365LocalBreakoutCategory *OfficeTrafficCategory `json:"office365LocalBreakoutCategory,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the virtual WAN resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The type of the VirtualWAN.
	Type *string `json:"type,omitempty"`

	// READ-ONLY; List of VirtualHubs in the VirtualWAN.
	VirtualHubs *[]SubResource `json:"virtualHubs,omitempty" azure:"ro"`

	// READ-ONLY; List of VpnSites in the VirtualWAN.
	VpnSites *[]SubResource `json:"vpnSites,omitempty" azure:"ro"`
}

// VirtualWanResponse is the response envelope for operations that return a VirtualWan type.
type VirtualWanResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualWAN Resource.
	VirtualWan *VirtualWan
}

// Collection of SecurityProviders.
type VirtualWanSecurityProvider struct {
	// Name of the security provider.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Name of the security provider.
	Type *VirtualWanSecurityProviderType `json:"type,omitempty" azure:"ro"`

	// Url of the security provider.
	URL *string `json:"url,omitempty"`
}

// Collection of SecurityProviders.
type VirtualWanSecurityProviders struct {
	// List of VirtualWAN security providers.
	SupportedProviders *[]VirtualWanSecurityProvider `json:"supportedProviders,omitempty"`
}

// VirtualWanSecurityProvidersResponse is the response envelope for operations that return a VirtualWanSecurityProviders type.
type VirtualWanSecurityProvidersResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Collection of SecurityProviders.
	VirtualWanSecurityProviders *VirtualWanSecurityProviders
}

// Virtual Wan Vpn profile parameters Vpn profile generation.
type VirtualWanVpnProfileParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod `json:"authenticationMethod,omitempty"`

	// VpnServerConfiguration partial resource uri with which VirtualWan is associated to.
	VpnServerConfigurationResourceID *string `json:"vpnServerConfigurationResourceId,omitempty"`
}

// VirtualWansCreateOrUpdateOptions contains the optional parameters for the VirtualWans.CreateOrUpdate method.
type VirtualWansCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualWansDeleteOptions contains the optional parameters for the VirtualWans.Delete method.
type VirtualWansDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualWansGetOptions contains the optional parameters for the VirtualWans.Get method.
type VirtualWansGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualWansListByResourceGroupOptions contains the optional parameters for the VirtualWans.ListByResourceGroup method.
type VirtualWansListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VirtualWansListOptions contains the optional parameters for the VirtualWans.List method.
type VirtualWansListOptions struct {
	// placeholder for future optional parameters
}

// VirtualWansUpdateTagsOptions contains the optional parameters for the VirtualWans.UpdateTags method.
type VirtualWansUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// List of routes that control routing from VirtualHub into a virtual network connection.
type VnetRoute struct {
	// List of all Static Routes.
	StaticRoutes *[]StaticRoute `json:"staticRoutes,omitempty"`
}

// VpnClientConfiguration for P2S client.
type VpnClientConfiguration struct {
	// The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AadAudience *string `json:"aadAudience,omitempty"`

	// The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AadIssuer *string `json:"aadIssuer,omitempty"`

	// The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AadTenant *string `json:"aadTenant,omitempty"`

	// The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	// The radiusServers property for multiple radius server configuration.
	RadiusServers *[]RadiusServer `json:"radiusServers,omitempty"`

	// The reference to the address space resource which represents Address space for P2S VpnClient.
	VpnClientAddressPool *AddressSpace `json:"vpnClientAddressPool,omitempty"`

	// VpnClientIpsecPolicies for virtual network gateway P2S client.
	VpnClientIPsecPolicies *[]IPsecPolicy `json:"vpnClientIpsecPolicies,omitempty"`

	// VpnClientProtocols for Virtual network gateway.
	VpnClientProtocols *[]VpnClientProtocol `json:"vpnClientProtocols,omitempty"`

	// VpnClientRevokedCertificate for Virtual network gateway.
	VpnClientRevokedCertificates *[]VpnClientRevokedCertificate `json:"vpnClientRevokedCertificates,omitempty"`

	// VpnClientRootCertificate for virtual network gateway.
	VpnClientRootCertificates *[]VpnClientRootCertificate `json:"vpnClientRootCertificates,omitempty"`
}

// VpnClientConnectionHealth properties.
type VpnClientConnectionHealth struct {
	// List of allocated ip addresses to the connected p2s vpn clients.
	AllocatedIPAddresses *[]string `json:"allocatedIpAddresses,omitempty"`

	// READ-ONLY; Total of the Egress Bytes Transferred in this connection.
	TotalEgressBytesTransferred *int64 `json:"totalEgressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; Total of the Ingress Bytes Transferred in this P2S Vpn connection.
	TotalIngressBytesTransferred *int64 `json:"totalIngressBytesTransferred,omitempty" azure:"ro"`

	// The total of p2s vpn clients connected at this time to this P2SVpnGateway.
	VpnClientConnectionsCount *int32 `json:"vpnClientConnectionsCount,omitempty"`
}

// VPN client connection health detail.
type VpnClientConnectionHealthDetail struct {
	// READ-ONLY; The egress bytes per second.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The egress packets per second.
	EgressPacketsTransferred *int64 `json:"egressPacketsTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The ingress bytes per second.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The ingress packets per second.
	IngressPacketsTransferred *int64 `json:"ingressPacketsTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The max band width.
	MaxBandwidth *int64 `json:"maxBandwidth,omitempty" azure:"ro"`

	// READ-ONLY; The max packets transferred per second.
	MaxPacketsPerSecond *int64 `json:"maxPacketsPerSecond,omitempty" azure:"ro"`

	// READ-ONLY; The assigned private Ip of a connected vpn client.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" azure:"ro"`

	// READ-ONLY; The public Ip of a connected vpn client.
	PublicIPAddress *string `json:"publicIpAddress,omitempty" azure:"ro"`

	// READ-ONLY; The duration time of a connected vpn client.
	VpnConnectionDuration *int64 `json:"vpnConnectionDuration,omitempty" azure:"ro"`

	// READ-ONLY; The vpn client Id.
	VpnConnectionID *string `json:"vpnConnectionId,omitempty" azure:"ro"`

	// READ-ONLY; The start time of a connected vpn client.
	VpnConnectionTime *string `json:"vpnConnectionTime,omitempty" azure:"ro"`

	// READ-ONLY; The user name of a connected vpn client.
	VpnUserName *string `json:"vpnUserName,omitempty" azure:"ro"`
}

// List of virtual network gateway vpn client connection health.
type VpnClientConnectionHealthDetailListResult struct {
	// List of vpn client connection health.
	Value *[]VpnClientConnectionHealthDetail `json:"value,omitempty"`
}

// VpnClientConnectionHealthDetailListResultPollerResponse is the response envelope for operations that asynchronously return a VpnClientConnectionHealthDetailListResult
// type.
type VpnClientConnectionHealthDetailListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnClientConnectionHealthDetailListResultResponse, error)

	// Poller contains an initialized poller.
	Poller VpnClientConnectionHealthDetailListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VpnClientConnectionHealthDetailListResultResponse is the response envelope for operations that return a VpnClientConnectionHealthDetailListResult type.
type VpnClientConnectionHealthDetailListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of virtual network gateway vpn client connection health.
	VpnClientConnectionHealthDetailListResult *VpnClientConnectionHealthDetailListResult
}

// An IPSec parameters for a virtual network gateway P2S connection.
type VpnClientIPsecParameters struct {
	// The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *DhGroup `json:"dhGroup,omitempty"`

	// The IPSec encryption algorithm (IKE phase 1).
	IPsecEncryption *IPsecEncryption `json:"ipsecEncryption,omitempty"`

	// The IPSec integrity algorithm (IKE phase 1).
	IPsecIntegrity *IPsecIntegrity `json:"ipsecIntegrity,omitempty"`

	// The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IkeEncryption `json:"ikeEncryption,omitempty"`

	// The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IkeIntegrity `json:"ikeIntegrity,omitempty"`

	// The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *PfsGroup `json:"pfsGroup,omitempty"`

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client..
	SaDataSizeKilobytes *int32 `json:"saDataSizeKilobytes,omitempty"`

	// The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.
	SaLifeTimeSeconds *int32 `json:"saLifeTimeSeconds,omitempty"`
}

// VpnClientIPsecParametersPollerResponse is the response envelope for operations that asynchronously return a VpnClientIPsecParameters type.
type VpnClientIPsecParametersPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnClientIPsecParametersResponse, error)

	// Poller contains an initialized poller.
	Poller VpnClientIPsecParametersPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VpnClientIPsecParametersResponse is the response envelope for operations that return a VpnClientIPsecParameters type.
type VpnClientIPsecParametersResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// An IPSec parameters for a virtual network gateway P2S connection.
	VpnClientIPsecParameters *VpnClientIPsecParameters
}

// Vpn Client Parameters for package generation.
type VpnClientParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod `json:"authenticationMethod,omitempty"`

	// A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with
	// EAPTLS.
	ClientRootCertificates *[]string `json:"clientRootCertificates,omitempty"`

	// VPN client Processor Architecture.
	ProcessorArchitecture *ProcessorArchitecture `json:"processorArchitecture,omitempty"`

	// The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication
	// has been configured with EAPTLS
	// authentication.
	RadiusServerAuthCertificate *string `json:"radiusServerAuthCertificate,omitempty"`
}

// VPN client revoked certificate of virtual network gateway.
type VpnClientRevokedCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the vpn client revoked certificate.
	Properties *VpnClientRevokedCertificatePropertiesFormat `json:"properties,omitempty"`
}

// Properties of the revoked VPN client certificate of virtual network gateway.
type VpnClientRevokedCertificatePropertiesFormat struct {
	// READ-ONLY; The provisioning state of the VPN client revoked certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// VPN client root certificate of virtual network gateway.
type VpnClientRootCertificate struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the vpn client root certificate.
	Properties *VpnClientRootCertificatePropertiesFormat `json:"properties,omitempty"`
}

// Properties of SSL certificates of application gateway.
type VpnClientRootCertificatePropertiesFormat struct {
	// READ-ONLY; The provisioning state of the VPN client root certificate resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The certificate public data.
	PublicCertData *string `json:"publicCertData,omitempty"`
}

// VpnConnection Resource.
type VpnConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the VPN connection.
	Properties *VpnConnectionProperties `json:"properties,omitempty"`
}

// Vpn Connection packet capture parameters supplied to start packet capture on gateway connection.
type VpnConnectionPacketCaptureStartParameters struct {
	// Start Packet capture parameters on vpn connection.
	FilterData *string `json:"filterData,omitempty"`

	// List of site link connection names.
	LinkConnectionNames *[]string `json:"linkConnectionNames,omitempty"`
}

// Vpn Connection packet capture parameters supplied to stop packet capture on gateway connection.
type VpnConnectionPacketCaptureStopParameters struct {
	// List of site link connection names.
	LinkConnectionNames *[]string `json:"linkConnectionNames,omitempty"`

	// SAS url for packet capture on vpn connection.
	SasURL *string `json:"sasUrl,omitempty"`
}

// VpnConnectionPollerResponse is the response envelope for operations that asynchronously return a VpnConnection type.
type VpnConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller VpnConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VpnConnection.
type VpnConnectionProperties struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth *int32 `json:"connectionBandwidth,omitempty"`

	// READ-ONLY; The connection status.
	ConnectionStatus *VpnConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// DPD timeout in seconds for vpn connection.
	DpdTimeoutSeconds *int32 `json:"dpdTimeoutSeconds,omitempty"`

	// READ-ONLY; Egress bytes transferred.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// Enable internet security.
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty"`

	// EnableBgp flag.
	EnableRateLimiting *bool `json:"enableRateLimiting,omitempty"`

	// The IPSec Policies to be considered by this connection.
	IPsecPolicies *[]IPsecPolicy `json:"ipsecPolicies,omitempty"`

	// READ-ONLY; Ingress bytes transferred.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the VPN connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Id of the connected vpn site.
	RemoteVpnSite *SubResource `json:"remoteVpnSite,omitempty"`

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration `json:"routingConfiguration,omitempty"`

	// Routing weight for vpn connection.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`

	// SharedKey for the vpn connection.
	SharedKey *string `json:"sharedKey,omitempty"`

	// Use local azure ip to initiate connection.
	UseLocalAzureIPAddress *bool `json:"useLocalAzureIpAddress,omitempty"`

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// Connection protocol used for this connection.
	VpnConnectionProtocolType *VirtualNetworkGatewayConnectionProtocol `json:"vpnConnectionProtocolType,omitempty"`

	// List of all vpn site link connections to the gateway.
	VpnLinkConnections *[]VpnSiteLinkConnection `json:"vpnLinkConnections,omitempty"`
}

// VpnConnectionResponse is the response envelope for operations that return a VpnConnection type.
type VpnConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnConnection Resource.
	VpnConnection *VpnConnection
}

// VpnConnectionsCreateOrUpdateOptions contains the optional parameters for the VpnConnections.CreateOrUpdate method.
type VpnConnectionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VpnConnectionsDeleteOptions contains the optional parameters for the VpnConnections.Delete method.
type VpnConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VpnConnectionsGetOptions contains the optional parameters for the VpnConnections.Get method.
type VpnConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// VpnConnectionsListByVpnGatewayOptions contains the optional parameters for the VpnConnections.ListByVpnGateway method.
type VpnConnectionsListByVpnGatewayOptions struct {
	// placeholder for future optional parameters
}

// VpnConnectionsStartPacketCaptureOptions contains the optional parameters for the VpnConnections.StartPacketCapture method.
type VpnConnectionsStartPacketCaptureOptions struct {
	// Vpn Connection packet capture parameters supplied to start packet capture on gateway connection.
	Parameters *VpnConnectionPacketCaptureStartParameters
}

// VpnConnectionsStopPacketCaptureOptions contains the optional parameters for the VpnConnections.StopPacketCapture method.
type VpnConnectionsStopPacketCaptureOptions struct {
	// Vpn Connection packet capture parameters supplied to stop packet capture on gateway connection.
	Parameters *VpnConnectionPacketCaptureStopParameters
}

// Vpn device configuration script generation parameters.
type VpnDeviceScriptParameters struct {
	// The device family for the vpn device.
	DeviceFamily *string `json:"deviceFamily,omitempty"`

	// The firmware version for the vpn device.
	FirmwareVersion *string `json:"firmwareVersion,omitempty"`

	// The vendor for the vpn device.
	Vendor *string `json:"vendor,omitempty"`
}

// VpnGateway Resource.
type VpnGateway struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the VPN gateway.
	Properties *VpnGatewayProperties `json:"properties,omitempty"`
}

// IP Configuration of a VPN Gateway Resource.
type VpnGatewayIPConfiguration struct {
	// The identifier of the IP configuration for a VPN Gateway.
	ID *string `json:"id,omitempty"`

	// The private IP address of this IP configuration.
	PrivateIPAddress *string `json:"privateIpAddress,omitempty"`

	// The public IP address of this IP configuration.
	PublicIPAddress *string `json:"publicIpAddress,omitempty"`
}

// Start packet capture parameters.
type VpnGatewayPacketCaptureStartParameters struct {
	// Start Packet capture parameters on vpn gateway.
	FilterData *string `json:"filterData,omitempty"`
}

// Stop packet capture parameters.
type VpnGatewayPacketCaptureStopParameters struct {
	// SAS url for packet capture on vpn gateway.
	SasURL *string `json:"sasUrl,omitempty"`
}

// VpnGatewayPollerResponse is the response envelope for operations that asynchronously return a VpnGateway type.
type VpnGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller VpnGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VpnGateway.
type VpnGatewayProperties struct {
	// Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings `json:"bgpSettings,omitempty"`

	// List of all vpn connections to the gateway.
	Connections *[]VpnConnection `json:"connections,omitempty"`

	// READ-ONLY; List of all IPs configured on the gateway.
	IPConfigurations *[]VpnGatewayIPConfiguration `json:"ipConfigurations,omitempty" azure:"ro"`

	// Enable Routing Preference property for the Public IP Interface of the VpnGateway.
	IsRoutingPreferenceInternet *bool `json:"isRoutingPreferenceInternet,omitempty"`

	// READ-ONLY; The provisioning state of the VPN gateway resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource `json:"virtualHub,omitempty"`

	// The scale unit for this vpn gateway.
	VpnGatewayScaleUnit *int32 `json:"vpnGatewayScaleUnit,omitempty"`
}

// VpnGatewayResponse is the response envelope for operations that return a VpnGateway type.
type VpnGatewayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnGateway Resource.
	VpnGateway *VpnGateway
}

// VpnGatewaysCreateOrUpdateOptions contains the optional parameters for the VpnGateways.CreateOrUpdate method.
type VpnGatewaysCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysDeleteOptions contains the optional parameters for the VpnGateways.Delete method.
type VpnGatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysGetOptions contains the optional parameters for the VpnGateways.Get method.
type VpnGatewaysGetOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysListByResourceGroupOptions contains the optional parameters for the VpnGateways.ListByResourceGroup method.
type VpnGatewaysListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysListOptions contains the optional parameters for the VpnGateways.List method.
type VpnGatewaysListOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysResetOptions contains the optional parameters for the VpnGateways.Reset method.
type VpnGatewaysResetOptions struct {
	// placeholder for future optional parameters
}

// VpnGatewaysStartPacketCaptureOptions contains the optional parameters for the VpnGateways.StartPacketCapture method.
type VpnGatewaysStartPacketCaptureOptions struct {
	// Vpn gateway packet capture parameters supplied to start packet capture on vpn gateway.
	Parameters *VpnGatewayPacketCaptureStartParameters
}

// VpnGatewaysStopPacketCaptureOptions contains the optional parameters for the VpnGateways.StopPacketCapture method.
type VpnGatewaysStopPacketCaptureOptions struct {
	// Vpn gateway packet capture parameters supplied to stop packet capture on vpn gateway.
	Parameters *VpnGatewayPacketCaptureStopParameters
}

// VpnGatewaysUpdateTagsOptions contains the optional parameters for the VpnGateways.UpdateTags method.
type VpnGatewaysUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// BGP settings details for a link.
type VpnLinkBgpSettings struct {
	// The BGP speaker's ASN.
	Asn *int64 `json:"asn,omitempty"`

	// The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string `json:"bgpPeeringAddress,omitempty"`
}

// VpnLinkConnectionsListByVpnConnectionOptions contains the optional parameters for the VpnLinkConnections.ListByVpnConnection method.
type VpnLinkConnectionsListByVpnConnectionOptions struct {
	// placeholder for future optional parameters
}

// List of properties of a link provider.
type VpnLinkProviderProperties struct {
	// Name of the link provider.
	LinkProviderName *string `json:"linkProviderName,omitempty"`

	// Link speed.
	LinkSpeedInMbps *int32 `json:"linkSpeedInMbps,omitempty"`
}

// Start packet capture parameters on virtual network gateway.
type VpnPacketCaptureStartParameters struct {
	// Start Packet capture parameters.
	FilterData *string `json:"filterData,omitempty"`
}

// Stop packet capture parameters.
type VpnPacketCaptureStopParameters struct {
	// SAS url for packet capture on virtual network gateway.
	SasURL *string `json:"sasUrl,omitempty"`
}

// Vpn Profile Response for package generation.
type VpnProfileResponse struct {
	// URL to the VPN profile.
	ProfileURL *string `json:"profileUrl,omitempty"`
}

// VpnProfileResponsePollerResponse is the response envelope for operations that asynchronously return a VpnProfileResponse type.
type VpnProfileResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnProfileResponseResponse, error)

	// Poller contains an initialized poller.
	Poller VpnProfileResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VpnProfileResponseResponse is the response envelope for operations that return a VpnProfileResponse type.
type VpnProfileResponseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Vpn Profile Response for package generation.
	VpnProfileResponse *VpnProfileResponse
}

// Properties of the Radius client root certificate of VpnServerConfiguration.
type VpnServerConfigRadiusClientRootCertificate struct {
	// The certificate name.
	Name *string `json:"name,omitempty"`

	// The Radius client root certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// Properties of Radius Server root certificate of VpnServerConfiguration.
type VpnServerConfigRadiusServerRootCertificate struct {
	// The certificate name.
	Name *string `json:"name,omitempty"`

	// The certificate public data.
	PublicCertData *string `json:"publicCertData,omitempty"`
}

// Properties of the revoked VPN client certificate of VpnServerConfiguration.
type VpnServerConfigVpnClientRevokedCertificate struct {
	// The certificate name.
	Name *string `json:"name,omitempty"`

	// The revoked VPN client certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// Properties of VPN client root certificate of VpnServerConfiguration.
type VpnServerConfigVpnClientRootCertificate struct {
	// The certificate name.
	Name *string `json:"name,omitempty"`

	// The certificate public data.
	PublicCertData *string `json:"publicCertData,omitempty"`
}

// VpnServerConfiguration Resource.
type VpnServerConfiguration struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the P2SVpnServer configuration.
	Properties *VpnServerConfigurationProperties `json:"properties,omitempty"`
}

// VpnServerConfigurationPollerResponse is the response envelope for operations that asynchronously return a VpnServerConfiguration type.
type VpnServerConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnServerConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller VpnServerConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VpnServerConfiguration.
type VpnServerConfigurationProperties struct {
	// The set of aad vpn authentication parameters.
	AadAuthenticationParameters *AadAuthenticationParameters `json:"aadAuthenticationParameters,omitempty"`

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the VpnServerConfiguration that is unique within a resource group.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; List of references to P2SVpnGateways.
	P2SVpnGateways *[]P2SVpnGateway `json:"p2SVpnGateways,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the VpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// Radius client root certificate of VpnServerConfiguration.
	RadiusClientRootCertificates *[]VpnServerConfigRadiusClientRootCertificate `json:"radiusClientRootCertificates,omitempty"`

	// The radius server address property of the VpnServerConfiguration resource for point to site client connection.
	RadiusServerAddress *string `json:"radiusServerAddress,omitempty"`

	// Radius Server root certificate of VpnServerConfiguration.
	RadiusServerRootCertificates *[]VpnServerConfigRadiusServerRootCertificate `json:"radiusServerRootCertificates,omitempty"`

	// The radius secret property of the VpnServerConfiguration resource for point to site client connection.
	RadiusServerSecret *string `json:"radiusServerSecret,omitempty"`

	// Multiple Radius Server configuration for VpnServerConfiguration.
	RadiusServers *[]RadiusServer `json:"radiusServers,omitempty"`

	// VPN authentication types for the VpnServerConfiguration.
	VpnAuthenticationTypes *[]VpnAuthenticationType `json:"vpnAuthenticationTypes,omitempty"`

	// VpnClientIpsecPolicies for VpnServerConfiguration.
	VpnClientIPsecPolicies *[]IPsecPolicy `json:"vpnClientIpsecPolicies,omitempty"`

	// VPN client revoked certificate of VpnServerConfiguration.
	VpnClientRevokedCertificates *[]VpnServerConfigVpnClientRevokedCertificate `json:"vpnClientRevokedCertificates,omitempty"`

	// VPN client root certificate of VpnServerConfiguration.
	VpnClientRootCertificates *[]VpnServerConfigVpnClientRootCertificate `json:"vpnClientRootCertificates,omitempty"`

	// VPN protocols for the VpnServerConfiguration.
	VpnProtocols *[]VpnGatewayTunnelingProtocol `json:"vpnProtocols,omitempty"`
}

// VpnServerConfigurationResponse is the response envelope for operations that return a VpnServerConfiguration type.
type VpnServerConfigurationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnServerConfiguration Resource.
	VpnServerConfiguration *VpnServerConfiguration
}

// VpnServerConfigurationsAssociatedWithVirtualWanListOptions contains the optional parameters for the VpnServerConfigurationsAssociatedWithVirtualWan.List
// method.
type VpnServerConfigurationsAssociatedWithVirtualWanListOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurationsCreateOrUpdateOptions contains the optional parameters for the VpnServerConfigurations.CreateOrUpdate method.
type VpnServerConfigurationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurationsDeleteOptions contains the optional parameters for the VpnServerConfigurations.Delete method.
type VpnServerConfigurationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurationsGetOptions contains the optional parameters for the VpnServerConfigurations.Get method.
type VpnServerConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurationsListByResourceGroupOptions contains the optional parameters for the VpnServerConfigurations.ListByResourceGroup method.
type VpnServerConfigurationsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurationsListOptions contains the optional parameters for the VpnServerConfigurations.List method.
type VpnServerConfigurationsListOptions struct {
	// placeholder for future optional parameters
}

// VpnServerConfigurations list associated with VirtualWan Response.
type VpnServerConfigurationsResponse struct {
	// List of VpnServerConfigurations associated with VirtualWan.
	VpnServerConfigurationResourceIDs *[]string `json:"vpnServerConfigurationResourceIds,omitempty"`
}

// VpnServerConfigurationsResponsePollerResponse is the response envelope for operations that asynchronously return a VpnServerConfigurationsResponse type.
type VpnServerConfigurationsResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnServerConfigurationsResponseResponse, error)

	// Poller contains an initialized poller.
	Poller VpnServerConfigurationsResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VpnServerConfigurationsResponseResponse is the response envelope for operations that return a VpnServerConfigurationsResponse type.
type VpnServerConfigurationsResponseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnServerConfigurations list associated with VirtualWan Response.
	VpnServerConfigurationsResponse *VpnServerConfigurationsResponse
}

// VpnServerConfigurationsUpdateTagsOptions contains the optional parameters for the VpnServerConfigurations.UpdateTags method.
type VpnServerConfigurationsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// VpnSite Resource.
type VpnSite struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the VPN site.
	Properties *VpnSiteProperties `json:"properties,omitempty"`
}

// VpnSite Resource.
type VpnSiteID struct {
	// READ-ONLY; The resource-uri of the vpn-site for which config is to be fetched.
	VpnSite *string `json:"vpnSite,omitempty" azure:"ro"`
}

// VpnSiteLink Resource.
type VpnSiteLink struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the VPN site link.
	Properties *VpnSiteLinkProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// VpnSiteLinkConnection Resource.
type VpnSiteLinkConnection struct {
	SubResource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Properties of the VPN site link connection.
	Properties *VpnSiteLinkConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Parameters for VpnConnection.
type VpnSiteLinkConnectionProperties struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth *int32 `json:"connectionBandwidth,omitempty"`

	// READ-ONLY; The connection status.
	ConnectionStatus *VpnConnectionStatus `json:"connectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; Egress bytes transferred.
	EgressBytesTransferred *int64 `json:"egressBytesTransferred,omitempty" azure:"ro"`

	// EnableBgp flag.
	EnableBgp *bool `json:"enableBgp,omitempty"`

	// EnableBgp flag.
	EnableRateLimiting *bool `json:"enableRateLimiting,omitempty"`

	// The IPSec Policies to be considered by this connection.
	IPsecPolicies *[]IPsecPolicy `json:"ipsecPolicies,omitempty"`

	// READ-ONLY; Ingress bytes transferred.
	IngressBytesTransferred *int64 `json:"ingressBytesTransferred,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the VPN site link connection resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// Routing weight for vpn connection.
	RoutingWeight *int32 `json:"routingWeight,omitempty"`

	// SharedKey for the vpn connection.
	SharedKey *string `json:"sharedKey,omitempty"`

	// Use local azure ip to initiate connection.
	UseLocalAzureIPAddress *bool `json:"useLocalAzureIpAddress,omitempty"`

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool `json:"usePolicyBasedTrafficSelectors,omitempty"`

	// Connection protocol used for this connection.
	VpnConnectionProtocolType *VirtualNetworkGatewayConnectionProtocol `json:"vpnConnectionProtocolType,omitempty"`

	// Id of the connected vpn site link.
	VpnSiteLink *SubResource `json:"vpnSiteLink,omitempty"`
}

// VpnSiteLinkConnectionResponse is the response envelope for operations that return a VpnSiteLinkConnection type.
type VpnSiteLinkConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSiteLinkConnection Resource.
	VpnSiteLinkConnection *VpnSiteLinkConnection
}

// VpnSiteLinkConnectionsGetOptions contains the optional parameters for the VpnSiteLinkConnections.Get method.
type VpnSiteLinkConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// Parameters for VpnSite.
type VpnSiteLinkProperties struct {
	// The set of bgp properties.
	BgpProperties *VpnLinkBgpSettings `json:"bgpProperties,omitempty"`

	// FQDN of vpn-site-link.
	Fqdn *string `json:"fqdn,omitempty"`

	// The ip-address for the vpn-site-link.
	IPAddress *string `json:"ipAddress,omitempty"`

	// The link provider properties.
	LinkProperties *VpnLinkProviderProperties `json:"linkProperties,omitempty"`

	// READ-ONLY; The provisioning state of the VPN site link resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// VpnSiteLinkResponse is the response envelope for operations that return a VpnSiteLink type.
type VpnSiteLinkResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSiteLink Resource.
	VpnSiteLink *VpnSiteLink
}

// VpnSiteLinksGetOptions contains the optional parameters for the VpnSiteLinks.Get method.
type VpnSiteLinksGetOptions struct {
	// placeholder for future optional parameters
}

// VpnSiteLinksListByVpnSiteOptions contains the optional parameters for the VpnSiteLinks.ListByVpnSite method.
type VpnSiteLinksListByVpnSiteOptions struct {
	// placeholder for future optional parameters
}

// VpnSitePollerResponse is the response envelope for operations that asynchronously return a VpnSite type.
type VpnSitePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*VpnSiteResponse, error)

	// Poller contains an initialized poller.
	Poller VpnSitePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Parameters for VpnSite.
type VpnSiteProperties struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace *AddressSpace `json:"addressSpace,omitempty"`

	// The set of bgp properties.
	BgpProperties *BgpSettings `json:"bgpProperties,omitempty"`

	// The device properties.
	DeviceProperties *DeviceProperties `json:"deviceProperties,omitempty"`

	// The ip-address for the vpn-site.
	IPAddress *string `json:"ipAddress,omitempty"`

	// IsSecuritySite flag.
	IsSecuritySite *bool `json:"isSecuritySite,omitempty"`

	// Office365 Policy.
	O365Policy *O365PolicyProperties `json:"o365Policy,omitempty"`

	// READ-ONLY; The provisioning state of the VPN site resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// The key for vpn-site that can be used for connections.
	SiteKey *string `json:"siteKey,omitempty"`

	// The VirtualWAN to which the vpnSite belongs.
	VirtualWan *SubResource `json:"virtualWan,omitempty"`

	// List of all vpn site links.
	VpnSiteLinks *[]VpnSiteLink `json:"vpnSiteLinks,omitempty"`
}

// VpnSiteResponse is the response envelope for operations that return a VpnSite type.
type VpnSiteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSite Resource.
	VpnSite *VpnSite
}

// VpnSitesConfigurationDownloadOptions contains the optional parameters for the VpnSitesConfiguration.Download method.
type VpnSitesConfigurationDownloadOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesCreateOrUpdateOptions contains the optional parameters for the VpnSites.CreateOrUpdate method.
type VpnSitesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesDeleteOptions contains the optional parameters for the VpnSites.Delete method.
type VpnSitesDeleteOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesGetOptions contains the optional parameters for the VpnSites.Get method.
type VpnSitesGetOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesListByResourceGroupOptions contains the optional parameters for the VpnSites.ListByResourceGroup method.
type VpnSitesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesListOptions contains the optional parameters for the VpnSites.List method.
type VpnSitesListOptions struct {
	// placeholder for future optional parameters
}

// VpnSitesUpdateTagsOptions contains the optional parameters for the VpnSites.UpdateTags method.
type VpnSitesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// Defines contents of a web application rule.
type WebApplicationFirewallCustomRule struct {
	// Type of Actions.
	Action *WebApplicationFirewallAction `json:"action,omitempty"`

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// List of match conditions.
	MatchConditions *[]MatchCondition `json:"matchConditions,omitempty"`

	// The name of the resource that is unique within a policy. This name can be used to access the resource.
	Name *string `json:"name,omitempty"`

	// Priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
	Priority *int32 `json:"priority,omitempty"`

	// The rule type.
	RuleType *WebApplicationFirewallRuleType `json:"ruleType,omitempty"`
}

// WebApplicationFirewallPoliciesCreateOrUpdateOptions contains the optional parameters for the WebApplicationFirewallPolicies.CreateOrUpdate method.
type WebApplicationFirewallPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// WebApplicationFirewallPoliciesDeleteOptions contains the optional parameters for the WebApplicationFirewallPolicies.Delete method.
type WebApplicationFirewallPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// WebApplicationFirewallPoliciesGetOptions contains the optional parameters for the WebApplicationFirewallPolicies.Get method.
type WebApplicationFirewallPoliciesGetOptions struct {
	// placeholder for future optional parameters
}

// WebApplicationFirewallPoliciesListAllOptions contains the optional parameters for the WebApplicationFirewallPolicies.ListAll method.
type WebApplicationFirewallPoliciesListAllOptions struct {
	// placeholder for future optional parameters
}

// WebApplicationFirewallPoliciesListOptions contains the optional parameters for the WebApplicationFirewallPolicies.List method.
type WebApplicationFirewallPoliciesListOptions struct {
	// placeholder for future optional parameters
}

// Defines web application firewall policy.
type WebApplicationFirewallPolicy struct {
	Resource
	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty" azure:"ro"`

	// Properties of the web application firewall policy.
	Properties *WebApplicationFirewallPolicyPropertiesFormat `json:"properties,omitempty"`
}

// Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next
// set of results.
type WebApplicationFirewallPolicyListResult struct {
	// READ-ONLY; URL to get the next set of WebApplicationFirewallPolicy objects if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of WebApplicationFirewallPolicies within a resource group.
	Value *[]WebApplicationFirewallPolicy `json:"value,omitempty" azure:"ro"`
}

// WebApplicationFirewallPolicyListResultResponse is the response envelope for operations that return a WebApplicationFirewallPolicyListResult type.
type WebApplicationFirewallPolicyListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next
	// set of results.
	WebApplicationFirewallPolicyListResult *WebApplicationFirewallPolicyListResult
}

// Defines web application firewall policy properties.
type WebApplicationFirewallPolicyPropertiesFormat struct {
	// READ-ONLY; A collection of references to application gateways.
	ApplicationGateways *[]ApplicationGateway `json:"applicationGateways,omitempty" azure:"ro"`

	// The custom rules inside the policy.
	CustomRules *[]WebApplicationFirewallCustomRule `json:"customRules,omitempty"`

	// READ-ONLY; A collection of references to application gateway http listeners.
	HTTPListeners *[]SubResource `json:"httpListeners,omitempty" azure:"ro"`

	// Describes the managedRules structure.
	ManagedRules *ManagedRulesDefinition `json:"managedRules,omitempty"`

	// READ-ONLY; A collection of references to application gateway path rules.
	PathBasedRules *[]SubResource `json:"pathBasedRules,omitempty" azure:"ro"`

	// The PolicySettings for policy.
	PolicySettings *PolicySettings `json:"policySettings,omitempty"`

	// READ-ONLY; The provisioning state of the web application firewall policy resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Resource status of the policy.
	ResourceState *WebApplicationFirewallPolicyResourceState `json:"resourceState,omitempty" azure:"ro"`
}

// WebApplicationFirewallPolicyResponse is the response envelope for operations that return a WebApplicationFirewallPolicy type.
type WebApplicationFirewallPolicyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Defines web application firewall policy.
	WebApplicationFirewallPolicy *WebApplicationFirewallPolicy
}

// WebCategoriesGetOptions contains the optional parameters for the WebCategories.Get method.
type WebCategoriesGetOptions struct {
	// Expands resourceIds back referenced by the azureWebCategory resource.
	Expand *string
}

// WebCategoriesListBySubscriptionOptions contains the optional parameters for the WebCategories.ListBySubscription method.
type WebCategoriesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}
