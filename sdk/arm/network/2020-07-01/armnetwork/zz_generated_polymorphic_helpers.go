// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import "encoding/json"

func unmarshalFirewallPolicyRuleClassification(body []byte) (FirewallPolicyRuleClassification, error) {
	var m map[string]interface{}
	if err := json.Unmarshal(body, &m); err != nil {
		return nil, err
	}
	var b FirewallPolicyRuleClassification
	switch m["ruleType"] {
	case FirewallPolicyRuleTypeApplicationRule:
		b = &ApplicationRule{}
	case FirewallPolicyRuleTypeNatRule:
		b = &NatRule{}
	case FirewallPolicyRuleTypeNetworkRule:
		b = &NetworkRule{}
	default:
		b = &FirewallPolicyRule{}
	}
	return b, json.Unmarshal(body, &b)
}

func unmarshalFirewallPolicyRuleClassificationArray(body []byte) (*[]FirewallPolicyRuleClassification, error) {
	var rawMessages []*json.RawMessage
	if err := json.Unmarshal(body, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FirewallPolicyRuleClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFirewallPolicyRuleClassification(*rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return &fArray, nil
}

func unmarshalFirewallPolicyRuleCollectionClassification(body []byte) (FirewallPolicyRuleCollectionClassification, error) {
	var m map[string]interface{}
	if err := json.Unmarshal(body, &m); err != nil {
		return nil, err
	}
	var b FirewallPolicyRuleCollectionClassification
	switch m["ruleCollectionType"] {
	case FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection:
		b = &FirewallPolicyFilterRuleCollection{}
	case FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection:
		b = &FirewallPolicyNatRuleCollection{}
	default:
		b = &FirewallPolicyRuleCollection{}
	}
	return b, json.Unmarshal(body, &b)
}

func unmarshalFirewallPolicyRuleCollectionClassificationArray(body []byte) (*[]FirewallPolicyRuleCollectionClassification, error) {
	var rawMessages []*json.RawMessage
	if err := json.Unmarshal(body, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FirewallPolicyRuleCollectionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFirewallPolicyRuleCollectionClassification(*rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return &fArray, nil
}

func strptr(s string) *string {
	return &s
}
