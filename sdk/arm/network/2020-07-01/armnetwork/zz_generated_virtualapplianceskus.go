// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// VirtualApplianceSKUsOperations contains the methods for the VirtualApplianceSKUs group.
type VirtualApplianceSKUsOperations interface {
	// Get - Retrieves a single available sku for network virtual appliance.
	Get(ctx context.Context, skuName string, options *VirtualApplianceSKUsGetOptions) (*NetworkVirtualApplianceSKUResponse, error)
	// List - List all SKUs available for a virtual appliance.
	List(options *VirtualApplianceSKUsListOptions) NetworkVirtualApplianceSKUListResultPager
}

// VirtualApplianceSKUsClient implements the VirtualApplianceSKUsOperations interface.
// Don't use this type directly, use NewVirtualApplianceSKUsClient() instead.
type VirtualApplianceSKUsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewVirtualApplianceSKUsClient creates a new instance of VirtualApplianceSKUsClient with the specified values.
func NewVirtualApplianceSKUsClient(con *armcore.Connection, subscriptionID string) VirtualApplianceSKUsOperations {
	return &VirtualApplianceSKUsClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client *VirtualApplianceSKUsClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Get - Retrieves a single available sku for network virtual appliance.
func (client *VirtualApplianceSKUsClient) Get(ctx context.Context, skuName string, options *VirtualApplianceSKUsGetOptions) (*NetworkVirtualApplianceSKUResponse, error) {
	req, err := client.GetCreateRequest(ctx, skuName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *VirtualApplianceSKUsClient) GetCreateRequest(ctx context.Context, skuName string, options *VirtualApplianceSKUsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualApplianceSkus/{skuName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{skuName}", url.PathEscape(skuName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-07-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *VirtualApplianceSKUsClient) GetHandleResponse(resp *azcore.Response) (*NetworkVirtualApplianceSKUResponse, error) {
	result := NetworkVirtualApplianceSKUResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkVirtualApplianceSKU)
}

// GetHandleError handles the Get error response.
func (client *VirtualApplianceSKUsClient) GetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// List - List all SKUs available for a virtual appliance.
func (client *VirtualApplianceSKUsClient) List(options *VirtualApplianceSKUsListOptions) NetworkVirtualApplianceSKUListResultPager {
	return &networkVirtualApplianceSkuListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, options)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *NetworkVirtualApplianceSKUListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.NetworkVirtualApplianceSKUListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// ListCreateRequest creates the List request.
func (client *VirtualApplianceSKUsClient) ListCreateRequest(ctx context.Context, options *VirtualApplianceSKUsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkVirtualApplianceSkus"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-07-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *VirtualApplianceSKUsClient) ListHandleResponse(resp *azcore.Response) (*NetworkVirtualApplianceSKUListResultResponse, error) {
	result := NetworkVirtualApplianceSKUListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.NetworkVirtualApplianceSKUListResult)
}

// ListHandleError handles the List error response.
func (client *VirtualApplianceSKUsClient) ListHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
