// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// VirtualHubBgpConnectionsOperations contains the methods for the VirtualHubBgpConnections group.
type VirtualHubBgpConnectionsOperations interface {
	// List - Retrieves the details of all VirtualHubBgpConnections.
	List(resourceGroupName string, virtualHubName string, options *VirtualHubBgpConnectionsListOptions) ListVirtualHubBgpConnectionResultsPager
	// BeginListAdvertisedRoutes - Retrieves a list of routes the virtual hub bgp connection is advertising to the specified peer.
	BeginListAdvertisedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListAdvertisedRoutesOptions) (*PeerRouteListPollerResponse, error)
	// ResumeListAdvertisedRoutes - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeListAdvertisedRoutes(token string) (PeerRouteListPoller, error)
	// BeginListLearnedRoutes - Retrieves a list of routes the virtual hub bgp connection has learned.
	BeginListLearnedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListLearnedRoutesOptions) (*PeerRouteListPollerResponse, error)
	// ResumeListLearnedRoutes - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeListLearnedRoutes(token string) (PeerRouteListPoller, error)
}

// VirtualHubBgpConnectionsClient implements the VirtualHubBgpConnectionsOperations interface.
// Don't use this type directly, use NewVirtualHubBgpConnectionsClient() instead.
type VirtualHubBgpConnectionsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewVirtualHubBgpConnectionsClient creates a new instance of VirtualHubBgpConnectionsClient with the specified values.
func NewVirtualHubBgpConnectionsClient(con *armcore.Connection, subscriptionID string) VirtualHubBgpConnectionsOperations {
	return &VirtualHubBgpConnectionsClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client *VirtualHubBgpConnectionsClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// List - Retrieves the details of all VirtualHubBgpConnections.
func (client *VirtualHubBgpConnectionsClient) List(resourceGroupName string, virtualHubName string, options *VirtualHubBgpConnectionsListOptions) ListVirtualHubBgpConnectionResultsPager {
	return &listVirtualHubBgpConnectionResultsPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, resourceGroupName, virtualHubName, options)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *ListVirtualHubBgpConnectionResultsResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ListVirtualHubBgpConnectionResults.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// ListCreateRequest creates the List request.
func (client *VirtualHubBgpConnectionsClient) ListCreateRequest(ctx context.Context, resourceGroupName string, virtualHubName string, options *VirtualHubBgpConnectionsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/bgpConnections"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualHubName}", url.PathEscape(virtualHubName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-07-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *VirtualHubBgpConnectionsClient) ListHandleResponse(resp *azcore.Response) (*ListVirtualHubBgpConnectionResultsResponse, error) {
	result := ListVirtualHubBgpConnectionResultsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ListVirtualHubBgpConnectionResults)
}

// ListHandleError handles the List error response.
func (client *VirtualHubBgpConnectionsClient) ListHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

func (client *VirtualHubBgpConnectionsClient) BeginListAdvertisedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListAdvertisedRoutesOptions) (*PeerRouteListPollerResponse, error) {
	resp, err := client.ListAdvertisedRoutes(ctx, resourceGroupName, hubName, connectionName, options)
	if err != nil {
		return nil, err
	}
	result := &PeerRouteListPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("VirtualHubBgpConnectionsClient.ListAdvertisedRoutes", "location", resp, client.ListAdvertisedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	poller := &peerRouteListPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*PeerRouteListResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *VirtualHubBgpConnectionsClient) ResumeListAdvertisedRoutes(token string) (PeerRouteListPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("VirtualHubBgpConnectionsClient.ListAdvertisedRoutes", token, client.ListAdvertisedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	return &peerRouteListPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ListAdvertisedRoutes - Retrieves a list of routes the virtual hub bgp connection is advertising to the specified peer.
func (client *VirtualHubBgpConnectionsClient) ListAdvertisedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListAdvertisedRoutesOptions) (*azcore.Response, error) {
	req, err := client.ListAdvertisedRoutesCreateRequest(ctx, resourceGroupName, hubName, connectionName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.ListAdvertisedRoutesHandleError(resp)
	}
	return resp, nil
}

// ListAdvertisedRoutesCreateRequest creates the ListAdvertisedRoutes request.
func (client *VirtualHubBgpConnectionsClient) ListAdvertisedRoutesCreateRequest(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListAdvertisedRoutesOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{hubName}/bgpConnections/{connectionName}/advertisedRoutes"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{hubName}", url.PathEscape(hubName))
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-07-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListAdvertisedRoutesHandleResponse handles the ListAdvertisedRoutes response.
func (client *VirtualHubBgpConnectionsClient) ListAdvertisedRoutesHandleResponse(resp *azcore.Response) (*PeerRouteListResponse, error) {
	result := PeerRouteListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PeerRouteList)
}

// ListAdvertisedRoutesHandleError handles the ListAdvertisedRoutes error response.
func (client *VirtualHubBgpConnectionsClient) ListAdvertisedRoutesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

func (client *VirtualHubBgpConnectionsClient) BeginListLearnedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListLearnedRoutesOptions) (*PeerRouteListPollerResponse, error) {
	resp, err := client.ListLearnedRoutes(ctx, resourceGroupName, hubName, connectionName, options)
	if err != nil {
		return nil, err
	}
	result := &PeerRouteListPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("VirtualHubBgpConnectionsClient.ListLearnedRoutes", "location", resp, client.ListLearnedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	poller := &peerRouteListPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*PeerRouteListResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *VirtualHubBgpConnectionsClient) ResumeListLearnedRoutes(token string) (PeerRouteListPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("VirtualHubBgpConnectionsClient.ListLearnedRoutes", token, client.ListLearnedRoutesHandleError)
	if err != nil {
		return nil, err
	}
	return &peerRouteListPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ListLearnedRoutes - Retrieves a list of routes the virtual hub bgp connection has learned.
func (client *VirtualHubBgpConnectionsClient) ListLearnedRoutes(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListLearnedRoutesOptions) (*azcore.Response, error) {
	req, err := client.ListLearnedRoutesCreateRequest(ctx, resourceGroupName, hubName, connectionName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.ListLearnedRoutesHandleError(resp)
	}
	return resp, nil
}

// ListLearnedRoutesCreateRequest creates the ListLearnedRoutes request.
func (client *VirtualHubBgpConnectionsClient) ListLearnedRoutesCreateRequest(ctx context.Context, resourceGroupName string, hubName string, connectionName string, options *VirtualHubBgpConnectionsListLearnedRoutesOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{hubName}/bgpConnections/{connectionName}/learnedRoutes"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{hubName}", url.PathEscape(hubName))
	urlPath = strings.ReplaceAll(urlPath, "{connectionName}", url.PathEscape(connectionName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-07-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListLearnedRoutesHandleResponse handles the ListLearnedRoutes response.
func (client *VirtualHubBgpConnectionsClient) ListLearnedRoutesHandleResponse(resp *azcore.Response) (*PeerRouteListResponse, error) {
	result := PeerRouteListResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PeerRouteList)
}

// ListLearnedRoutesHandleError handles the ListLearnedRoutes error response.
func (client *VirtualHubBgpConnectionsClient) ListLearnedRoutesHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
