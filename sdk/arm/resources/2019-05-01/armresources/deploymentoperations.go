// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// DeploymentOperationsOperations contains the methods for the DeploymentOperations group.
type DeploymentOperationsOperations interface {
	// Get - Gets a deployments operation.
	Get(ctx context.Context, resourceGroupName string, deploymentName string, operationId string) (*DeploymentOperationResponse, error)
	// GetAtManagementGroupScope - Gets a deployments operation.
	GetAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, operationId string) (*DeploymentOperationResponse, error)
	// GetAtSubscriptionScope - Gets a deployments operation.
	GetAtSubscriptionScope(ctx context.Context, deploymentName string, operationId string) (*DeploymentOperationResponse, error)
	// List - Gets all deployments operations for a deployment.
	List(resourceGroupName string, deploymentName string, deploymentOperationsListOptions *DeploymentOperationsListOptions) (DeploymentOperationsListResultPager, error)
	// ListAtManagementGroupScope - Gets all deployments operations for a deployment.
	ListAtManagementGroupScope(groupId string, deploymentName string, deploymentOperationsListAtManagementGroupScopeOptions *DeploymentOperationsListAtManagementGroupScopeOptions) (DeploymentOperationsListResultPager, error)
	// ListAtSubscriptionScope - Gets all deployments operations for a deployment.
	ListAtSubscriptionScope(deploymentName string, deploymentOperationsListAtSubscriptionScopeOptions *DeploymentOperationsListAtSubscriptionScopeOptions) (DeploymentOperationsListResultPager, error)
}

// deploymentOperations implements the DeploymentOperationsOperations interface.
type deploymentOperations struct {
	*Client
	subscriptionID string
}

// Get - Gets a deployments operation.
func (client *deploymentOperations) Get(ctx context.Context, resourceGroupName string, deploymentName string, operationId string) (*DeploymentOperationResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, deploymentName, operationId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *deploymentOperations) getCreateRequest(resourceGroupName string, deploymentName string, operationId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *deploymentOperations) getHandleResponse(resp *azcore.Response) (*DeploymentOperationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := DeploymentOperationResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperation)
}

// getHandleError handles the Get error response.
func (client *deploymentOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GetAtManagementGroupScope - Gets a deployments operation.
func (client *deploymentOperations) GetAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, operationId string) (*DeploymentOperationResponse, error) {
	req, err := client.getAtManagementGroupScopeCreateRequest(groupId, deploymentName, operationId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAtManagementGroupScopeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getAtManagementGroupScopeCreateRequest creates the GetAtManagementGroupScope request.
func (client *deploymentOperations) getAtManagementGroupScopeCreateRequest(groupId string, deploymentName string, operationId string) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getAtManagementGroupScopeHandleResponse handles the GetAtManagementGroupScope response.
func (client *deploymentOperations) getAtManagementGroupScopeHandleResponse(resp *azcore.Response) (*DeploymentOperationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getAtManagementGroupScopeHandleError(resp)
	}
	result := DeploymentOperationResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperation)
}

// getAtManagementGroupScopeHandleError handles the GetAtManagementGroupScope error response.
func (client *deploymentOperations) getAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GetAtSubscriptionScope - Gets a deployments operation.
func (client *deploymentOperations) GetAtSubscriptionScope(ctx context.Context, deploymentName string, operationId string) (*DeploymentOperationResponse, error) {
	req, err := client.getAtSubscriptionScopeCreateRequest(deploymentName, operationId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAtSubscriptionScopeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getAtSubscriptionScopeCreateRequest creates the GetAtSubscriptionScope request.
func (client *deploymentOperations) getAtSubscriptionScopeCreateRequest(deploymentName string, operationId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getAtSubscriptionScopeHandleResponse handles the GetAtSubscriptionScope response.
func (client *deploymentOperations) getAtSubscriptionScopeHandleResponse(resp *azcore.Response) (*DeploymentOperationResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getAtSubscriptionScopeHandleError(resp)
	}
	result := DeploymentOperationResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperation)
}

// getAtSubscriptionScopeHandleError handles the GetAtSubscriptionScope error response.
func (client *deploymentOperations) getAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// List - Gets all deployments operations for a deployment.
func (client *deploymentOperations) List(resourceGroupName string, deploymentName string, deploymentOperationsListOptions *DeploymentOperationsListOptions) (DeploymentOperationsListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupName, deploymentName, deploymentOperationsListOptions)
	if err != nil {
		return nil, err
	}
	return &deploymentOperationsListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DeploymentOperationsListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DeploymentOperationsListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *deploymentOperations) listCreateRequest(resourceGroupName string, deploymentName string, deploymentOperationsListOptions *DeploymentOperationsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if deploymentOperationsListOptions != nil && deploymentOperationsListOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*deploymentOperationsListOptions.Top), 10))
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *deploymentOperations) listHandleResponse(resp *azcore.Response) (*DeploymentOperationsListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := DeploymentOperationsListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperationsListResult)
}

// listHandleError handles the List error response.
func (client *deploymentOperations) listHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListAtManagementGroupScope - Gets all deployments operations for a deployment.
func (client *deploymentOperations) ListAtManagementGroupScope(groupId string, deploymentName string, deploymentOperationsListAtManagementGroupScopeOptions *DeploymentOperationsListAtManagementGroupScopeOptions) (DeploymentOperationsListResultPager, error) {
	req, err := client.listAtManagementGroupScopeCreateRequest(groupId, deploymentName, deploymentOperationsListAtManagementGroupScopeOptions)
	if err != nil {
		return nil, err
	}
	return &deploymentOperationsListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAtManagementGroupScopeHandleResponse,
		advancer: func(resp *DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DeploymentOperationsListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DeploymentOperationsListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAtManagementGroupScopeCreateRequest creates the ListAtManagementGroupScope request.
func (client *deploymentOperations) listAtManagementGroupScopeCreateRequest(groupId string, deploymentName string, deploymentOperationsListAtManagementGroupScopeOptions *DeploymentOperationsListAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if deploymentOperationsListAtManagementGroupScopeOptions != nil && deploymentOperationsListAtManagementGroupScopeOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*deploymentOperationsListAtManagementGroupScopeOptions.Top), 10))
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAtManagementGroupScopeHandleResponse handles the ListAtManagementGroupScope response.
func (client *deploymentOperations) listAtManagementGroupScopeHandleResponse(resp *azcore.Response) (*DeploymentOperationsListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAtManagementGroupScopeHandleError(resp)
	}
	result := DeploymentOperationsListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperationsListResult)
}

// listAtManagementGroupScopeHandleError handles the ListAtManagementGroupScope error response.
func (client *deploymentOperations) listAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListAtSubscriptionScope - Gets all deployments operations for a deployment.
func (client *deploymentOperations) ListAtSubscriptionScope(deploymentName string, deploymentOperationsListAtSubscriptionScopeOptions *DeploymentOperationsListAtSubscriptionScopeOptions) (DeploymentOperationsListResultPager, error) {
	req, err := client.listAtSubscriptionScopeCreateRequest(deploymentName, deploymentOperationsListAtSubscriptionScopeOptions)
	if err != nil {
		return nil, err
	}
	return &deploymentOperationsListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAtSubscriptionScopeHandleResponse,
		advancer: func(resp *DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.DeploymentOperationsListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.DeploymentOperationsListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAtSubscriptionScopeCreateRequest creates the ListAtSubscriptionScope request.
func (client *deploymentOperations) listAtSubscriptionScopeCreateRequest(deploymentName string, deploymentOperationsListAtSubscriptionScopeOptions *DeploymentOperationsListAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if deploymentOperationsListAtSubscriptionScopeOptions != nil && deploymentOperationsListAtSubscriptionScopeOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*deploymentOperationsListAtSubscriptionScopeOptions.Top), 10))
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAtSubscriptionScopeHandleResponse handles the ListAtSubscriptionScope response.
func (client *deploymentOperations) listAtSubscriptionScopeHandleResponse(resp *azcore.Response) (*DeploymentOperationsListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAtSubscriptionScopeHandleError(resp)
	}
	result := DeploymentOperationsListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.DeploymentOperationsListResult)
}

// listAtSubscriptionScopeHandleError handles the ListAtSubscriptionScope error response.
func (client *deploymentOperations) listAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
