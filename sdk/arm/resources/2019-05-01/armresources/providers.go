// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ProvidersOperations contains the methods for the Providers group.
type ProvidersOperations interface {
	// Get - Gets the specified resource provider.
	Get(ctx context.Context, resourceProviderNamespace string, providersGetOptions *ProvidersGetOptions) (*ProviderResponse, error)
	// List - Gets all resource providers for a subscription.
	List(providersListOptions *ProvidersListOptions) (ProviderListResultPager, error)
	// Register - Registers a subscription with a resource provider.
	Register(ctx context.Context, resourceProviderNamespace string) (*ProviderResponse, error)
	// Unregister - Unregisters a subscription from a resource provider.
	Unregister(ctx context.Context, resourceProviderNamespace string) (*ProviderResponse, error)
}

// providersOperations implements the ProvidersOperations interface.
type providersOperations struct {
	*Client
	subscriptionID string
}

// Get - Gets the specified resource provider.
func (client *providersOperations) Get(ctx context.Context, resourceProviderNamespace string, providersGetOptions *ProvidersGetOptions) (*ProviderResponse, error) {
	req, err := client.getCreateRequest(resourceProviderNamespace, providersGetOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *providersOperations) getCreateRequest(resourceProviderNamespace string, providersGetOptions *ProvidersGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if providersGetOptions != nil && providersGetOptions.Expand != nil {
		query.Set("$expand", *providersGetOptions.Expand)
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *providersOperations) getHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// getHandleError handles the Get error response.
func (client *providersOperations) getHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// List - Gets all resource providers for a subscription.
func (client *providersOperations) List(providersListOptions *ProvidersListOptions) (ProviderListResultPager, error) {
	req, err := client.listCreateRequest(providersListOptions)
	if err != nil {
		return nil, err
	}
	return &providerListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ProviderListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ProviderListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ProviderListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *providersOperations) listCreateRequest(providersListOptions *ProvidersListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if providersListOptions != nil && providersListOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*providersListOptions.Top), 10))
	}
	if providersListOptions != nil && providersListOptions.Expand != nil {
		query.Set("$expand", *providersListOptions.Expand)
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *providersOperations) listHandleResponse(resp *azcore.Response) (*ProviderListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ProviderListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProviderListResult)
}

// listHandleError handles the List error response.
func (client *providersOperations) listHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Register - Registers a subscription with a resource provider.
func (client *providersOperations) Register(ctx context.Context, resourceProviderNamespace string) (*ProviderResponse, error) {
	req, err := client.registerCreateRequest(resourceProviderNamespace)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.registerHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// registerCreateRequest creates the Register request.
func (client *providersOperations) registerCreateRequest(resourceProviderNamespace string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// registerHandleResponse handles the Register response.
func (client *providersOperations) registerHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.registerHandleError(resp)
	}
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// registerHandleError handles the Register error response.
func (client *providersOperations) registerHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Unregister - Unregisters a subscription from a resource provider.
func (client *providersOperations) Unregister(ctx context.Context, resourceProviderNamespace string) (*ProviderResponse, error) {
	req, err := client.unregisterCreateRequest(resourceProviderNamespace)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.unregisterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// unregisterCreateRequest creates the Unregister request.
func (client *providersOperations) unregisterCreateRequest(resourceProviderNamespace string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// unregisterHandleResponse handles the Unregister response.
func (client *providersOperations) unregisterHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.unregisterHandleError(resp)
	}
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// unregisterHandleError handles the Unregister error response.
func (client *providersOperations) unregisterHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
