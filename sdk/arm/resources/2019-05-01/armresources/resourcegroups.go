// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// ResourceGroupsOperations contains the methods for the ResourceGroups group.
type ResourceGroupsOperations interface {
	// CheckExistence - Checks whether a resource group exists.
	CheckExistence(ctx context.Context, resourceGroupName string) (*http.Response, error)
	// CreateOrUpdate - Creates or updates a resource group.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, parameters ResourceGroup) (*ResourceGroupResponse, error)
	// BeginDelete - When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
	BeginDelete(ctx context.Context, resourceGroupName string) (*HTTPPollerResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// ExportTemplate - Captures the specified resource group as a template.
	ExportTemplate(ctx context.Context, resourceGroupName string, parameters ExportTemplateRequest) (*ResourceGroupExportResultResponse, error)
	// Get - Gets a resource group.
	Get(ctx context.Context, resourceGroupName string) (*ResourceGroupResponse, error)
	// List - Gets all the resource groups for a subscription.
	List(resourceGroupsListOptions *ResourceGroupsListOptions) (ResourceGroupListResultPager, error)
	// Update - Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
	Update(ctx context.Context, resourceGroupName string, parameters ResourceGroupPatchable) (*ResourceGroupResponse, error)
}

// resourceGroupsOperations implements the ResourceGroupsOperations interface.
type resourceGroupsOperations struct {
	*Client
	subscriptionID string
}

// CheckExistence - Checks whether a resource group exists.
func (client *resourceGroupsOperations) CheckExistence(ctx context.Context, resourceGroupName string) (*http.Response, error) {
	req, err := client.checkExistenceCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.checkExistenceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// checkExistenceCreateRequest creates the CheckExistence request.
func (client *resourceGroupsOperations) checkExistenceCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodHead, *u)
	return req, nil
}

// checkExistenceHandleResponse handles the CheckExistence response.
func (client *resourceGroupsOperations) checkExistenceHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent, http.StatusNotFound) {
		return nil, client.checkExistenceHandleError(resp)
	}
	return resp.Response, nil
}

// checkExistenceHandleError handles the CheckExistence error response.
func (client *resourceGroupsOperations) checkExistenceHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// CreateOrUpdate - Creates or updates a resource group.
func (client *resourceGroupsOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, parameters ResourceGroup) (*ResourceGroupResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *resourceGroupsOperations) createOrUpdateCreateRequest(resourceGroupName string, parameters ResourceGroup) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *resourceGroupsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ResourceGroupResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := ResourceGroupResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceGroup)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *resourceGroupsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Delete - When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
func (client *resourceGroupsOperations) BeginDelete(ctx context.Context, resourceGroupName string) (*HTTPPollerResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("resourceGroupsOperations.Delete", "", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *resourceGroupsOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("resourceGroupsOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *resourceGroupsOperations) deleteCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *resourceGroupsOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPPollerResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPPollerResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *resourceGroupsOperations) deleteHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// ExportTemplate - Captures the specified resource group as a template.
func (client *resourceGroupsOperations) ExportTemplate(ctx context.Context, resourceGroupName string, parameters ExportTemplateRequest) (*ResourceGroupExportResultResponse, error) {
	req, err := client.exportTemplateCreateRequest(resourceGroupName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.exportTemplateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// exportTemplateCreateRequest creates the ExportTemplate request.
func (client *resourceGroupsOperations) exportTemplateCreateRequest(resourceGroupName string, parameters ExportTemplateRequest) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// exportTemplateHandleResponse handles the ExportTemplate response.
func (client *resourceGroupsOperations) exportTemplateHandleResponse(resp *azcore.Response) (*ResourceGroupExportResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.exportTemplateHandleError(resp)
	}
	result := ResourceGroupExportResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceGroupExportResult)
}

// exportTemplateHandleError handles the ExportTemplate error response.
func (client *resourceGroupsOperations) exportTemplateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Get - Gets a resource group.
func (client *resourceGroupsOperations) Get(ctx context.Context, resourceGroupName string) (*ResourceGroupResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *resourceGroupsOperations) getCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *resourceGroupsOperations) getHandleResponse(resp *azcore.Response) (*ResourceGroupResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ResourceGroupResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceGroup)
}

// getHandleError handles the Get error response.
func (client *resourceGroupsOperations) getHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// List - Gets all the resource groups for a subscription.
func (client *resourceGroupsOperations) List(resourceGroupsListOptions *ResourceGroupsListOptions) (ResourceGroupListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupsListOptions)
	if err != nil {
		return nil, err
	}
	return &resourceGroupListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ResourceGroupListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ResourceGroupListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ResourceGroupListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *resourceGroupsOperations) listCreateRequest(resourceGroupsListOptions *ResourceGroupsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if resourceGroupsListOptions != nil && resourceGroupsListOptions.Filter != nil {
		query.Set("$filter", *resourceGroupsListOptions.Filter)
	}
	if resourceGroupsListOptions != nil && resourceGroupsListOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*resourceGroupsListOptions.Top), 10))
	}
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *resourceGroupsOperations) listHandleResponse(resp *azcore.Response) (*ResourceGroupListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ResourceGroupListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceGroupListResult)
}

// listHandleError handles the List error response.
func (client *resourceGroupsOperations) listHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}

// Update - Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
func (client *resourceGroupsOperations) Update(ctx context.Context, resourceGroupName string, parameters ResourceGroupPatchable) (*ResourceGroupResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *resourceGroupsOperations) updateCreateRequest(resourceGroupName string, parameters ResourceGroupPatchable) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-05-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateHandleResponse handles the Update response.
func (client *resourceGroupsOperations) updateHandleResponse(resp *azcore.Response) (*ResourceGroupResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := ResourceGroupResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ResourceGroup)
}

// updateHandleError handles the Update error response.
func (client *resourceGroupsOperations) updateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
