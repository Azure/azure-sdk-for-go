// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// TagsOperations contains the methods for the Tags group.
type TagsOperations interface {
	// CreateOrUpdate - The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these prefixes.
	CreateOrUpdate(ctx context.Context, tagName string, options *TagsCreateOrUpdateOptions) (*TagDetailsResponse, error)
	// CreateOrUpdateValue - Creates a tag value. The name of the tag must already exist.
	CreateOrUpdateValue(ctx context.Context, tagName string, tagValue string, options *TagsCreateOrUpdateValueOptions) (*TagValueResponse, error)
	// Delete - You must remove all values from a resource tag before you can delete it.
	Delete(ctx context.Context, tagName string, options *TagsDeleteOptions) (*http.Response, error)
	// DeleteValue - Deletes a tag value.
	DeleteValue(ctx context.Context, tagName string, tagValue string, options *TagsDeleteValueOptions) (*http.Response, error)
	// List - Gets the names and values of all resource tags that are defined in a subscription.
	List(options *TagsListOptions) TagsListResultPager
}

// TagsClient implements the TagsOperations interface.
// Don't use this type directly, use NewTagsClient() instead.
type TagsClient struct {
	*Client
	subscriptionID string
}

// NewTagsClient creates a new instance of TagsClient with the specified values.
func NewTagsClient(c *Client, subscriptionID string) TagsOperations {
	return &TagsClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *TagsClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// CreateOrUpdate - The tag name can have a maximum of 512 characters and is case insensitive. Tag names created by Azure have prefixes of microsoft, azure, or windows. You cannot create tags with one of these prefixes.
func (client *TagsClient) CreateOrUpdate(ctx context.Context, tagName string, options *TagsCreateOrUpdateOptions) (*TagDetailsResponse, error) {
	req, err := client.CreateOrUpdateCreateRequest(ctx, tagName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.CreateOrUpdateHandleError(resp)
	}
	result, err := client.CreateOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *TagsClient) CreateOrUpdateCreateRequest(ctx context.Context, tagName string, options *TagsCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/tagNames/{tagName}"
	urlPath = strings.ReplaceAll(urlPath, "{tagName}", url.PathEscape(tagName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-05-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// CreateOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *TagsClient) CreateOrUpdateHandleResponse(resp *azcore.Response) (*TagDetailsResponse, error) {
	result := TagDetailsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TagDetails)
}

// CreateOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *TagsClient) CreateOrUpdateHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// CreateOrUpdateValue - Creates a tag value. The name of the tag must already exist.
func (client *TagsClient) CreateOrUpdateValue(ctx context.Context, tagName string, tagValue string, options *TagsCreateOrUpdateValueOptions) (*TagValueResponse, error) {
	req, err := client.CreateOrUpdateValueCreateRequest(ctx, tagName, tagValue, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.CreateOrUpdateValueHandleError(resp)
	}
	result, err := client.CreateOrUpdateValueHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CreateOrUpdateValueCreateRequest creates the CreateOrUpdateValue request.
func (client *TagsClient) CreateOrUpdateValueCreateRequest(ctx context.Context, tagName string, tagValue string, options *TagsCreateOrUpdateValueOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}"
	urlPath = strings.ReplaceAll(urlPath, "{tagName}", url.PathEscape(tagName))
	urlPath = strings.ReplaceAll(urlPath, "{tagValue}", url.PathEscape(tagValue))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-05-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// CreateOrUpdateValueHandleResponse handles the CreateOrUpdateValue response.
func (client *TagsClient) CreateOrUpdateValueHandleResponse(resp *azcore.Response) (*TagValueResponse, error) {
	result := TagValueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TagValue)
}

// CreateOrUpdateValueHandleError handles the CreateOrUpdateValue error response.
func (client *TagsClient) CreateOrUpdateValueHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// Delete - You must remove all values from a resource tag before you can delete it.
func (client *TagsClient) Delete(ctx context.Context, tagName string, options *TagsDeleteOptions) (*http.Response, error) {
	req, err := client.DeleteCreateRequest(ctx, tagName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.DeleteHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteCreateRequest creates the Delete request.
func (client *TagsClient) DeleteCreateRequest(ctx context.Context, tagName string, options *TagsDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/tagNames/{tagName}"
	urlPath = strings.ReplaceAll(urlPath, "{tagName}", url.PathEscape(tagName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-05-01")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// DeleteHandleError handles the Delete error response.
func (client *TagsClient) DeleteHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// DeleteValue - Deletes a tag value.
func (client *TagsClient) DeleteValue(ctx context.Context, tagName string, tagValue string, options *TagsDeleteValueOptions) (*http.Response, error) {
	req, err := client.DeleteValueCreateRequest(ctx, tagName, tagValue, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.DeleteValueHandleError(resp)
	}
	return resp.Response, nil
}

// DeleteValueCreateRequest creates the DeleteValue request.
func (client *TagsClient) DeleteValueCreateRequest(ctx context.Context, tagName string, tagValue string, options *TagsDeleteValueOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}"
	urlPath = strings.ReplaceAll(urlPath, "{tagName}", url.PathEscape(tagName))
	urlPath = strings.ReplaceAll(urlPath, "{tagValue}", url.PathEscape(tagValue))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-05-01")
	req.URL.RawQuery = query.Encode()
	return req, nil
}

// DeleteValueHandleError handles the DeleteValue error response.
func (client *TagsClient) DeleteValueHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}

// List - Gets the names and values of all resource tags that are defined in a subscription.
func (client *TagsClient) List(options *TagsListOptions) TagsListResultPager {
	return &tagsListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, options)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *TagsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.TagsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// ListCreateRequest creates the List request.
func (client *TagsClient) ListCreateRequest(ctx context.Context, options *TagsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/tagNames"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-05-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *TagsClient) ListHandleResponse(resp *azcore.Response) (*TagsListResultResponse, error) {
	result := TagsListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.TagsListResult)
}

// ListHandleError handles the List error response.
func (client *TagsClient) ListHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
