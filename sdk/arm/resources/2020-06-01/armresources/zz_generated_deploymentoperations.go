// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// DeploymentOperationsClient contains the methods for the DeploymentOperations group.
// Don't use this type directly, use NewDeploymentOperationsClient() instead.
type DeploymentOperationsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewDeploymentOperationsClient creates a new instance of DeploymentOperationsClient with the specified values.
func NewDeploymentOperationsClient(con *armcore.Connection, subscriptionID string) *DeploymentOperationsClient {
	return &DeploymentOperationsClient{con: con, subscriptionID: subscriptionID}
}

// Get - Gets a deployments operation.
func (client *DeploymentOperationsClient) Get(ctx context.Context, resourceGroupName string, deploymentName string, operationId string, options *DeploymentOperationsGetOptions) (DeploymentOperationResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, deploymentName, operationId, options)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentOperationResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DeploymentOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, operationId string, options *DeploymentOperationsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DeploymentOperationsClient) getHandleResponse(resp *azcore.Response) (DeploymentOperationResponse, error) {
	var val *DeploymentOperation
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationResponse{}, err
	}
	return DeploymentOperationResponse{RawResponse: resp.Response, DeploymentOperation: val}, nil
}

// getHandleError handles the Get error response.
func (client *DeploymentOperationsClient) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtManagementGroupScope - Gets a deployments operation.
func (client *DeploymentOperationsClient) GetAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, operationId string, options *DeploymentOperationsGetAtManagementGroupScopeOptions) (DeploymentOperationResponse, error) {
	req, err := client.getAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, operationId, options)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentOperationResponse{}, client.getAtManagementGroupScopeHandleError(resp)
	}
	return client.getAtManagementGroupScopeHandleResponse(resp)
}

// getAtManagementGroupScopeCreateRequest creates the GetAtManagementGroupScope request.
func (client *DeploymentOperationsClient) getAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, operationId string, options *DeploymentOperationsGetAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtManagementGroupScopeHandleResponse handles the GetAtManagementGroupScope response.
func (client *DeploymentOperationsClient) getAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentOperationResponse, error) {
	var val *DeploymentOperation
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationResponse{}, err
	}
	return DeploymentOperationResponse{RawResponse: resp.Response, DeploymentOperation: val}, nil
}

// getAtManagementGroupScopeHandleError handles the GetAtManagementGroupScope error response.
func (client *DeploymentOperationsClient) getAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtScope - Gets a deployments operation.
func (client *DeploymentOperationsClient) GetAtScope(ctx context.Context, scope string, deploymentName string, operationId string, options *DeploymentOperationsGetAtScopeOptions) (DeploymentOperationResponse, error) {
	req, err := client.getAtScopeCreateRequest(ctx, scope, deploymentName, operationId, options)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentOperationResponse{}, client.getAtScopeHandleError(resp)
	}
	return client.getAtScopeHandleResponse(resp)
}

// getAtScopeCreateRequest creates the GetAtScope request.
func (client *DeploymentOperationsClient) getAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, operationId string, options *DeploymentOperationsGetAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtScopeHandleResponse handles the GetAtScope response.
func (client *DeploymentOperationsClient) getAtScopeHandleResponse(resp *azcore.Response) (DeploymentOperationResponse, error) {
	var val *DeploymentOperation
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationResponse{}, err
	}
	return DeploymentOperationResponse{RawResponse: resp.Response, DeploymentOperation: val}, nil
}

// getAtScopeHandleError handles the GetAtScope error response.
func (client *DeploymentOperationsClient) getAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtSubscriptionScope - Gets a deployments operation.
func (client *DeploymentOperationsClient) GetAtSubscriptionScope(ctx context.Context, deploymentName string, operationId string, options *DeploymentOperationsGetAtSubscriptionScopeOptions) (DeploymentOperationResponse, error) {
	req, err := client.getAtSubscriptionScopeCreateRequest(ctx, deploymentName, operationId, options)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentOperationResponse{}, client.getAtSubscriptionScopeHandleError(resp)
	}
	return client.getAtSubscriptionScopeHandleResponse(resp)
}

// getAtSubscriptionScopeCreateRequest creates the GetAtSubscriptionScope request.
func (client *DeploymentOperationsClient) getAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, operationId string, options *DeploymentOperationsGetAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtSubscriptionScopeHandleResponse handles the GetAtSubscriptionScope response.
func (client *DeploymentOperationsClient) getAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentOperationResponse, error) {
	var val *DeploymentOperation
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationResponse{}, err
	}
	return DeploymentOperationResponse{RawResponse: resp.Response, DeploymentOperation: val}, nil
}

// getAtSubscriptionScopeHandleError handles the GetAtSubscriptionScope error response.
func (client *DeploymentOperationsClient) getAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtTenantScope - Gets a deployments operation.
func (client *DeploymentOperationsClient) GetAtTenantScope(ctx context.Context, deploymentName string, operationId string, options *DeploymentOperationsGetAtTenantScopeOptions) (DeploymentOperationResponse, error) {
	req, err := client.getAtTenantScopeCreateRequest(ctx, deploymentName, operationId, options)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DeploymentOperationResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentOperationResponse{}, client.getAtTenantScopeHandleError(resp)
	}
	return client.getAtTenantScopeHandleResponse(resp)
}

// getAtTenantScopeCreateRequest creates the GetAtTenantScope request.
func (client *DeploymentOperationsClient) getAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, operationId string, options *DeploymentOperationsGetAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtTenantScopeHandleResponse handles the GetAtTenantScope response.
func (client *DeploymentOperationsClient) getAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentOperationResponse, error) {
	var val *DeploymentOperation
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationResponse{}, err
	}
	return DeploymentOperationResponse{RawResponse: resp.Response, DeploymentOperation: val}, nil
}

// getAtTenantScopeHandleError handles the GetAtTenantScope error response.
func (client *DeploymentOperationsClient) getAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// List - Gets all deployments operations for a deployment.
func (client *DeploymentOperationsClient) List(resourceGroupName string, deploymentName string, options *DeploymentOperationsListOptions) DeploymentOperationsListResultPager {
	return &deploymentOperationsListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, resourceGroupName, deploymentName, options)
		},
		responder: client.listHandleResponse,
		errorer:   client.listHandleError,
		advancer: func(ctx context.Context, resp DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentOperationsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listCreateRequest creates the List request.
func (client *DeploymentOperationsClient) listCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentOperationsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DeploymentOperationsClient) listHandleResponse(resp *azcore.Response) (DeploymentOperationsListResultResponse, error) {
	var val *DeploymentOperationsListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationsListResultResponse{}, err
	}
	return DeploymentOperationsListResultResponse{RawResponse: resp.Response, DeploymentOperationsListResult: val}, nil
}

// listHandleError handles the List error response.
func (client *DeploymentOperationsClient) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtManagementGroupScope - Gets all deployments operations for a deployment.
func (client *DeploymentOperationsClient) ListAtManagementGroupScope(groupId string, deploymentName string, options *DeploymentOperationsListAtManagementGroupScopeOptions) DeploymentOperationsListResultPager {
	return &deploymentOperationsListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
		},
		responder: client.listAtManagementGroupScopeHandleResponse,
		errorer:   client.listAtManagementGroupScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentOperationsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtManagementGroupScopeCreateRequest creates the ListAtManagementGroupScope request.
func (client *DeploymentOperationsClient) listAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentOperationsListAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtManagementGroupScopeHandleResponse handles the ListAtManagementGroupScope response.
func (client *DeploymentOperationsClient) listAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentOperationsListResultResponse, error) {
	var val *DeploymentOperationsListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationsListResultResponse{}, err
	}
	return DeploymentOperationsListResultResponse{RawResponse: resp.Response, DeploymentOperationsListResult: val}, nil
}

// listAtManagementGroupScopeHandleError handles the ListAtManagementGroupScope error response.
func (client *DeploymentOperationsClient) listAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtScope - Gets all deployments operations for a deployment.
func (client *DeploymentOperationsClient) ListAtScope(scope string, deploymentName string, options *DeploymentOperationsListAtScopeOptions) DeploymentOperationsListResultPager {
	return &deploymentOperationsListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtScopeCreateRequest(ctx, scope, deploymentName, options)
		},
		responder: client.listAtScopeHandleResponse,
		errorer:   client.listAtScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentOperationsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtScopeCreateRequest creates the ListAtScope request.
func (client *DeploymentOperationsClient) listAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentOperationsListAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtScopeHandleResponse handles the ListAtScope response.
func (client *DeploymentOperationsClient) listAtScopeHandleResponse(resp *azcore.Response) (DeploymentOperationsListResultResponse, error) {
	var val *DeploymentOperationsListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationsListResultResponse{}, err
	}
	return DeploymentOperationsListResultResponse{RawResponse: resp.Response, DeploymentOperationsListResult: val}, nil
}

// listAtScopeHandleError handles the ListAtScope error response.
func (client *DeploymentOperationsClient) listAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtSubscriptionScope - Gets all deployments operations for a deployment.
func (client *DeploymentOperationsClient) ListAtSubscriptionScope(deploymentName string, options *DeploymentOperationsListAtSubscriptionScopeOptions) DeploymentOperationsListResultPager {
	return &deploymentOperationsListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
		},
		responder: client.listAtSubscriptionScopeHandleResponse,
		errorer:   client.listAtSubscriptionScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentOperationsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtSubscriptionScopeCreateRequest creates the ListAtSubscriptionScope request.
func (client *DeploymentOperationsClient) listAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentOperationsListAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtSubscriptionScopeHandleResponse handles the ListAtSubscriptionScope response.
func (client *DeploymentOperationsClient) listAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentOperationsListResultResponse, error) {
	var val *DeploymentOperationsListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationsListResultResponse{}, err
	}
	return DeploymentOperationsListResultResponse{RawResponse: resp.Response, DeploymentOperationsListResult: val}, nil
}

// listAtSubscriptionScopeHandleError handles the ListAtSubscriptionScope error response.
func (client *DeploymentOperationsClient) listAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtTenantScope - Gets all deployments operations for a deployment.
func (client *DeploymentOperationsClient) ListAtTenantScope(deploymentName string, options *DeploymentOperationsListAtTenantScopeOptions) DeploymentOperationsListResultPager {
	return &deploymentOperationsListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtTenantScopeCreateRequest(ctx, deploymentName, options)
		},
		responder: client.listAtTenantScopeHandleResponse,
		errorer:   client.listAtTenantScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentOperationsListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentOperationsListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtTenantScopeCreateRequest creates the ListAtTenantScope request.
func (client *DeploymentOperationsClient) listAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentOperationsListAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/operations"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtTenantScopeHandleResponse handles the ListAtTenantScope response.
func (client *DeploymentOperationsClient) listAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentOperationsListResultResponse, error) {
	var val *DeploymentOperationsListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DeploymentOperationsListResultResponse{}, err
	}
	return DeploymentOperationsListResultResponse{RawResponse: resp.Response, DeploymentOperationsListResult: val}, nil
}

// listAtTenantScopeHandleError handles the ListAtTenantScope error response.
func (client *DeploymentOperationsClient) listAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
