// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// DeploymentsClient contains the methods for the Deployments group.
// Don't use this type directly, use NewDeploymentsClient() instead.
type DeploymentsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewDeploymentsClient creates a new instance of DeploymentsClient with the specified values.
func NewDeploymentsClient(con *armcore.Connection, subscriptionID string) DeploymentsClient {
	return DeploymentsClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client DeploymentsClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// CalculateTemplateHash - Calculate the hash of the given template.
func (client DeploymentsClient) CalculateTemplateHash(ctx context.Context, templateParameter interface{}, options *DeploymentsCalculateTemplateHashOptions) (TemplateHashResultResponse, error) {
	req, err := client.calculateTemplateHashCreateRequest(ctx, templateParameter, options)
	if err != nil {
		return TemplateHashResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return TemplateHashResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return TemplateHashResultResponse{}, client.calculateTemplateHashHandleError(resp)
	}
	result, err := client.calculateTemplateHashHandleResponse(resp)
	if err != nil {
		return TemplateHashResultResponse{}, err
	}
	return result, nil
}

// calculateTemplateHashCreateRequest creates the CalculateTemplateHash request.
func (client DeploymentsClient) calculateTemplateHashCreateRequest(ctx context.Context, templateParameter interface{}, options *DeploymentsCalculateTemplateHashOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/calculateTemplateHash"
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(templateParameter)
}

// calculateTemplateHashHandleResponse handles the CalculateTemplateHash response.
func (client DeploymentsClient) calculateTemplateHashHandleResponse(resp *azcore.Response) (TemplateHashResultResponse, error) {
	result := TemplateHashResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.TemplateHashResult)
	return result, err
}

// calculateTemplateHashHandleError handles the CalculateTemplateHash error response.
func (client DeploymentsClient) calculateTemplateHashHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Cancel - You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is
// set to Canceled. Canceling a template deployment stops the
// currently running template deployment and leaves the resource group partially deployed.
func (client DeploymentsClient) Cancel(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsCancelOptions) (*http.Response, error) {
	req, err := client.cancelCreateRequest(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.cancelHandleError(resp)
	}
	return resp.Response, nil
}

// cancelCreateRequest creates the Cancel request.
func (client DeploymentsClient) cancelCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsCancelOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelHandleError handles the Cancel error response.
func (client DeploymentsClient) cancelHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CancelAtManagementGroupScope - You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the
// provisioningState is set to Canceled. Canceling a template deployment stops the
// currently running template deployment and leaves the resources partially deployed.
func (client DeploymentsClient) CancelAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsCancelAtManagementGroupScopeOptions) (*http.Response, error) {
	req, err := client.cancelAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.cancelAtManagementGroupScopeHandleError(resp)
	}
	return resp.Response, nil
}

// cancelAtManagementGroupScopeCreateRequest creates the CancelAtManagementGroupScope request.
func (client DeploymentsClient) cancelAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentsCancelAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelAtManagementGroupScopeHandleError handles the CancelAtManagementGroupScope error response.
func (client DeploymentsClient) cancelAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CancelAtScope - You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState
// is set to Canceled. Canceling a template deployment stops the
// currently running template deployment and leaves the resources partially deployed.
func (client DeploymentsClient) CancelAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsCancelAtScopeOptions) (*http.Response, error) {
	req, err := client.cancelAtScopeCreateRequest(ctx, scope, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.cancelAtScopeHandleError(resp)
	}
	return resp.Response, nil
}

// cancelAtScopeCreateRequest creates the CancelAtScope request.
func (client DeploymentsClient) cancelAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentsCancelAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelAtScopeHandleError handles the CancelAtScope error response.
func (client DeploymentsClient) cancelAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CancelAtSubscriptionScope - You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState
// is set to Canceled. Canceling a template deployment stops the
// currently running template deployment and leaves the resources partially deployed.
func (client DeploymentsClient) CancelAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsCancelAtSubscriptionScopeOptions) (*http.Response, error) {
	req, err := client.cancelAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.cancelAtSubscriptionScopeHandleError(resp)
	}
	return resp.Response, nil
}

// cancelAtSubscriptionScopeCreateRequest creates the CancelAtSubscriptionScope request.
func (client DeploymentsClient) cancelAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsCancelAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelAtSubscriptionScopeHandleError handles the CancelAtSubscriptionScope error response.
func (client DeploymentsClient) cancelAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CancelAtTenantScope - You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState
// is set to Canceled. Canceling a template deployment stops the
// currently running template deployment and leaves the resources partially deployed.
func (client DeploymentsClient) CancelAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsCancelAtTenantScopeOptions) (*http.Response, error) {
	req, err := client.cancelAtTenantScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.cancelAtTenantScopeHandleError(resp)
	}
	return resp.Response, nil
}

// cancelAtTenantScopeCreateRequest creates the CancelAtTenantScope request.
func (client DeploymentsClient) cancelAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsCancelAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelAtTenantScopeHandleError handles the CancelAtTenantScope error response.
func (client DeploymentsClient) cancelAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckExistence - Checks whether the deployment exists.
func (client DeploymentsClient) CheckExistence(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsCheckExistenceOptions) (BooleanResponse, error) {
	req, err := client.checkExistenceCreateRequest(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return BooleanResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BooleanResponse{}, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return BooleanResponse{}, client.checkExistenceHandleError(resp)
	}
}

// checkExistenceCreateRequest creates the CheckExistence request.
func (client DeploymentsClient) checkExistenceCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsCheckExistenceOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkExistenceHandleError handles the CheckExistence error response.
func (client DeploymentsClient) checkExistenceHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckExistenceAtManagementGroupScope - Checks whether the deployment exists.
func (client DeploymentsClient) CheckExistenceAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsCheckExistenceAtManagementGroupScopeOptions) (BooleanResponse, error) {
	req, err := client.checkExistenceAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
	if err != nil {
		return BooleanResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BooleanResponse{}, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return BooleanResponse{}, client.checkExistenceAtManagementGroupScopeHandleError(resp)
	}
}

// checkExistenceAtManagementGroupScopeCreateRequest creates the CheckExistenceAtManagementGroupScope request.
func (client DeploymentsClient) checkExistenceAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentsCheckExistenceAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkExistenceAtManagementGroupScopeHandleError handles the CheckExistenceAtManagementGroupScope error response.
func (client DeploymentsClient) checkExistenceAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckExistenceAtScope - Checks whether the deployment exists.
func (client DeploymentsClient) CheckExistenceAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsCheckExistenceAtScopeOptions) (BooleanResponse, error) {
	req, err := client.checkExistenceAtScopeCreateRequest(ctx, scope, deploymentName, options)
	if err != nil {
		return BooleanResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BooleanResponse{}, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return BooleanResponse{}, client.checkExistenceAtScopeHandleError(resp)
	}
}

// checkExistenceAtScopeCreateRequest creates the CheckExistenceAtScope request.
func (client DeploymentsClient) checkExistenceAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentsCheckExistenceAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkExistenceAtScopeHandleError handles the CheckExistenceAtScope error response.
func (client DeploymentsClient) checkExistenceAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckExistenceAtSubscriptionScope - Checks whether the deployment exists.
func (client DeploymentsClient) CheckExistenceAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsCheckExistenceAtSubscriptionScopeOptions) (BooleanResponse, error) {
	req, err := client.checkExistenceAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return BooleanResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BooleanResponse{}, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return BooleanResponse{}, client.checkExistenceAtSubscriptionScopeHandleError(resp)
	}
}

// checkExistenceAtSubscriptionScopeCreateRequest creates the CheckExistenceAtSubscriptionScope request.
func (client DeploymentsClient) checkExistenceAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsCheckExistenceAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkExistenceAtSubscriptionScopeHandleError handles the CheckExistenceAtSubscriptionScope error response.
func (client DeploymentsClient) checkExistenceAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckExistenceAtTenantScope - Checks whether the deployment exists.
func (client DeploymentsClient) CheckExistenceAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsCheckExistenceAtTenantScopeOptions) (BooleanResponse, error) {
	req, err := client.checkExistenceAtTenantScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return BooleanResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return BooleanResponse{}, err
	}
	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		return BooleanResponse{RawResponse: resp.Response, Success: true}, nil
	} else if resp.StatusCode >= 400 && resp.StatusCode < 500 {
		return BooleanResponse{RawResponse: resp.Response, Success: false}, nil
	} else {
		return BooleanResponse{}, client.checkExistenceAtTenantScopeHandleError(resp)
	}
}

// checkExistenceAtTenantScopeCreateRequest creates the CheckExistenceAtTenantScope request.
func (client DeploymentsClient) checkExistenceAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsCheckExistenceAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodHead, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkExistenceAtTenantScopeHandleError handles the CheckExistenceAtTenantScope error response.
func (client DeploymentsClient) checkExistenceAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginCreateOrUpdate - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateOptions) (DeploymentExtendedPollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	result := DeploymentExtendedPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.CreateOrUpdate", "", resp, client.createOrUpdateHandleError)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	poller := &deploymentExtendedPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdate creates a new DeploymentExtendedPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentExtendedPoller.ResumeToken().
func (client DeploymentsClient) ResumeCreateOrUpdate(token string) (DeploymentExtendedPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.CreateOrUpdate", token, client.createOrUpdateHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentExtendedPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// CreateOrUpdate - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) createOrUpdate(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client DeploymentsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client DeploymentsClient) createOrUpdateHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client DeploymentsClient) createOrUpdateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginCreateOrUpdateAtManagementGroupScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) BeginCreateOrUpdateAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions) (DeploymentExtendedPollerResponse, error) {
	resp, err := client.createOrUpdateAtManagementGroupScope(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	result := DeploymentExtendedPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.CreateOrUpdateAtManagementGroupScope", "", resp, client.createOrUpdateAtManagementGroupScopeHandleError)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	poller := &deploymentExtendedPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdateAtManagementGroupScope creates a new DeploymentExtendedPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentExtendedPoller.ResumeToken().
func (client DeploymentsClient) ResumeCreateOrUpdateAtManagementGroupScope(token string) (DeploymentExtendedPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.CreateOrUpdateAtManagementGroupScope", token, client.createOrUpdateAtManagementGroupScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentExtendedPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// CreateOrUpdateAtManagementGroupScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) createOrUpdateAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateAtManagementGroupScopeHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateAtManagementGroupScopeCreateRequest creates the CreateOrUpdateAtManagementGroupScope request.
func (client DeploymentsClient) createOrUpdateAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAtManagementGroupScopeHandleResponse handles the CreateOrUpdateAtManagementGroupScope response.
func (client DeploymentsClient) createOrUpdateAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// createOrUpdateAtManagementGroupScopeHandleError handles the CreateOrUpdateAtManagementGroupScope error response.
func (client DeploymentsClient) createOrUpdateAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginCreateOrUpdateAtScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) BeginCreateOrUpdateAtScope(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtScopeOptions) (DeploymentExtendedPollerResponse, error) {
	resp, err := client.createOrUpdateAtScope(ctx, scope, deploymentName, parameters, options)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	result := DeploymentExtendedPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.CreateOrUpdateAtScope", "", resp, client.createOrUpdateAtScopeHandleError)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	poller := &deploymentExtendedPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdateAtScope creates a new DeploymentExtendedPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentExtendedPoller.ResumeToken().
func (client DeploymentsClient) ResumeCreateOrUpdateAtScope(token string) (DeploymentExtendedPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.CreateOrUpdateAtScope", token, client.createOrUpdateAtScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentExtendedPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// CreateOrUpdateAtScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) createOrUpdateAtScope(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtScopeOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateAtScopeCreateRequest(ctx, scope, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateAtScopeHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateAtScopeCreateRequest creates the CreateOrUpdateAtScope request.
func (client DeploymentsClient) createOrUpdateAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAtScopeHandleResponse handles the CreateOrUpdateAtScope response.
func (client DeploymentsClient) createOrUpdateAtScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// createOrUpdateAtScopeHandleError handles the CreateOrUpdateAtScope error response.
func (client DeploymentsClient) createOrUpdateAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginCreateOrUpdateAtSubscriptionScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) BeginCreateOrUpdateAtSubscriptionScope(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions) (DeploymentExtendedPollerResponse, error) {
	resp, err := client.createOrUpdateAtSubscriptionScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	result := DeploymentExtendedPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.CreateOrUpdateAtSubscriptionScope", "", resp, client.createOrUpdateAtSubscriptionScopeHandleError)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	poller := &deploymentExtendedPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdateAtSubscriptionScope creates a new DeploymentExtendedPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentExtendedPoller.ResumeToken().
func (client DeploymentsClient) ResumeCreateOrUpdateAtSubscriptionScope(token string) (DeploymentExtendedPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.CreateOrUpdateAtSubscriptionScope", token, client.createOrUpdateAtSubscriptionScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentExtendedPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// CreateOrUpdateAtSubscriptionScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) createOrUpdateAtSubscriptionScope(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateAtSubscriptionScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateAtSubscriptionScopeHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateAtSubscriptionScopeCreateRequest creates the CreateOrUpdateAtSubscriptionScope request.
func (client DeploymentsClient) createOrUpdateAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAtSubscriptionScopeHandleResponse handles the CreateOrUpdateAtSubscriptionScope response.
func (client DeploymentsClient) createOrUpdateAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// createOrUpdateAtSubscriptionScopeHandleError handles the CreateOrUpdateAtSubscriptionScope error response.
func (client DeploymentsClient) createOrUpdateAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginCreateOrUpdateAtTenantScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) BeginCreateOrUpdateAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtTenantScopeOptions) (DeploymentExtendedPollerResponse, error) {
	resp, err := client.createOrUpdateAtTenantScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	result := DeploymentExtendedPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.CreateOrUpdateAtTenantScope", "", resp, client.createOrUpdateAtTenantScopeHandleError)
	if err != nil {
		return DeploymentExtendedPollerResponse{}, err
	}
	poller := &deploymentExtendedPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdateAtTenantScope creates a new DeploymentExtendedPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentExtendedPoller.ResumeToken().
func (client DeploymentsClient) ResumeCreateOrUpdateAtTenantScope(token string) (DeploymentExtendedPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.CreateOrUpdateAtTenantScope", token, client.createOrUpdateAtTenantScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentExtendedPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// CreateOrUpdateAtTenantScope - You can provide the template and parameters directly in the request or link to JSON files.
func (client DeploymentsClient) createOrUpdateAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtTenantScopeOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateAtTenantScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateAtTenantScopeHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateAtTenantScopeCreateRequest creates the CreateOrUpdateAtTenantScope request.
func (client DeploymentsClient) createOrUpdateAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginCreateOrUpdateAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAtTenantScopeHandleResponse handles the CreateOrUpdateAtTenantScope response.
func (client DeploymentsClient) createOrUpdateAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// createOrUpdateAtTenantScopeHandleError handles the CreateOrUpdateAtTenantScope error response.
func (client DeploymentsClient) createOrUpdateAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDelete - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations.
// Deleting a template deployment does not affect the state
// of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location
// response header contains the URI that is used
// to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process
// finishes, the URI in the Location header returns a
// status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
func (client DeploymentsClient) BeginDelete(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsBeginDeleteOptions) (HTTPPollerResponse, error) {
	resp, err := client.delete(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.Delete", "", resp, client.deleteHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDelete creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client DeploymentsClient) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Delete - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations.
// Deleting a template deployment does not affect the state
// of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location
// response header contains the URI that is used
// to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process
// finishes, the URI in the Location header returns a
// status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.
func (client DeploymentsClient) delete(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsBeginDeleteOptions) (*azcore.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client DeploymentsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsBeginDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client DeploymentsClient) deleteHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAtManagementGroupScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated
// deployment operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) BeginDeleteAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsBeginDeleteAtManagementGroupScopeOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAtManagementGroupScope(ctx, groupId, deploymentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.DeleteAtManagementGroupScope", "", resp, client.deleteAtManagementGroupScopeHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAtManagementGroupScope creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client DeploymentsClient) ResumeDeleteAtManagementGroupScope(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.DeleteAtManagementGroupScope", token, client.deleteAtManagementGroupScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAtManagementGroupScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated
// deployment operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) deleteAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsBeginDeleteAtManagementGroupScopeOptions) (*azcore.Response, error) {
	req, err := client.deleteAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAtManagementGroupScopeHandleError(resp)
	}
	return resp, nil
}

// deleteAtManagementGroupScopeCreateRequest creates the DeleteAtManagementGroupScope request.
func (client DeploymentsClient) deleteAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentsBeginDeleteAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAtManagementGroupScopeHandleError handles the DeleteAtManagementGroupScope error response.
func (client DeploymentsClient) deleteAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAtScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment
// operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) BeginDeleteAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsBeginDeleteAtScopeOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAtScope(ctx, scope, deploymentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.DeleteAtScope", "", resp, client.deleteAtScopeHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAtScope creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client DeploymentsClient) ResumeDeleteAtScope(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.DeleteAtScope", token, client.deleteAtScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAtScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations.
// This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) deleteAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsBeginDeleteAtScopeOptions) (*azcore.Response, error) {
	req, err := client.deleteAtScopeCreateRequest(ctx, scope, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAtScopeHandleError(resp)
	}
	return resp, nil
}

// deleteAtScopeCreateRequest creates the DeleteAtScope request.
func (client DeploymentsClient) deleteAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentsBeginDeleteAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAtScopeHandleError handles the DeleteAtScope error response.
func (client DeploymentsClient) deleteAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAtSubscriptionScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated
// deployment operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) BeginDeleteAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtSubscriptionScopeOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAtSubscriptionScope(ctx, deploymentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.DeleteAtSubscriptionScope", "", resp, client.deleteAtSubscriptionScopeHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAtSubscriptionScope creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client DeploymentsClient) ResumeDeleteAtSubscriptionScope(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.DeleteAtSubscriptionScope", token, client.deleteAtSubscriptionScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAtSubscriptionScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated
// deployment operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) deleteAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtSubscriptionScopeOptions) (*azcore.Response, error) {
	req, err := client.deleteAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAtSubscriptionScopeHandleError(resp)
	}
	return resp, nil
}

// deleteAtSubscriptionScopeCreateRequest creates the DeleteAtSubscriptionScope request.
func (client DeploymentsClient) deleteAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAtSubscriptionScopeHandleError handles the DeleteAtSubscriptionScope error response.
func (client DeploymentsClient) deleteAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginDeleteAtTenantScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment
// operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) BeginDeleteAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtTenantScopeOptions) (HTTPPollerResponse, error) {
	resp, err := client.deleteAtTenantScope(ctx, deploymentName, options)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	result := HTTPPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.DeleteAtTenantScope", "", resp, client.deleteAtTenantScopeHandleError)
	if err != nil {
		return HTTPPollerResponse{}, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeDeleteAtTenantScope creates a new HTTPPoller from the specified resume token.
// token - The value must come from a previous call to HTTPPoller.ResumeToken().
func (client DeploymentsClient) ResumeDeleteAtTenantScope(token string) (HTTPPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.DeleteAtTenantScope", token, client.deleteAtTenantScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// DeleteAtTenantScope - A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment
// operations. This is an asynchronous operation that returns a status
// of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the
// process. While the process is running, a call to
// the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success.
// If the asynchronous request failed, the URI in the
// Location header returns an error-level status code.
func (client DeploymentsClient) deleteAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtTenantScopeOptions) (*azcore.Response, error) {
	req, err := client.deleteAtTenantScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAtTenantScopeHandleError(resp)
	}
	return resp, nil
}

// deleteAtTenantScopeCreateRequest creates the DeleteAtTenantScope request.
func (client DeploymentsClient) deleteAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsBeginDeleteAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAtTenantScopeHandleError handles the DeleteAtTenantScope error response.
func (client DeploymentsClient) deleteAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ExportTemplate - Exports the template used for specified deployment.
func (client DeploymentsClient) ExportTemplate(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsExportTemplateOptions) (DeploymentExportResultResponse, error) {
	req, err := client.exportTemplateCreateRequest(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExportResultResponse{}, client.exportTemplateHandleError(resp)
	}
	result, err := client.exportTemplateHandleResponse(resp)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	return result, nil
}

// exportTemplateCreateRequest creates the ExportTemplate request.
func (client DeploymentsClient) exportTemplateCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsExportTemplateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// exportTemplateHandleResponse handles the ExportTemplate response.
func (client DeploymentsClient) exportTemplateHandleResponse(resp *azcore.Response) (DeploymentExportResultResponse, error) {
	result := DeploymentExportResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExportResult)
	return result, err
}

// exportTemplateHandleError handles the ExportTemplate error response.
func (client DeploymentsClient) exportTemplateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ExportTemplateAtManagementGroupScope - Exports the template used for specified deployment.
func (client DeploymentsClient) ExportTemplateAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsExportTemplateAtManagementGroupScopeOptions) (DeploymentExportResultResponse, error) {
	req, err := client.exportTemplateAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExportResultResponse{}, client.exportTemplateAtManagementGroupScopeHandleError(resp)
	}
	result, err := client.exportTemplateAtManagementGroupScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	return result, nil
}

// exportTemplateAtManagementGroupScopeCreateRequest creates the ExportTemplateAtManagementGroupScope request.
func (client DeploymentsClient) exportTemplateAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentsExportTemplateAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// exportTemplateAtManagementGroupScopeHandleResponse handles the ExportTemplateAtManagementGroupScope response.
func (client DeploymentsClient) exportTemplateAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentExportResultResponse, error) {
	result := DeploymentExportResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExportResult)
	return result, err
}

// exportTemplateAtManagementGroupScopeHandleError handles the ExportTemplateAtManagementGroupScope error response.
func (client DeploymentsClient) exportTemplateAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ExportTemplateAtScope - Exports the template used for specified deployment.
func (client DeploymentsClient) ExportTemplateAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsExportTemplateAtScopeOptions) (DeploymentExportResultResponse, error) {
	req, err := client.exportTemplateAtScopeCreateRequest(ctx, scope, deploymentName, options)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExportResultResponse{}, client.exportTemplateAtScopeHandleError(resp)
	}
	result, err := client.exportTemplateAtScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	return result, nil
}

// exportTemplateAtScopeCreateRequest creates the ExportTemplateAtScope request.
func (client DeploymentsClient) exportTemplateAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentsExportTemplateAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// exportTemplateAtScopeHandleResponse handles the ExportTemplateAtScope response.
func (client DeploymentsClient) exportTemplateAtScopeHandleResponse(resp *azcore.Response) (DeploymentExportResultResponse, error) {
	result := DeploymentExportResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExportResult)
	return result, err
}

// exportTemplateAtScopeHandleError handles the ExportTemplateAtScope error response.
func (client DeploymentsClient) exportTemplateAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ExportTemplateAtSubscriptionScope - Exports the template used for specified deployment.
func (client DeploymentsClient) ExportTemplateAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsExportTemplateAtSubscriptionScopeOptions) (DeploymentExportResultResponse, error) {
	req, err := client.exportTemplateAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExportResultResponse{}, client.exportTemplateAtSubscriptionScopeHandleError(resp)
	}
	result, err := client.exportTemplateAtSubscriptionScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	return result, nil
}

// exportTemplateAtSubscriptionScopeCreateRequest creates the ExportTemplateAtSubscriptionScope request.
func (client DeploymentsClient) exportTemplateAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsExportTemplateAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// exportTemplateAtSubscriptionScopeHandleResponse handles the ExportTemplateAtSubscriptionScope response.
func (client DeploymentsClient) exportTemplateAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentExportResultResponse, error) {
	result := DeploymentExportResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExportResult)
	return result, err
}

// exportTemplateAtSubscriptionScopeHandleError handles the ExportTemplateAtSubscriptionScope error response.
func (client DeploymentsClient) exportTemplateAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ExportTemplateAtTenantScope - Exports the template used for specified deployment.
func (client DeploymentsClient) ExportTemplateAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsExportTemplateAtTenantScopeOptions) (DeploymentExportResultResponse, error) {
	req, err := client.exportTemplateAtTenantScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExportResultResponse{}, client.exportTemplateAtTenantScopeHandleError(resp)
	}
	result, err := client.exportTemplateAtTenantScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExportResultResponse{}, err
	}
	return result, nil
}

// exportTemplateAtTenantScopeCreateRequest creates the ExportTemplateAtTenantScope request.
func (client DeploymentsClient) exportTemplateAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsExportTemplateAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// exportTemplateAtTenantScopeHandleResponse handles the ExportTemplateAtTenantScope response.
func (client DeploymentsClient) exportTemplateAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentExportResultResponse, error) {
	result := DeploymentExportResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExportResult)
	return result, err
}

// exportTemplateAtTenantScopeHandleError handles the ExportTemplateAtTenantScope error response.
func (client DeploymentsClient) exportTemplateAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Get - Gets a deployment.
func (client DeploymentsClient) Get(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsGetOptions) (DeploymentExtendedResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, deploymentName, options)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExtendedResponse{}, client.getHandleError(resp)
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client DeploymentsClient) getCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, options *DeploymentsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client DeploymentsClient) getHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// getHandleError handles the Get error response.
func (client DeploymentsClient) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtManagementGroupScope - Gets a deployment.
func (client DeploymentsClient) GetAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, options *DeploymentsGetAtManagementGroupScopeOptions) (DeploymentExtendedResponse, error) {
	req, err := client.getAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, options)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExtendedResponse{}, client.getAtManagementGroupScopeHandleError(resp)
	}
	result, err := client.getAtManagementGroupScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	return result, nil
}

// getAtManagementGroupScopeCreateRequest creates the GetAtManagementGroupScope request.
func (client DeploymentsClient) getAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, options *DeploymentsGetAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtManagementGroupScopeHandleResponse handles the GetAtManagementGroupScope response.
func (client DeploymentsClient) getAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// getAtManagementGroupScopeHandleError handles the GetAtManagementGroupScope error response.
func (client DeploymentsClient) getAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtScope - Gets a deployment.
func (client DeploymentsClient) GetAtScope(ctx context.Context, scope string, deploymentName string, options *DeploymentsGetAtScopeOptions) (DeploymentExtendedResponse, error) {
	req, err := client.getAtScopeCreateRequest(ctx, scope, deploymentName, options)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExtendedResponse{}, client.getAtScopeHandleError(resp)
	}
	result, err := client.getAtScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	return result, nil
}

// getAtScopeCreateRequest creates the GetAtScope request.
func (client DeploymentsClient) getAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, options *DeploymentsGetAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtScopeHandleResponse handles the GetAtScope response.
func (client DeploymentsClient) getAtScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// getAtScopeHandleError handles the GetAtScope error response.
func (client DeploymentsClient) getAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtSubscriptionScope - Gets a deployment.
func (client DeploymentsClient) GetAtSubscriptionScope(ctx context.Context, deploymentName string, options *DeploymentsGetAtSubscriptionScopeOptions) (DeploymentExtendedResponse, error) {
	req, err := client.getAtSubscriptionScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExtendedResponse{}, client.getAtSubscriptionScopeHandleError(resp)
	}
	result, err := client.getAtSubscriptionScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	return result, nil
}

// getAtSubscriptionScopeCreateRequest creates the GetAtSubscriptionScope request.
func (client DeploymentsClient) getAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsGetAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtSubscriptionScopeHandleResponse handles the GetAtSubscriptionScope response.
func (client DeploymentsClient) getAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// getAtSubscriptionScopeHandleError handles the GetAtSubscriptionScope error response.
func (client DeploymentsClient) getAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtTenantScope - Gets a deployment.
func (client DeploymentsClient) GetAtTenantScope(ctx context.Context, deploymentName string, options *DeploymentsGetAtTenantScopeOptions) (DeploymentExtendedResponse, error) {
	req, err := client.getAtTenantScopeCreateRequest(ctx, deploymentName, options)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DeploymentExtendedResponse{}, client.getAtTenantScopeHandleError(resp)
	}
	result, err := client.getAtTenantScopeHandleResponse(resp)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	return result, nil
}

// getAtTenantScopeCreateRequest creates the GetAtTenantScope request.
func (client DeploymentsClient) getAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, options *DeploymentsGetAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtTenantScopeHandleResponse handles the GetAtTenantScope response.
func (client DeploymentsClient) getAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentExtendedResponse, error) {
	result := DeploymentExtendedResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentExtended)
	return result, err
}

// getAtTenantScopeHandleError handles the GetAtTenantScope error response.
func (client DeploymentsClient) getAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtManagementGroupScope - Get all the deployments for a management group.
func (client DeploymentsClient) ListAtManagementGroupScope(groupId string, options *DeploymentsListAtManagementGroupScopeOptions) DeploymentListResultPager {
	return &deploymentListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtManagementGroupScopeCreateRequest(ctx, groupId, options)
		},
		responder: client.listAtManagementGroupScopeHandleResponse,
		errorer:   client.listAtManagementGroupScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtManagementGroupScopeCreateRequest creates the ListAtManagementGroupScope request.
func (client DeploymentsClient) listAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, options *DeploymentsListAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtManagementGroupScopeHandleResponse handles the ListAtManagementGroupScope response.
func (client DeploymentsClient) listAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentListResultResponse, error) {
	result := DeploymentListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentListResult)
	return result, err
}

// listAtManagementGroupScopeHandleError handles the ListAtManagementGroupScope error response.
func (client DeploymentsClient) listAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtScope - Get all the deployments at the given scope.
func (client DeploymentsClient) ListAtScope(scope string, options *DeploymentsListAtScopeOptions) DeploymentListResultPager {
	return &deploymentListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtScopeCreateRequest(ctx, scope, options)
		},
		responder: client.listAtScopeHandleResponse,
		errorer:   client.listAtScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtScopeCreateRequest creates the ListAtScope request.
func (client DeploymentsClient) listAtScopeCreateRequest(ctx context.Context, scope string, options *DeploymentsListAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtScopeHandleResponse handles the ListAtScope response.
func (client DeploymentsClient) listAtScopeHandleResponse(resp *azcore.Response) (DeploymentListResultResponse, error) {
	result := DeploymentListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentListResult)
	return result, err
}

// listAtScopeHandleError handles the ListAtScope error response.
func (client DeploymentsClient) listAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtSubscriptionScope - Get all the deployments for a subscription.
func (client DeploymentsClient) ListAtSubscriptionScope(options *DeploymentsListAtSubscriptionScopeOptions) DeploymentListResultPager {
	return &deploymentListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtSubscriptionScopeCreateRequest(ctx, options)
		},
		responder: client.listAtSubscriptionScopeHandleResponse,
		errorer:   client.listAtSubscriptionScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtSubscriptionScopeCreateRequest creates the ListAtSubscriptionScope request.
func (client DeploymentsClient) listAtSubscriptionScopeCreateRequest(ctx context.Context, options *DeploymentsListAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtSubscriptionScopeHandleResponse handles the ListAtSubscriptionScope response.
func (client DeploymentsClient) listAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentListResultResponse, error) {
	result := DeploymentListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentListResult)
	return result, err
}

// listAtSubscriptionScopeHandleError handles the ListAtSubscriptionScope error response.
func (client DeploymentsClient) listAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtTenantScope - Get all the deployments at the tenant scope.
func (client DeploymentsClient) ListAtTenantScope(options *DeploymentsListAtTenantScopeOptions) DeploymentListResultPager {
	return &deploymentListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtTenantScopeCreateRequest(ctx, options)
		},
		responder: client.listAtTenantScopeHandleResponse,
		errorer:   client.listAtTenantScopeHandleError,
		advancer: func(ctx context.Context, resp DeploymentListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtTenantScopeCreateRequest creates the ListAtTenantScope request.
func (client DeploymentsClient) listAtTenantScopeCreateRequest(ctx context.Context, options *DeploymentsListAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtTenantScopeHandleResponse handles the ListAtTenantScope response.
func (client DeploymentsClient) listAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentListResultResponse, error) {
	result := DeploymentListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentListResult)
	return result, err
}

// listAtTenantScopeHandleError handles the ListAtTenantScope error response.
func (client DeploymentsClient) listAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListByResourceGroup - Get all the deployments for a resource group.
func (client DeploymentsClient) ListByResourceGroup(resourceGroupName string, options *DeploymentsListByResourceGroupOptions) DeploymentListResultPager {
	return &deploymentListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		responder: client.listByResourceGroupHandleResponse,
		errorer:   client.listByResourceGroupHandleError,
		advancer: func(ctx context.Context, resp DeploymentListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DeploymentListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client DeploymentsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DeploymentsListByResourceGroupOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Filter != nil {
		query.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client DeploymentsClient) listByResourceGroupHandleResponse(resp *azcore.Response) (DeploymentListResultResponse, error) {
	result := DeploymentListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentListResult)
	return result, err
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client DeploymentsClient) listByResourceGroupHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginValidate - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) BeginValidate(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateOptions) (DeploymentValidateResultPollerResponse, error) {
	resp, err := client.validate(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	result := DeploymentValidateResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.Validate", "", resp, client.validateHandleError)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	poller := &deploymentValidateResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeValidate creates a new DeploymentValidateResultPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentValidateResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeValidate(token string) (DeploymentValidateResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.Validate", token, client.validateHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentValidateResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// Validate - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) validate(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateOptions) (*azcore.Response, error) {
	req, err := client.validateCreateRequest(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusBadRequest) {
		return nil, client.validateHandleError(resp)
	}
	return resp, nil
}

// validateCreateRequest creates the Validate request.
func (client DeploymentsClient) validateCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// validateHandleResponse handles the Validate response.
func (client DeploymentsClient) validateHandleResponse(resp *azcore.Response) (DeploymentValidateResultResponse, error) {
	result := DeploymentValidateResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentValidateResult)
	return result, err
}

// validateHandleError handles the Validate error response.
func (client DeploymentsClient) validateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginValidateAtManagementGroupScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) BeginValidateAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtManagementGroupScopeOptions) (DeploymentValidateResultPollerResponse, error) {
	resp, err := client.validateAtManagementGroupScope(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	result := DeploymentValidateResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.ValidateAtManagementGroupScope", "", resp, client.validateAtManagementGroupScopeHandleError)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	poller := &deploymentValidateResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeValidateAtManagementGroupScope creates a new DeploymentValidateResultPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentValidateResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeValidateAtManagementGroupScope(token string) (DeploymentValidateResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.ValidateAtManagementGroupScope", token, client.validateAtManagementGroupScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentValidateResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ValidateAtManagementGroupScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) validateAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtManagementGroupScopeOptions) (*azcore.Response, error) {
	req, err := client.validateAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusBadRequest) {
		return nil, client.validateAtManagementGroupScopeHandleError(resp)
	}
	return resp, nil
}

// validateAtManagementGroupScopeCreateRequest creates the ValidateAtManagementGroupScope request.
func (client DeploymentsClient) validateAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// validateAtManagementGroupScopeHandleResponse handles the ValidateAtManagementGroupScope response.
func (client DeploymentsClient) validateAtManagementGroupScopeHandleResponse(resp *azcore.Response) (DeploymentValidateResultResponse, error) {
	result := DeploymentValidateResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentValidateResult)
	return result, err
}

// validateAtManagementGroupScopeHandleError handles the ValidateAtManagementGroupScope error response.
func (client DeploymentsClient) validateAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginValidateAtScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) BeginValidateAtScope(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtScopeOptions) (DeploymentValidateResultPollerResponse, error) {
	resp, err := client.validateAtScope(ctx, scope, deploymentName, parameters, options)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	result := DeploymentValidateResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.ValidateAtScope", "", resp, client.validateAtScopeHandleError)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	poller := &deploymentValidateResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeValidateAtScope creates a new DeploymentValidateResultPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentValidateResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeValidateAtScope(token string) (DeploymentValidateResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.ValidateAtScope", token, client.validateAtScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentValidateResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ValidateAtScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) validateAtScope(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtScopeOptions) (*azcore.Response, error) {
	req, err := client.validateAtScopeCreateRequest(ctx, scope, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusBadRequest) {
		return nil, client.validateAtScopeHandleError(resp)
	}
	return resp, nil
}

// validateAtScopeCreateRequest creates the ValidateAtScope request.
func (client DeploymentsClient) validateAtScopeCreateRequest(ctx context.Context, scope string, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// validateAtScopeHandleResponse handles the ValidateAtScope response.
func (client DeploymentsClient) validateAtScopeHandleResponse(resp *azcore.Response) (DeploymentValidateResultResponse, error) {
	result := DeploymentValidateResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentValidateResult)
	return result, err
}

// validateAtScopeHandleError handles the ValidateAtScope error response.
func (client DeploymentsClient) validateAtScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginValidateAtSubscriptionScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) BeginValidateAtSubscriptionScope(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtSubscriptionScopeOptions) (DeploymentValidateResultPollerResponse, error) {
	resp, err := client.validateAtSubscriptionScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	result := DeploymentValidateResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.ValidateAtSubscriptionScope", "", resp, client.validateAtSubscriptionScopeHandleError)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	poller := &deploymentValidateResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeValidateAtSubscriptionScope creates a new DeploymentValidateResultPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentValidateResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeValidateAtSubscriptionScope(token string) (DeploymentValidateResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.ValidateAtSubscriptionScope", token, client.validateAtSubscriptionScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentValidateResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ValidateAtSubscriptionScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) validateAtSubscriptionScope(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtSubscriptionScopeOptions) (*azcore.Response, error) {
	req, err := client.validateAtSubscriptionScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusBadRequest) {
		return nil, client.validateAtSubscriptionScopeHandleError(resp)
	}
	return resp, nil
}

// validateAtSubscriptionScopeCreateRequest creates the ValidateAtSubscriptionScope request.
func (client DeploymentsClient) validateAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, parameters Deployment, options *DeploymentsBeginValidateAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// validateAtSubscriptionScopeHandleResponse handles the ValidateAtSubscriptionScope response.
func (client DeploymentsClient) validateAtSubscriptionScopeHandleResponse(resp *azcore.Response) (DeploymentValidateResultResponse, error) {
	result := DeploymentValidateResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentValidateResult)
	return result, err
}

// validateAtSubscriptionScopeHandleError handles the ValidateAtSubscriptionScope error response.
func (client DeploymentsClient) validateAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginValidateAtTenantScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) BeginValidateAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtTenantScopeOptions) (DeploymentValidateResultPollerResponse, error) {
	resp, err := client.validateAtTenantScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	result := DeploymentValidateResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.ValidateAtTenantScope", "", resp, client.validateAtTenantScopeHandleError)
	if err != nil {
		return DeploymentValidateResultPollerResponse{}, err
	}
	poller := &deploymentValidateResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeValidateAtTenantScope creates a new DeploymentValidateResultPoller from the specified resume token.
// token - The value must come from a previous call to DeploymentValidateResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeValidateAtTenantScope(token string) (DeploymentValidateResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.ValidateAtTenantScope", token, client.validateAtTenantScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &deploymentValidateResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// ValidateAtTenantScope - Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..
func (client DeploymentsClient) validateAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtTenantScopeOptions) (*azcore.Response, error) {
	req, err := client.validateAtTenantScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusBadRequest) {
		return nil, client.validateAtTenantScopeHandleError(resp)
	}
	return resp, nil
}

// validateAtTenantScopeCreateRequest creates the ValidateAtTenantScope request.
func (client DeploymentsClient) validateAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, parameters ScopedDeployment, options *DeploymentsBeginValidateAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/validate"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// validateAtTenantScopeHandleResponse handles the ValidateAtTenantScope response.
func (client DeploymentsClient) validateAtTenantScopeHandleResponse(resp *azcore.Response) (DeploymentValidateResultResponse, error) {
	result := DeploymentValidateResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.DeploymentValidateResult)
	return result, err
}

// validateAtTenantScopeHandleError handles the ValidateAtTenantScope error response.
func (client DeploymentsClient) validateAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginWhatIf - Returns changes that will be made by the deployment if executed at the scope of the resource group.
func (client DeploymentsClient) BeginWhatIf(ctx context.Context, resourceGroupName string, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfOptions) (WhatIfOperationResultPollerResponse, error) {
	resp, err := client.whatIf(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	result := WhatIfOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.WhatIf", "location", resp, client.whatIfHandleError)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	poller := &whatIfOperationResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (WhatIfOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeWhatIf creates a new WhatIfOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to WhatIfOperationResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeWhatIf(token string) (WhatIfOperationResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.WhatIf", token, client.whatIfHandleError)
	if err != nil {
		return nil, err
	}
	return &whatIfOperationResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// WhatIf - Returns changes that will be made by the deployment if executed at the scope of the resource group.
func (client DeploymentsClient) whatIf(ctx context.Context, resourceGroupName string, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfOptions) (*azcore.Response, error) {
	req, err := client.whatIfCreateRequest(ctx, resourceGroupName, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.whatIfHandleError(resp)
	}
	return resp, nil
}

// whatIfCreateRequest creates the WhatIf request.
func (client DeploymentsClient) whatIfCreateRequest(ctx context.Context, resourceGroupName string, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// whatIfHandleResponse handles the WhatIf response.
func (client DeploymentsClient) whatIfHandleResponse(resp *azcore.Response) (WhatIfOperationResultResponse, error) {
	result := WhatIfOperationResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.WhatIfOperationResult)
	return result, err
}

// whatIfHandleError handles the WhatIf error response.
func (client DeploymentsClient) whatIfHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginWhatIfAtManagementGroupScope - Returns changes that will be made by the deployment if executed at the scope of the management group.
func (client DeploymentsClient) BeginWhatIfAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtManagementGroupScopeOptions) (WhatIfOperationResultPollerResponse, error) {
	resp, err := client.whatIfAtManagementGroupScope(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	result := WhatIfOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.WhatIfAtManagementGroupScope", "location", resp, client.whatIfAtManagementGroupScopeHandleError)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	poller := &whatIfOperationResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (WhatIfOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeWhatIfAtManagementGroupScope creates a new WhatIfOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to WhatIfOperationResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeWhatIfAtManagementGroupScope(token string) (WhatIfOperationResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.WhatIfAtManagementGroupScope", token, client.whatIfAtManagementGroupScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &whatIfOperationResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// WhatIfAtManagementGroupScope - Returns changes that will be made by the deployment if executed at the scope of the management group.
func (client DeploymentsClient) whatIfAtManagementGroupScope(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtManagementGroupScopeOptions) (*azcore.Response, error) {
	req, err := client.whatIfAtManagementGroupScopeCreateRequest(ctx, groupId, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.whatIfAtManagementGroupScopeHandleError(resp)
	}
	return resp, nil
}

// whatIfAtManagementGroupScopeCreateRequest creates the WhatIfAtManagementGroupScope request.
func (client DeploymentsClient) whatIfAtManagementGroupScopeCreateRequest(ctx context.Context, groupId string, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf"
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// whatIfAtManagementGroupScopeHandleResponse handles the WhatIfAtManagementGroupScope response.
func (client DeploymentsClient) whatIfAtManagementGroupScopeHandleResponse(resp *azcore.Response) (WhatIfOperationResultResponse, error) {
	result := WhatIfOperationResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.WhatIfOperationResult)
	return result, err
}

// whatIfAtManagementGroupScopeHandleError handles the WhatIfAtManagementGroupScope error response.
func (client DeploymentsClient) whatIfAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginWhatIfAtSubscriptionScope - Returns changes that will be made by the deployment if executed at the scope of the subscription.
func (client DeploymentsClient) BeginWhatIfAtSubscriptionScope(ctx context.Context, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfAtSubscriptionScopeOptions) (WhatIfOperationResultPollerResponse, error) {
	resp, err := client.whatIfAtSubscriptionScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	result := WhatIfOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.WhatIfAtSubscriptionScope", "location", resp, client.whatIfAtSubscriptionScopeHandleError)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	poller := &whatIfOperationResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (WhatIfOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeWhatIfAtSubscriptionScope creates a new WhatIfOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to WhatIfOperationResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeWhatIfAtSubscriptionScope(token string) (WhatIfOperationResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.WhatIfAtSubscriptionScope", token, client.whatIfAtSubscriptionScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &whatIfOperationResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// WhatIfAtSubscriptionScope - Returns changes that will be made by the deployment if executed at the scope of the subscription.
func (client DeploymentsClient) whatIfAtSubscriptionScope(ctx context.Context, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfAtSubscriptionScopeOptions) (*azcore.Response, error) {
	req, err := client.whatIfAtSubscriptionScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.whatIfAtSubscriptionScopeHandleError(resp)
	}
	return resp, nil
}

// whatIfAtSubscriptionScopeCreateRequest creates the WhatIfAtSubscriptionScope request.
func (client DeploymentsClient) whatIfAtSubscriptionScopeCreateRequest(ctx context.Context, deploymentName string, parameters DeploymentWhatIf, options *DeploymentsBeginWhatIfAtSubscriptionScopeOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// whatIfAtSubscriptionScopeHandleResponse handles the WhatIfAtSubscriptionScope response.
func (client DeploymentsClient) whatIfAtSubscriptionScopeHandleResponse(resp *azcore.Response) (WhatIfOperationResultResponse, error) {
	result := WhatIfOperationResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.WhatIfOperationResult)
	return result, err
}

// whatIfAtSubscriptionScopeHandleError handles the WhatIfAtSubscriptionScope error response.
func (client DeploymentsClient) whatIfAtSubscriptionScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BeginWhatIfAtTenantScope - Returns changes that will be made by the deployment if executed at the scope of the tenant group.
func (client DeploymentsClient) BeginWhatIfAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtTenantScopeOptions) (WhatIfOperationResultPollerResponse, error) {
	resp, err := client.whatIfAtTenantScope(ctx, deploymentName, parameters, options)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	result := WhatIfOperationResultPollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewPoller("DeploymentsClient.WhatIfAtTenantScope", "location", resp, client.whatIfAtTenantScopeHandleError)
	if err != nil {
		return WhatIfOperationResultPollerResponse{}, err
	}
	poller := &whatIfOperationResultPoller{
		pt:       pt,
		pipeline: client.con.Pipeline(),
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (WhatIfOperationResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeWhatIfAtTenantScope creates a new WhatIfOperationResultPoller from the specified resume token.
// token - The value must come from a previous call to WhatIfOperationResultPoller.ResumeToken().
func (client DeploymentsClient) ResumeWhatIfAtTenantScope(token string) (WhatIfOperationResultPoller, error) {
	pt, err := armcore.NewPollerFromResumeToken("DeploymentsClient.WhatIfAtTenantScope", token, client.whatIfAtTenantScopeHandleError)
	if err != nil {
		return nil, err
	}
	return &whatIfOperationResultPoller{
		pipeline: client.con.Pipeline(),
		pt:       pt,
	}, nil
}

// WhatIfAtTenantScope - Returns changes that will be made by the deployment if executed at the scope of the tenant group.
func (client DeploymentsClient) whatIfAtTenantScope(ctx context.Context, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtTenantScopeOptions) (*azcore.Response, error) {
	req, err := client.whatIfAtTenantScopeCreateRequest(ctx, deploymentName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.whatIfAtTenantScopeHandleError(resp)
	}
	return resp, nil
}

// whatIfAtTenantScopeCreateRequest creates the WhatIfAtTenantScope request.
func (client DeploymentsClient) whatIfAtTenantScopeCreateRequest(ctx context.Context, deploymentName string, parameters ScopedDeploymentWhatIf, options *DeploymentsBeginWhatIfAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf"
	urlPath = strings.ReplaceAll(urlPath, "{deploymentName}", url.PathEscape(deploymentName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// whatIfAtTenantScopeHandleResponse handles the WhatIfAtTenantScope response.
func (client DeploymentsClient) whatIfAtTenantScopeHandleResponse(resp *azcore.Response) (WhatIfOperationResultResponse, error) {
	result := WhatIfOperationResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.WhatIfOperationResult)
	return result, err
}

// whatIfAtTenantScopeHandleError handles the WhatIfAtTenantScope error response.
func (client DeploymentsClient) whatIfAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
