// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type APIProfile struct {
	// READ-ONLY; The API version.
	APIVersion *string `json:"apiVersion,omitempty" azure:"ro"`

	// READ-ONLY; The profile version.
	ProfileVersion *string `json:"profileVersion,omitempty" azure:"ro"`
}

// The alias type.
type Alias struct {
	// READ-ONLY; The default alias path metadata. Applies to the default path and to any alias path that doesn't have metadata
	DefaultMetadata *AliasPathMetadata `json:"defaultMetadata,omitempty" azure:"ro"`

	// The default path for an alias.
	DefaultPath *string `json:"defaultPath,omitempty"`

	// The default pattern for an alias.
	DefaultPattern *AliasPattern `json:"defaultPattern,omitempty"`

	// The alias name.
	Name *string `json:"name,omitempty"`

	// The paths for an alias.
	Paths *[]AliasPath `json:"paths,omitempty"`

	// The type of the alias.
	Type *AliasType `json:"type,omitempty"`
}

// The type of the paths for alias.
type AliasPath struct {
	// The API versions.
	APIVersions *[]string `json:"apiVersions,omitempty"`

	// READ-ONLY; The metadata of the alias path. If missing, fall back to the default metadata of the alias.
	Metadata *AliasPathMetadata `json:"metadata,omitempty" azure:"ro"`

	// The path of an alias.
	Path *string `json:"path,omitempty"`

	// The pattern for an alias path.
	Pattern *AliasPattern `json:"pattern,omitempty"`
}

type AliasPathMetadata struct {
	// READ-ONLY; The attributes of the token that the alias path is referring to.
	Attributes *AliasPathAttributes `json:"attributes,omitempty" azure:"ro"`

	// READ-ONLY; The type of the token that the alias path is referring to.
	Type *AliasPathTokenType `json:"type,omitempty" azure:"ro"`
}

// The type of the pattern for an alias path.
type AliasPattern struct {
	// The alias pattern phrase.
	Phrase *string `json:"phrase,omitempty"`

	// The type of alias pattern
	Type *AliasPatternType `json:"type,omitempty"`

	// The alias pattern variable.
	Variable *string `json:"variable,omitempty"`
}

// Deployment dependency information.
type BasicDependency struct {
	// The ID of the dependency.
	ID *string `json:"id,omitempty"`

	// The dependency resource name.
	ResourceName *string `json:"resourceName,omitempty"`

	// The dependency resource type.
	ResourceType *string `json:"resourceType,omitempty"`
}

// BooleanResponse contains a boolean response.
type BooleanResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Success indicates if the operation succeeded or failed.
	Success bool
}

// An error response for a resource management request.
type CloudError struct {
	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
	// format.)
	InnerError *ErrorResponse `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
func (e CloudError) Error() string {
	msg := ""
	if e.InnerError != nil {
		msg += fmt.Sprintf("InnerError: %v\n", *e.InnerError)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// The debug setting.
type DebugSetting struct {
	// Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent
	// separated by a comma. The default is
	// none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request
	// or response, you could potentially expose
	// sensitive data that is retrieved through the deployment operations.
	DetailLevel *string `json:"detailLevel,omitempty"`
}

// Deployment dependency information.
type Dependency struct {
	// The list of dependencies.
	DependsOn *[]BasicDependency `json:"dependsOn,omitempty"`

	// The ID of the dependency.
	ID *string `json:"id,omitempty"`

	// The dependency resource name.
	ResourceName *string `json:"resourceName,omitempty"`

	// The dependency resource type.
	ResourceType *string `json:"resourceType,omitempty"`
}

// Deployment operation parameters.
type Deployment struct {
	// The location to store the deployment data.
	Location *string `json:"location,omitempty"`

	// The deployment properties.
	Properties *DeploymentProperties `json:"properties,omitempty"`

	// Deployment tags
	Tags *map[string]string `json:"tags,omitempty"`
}

// The deployment export result.
type DeploymentExportResult struct {
	// The template content.
	Template interface{} `json:"template,omitempty"`
}

// DeploymentExportResultResponse is the response envelope for operations that return a DeploymentExportResult type.
type DeploymentExportResultResponse struct {
	// The deployment export result.
	DeploymentExportResult *DeploymentExportResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Deployment information.
type DeploymentExtended struct {
	// READ-ONLY; The ID of the deployment.
	ID *string `json:"id,omitempty" azure:"ro"`

	// the location of the deployment.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; The name of the deployment.
	Name *string `json:"name,omitempty" azure:"ro"`

	// Deployment properties.
	Properties *DeploymentPropertiesExtended `json:"properties,omitempty"`

	// Deployment tags
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; The type of the deployment.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Deployment filter.
type DeploymentExtendedFilter struct {
	// The provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// DeploymentExtendedPollerResponse is the response envelope for operations that asynchronously return a DeploymentExtended type.
type DeploymentExtendedPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DeploymentExtendedResponse, error)

	// Poller contains an initialized poller.
	Poller DeploymentExtendedPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeploymentExtendedResponse is the response envelope for operations that return a DeploymentExtended type.
type DeploymentExtendedResponse struct {
	// Deployment information.
	DeploymentExtended *DeploymentExtended

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// List of deployments.
type DeploymentListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of deployments.
	Value *[]DeploymentExtended `json:"value,omitempty"`
}

// DeploymentListResultResponse is the response envelope for operations that return a DeploymentListResult type.
type DeploymentListResultResponse struct {
	// List of deployments.
	DeploymentListResult *DeploymentListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Deployment operation information.
type DeploymentOperation struct {
	// READ-ONLY; Full deployment operation ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Deployment operation ID.
	OperationID *string `json:"operationId,omitempty" azure:"ro"`

	// Deployment properties.
	Properties *DeploymentOperationProperties `json:"properties,omitempty"`
}

// Deployment operation properties.
type DeploymentOperationProperties struct {
	// READ-ONLY; The duration of the operation.
	Duration *string `json:"duration,omitempty" azure:"ro"`

	// READ-ONLY; The name of the current provisioning operation.
	ProvisioningOperation *ProvisioningOperation `json:"provisioningOperation,omitempty" azure:"ro"`

	// READ-ONLY; The state of the provisioning.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The HTTP request message.
	Request *HTTPMessage `json:"request,omitempty" azure:"ro"`

	// READ-ONLY; The HTTP response message.
	Response *HTTPMessage `json:"response,omitempty" azure:"ro"`

	// READ-ONLY; Deployment operation service request id.
	ServiceRequestID *string `json:"serviceRequestId,omitempty" azure:"ro"`

	// READ-ONLY; Operation status code from the resource provider. This property may not be set if a response has not yet been received.
	StatusCode *string `json:"statusCode,omitempty" azure:"ro"`

	// READ-ONLY; Operation status message from the resource provider. This property is optional. It will only be provided if an error was received from the
	// resource provider.
	StatusMessage *StatusMessage `json:"statusMessage,omitempty" azure:"ro"`

	// READ-ONLY; The target resource.
	TargetResource *TargetResource `json:"targetResource,omitempty" azure:"ro"`

	// READ-ONLY; The date and time of the operation.
	Timestamp *time.Time `json:"timestamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentOperationProperties.
func (d DeploymentOperationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if d.Duration != nil {
		objectMap["duration"] = d.Duration
	}
	if d.ProvisioningOperation != nil {
		objectMap["provisioningOperation"] = d.ProvisioningOperation
	}
	if d.ProvisioningState != nil {
		objectMap["provisioningState"] = d.ProvisioningState
	}
	if d.Request != nil {
		objectMap["request"] = d.Request
	}
	if d.Response != nil {
		objectMap["response"] = d.Response
	}
	if d.ServiceRequestID != nil {
		objectMap["serviceRequestId"] = d.ServiceRequestID
	}
	if d.StatusCode != nil {
		objectMap["statusCode"] = d.StatusCode
	}
	if d.StatusMessage != nil {
		objectMap["statusMessage"] = d.StatusMessage
	}
	if d.TargetResource != nil {
		objectMap["targetResource"] = d.TargetResource
	}
	if d.Timestamp != nil {
		objectMap["timestamp"] = (*timeRFC3339)(d.Timestamp)
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentOperationProperties.
func (d *DeploymentOperationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			if val != nil {
				err = json.Unmarshal(*val, &d.Duration)
			}
			delete(rawMsg, key)
		case "provisioningOperation":
			if val != nil {
				err = json.Unmarshal(*val, &d.ProvisioningOperation)
			}
			delete(rawMsg, key)
		case "provisioningState":
			if val != nil {
				err = json.Unmarshal(*val, &d.ProvisioningState)
			}
			delete(rawMsg, key)
		case "request":
			if val != nil {
				err = json.Unmarshal(*val, &d.Request)
			}
			delete(rawMsg, key)
		case "response":
			if val != nil {
				err = json.Unmarshal(*val, &d.Response)
			}
			delete(rawMsg, key)
		case "serviceRequestId":
			if val != nil {
				err = json.Unmarshal(*val, &d.ServiceRequestID)
			}
			delete(rawMsg, key)
		case "statusCode":
			if val != nil {
				err = json.Unmarshal(*val, &d.StatusCode)
			}
			delete(rawMsg, key)
		case "statusMessage":
			if val != nil {
				err = json.Unmarshal(*val, &d.StatusMessage)
			}
			delete(rawMsg, key)
		case "targetResource":
			if val != nil {
				err = json.Unmarshal(*val, &d.TargetResource)
			}
			delete(rawMsg, key)
		case "timestamp":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				d.Timestamp = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DeploymentOperationResponse is the response envelope for operations that return a DeploymentOperation type.
type DeploymentOperationResponse struct {
	// Deployment operation information.
	DeploymentOperation *DeploymentOperation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeploymentOperationsGetAtManagementGroupScopeOptions contains the optional parameters for the DeploymentOperations.GetAtManagementGroupScope method.
type DeploymentOperationsGetAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentOperationsGetAtScopeOptions contains the optional parameters for the DeploymentOperations.GetAtScope method.
type DeploymentOperationsGetAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentOperationsGetAtSubscriptionScopeOptions contains the optional parameters for the DeploymentOperations.GetAtSubscriptionScope method.
type DeploymentOperationsGetAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentOperationsGetAtTenantScopeOptions contains the optional parameters for the DeploymentOperations.GetAtTenantScope method.
type DeploymentOperationsGetAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentOperationsGetOptions contains the optional parameters for the DeploymentOperations.Get method.
type DeploymentOperationsGetOptions struct {
	// placeholder for future optional parameters
}

// DeploymentOperationsListAtManagementGroupScopeOptions contains the optional parameters for the DeploymentOperations.ListAtManagementGroupScope method.
type DeploymentOperationsListAtManagementGroupScopeOptions struct {
	// The number of results to return.
	Top *int32
}

// DeploymentOperationsListAtScopeOptions contains the optional parameters for the DeploymentOperations.ListAtScope method.
type DeploymentOperationsListAtScopeOptions struct {
	// The number of results to return.
	Top *int32
}

// DeploymentOperationsListAtSubscriptionScopeOptions contains the optional parameters for the DeploymentOperations.ListAtSubscriptionScope method.
type DeploymentOperationsListAtSubscriptionScopeOptions struct {
	// The number of results to return.
	Top *int32
}

// DeploymentOperationsListAtTenantScopeOptions contains the optional parameters for the DeploymentOperations.ListAtTenantScope method.
type DeploymentOperationsListAtTenantScopeOptions struct {
	// The number of results to return.
	Top *int32
}

// DeploymentOperationsListOptions contains the optional parameters for the DeploymentOperations.List method.
type DeploymentOperationsListOptions struct {
	// The number of results to return.
	Top *int32
}

// List of deployment operations.
type DeploymentOperationsListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of deployment operations.
	Value *[]DeploymentOperation `json:"value,omitempty"`
}

// DeploymentOperationsListResultResponse is the response envelope for operations that return a DeploymentOperationsListResult type.
type DeploymentOperationsListResultResponse struct {
	// List of deployment operations.
	DeploymentOperationsListResult *DeploymentOperationsListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Deployment properties.
type DeploymentProperties struct {
	// The debug setting of the deployment.
	DebugSetting *DebugSetting `json:"debugSetting,omitempty"`

	// Specifies whether template expressions are evaluated within the scope of the parent template or nested template. Only applicable to nested templates.
	// If not specified, default value is outer.
	ExpressionEvaluationOptions *ExpressionEvaluationOptions `json:"expressionEvaluationOptions,omitempty"`

	// The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed without deleting
	// existing resources that are not included in
	// the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted.
	// Be careful when using Complete mode as you may
	// unintentionally delete resources.
	Mode *DeploymentMode `json:"mode,omitempty"`

	// The deployment on error behavior.
	OnErrorDeployment *OnErrorDeployment `json:"onErrorDeployment,omitempty"`

	// Name and value pairs that define the deployment parameters for the template. You use this element when you want to provide the parameter values directly
	// in the request rather than link to an existing
	// parameter file. Use either the parametersLink property or the parameters property, but not both. It can be a JObject or a well formed JSON string.
	Parameters interface{} `json:"parameters,omitempty"`

	// The URI of parameters file. You use this element to link to an existing parameters file. Use either the parametersLink property or the parameters property,
	// but not both.
	ParametersLink *ParametersLink `json:"parametersLink,omitempty"`

	// The template content. You use this element when you want to pass the template syntax directly in the request rather than link to an existing template.
	// It can be a JObject or well-formed JSON string.
	// Use either the templateLink property or the template property, but not both.
	Template interface{} `json:"template,omitempty"`

	// The URI of the template. Use either the templateLink property or the template property, but not both.
	TemplateLink *TemplateLink `json:"templateLink,omitempty"`
}

// Deployment properties with additional details.
type DeploymentPropertiesExtended struct {
	// READ-ONLY; The correlation ID of the deployment.
	CorrelationID *string `json:"correlationId,omitempty" azure:"ro"`

	// READ-ONLY; The debug setting of the deployment.
	DebugSetting *DebugSetting `json:"debugSetting,omitempty" azure:"ro"`

	// READ-ONLY; The list of deployment dependencies.
	Dependencies *[]Dependency `json:"dependencies,omitempty" azure:"ro"`

	// READ-ONLY; The duration of the template deployment.
	Duration *string `json:"duration,omitempty" azure:"ro"`

	// READ-ONLY; The deployment error.
	Error *ErrorResponse `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The deployment mode. Possible values are Incremental and Complete.
	Mode *DeploymentMode `json:"mode,omitempty" azure:"ro"`

	// READ-ONLY; The deployment on error behavior.
	OnErrorDeployment *OnErrorDeploymentExtended `json:"onErrorDeployment,omitempty" azure:"ro"`

	// READ-ONLY; Array of provisioned resources.
	OutputResources *[]ResourceReference `json:"outputResources,omitempty" azure:"ro"`

	// READ-ONLY; Key/value pairs that represent deployment output.
	Outputs interface{} `json:"outputs,omitempty" azure:"ro"`

	// READ-ONLY; Deployment parameters.
	Parameters interface{} `json:"parameters,omitempty" azure:"ro"`

	// READ-ONLY; The URI referencing the parameters.
	ParametersLink *ParametersLink `json:"parametersLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of resource providers needed for the deployment.
	Providers *[]Provider `json:"providers,omitempty" azure:"ro"`

	// READ-ONLY; Denotes the state of provisioning.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The hash produced for the template.
	TemplateHash *string `json:"templateHash,omitempty" azure:"ro"`

	// READ-ONLY; The URI referencing the template.
	TemplateLink *TemplateLink `json:"templateLink,omitempty" azure:"ro"`

	// READ-ONLY; The timestamp of the template deployment.
	Timestamp *time.Time `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; Array of validated resources.
	ValidatedResources *[]ResourceReference `json:"validatedResources,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentPropertiesExtended.
func (d DeploymentPropertiesExtended) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if d.CorrelationID != nil {
		objectMap["correlationId"] = d.CorrelationID
	}
	if d.DebugSetting != nil {
		objectMap["debugSetting"] = d.DebugSetting
	}
	if d.Dependencies != nil {
		objectMap["dependencies"] = d.Dependencies
	}
	if d.Duration != nil {
		objectMap["duration"] = d.Duration
	}
	if d.Error != nil {
		objectMap["error"] = d.Error
	}
	if d.Mode != nil {
		objectMap["mode"] = d.Mode
	}
	if d.OnErrorDeployment != nil {
		objectMap["onErrorDeployment"] = d.OnErrorDeployment
	}
	if d.OutputResources != nil {
		objectMap["outputResources"] = d.OutputResources
	}
	if d.Outputs != nil {
		objectMap["outputs"] = d.Outputs
	}
	if d.Parameters != nil {
		objectMap["parameters"] = d.Parameters
	}
	if d.ParametersLink != nil {
		objectMap["parametersLink"] = d.ParametersLink
	}
	if d.Providers != nil {
		objectMap["providers"] = d.Providers
	}
	if d.ProvisioningState != nil {
		objectMap["provisioningState"] = d.ProvisioningState
	}
	if d.TemplateHash != nil {
		objectMap["templateHash"] = d.TemplateHash
	}
	if d.TemplateLink != nil {
		objectMap["templateLink"] = d.TemplateLink
	}
	if d.Timestamp != nil {
		objectMap["timestamp"] = (*timeRFC3339)(d.Timestamp)
	}
	if d.ValidatedResources != nil {
		objectMap["validatedResources"] = d.ValidatedResources
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentPropertiesExtended.
func (d *DeploymentPropertiesExtended) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "correlationId":
			if val != nil {
				err = json.Unmarshal(*val, &d.CorrelationID)
			}
			delete(rawMsg, key)
		case "debugSetting":
			if val != nil {
				err = json.Unmarshal(*val, &d.DebugSetting)
			}
			delete(rawMsg, key)
		case "dependencies":
			if val != nil {
				err = json.Unmarshal(*val, &d.Dependencies)
			}
			delete(rawMsg, key)
		case "duration":
			if val != nil {
				err = json.Unmarshal(*val, &d.Duration)
			}
			delete(rawMsg, key)
		case "error":
			if val != nil {
				err = json.Unmarshal(*val, &d.Error)
			}
			delete(rawMsg, key)
		case "mode":
			if val != nil {
				err = json.Unmarshal(*val, &d.Mode)
			}
			delete(rawMsg, key)
		case "onErrorDeployment":
			if val != nil {
				err = json.Unmarshal(*val, &d.OnErrorDeployment)
			}
			delete(rawMsg, key)
		case "outputResources":
			if val != nil {
				err = json.Unmarshal(*val, &d.OutputResources)
			}
			delete(rawMsg, key)
		case "outputs":
			if val != nil {
				err = json.Unmarshal(*val, &d.Outputs)
			}
			delete(rawMsg, key)
		case "parameters":
			if val != nil {
				err = json.Unmarshal(*val, &d.Parameters)
			}
			delete(rawMsg, key)
		case "parametersLink":
			if val != nil {
				err = json.Unmarshal(*val, &d.ParametersLink)
			}
			delete(rawMsg, key)
		case "providers":
			if val != nil {
				err = json.Unmarshal(*val, &d.Providers)
			}
			delete(rawMsg, key)
		case "provisioningState":
			if val != nil {
				err = json.Unmarshal(*val, &d.ProvisioningState)
			}
			delete(rawMsg, key)
		case "templateHash":
			if val != nil {
				err = json.Unmarshal(*val, &d.TemplateHash)
			}
			delete(rawMsg, key)
		case "templateLink":
			if val != nil {
				err = json.Unmarshal(*val, &d.TemplateLink)
			}
			delete(rawMsg, key)
		case "timestamp":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				d.Timestamp = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "validatedResources":
			if val != nil {
				err = json.Unmarshal(*val, &d.ValidatedResources)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Information from validate template deployment response.
type DeploymentValidateResult struct {
	// READ-ONLY; The deployment validation error.
	Error *ErrorResponse `json:"error,omitempty" azure:"ro"`

	// The template deployment properties.
	Properties *DeploymentPropertiesExtended `json:"properties,omitempty"`
}

// DeploymentValidateResultPollerResponse is the response envelope for operations that asynchronously return a DeploymentValidateResult type.
type DeploymentValidateResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DeploymentValidateResultResponse, error)

	// Poller contains an initialized poller.
	Poller DeploymentValidateResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DeploymentValidateResultResponse is the response envelope for operations that return a DeploymentValidateResult type.
type DeploymentValidateResultResponse struct {
	// Information from validate template deployment response.
	DeploymentValidateResult *DeploymentValidateResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Deployment What-if operation parameters.
type DeploymentWhatIf struct {
	// The location to store the deployment data.
	Location *string `json:"location,omitempty"`

	// The deployment properties.
	Properties *DeploymentWhatIfProperties `json:"properties,omitempty"`
}

// Deployment What-if properties.
type DeploymentWhatIfProperties struct {
	DeploymentProperties
	// Optional What-If operation settings.
	WhatIfSettings *DeploymentWhatIfSettings `json:"whatIfSettings,omitempty"`
}

// Deployment What-If operation settings.
type DeploymentWhatIfSettings struct {
	// The format of the What-If results
	ResultFormat *WhatIfResultFormat `json:"resultFormat,omitempty"`
}

// DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtManagementGroupScope
// method.
type DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginCreateOrUpdateAtScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtScope method.
type DeploymentsBeginCreateOrUpdateAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtSubscriptionScope
// method.
type DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginCreateOrUpdateAtTenantScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtTenantScope method.
type DeploymentsBeginCreateOrUpdateAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginCreateOrUpdateOptions contains the optional parameters for the Deployments.BeginCreateOrUpdate method.
type DeploymentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtManagementGroupScope method.
type DeploymentsBeginDeleteAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteAtScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtScope method.
type DeploymentsBeginDeleteAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtSubscriptionScope method.
type DeploymentsBeginDeleteAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteAtTenantScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtTenantScope method.
type DeploymentsBeginDeleteAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteOptions contains the optional parameters for the Deployments.BeginDelete method.
type DeploymentsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginValidateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginValidateAtManagementGroupScope method.
type DeploymentsBeginValidateAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginValidateAtScopeOptions contains the optional parameters for the Deployments.BeginValidateAtScope method.
type DeploymentsBeginValidateAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginValidateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginValidateAtSubscriptionScope method.
type DeploymentsBeginValidateAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginValidateAtTenantScopeOptions contains the optional parameters for the Deployments.BeginValidateAtTenantScope method.
type DeploymentsBeginValidateAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginValidateOptions contains the optional parameters for the Deployments.BeginValidate method.
type DeploymentsBeginValidateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginWhatIfAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtManagementGroupScope method.
type DeploymentsBeginWhatIfAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginWhatIfAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtSubscriptionScope method.
type DeploymentsBeginWhatIfAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginWhatIfAtTenantScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtTenantScope method.
type DeploymentsBeginWhatIfAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginWhatIfOptions contains the optional parameters for the Deployments.BeginWhatIf method.
type DeploymentsBeginWhatIfOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCalculateTemplateHashOptions contains the optional parameters for the Deployments.CalculateTemplateHash method.
type DeploymentsCalculateTemplateHashOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCancelAtManagementGroupScopeOptions contains the optional parameters for the Deployments.CancelAtManagementGroupScope method.
type DeploymentsCancelAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCancelAtScopeOptions contains the optional parameters for the Deployments.CancelAtScope method.
type DeploymentsCancelAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCancelAtSubscriptionScopeOptions contains the optional parameters for the Deployments.CancelAtSubscriptionScope method.
type DeploymentsCancelAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCancelAtTenantScopeOptions contains the optional parameters for the Deployments.CancelAtTenantScope method.
type DeploymentsCancelAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCancelOptions contains the optional parameters for the Deployments.Cancel method.
type DeploymentsCancelOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCheckExistenceAtManagementGroupScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtManagementGroupScope method.
type DeploymentsCheckExistenceAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCheckExistenceAtScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtScope method.
type DeploymentsCheckExistenceAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCheckExistenceAtSubscriptionScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtSubscriptionScope method.
type DeploymentsCheckExistenceAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCheckExistenceAtTenantScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtTenantScope method.
type DeploymentsCheckExistenceAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsCheckExistenceOptions contains the optional parameters for the Deployments.CheckExistence method.
type DeploymentsCheckExistenceOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsExportTemplateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtManagementGroupScope method.
type DeploymentsExportTemplateAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsExportTemplateAtScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtScope method.
type DeploymentsExportTemplateAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsExportTemplateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtSubscriptionScope method.
type DeploymentsExportTemplateAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsExportTemplateAtTenantScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtTenantScope method.
type DeploymentsExportTemplateAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsExportTemplateOptions contains the optional parameters for the Deployments.ExportTemplate method.
type DeploymentsExportTemplateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetAtManagementGroupScopeOptions contains the optional parameters for the Deployments.GetAtManagementGroupScope method.
type DeploymentsGetAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetAtScopeOptions contains the optional parameters for the Deployments.GetAtScope method.
type DeploymentsGetAtScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetAtSubscriptionScopeOptions contains the optional parameters for the Deployments.GetAtSubscriptionScope method.
type DeploymentsGetAtSubscriptionScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetAtTenantScopeOptions contains the optional parameters for the Deployments.GetAtTenantScope method.
type DeploymentsGetAtTenantScopeOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetOptions contains the optional parameters for the Deployments.Get method.
type DeploymentsGetOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsListAtManagementGroupScopeOptions contains the optional parameters for the Deployments.ListAtManagementGroupScope method.
type DeploymentsListAtManagementGroupScopeOptions struct {
	// The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
	Filter *string
	// The number of results to get. If null is passed, returns all deployments.
	Top *int32
}

// DeploymentsListAtScopeOptions contains the optional parameters for the Deployments.ListAtScope method.
type DeploymentsListAtScopeOptions struct {
	// The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
	Filter *string
	// The number of results to get. If null is passed, returns all deployments.
	Top *int32
}

// DeploymentsListAtSubscriptionScopeOptions contains the optional parameters for the Deployments.ListAtSubscriptionScope method.
type DeploymentsListAtSubscriptionScopeOptions struct {
	// The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
	Filter *string
	// The number of results to get. If null is passed, returns all deployments.
	Top *int32
}

// DeploymentsListAtTenantScopeOptions contains the optional parameters for the Deployments.ListAtTenantScope method.
type DeploymentsListAtTenantScopeOptions struct {
	// The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
	Filter *string
	// The number of results to get. If null is passed, returns all deployments.
	Top *int32
}

// DeploymentsListByResourceGroupOptions contains the optional parameters for the Deployments.ListByResourceGroup method.
type DeploymentsListByResourceGroupOptions struct {
	// The filter to apply on the operation. For example, you can use $filter=provisioningState eq '{state}'.
	Filter *string
	// The number of results to get. If null is passed, returns all deployments.
	Top *int32
}

// The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
// format.)
type ErrorResponse struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo *[]ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details *[]ErrorResponse `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// Export resource group template request parameters.
type ExportTemplateRequest struct {
	// The export template options. A CSV-formatted list containing zero or more of the following: 'IncludeParameterDefaultValue', 'IncludeComments', 'SkipResourceNameParameterization',
	// 'SkipAllParameterization'
	Options *string `json:"options,omitempty"`

	// The IDs of the resources to filter the export by. To export all resources, supply an array with single entry '*'.
	Resources *[]string `json:"resources,omitempty"`
}

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
type ExpressionEvaluationOptions struct {
	// The scope to be used for evaluation of parameters, variables and functions in a nested template.
	Scope *ExpressionEvaluationOptionsScopeType `json:"scope,omitempty"`
}

// Resource information.
type GenericResource struct {
	Resource
	// The identity of the resource.
	IDentity *IDentity `json:"identity,omitempty"`

	// The kind of the resource.
	Kind *string `json:"kind,omitempty"`

	// ID of the resource that manages this resource.
	ManagedBy *string `json:"managedBy,omitempty"`

	// The plan of the resource.
	Plan *Plan `json:"plan,omitempty"`

	// The resource properties.
	Properties interface{} `json:"properties,omitempty"`

	// The SKU of the resource.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GenericResource.
func (g GenericResource) MarshalJSON() ([]byte, error) {
	objectMap := g.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenericResource.
func (g *GenericResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return g.unmarshalInternal(rawMsg)
}

func (g GenericResource) marshalInternal() map[string]interface{} {
	objectMap := g.Resource.marshalInternal()
	if g.IDentity != nil {
		objectMap["identity"] = g.IDentity
	}
	if g.Kind != nil {
		objectMap["kind"] = g.Kind
	}
	if g.ManagedBy != nil {
		objectMap["managedBy"] = g.ManagedBy
	}
	if g.Plan != nil {
		objectMap["plan"] = g.Plan
	}
	if g.Properties != nil {
		objectMap["properties"] = g.Properties
	}
	if g.SKU != nil {
		objectMap["sku"] = g.SKU
	}
	return objectMap
}

func (g *GenericResource) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			if val != nil {
				err = json.Unmarshal(*val, &g.IDentity)
			}
			delete(rawMsg, key)
		case "kind":
			if val != nil {
				err = json.Unmarshal(*val, &g.Kind)
			}
			delete(rawMsg, key)
		case "managedBy":
			if val != nil {
				err = json.Unmarshal(*val, &g.ManagedBy)
			}
			delete(rawMsg, key)
		case "plan":
			if val != nil {
				err = json.Unmarshal(*val, &g.Plan)
			}
			delete(rawMsg, key)
		case "properties":
			if val != nil {
				err = json.Unmarshal(*val, &g.Properties)
			}
			delete(rawMsg, key)
		case "sku":
			if val != nil {
				err = json.Unmarshal(*val, &g.SKU)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return g.Resource.unmarshalInternal(rawMsg)
}

// Resource information.
type GenericResourceExpanded struct {
	GenericResource
	// READ-ONLY; The changed time of the resource. This is only present if requested via the $expand query parameter.
	ChangedTime *time.Time `json:"changedTime,omitempty" azure:"ro"`

	// READ-ONLY; The created time of the resource. This is only present if requested via the $expand query parameter.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the resource. This is only present if requested via the $expand query parameter.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GenericResourceExpanded.
func (g GenericResourceExpanded) MarshalJSON() ([]byte, error) {
	objectMap := g.GenericResource.marshalInternal()
	if g.ChangedTime != nil {
		objectMap["changedTime"] = (*timeRFC3339)(g.ChangedTime)
	}
	if g.CreatedTime != nil {
		objectMap["createdTime"] = (*timeRFC3339)(g.CreatedTime)
	}
	if g.ProvisioningState != nil {
		objectMap["provisioningState"] = g.ProvisioningState
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenericResourceExpanded.
func (g *GenericResourceExpanded) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]*json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "changedTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				g.ChangedTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "createdTime":
			if val != nil {
				var aux timeRFC3339
				err = json.Unmarshal(*val, &aux)
				g.CreatedTime = (*time.Time)(&aux)
			}
			delete(rawMsg, key)
		case "provisioningState":
			if val != nil {
				err = json.Unmarshal(*val, &g.ProvisioningState)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return g.GenericResource.unmarshalInternal(rawMsg)
}

// Resource filter.
type GenericResourceFilter struct {
	// The resource type.
	ResourceType *string `json:"resourceType,omitempty"`

	// The tag name.
	Tagname *string `json:"tagname,omitempty"`

	// The tag value.
	Tagvalue *string `json:"tagvalue,omitempty"`
}

// GenericResourcePollerResponse is the response envelope for operations that asynchronously return a GenericResource type.
type GenericResourcePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GenericResourceResponse, error)

	// Poller contains an initialized poller.
	Poller GenericResourcePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GenericResourceResponse is the response envelope for operations that return a GenericResource type.
type GenericResourceResponse struct {
	// Resource information.
	GenericResource *GenericResource

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HTTP message.
type HTTPMessage struct {
	// HTTP message content.
	Content interface{} `json:"content,omitempty"`
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Identity for the resource.
type IDentity struct {
	// READ-ONLY; The principal ID of resource identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of resource.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`

	// The identity type.
	Type *ResourceIDentityType `json:"type,omitempty"`

	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIDentities *map[string]IDentityUserAssignedIdentitiesValue `json:"userAssignedIdentities,omitempty"`
}

type IDentityUserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// Deployment on error behavior.
type OnErrorDeployment struct {
	// The deployment to be used on error case.
	DeploymentName *string `json:"deploymentName,omitempty"`

	// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
	Type *OnErrorDeploymentType `json:"type,omitempty"`
}

// Deployment on error behavior with additional details.
type OnErrorDeploymentExtended struct {
	// The deployment to be used on error case.
	DeploymentName *string `json:"deploymentName,omitempty"`

	// READ-ONLY; The state of the provisioning for the on error deployment.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
	Type *OnErrorDeploymentType `json:"type,omitempty"`
}

// Microsoft.Resources operation
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// The object that represents the operation.
type OperationDisplay struct {
	// Description of the operation.
	Description *string `json:"description,omitempty"`

	// Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft.Resources
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed: Profile, endpoint, etc.
	Resource *string `json:"resource,omitempty"`
}

// Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Microsoft.Resources operations.
	Value *[]Operation `json:"value,omitempty"`
}

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse struct {
	// Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results.
	OperationListResult *OperationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Entity representing the reference to the deployment parameters.
type ParametersLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `json:"contentVersion,omitempty"`

	// The URI of the parameters file.
	URI *string `json:"uri,omitempty"`
}

// Plan for the resource.
type Plan struct {
	// The plan ID.
	Name *string `json:"name,omitempty"`

	// The offer ID.
	Product *string `json:"product,omitempty"`

	// The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`

	// The plan's version.
	Version *string `json:"version,omitempty"`
}

// Resource provider information.
type Provider struct {
	// READ-ONLY; The provider ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// The namespace of the resource provider.
	Namespace *string `json:"namespace,omitempty"`

	// READ-ONLY; The registration policy of the resource provider.
	RegistrationPolicy *string `json:"registrationPolicy,omitempty" azure:"ro"`

	// READ-ONLY; The registration state of the resource provider.
	RegistrationState *string `json:"registrationState,omitempty" azure:"ro"`

	// READ-ONLY; The collection of provider resource types.
	ResourceTypes *[]ProviderResourceType `json:"resourceTypes,omitempty" azure:"ro"`
}

// List of resource providers.
type ProviderListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of resource providers.
	Value *[]Provider `json:"value,omitempty"`
}

// ProviderListResultResponse is the response envelope for operations that return a ProviderListResult type.
type ProviderListResultResponse struct {
	// List of resource providers.
	ProviderListResult *ProviderListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// Resource type managed by the resource provider.
type ProviderResourceType struct {
	// READ-ONLY; The API profiles for the resource provider.
	APIProfiles *[]APIProfile `json:"apiProfiles,omitempty" azure:"ro"`

	// The API version.
	APIVersions *[]string `json:"apiVersions,omitempty"`

	// The aliases that are supported by this resource type.
	Aliases *[]Alias `json:"aliases,omitempty"`

	// The additional capabilities offered by this resource type.
	Capabilities *string `json:"capabilities,omitempty"`

	// READ-ONLY; The default API version.
	DefaultAPIVersion *string `json:"defaultApiVersion,omitempty" azure:"ro"`

	// The collection of locations where this resource type can be created.
	Locations *[]string `json:"locations,omitempty"`

	// The properties.
	Properties *map[string]string `json:"properties,omitempty"`

	// The resource type.
	ResourceType *string `json:"resourceType,omitempty"`
}

// ProviderResponse is the response envelope for operations that return a Provider type.
type ProviderResponse struct {
	// Resource provider information.
	Provider *Provider

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProvidersGetAtTenantScopeOptions contains the optional parameters for the Providers.GetAtTenantScope method.
type ProvidersGetAtTenantScopeOptions struct {
	// The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases.
	Expand *string
}

// ProvidersGetOptions contains the optional parameters for the Providers.Get method.
type ProvidersGetOptions struct {
	// The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases.
	Expand *string
}

// ProvidersListAtTenantScopeOptions contains the optional parameters for the Providers.ListAtTenantScope method.
type ProvidersListAtTenantScopeOptions struct {
	// The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property
	// aliases in response, use $expand=resourceTypes/aliases.
	Expand *string
	// The number of results to return. If null is passed returns all providers.
	Top *int32
}

// ProvidersListOptions contains the optional parameters for the Providers.List method.
type ProvidersListOptions struct {
	// The properties to include in the results. For example, use &$expand=metadata in the query string to retrieve resource provider metadata. To include property
	// aliases in response, use $expand=resourceTypes/aliases.
	Expand *string
	// The number of results to return. If null is passed returns all deployments.
	Top *int32
}

// ProvidersRegisterAtManagementGroupScopeOptions contains the optional parameters for the Providers.RegisterAtManagementGroupScope method.
type ProvidersRegisterAtManagementGroupScopeOptions struct {
	// placeholder for future optional parameters
}

// ProvidersRegisterOptions contains the optional parameters for the Providers.Register method.
type ProvidersRegisterOptions struct {
	// placeholder for future optional parameters
}

// ProvidersUnregisterOptions contains the optional parameters for the Providers.Unregister method.
type ProvidersUnregisterOptions struct {
	// placeholder for future optional parameters
}

// Specified resource.
type Resource struct {
	// READ-ONLY; Resource ID
	ID *string `json:"id,omitempty" azure:"ro"`

	// Resource location
	Location *string `json:"location,omitempty"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// Resource tags
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

func (r Resource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	if r.ID != nil {
		objectMap["id"] = r.ID
	}
	if r.Location != nil {
		objectMap["location"] = r.Location
	}
	if r.Name != nil {
		objectMap["name"] = r.Name
	}
	if r.Tags != nil {
		objectMap["tags"] = r.Tags
	}
	if r.Type != nil {
		objectMap["type"] = r.Type
	}
	return objectMap
}

func (r *Resource) unmarshalInternal(rawMsg map[string]*json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			if val != nil {
				err = json.Unmarshal(*val, &r.ID)
			}
			delete(rawMsg, key)
		case "location":
			if val != nil {
				err = json.Unmarshal(*val, &r.Location)
			}
			delete(rawMsg, key)
		case "name":
			if val != nil {
				err = json.Unmarshal(*val, &r.Name)
			}
			delete(rawMsg, key)
		case "tags":
			if val != nil {
				err = json.Unmarshal(*val, &r.Tags)
			}
			delete(rawMsg, key)
		case "type":
			if val != nil {
				err = json.Unmarshal(*val, &r.Type)
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Resource group information.
type ResourceGroup struct {
	// READ-ONLY; The ID of the resource group.
	ID *string `json:"id,omitempty" azure:"ro"`

	// The location of the resource group. It cannot be changed after the resource group has been created. It must be one of the supported Azure locations.
	Location *string `json:"location,omitempty"`

	// The ID of the resource that manages this resource group.
	ManagedBy *string `json:"managedBy,omitempty"`

	// READ-ONLY; The name of the resource group.
	Name *string `json:"name,omitempty" azure:"ro"`

	// The resource group properties.
	Properties *ResourceGroupProperties `json:"properties,omitempty"`

	// The tags attached to the resource group.
	Tags *map[string]string `json:"tags,omitempty"`

	// READ-ONLY; The type of the resource group.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Resource group export result.
type ResourceGroupExportResult struct {
	// The template export error.
	Error *ErrorResponse `json:"error,omitempty"`

	// The template content.
	Template interface{} `json:"template,omitempty"`
}

// ResourceGroupExportResultPollerResponse is the response envelope for operations that asynchronously return a ResourceGroupExportResult type.
type ResourceGroupExportResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ResourceGroupExportResultResponse, error)

	// Poller contains an initialized poller.
	Poller ResourceGroupExportResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceGroupExportResultResponse is the response envelope for operations that return a ResourceGroupExportResult type.
type ResourceGroupExportResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Resource group export result.
	ResourceGroupExportResult *ResourceGroupExportResult
}

// Resource group filter.
type ResourceGroupFilter struct {
	// The tag name.
	TagName *string `json:"tagName,omitempty"`

	// The tag value.
	TagValue *string `json:"tagValue,omitempty"`
}

// List of resource groups.
type ResourceGroupListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of resource groups.
	Value *[]ResourceGroup `json:"value,omitempty"`
}

// ResourceGroupListResultResponse is the response envelope for operations that return a ResourceGroupListResult type.
type ResourceGroupListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of resource groups.
	ResourceGroupListResult *ResourceGroupListResult
}

// Resource group information.
type ResourceGroupPatchable struct {
	// The ID of the resource that manages this resource group.
	ManagedBy *string `json:"managedBy,omitempty"`

	// The name of the resource group.
	Name *string `json:"name,omitempty"`

	// The resource group properties.
	Properties *ResourceGroupProperties `json:"properties,omitempty"`

	// The tags attached to the resource group.
	Tags *map[string]string `json:"tags,omitempty"`
}

// The resource group properties.
type ResourceGroupProperties struct {
	// READ-ONLY; The provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// ResourceGroupResponse is the response envelope for operations that return a ResourceGroup type.
type ResourceGroupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Resource group information.
	ResourceGroup *ResourceGroup
}

// ResourceGroupsBeginDeleteOptions contains the optional parameters for the ResourceGroups.BeginDelete method.
type ResourceGroupsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ResourceGroupsBeginExportTemplateOptions contains the optional parameters for the ResourceGroups.BeginExportTemplate method.
type ResourceGroupsBeginExportTemplateOptions struct {
	// placeholder for future optional parameters
}

// ResourceGroupsCheckExistenceOptions contains the optional parameters for the ResourceGroups.CheckExistence method.
type ResourceGroupsCheckExistenceOptions struct {
	// placeholder for future optional parameters
}

// ResourceGroupsCreateOrUpdateOptions contains the optional parameters for the ResourceGroups.CreateOrUpdate method.
type ResourceGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ResourceGroupsGetOptions contains the optional parameters for the ResourceGroups.Get method.
type ResourceGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// ResourceGroupsListOptions contains the optional parameters for the ResourceGroups.List method.
type ResourceGroupsListOptions struct {
	// The filter to apply on the operation.<br><br>You can filter by tag names and values. For example, to filter for a tag name and value, use $filter=tagName
	// eq 'tag1' and tagValue eq 'Value1'
	Filter *string
	// The number of results to return. If null is passed, returns all resource groups.
	Top *int32
}

// ResourceGroupsUpdateOptions contains the optional parameters for the ResourceGroups.Update method.
type ResourceGroupsUpdateOptions struct {
	// placeholder for future optional parameters
}

// List of resource groups.
type ResourceListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of resources.
	Value *[]GenericResourceExpanded `json:"value,omitempty"`
}

// ResourceListResultResponse is the response envelope for operations that return a ResourceListResult type.
type ResourceListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of resource groups.
	ResourceListResult *ResourceListResult
}

// Resource provider operation's display properties.
type ResourceProviderOperationDisplayProperties struct {
	// Operation description.
	Description *string `json:"description,omitempty"`

	// Resource provider operation.
	Operation *string `json:"operation,omitempty"`

	// Operation provider.
	Provider *string `json:"provider,omitempty"`

	// Operation description.
	Publisher *string `json:"publisher,omitempty"`

	// Operation resource.
	Resource *string `json:"resource,omitempty"`
}

// The resource Id model.
type ResourceReference struct {
	// READ-ONLY; The fully qualified resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ResourcesBeginCreateOrUpdateByIDOptions contains the optional parameters for the Resources.BeginCreateOrUpdateByID method.
type ResourcesBeginCreateOrUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginCreateOrUpdateOptions contains the optional parameters for the Resources.BeginCreateOrUpdate method.
type ResourcesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginDeleteByIDOptions contains the optional parameters for the Resources.BeginDeleteByID method.
type ResourcesBeginDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginDeleteOptions contains the optional parameters for the Resources.BeginDelete method.
type ResourcesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginMoveResourcesOptions contains the optional parameters for the Resources.BeginMoveResources method.
type ResourcesBeginMoveResourcesOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginUpdateByIDOptions contains the optional parameters for the Resources.BeginUpdateByID method.
type ResourcesBeginUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginUpdateOptions contains the optional parameters for the Resources.BeginUpdate method.
type ResourcesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ResourcesBeginValidateMoveResourcesOptions contains the optional parameters for the Resources.BeginValidateMoveResources method.
type ResourcesBeginValidateMoveResourcesOptions struct {
	// placeholder for future optional parameters
}

// ResourcesCheckExistenceByIDOptions contains the optional parameters for the Resources.CheckExistenceByID method.
type ResourcesCheckExistenceByIDOptions struct {
	// placeholder for future optional parameters
}

// ResourcesCheckExistenceOptions contains the optional parameters for the Resources.CheckExistence method.
type ResourcesCheckExistenceOptions struct {
	// placeholder for future optional parameters
}

// ResourcesGetByIDOptions contains the optional parameters for the Resources.GetByID method.
type ResourcesGetByIDOptions struct {
	// placeholder for future optional parameters
}

// ResourcesGetOptions contains the optional parameters for the Resources.Get method.
type ResourcesGetOptions struct {
	// placeholder for future optional parameters
}

// ResourcesListByResourceGroupOptions contains the optional parameters for the Resources.ListByResourceGroup method.
type ResourcesListByResourceGroupOptions struct {
	// Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`.
	// For example, `$expand=createdTime,changedTime`.
	Expand *string
	// The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup,
	// identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.<br><br>For example, to filter by
	// a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value, property) in the filter. The
	// properties you can use for substring are: name and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo',
	// name)<br><br>You can link more than one substringof together by adding and/or operators.<br><br>You can filter by tag names and values. For example,
	// to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each
	// resource are not returned in the results.<br><br>You can use some properties together when filtering. The combinations you can use are: substringof and/or
	// resourceType, plan and plan/publisher and plan/name, identity and identity/principalId.
	Filter *string
	// The number of results to return. If null is passed, returns all resources.
	Top *int32
}

// ResourcesListOptions contains the optional parameters for the Resources.List method.
type ResourcesListOptions struct {
	// Comma-separated list of additional properties to be included in the response. Valid values include `createdTime`, `changedTime` and `provisioningState`.
	// For example, `$expand=createdTime,changedTime`.
	Expand *string
	// The filter to apply on the operation.<br><br>The properties you can use for eq (equals) or ne (not equals) are: location, resourceType, name, resourceGroup,
	// identity, identity/principalId, plan, plan/publisher, plan/product, plan/name, plan/version, and plan/promotionCode.<br><br>For example, to filter by
	// a resource type, use: $filter=resourceType eq 'Microsoft.Network/virtualNetworks'<br><br>You can use substringof(value, property) in the filter. The
	// properties you can use for substring are: name and resourceGroup.<br><br>For example, to get all resources with 'demo' anywhere in the name, use: $filter=substringof('demo',
	// name)<br><br>You can link more than one substringof together by adding and/or operators.<br><br>You can filter by tag names and values. For example,
	// to filter for a tag name and value, use $filter=tagName eq 'tag1' and tagValue eq 'Value1'. When you filter by a tag name and value, the tags for each
	// resource are not returned in the results.<br><br>You can use some properties together when filtering. The combinations you can use are: substringof and/or
	// resourceType, plan and plan/publisher and plan/name, identity and identity/principalId.
	Filter *string
	// The number of results to return. If null is passed, returns all resource groups.
	Top *int32
}

// Parameters of move resources.
type ResourcesMoveInfo struct {
	// The IDs of the resources.
	Resources *[]string `json:"resources,omitempty"`

	// The target resource group.
	TargetResourceGroup *string `json:"targetResourceGroup,omitempty"`
}

// SKU for the resource.
type SKU struct {
	// The SKU capacity.
	Capacity *int32 `json:"capacity,omitempty"`

	// The SKU family.
	Family *string `json:"family,omitempty"`

	// The SKU model.
	Model *string `json:"model,omitempty"`

	// The SKU name.
	Name *string `json:"name,omitempty"`

	// The SKU size.
	Size *string `json:"size,omitempty"`

	// The SKU tier.
	Tier *string `json:"tier,omitempty"`
}

// Deployment operation parameters.
type ScopedDeployment struct {
	// The location to store the deployment data.
	Location *string `json:"location,omitempty"`

	// The deployment properties.
	Properties *DeploymentProperties `json:"properties,omitempty"`

	// Deployment tags
	Tags *map[string]string `json:"tags,omitempty"`
}

// Deployment What-if operation parameters.
type ScopedDeploymentWhatIf struct {
	// The location to store the deployment data.
	Location *string `json:"location,omitempty"`

	// The deployment properties.
	Properties *DeploymentWhatIfProperties `json:"properties,omitempty"`
}

// Operation status message object.
type StatusMessage struct {
	// The error reported by the operation.
	Error *ErrorResponse `json:"error,omitempty"`

	// Status of the deployment operation.
	Status *string `json:"status,omitempty"`
}

// Sub-resource.
type SubResource struct {
	// Resource ID
	ID *string `json:"id,omitempty"`
}

// Tag count.
type TagCount struct {
	// Type of count.
	Type *string `json:"type,omitempty"`

	// Value of count.
	Value *int32 `json:"value,omitempty"`
}

// Tag details.
type TagDetails struct {
	// The total number of resources that use the resource tag. When a tag is initially created and has no associated resources, the value is 0.
	Count *TagCount `json:"count,omitempty"`

	// READ-ONLY; The tag name ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// The tag name.
	TagName *string `json:"tagName,omitempty"`

	// The list of tag values.
	Values *[]TagValue `json:"values,omitempty"`
}

// TagDetailsResponse is the response envelope for operations that return a TagDetails type.
type TagDetailsResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Tag details.
	TagDetails *TagDetails
}

// Tag information.
type TagValue struct {
	// The tag value count.
	Count *TagCount `json:"count,omitempty"`

	// READ-ONLY; The tag value ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// The tag value.
	TagValue *string `json:"tagValue,omitempty"`
}

// TagValueResponse is the response envelope for operations that return a TagValue type.
type TagValueResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Tag information.
	TagValue *TagValue
}

// A dictionary of name and value pairs.
type Tags struct {
	// Dictionary of
	Tags *map[string]string `json:"tags,omitempty"`
}

// TagsCreateOrUpdateAtScopeOptions contains the optional parameters for the Tags.CreateOrUpdateAtScope method.
type TagsCreateOrUpdateAtScopeOptions struct {
	// placeholder for future optional parameters
}

// TagsCreateOrUpdateOptions contains the optional parameters for the Tags.CreateOrUpdate method.
type TagsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// TagsCreateOrUpdateValueOptions contains the optional parameters for the Tags.CreateOrUpdateValue method.
type TagsCreateOrUpdateValueOptions struct {
	// placeholder for future optional parameters
}

// TagsDeleteAtScopeOptions contains the optional parameters for the Tags.DeleteAtScope method.
type TagsDeleteAtScopeOptions struct {
	// placeholder for future optional parameters
}

// TagsDeleteOptions contains the optional parameters for the Tags.Delete method.
type TagsDeleteOptions struct {
	// placeholder for future optional parameters
}

// TagsDeleteValueOptions contains the optional parameters for the Tags.DeleteValue method.
type TagsDeleteValueOptions struct {
	// placeholder for future optional parameters
}

// TagsGetAtScopeOptions contains the optional parameters for the Tags.GetAtScope method.
type TagsGetAtScopeOptions struct {
	// placeholder for future optional parameters
}

// TagsListOptions contains the optional parameters for the Tags.List method.
type TagsListOptions struct {
	// placeholder for future optional parameters
}

// List of subscription tags.
type TagsListResult struct {
	// READ-ONLY; The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// An array of tags.
	Value *[]TagDetails `json:"value,omitempty"`
}

// TagsListResultResponse is the response envelope for operations that return a TagsListResult type.
type TagsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of subscription tags.
	TagsListResult *TagsListResult
}

// Wrapper resource for tags patch API request only.
type TagsPatchResource struct {
	// The operation type for the patch API.
	Operation *TagsPatchOperation `json:"operation,omitempty"`

	// The set of tags.
	Properties *Tags `json:"properties,omitempty"`
}

// Wrapper resource for tags API requests and responses.
type TagsResource struct {
	// READ-ONLY; The ID of the tags wrapper resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the tags wrapper resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// The set of tags.
	Properties *Tags `json:"properties,omitempty"`

	// READ-ONLY; The type of the tags wrapper resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// TagsResourceResponse is the response envelope for operations that return a TagsResource type.
type TagsResourceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Wrapper resource for tags API requests and responses.
	TagsResource *TagsResource
}

// TagsUpdateAtScopeOptions contains the optional parameters for the Tags.UpdateAtScope method.
type TagsUpdateAtScopeOptions struct {
	// placeholder for future optional parameters
}

// Target resource.
type TargetResource struct {
	// The ID of the resource.
	ID *string `json:"id,omitempty"`

	// The name of the resource.
	ResourceName *string `json:"resourceName,omitempty"`

	// The type of the resource.
	ResourceType *string `json:"resourceType,omitempty"`
}

// Result of the request to calculate template hash. It contains a string of minified template and its hash.
type TemplateHashResult struct {
	// The minified template string.
	MinifiedTemplate *string `json:"minifiedTemplate,omitempty"`

	// The template hash.
	TemplateHash *string `json:"templateHash,omitempty"`
}

// TemplateHashResultResponse is the response envelope for operations that return a TemplateHashResult type.
type TemplateHashResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Result of the request to calculate template hash. It contains a string of minified template and its hash.
	TemplateHashResult *TemplateHashResult
}

// Entity representing the reference to the template.
type TemplateLink struct {
	// If included, must match the ContentVersion in the template.
	ContentVersion *string `json:"contentVersion,omitempty"`

	// The resource id of a Template Spec. Use either the id or uri property, but not both.
	ID *string `json:"id,omitempty"`

	// Applicable only if this template link references a Template Spec. This relativePath property can optionally be used to reference a Template Spec artifact
	// by path.
	RelativePath *string `json:"relativePath,omitempty"`

	// The URI of the template to deploy. Use either the uri or id property, but not both.
	URI *string `json:"uri,omitempty"`
}

// Information about a single resource change predicted by What-If operation.
type WhatIfChange struct {
	// The predicted snapshot of the resource after the deployment is executed.
	After interface{} `json:"after,omitempty"`

	// The snapshot of the resource before the deployment is executed.
	Before interface{} `json:"before,omitempty"`

	// Type of change that will be made to the resource when the deployment is executed.
	ChangeType *ChangeType `json:"changeType,omitempty"`

	// The predicted changes to resource properties.
	Delta *[]WhatIfPropertyChange `json:"delta,omitempty"`

	// Resource ID
	ResourceID *string `json:"resourceId,omitempty"`
}

// Deployment operation properties.
type WhatIfOperationProperties struct {
	// List of resource changes predicted by What-If operation.
	Changes *[]WhatIfChange `json:"changes,omitempty"`
}

// Result of the What-If operation. Contains a list of predicted changes and a URL link to get to the next set of results.
type WhatIfOperationResult struct {
	// Error when What-If operation fails.
	Error *ErrorResponse `json:"error,omitempty"`

	// What-If operation properties.
	Properties *WhatIfOperationProperties `json:"properties,omitempty"`

	// Status of the What-If operation.
	Status *string `json:"status,omitempty"`
}

// WhatIfOperationResultPollerResponse is the response envelope for operations that asynchronously return a WhatIfOperationResult type.
type WhatIfOperationResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (WhatIfOperationResultResponse, error)

	// Poller contains an initialized poller.
	Poller WhatIfOperationResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WhatIfOperationResultResponse is the response envelope for operations that return a WhatIfOperationResult type.
type WhatIfOperationResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Result of the What-If operation. Contains a list of predicted changes and a URL link to get to the next set of results.
	WhatIfOperationResult *WhatIfOperationResult
}

// The predicted change to the resource property.
type WhatIfPropertyChange struct {
	// The value of the property after the deployment is executed.
	After interface{} `json:"after,omitempty"`

	// The value of the property before the deployment is executed.
	Before interface{} `json:"before,omitempty"`

	// Nested property changes.
	Children *[]WhatIfPropertyChange `json:"children,omitempty"`

	// The path of the property.
	Path *string `json:"path,omitempty"`

	// The type of property change.
	PropertyChangeType *PropertyChangeType `json:"propertyChangeType,omitempty"`
}
