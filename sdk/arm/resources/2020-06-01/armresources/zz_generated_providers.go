// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ProvidersClient contains the methods for the Providers group.
// Don't use this type directly, use NewProvidersClient() instead.
type ProvidersClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewProvidersClient creates a new instance of ProvidersClient with the specified values.
func NewProvidersClient(con *armcore.Connection, subscriptionID string) ProvidersClient {
	return ProvidersClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client ProvidersClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// Get - Gets the specified resource provider.
func (client ProvidersClient) Get(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetOptions) (ProviderResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return ProviderResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ProviderResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProviderResponse{}, client.getHandleError(resp)
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return ProviderResponse{}, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client ProvidersClient) getCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client ProvidersClient) getHandleResponse(resp *azcore.Response) (ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Provider)
	return result, err
}

// getHandleError handles the Get error response.
func (client ProvidersClient) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtTenantScope - Gets the specified resource provider at the tenant level.
func (client ProvidersClient) GetAtTenantScope(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetAtTenantScopeOptions) (ProviderResponse, error) {
	req, err := client.getAtTenantScopeCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return ProviderResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ProviderResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProviderResponse{}, client.getAtTenantScopeHandleError(resp)
	}
	result, err := client.getAtTenantScopeHandleResponse(resp)
	if err != nil {
		return ProviderResponse{}, err
	}
	return result, nil
}

// getAtTenantScopeCreateRequest creates the GetAtTenantScope request.
func (client ProvidersClient) getAtTenantScopeCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/{resourceProviderNamespace}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getAtTenantScopeHandleResponse handles the GetAtTenantScope response.
func (client ProvidersClient) getAtTenantScopeHandleResponse(resp *azcore.Response) (ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Provider)
	return result, err
}

// getAtTenantScopeHandleError handles the GetAtTenantScope error response.
func (client ProvidersClient) getAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// List - Gets all resource providers for a subscription.
func (client ProvidersClient) List(options *ProvidersListOptions) ProviderListResultPager {
	return &providerListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		responder: client.listHandleResponse,
		errorer:   client.listHandleError,
		advancer: func(ctx context.Context, resp ProviderListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ProviderListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listCreateRequest creates the List request.
func (client ProvidersClient) listCreateRequest(ctx context.Context, options *ProvidersListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client ProvidersClient) listHandleResponse(resp *azcore.Response) (ProviderListResultResponse, error) {
	result := ProviderListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.ProviderListResult)
	return result, err
}

// listHandleError handles the List error response.
func (client ProvidersClient) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtTenantScope - Gets all resource providers for the tenant.
func (client ProvidersClient) ListAtTenantScope(options *ProvidersListAtTenantScopeOptions) ProviderListResultPager {
	return &providerListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listAtTenantScopeCreateRequest(ctx, options)
		},
		responder: client.listAtTenantScopeHandleResponse,
		errorer:   client.listAtTenantScopeHandleError,
		advancer: func(ctx context.Context, resp ProviderListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ProviderListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listAtTenantScopeCreateRequest creates the ListAtTenantScope request.
func (client ProvidersClient) listAtTenantScopeCreateRequest(ctx context.Context, options *ProvidersListAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listAtTenantScopeHandleResponse handles the ListAtTenantScope response.
func (client ProvidersClient) listAtTenantScopeHandleResponse(resp *azcore.Response) (ProviderListResultResponse, error) {
	result := ProviderListResultResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.ProviderListResult)
	return result, err
}

// listAtTenantScopeHandleError handles the ListAtTenantScope error response.
func (client ProvidersClient) listAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Register - Registers a subscription with a resource provider.
func (client ProvidersClient) Register(ctx context.Context, resourceProviderNamespace string, options *ProvidersRegisterOptions) (ProviderResponse, error) {
	req, err := client.registerCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return ProviderResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ProviderResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProviderResponse{}, client.registerHandleError(resp)
	}
	result, err := client.registerHandleResponse(resp)
	if err != nil {
		return ProviderResponse{}, err
	}
	return result, nil
}

// registerCreateRequest creates the Register request.
func (client ProvidersClient) registerCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersRegisterOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// registerHandleResponse handles the Register response.
func (client ProvidersClient) registerHandleResponse(resp *azcore.Response) (ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Provider)
	return result, err
}

// registerHandleError handles the Register error response.
func (client ProvidersClient) registerHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// RegisterAtManagementGroupScope - Registers a management group with a resource provider.
func (client ProvidersClient) RegisterAtManagementGroupScope(ctx context.Context, resourceProviderNamespace string, groupId string, options *ProvidersRegisterAtManagementGroupScopeOptions) (*http.Response, error) {
	req, err := client.registerAtManagementGroupScopeCreateRequest(ctx, resourceProviderNamespace, groupId, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.registerAtManagementGroupScopeHandleError(resp)
	}
	return resp.Response, nil
}

// registerAtManagementGroupScopeCreateRequest creates the RegisterAtManagementGroupScope request.
func (client ProvidersClient) registerAtManagementGroupScopeCreateRequest(ctx context.Context, resourceProviderNamespace string, groupId string, options *ProvidersRegisterAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// registerAtManagementGroupScopeHandleError handles the RegisterAtManagementGroupScope error response.
func (client ProvidersClient) registerAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Unregister - Unregisters a subscription from a resource provider.
func (client ProvidersClient) Unregister(ctx context.Context, resourceProviderNamespace string, options *ProvidersUnregisterOptions) (ProviderResponse, error) {
	req, err := client.unregisterCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return ProviderResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ProviderResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ProviderResponse{}, client.unregisterHandleError(resp)
	}
	result, err := client.unregisterHandleResponse(resp)
	if err != nil {
		return ProviderResponse{}, err
	}
	return result, nil
}

// unregisterCreateRequest creates the Unregister request.
func (client ProvidersClient) unregisterCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersUnregisterOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// unregisterHandleResponse handles the Unregister response.
func (client ProvidersClient) unregisterHandleResponse(resp *azcore.Response) (ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	err := resp.UnmarshalAsJSON(&result.Provider)
	return result, err
}

// unregisterHandleError handles the Unregister error response.
func (client ProvidersClient) unregisterHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
