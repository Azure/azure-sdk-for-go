// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// ProvidersOperations contains the methods for the Providers group.
type ProvidersOperations interface {
	// Get - Gets the specified resource provider.
	Get(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetOptions) (*ProviderResponse, error)
	// GetAtTenantScope - Gets the specified resource provider at the tenant level.
	GetAtTenantScope(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetAtTenantScopeOptions) (*ProviderResponse, error)
	// List - Gets all resource providers for a subscription.
	List(options *ProvidersListOptions) ProviderListResultPager
	// ListAtTenantScope - Gets all resource providers for the tenant.
	ListAtTenantScope(options *ProvidersListAtTenantScopeOptions) ProviderListResultPager
	// Register - Registers a subscription with a resource provider.
	Register(ctx context.Context, resourceProviderNamespace string, options *ProvidersRegisterOptions) (*ProviderResponse, error)
	// RegisterAtManagementGroupScope - Registers a management group with a resource provider.
	RegisterAtManagementGroupScope(ctx context.Context, resourceProviderNamespace string, groupId string, options *ProvidersRegisterAtManagementGroupScopeOptions) (*http.Response, error)
	// Unregister - Unregisters a subscription from a resource provider.
	Unregister(ctx context.Context, resourceProviderNamespace string, options *ProvidersUnregisterOptions) (*ProviderResponse, error)
}

// ProvidersClient implements the ProvidersOperations interface.
// Don't use this type directly, use NewProvidersClient() instead.
type ProvidersClient struct {
	*Client
	subscriptionID string
}

// NewProvidersClient creates a new instance of ProvidersClient with the specified values.
func NewProvidersClient(c *Client, subscriptionID string) ProvidersOperations {
	return &ProvidersClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *ProvidersClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// Get - Gets the specified resource provider.
func (client *ProvidersClient) Get(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetOptions) (*ProviderResponse, error) {
	req, err := client.GetCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetHandleError(resp)
	}
	result, err := client.GetHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetCreateRequest creates the Get request.
func (client *ProvidersClient) GetCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetHandleResponse handles the Get response.
func (client *ProvidersClient) GetHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// GetHandleError handles the Get error response.
func (client *ProvidersClient) GetHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAtTenantScope - Gets the specified resource provider at the tenant level.
func (client *ProvidersClient) GetAtTenantScope(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetAtTenantScopeOptions) (*ProviderResponse, error) {
	req, err := client.GetAtTenantScopeCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.GetAtTenantScopeHandleError(resp)
	}
	result, err := client.GetAtTenantScopeHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GetAtTenantScopeCreateRequest creates the GetAtTenantScope request.
func (client *ProvidersClient) GetAtTenantScopeCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersGetAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/{resourceProviderNamespace}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// GetAtTenantScopeHandleResponse handles the GetAtTenantScope response.
func (client *ProvidersClient) GetAtTenantScopeHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// GetAtTenantScopeHandleError handles the GetAtTenantScope error response.
func (client *ProvidersClient) GetAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// List - Gets all resource providers for a subscription.
func (client *ProvidersClient) List(options *ProvidersListOptions) ProviderListResultPager {
	return &providerListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListCreateRequest(ctx, options)
		},
		responder: client.ListHandleResponse,
		errorer:   client.ListHandleError,
		advancer: func(ctx context.Context, resp *ProviderListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ProviderListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// ListCreateRequest creates the List request.
func (client *ProvidersClient) ListCreateRequest(ctx context.Context, options *ProvidersListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListHandleResponse handles the List response.
func (client *ProvidersClient) ListHandleResponse(resp *azcore.Response) (*ProviderListResultResponse, error) {
	result := ProviderListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProviderListResult)
}

// ListHandleError handles the List error response.
func (client *ProvidersClient) ListHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListAtTenantScope - Gets all resource providers for the tenant.
func (client *ProvidersClient) ListAtTenantScope(options *ProvidersListAtTenantScopeOptions) ProviderListResultPager {
	return &providerListResultPager{
		pipeline: client.p,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.ListAtTenantScopeCreateRequest(ctx, options)
		},
		responder: client.ListAtTenantScopeHandleResponse,
		errorer:   client.ListAtTenantScopeHandleError,
		advancer: func(ctx context.Context, resp *ProviderListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ProviderListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// ListAtTenantScopeCreateRequest creates the ListAtTenantScope request.
func (client *ProvidersClient) ListAtTenantScopeCreateRequest(ctx context.Context, options *ProvidersListAtTenantScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	if options != nil && options.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Expand != nil {
		query.Set("$expand", *options.Expand)
	}
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListAtTenantScopeHandleResponse handles the ListAtTenantScope response.
func (client *ProvidersClient) ListAtTenantScopeHandleResponse(resp *azcore.Response) (*ProviderListResultResponse, error) {
	result := ProviderListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ProviderListResult)
}

// ListAtTenantScopeHandleError handles the ListAtTenantScope error response.
func (client *ProvidersClient) ListAtTenantScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Register - Registers a subscription with a resource provider.
func (client *ProvidersClient) Register(ctx context.Context, resourceProviderNamespace string, options *ProvidersRegisterOptions) (*ProviderResponse, error) {
	req, err := client.RegisterCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.RegisterHandleError(resp)
	}
	result, err := client.RegisterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// RegisterCreateRequest creates the Register request.
func (client *ProvidersClient) RegisterCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersRegisterOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// RegisterHandleResponse handles the Register response.
func (client *ProvidersClient) RegisterHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// RegisterHandleError handles the Register error response.
func (client *ProvidersClient) RegisterHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// RegisterAtManagementGroupScope - Registers a management group with a resource provider.
func (client *ProvidersClient) RegisterAtManagementGroupScope(ctx context.Context, resourceProviderNamespace string, groupId string, options *ProvidersRegisterAtManagementGroupScopeOptions) (*http.Response, error) {
	req, err := client.RegisterAtManagementGroupScopeCreateRequest(ctx, resourceProviderNamespace, groupId, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.RegisterAtManagementGroupScopeHandleError(resp)
	}
	return resp.Response, nil
}

// RegisterAtManagementGroupScopeCreateRequest creates the RegisterAtManagementGroupScope request.
func (client *ProvidersClient) RegisterAtManagementGroupScopeCreateRequest(ctx context.Context, resourceProviderNamespace string, groupId string, options *ProvidersRegisterAtManagementGroupScopeOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupId))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// RegisterAtManagementGroupScopeHandleError handles the RegisterAtManagementGroupScope error response.
func (client *ProvidersClient) RegisterAtManagementGroupScopeHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Unregister - Unregisters a subscription from a resource provider.
func (client *ProvidersClient) Unregister(ctx context.Context, resourceProviderNamespace string, options *ProvidersUnregisterOptions) (*ProviderResponse, error) {
	req, err := client.UnregisterCreateRequest(ctx, resourceProviderNamespace, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.UnregisterHandleError(resp)
	}
	result, err := client.UnregisterHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UnregisterCreateRequest creates the Unregister request.
func (client *ProvidersClient) UnregisterCreateRequest(ctx context.Context, resourceProviderNamespace string, options *ProvidersUnregisterOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister"
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2020-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// UnregisterHandleResponse handles the Unregister response.
func (client *ProvidersClient) UnregisterHandleResponse(resp *azcore.Response) (*ProviderResponse, error) {
	result := ProviderResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Provider)
}

// UnregisterHandleError handles the Unregister error response.
func (client *ProvidersClient) UnregisterHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
