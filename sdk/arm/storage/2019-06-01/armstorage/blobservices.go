// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azstorage

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// BlobServicesOperations contains the methods for the BlobServices group.
type BlobServicesOperations interface {
	// GetServiceProperties - Gets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
	GetServiceProperties(ctx context.Context, resourceGroupName string, accountName string) (*BlobServicePropertiesResponse, error)
	// List - List blob services of storage account. It returns a collection of one object named default.
	List(ctx context.Context, resourceGroupName string, accountName string) (*BlobServiceItemsResponse, error)
	// SetServiceProperties - Sets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
	SetServiceProperties(ctx context.Context, resourceGroupName string, accountName string, parameters BlobServiceProperties) (*BlobServicePropertiesResponse, error)
}

// blobServicesOperations implements the BlobServicesOperations interface.
type blobServicesOperations struct {
	*Client
	subscriptionID string
}

// GetServiceProperties - Gets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
func (client *blobServicesOperations) GetServiceProperties(ctx context.Context, resourceGroupName string, accountName string) (*BlobServicePropertiesResponse, error) {
	req, err := client.getServicePropertiesCreateRequest(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getServicePropertiesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getServicePropertiesCreateRequest creates the GetServiceProperties request.
func (client *blobServicesOperations) getServicePropertiesCreateRequest(resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{BlobServicesName}", url.PathEscape("default"))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getServicePropertiesHandleResponse handles the GetServiceProperties response.
func (client *blobServicesOperations) getServicePropertiesHandleResponse(resp *azcore.Response) (*BlobServicePropertiesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getServicePropertiesHandleError(resp)
	}
	result := BlobServicePropertiesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BlobServiceProperties)
}

// getServicePropertiesHandleError handles the GetServiceProperties error response.
func (client *blobServicesOperations) getServicePropertiesHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// List - List blob services of storage account. It returns a collection of one object named default.
func (client *blobServicesOperations) List(ctx context.Context, resourceGroupName string, accountName string) (*BlobServiceItemsResponse, error) {
	req, err := client.listCreateRequest(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *blobServicesOperations) listCreateRequest(resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *blobServicesOperations) listHandleResponse(resp *azcore.Response) (*BlobServiceItemsResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := BlobServiceItemsResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BlobServiceItems)
}

// listHandleError handles the List error response.
func (client *blobServicesOperations) listHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// SetServiceProperties - Sets the properties of a storage account’s Blob service, including properties for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
func (client *blobServicesOperations) SetServiceProperties(ctx context.Context, resourceGroupName string, accountName string, parameters BlobServiceProperties) (*BlobServicePropertiesResponse, error) {
	req, err := client.setServicePropertiesCreateRequest(resourceGroupName, accountName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.setServicePropertiesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// setServicePropertiesCreateRequest creates the SetServiceProperties request.
func (client *blobServicesOperations) setServicePropertiesCreateRequest(resourceGroupName string, accountName string, parameters BlobServiceProperties) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{BlobServicesName}", url.PathEscape("default"))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// setServicePropertiesHandleResponse handles the SetServiceProperties response.
func (client *blobServicesOperations) setServicePropertiesHandleResponse(resp *azcore.Response) (*BlobServicePropertiesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.setServicePropertiesHandleError(resp)
	}
	result := BlobServicePropertiesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.BlobServiceProperties)
}

// setServicePropertiesHandleError handles the SetServiceProperties error response.
func (client *blobServicesOperations) setServicePropertiesHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
