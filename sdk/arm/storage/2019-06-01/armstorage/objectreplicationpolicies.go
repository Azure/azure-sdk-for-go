// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// ObjectReplicationPoliciesOperations contains the methods for the ObjectReplicationPolicies group.
type ObjectReplicationPoliciesOperations interface {
	// CreateOrUpdate - Create or update the object replication policy of the storage account.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string, properties ObjectReplicationPolicy) (*ObjectReplicationPolicyResponse, error)
	// Delete - Deletes the object replication policy associated with the specified storage account.
	Delete(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string) (*http.Response, error)
	// Get - Get the object replication policy of the storage account by policy ID.
	Get(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string) (*ObjectReplicationPolicyResponse, error)
	// List - List the object replication policies associated with the storage account.
	List(ctx context.Context, resourceGroupName string, accountName string) (*ObjectReplicationPoliciesResponse, error)
}

// objectReplicationPoliciesOperations implements the ObjectReplicationPoliciesOperations interface.
type objectReplicationPoliciesOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Create or update the object replication policy of the storage account.
func (client *objectReplicationPoliciesOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string, properties ObjectReplicationPolicy) (*ObjectReplicationPolicyResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, accountName, objectReplicationPolicyId, properties)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *objectReplicationPoliciesOperations) createOrUpdateCreateRequest(resourceGroupName string, accountName string, objectReplicationPolicyId string, properties ObjectReplicationPolicy) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{objectReplicationPolicyId}", url.PathEscape(objectReplicationPolicyId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(properties)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *objectReplicationPoliciesOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*ObjectReplicationPolicyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := ObjectReplicationPolicyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ObjectReplicationPolicy)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *objectReplicationPoliciesOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the object replication policy associated with the specified storage account.
func (client *objectReplicationPoliciesOperations) Delete(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, accountName, objectReplicationPolicyId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *objectReplicationPoliciesOperations) deleteCreateRequest(resourceGroupName string, accountName string, objectReplicationPolicyId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{objectReplicationPolicyId}", url.PathEscape(objectReplicationPolicyId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *objectReplicationPoliciesOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *objectReplicationPoliciesOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Get the object replication policy of the storage account by policy ID.
func (client *objectReplicationPoliciesOperations) Get(ctx context.Context, resourceGroupName string, accountName string, objectReplicationPolicyId string) (*ObjectReplicationPolicyResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, accountName, objectReplicationPolicyId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *objectReplicationPoliciesOperations) getCreateRequest(resourceGroupName string, accountName string, objectReplicationPolicyId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{objectReplicationPolicyId}", url.PathEscape(objectReplicationPolicyId))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *objectReplicationPoliciesOperations) getHandleResponse(resp *azcore.Response) (*ObjectReplicationPolicyResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := ObjectReplicationPolicyResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ObjectReplicationPolicy)
}

// getHandleError handles the Get error response.
func (client *objectReplicationPoliciesOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - List the object replication policies associated with the storage account.
func (client *objectReplicationPoliciesOperations) List(ctx context.Context, resourceGroupName string, accountName string) (*ObjectReplicationPoliciesResponse, error) {
	req, err := client.listCreateRequest(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *objectReplicationPoliciesOperations) listCreateRequest(resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *objectReplicationPoliciesOperations) listHandleResponse(resp *azcore.Response) (*ObjectReplicationPoliciesResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ObjectReplicationPoliciesResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ObjectReplicationPolicies)
}

// listHandleError handles the List error response.
func (client *objectReplicationPoliciesOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
