// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PrivateLinkResourcesOperations contains the methods for the PrivateLinkResources group.
type PrivateLinkResourcesOperations interface {
	// ListByStorageAccount - Gets the private link resources that need to be created for a storage account.
	ListByStorageAccount(ctx context.Context, resourceGroupName string, accountName string) (*PrivateLinkResourceListResultResponse, error)
}

// privateLinkResourcesOperations implements the PrivateLinkResourcesOperations interface.
type privateLinkResourcesOperations struct {
	*Client
	subscriptionID string
}

// ListByStorageAccount - Gets the private link resources that need to be created for a storage account.
func (client *privateLinkResourcesOperations) ListByStorageAccount(ctx context.Context, resourceGroupName string, accountName string) (*PrivateLinkResourceListResultResponse, error) {
	req, err := client.listByStorageAccountCreateRequest(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listByStorageAccountHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listByStorageAccountCreateRequest creates the ListByStorageAccount request.
func (client *privateLinkResourcesOperations) listByStorageAccountCreateRequest(resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByStorageAccountHandleResponse handles the ListByStorageAccount response.
func (client *privateLinkResourcesOperations) listByStorageAccountHandleResponse(resp *azcore.Response) (*PrivateLinkResourceListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByStorageAccountHandleError(resp)
	}
	result := PrivateLinkResourceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PrivateLinkResourceListResult)
}

// listByStorageAccountHandleError handles the ListByStorageAccount error response.
func (client *privateLinkResourcesOperations) listByStorageAccountHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
