// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// QueueOperations contains the methods for the Queue group.
type QueueOperations interface {
	// Create - Creates a new queue with the specified queue name, under the specified account.
	Create(ctx context.Context, resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*StorageQueueResponse, error)
	// Delete - Deletes the queue with the specified queue name, under the specified account if it exists.
	Delete(ctx context.Context, resourceGroupName string, accountName string, queueName string) (*http.Response, error)
	// Get - Gets the queue with the specified queue name, under the specified account if it exists.
	Get(ctx context.Context, resourceGroupName string, accountName string, queueName string) (*StorageQueueResponse, error)
	// List - Gets a list of all the queues under the specified storage account
	List(resourceGroupName string, accountName string, queueListOptions *QueueListOptions) (ListQueueResourcePager, error)
	// Update - Creates a new queue with the specified queue name, under the specified account.
	Update(ctx context.Context, resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*StorageQueueResponse, error)
}

// queueOperations implements the QueueOperations interface.
type queueOperations struct {
	*Client
	subscriptionID string
}

// Create - Creates a new queue with the specified queue name, under the specified account.
func (client *queueOperations) Create(ctx context.Context, resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*StorageQueueResponse, error) {
	req, err := client.createCreateRequest(resourceGroupName, accountName, queueName, queue)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createCreateRequest creates the Create request.
func (client *queueOperations) createCreateRequest(resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{queueName}", url.PathEscape(queueName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(queue)
}

// createHandleResponse handles the Create response.
func (client *queueOperations) createHandleResponse(resp *azcore.Response) (*StorageQueueResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createHandleError(resp)
	}
	result := StorageQueueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StorageQueue)
}

// createHandleError handles the Create error response.
func (client *queueOperations) createHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the queue with the specified queue name, under the specified account if it exists.
func (client *queueOperations) Delete(ctx context.Context, resourceGroupName string, accountName string, queueName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, accountName, queueName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *queueOperations) deleteCreateRequest(resourceGroupName string, accountName string, queueName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{queueName}", url.PathEscape(queueName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *queueOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *queueOperations) deleteHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the queue with the specified queue name, under the specified account if it exists.
func (client *queueOperations) Get(ctx context.Context, resourceGroupName string, accountName string, queueName string) (*StorageQueueResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, accountName, queueName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *queueOperations) getCreateRequest(resourceGroupName string, accountName string, queueName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{queueName}", url.PathEscape(queueName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *queueOperations) getHandleResponse(resp *azcore.Response) (*StorageQueueResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := StorageQueueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StorageQueue)
}

// getHandleError handles the Get error response.
func (client *queueOperations) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Gets a list of all the queues under the specified storage account
func (client *queueOperations) List(resourceGroupName string, accountName string, queueListOptions *QueueListOptions) (ListQueueResourcePager, error) {
	req, err := client.listCreateRequest(resourceGroupName, accountName, queueListOptions)
	if err != nil {
		return nil, err
	}
	return &listQueueResourcePager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ListQueueResourceResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ListQueueResource.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ListQueueResource.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *queueOperations) listCreateRequest(resourceGroupName string, accountName string, queueListOptions *QueueListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	if queueListOptions != nil && queueListOptions.Maxpagesize != nil {
		query.Set("$maxpagesize", *queueListOptions.Maxpagesize)
	}
	if queueListOptions != nil && queueListOptions.Filter != nil {
		query.Set("$filter", *queueListOptions.Filter)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *queueOperations) listHandleResponse(resp *azcore.Response) (*ListQueueResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ListQueueResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ListQueueResource)
}

// listHandleError handles the List error response.
func (client *queueOperations) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Creates a new queue with the specified queue name, under the specified account.
func (client *queueOperations) Update(ctx context.Context, resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*StorageQueueResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, accountName, queueName, queue)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *queueOperations) updateCreateRequest(resourceGroupName string, accountName string, queueName string, queue StorageQueue) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{queueName}", url.PathEscape(queueName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(queue)
}

// updateHandleResponse handles the Update response.
func (client *queueOperations) updateHandleResponse(resp *azcore.Response) (*StorageQueueResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := StorageQueueResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.StorageQueue)
}

// updateHandleError handles the Update error response.
func (client *queueOperations) updateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
