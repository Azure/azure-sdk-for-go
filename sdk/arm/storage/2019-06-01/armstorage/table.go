// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// TableOperations contains the methods for the Table group.
type TableOperations interface {
	// Create - Creates a new table with the specified table name, under the specified account.
	Create(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error)
	// Delete - Deletes the table with the specified table name, under the specified account if it exists.
	Delete(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*http.Response, error)
	// Get - Gets the table with the specified table name, under the specified account if it exists.
	Get(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error)
	// List - Gets a list of all the tables under the specified storage account
	List(resourceGroupName string, accountName string) (ListTableResourcePager, error)
	// Update - Creates a new table with the specified table name, under the specified account.
	Update(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error)
}

// tableOperations implements the TableOperations interface.
type tableOperations struct {
	*Client
	subscriptionID string
}

// Create - Creates a new table with the specified table name, under the specified account.
func (client *tableOperations) Create(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error) {
	req, err := client.createCreateRequest(resourceGroupName, accountName, tableName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createCreateRequest creates the Create request.
func (client *tableOperations) createCreateRequest(resourceGroupName string, accountName string, tableName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{tableName}", url.PathEscape(tableName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *tableOperations) createHandleResponse(resp *azcore.Response) (*TableResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createHandleError(resp)
	}
	result := TableResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Table)
}

// createHandleError handles the Create error response.
func (client *tableOperations) createHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes the table with the specified table name, under the specified account if it exists.
func (client *tableOperations) Delete(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, accountName, tableName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *tableOperations) deleteCreateRequest(resourceGroupName string, accountName string, tableName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{tableName}", url.PathEscape(tableName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *tableOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *tableOperations) deleteHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets the table with the specified table name, under the specified account if it exists.
func (client *tableOperations) Get(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, accountName, tableName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *tableOperations) getCreateRequest(resourceGroupName string, accountName string, tableName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{tableName}", url.PathEscape(tableName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *tableOperations) getHandleResponse(resp *azcore.Response) (*TableResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := TableResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Table)
}

// getHandleError handles the Get error response.
func (client *tableOperations) getHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// List - Gets a list of all the tables under the specified storage account
func (client *tableOperations) List(resourceGroupName string, accountName string) (ListTableResourcePager, error) {
	req, err := client.listCreateRequest(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	return &listTableResourcePager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *ListTableResourceResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.ListTableResource.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.ListTableResource.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *tableOperations) listCreateRequest(resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *tableOperations) listHandleResponse(resp *azcore.Response) (*ListTableResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := ListTableResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.ListTableResource)
}

// listHandleError handles the List error response.
func (client *tableOperations) listHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Update - Creates a new table with the specified table name, under the specified account.
func (client *tableOperations) Update(ctx context.Context, resourceGroupName string, accountName string, tableName string) (*TableResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, accountName, tableName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *tableOperations) updateCreateRequest(resourceGroupName string, accountName string, tableName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{tableName}", url.PathEscape(tableName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *tableOperations) updateHandleResponse(resp *azcore.Response) (*TableResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := TableResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Table)
}

// updateHandleError handles the Update error response.
func (client *tableOperations) updateHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
