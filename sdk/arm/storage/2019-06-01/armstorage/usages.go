// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azstorage

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// UsagesOperations contains the methods for the Usages group.
type UsagesOperations interface {
	// ListByLocation - Gets the current usage count and the limit for the resources of the location under the subscription.
	ListByLocation(ctx context.Context, location string) (*UsageListResultResponse, error)
}

// usagesOperations implements the UsagesOperations interface.
type usagesOperations struct {
	*Client
	subscriptionID string
}

// ListByLocation - Gets the current usage count and the limit for the resources of the location under the subscription.
func (client *usagesOperations) ListByLocation(ctx context.Context, location string) (*UsageListResultResponse, error) {
	req, err := client.listByLocationCreateRequest(location)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listByLocationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listByLocationCreateRequest creates the ListByLocation request.
func (client *usagesOperations) listByLocationCreateRequest(location string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-06-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByLocationHandleResponse handles the ListByLocation response.
func (client *usagesOperations) listByLocationHandleResponse(resp *azcore.Response) (*UsageListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByLocationHandleError(resp)
	}
	result := UsageListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.UsageListResult)
}

// listByLocationHandleError handles the ListByLocation error response.
func (client *usagesOperations) listByLocationHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
