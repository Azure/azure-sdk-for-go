// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PrivateLinkResourcesOperations contains the methods for the PrivateLinkResources group.
type PrivateLinkResourcesOperations interface {
	// ListByStorageAccount - Gets the private link resources that need to be created for a storage account.
	ListByStorageAccount(ctx context.Context, resourceGroupName string, accountName string) (*PrivateLinkResourceListResultResponse, error)
}

// PrivateLinkResourcesClient implements the PrivateLinkResourcesOperations interface.
// Don't use this type directly, use NewPrivateLinkResourcesClient() instead.
type PrivateLinkResourcesClient struct {
	*Client
	subscriptionID string
}

// NewPrivateLinkResourcesClient creates a new instance of PrivateLinkResourcesClient with the specified values.
func NewPrivateLinkResourcesClient(c *Client, subscriptionID string) PrivateLinkResourcesOperations {
	return &PrivateLinkResourcesClient{Client: c, subscriptionID: subscriptionID}
}

// Do invokes the Do() method on the pipeline associated with this client.
func (client *PrivateLinkResourcesClient) Do(req *azcore.Request) (*azcore.Response, error) {
	return client.p.Do(req)
}

// ListByStorageAccount - Gets the private link resources that need to be created for a storage account.
func (client *PrivateLinkResourcesClient) ListByStorageAccount(ctx context.Context, resourceGroupName string, accountName string) (*PrivateLinkResourceListResultResponse, error) {
	req, err := client.ListByStorageAccountCreateRequest(ctx, resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListByStorageAccountHandleError(resp)
	}
	result, err := client.ListByStorageAccountHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListByStorageAccountCreateRequest creates the ListByStorageAccount request.
func (client *PrivateLinkResourcesClient) ListByStorageAccountCreateRequest(ctx context.Context, resourceGroupName string, accountName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.u, urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListByStorageAccountHandleResponse handles the ListByStorageAccount response.
func (client *PrivateLinkResourcesClient) ListByStorageAccountHandleResponse(resp *azcore.Response) (*PrivateLinkResourceListResultResponse, error) {
	result := PrivateLinkResourceListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.PrivateLinkResourceListResult)
}

// ListByStorageAccountHandleError handles the ListByStorageAccount error response.
func (client *PrivateLinkResourcesClient) ListByStorageAccountHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return errors.New(resp.Status)
	}
	return errors.New(string(body))
}
