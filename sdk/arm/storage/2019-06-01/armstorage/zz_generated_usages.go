// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// UsagesOperations contains the methods for the Usages group.
type UsagesOperations interface {
	// ListByLocation - Gets the current usage count and the limit for the resources of the location under the subscription.
	ListByLocation(ctx context.Context, location string, options *UsagesListByLocationOptions) (*UsageListResultResponse, error)
}

// UsagesClient implements the UsagesOperations interface.
// Don't use this type directly, use NewUsagesClient() instead.
type UsagesClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewUsagesClient creates a new instance of UsagesClient with the specified values.
func NewUsagesClient(con *armcore.Connection, subscriptionID string) UsagesOperations {
	return &UsagesClient{con: con, subscriptionID: subscriptionID}
}

// Pipeline returns the pipeline associated with this client.
func (client *UsagesClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// ListByLocation - Gets the current usage count and the limit for the resources of the location under the subscription.
func (client *UsagesClient) ListByLocation(ctx context.Context, location string, options *UsagesListByLocationOptions) (*UsageListResultResponse, error) {
	req, err := client.ListByLocationCreateRequest(ctx, location, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.ListByLocationHandleError(resp)
	}
	result, err := client.ListByLocationHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ListByLocationCreateRequest creates the ListByLocation request.
func (client *UsagesClient) ListByLocationCreateRequest(ctx context.Context, location string, options *UsagesListByLocationOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	query := req.URL.Query()
	query.Set("api-version", "2019-06-01")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// ListByLocationHandleResponse handles the ListByLocation response.
func (client *UsagesClient) ListByLocationHandleResponse(resp *azcore.Response) (*UsageListResultResponse, error) {
	result := UsageListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.UsageListResult)
}

// ListByLocationHandleError handles the ListByLocation error response.
func (client *UsagesClient) ListByLocationHandleError(resp *azcore.Response) error {
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("%s; failed to read response body: %w", resp.Status, err)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
