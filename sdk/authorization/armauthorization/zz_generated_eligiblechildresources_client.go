// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

// EligibleChildResourcesClient contains the methods for the EligibleChildResources group.
// Don't use this type directly, use NewEligibleChildResourcesClient() instead.
type EligibleChildResourcesClient struct {
	con *armcore.Connection
}

// NewEligibleChildResourcesClient creates a new instance of EligibleChildResourcesClient with the specified values.
func NewEligibleChildResourcesClient(con *armcore.Connection) *EligibleChildResourcesClient {
	return &EligibleChildResourcesClient{con: con}
}

// Get - Get the child resources of a resource on which user has eligible access
// If the operation fails it returns the *CloudError error type.
func (client *EligibleChildResourcesClient) Get(scope string, options *EligibleChildResourcesGetOptions) EligibleChildResourcesListResultPager {
	return &eligibleChildResourcesListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.getCreateRequest(ctx, scope, options)
		},
		responder: client.getHandleResponse,
		errorer:   client.getHandleError,
		advancer: func(ctx context.Context, resp EligibleChildResourcesListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.EligibleChildResourcesListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// getCreateRequest creates the Get request.
func (client *EligibleChildResourcesClient) getCreateRequest(ctx context.Context, scope string, options *EligibleChildResourcesGetOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/eligibleChildResources"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2020-10-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EligibleChildResourcesClient) getHandleResponse(resp *azcore.Response) (EligibleChildResourcesListResultResponse, error) {
	var val *EligibleChildResourcesListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return EligibleChildResourcesListResultResponse{}, err
	}
	return EligibleChildResourcesListResultResponse{RawResponse: resp.Response, EligibleChildResourcesListResult: val}, nil
}

// getHandleError handles the Get error response.
func (client *EligibleChildResourcesClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
