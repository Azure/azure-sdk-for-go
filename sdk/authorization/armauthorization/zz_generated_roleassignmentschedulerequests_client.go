// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// RoleAssignmentScheduleRequestsClient contains the methods for the RoleAssignmentScheduleRequests group.
// Don't use this type directly, use NewRoleAssignmentScheduleRequestsClient() instead.
type RoleAssignmentScheduleRequestsClient struct {
	con *armcore.Connection
}

// NewRoleAssignmentScheduleRequestsClient creates a new instance of RoleAssignmentScheduleRequestsClient with the specified values.
func NewRoleAssignmentScheduleRequestsClient(con *armcore.Connection) *RoleAssignmentScheduleRequestsClient {
	return &RoleAssignmentScheduleRequestsClient{con: con}
}

// Cancel - Cancels a pending role assignment schedule request.
// If the operation fails it returns the *CloudError error type.
func (client *RoleAssignmentScheduleRequestsClient) Cancel(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, options *RoleAssignmentScheduleRequestsCancelOptions) (*http.Response, error) {
	req, err := client.cancelCreateRequest(ctx, scope, roleAssignmentScheduleRequestName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.cancelHandleError(resp)
	}
	return resp.Response, nil
}

// cancelCreateRequest creates the Cancel request.
func (client *RoleAssignmentScheduleRequestsClient) cancelCreateRequest(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, options *RoleAssignmentScheduleRequestsCancelOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}/cancel"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if roleAssignmentScheduleRequestName == "" {
		return nil, errors.New("parameter roleAssignmentScheduleRequestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentScheduleRequestName}", url.PathEscape(roleAssignmentScheduleRequestName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-10-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// cancelHandleError handles the Cancel error response.
func (client *RoleAssignmentScheduleRequestsClient) cancelHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Create - Creates a role assignment schedule request.
// If the operation fails it returns the *CloudError error type.
func (client *RoleAssignmentScheduleRequestsClient) Create(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, parameters RoleAssignmentScheduleRequest, options *RoleAssignmentScheduleRequestsCreateOptions) (RoleAssignmentScheduleRequestResponse, error) {
	req, err := client.createCreateRequest(ctx, scope, roleAssignmentScheduleRequestName, parameters, options)
	if err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return RoleAssignmentScheduleRequestResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *RoleAssignmentScheduleRequestsClient) createCreateRequest(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, parameters RoleAssignmentScheduleRequest, options *RoleAssignmentScheduleRequestsCreateOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if roleAssignmentScheduleRequestName == "" {
		return nil, errors.New("parameter roleAssignmentScheduleRequestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentScheduleRequestName}", url.PathEscape(roleAssignmentScheduleRequestName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-10-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// createHandleResponse handles the Create response.
func (client *RoleAssignmentScheduleRequestsClient) createHandleResponse(resp *azcore.Response) (RoleAssignmentScheduleRequestResponse, error) {
	var val *RoleAssignmentScheduleRequest
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	return RoleAssignmentScheduleRequestResponse{RawResponse: resp.Response, RoleAssignmentScheduleRequest: val}, nil
}

// createHandleError handles the Create error response.
func (client *RoleAssignmentScheduleRequestsClient) createHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Get the specified role assignment schedule request.
// If the operation fails it returns the *CloudError error type.
func (client *RoleAssignmentScheduleRequestsClient) Get(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, options *RoleAssignmentScheduleRequestsGetOptions) (RoleAssignmentScheduleRequestResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, roleAssignmentScheduleRequestName, options)
	if err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return RoleAssignmentScheduleRequestResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *RoleAssignmentScheduleRequestsClient) getCreateRequest(ctx context.Context, scope string, roleAssignmentScheduleRequestName string, options *RoleAssignmentScheduleRequestsGetOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if roleAssignmentScheduleRequestName == "" {
		return nil, errors.New("parameter roleAssignmentScheduleRequestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{roleAssignmentScheduleRequestName}", url.PathEscape(roleAssignmentScheduleRequestName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-10-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *RoleAssignmentScheduleRequestsClient) getHandleResponse(resp *azcore.Response) (RoleAssignmentScheduleRequestResponse, error) {
	var val *RoleAssignmentScheduleRequest
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RoleAssignmentScheduleRequestResponse{}, err
	}
	return RoleAssignmentScheduleRequestResponse{RawResponse: resp.Response, RoleAssignmentScheduleRequest: val}, nil
}

// getHandleError handles the Get error response.
func (client *RoleAssignmentScheduleRequestsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListForScope - Gets role assignment schedule requests for a scope.
// If the operation fails it returns the *CloudError error type.
func (client *RoleAssignmentScheduleRequestsClient) ListForScope(scope string, options *RoleAssignmentScheduleRequestsListForScopeOptions) RoleAssignmentScheduleRequestListResultPager {
	return &roleAssignmentScheduleRequestListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listForScopeCreateRequest(ctx, scope, options)
		},
		responder: client.listForScopeHandleResponse,
		errorer:   client.listForScopeHandleError,
		advancer: func(ctx context.Context, resp RoleAssignmentScheduleRequestListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.RoleAssignmentScheduleRequestListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listForScopeCreateRequest creates the ListForScope request.
func (client *RoleAssignmentScheduleRequestsClient) listForScopeCreateRequest(ctx context.Context, scope string, options *RoleAssignmentScheduleRequestsListForScopeOptions) (*azcore.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2020-10-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listForScopeHandleResponse handles the ListForScope response.
func (client *RoleAssignmentScheduleRequestsClient) listForScopeHandleResponse(resp *azcore.Response) (RoleAssignmentScheduleRequestListResultResponse, error) {
	var val *RoleAssignmentScheduleRequestListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return RoleAssignmentScheduleRequestListResultResponse{}, err
	}
	return RoleAssignmentScheduleRequestListResultResponse{RawResponse: resp.Response, RoleAssignmentScheduleRequestListResult: val}, nil
}

// listForScopeHandleError handles the ListForScope error response.
func (client *RoleAssignmentScheduleRequestsClient) listForScopeHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
