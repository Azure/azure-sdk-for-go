// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azbatch

import (
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// CancelCertificateDeletionOptions contains the optional parameters for the Client.CancelCertificateDeletion method.
type CancelCertificateDeletionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateCertificateOptions contains the optional parameters for the Client.CreateCertificate method.
type CreateCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateJobOptions contains the optional parameters for the Client.CreateJob method.
type CreateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateJobScheduleOptions contains the optional parameters for the Client.CreateJobSchedule method.
type CreateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateNodeUserOptions contains the optional parameters for the Client.CreateNodeUser method.
type CreateNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreatePoolOptions contains the optional parameters for the Client.CreatePool method.
type CreatePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateTaskCollectionOptions contains the optional parameters for the Client.CreateTaskCollection method.
type CreateTaskCollectionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// CreateTaskOptions contains the optional parameters for the Client.CreateTask method.
type CreateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeallocateNodeOptions contains the optional parameters for the Client.DeallocateNode method.
type DeallocateNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// The options to use for deallocating the Compute Node.
	Parameters *DeallocateNodeContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteCertificateOptions contains the optional parameters for the Client.DeleteCertificate method.
type DeleteCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteJobOptions contains the optional parameters for the Client.DeleteJob method.
type DeleteJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default
	// value is false.
	Force *bool

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteJobScheduleOptions contains the optional parameters for the Client.DeleteJobSchedule method.
type DeleteJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion.
	// The default value is false.
	Force *bool

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteNodeFileOptions contains the optional parameters for the Client.DeleteNodeFile method.
type DeleteNodeFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether to delete children of a directory. If the filePath parameter represents
	// a directory instead of a file, you can set recursive to true to delete the
	// directory and all of the files and subdirectories in it. If recursive is false
	// then the directory must be empty or deletion will fail.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteNodeUserOptions contains the optional parameters for the Client.DeleteNodeUser method.
type DeleteNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeletePoolOptions contains the optional parameters for the Client.DeletePool method.
type DeletePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteTaskFileOptions contains the optional parameters for the Client.DeleteTaskFile method.
type DeleteTaskFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether to delete children of a directory. If the filePath parameter represents
	// a directory instead of a file, you can set recursive to true to delete the
	// directory and all of the files and subdirectories in it. If recursive is false
	// then the directory must be empty or deletion will fail.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DeleteTaskOptions contains the optional parameters for the Client.DeleteTask method.
type DeleteTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DisableJobOptions contains the optional parameters for the Client.DisableJob method.
type DisableJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DisableJobScheduleOptions contains the optional parameters for the Client.DisableJobSchedule method.
type DisableJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DisableNodeSchedulingOptions contains the optional parameters for the Client.DisableNodeScheduling method.
type DisableNodeSchedulingOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// The options to use for disabling scheduling on the Compute Node.
	Parameters *DisableNodeSchedulingContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// DisablePoolAutoScaleOptions contains the optional parameters for the Client.DisablePoolAutoScale method.
type DisablePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// EnableJobOptions contains the optional parameters for the Client.EnableJob method.
type EnableJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// EnableJobScheduleOptions contains the optional parameters for the Client.EnableJobSchedule method.
type EnableJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// EnableNodeSchedulingOptions contains the optional parameters for the Client.EnableNodeScheduling method.
type EnableNodeSchedulingOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// EnablePoolAutoScaleOptions contains the optional parameters for the Client.EnablePoolAutoScale method.
type EnablePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// EvaluatePoolAutoScaleOptions contains the optional parameters for the Client.EvaluatePoolAutoScale method.
type EvaluatePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetApplicationOptions contains the optional parameters for the Client.GetApplication method.
type GetApplicationOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetCertificateOptions contains the optional parameters for the Client.GetCertificate method.
type GetCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetJobOptions contains the optional parameters for the Client.GetJob method.
type GetJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetJobScheduleOptions contains the optional parameters for the Client.GetJobSchedule method.
type GetJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetJobTaskCountsOptions contains the optional parameters for the Client.GetJobTaskCounts method.
type GetJobTaskCountsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetNodeExtensionOptions contains the optional parameters for the Client.GetNodeExtension method.
type GetNodeExtensionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetNodeFileOptions contains the optional parameters for the Client.GetNodeFile method.
type GetNodeFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The byte range to be retrieved. The default is to retrieve the entire file. The
	// format is bytes=startRange-endRange.
	OCPRange *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetNodeFilePropertiesOptions contains the optional parameters for the Client.GetNodeFileProperties method.
type GetNodeFilePropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetNodeOptions contains the optional parameters for the Client.GetNode method.
type GetNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetNodeRemoteLoginSettingsOptions contains the optional parameters for the Client.GetNodeRemoteLoginSettings method.
type GetNodeRemoteLoginSettingsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetPoolOptions contains the optional parameters for the Client.GetPool method.
type GetPoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetTaskFileOptions contains the optional parameters for the Client.GetTaskFile method.
type GetTaskFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The byte range to be retrieved. The default is to retrieve the entire file. The
	// format is bytes=startRange-endRange.
	OCPRange *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetTaskFilePropertiesOptions contains the optional parameters for the Client.GetTaskFileProperties method.
type GetTaskFilePropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// GetTaskOptions contains the optional parameters for the Client.GetTask method.
type GetTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// JobScheduleExistsOptions contains the optional parameters for the Client.JobScheduleExists method.
type JobScheduleExistsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListApplicationsOptions contains the optional parameters for the Client.NewListApplicationsPager method.
type ListApplicationsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListCertificatesOptions contains the optional parameters for the Client.NewListCertificatesPager method.
type ListCertificatesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListJobPreparationAndReleaseTaskStatusOptions contains the optional parameters for the Client.NewListJobPreparationAndReleaseTaskStatusPager
// method.
type ListJobPreparationAndReleaseTaskStatusOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListJobSchedulesOptions contains the optional parameters for the Client.NewListJobSchedulesPager method.
type ListJobSchedulesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListJobsFromScheduleOptions contains the optional parameters for the Client.NewListJobsFromSchedulePager method.
type ListJobsFromScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListJobsOptions contains the optional parameters for the Client.NewListJobsPager method.
type ListJobsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListNodeExtensionsOptions contains the optional parameters for the Client.NewListNodeExtensionsPager method.
type ListNodeExtensionsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListNodeFilesOptions contains the optional parameters for the Client.NewListNodeFilesPager method.
type ListNodeFilesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether to list children of a directory.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListNodesOptions contains the optional parameters for the Client.NewListNodesPager method.
type ListNodesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListPoolNodeCountsOptions contains the optional parameters for the Client.NewListPoolNodeCountsPager method.
type ListPoolNodeCountsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListPoolsOptions contains the optional parameters for the Client.NewListPoolsPager method.
type ListPoolsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListSubTasksOptions contains the optional parameters for the Client.NewListSubTasksPager method.
type ListSubTasksOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListSupportedImagesOptions contains the optional parameters for the Client.NewListSupportedImagesPager method.
type ListSupportedImagesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListTaskFilesOptions contains the optional parameters for the Client.NewListTaskFilesPager method.
type ListTaskFilesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether to list children of the Task directory. This parameter can be used in
	// combination with the filter parameter to list specific type of files.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ListTasksOptions contains the optional parameters for the Client.NewListTasksPager method.
type ListTasksOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// PoolExistsOptions contains the optional parameters for the Client.PoolExists method.
type PoolExistsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReactivateTaskOptions contains the optional parameters for the Client.ReactivateTask method.
type ReactivateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// RebootNodeOptions contains the optional parameters for the Client.RebootNode method.
type RebootNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// The options to use for rebooting the Compute Node.
	Parameters *RebootNodeContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReimageNodeOptions contains the optional parameters for the Client.ReimageNode method.
type ReimageNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// The options to use for reimaging the Compute Node.
	Parameters *ReimageNodeContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// RemoveNodesOptions contains the optional parameters for the Client.RemoveNodes method.
type RemoveNodesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReplaceJobOptions contains the optional parameters for the Client.ReplaceJob method.
type ReplaceJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReplaceJobScheduleOptions contains the optional parameters for the Client.ReplaceJobSchedule method.
type ReplaceJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReplaceNodeUserOptions contains the optional parameters for the Client.ReplaceNodeUser method.
type ReplaceNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReplacePoolPropertiesOptions contains the optional parameters for the Client.ReplacePoolProperties method.
type ReplacePoolPropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ReplaceTaskOptions contains the optional parameters for the Client.ReplaceTask method.
type ReplaceTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// ResizePoolOptions contains the optional parameters for the Client.ResizePool method.
type ResizePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// StartNodeOptions contains the optional parameters for the Client.StartNode method.
type StartNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// StopPoolResizeOptions contains the optional parameters for the Client.StopPoolResize method.
type StopPoolResizeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// TerminateJobOptions contains the optional parameters for the Client.TerminateJob method.
type TerminateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The
	// default value is false.
	Force *bool

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// The options to use for terminating the Job.
	Parameters *TerminateJobContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// TerminateJobScheduleOptions contains the optional parameters for the Client.TerminateJobSchedule method.
type TerminateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination.
	// The default value is false.
	Force *bool

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// TerminateTaskOptions contains the optional parameters for the Client.TerminateTask method.
type TerminateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// UpdateJobOptions contains the optional parameters for the Client.UpdateJob method.
type UpdateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// UpdateJobScheduleOptions contains the optional parameters for the Client.UpdateJobSchedule method.
type UpdateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// UpdatePoolOptions contains the optional parameters for the Client.UpdatePool method.
type UpdatePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service exactly matches the value specified by the client.
	IfMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
	// The operation will be performed only if the resource's current ETag on the
	// service does not match the value specified by the client.
	IfNoneMatch *azcore.ETag

	// A timestamp indicating the last modified time of the resource known to the
	// client. The operation will be performed only if the resource on the service has
	// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// UploadNodeLogsOptions contains the optional parameters for the Client.UploadNodeLogs method.
type UploadNodeLogsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}

// listPoolUsageMetricsOptions contains the optional parameters for the Client.NewlistPoolUsageMetricsPager method.
type listPoolUsageMetricsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
	// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The latest time from which to include metrics. This must be at least two hours
	// before the current time. If not specified this defaults to the end time of the
	// last aggregation interval currently available.
	Endtime *time.Time

	// An OData $filter clause. For more information on constructing this filter, see
	// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
	// applications can be returned.
	MaxResults *int32

	// The time the request was issued. Client libraries typically set this to the
	// current system clock time; set it explicitly if you are calling the REST API
	// directly.
	OCPDate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The earliest time from which to include metrics. This must be at least two and
	// a half hours before the current time. If not specified this defaults to the
	// start time of the last aggregation interval currently available.
	Starttime *time.Time

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
	// is larger than 30, the default will be used instead.".
	Timeout *int32
}
