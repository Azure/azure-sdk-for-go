//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/go@4.0.0-preview.45)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azpki

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

type PkiClient struct {
	certificateFormat *string
	accept *string
	pl runtime.Pipeline
}

// NewPkiClient creates a new instance of PkiClient with the specified values.
//   - accept - Accept
//   - pl - the pipeline used for sending requests and handling responses.
func NewPkiClient(certificateFormat *string, accept *string, pl runtime.Pipeline) *PkiClient {
	client := &PkiClient{
		certificateFormat: certificateFormat,
		accept: accept,
		pl: pl,
	}
	return client
}

// CertificateDetails - Client makes a call to this end point to retrieve the end entity certificate details.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - pkiBaseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - serialNumber - Serial number of the certificate.
//   - options - PkiClientCertificateDetailsOptions contains the optional parameters for the PkiClient.CertificateDetails method.
func (client *PkiClient) CertificateDetails(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, options *PkiClientCertificateDetailsOptions) (PkiClientCertificateDetailsResponse, error) {
	req, err := client.certificateDetailsCreateRequest(ctx, pkiBaseURL, caName, serialNumber, options)
	if err != nil {
		return PkiClientCertificateDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PkiClientCertificateDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PkiClientCertificateDetailsResponse{}, runtime.NewResponseError(resp)
	}
	return client.certificateDetailsHandleResponse(resp)
}

// certificateDetailsCreateRequest creates the CertificateDetails request.
func (client *PkiClient) certificateDetailsCreateRequest(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, options *PkiClientCertificateDetailsOptions) (*policy.Request, error) {
	host := "{pkiBaseUrl}"
	host = strings.ReplaceAll(host, "{pkiBaseUrl}", pkiBaseURL)
	urlPath := "/certificateAuthorities/{caName}/certificates/{serialNumber}/description"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{caName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// certificateDetailsHandleResponse handles the CertificateDetails response.
func (client *PkiClient) certificateDetailsHandleResponse(resp *http.Response) (PkiClientCertificateDetailsResponse, error) {
	result := PkiClientCertificateDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateDescriptionResponse); err != nil {
		return PkiClientCertificateDetailsResponse{}, err
	}
	return result, nil
}

// EndEntityCertificateDownload - Client makes a call to this end point to retrieve the end entity certificate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - pkiBaseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - serialNumber - Serial number of the certificate.
//   - options - PkiClientEndEntityCertificateDownloadOptions contains the optional parameters for the PkiClient.EndEntityCertificateDownload
//     method.
func (client *PkiClient) EndEntityCertificateDownload(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, options *PkiClientEndEntityCertificateDownloadOptions) (PkiClientEndEntityCertificateDownloadResponse, error) {
	req, err := client.endEntityCertificateDownloadCreateRequest(ctx, pkiBaseURL, caName, serialNumber, options)
	if err != nil {
		return PkiClientEndEntityCertificateDownloadResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PkiClientEndEntityCertificateDownloadResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PkiClientEndEntityCertificateDownloadResponse{}, runtime.NewResponseError(resp)
	}
	return PkiClientEndEntityCertificateDownloadResponse{Body: resp.Body}, nil
}

// endEntityCertificateDownloadCreateRequest creates the EndEntityCertificateDownload request.
func (client *PkiClient) endEntityCertificateDownloadCreateRequest(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, options *PkiClientEndEntityCertificateDownloadOptions) (*policy.Request, error) {
	host := "{pkiBaseUrl}"
	host = strings.ReplaceAll(host, "{pkiBaseUrl}", pkiBaseURL)
	urlPath := "/certificateAuthorities/{caName}/certificates/{serialNumber}"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{caName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	runtime.SkipBodyDownload(req)
	if client.accept != nil {
		req.Raw().Header["accept"] = []string{*client.accept}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// EnrollCertificate - Client makes a call to the PKI service for enrollment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - pkiBaseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - policyName - Name of the enrollment policy which can be used to issue certificate.
//   - parameters - The attributes required to issue a certificate
//   - options - PkiClientEnrollCertificateOptions contains the optional parameters for the PkiClient.EnrollCertificate method.
func (client *PkiClient) EnrollCertificate(ctx context.Context, pkiBaseURL string, policyName string, parameters EnrollRequest, options *PkiClientEnrollCertificateOptions) (PkiClientEnrollCertificateResponse, error) {
	req, err := client.enrollCertificateCreateRequest(ctx, pkiBaseURL, policyName, parameters, options)
	if err != nil {
		return PkiClientEnrollCertificateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PkiClientEnrollCertificateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PkiClientEnrollCertificateResponse{}, runtime.NewResponseError(resp)
	}
	return client.enrollCertificateHandleResponse(resp)
}

// enrollCertificateCreateRequest creates the EnrollCertificate request.
func (client *PkiClient) enrollCertificateCreateRequest(ctx context.Context, pkiBaseURL string, policyName string, parameters EnrollRequest, options *PkiClientEnrollCertificateOptions) (*policy.Request, error) {
	host := "{pkiBaseUrl}"
	host = strings.ReplaceAll(host, "{pkiBaseUrl}", pkiBaseURL)
	urlPath := "/enrollmentPolicies/{policyName}:enrollCertificate"
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.certificateFormat != nil {
		reqQP.Set("certificate-format", *client.certificateFormat)
	}
	if options != nil && options.FullChain != nil {
		reqQP.Set("fullChain", strconv.FormatBool(*options.FullChain))
	}
	if options != nil && options.Include != nil {
		reqQP.Set("include", *options.Include)
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// enrollCertificateHandleResponse handles the EnrollCertificate response.
func (client *PkiClient) enrollCertificateHandleResponse(resp *http.Response) (PkiClientEnrollCertificateResponse, error) {
	result := PkiClientEnrollCertificateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnrollResponse); err != nil {
		return PkiClientEnrollCertificateResponse{}, err
	}
	return result, nil
}

// GetCaCertificate - Client makes a call to this end point to download the CA certificate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - pkiBaseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - options - PkiClientGetCaCertificateOptions contains the optional parameters for the PkiClient.GetCaCertificate method.
func (client *PkiClient) GetCaCertificate(ctx context.Context, pkiBaseURL string, caName string, options *PkiClientGetCaCertificateOptions) (PkiClientGetCaCertificateResponse, error) {
	req, err := client.getCaCertificateCreateRequest(ctx, pkiBaseURL, caName, options)
	if err != nil {
		return PkiClientGetCaCertificateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PkiClientGetCaCertificateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PkiClientGetCaCertificateResponse{}, runtime.NewResponseError(resp)
	}
	return PkiClientGetCaCertificateResponse{Body: resp.Body}, nil
}

// getCaCertificateCreateRequest creates the GetCaCertificate request.
func (client *PkiClient) getCaCertificateCreateRequest(ctx context.Context, pkiBaseURL string, caName string, options *PkiClientGetCaCertificateOptions) (*policy.Request, error) {
	host := "{pkiBaseUrl}"
	host = strings.ReplaceAll(host, "{pkiBaseUrl}", pkiBaseURL)
	urlPath := "/certificateAuthorities/{caName}"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{caName}", url.PathEscape(caName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.FullChain != nil {
		reqQP.Set("fullChain", strconv.FormatBool(*options.FullChain))
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	runtime.SkipBodyDownload(req)
	if client.accept != nil {
		req.Raw().Header["accept"] = []string{*client.accept}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Revoke - Client makes a call to this end point for certificate revocation. The call to the ‘revoke’ endpoint is idempotent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - pkiBaseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority(CA) which issued the certificate.
//   - serialNumber - Serial number of the certificate which needs to be revoked.
//   - parameters - The parameters to revoke a certificate.
//   - options - PkiClientRevokeOptions contains the optional parameters for the PkiClient.Revoke method.
func (client *PkiClient) Revoke(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, parameters RevokeRequest, options *PkiClientRevokeOptions) (PkiClientRevokeResponse, error) {
	req, err := client.revokeCreateRequest(ctx, pkiBaseURL, caName, serialNumber, parameters, options)
	if err != nil {
		return PkiClientRevokeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PkiClientRevokeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return PkiClientRevokeResponse{}, runtime.NewResponseError(resp)
	}
	return PkiClientRevokeResponse{}, nil
}

// revokeCreateRequest creates the Revoke request.
func (client *PkiClient) revokeCreateRequest(ctx context.Context, pkiBaseURL string, caName string, serialNumber string, parameters RevokeRequest, options *PkiClientRevokeOptions) (*policy.Request, error) {
	host := "{pkiBaseUrl}"
	host = strings.ReplaceAll(host, "{pkiBaseUrl}", pkiBaseURL)
	urlPath := "/certificateAuthorities/{caName}/certificates/{serialNumber}:revokeCertificate"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{caName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Include != nil {
		reqQP.Set("include", *options.Include)
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

