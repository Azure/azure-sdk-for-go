trigger:
  paths:
    include:
    - sdk/

pr:
  paths:
    include:
    - sdk/

jobs:
  - job: Build_Test
    strategy:
      matrix:
        Linux_Go113:
          vm.image: 'ubuntu-18.04'
          go.version: '1.13'
          GOROOT: '/usr/local/go$(go.version)'

    pool:
      vmImage: $(vm.image)

    variables:
      GOPATH: '$(system.defaultWorkingDirectory)/work'
      sdkPath: '$(GOPATH)/src/github.com/$(build.repository.name)'

    steps:
    - script: |
        set -e
        mkdir -p '$(GOPATH)/bin'
        mkdir -p '$(sdkPath)'
        shopt -s dotglob extglob
        mv !(work) '$(sdkPath)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
        echo '##vso[task.prependpath]$(GOPATH)/bin'
      displayName: 'Create Go Workspace'
    - script: |
        set -e
        go version
        go get github.com/jstemmer/go-junit-report
        go get github.com/axw/gocov/gocov
        go get github.com/AlekSi/gocov-xml
        go get -u github.com/matm/gocov-html
      workingDirectory: '$(sdkPath)'
      displayName: 'Install Dependencies'
    - script: go vet $(go list ./sdk/...)
      workingDirectory: '$(sdkPath)'
      displayName: 'Vet'
    - script: go build -v $(go list ./sdk/...)
      workingDirectory: '$(sdkPath)'
      displayName: 'Build'
    - script: |
        go test -race -v -coverprofile=coverage.txt -covermode atomic ./sdk/... 2>&1 | go-junit-report > report.xml
        gocov convert coverage.txt > coverage.json
        gocov-xml < coverage.json > coverage.xml
        gocov-html < coverage.json > coverage.html
      workingDirectory: '$(sdkPath)'
      displayName: 'Run Tests'
    - script: grep -L -r --include \*.go -P "Copyright (\d{4}|\(c\)) Microsoft" ./sdk | tee >&2
      workingDirectory: '$(sdkPath)'
      displayName: 'Copyright Header Check'
      failOnStderr: true
      condition: succeededOrFailed()
    - script: gofmt -s -l -w $(find ./sdk -name '*.go' -print) >&2
      workingDirectory: '$(sdkPath)'
      displayName: 'Format Check'
      failOnStderr: true
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testRunner: JUnit
        testResultsFiles: $(sdkPath)/report.xml
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(sdkPath)/coverage.xml
        additionalCodeCoverageFiles: $(sdkPath)/coverage.html
