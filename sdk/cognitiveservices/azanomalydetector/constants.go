//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azanomalydetector

// APIVersion - ApiVersion - server parameter
type APIVersion string

const (
	APIVersionV11 APIVersion = "v1.1"
)

// PossibleAPIVersionValues returns the possible values for the APIVersion const type.
func PossibleAPIVersionValues() []APIVersion {
	return []APIVersion{
		APIVersionV11,
	}
}

type AlignMode string

const (
	AlignModeInner AlignMode = "Inner"
	AlignModeOuter AlignMode = "Outer"
)

// PossibleAlignModeValues returns the possible values for the AlignMode const type.
func PossibleAlignModeValues() []AlignMode {
	return []AlignMode{
		AlignModeInner,
		AlignModeOuter,
	}
}

type AnomalyDetectorErrorCodes string

const (
	AnomalyDetectorErrorCodesBadArgument             AnomalyDetectorErrorCodes = "BadArgument"
	AnomalyDetectorErrorCodesInvalidCustomInterval   AnomalyDetectorErrorCodes = "InvalidCustomInterval"
	AnomalyDetectorErrorCodesInvalidGranularity      AnomalyDetectorErrorCodes = "InvalidGranularity"
	AnomalyDetectorErrorCodesInvalidImputeFixedValue AnomalyDetectorErrorCodes = "InvalidImputeFixedValue"
	AnomalyDetectorErrorCodesInvalidImputeMode       AnomalyDetectorErrorCodes = "InvalidImputeMode"
	AnomalyDetectorErrorCodesInvalidJSONFormat       AnomalyDetectorErrorCodes = "InvalidJsonFormat"
	AnomalyDetectorErrorCodesInvalidModelArgument    AnomalyDetectorErrorCodes = "InvalidModelArgument"
	AnomalyDetectorErrorCodesInvalidPeriod           AnomalyDetectorErrorCodes = "InvalidPeriod"
	AnomalyDetectorErrorCodesInvalidSeries           AnomalyDetectorErrorCodes = "InvalidSeries"
	AnomalyDetectorErrorCodesRequiredGranularity     AnomalyDetectorErrorCodes = "RequiredGranularity"
	AnomalyDetectorErrorCodesRequiredSeries          AnomalyDetectorErrorCodes = "RequiredSeries"
)

// PossibleAnomalyDetectorErrorCodesValues returns the possible values for the AnomalyDetectorErrorCodes const type.
func PossibleAnomalyDetectorErrorCodesValues() []AnomalyDetectorErrorCodes {
	return []AnomalyDetectorErrorCodes{
		AnomalyDetectorErrorCodesBadArgument,
		AnomalyDetectorErrorCodesInvalidCustomInterval,
		AnomalyDetectorErrorCodesInvalidGranularity,
		AnomalyDetectorErrorCodesInvalidImputeFixedValue,
		AnomalyDetectorErrorCodesInvalidImputeMode,
		AnomalyDetectorErrorCodesInvalidJSONFormat,
		AnomalyDetectorErrorCodesInvalidModelArgument,
		AnomalyDetectorErrorCodesInvalidPeriod,
		AnomalyDetectorErrorCodesInvalidSeries,
		AnomalyDetectorErrorCodesRequiredGranularity,
		AnomalyDetectorErrorCodesRequiredSeries,
	}
}

// DataSchema - Data schema of the input data source. The default is OneTable.
type DataSchema string

const (
	// DataSchemaMultiTable - MultiTable means that your input data is separated in multiple CSV files. Each file contains one
	// time stamp column and one variable column, and the CSV file name should indicate the name of the variable. The default
	// DataSchema value is OneTable.
	DataSchemaMultiTable DataSchema = "MultiTable"
	// DataSchemaOneTable - OneTable means that your input data is in one CSV file, which contains one time stamp column and several
	// variable columns. The default DataSchema value is OneTable.
	DataSchemaOneTable DataSchema = "OneTable"
)

// PossibleDataSchemaValues returns the possible values for the DataSchema const type.
func PossibleDataSchemaValues() []DataSchema {
	return []DataSchema{
		DataSchemaMultiTable,
		DataSchemaOneTable,
	}
}

// FillNAMethod - Field that indicates how missing values will be filled.
type FillNAMethod string

const (
	FillNAMethodFixed      FillNAMethod = "Fixed"
	FillNAMethodLinear     FillNAMethod = "Linear"
	FillNAMethodPrevious   FillNAMethod = "Previous"
	FillNAMethodSubsequent FillNAMethod = "Subsequent"
	FillNAMethodZero       FillNAMethod = "Zero"
)

// PossibleFillNAMethodValues returns the possible values for the FillNAMethod const type.
func PossibleFillNAMethodValues() []FillNAMethod {
	return []FillNAMethod{
		FillNAMethodFixed,
		FillNAMethodLinear,
		FillNAMethodPrevious,
		FillNAMethodSubsequent,
		FillNAMethodZero,
	}
}

type ImputeMode string

const (
	ImputeModeAuto     ImputeMode = "auto"
	ImputeModeFixed    ImputeMode = "fixed"
	ImputeModeLinear   ImputeMode = "linear"
	ImputeModeNotFill  ImputeMode = "notFill"
	ImputeModePrevious ImputeMode = "previous"
	ImputeModeZero     ImputeMode = "zero"
)

// PossibleImputeModeValues returns the possible values for the ImputeMode const type.
func PossibleImputeModeValues() []ImputeMode {
	return []ImputeMode{
		ImputeModeAuto,
		ImputeModeFixed,
		ImputeModeLinear,
		ImputeModeNotFill,
		ImputeModePrevious,
		ImputeModeZero,
	}
}

type ModelStatus string

const (
	ModelStatusCreated ModelStatus = "CREATED"
	ModelStatusRunning ModelStatus = "RUNNING"
	ModelStatusReady   ModelStatus = "READY"
	ModelStatusFailed  ModelStatus = "FAILED"
)

// PossibleModelStatusValues returns the possible values for the ModelStatus const type.
func PossibleModelStatusValues() []ModelStatus {
	return []ModelStatus{
		ModelStatusCreated,
		ModelStatusRunning,
		ModelStatusReady,
		ModelStatusFailed,
	}
}

type MultivariateBatchDetectionStatus string

const (
	MultivariateBatchDetectionStatusCreated MultivariateBatchDetectionStatus = "CREATED"
	MultivariateBatchDetectionStatusRunning MultivariateBatchDetectionStatus = "RUNNING"
	MultivariateBatchDetectionStatusReady   MultivariateBatchDetectionStatus = "READY"
	MultivariateBatchDetectionStatusFailed  MultivariateBatchDetectionStatus = "FAILED"
)

// PossibleMultivariateBatchDetectionStatusValues returns the possible values for the MultivariateBatchDetectionStatus const type.
func PossibleMultivariateBatchDetectionStatusValues() []MultivariateBatchDetectionStatus {
	return []MultivariateBatchDetectionStatus{
		MultivariateBatchDetectionStatusCreated,
		MultivariateBatchDetectionStatusRunning,
		MultivariateBatchDetectionStatusReady,
		MultivariateBatchDetectionStatusFailed,
	}
}

type TimeGranularity string

const (
	TimeGranularityYearly      TimeGranularity = "yearly"
	TimeGranularityMonthly     TimeGranularity = "monthly"
	TimeGranularityWeekly      TimeGranularity = "weekly"
	TimeGranularityDaily       TimeGranularity = "daily"
	TimeGranularityHourly      TimeGranularity = "hourly"
	TimeGranularityPerMinute   TimeGranularity = "minutely"
	TimeGranularityPerSecond   TimeGranularity = "secondly"
	TimeGranularityMicrosecond TimeGranularity = "microsecond"
	TimeGranularityNone        TimeGranularity = "none"
)

// PossibleTimeGranularityValues returns the possible values for the TimeGranularity const type.
func PossibleTimeGranularityValues() []TimeGranularity {
	return []TimeGranularity{
		TimeGranularityYearly,
		TimeGranularityMonthly,
		TimeGranularityWeekly,
		TimeGranularityDaily,
		TimeGranularityHourly,
		TimeGranularityPerMinute,
		TimeGranularityPerSecond,
		TimeGranularityMicrosecond,
		TimeGranularityNone,
	}
}
