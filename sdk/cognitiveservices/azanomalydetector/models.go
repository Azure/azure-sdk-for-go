//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azanomalydetector

import "time"

// MultivariateAlignPolicy - Manner of aligning multiple variables.
type MultivariateAlignPolicy struct {
	// Field that indicates how to align different variables to the same time range.
	AlignMode *AlignMode `json:"alignMode,omitempty"`

	// Field that indicates how missing values will be filled.
	FillNAMethod *FillNAMethod `json:"fillNAMethod,omitempty"`

	// Field that's required when fillNAMethod is Fixed.
	PaddingValue *float32 `json:"paddingValue,omitempty"`
}

// MultivariateAnomalyDetectionModel - Response of getting a model.
type MultivariateAnomalyDetectionModel struct {
	// REQUIRED; Date and time (UTC) when the model was created.
	CreatedTime *time.Time `json:"createdTime,omitempty"`

	// REQUIRED; Date and time (UTC) when the model was last updated.
	LastUpdatedTime *time.Time `json:"lastUpdatedTime,omitempty"`

	// Training result of a model, including its status, errors, and diagnostics information.
	ModelInfo *MultivariateModelInfo `json:"modelInfo,omitempty"`

	// READ-ONLY; Model identifier.
	ModelID *string `json:"modelId,omitempty" azure:"ro"`
}

// MultivariateAnomalyInterpretation - Interpretation of the anomalous time stamp.
type MultivariateAnomalyInterpretation struct {
	// This score shows the percentage that contributes to the anomalous time stamp. It's a number between 0 and 1.
	ContributionScore *float32 `json:"contributionScore,omitempty"`

	// Correlation changes among the anomalous variables.
	CorrelationChanges *MultivariateCorrelationChanges `json:"correlationChanges,omitempty"`

	// Variable.
	Variable *string `json:"variable,omitempty"`
}

// MultivariateAnomalyState - Anomaly status and information.
type MultivariateAnomalyState struct {
	// REQUIRED; Time stamp for this anomaly.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Error message for the current time stamp.
	Errors []*MultivariateErrorResponse `json:"errors,omitempty"`

	// Detailed value of this anomalous time stamp.
	Value *MultivariateAnomalyValue `json:"value,omitempty"`
}

// MultivariateAnomalyValue - Detailed information of the anomalous time stamp.
type MultivariateAnomalyValue struct {
	// REQUIRED; True if an anomaly is detected at the current time stamp.
	IsAnomaly *bool `json:"isAnomaly,omitempty"`

	// REQUIRED; Raw anomaly score of severity, to help indicate the degree of abnormality.
	Score *float32 `json:"score,omitempty"`

	// REQUIRED; Indicates the significance of the anomaly. The higher the severity, the more significant the anomaly is.
	Severity *float32 `json:"severity,omitempty"`

	// Interpretation of this anomalous time stamp.
	Interpretation []*MultivariateAnomalyInterpretation `json:"interpretation,omitempty"`
}

// MultivariateBatchDetectionOptions - Detection request for batch inference. This is an asynchronous inference that will
// need another API to get detection results.
type MultivariateBatchDetectionOptions struct {
	// REQUIRED; Source link to the input data to indicate an accessible Azure Storage URI. It either points to an Azure Blob
	// Storage folder or points to a CSV file in Azure Blob Storage, based on your data schema
	// selection. The data schema should be exactly the same as those used in the training phase.
	DataSource *string `json:"dataSource,omitempty"`

	// REQUIRED; End date/time of data for detection, which should be in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; Start date/time of data for detection, which should be in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`

	// REQUIRED; Number of top contributed variables for one anomalous time stamp in the response. The default is 10.
	TopContributorCount *int32 `json:"topContributorCount,omitempty"`
}

// MultivariateBatchDetectionResultSummary - Multivariate anomaly detection status.
type MultivariateBatchDetectionResultSummary struct {
	// REQUIRED; Detection request for batch inference. This is an asynchronous inference that will need another API to get detection
	// results.
	SetupInfo *MultivariateBatchDetectionOptions `json:"setupInfo,omitempty"`

	// REQUIRED; Status of detection results.
	Status *MultivariateBatchDetectionStatus `json:"status,omitempty"`

	// Error message when detection fails.
	Errors []*MultivariateErrorResponse `json:"errors,omitempty"`

	// Variable status.
	VariableStates []*MultivariateVariableState `json:"variableStates,omitempty"`
}

// MultivariateClientDeleteMultivariateModelOptions contains the optional parameters for the MultivariateClient.DeleteMultivariateModel
// method.
type MultivariateClientDeleteMultivariateModelOptions struct {
	// placeholder for future optional parameters
}

// MultivariateClientDetectMultivariateBatchAnomalyOptions contains the optional parameters for the MultivariateClient.DetectMultivariateBatchAnomaly
// method.
type MultivariateClientDetectMultivariateBatchAnomalyOptions struct {
	// placeholder for future optional parameters
}

// MultivariateClientDetectMultivariateLastAnomalyOptions contains the optional parameters for the MultivariateClient.DetectMultivariateLastAnomaly
// method.
type MultivariateClientDetectMultivariateLastAnomalyOptions struct {
	// placeholder for future optional parameters
}

// MultivariateClientGetMultivariateBatchDetectionResultOptions contains the optional parameters for the MultivariateClient.GetMultivariateBatchDetectionResult
// method.
type MultivariateClientGetMultivariateBatchDetectionResultOptions struct {
	// placeholder for future optional parameters
}

// MultivariateClientGetMultivariateModelOptions contains the optional parameters for the MultivariateClient.GetMultivariateModel
// method.
type MultivariateClientGetMultivariateModelOptions struct {
	// placeholder for future optional parameters
}

// MultivariateClientListMultivariateModelsOptions contains the optional parameters for the MultivariateClient.NewListMultivariateModelsPager
// method.
type MultivariateClientListMultivariateModelsOptions struct {
	// Skip indicates how many models will be skipped.
	Skip *int32
	// Top indicates how many models will be fetched.
	Top *int32
}

// MultivariateClientTrainMultivariateModelOptions contains the optional parameters for the MultivariateClient.TrainMultivariateModel
// method.
type MultivariateClientTrainMultivariateModelOptions struct {
	// placeholder for future optional parameters
}

// MultivariateCorrelationChanges - Correlation changes among the anomalous variables.
type MultivariateCorrelationChanges struct {
	// Correlated variables that have correlation changes under an anomaly.
	ChangedVariables []*string `json:"changedVariables,omitempty"`
}

// MultivariateDetectionResult - Detection results for the resultId value.
type MultivariateDetectionResult struct {
	// REQUIRED; Detection result for each time stamp.
	Results []*MultivariateAnomalyState `json:"results,omitempty"`

	// REQUIRED; Multivariate anomaly detection status.
	Summary *MultivariateBatchDetectionResultSummary `json:"summary,omitempty"`

	// READ-ONLY; Result identifier that's used to fetch the results of an inference call.
	ResultID *string `json:"resultId,omitempty" azure:"ro"`
}

// MultivariateDiagnosticsInfo - Diagnostics information to help inspect the states of a model or variable.
type MultivariateDiagnosticsInfo struct {
	// Model status.
	ModelState *MultivariateModelState `json:"modelState,omitempty"`

	// Variable status.
	VariableStates []*MultivariateVariableState `json:"variableStates,omitempty"`
}

// MultivariateErrorResponse - Error information that the API returned.
type MultivariateErrorResponse struct {
	// REQUIRED; Error code.
	Code *string `json:"code,omitempty"`

	// REQUIRED; Message that explains the error that the service reported.
	Message *string `json:"message,omitempty"`
}

// MultivariateLastDetectionOptions - Request of the last detection.
type MultivariateLastDetectionOptions struct {
	// REQUIRED; Number of top contributed variables for one anomalous time stamp in the response. The default is 10.
	TopContributorCount *int32 `json:"topContributorCount,omitempty"`

	// REQUIRED; Contains the inference data, including the name, time stamps (ISO 8601), and values of variables.
	Variables []*MultivariateVariableValues `json:"variables,omitempty"`
}

// MultivariateLastDetectionResult - Results of the last detection.
type MultivariateLastDetectionResult struct {
	// Anomaly status and information.
	Results []*MultivariateAnomalyState `json:"results,omitempty"`

	// Variable status.
	VariableStates []*MultivariateVariableState `json:"variableStates,omitempty"`
}

// MultivariateModelInfo - Training result of a model, including its status, errors, and diagnostics information.
type MultivariateModelInfo struct {
	// REQUIRED; Source link to the input data to indicate an accessible Azure Storage URI. It either points to an Azure Blob
	// Storage folder or points to a CSV file in Azure Blob Storage, based on your data schema
	// selection.
	DataSource *string `json:"dataSource,omitempty"`

	// REQUIRED; End date/time of training data, which should be in ISO 8601 format.
	EndTime *time.Time `json:"endTime,omitempty"`

	// REQUIRED; Start date/time of training data, which should be in ISO 8601 format.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Manner of aligning multiple variables.
	AlignPolicy *MultivariateAlignPolicy `json:"alignPolicy,omitempty"`

	// Data schema of the input data source. The default is OneTable.
	DataSchema *DataSchema `json:"dataSchema,omitempty"`

	// Diagnostics information to help inspect the states of a model or variable.
	DiagnosticsInfo *MultivariateDiagnosticsInfo `json:"diagnosticsInfo,omitempty"`

	// Display name of the model. Maximum length is 24 characters.
	DisplayName *string `json:"displayName,omitempty"`

	// Number of previous time stamps that will be used to detect whether the time stamp is an anomaly or not.
	SlidingWindow *int32 `json:"slidingWindow,omitempty"`

	// Model status.
	Status *ModelStatus `json:"status,omitempty"`

	// READ-ONLY; Error messages after failure to create a model.
	Errors []*MultivariateErrorResponse `json:"errors,omitempty" azure:"ro"`
}

// MultivariateModelList - Response of listing models.
type MultivariateModelList struct {
	// REQUIRED; Number of trained multivariate models.
	CurrentCount *int32 `json:"currentCount,omitempty"`

	// REQUIRED; Maximum number of models that can be trained for this Anomaly Detector resource.
	MaxCount *int32 `json:"maxCount,omitempty"`

	// REQUIRED; List of models.
	Models []*MultivariateAnomalyDetectionModel `json:"models,omitempty"`

	// Link to fetch more models.
	NextLink *string `json:"nextLink,omitempty"`
}

// MultivariateModelState - Model status.
type MultivariateModelState struct {
	// Number of passes of the entire training dataset that the algorithm has completed.
	EpochIDs []*int32 `json:"epochIds,omitempty"`

	// Latency for each epoch.
	LatenciesInSeconds []*float32 `json:"latenciesInSeconds,omitempty"`

	// List of metrics used to assess how the model fits the training data for each epoch.
	TrainLosses []*float32 `json:"trainLosses,omitempty"`

	// List of metrics used to assess how the model fits the validation set for each epoch.
	ValidationLosses []*float32 `json:"validationLosses,omitempty"`
}

// MultivariateResponseError - Error response.
type MultivariateResponseError struct {
	// REQUIRED; Error code.
	Code *string `json:"code,omitempty"`

	// REQUIRED; Message that explains the error that the service reported.
	Message *string `json:"message,omitempty"`
}

// MultivariateVariableState - Variable status.
type MultivariateVariableState struct {
	// Number of effective data points before fillNAMethod is applied.
	EffectiveCount *int32 `json:"effectiveCount,omitempty"`

	// Proportion of missing values that need to be filled by fillNAMethod.
	FilledNARatio *float32 `json:"filledNARatio,omitempty"`

	// First valid time stamp with a value of input data.
	FirstTimestamp *time.Time `json:"firstTimestamp,omitempty"`

	// Last valid time stamp with a value of input data.
	LastTimestamp *time.Time `json:"lastTimestamp,omitempty"`

	// Variable name in variable states.
	Variable *string `json:"variable,omitempty"`
}

// MultivariateVariableValues - Variable values.
type MultivariateVariableValues struct {
	// REQUIRED; Time stamps of the last detection request.
	Timestamps []*string `json:"timestamps,omitempty"`

	// REQUIRED; Values of variables.
	Values []*float32 `json:"values,omitempty"`

	// REQUIRED; Variable name of the last detection request.
	Variable *string `json:"variable,omitempty"`
}

// UnivariateAnomalyDetectorError - Error information that the API returned.
type UnivariateAnomalyDetectorError struct {
	// Error code.
	Code *AnomalyDetectorErrorCodes `json:"code,omitempty"`

	// Message that explains the error that the service reported.
	Message *string `json:"message,omitempty"`
}

// UnivariateChangePointDetectionOptions - Request of change point detection.
type UnivariateChangePointDetectionOptions struct {
	// REQUIRED; Granularity is used to verify whether the input series is valid.
	Granularity *TimeGranularity `json:"granularity,omitempty"`

	// REQUIRED; Time series data points. Points should be sorted by time stamp in ascending order to match the change point detection
	// result.
	Series []*UnivariateTimeSeriesPoint `json:"series,omitempty"`

	// A custom interval is used to set a nonstandard time interval. For example, if the series is 5 minutes, the request can
	// be set as {"granularity":"minutely", "customInterval":5}.
	CustomInterval *int32 `json:"customInterval,omitempty"`

	// Argument that indicates the periodic value of a time series. If the value is null or not present, the API will determine
	// the period automatically.
	Period *int32 `json:"period,omitempty"`

	// Argument that indicates an advanced model parameter. A default stableTrendWindow value will be used in detection.
	StableTrendWindow *int32 `json:"stableTrendWindow,omitempty"`

	// Argument that indicates an advanced model parameter between 0.0 and 1.0. The lower the value is, the larger the trend error
	// is, which means less change point will be accepted.
	Threshold *float32 `json:"threshold,omitempty"`
}

// UnivariateChangePointDetectionResult - Response of change point detection.
type UnivariateChangePointDetectionResult struct {
	// Change point confidence of each point.
	ConfidenceScores []*float32 `json:"confidenceScores,omitempty"`

	// Change point properties for each input point. True means an anomaly (either negative or positive) has been detected. The
	// index of the array is consistent with the input series.
	IsChangePoint []*bool `json:"isChangePoint,omitempty"`

	// READ-ONLY; Frequency extracted from the series. Zero means no recurrent pattern has been found.
	Period *int32 `json:"period,omitempty" azure:"ro"`
}

// UnivariateClientDetectUnivariateChangePointOptions contains the optional parameters for the UnivariateClient.DetectUnivariateChangePoint
// method.
type UnivariateClientDetectUnivariateChangePointOptions struct {
	// placeholder for future optional parameters
}

// UnivariateClientDetectUnivariateEntireSeriesOptions contains the optional parameters for the UnivariateClient.DetectUnivariateEntireSeries
// method.
type UnivariateClientDetectUnivariateEntireSeriesOptions struct {
	// placeholder for future optional parameters
}

// UnivariateClientDetectUnivariateLastPointOptions contains the optional parameters for the UnivariateClient.DetectUnivariateLastPoint
// method.
type UnivariateClientDetectUnivariateLastPointOptions struct {
	// placeholder for future optional parameters
}

// UnivariateDetectionOptions - Request of the entire or last anomaly detection.
type UnivariateDetectionOptions struct {
	// REQUIRED; Time series data points. Points should be sorted by time stamp in ascending order to match the anomaly detection
	// result. If the data is not sorted correctly or there's a duplicated time stamp, the API
	// won't work. In such a case, an error message is returned.
	Series []*UnivariateTimeSeriesPoint `json:"series,omitempty"`

	// A custom interval is used to set a nonstandard time interval. For example, if the series is 5 minutes, the request can
	// be set as {"granularity":"minutely", "customInterval":5}.
	CustomInterval *int32 `json:"customInterval,omitempty"`

	// Argument that indicates time granularity. If granularity is not present, the value is none by default. If granularity is
	// none, the time stamp property in the time series point can be absent.
	Granularity *TimeGranularity `json:"granularity,omitempty"`

	// Specifies the value to fill. It's used when granularity is not "none" and imputeMode is "fixed".
	ImputeFixedValue *float32 `json:"imputeFixedValue,omitempty"`

	// Specifies how to deal with missing values in the input series. It's used when granularity is not "none".
	ImputeMode *ImputeMode `json:"imputeMode,omitempty"`

	// Argument that indicates an advanced model parameter. It's the maximum anomaly ratio in a time series.
	MaxAnomalyRatio *float32 `json:"maxAnomalyRatio,omitempty"`

	// Argument that indicates the periodic value of a time series. If the value is null or is not present, the API determines
	// the period automatically.
	Period *int32 `json:"period,omitempty"`

	// Argument that indicates an advanced model parameter between 0 and 99. The lower the value is, the larger the margin value
	// is, which means fewer anomalies will be accepted.
	Sensitivity *int32 `json:"sensitivity,omitempty"`
}

// UnivariateEntireDetectionResult - Response of the entire anomaly detection.
type UnivariateEntireDetectionResult struct {
	// REQUIRED; Expected value for each input point. The index of the array is consistent with the input series.
	ExpectedValues []*float32 `json:"expectedValues,omitempty"`

	// REQUIRED; Anomaly properties for each input point. True means an anomaly (either negative or positive) has been detected.
	// The index of the array is consistent with the input series.
	IsAnomaly []*bool `json:"isAnomaly,omitempty"`

	// REQUIRED; Anomaly status in a negative direction for each input point. True means a negative anomaly has been detected.
	// A negative anomaly means the point is detected as an anomaly and its real value is smaller
	// than the expected one. The index of the array is consistent with the input series.
	IsNegativeAnomaly []*bool `json:"isNegativeAnomaly,omitempty"`

	// REQUIRED; Anomaly status in a positive direction for each input point. True means a positive anomaly has been detected.
	// A positive anomaly means the point is detected as an anomaly and its real value is larger
	// than the expected one. The index of the array is consistent with the input series.
	IsPositiveAnomaly []*bool `json:"isPositiveAnomaly,omitempty"`

	// REQUIRED; Lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which is equal to expectedValue
	// - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal
	// ones on the client side. The index of the array is consistent with the input series.
	LowerMargins []*float32 `json:"lowerMargins,omitempty"`

	// REQUIRED; Frequency extracted from the series. Zero means no recurrent pattern has been found.
	Period *int32 `json:"period,omitempty"`

	// REQUIRED; Upper margin of each input point. UpperMargin is used to calculate upperBoundary, which is equal to expectedValue
	// + (100 - marginScale)*upperMargin. Anomalies in the response can be filtered by
	// upperBoundary and lowerBoundary. Adjusting the marginScale value can help filter less significant anomalies on the client
	// side. The index of the array is consistent with the input series.
	UpperMargins []*float32 `json:"upperMargins,omitempty"`

	// Severity score for each input point. The larger the value is, the more severe the anomaly is. For normal points, the severity
	// is always 0.
	Severity []*float32 `json:"severity,omitempty"`
}

// UnivariateLastDetectionResult - Response of the last anomaly detection.
type UnivariateLastDetectionResult struct {
	// REQUIRED; Expected value of the latest point.
	ExpectedValue *float32 `json:"expectedValue,omitempty"`

	// REQUIRED; Anomaly status of the latest point. True means the latest point is an anomaly, either in the negative direction
	// or in the positive direction.
	IsAnomaly *bool `json:"isAnomaly,omitempty"`

	// REQUIRED; Anomaly status of the latest point in a negative direction. True means the latest point is an anomaly and its
	// real value is smaller than the expected one.
	IsNegativeAnomaly *bool `json:"isNegativeAnomaly,omitempty"`

	// REQUIRED; Anomaly status of the latest point in a positive direction. True means the latest point is an anomaly and its
	// real value is larger than the expected one.
	IsPositiveAnomaly *bool `json:"isPositiveAnomaly,omitempty"`

	// REQUIRED; Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which is equal to expectedValue
	// - (100 - marginScale)*lowerMargin.
	LowerMargin *float32 `json:"lowerMargin,omitempty"`

	// REQUIRED; Frequency extracted from the series. Zero means no recurrent pattern has been found.
	Period *int32 `json:"period,omitempty"`

	// REQUIRED; Suggested input series points needed for detecting the latest point.
	SuggestedWindow *int32 `json:"suggestedWindow,omitempty"`

	// REQUIRED; Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which is equal to expectedValue
	// + (100 - marginScale)*upperMargin. If the value of latest point is between
	// upperBoundary and lowerBoundary, it should be treated as a normal value. Adjusting the marginScale value enables the anomaly
	// status of the latest point to be changed.
	UpperMargin *float32 `json:"upperMargin,omitempty"`

	// Severity score for the last input point. The larger the value is, the more severe the anomaly is. For normal points, the
	// severity is always 0.
	Severity *float32 `json:"severity,omitempty"`
}

// UnivariateTimeSeriesPoint - Definition of input time series points.
type UnivariateTimeSeriesPoint struct {
	// REQUIRED; Measurement of that point.
	Value *float32 `json:"value,omitempty"`

	// Argument that indicates the time stamp of a data point (ISO8601 format).
	Timestamp *time.Time `json:"timestamp,omitempty"`
}
