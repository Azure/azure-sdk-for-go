//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azanomalydetector

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// UnivariateClient contains the methods for the Univariate group.
// Don't use this type directly, use a constructor function instead.
type UnivariateClient struct {
	internal *azcore.Client
	endpoint string
}

// DetectUnivariateChangePoint - Evaluate the change point score of every series point.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version v1.1
//   - body - Method of univariate anomaly detection.
//   - options - UnivariateClientDetectUnivariateChangePointOptions contains the optional parameters for the UnivariateClient.DetectUnivariateChangePoint
//     method.
func (client *UnivariateClient) DetectUnivariateChangePoint(ctx context.Context, body UnivariateChangePointDetectionOptions, options *UnivariateClientDetectUnivariateChangePointOptions) (UnivariateClientDetectUnivariateChangePointResponse, error) {
	req, err := client.detectUnivariateChangePointCreateRequest(ctx, body, options)
	if err != nil {
		return UnivariateClientDetectUnivariateChangePointResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnivariateClientDetectUnivariateChangePointResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UnivariateClientDetectUnivariateChangePointResponse{}, runtime.NewResponseError(resp)
	}
	return client.detectUnivariateChangePointHandleResponse(resp)
}

// detectUnivariateChangePointCreateRequest creates the DetectUnivariateChangePoint request.
func (client *UnivariateClient) detectUnivariateChangePointCreateRequest(ctx context.Context, body UnivariateChangePointDetectionOptions, options *UnivariateClientDetectUnivariateChangePointOptions) (*policy.Request, error) {
	urlPath := "/timeseries/changepoint/detect"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// detectUnivariateChangePointHandleResponse handles the DetectUnivariateChangePoint response.
func (client *UnivariateClient) detectUnivariateChangePointHandleResponse(resp *http.Response) (UnivariateClientDetectUnivariateChangePointResponse, error) {
	result := UnivariateClientDetectUnivariateChangePointResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnivariateChangePointDetectionResult); err != nil {
		return UnivariateClientDetectUnivariateChangePointResponse{}, err
	}
	return result, nil
}

// DetectUnivariateEntireSeries - This operation generates a model with an entire series. Each point is detected with the
// same model. With this method, points before and after a certain point are used to determine whether it's an
// anomaly. The entire detection can give the user an overall status of the time series.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version v1.1
//   - body - Method of univariate anomaly detection.
//   - options - UnivariateClientDetectUnivariateEntireSeriesOptions contains the optional parameters for the UnivariateClient.DetectUnivariateEntireSeries
//     method.
func (client *UnivariateClient) DetectUnivariateEntireSeries(ctx context.Context, body UnivariateDetectionOptions, options *UnivariateClientDetectUnivariateEntireSeriesOptions) (UnivariateClientDetectUnivariateEntireSeriesResponse, error) {
	req, err := client.detectUnivariateEntireSeriesCreateRequest(ctx, body, options)
	if err != nil {
		return UnivariateClientDetectUnivariateEntireSeriesResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnivariateClientDetectUnivariateEntireSeriesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UnivariateClientDetectUnivariateEntireSeriesResponse{}, runtime.NewResponseError(resp)
	}
	return client.detectUnivariateEntireSeriesHandleResponse(resp)
}

// detectUnivariateEntireSeriesCreateRequest creates the DetectUnivariateEntireSeries request.
func (client *UnivariateClient) detectUnivariateEntireSeriesCreateRequest(ctx context.Context, body UnivariateDetectionOptions, options *UnivariateClientDetectUnivariateEntireSeriesOptions) (*policy.Request, error) {
	urlPath := "/timeseries/entire/detect"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// detectUnivariateEntireSeriesHandleResponse handles the DetectUnivariateEntireSeries response.
func (client *UnivariateClient) detectUnivariateEntireSeriesHandleResponse(resp *http.Response) (UnivariateClientDetectUnivariateEntireSeriesResponse, error) {
	result := UnivariateClientDetectUnivariateEntireSeriesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnivariateEntireDetectionResult); err != nil {
		return UnivariateClientDetectUnivariateEntireSeriesResponse{}, err
	}
	return result, nil
}

// DetectUnivariateLastPoint - This operation generates a model by using the points that you sent in to the API and based
// on all data to determine whether the last point is anomalous.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version v1.1
//   - body - Method of univariate anomaly detection.
//   - options - UnivariateClientDetectUnivariateLastPointOptions contains the optional parameters for the UnivariateClient.DetectUnivariateLastPoint
//     method.
func (client *UnivariateClient) DetectUnivariateLastPoint(ctx context.Context, body UnivariateDetectionOptions, options *UnivariateClientDetectUnivariateLastPointOptions) (UnivariateClientDetectUnivariateLastPointResponse, error) {
	req, err := client.detectUnivariateLastPointCreateRequest(ctx, body, options)
	if err != nil {
		return UnivariateClientDetectUnivariateLastPointResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return UnivariateClientDetectUnivariateLastPointResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UnivariateClientDetectUnivariateLastPointResponse{}, runtime.NewResponseError(resp)
	}
	return client.detectUnivariateLastPointHandleResponse(resp)
}

// detectUnivariateLastPointCreateRequest creates the DetectUnivariateLastPoint request.
func (client *UnivariateClient) detectUnivariateLastPointCreateRequest(ctx context.Context, body UnivariateDetectionOptions, options *UnivariateClientDetectUnivariateLastPointOptions) (*policy.Request, error) {
	urlPath := "/timeseries/last/detect"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// detectUnivariateLastPointHandleResponse handles the DetectUnivariateLastPoint response.
func (client *UnivariateClient) detectUnivariateLastPointHandleResponse(resp *http.Response) (UnivariateClientDetectUnivariateLastPointResponse, error) {
	result := UnivariateClientDetectUnivariateLastPointResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UnivariateLastDetectionResult); err != nil {
		return UnivariateClientDetectUnivariateLastPointResponse{}, err
	}
	return result, nil
}
