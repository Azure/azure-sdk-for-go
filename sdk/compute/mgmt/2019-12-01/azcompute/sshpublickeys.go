// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azcompute

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// SSHPublicKeysOperations contains the methods for the SSHPublicKeys group.
type SSHPublicKeysOperations interface {
	// Create - Creates a new SSH public key resource.
	Create(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyResource) (*SSHPublicKeyResourceResponse, error)
	// Delete - Delete an SSH public key.
	Delete(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*http.Response, error)
	// GenerateKeyPair - Generates and returns a public/private key pair and populates the SSH public key resource with the public key. The length of the key will be 3072 bits. This operation can only be performed once per SSH public key resource.
	GenerateKeyPair(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*SSHPublicKeyGenerateKeyPairResultResponse, error)
	// Get - Retrieves information about an SSH public key.
	Get(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*SSHPublicKeyResourceResponse, error)
	// ListByResourceGroup - Lists all of the SSH public keys in the specified resource group. Use the nextLink property in the response to get the next page of SSH public keys.
	ListByResourceGroup(resourceGroupName string) (SSHPublicKeysGroupListResultPager, error)
	// ListBySubscription - Lists all of the SSH public keys in the subscription. Use the nextLink property in the response to get the next page of SSH public keys.
	ListBySubscription() (SSHPublicKeysGroupListResultPager, error)
	// Update - Updates a new SSH public key resource.
	Update(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyUpdateResource) (*SSHPublicKeyResourceResponse, error)
}

// sshPublicKeysOperations implements the SSHPublicKeysOperations interface.
type sshPublicKeysOperations struct {
	*Client
	subscriptionID string
}

// Create - Creates a new SSH public key resource.
func (client *sshPublicKeysOperations) Create(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyResource) (*SSHPublicKeyResourceResponse, error) {
	req, err := client.createCreateRequest(resourceGroupName, sshPublicKeyName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createCreateRequest creates the Create request.
func (client *sshPublicKeysOperations) createCreateRequest(resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{sshPublicKeyName}", url.PathEscape(sshPublicKeyName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createHandleResponse handles the Create response.
func (client *sshPublicKeysOperations) createHandleResponse(resp *azcore.Response) (*SSHPublicKeyResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createHandleError(resp)
	}
	result := SSHPublicKeyResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeyResource)
}

// createHandleError handles the Create error response.
func (client *sshPublicKeysOperations) createHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Delete - Delete an SSH public key.
func (client *sshPublicKeysOperations) Delete(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, sshPublicKeyName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *sshPublicKeysOperations) deleteCreateRequest(resourceGroupName string, sshPublicKeyName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{sshPublicKeyName}", url.PathEscape(sshPublicKeyName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *sshPublicKeysOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *sshPublicKeysOperations) deleteHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GenerateKeyPair - Generates and returns a public/private key pair and populates the SSH public key resource with the public key. The length of the key will be 3072 bits. This operation can only be performed once per SSH public key resource.
func (client *sshPublicKeysOperations) GenerateKeyPair(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*SSHPublicKeyGenerateKeyPairResultResponse, error) {
	req, err := client.generateKeyPairCreateRequest(resourceGroupName, sshPublicKeyName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.generateKeyPairHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// generateKeyPairCreateRequest creates the GenerateKeyPair request.
func (client *sshPublicKeysOperations) generateKeyPairCreateRequest(resourceGroupName string, sshPublicKeyName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}/generateKeyPair"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{sshPublicKeyName}", url.PathEscape(sshPublicKeyName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// generateKeyPairHandleResponse handles the GenerateKeyPair response.
func (client *sshPublicKeysOperations) generateKeyPairHandleResponse(resp *azcore.Response) (*SSHPublicKeyGenerateKeyPairResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.generateKeyPairHandleError(resp)
	}
	result := SSHPublicKeyGenerateKeyPairResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeyGenerateKeyPairResult)
}

// generateKeyPairHandleError handles the GenerateKeyPair error response.
func (client *sshPublicKeysOperations) generateKeyPairHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Get - Retrieves information about an SSH public key.
func (client *sshPublicKeysOperations) Get(ctx context.Context, resourceGroupName string, sshPublicKeyName string) (*SSHPublicKeyResourceResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, sshPublicKeyName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *sshPublicKeysOperations) getCreateRequest(resourceGroupName string, sshPublicKeyName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{sshPublicKeyName}", url.PathEscape(sshPublicKeyName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *sshPublicKeysOperations) getHandleResponse(resp *azcore.Response) (*SSHPublicKeyResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := SSHPublicKeyResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeyResource)
}

// getHandleError handles the Get error response.
func (client *sshPublicKeysOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListByResourceGroup - Lists all of the SSH public keys in the specified resource group. Use the nextLink property in the response to get the next page of SSH public keys.
func (client *sshPublicKeysOperations) ListByResourceGroup(resourceGroupName string) (SSHPublicKeysGroupListResultPager, error) {
	req, err := client.listByResourceGroupCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	return &sshPublicKeysGroupListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listByResourceGroupHandleResponse,
		advancer: func(resp *SSHPublicKeysGroupListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.SSHPublicKeysGroupListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.SSHPublicKeysGroupListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *sshPublicKeysOperations) listByResourceGroupCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *sshPublicKeysOperations) listByResourceGroupHandleResponse(resp *azcore.Response) (*SSHPublicKeysGroupListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByResourceGroupHandleError(resp)
	}
	result := SSHPublicKeysGroupListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeysGroupListResult)
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *sshPublicKeysOperations) listByResourceGroupHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListBySubscription - Lists all of the SSH public keys in the subscription. Use the nextLink property in the response to get the next page of SSH public keys.
func (client *sshPublicKeysOperations) ListBySubscription() (SSHPublicKeysGroupListResultPager, error) {
	req, err := client.listBySubscriptionCreateRequest()
	if err != nil {
		return nil, err
	}
	return &sshPublicKeysGroupListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listBySubscriptionHandleResponse,
		advancer: func(resp *SSHPublicKeysGroupListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.SSHPublicKeysGroupListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.SSHPublicKeysGroupListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *sshPublicKeysOperations) listBySubscriptionCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/sshPublicKeys"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *sshPublicKeysOperations) listBySubscriptionHandleResponse(resp *azcore.Response) (*SSHPublicKeysGroupListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listBySubscriptionHandleError(resp)
	}
	result := SSHPublicKeysGroupListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeysGroupListResult)
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *sshPublicKeysOperations) listBySubscriptionHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Update - Updates a new SSH public key resource.
func (client *sshPublicKeysOperations) Update(ctx context.Context, resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyUpdateResource) (*SSHPublicKeyResourceResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, sshPublicKeyName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *sshPublicKeysOperations) updateCreateRequest(resourceGroupName string, sshPublicKeyName string, parameters SSHPublicKeyUpdateResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{sshPublicKeyName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{sshPublicKeyName}", url.PathEscape(sshPublicKeyName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateHandleResponse handles the Update response.
func (client *sshPublicKeysOperations) updateHandleResponse(resp *azcore.Response) (*SSHPublicKeyResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	result := SSHPublicKeyResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.SSHPublicKeyResource)
}

// updateHandleError handles the Update error response.
func (client *sshPublicKeysOperations) updateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
