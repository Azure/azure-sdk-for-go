// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azcompute

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// VirtualMachineExtensionImagesOperations contains the methods for the VirtualMachineExtensionImages group.
type VirtualMachineExtensionImagesOperations interface {
	// Get - Gets a virtual machine extension image.
	Get(ctx context.Context, location string, publisherName string, typeParameter string, version string) (*VirtualMachineExtensionImageResponse, error)
	// ListTypes - Gets a list of virtual machine extension image types.
	ListTypes(ctx context.Context, location string, publisherName string) (*VirtualMachineExtensionImageArrayResponse, error)
	// ListVersions - Gets a list of virtual machine extension image versions.
	ListVersions(ctx context.Context, location string, publisherName string, typeParameter string, virtualMachineExtensionImagesListVersionsOptions *VirtualMachineExtensionImagesListVersionsOptions) (*VirtualMachineExtensionImageArrayResponse, error)
}

// virtualMachineExtensionImagesOperations implements the VirtualMachineExtensionImagesOperations interface.
type virtualMachineExtensionImagesOperations struct {
	*Client
	subscriptionID string
}

// Get - Gets a virtual machine extension image.
func (client *virtualMachineExtensionImagesOperations) Get(ctx context.Context, location string, publisherName string, typeParameter string, version string) (*VirtualMachineExtensionImageResponse, error) {
	req, err := client.getCreateRequest(location, publisherName, typeParameter, version)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *virtualMachineExtensionImagesOperations) getCreateRequest(location string, publisherName string, typeParameter string, version string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{publisherName}", url.PathEscape(publisherName))
	urlPath = strings.ReplaceAll(urlPath, "{type}", url.PathEscape(typeParameter))
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *virtualMachineExtensionImagesOperations) getHandleResponse(resp *azcore.Response) (*VirtualMachineExtensionImageResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := VirtualMachineExtensionImageResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineExtensionImage)
}

// getHandleError handles the Get error response.
func (client *virtualMachineExtensionImagesOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListTypes - Gets a list of virtual machine extension image types.
func (client *virtualMachineExtensionImagesOperations) ListTypes(ctx context.Context, location string, publisherName string) (*VirtualMachineExtensionImageArrayResponse, error) {
	req, err := client.listTypesCreateRequest(location, publisherName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listTypesHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listTypesCreateRequest creates the ListTypes request.
func (client *virtualMachineExtensionImagesOperations) listTypesCreateRequest(location string, publisherName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{publisherName}", url.PathEscape(publisherName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listTypesHandleResponse handles the ListTypes response.
func (client *virtualMachineExtensionImagesOperations) listTypesHandleResponse(resp *azcore.Response) (*VirtualMachineExtensionImageArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listTypesHandleError(resp)
	}
	result := VirtualMachineExtensionImageArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineExtensionImageArray)
}

// listTypesHandleError handles the ListTypes error response.
func (client *virtualMachineExtensionImagesOperations) listTypesHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListVersions - Gets a list of virtual machine extension image versions.
func (client *virtualMachineExtensionImagesOperations) ListVersions(ctx context.Context, location string, publisherName string, typeParameter string, virtualMachineExtensionImagesListVersionsOptions *VirtualMachineExtensionImagesListVersionsOptions) (*VirtualMachineExtensionImageArrayResponse, error) {
	req, err := client.listVersionsCreateRequest(location, publisherName, typeParameter, virtualMachineExtensionImagesListVersionsOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listVersionsHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listVersionsCreateRequest creates the ListVersions request.
func (client *virtualMachineExtensionImagesOperations) listVersionsCreateRequest(location string, publisherName string, typeParameter string, virtualMachineExtensionImagesListVersionsOptions *VirtualMachineExtensionImagesListVersionsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions"
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	urlPath = strings.ReplaceAll(urlPath, "{publisherName}", url.PathEscape(publisherName))
	urlPath = strings.ReplaceAll(urlPath, "{type}", url.PathEscape(typeParameter))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if virtualMachineExtensionImagesListVersionsOptions != nil && virtualMachineExtensionImagesListVersionsOptions.Filter != nil {
		query.Set("$filter", *virtualMachineExtensionImagesListVersionsOptions.Filter)
	}
	if virtualMachineExtensionImagesListVersionsOptions != nil && virtualMachineExtensionImagesListVersionsOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*virtualMachineExtensionImagesListVersionsOptions.Top), 10))
	}
	if virtualMachineExtensionImagesListVersionsOptions != nil && virtualMachineExtensionImagesListVersionsOptions.Orderby != nil {
		query.Set("$orderby", *virtualMachineExtensionImagesListVersionsOptions.Orderby)
	}
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listVersionsHandleResponse handles the ListVersions response.
func (client *virtualMachineExtensionImagesOperations) listVersionsHandleResponse(resp *azcore.Response) (*VirtualMachineExtensionImageArrayResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listVersionsHandleError(resp)
	}
	result := VirtualMachineExtensionImageArrayResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineExtensionImageArray)
}

// listVersionsHandleError handles the ListVersions error response.
func (client *virtualMachineExtensionImagesOperations) listVersionsHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
