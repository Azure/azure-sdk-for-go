// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azcompute

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// VirtualMachineScaleSetVMSOperations contains the methods for the VirtualMachineScaleSetVMS group.
type VirtualMachineScaleSetVMSOperations interface {
	// BeginDeallocate - Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
	BeginDeallocate(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeDeallocate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDeallocate(token string) (HTTPPoller, error)
	// BeginDelete - Deletes a virtual machine from a VM scale set.
	BeginDelete(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeDelete - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeDelete(token string) (HTTPPoller, error)
	// Get - Gets a virtual machine from a VM scale set.
	Get(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*VirtualMachineScaleSetVMResponse, error)
	// GetInstanceView - Gets the status of a virtual machine from a VM scale set.
	GetInstanceView(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*VirtualMachineScaleSetVMInstanceViewResponse, error)
	// List - Gets a list of all virtual machines in a VM scale sets.
	List(resourceGroupName string, virtualMachineScaleSetName string, virtualMachineScaleSetVmsListOptions *VirtualMachineScaleSetVMSListOptions) (VirtualMachineScaleSetVMListResultPager, error)
	// BeginPerformMaintenance - Performs maintenance on a virtual machine in a VM scale set.
	BeginPerformMaintenance(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumePerformMaintenance - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumePerformMaintenance(token string) (HTTPPoller, error)
	// BeginPowerOff - Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
	BeginPowerOff(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsPowerOffOptions *VirtualMachineScaleSetVMSPowerOffOptions) (*HTTPResponse, error)
	// ResumePowerOff - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumePowerOff(token string) (HTTPPoller, error)
	// BeginRedeploy - Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
	BeginRedeploy(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeRedeploy - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeRedeploy(token string) (HTTPPoller, error)
	// BeginReimage - Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
	BeginReimage(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsReimageOptions *VirtualMachineScaleSetVMSReimageOptions) (*HTTPResponse, error)
	// ResumeReimage - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeReimage(token string) (HTTPPoller, error)
	// BeginReimageAll - Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
	BeginReimageAll(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeReimageAll - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeReimageAll(token string) (HTTPPoller, error)
	// BeginRestart - Restarts a virtual machine in a VM scale set.
	BeginRestart(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeRestart - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeRestart(token string) (HTTPPoller, error)
	// BeginRunCommand - Run command on a virtual machine in a VM scale set.
	BeginRunCommand(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, parameters RunCommandInput) (*RunCommandResultResponse, error)
	// ResumeRunCommand - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeRunCommand(token string) (RunCommandResultPoller, error)
	// SimulateEviction - The operation to simulate the eviction of spot virtual machine in a VM scale set. The eviction will occur within 30 minutes of calling the API
	SimulateEviction(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*http.Response, error)
	// BeginStart - Starts a virtual machine in a VM scale set.
	BeginStart(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error)
	// ResumeStart - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeStart(token string) (HTTPPoller, error)
	// BeginUpdate - Updates a virtual machine of a VM scale set.
	BeginUpdate(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, parameters VirtualMachineScaleSetVM) (*VirtualMachineScaleSetVMResponse, error)
	// ResumeUpdate - Used to create a new instance of this poller from the resume token of a previous instance of this poller type.
	ResumeUpdate(token string) (VirtualMachineScaleSetVMPoller, error)
}

// virtualMachineScaleSetVmsOperations implements the VirtualMachineScaleSetVMSOperations interface.
type virtualMachineScaleSetVmsOperations struct {
	*Client
	subscriptionID string
}

// Deallocate - Deallocates a specific virtual machine in a VM scale set. Shuts down the virtual machine and releases the compute resources it uses. You are not billed for the compute resources of this virtual machine once it is deallocated.
func (client *virtualMachineScaleSetVmsOperations) BeginDeallocate(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.deallocateCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deallocateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Deallocate", "", resp, client.deallocateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeDeallocate(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Deallocate", token, client.deallocateHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deallocateCreateRequest creates the Deallocate request.
func (client *virtualMachineScaleSetVmsOperations) deallocateCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/deallocate"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// deallocateHandleResponse handles the Deallocate response.
func (client *virtualMachineScaleSetVmsOperations) deallocateHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deallocateHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// deallocateHandleError handles the Deallocate error response.
func (client *virtualMachineScaleSetVmsOperations) deallocateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Delete - Deletes a virtual machine from a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginDelete(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Delete", "", resp, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeDelete(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Delete", token, client.deleteHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *virtualMachineScaleSetVmsOperations) deleteCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *virtualMachineScaleSetVmsOperations) deleteHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// deleteHandleError handles the Delete error response.
func (client *virtualMachineScaleSetVmsOperations) deleteHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Get - Gets a virtual machine from a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) Get(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*VirtualMachineScaleSetVMResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *virtualMachineScaleSetVmsOperations) getCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *virtualMachineScaleSetVmsOperations) getHandleResponse(resp *azcore.Response) (*VirtualMachineScaleSetVMResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := VirtualMachineScaleSetVMResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineScaleSetVM)
}

// getHandleError handles the Get error response.
func (client *virtualMachineScaleSetVmsOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// GetInstanceView - Gets the status of a virtual machine from a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) GetInstanceView(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*VirtualMachineScaleSetVMInstanceViewResponse, error) {
	req, err := client.getInstanceViewCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getInstanceViewHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getInstanceViewCreateRequest creates the GetInstanceView request.
func (client *virtualMachineScaleSetVmsOperations) getInstanceViewCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/instanceView"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getInstanceViewHandleResponse handles the GetInstanceView response.
func (client *virtualMachineScaleSetVmsOperations) getInstanceViewHandleResponse(resp *azcore.Response) (*VirtualMachineScaleSetVMInstanceViewResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getInstanceViewHandleError(resp)
	}
	result := VirtualMachineScaleSetVMInstanceViewResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineScaleSetVMInstanceView)
}

// getInstanceViewHandleError handles the GetInstanceView error response.
func (client *virtualMachineScaleSetVmsOperations) getInstanceViewHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// List - Gets a list of all virtual machines in a VM scale sets.
func (client *virtualMachineScaleSetVmsOperations) List(resourceGroupName string, virtualMachineScaleSetName string, virtualMachineScaleSetVmsListOptions *VirtualMachineScaleSetVMSListOptions) (VirtualMachineScaleSetVMListResultPager, error) {
	req, err := client.listCreateRequest(resourceGroupName, virtualMachineScaleSetName, virtualMachineScaleSetVmsListOptions)
	if err != nil {
		return nil, err
	}
	return &virtualMachineScaleSetVMListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listHandleResponse,
		advancer: func(resp *VirtualMachineScaleSetVMListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.VirtualMachineScaleSetVMListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.VirtualMachineScaleSetVMListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listCreateRequest creates the List request.
func (client *virtualMachineScaleSetVmsOperations) listCreateRequest(resourceGroupName string, virtualMachineScaleSetName string, virtualMachineScaleSetVmsListOptions *VirtualMachineScaleSetVMSListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{virtualMachineScaleSetName}", url.PathEscape(virtualMachineScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if virtualMachineScaleSetVmsListOptions != nil && virtualMachineScaleSetVmsListOptions.Filter != nil {
		query.Set("$filter", *virtualMachineScaleSetVmsListOptions.Filter)
	}
	if virtualMachineScaleSetVmsListOptions != nil && virtualMachineScaleSetVmsListOptions.SelectParameter != nil {
		query.Set("$select", *virtualMachineScaleSetVmsListOptions.SelectParameter)
	}
	if virtualMachineScaleSetVmsListOptions != nil && virtualMachineScaleSetVmsListOptions.Expand != nil {
		query.Set("$expand", *virtualMachineScaleSetVmsListOptions.Expand)
	}
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *virtualMachineScaleSetVmsOperations) listHandleResponse(resp *azcore.Response) (*VirtualMachineScaleSetVMListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := VirtualMachineScaleSetVMListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineScaleSetVMListResult)
}

// listHandleError handles the List error response.
func (client *virtualMachineScaleSetVmsOperations) listHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// PerformMaintenance - Performs maintenance on a virtual machine in a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginPerformMaintenance(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.performMaintenanceCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.performMaintenanceHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.PerformMaintenance", "", resp, client.performMaintenanceHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumePerformMaintenance(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.PerformMaintenance", token, client.performMaintenanceHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// performMaintenanceCreateRequest creates the PerformMaintenance request.
func (client *virtualMachineScaleSetVmsOperations) performMaintenanceCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/performMaintenance"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// performMaintenanceHandleResponse handles the PerformMaintenance response.
func (client *virtualMachineScaleSetVmsOperations) performMaintenanceHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.performMaintenanceHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// performMaintenanceHandleError handles the PerformMaintenance error response.
func (client *virtualMachineScaleSetVmsOperations) performMaintenanceHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// PowerOff - Power off (stop) a virtual machine in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.
func (client *virtualMachineScaleSetVmsOperations) BeginPowerOff(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsPowerOffOptions *VirtualMachineScaleSetVMSPowerOffOptions) (*HTTPResponse, error) {
	req, err := client.powerOffCreateRequest(resourceGroupName, vmScaleSetName, instanceId, virtualMachineScaleSetVmsPowerOffOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.powerOffHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.PowerOff", "", resp, client.powerOffHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumePowerOff(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.PowerOff", token, client.powerOffHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// powerOffCreateRequest creates the PowerOff request.
func (client *virtualMachineScaleSetVmsOperations) powerOffCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsPowerOffOptions *VirtualMachineScaleSetVMSPowerOffOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/poweroff"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	if virtualMachineScaleSetVmsPowerOffOptions != nil && virtualMachineScaleSetVmsPowerOffOptions.SkipShutdown != nil {
		query.Set("skipShutdown", strconv.FormatBool(*virtualMachineScaleSetVmsPowerOffOptions.SkipShutdown))
	}
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// powerOffHandleResponse handles the PowerOff response.
func (client *virtualMachineScaleSetVmsOperations) powerOffHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.powerOffHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// powerOffHandleError handles the PowerOff error response.
func (client *virtualMachineScaleSetVmsOperations) powerOffHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Redeploy - Shuts down the virtual machine in the virtual machine scale set, moves it to a new node, and powers it back on.
func (client *virtualMachineScaleSetVmsOperations) BeginRedeploy(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.redeployCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.redeployHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Redeploy", "", resp, client.redeployHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeRedeploy(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Redeploy", token, client.redeployHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// redeployCreateRequest creates the Redeploy request.
func (client *virtualMachineScaleSetVmsOperations) redeployCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/redeploy"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// redeployHandleResponse handles the Redeploy response.
func (client *virtualMachineScaleSetVmsOperations) redeployHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.redeployHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// redeployHandleError handles the Redeploy error response.
func (client *virtualMachineScaleSetVmsOperations) redeployHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Reimage - Reimages (upgrade the operating system) a specific virtual machine in a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginReimage(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsReimageOptions *VirtualMachineScaleSetVMSReimageOptions) (*HTTPResponse, error) {
	req, err := client.reimageCreateRequest(resourceGroupName, vmScaleSetName, instanceId, virtualMachineScaleSetVmsReimageOptions)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.reimageHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Reimage", "", resp, client.reimageHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeReimage(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Reimage", token, client.reimageHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// reimageCreateRequest creates the Reimage request.
func (client *virtualMachineScaleSetVmsOperations) reimageCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string, virtualMachineScaleSetVmsReimageOptions *VirtualMachineScaleSetVMSReimageOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimage"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	if virtualMachineScaleSetVmsReimageOptions != nil {
		return req, req.MarshalAsJSON(virtualMachineScaleSetVmsReimageOptions.VMScaleSetVMReimageInput)
	}
	return req, nil
}

// reimageHandleResponse handles the Reimage response.
func (client *virtualMachineScaleSetVmsOperations) reimageHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.reimageHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// reimageHandleError handles the Reimage error response.
func (client *virtualMachineScaleSetVmsOperations) reimageHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ReimageAll - Allows you to re-image all the disks ( including data disks ) in the a VM scale set instance. This operation is only supported for managed disks.
func (client *virtualMachineScaleSetVmsOperations) BeginReimageAll(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.reimageAllCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.reimageAllHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.ReimageAll", "", resp, client.reimageAllHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeReimageAll(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.ReimageAll", token, client.reimageAllHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// reimageAllCreateRequest creates the ReimageAll request.
func (client *virtualMachineScaleSetVmsOperations) reimageAllCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/reimageall"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// reimageAllHandleResponse handles the ReimageAll response.
func (client *virtualMachineScaleSetVmsOperations) reimageAllHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.reimageAllHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// reimageAllHandleError handles the ReimageAll error response.
func (client *virtualMachineScaleSetVmsOperations) reimageAllHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Restart - Restarts a virtual machine in a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginRestart(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.restartCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.restartHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Restart", "", resp, client.restartHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeRestart(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Restart", token, client.restartHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// restartCreateRequest creates the Restart request.
func (client *virtualMachineScaleSetVmsOperations) restartCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/restart"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// restartHandleResponse handles the Restart response.
func (client *virtualMachineScaleSetVmsOperations) restartHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.restartHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// restartHandleError handles the Restart error response.
func (client *virtualMachineScaleSetVmsOperations) restartHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// RunCommand - Run command on a virtual machine in a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginRunCommand(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, parameters RunCommandInput) (*RunCommandResultResponse, error) {
	req, err := client.runCommandCreateRequest(resourceGroupName, vmScaleSetName, instanceId, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.runCommandHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.RunCommand", "location", resp, client.runCommandHandleError)
	if err != nil {
		return nil, err
	}
	poller := &runCommandResultPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*RunCommandResultResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeRunCommand(token string) (RunCommandResultPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.RunCommand", token, client.runCommandHandleError)
	if err != nil {
		return nil, err
	}
	return &runCommandResultPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// runCommandCreateRequest creates the RunCommand request.
func (client *virtualMachineScaleSetVmsOperations) runCommandCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string, parameters RunCommandInput) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/runCommand"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// runCommandHandleResponse handles the RunCommand response.
func (client *virtualMachineScaleSetVmsOperations) runCommandHandleResponse(resp *azcore.Response) (*RunCommandResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.runCommandHandleError(resp)
	}
	result := RunCommandResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.RunCommandResult)
}

// runCommandHandleError handles the RunCommand error response.
func (client *virtualMachineScaleSetVmsOperations) runCommandHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// SimulateEviction - The operation to simulate the eviction of spot virtual machine in a VM scale set. The eviction will occur within 30 minutes of calling the API
func (client *virtualMachineScaleSetVmsOperations) SimulateEviction(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*http.Response, error) {
	req, err := client.simulateEvictionCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.simulateEvictionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// simulateEvictionCreateRequest creates the SimulateEviction request.
func (client *virtualMachineScaleSetVmsOperations) simulateEvictionCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualMachines/{instanceId}/simulateEviction"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// simulateEvictionHandleResponse handles the SimulateEviction response.
func (client *virtualMachineScaleSetVmsOperations) simulateEvictionHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusNoContent) {
		return nil, client.simulateEvictionHandleError(resp)
	}
	return resp.Response, nil
}

// simulateEvictionHandleError handles the SimulateEviction error response.
func (client *virtualMachineScaleSetVmsOperations) simulateEvictionHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Start - Starts a virtual machine in a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginStart(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string) (*HTTPResponse, error) {
	req, err := client.startCreateRequest(resourceGroupName, vmScaleSetName, instanceId)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.startHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Start", "", resp, client.startHandleError)
	if err != nil {
		return nil, err
	}
	poller := &httpPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*http.Response, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeStart(token string) (HTTPPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Start", token, client.startHandleError)
	if err != nil {
		return nil, err
	}
	return &httpPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// startCreateRequest creates the Start request.
func (client *virtualMachineScaleSetVmsOperations) startCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}/start"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// startHandleResponse handles the Start response.
func (client *virtualMachineScaleSetVmsOperations) startHandleResponse(resp *azcore.Response) (*HTTPResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.startHandleError(resp)
	}
	return &HTTPResponse{RawResponse: resp.Response}, nil
}

// startHandleError handles the Start error response.
func (client *virtualMachineScaleSetVmsOperations) startHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Update - Updates a virtual machine of a VM scale set.
func (client *virtualMachineScaleSetVmsOperations) BeginUpdate(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceId string, parameters VirtualMachineScaleSetVM) (*VirtualMachineScaleSetVMResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, vmScaleSetName, instanceId, parameters)
	if err != nil {
		return nil, err
	}
	// send the first request to initialize the poller
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	pt, err := createPollingTracker("virtualMachineScaleSetVmsOperations.Update", "", resp, client.updateHandleError)
	if err != nil {
		return nil, err
	}
	poller := &virtualMachineScaleSetVMPoller{
		pt:       pt,
		pipeline: client.p,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (*VirtualMachineScaleSetVMResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

func (client *virtualMachineScaleSetVmsOperations) ResumeUpdate(token string) (VirtualMachineScaleSetVMPoller, error) {
	pt, err := resumePollingTracker("virtualMachineScaleSetVmsOperations.Update", token, client.updateHandleError)
	if err != nil {
		return nil, err
	}
	return &virtualMachineScaleSetVMPoller{
		pipeline: client.p,
		pt:       pt,
	}, nil
}

// updateCreateRequest creates the Update request.
func (client *virtualMachineScaleSetVmsOperations) updateCreateRequest(resourceGroupName string, vmScaleSetName string, instanceId string, parameters VirtualMachineScaleSetVM) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachineScaleSets/{vmScaleSetName}/virtualmachines/{instanceId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{vmScaleSetName}", url.PathEscape(vmScaleSetName))
	urlPath = strings.ReplaceAll(urlPath, "{instanceId}", url.PathEscape(instanceId))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2019-12-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// updateHandleResponse handles the Update response.
func (client *virtualMachineScaleSetVmsOperations) updateHandleResponse(resp *azcore.Response) (*VirtualMachineScaleSetVMResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.updateHandleError(resp)
	}
	result := VirtualMachineScaleSetVMResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.VirtualMachineScaleSetVM)
}

// updateHandleError handles the Update error response.
func (client *virtualMachineScaleSetVmsOperations) updateHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}
