// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcontainerservice

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// AgentPoolsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type AgentPoolsCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AgentPoolsCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (AgentPoolsCreateOrUpdateResponse, error)
}

type agentPoolsCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *agentPoolsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *agentPoolsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *agentPoolsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (AgentPoolsCreateOrUpdateResponse, error) {
	respType := AgentPoolsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.AgentPool)
	if err != nil {
		return AgentPoolsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *agentPoolsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *agentPoolsCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (AgentPoolsCreateOrUpdateResponse, error) {
	respType := AgentPoolsCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.AgentPool)
	if err != nil {
		return AgentPoolsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// AgentPoolsDeletePoller provides polling facilities until the operation reaches a terminal state.
type AgentPoolsDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AgentPoolsDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (AgentPoolsDeleteResponse, error)
}

type agentPoolsDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *agentPoolsDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *agentPoolsDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *agentPoolsDeletePoller) FinalResponse(ctx context.Context) (AgentPoolsDeleteResponse, error) {
	respType := AgentPoolsDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AgentPoolsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *agentPoolsDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *agentPoolsDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (AgentPoolsDeleteResponse, error) {
	respType := AgentPoolsDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return AgentPoolsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// AgentPoolsUpgradeNodeImageVersionPoller provides polling facilities until the operation reaches a terminal state.
type AgentPoolsUpgradeNodeImageVersionPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final AgentPoolsUpgradeNodeImageVersionResponse will be returned.
	FinalResponse(ctx context.Context) (AgentPoolsUpgradeNodeImageVersionResponse, error)
}

type agentPoolsUpgradeNodeImageVersionPoller struct {
	pt *armcore.LROPoller
}

func (p *agentPoolsUpgradeNodeImageVersionPoller) Done() bool {
	return p.pt.Done()
}

func (p *agentPoolsUpgradeNodeImageVersionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *agentPoolsUpgradeNodeImageVersionPoller) FinalResponse(ctx context.Context) (AgentPoolsUpgradeNodeImageVersionResponse, error) {
	respType := AgentPoolsUpgradeNodeImageVersionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.AgentPool)
	if err != nil {
		return AgentPoolsUpgradeNodeImageVersionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *agentPoolsUpgradeNodeImageVersionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *agentPoolsUpgradeNodeImageVersionPoller) pollUntilDone(ctx context.Context, freq time.Duration) (AgentPoolsUpgradeNodeImageVersionResponse, error) {
	respType := AgentPoolsUpgradeNodeImageVersionResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.AgentPool)
	if err != nil {
		return AgentPoolsUpgradeNodeImageVersionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersCreateOrUpdateResponse, error)
}

type managedClustersCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ManagedClustersCreateOrUpdateResponse, error) {
	respType := ManagedClustersCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ManagedCluster)
	if err != nil {
		return ManagedClustersCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersCreateOrUpdateResponse, error) {
	respType := ManagedClustersCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ManagedCluster)
	if err != nil {
		return ManagedClustersCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersDeletePoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersDeleteResponse, error)
}

type managedClustersDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersDeletePoller) FinalResponse(ctx context.Context) (ManagedClustersDeleteResponse, error) {
	respType := ManagedClustersDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersDeleteResponse, error) {
	respType := ManagedClustersDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersResetAADProfilePoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersResetAADProfilePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersResetAADProfileResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersResetAADProfileResponse, error)
}

type managedClustersResetAADProfilePoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersResetAADProfilePoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersResetAADProfilePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersResetAADProfilePoller) FinalResponse(ctx context.Context) (ManagedClustersResetAADProfileResponse, error) {
	respType := ManagedClustersResetAADProfileResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersResetAADProfileResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersResetAADProfilePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersResetAADProfilePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersResetAADProfileResponse, error) {
	respType := ManagedClustersResetAADProfileResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersResetAADProfileResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersResetServicePrincipalProfilePoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersResetServicePrincipalProfilePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersResetServicePrincipalProfileResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersResetServicePrincipalProfileResponse, error)
}

type managedClustersResetServicePrincipalProfilePoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersResetServicePrincipalProfilePoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersResetServicePrincipalProfilePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersResetServicePrincipalProfilePoller) FinalResponse(ctx context.Context) (ManagedClustersResetServicePrincipalProfileResponse, error) {
	respType := ManagedClustersResetServicePrincipalProfileResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersResetServicePrincipalProfileResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersResetServicePrincipalProfilePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersResetServicePrincipalProfilePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersResetServicePrincipalProfileResponse, error) {
	respType := ManagedClustersResetServicePrincipalProfileResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersResetServicePrincipalProfileResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersRotateClusterCertificatesPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersRotateClusterCertificatesPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersRotateClusterCertificatesResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersRotateClusterCertificatesResponse, error)
}

type managedClustersRotateClusterCertificatesPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersRotateClusterCertificatesPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersRotateClusterCertificatesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersRotateClusterCertificatesPoller) FinalResponse(ctx context.Context) (ManagedClustersRotateClusterCertificatesResponse, error) {
	respType := ManagedClustersRotateClusterCertificatesResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersRotateClusterCertificatesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersRotateClusterCertificatesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersRotateClusterCertificatesPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersRotateClusterCertificatesResponse, error) {
	respType := ManagedClustersRotateClusterCertificatesResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersRotateClusterCertificatesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersRunCommandPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersRunCommandPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersRunCommandResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersRunCommandResponse, error)
}

type managedClustersRunCommandPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersRunCommandPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersRunCommandPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersRunCommandPoller) FinalResponse(ctx context.Context) (ManagedClustersRunCommandResponse, error) {
	respType := ManagedClustersRunCommandResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RunCommandResult)
	if err != nil {
		return ManagedClustersRunCommandResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersRunCommandPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersRunCommandPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersRunCommandResponse, error) {
	respType := ManagedClustersRunCommandResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.RunCommandResult)
	if err != nil {
		return ManagedClustersRunCommandResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersStartPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersStartPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersStartResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersStartResponse, error)
}

type managedClustersStartPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersStartPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersStartPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersStartPoller) FinalResponse(ctx context.Context) (ManagedClustersStartResponse, error) {
	respType := ManagedClustersStartResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersStartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersStartPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersStartPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersStartResponse, error) {
	respType := ManagedClustersStartResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersStartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersStopPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersStopPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersStopResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersStopResponse, error)
}

type managedClustersStopPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersStopPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersStopPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersStopPoller) FinalResponse(ctx context.Context) (ManagedClustersStopResponse, error) {
	respType := ManagedClustersStopResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ManagedClustersStopResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersStopPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersStopPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersStopResponse, error) {
	respType := ManagedClustersStopResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ManagedClustersStopResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ManagedClustersUpdateTagsPoller provides polling facilities until the operation reaches a terminal state.
type ManagedClustersUpdateTagsPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ManagedClustersUpdateTagsResponse will be returned.
	FinalResponse(ctx context.Context) (ManagedClustersUpdateTagsResponse, error)
}

type managedClustersUpdateTagsPoller struct {
	pt *armcore.LROPoller
}

func (p *managedClustersUpdateTagsPoller) Done() bool {
	return p.pt.Done()
}

func (p *managedClustersUpdateTagsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *managedClustersUpdateTagsPoller) FinalResponse(ctx context.Context) (ManagedClustersUpdateTagsResponse, error) {
	respType := ManagedClustersUpdateTagsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ManagedCluster)
	if err != nil {
		return ManagedClustersUpdateTagsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *managedClustersUpdateTagsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *managedClustersUpdateTagsPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ManagedClustersUpdateTagsResponse, error) {
	respType := ManagedClustersUpdateTagsResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ManagedCluster)
	if err != nil {
		return ManagedClustersUpdateTagsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PrivateEndpointConnectionsDeletePoller provides polling facilities until the operation reaches a terminal state.
type PrivateEndpointConnectionsDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateEndpointConnectionsDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateEndpointConnectionsDeleteResponse, error)
}

type privateEndpointConnectionsDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *privateEndpointConnectionsDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *privateEndpointConnectionsDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *privateEndpointConnectionsDeletePoller) FinalResponse(ctx context.Context) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PrivateEndpointConnectionsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateEndpointConnectionsDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateEndpointConnectionsDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return PrivateEndpointConnectionsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
