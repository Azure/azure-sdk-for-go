// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// WidgetManagerServer is a fake server for instances of the azmanager.WidgetManagerClient type.
type WidgetManagerServer struct {
	// WidgetManagerWidgetsServer contains the fakes for client WidgetManagerWidgetsClient
	WidgetManagerWidgetsServer WidgetManagerWidgetsServer
}

// NewWidgetManagerServerTransport creates a new instance of WidgetManagerServerTransport with the provided implementation.
// The returned WidgetManagerServerTransport instance is connected to an instance of azmanager.WidgetManagerClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWidgetManagerServerTransport(srv *WidgetManagerServer) *WidgetManagerServerTransport {
	return &WidgetManagerServerTransport{srv: srv}
}

// WidgetManagerServerTransport connects instances of azmanager.WidgetManagerClient to instances of WidgetManagerServer.
// Don't use this type directly, use NewWidgetManagerServerTransport instead.
type WidgetManagerServerTransport struct {
	srv                          *WidgetManagerServer
	trMu                         sync.Mutex
	trWidgetManagerWidgetsServer *WidgetManagerWidgetsServerTransport
}

// Do implements the policy.Transporter interface for WidgetManagerServerTransport.
func (w *WidgetManagerServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return w.dispatchToClientFake(req, method[:strings.Index(method, ".")])
}

func (w *WidgetManagerServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "WidgetManagerWidgetsClient":
		initServer(&w.trMu, &w.trWidgetManagerWidgetsServer, func() *WidgetManagerWidgetsServerTransport {
			return NewWidgetManagerWidgetsServerTransport(&w.srv.WidgetManagerWidgetsServer)
		})
		resp, err = w.trWidgetManagerWidgetsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

// set this to conditionally intercept incoming requests to WidgetManagerServerTransport
var widgetManagerServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
