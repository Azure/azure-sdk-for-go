// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/contosowidget/azmanager"
	"net/http"
	"net/url"
	"regexp"
)

// WidgetManagerWidgetsServer is a fake server for instances of the azmanager.WidgetManagerWidgetsClient type.
type WidgetManagerWidgetsServer struct {
	// BeginCreateOrUpdateWidget is the fake for method WidgetManagerWidgetsClient.BeginCreateOrUpdateWidget
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateWidget func(ctx context.Context, widgetName string, resource azmanager.WidgetSuite, options *azmanager.BeginCreateOrUpdateWidgetOptions) (resp azfake.PollerResponder[azmanager.CreateOrUpdateWidgetResponse], errResp azfake.ErrorResponder)

	// BeginDeleteWidget is the fake for method WidgetManagerWidgetsClient.BeginDeleteWidget
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginDeleteWidget func(ctx context.Context, widgetName string, options *azmanager.BeginDeleteWidgetOptions) (resp azfake.PollerResponder[azmanager.DeleteWidgetResponse], errResp azfake.ErrorResponder)

	// GetWidget is the fake for method WidgetManagerWidgetsClient.GetWidget
	// HTTP status codes to indicate success: http.StatusOK
	GetWidget func(ctx context.Context, widgetName string, options *azmanager.GetWidgetOptions) (resp azfake.Responder[azmanager.GetWidgetResponse], errResp azfake.ErrorResponder)

	// GetWidgetOperationStatus is the fake for method WidgetManagerWidgetsClient.GetWidgetOperationStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetWidgetOperationStatus func(ctx context.Context, widgetName string, operationID string, options *azmanager.GetWidgetOperationStatusOptions) (resp azfake.Responder[azmanager.GetWidgetOperationStatusResponse], errResp azfake.ErrorResponder)

	// NewListWidgetsPager is the fake for method WidgetManagerWidgetsClient.NewListWidgetsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListWidgetsPager func(options *azmanager.ListWidgetsOptions) (resp azfake.PagerResponder[azmanager.ListWidgetsResponse])
}

// NewWidgetManagerWidgetsServerTransport creates a new instance of WidgetManagerWidgetsServerTransport with the provided implementation.
// The returned WidgetManagerWidgetsServerTransport instance is connected to an instance of azmanager.WidgetManagerWidgetsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWidgetManagerWidgetsServerTransport(srv *WidgetManagerWidgetsServer) *WidgetManagerWidgetsServerTransport {
	return &WidgetManagerWidgetsServerTransport{
		srv:                       srv,
		beginCreateOrUpdateWidget: newTracker[azfake.PollerResponder[azmanager.CreateOrUpdateWidgetResponse]](),
		beginDeleteWidget:         newTracker[azfake.PollerResponder[azmanager.DeleteWidgetResponse]](),
		newListWidgetsPager:       newTracker[azfake.PagerResponder[azmanager.ListWidgetsResponse]](),
	}
}

// WidgetManagerWidgetsServerTransport connects instances of azmanager.WidgetManagerWidgetsClient to instances of WidgetManagerWidgetsServer.
// Don't use this type directly, use NewWidgetManagerWidgetsServerTransport instead.
type WidgetManagerWidgetsServerTransport struct {
	srv                       *WidgetManagerWidgetsServer
	beginCreateOrUpdateWidget *tracker[azfake.PollerResponder[azmanager.CreateOrUpdateWidgetResponse]]
	beginDeleteWidget         *tracker[azfake.PollerResponder[azmanager.DeleteWidgetResponse]]
	newListWidgetsPager       *tracker[azfake.PagerResponder[azmanager.ListWidgetsResponse]]
}

// Do implements the policy.Transporter interface for WidgetManagerWidgetsServerTransport.
func (w *WidgetManagerWidgetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return w.dispatchToMethodFake(req, method)
}

func (w *WidgetManagerWidgetsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if widgetManagerWidgetsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = widgetManagerWidgetsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "WidgetManagerWidgetsClient.BeginCreateOrUpdateWidget":
				res.resp, res.err = w.dispatchBeginCreateOrUpdateWidget(req)
			case "WidgetManagerWidgetsClient.BeginDeleteWidget":
				res.resp, res.err = w.dispatchBeginDeleteWidget(req)
			case "WidgetManagerWidgetsClient.GetWidget":
				res.resp, res.err = w.dispatchGetWidget(req)
			case "WidgetManagerWidgetsClient.GetWidgetOperationStatus":
				res.resp, res.err = w.dispatchGetWidgetOperationStatus(req)
			case "WidgetManagerWidgetsClient.NewListWidgetsPager":
				res.resp, res.err = w.dispatchNewListWidgetsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (w *WidgetManagerWidgetsServerTransport) dispatchBeginCreateOrUpdateWidget(req *http.Request) (*http.Response, error) {
	if w.srv.BeginCreateOrUpdateWidget == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateWidget not implemented")}
	}
	beginCreateOrUpdateWidget := w.beginCreateOrUpdateWidget.get(req)
	if beginCreateOrUpdateWidget == nil {
		const regexStr = `/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[azmanager.WidgetSuite](req)
		if err != nil {
			return nil, err
		}
		widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginCreateOrUpdateWidget(req.Context(), widgetNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateWidget = &respr
		w.beginCreateOrUpdateWidget.add(req, beginCreateOrUpdateWidget)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateWidget, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		w.beginCreateOrUpdateWidget.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateWidget) {
		w.beginCreateOrUpdateWidget.remove(req)
	}

	return resp, nil
}

func (w *WidgetManagerWidgetsServerTransport) dispatchBeginDeleteWidget(req *http.Request) (*http.Response, error) {
	if w.srv.BeginDeleteWidget == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteWidget not implemented")}
	}
	beginDeleteWidget := w.beginDeleteWidget.get(req)
	if beginDeleteWidget == nil {
		const regexStr = `/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginDeleteWidget(req.Context(), widgetNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteWidget = &respr
		w.beginDeleteWidget.add(req, beginDeleteWidget)
	}

	resp, err := server.PollerResponderNext(beginDeleteWidget, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		w.beginDeleteWidget.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteWidget) {
		w.beginDeleteWidget.remove(req)
	}

	return resp, nil
}

func (w *WidgetManagerWidgetsServerTransport) dispatchGetWidget(req *http.Request) (*http.Response, error) {
	if w.srv.GetWidget == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWidget not implemented")}
	}
	const regexStr = `/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetWidget(req.Context(), widgetNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WidgetSuite, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WidgetManagerWidgetsServerTransport) dispatchGetWidgetOperationStatus(req *http.Request) (*http.Response, error) {
	if w.srv.GetWidgetOperationStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetWidgetOperationStatus not implemented")}
	}
	const regexStr = `/widgets/(?P<widgetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	widgetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("widgetName")])
	if err != nil {
		return nil, err
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.GetWidgetOperationStatus(req.Context(), widgetNameParam, operationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ResourceOperationStatusWidgetSuiteWidgetSuiteError, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WidgetManagerWidgetsServerTransport) dispatchNewListWidgetsPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListWidgetsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListWidgetsPager not implemented")}
	}
	newListWidgetsPager := w.newListWidgetsPager.get(req)
	if newListWidgetsPager == nil {
		resp := w.srv.NewListWidgetsPager(nil)
		newListWidgetsPager = &resp
		w.newListWidgetsPager.add(req, newListWidgetsPager)
		server.PagerResponderInjectNextLinks(newListWidgetsPager, req, func(page *azmanager.ListWidgetsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListWidgetsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListWidgetsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListWidgetsPager) {
		w.newListWidgetsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to WidgetManagerWidgetsServerTransport
var widgetManagerWidgetsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
