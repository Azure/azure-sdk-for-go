// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azmanager

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WidgetManagerWidgetsClient contains the methods for the WidgetManagerWidgets group.
// Don't use this type directly, use [WidgetManagerClient.NewWidgetManagerWidgetsClient] instead.
type WidgetManagerWidgetsClient struct {
	internal *azcore.Client
	endpoint string
}

// BeginCreateOrUpdateWidget - Creates or updates a Widget asynchronously.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - widgetName - The widget name.
//   - resource - The resource instance.
//   - options - BeginCreateOrUpdateWidgetOptions contains the optional parameters for the WidgetManagerWidgetsClient.BeginCreateOrUpdateWidget
//     method.
func (client *WidgetManagerWidgetsClient) BeginCreateOrUpdateWidget(ctx context.Context, widgetName string, resource WidgetSuite, options *BeginCreateOrUpdateWidgetOptions) (*runtime.Poller[CreateOrUpdateWidgetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdateWidget(ctx, widgetName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CreateOrUpdateWidgetResponse]{
			OperationLocationResultPath: "result",
			Tracer:                      client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CreateOrUpdateWidgetResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdateWidget - Creates or updates a Widget asynchronously.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
func (client *WidgetManagerWidgetsClient) createOrUpdateWidget(ctx context.Context, widgetName string, resource WidgetSuite, options *BeginCreateOrUpdateWidgetOptions) (*http.Response, error) {
	var err error
	const operationName = "WidgetManagerWidgetsClient.BeginCreateOrUpdateWidget"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateWidgetCreateRequest(ctx, widgetName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateWidgetCreateRequest creates the CreateOrUpdateWidget request.
func (client *WidgetManagerWidgetsClient) createOrUpdateWidgetCreateRequest(ctx context.Context, widgetName string, resource WidgetSuite, _ *BeginCreateOrUpdateWidgetOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets/{widgetName}"
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/merge-patch+json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDeleteWidget - Delete a Widget asynchronously.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - widgetName - The widget name.
//   - options - BeginDeleteWidgetOptions contains the optional parameters for the WidgetManagerWidgetsClient.BeginDeleteWidget
//     method.
func (client *WidgetManagerWidgetsClient) BeginDeleteWidget(ctx context.Context, widgetName string, options *BeginDeleteWidgetOptions) (*runtime.Poller[DeleteWidgetResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteWidget(ctx, widgetName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DeleteWidgetResponse]{
			OperationLocationResultPath: "result",
			Tracer:                      client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DeleteWidgetResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteWidget - Delete a Widget asynchronously.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
func (client *WidgetManagerWidgetsClient) deleteWidget(ctx context.Context, widgetName string, options *BeginDeleteWidgetOptions) (*http.Response, error) {
	var err error
	const operationName = "WidgetManagerWidgetsClient.BeginDeleteWidget"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteWidgetCreateRequest(ctx, widgetName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteWidgetCreateRequest creates the DeleteWidget request.
func (client *WidgetManagerWidgetsClient) deleteWidgetCreateRequest(ctx context.Context, widgetName string, _ *BeginDeleteWidgetOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets/{widgetName}"
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// GetWidget - Fetch a Widget by name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - widgetName - The widget name.
//   - options - GetWidgetOptions contains the optional parameters for the WidgetManagerWidgetsClient.GetWidget method.
func (client *WidgetManagerWidgetsClient) GetWidget(ctx context.Context, widgetName string, options *GetWidgetOptions) (GetWidgetResponse, error) {
	var err error
	const operationName = "WidgetManagerWidgetsClient.GetWidget"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWidgetCreateRequest(ctx, widgetName, options)
	if err != nil {
		return GetWidgetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetWidgetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetWidgetResponse{}, err
	}
	resp, err := client.getWidgetHandleResponse(httpResp)
	return resp, err
}

// getWidgetCreateRequest creates the GetWidget request.
func (client *WidgetManagerWidgetsClient) getWidgetCreateRequest(ctx context.Context, widgetName string, _ *GetWidgetOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets/{widgetName}"
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWidgetHandleResponse handles the GetWidget response.
func (client *WidgetManagerWidgetsClient) getWidgetHandleResponse(resp *http.Response) (GetWidgetResponse, error) {
	result := GetWidgetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WidgetSuite); err != nil {
		return GetWidgetResponse{}, err
	}
	return result, nil
}

// GetWidgetOperationStatus - Gets status of a Widget operation.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-11-01-preview
//   - widgetName - The widget name.
//   - operationID - The unique ID of the operation.
//   - options - GetWidgetOperationStatusOptions contains the optional parameters for the WidgetManagerWidgetsClient.GetWidgetOperationStatus
//     method.
func (client *WidgetManagerWidgetsClient) GetWidgetOperationStatus(ctx context.Context, widgetName string, operationID string, options *GetWidgetOperationStatusOptions) (GetWidgetOperationStatusResponse, error) {
	var err error
	const operationName = "WidgetManagerWidgetsClient.GetWidgetOperationStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getWidgetOperationStatusCreateRequest(ctx, widgetName, operationID, options)
	if err != nil {
		return GetWidgetOperationStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GetWidgetOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GetWidgetOperationStatusResponse{}, err
	}
	resp, err := client.getWidgetOperationStatusHandleResponse(httpResp)
	return resp, err
}

// getWidgetOperationStatusCreateRequest creates the GetWidgetOperationStatus request.
func (client *WidgetManagerWidgetsClient) getWidgetOperationStatusCreateRequest(ctx context.Context, widgetName string, operationID string, _ *GetWidgetOperationStatusOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets/{widgetName}/operations/{operationId}"
	if widgetName == "" {
		return nil, errors.New("parameter widgetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{widgetName}", url.PathEscape(widgetName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getWidgetOperationStatusHandleResponse handles the GetWidgetOperationStatus response.
func (client *WidgetManagerWidgetsClient) getWidgetOperationStatusHandleResponse(resp *http.Response) (GetWidgetOperationStatusResponse, error) {
	result := GetWidgetOperationStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceOperationStatusWidgetSuiteWidgetSuiteError); err != nil {
		return GetWidgetOperationStatusResponse{}, err
	}
	return result, nil
}

// NewListWidgetsPager - List Widget resources
//
// Generated from API version 2022-11-01-preview
//   - options - ListWidgetsOptions contains the optional parameters for the WidgetManagerWidgetsClient.NewListWidgetsPager method.
func (client *WidgetManagerWidgetsClient) NewListWidgetsPager(options *ListWidgetsOptions) *runtime.Pager[ListWidgetsResponse] {
	return runtime.NewPager(runtime.PagingHandler[ListWidgetsResponse]{
		More: func(page ListWidgetsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ListWidgetsResponse) (ListWidgetsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WidgetManagerWidgetsClient.NewListWidgetsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listWidgetsCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ListWidgetsResponse{}, err
			}
			return client.listWidgetsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listWidgetsCreateRequest creates the ListWidgets request.
func (client *WidgetManagerWidgetsClient) listWidgetsCreateRequest(ctx context.Context, _ *ListWidgetsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/widgets"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listWidgetsHandleResponse handles the ListWidgets response.
func (client *WidgetManagerWidgetsClient) listWidgetsHandleResponse(resp *http.Response) (ListWidgetsResponse, error) {
	result := ListWidgetsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedWidgetSuite); err != nil {
		return ListWidgetsResponse{}, err
	}
	return result, nil
}
