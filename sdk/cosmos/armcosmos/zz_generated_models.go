// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

type APIProperties struct {
	// Describes the ServerVersion of an a MongoDB account.
	ServerVersion *ServerVersion `json:"serverVersion,omitempty"`
}

// ARMProxyResource - The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
type ARMProxyResource struct {
	// READ-ONLY; The unique resource identifier of the database account.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the database account.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ARMResourceProperties - The core properties of ARM resources.
type ARMResourceProperties struct {
	// The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).
	// A maximum of 15 tags can be provided for a
	// resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a
	// template type is set with "defaultExperience":
	// "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The unique resource identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ARMResourceProperties.
func (a ARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := a.marshalInternal()
	return json.Marshal(objectMap)
}

func (a ARMResourceProperties) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return objectMap
}

// AnalyticalStorageConfiguration - Analytical storage specific properties.
type AnalyticalStorageConfiguration struct {
	// Describes the types of schema for analytical storage.
	SchemaType *AnalyticalStorageSchemaType `json:"schemaType,omitempty"`
}

// AutoUpgradePolicyResource - Cosmos DB resource auto-upgrade policy
type AutoUpgradePolicyResource struct {
	// Represents throughput policy which service must adhere to for auto-upgrade
	ThroughputPolicy *ThroughputPolicyResource `json:"throughputPolicy,omitempty"`
}

type AutoscaleSettings struct {
	// Represents maximum throughput, the resource can scale up to.
	MaxThroughput *int32 `json:"maxThroughput,omitempty"`
}

// AutoscaleSettingsResource - Cosmos DB provisioned throughput settings object
type AutoscaleSettingsResource struct {
	// REQUIRED; Represents maximum throughput container can scale up to.
	MaxThroughput *int32 `json:"maxThroughput,omitempty"`

	// Cosmos DB resource auto-upgrade policy
	AutoUpgradePolicy *AutoUpgradePolicyResource `json:"autoUpgradePolicy,omitempty"`

	// READ-ONLY; Represents target maximum throughput container can scale up to once offer is no longer in pending state.
	TargetMaxThroughput *int32 `json:"targetMaxThroughput,omitempty" azure:"ro"`
}

// BackupInformation - Backup information of a resource.
type BackupInformation struct {
	// READ-ONLY; Information about the status of continuous backups.
	ContinuousBackupInformation *ContinuousBackupInformation `json:"continuousBackupInformation,omitempty" azure:"ro"`
}

// BackupPolicyClassification provides polymorphic access to related types.
// Call the interface's GetBackupPolicy() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BackupPolicy, *ContinuousModeBackupPolicy, *PeriodicModeBackupPolicy
type BackupPolicyClassification interface {
	// GetBackupPolicy returns the BackupPolicy content of the underlying type.
	GetBackupPolicy() *BackupPolicy
}

// BackupPolicy - The object representing the policy for taking backups on an account.
type BackupPolicy struct {
	// REQUIRED; Describes the mode of backups.
	Type *BackupPolicyType `json:"type,omitempty"`

	// The object representing the state of the migration between the backup policies.
	MigrationState *BackupPolicyMigrationState `json:"migrationState,omitempty"`
}

// GetBackupPolicy implements the BackupPolicyClassification interface for type BackupPolicy.
func (b *BackupPolicy) GetBackupPolicy() *BackupPolicy { return b }

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupPolicy.
func (b *BackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BackupPolicy) marshalInternal(discValue BackupPolicyType) map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "migrationState", b.MigrationState)
	b.Type = &discValue
	objectMap["type"] = b.Type
	return objectMap
}

func (b *BackupPolicy) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationState":
			err = unpopulate(val, &b.MigrationState)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BackupPolicyMigrationState - The object representing the state of the migration between the backup policies.
type BackupPolicyMigrationState struct {
	// Time at which the backup policy migration started (ISO-8601 format).
	StartTime *time.Time `json:"startTime,omitempty"`

	// Describes the status of migration between backup policy types.
	Status *BackupPolicyMigrationStatus `json:"status,omitempty"`

	// Describes the target backup policy type of the backup policy migration.
	TargetType *BackupPolicyType `json:"targetType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupPolicyMigrationState.
func (b BackupPolicyMigrationState) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "startTime", (*timeRFC3339)(b.StartTime))
	populate(objectMap, "status", b.Status)
	populate(objectMap, "targetType", b.TargetType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupPolicyMigrationState.
func (b *BackupPolicyMigrationState) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &b.Status)
			delete(rawMsg, key)
		case "targetType":
			err = unpopulate(val, &b.TargetType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Capability - Cosmos DB capability object
type Capability struct {
	// Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".
	Name *string `json:"name,omitempty"`
}

// CassandraKeyspaceCreateUpdateParameters - Parameters to create and update Cosmos DB Cassandra keyspace.
type CassandraKeyspaceCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB Cassandra keyspace.
	Properties *CassandraKeyspaceCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceCreateUpdateParameters.
func (c CassandraKeyspaceCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := c.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CassandraKeyspaceCreateUpdateProperties - Properties to create and update Azure Cosmos DB Cassandra keyspace.
type CassandraKeyspaceCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a Cassandra keyspace
	Resource *CassandraKeyspaceResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// CassandraKeyspaceGetProperties - The properties of an Azure Cosmos DB Cassandra keyspace
type CassandraKeyspaceGetProperties struct {
	Options  *CassandraKeyspaceGetPropertiesOptions  `json:"options,omitempty"`
	Resource *CassandraKeyspaceGetPropertiesResource `json:"resource,omitempty"`
}

type CassandraKeyspaceGetPropertiesOptions struct {
	OptionsResource
}

type CassandraKeyspaceGetPropertiesResource struct {
	CassandraKeyspaceResource
	ExtendedResourceProperties
}

// CassandraKeyspaceGetResults - An Azure Cosmos DB Cassandra keyspace.
type CassandraKeyspaceGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB Cassandra keyspace
	Properties *CassandraKeyspaceGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceGetResults.
func (c CassandraKeyspaceGetResults) MarshalJSON() ([]byte, error) {
	objectMap := c.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CassandraKeyspaceListResult - The List operation response, that contains the Cassandra keyspaces and their properties.
type CassandraKeyspaceListResult struct {
	// READ-ONLY; List of Cassandra keyspaces and their properties.
	Value []*CassandraKeyspaceGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceListResult.
func (c CassandraKeyspaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CassandraKeyspaceResource - Cosmos DB Cassandra keyspace resource object
type CassandraKeyspaceResource struct {
	// REQUIRED; Name of the Cosmos DB Cassandra keyspace
	ID *string `json:"id,omitempty"`
}

// CassandraPartitionKey - Cosmos DB Cassandra table partition key
type CassandraPartitionKey struct {
	// Name of the Cosmos DB Cassandra table partition key
	Name *string `json:"name,omitempty"`
}

// CassandraResourcesBeginCreateUpdateCassandraKeyspaceOptions contains the optional parameters for the CassandraResources.BeginCreateUpdateCassandraKeyspace
// method.
type CassandraResourcesBeginCreateUpdateCassandraKeyspaceOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginCreateUpdateCassandraTableOptions contains the optional parameters for the CassandraResources.BeginCreateUpdateCassandraTable
// method.
type CassandraResourcesBeginCreateUpdateCassandraTableOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginDeleteCassandraKeyspaceOptions contains the optional parameters for the CassandraResources.BeginDeleteCassandraKeyspace method.
type CassandraResourcesBeginDeleteCassandraKeyspaceOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginDeleteCassandraTableOptions contains the optional parameters for the CassandraResources.BeginDeleteCassandraTable method.
type CassandraResourcesBeginDeleteCassandraTableOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginMigrateCassandraKeyspaceToAutoscaleOptions contains the optional parameters for the CassandraResources.BeginMigrateCassandraKeyspaceToAutoscale
// method.
type CassandraResourcesBeginMigrateCassandraKeyspaceToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginMigrateCassandraKeyspaceToManualThroughputOptions contains the optional parameters for the CassandraResources.BeginMigrateCassandraKeyspaceToManualThroughput
// method.
type CassandraResourcesBeginMigrateCassandraKeyspaceToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginMigrateCassandraTableToAutoscaleOptions contains the optional parameters for the CassandraResources.BeginMigrateCassandraTableToAutoscale
// method.
type CassandraResourcesBeginMigrateCassandraTableToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginMigrateCassandraTableToManualThroughputOptions contains the optional parameters for the CassandraResources.BeginMigrateCassandraTableToManualThroughput
// method.
type CassandraResourcesBeginMigrateCassandraTableToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginUpdateCassandraKeyspaceThroughputOptions contains the optional parameters for the CassandraResources.BeginUpdateCassandraKeyspaceThroughput
// method.
type CassandraResourcesBeginUpdateCassandraKeyspaceThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesBeginUpdateCassandraTableThroughputOptions contains the optional parameters for the CassandraResources.BeginUpdateCassandraTableThroughput
// method.
type CassandraResourcesBeginUpdateCassandraTableThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesGetCassandraKeyspaceOptions contains the optional parameters for the CassandraResources.GetCassandraKeyspace method.
type CassandraResourcesGetCassandraKeyspaceOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesGetCassandraKeyspaceThroughputOptions contains the optional parameters for the CassandraResources.GetCassandraKeyspaceThroughput method.
type CassandraResourcesGetCassandraKeyspaceThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesGetCassandraTableOptions contains the optional parameters for the CassandraResources.GetCassandraTable method.
type CassandraResourcesGetCassandraTableOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesGetCassandraTableThroughputOptions contains the optional parameters for the CassandraResources.GetCassandraTableThroughput method.
type CassandraResourcesGetCassandraTableThroughputOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesListCassandraKeyspacesOptions contains the optional parameters for the CassandraResources.ListCassandraKeyspaces method.
type CassandraResourcesListCassandraKeyspacesOptions struct {
	// placeholder for future optional parameters
}

// CassandraResourcesListCassandraTablesOptions contains the optional parameters for the CassandraResources.ListCassandraTables method.
type CassandraResourcesListCassandraTablesOptions struct {
	// placeholder for future optional parameters
}

// CassandraSchema - Cosmos DB Cassandra table schema
type CassandraSchema struct {
	// List of cluster key.
	ClusterKeys []*ClusterKey `json:"clusterKeys,omitempty"`

	// List of Cassandra table columns.
	Columns []*Column `json:"columns,omitempty"`

	// List of partition key.
	PartitionKeys []*CassandraPartitionKey `json:"partitionKeys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraSchema.
func (c CassandraSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterKeys", c.ClusterKeys)
	populate(objectMap, "columns", c.Columns)
	populate(objectMap, "partitionKeys", c.PartitionKeys)
	return json.Marshal(objectMap)
}

// CassandraTableCreateUpdateParameters - Parameters to create and update Cosmos DB Cassandra table.
type CassandraTableCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB Cassandra table.
	Properties *CassandraTableCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableCreateUpdateParameters.
func (c CassandraTableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := c.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CassandraTableCreateUpdateProperties - Properties to create and update Azure Cosmos DB Cassandra table.
type CassandraTableCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a Cassandra table
	Resource *CassandraTableResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// CassandraTableGetProperties - The properties of an Azure Cosmos DB Cassandra table
type CassandraTableGetProperties struct {
	Options  *CassandraTableGetPropertiesOptions  `json:"options,omitempty"`
	Resource *CassandraTableGetPropertiesResource `json:"resource,omitempty"`
}

type CassandraTableGetPropertiesOptions struct {
	OptionsResource
}

type CassandraTableGetPropertiesResource struct {
	CassandraTableResource
	ExtendedResourceProperties
}

// CassandraTableGetResults - An Azure Cosmos DB Cassandra table.
type CassandraTableGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB Cassandra table
	Properties *CassandraTableGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableGetResults.
func (c CassandraTableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := c.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CassandraTableListResult - The List operation response, that contains the Cassandra tables and their properties.
type CassandraTableListResult struct {
	// READ-ONLY; List of Cassandra tables and their properties.
	Value []*CassandraTableGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableListResult.
func (c CassandraTableListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CassandraTableResource - Cosmos DB Cassandra table resource object
type CassandraTableResource struct {
	// REQUIRED; Name of the Cosmos DB Cassandra table
	ID *string `json:"id,omitempty"`

	// Analytical TTL.
	AnalyticalStorageTTL *int32 `json:"analyticalStorageTtl,omitempty"`

	// Time to live of the Cosmos DB Cassandra table
	DefaultTTL *int32 `json:"defaultTtl,omitempty"`

	// Schema of the Cosmos DB Cassandra table
	Schema *CassandraSchema `json:"schema,omitempty"`
}

// CloudError - An error response from the service.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// Error Response.
	InnerError *ErrorResponse `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// ClusterKey - Cosmos DB Cassandra table cluster key
type ClusterKey struct {
	// Name of the Cosmos DB Cassandra table cluster key
	Name *string `json:"name,omitempty"`

	// Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"
	OrderBy *string `json:"orderBy,omitempty"`
}

// CollectionListMetricDefinitionsOptions contains the optional parameters for the Collection.ListMetricDefinitions method.
type CollectionListMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// CollectionListMetricsOptions contains the optional parameters for the Collection.ListMetrics method.
type CollectionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// CollectionListUsagesOptions contains the optional parameters for the Collection.ListUsages method.
type CollectionListUsagesOptions struct {
	// An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of
	// multiple names).
	Filter *string
}

// CollectionPartitionListMetricsOptions contains the optional parameters for the CollectionPartition.ListMetrics method.
type CollectionPartitionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// CollectionPartitionListUsagesOptions contains the optional parameters for the CollectionPartition.ListUsages method.
type CollectionPartitionListUsagesOptions struct {
	// An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of
	// multiple names).
	Filter *string
}

// CollectionPartitionRegionListMetricsOptions contains the optional parameters for the CollectionPartitionRegion.ListMetrics method.
type CollectionPartitionRegionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// CollectionRegionListMetricsOptions contains the optional parameters for the CollectionRegion.ListMetrics method.
type CollectionRegionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// Column - Cosmos DB Cassandra table column
type Column struct {
	// Name of the Cosmos DB Cassandra table column
	Name *string `json:"name,omitempty"`

	// Type of the Cosmos DB Cassandra table column
	Type *string `json:"type,omitempty"`
}

type Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

type CompositePath struct {
	// Sort order for composite paths.
	Order *CompositePathSortOrder `json:"order,omitempty"`

	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

// ConflictResolutionPolicy - The conflict resolution policy for the container.
type ConflictResolutionPolicy struct {
	// The conflict resolution path in the case of LastWriterWins mode.
	ConflictResolutionPath *string `json:"conflictResolutionPath,omitempty"`

	// The procedure to resolve conflicts in the case of custom mode.
	ConflictResolutionProcedure *string `json:"conflictResolutionProcedure,omitempty"`

	// Indicates the conflict resolution mode.
	Mode *ConflictResolutionMode `json:"mode,omitempty"`
}

// ConsistencyPolicy - The consistency policy for the Cosmos DB database account.
type ConsistencyPolicy struct {
	// REQUIRED; The default consistency level and configuration settings of the Cosmos DB account.
	DefaultConsistencyLevel *DefaultConsistencyLevel `json:"defaultConsistencyLevel,omitempty"`

	// When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for
	// this value is 5 - 86400. Required when
	// defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxIntervalInSeconds *int32 `json:"maxIntervalInSeconds,omitempty"`

	// When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is
	// 1 – 2,147,483,647. Required when
	// defaultConsistencyPolicy is set to 'BoundedStaleness'.
	MaxStalenessPrefix *int64 `json:"maxStalenessPrefix,omitempty"`
}

// ContainerPartitionKey - The configuration of the partition key to be used for partitioning data into multiple partitions
type ContainerPartitionKey struct {
	// Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
	Kind *PartitionKind `json:"kind,omitempty"`

	// List of paths using which data within the container can be partitioned
	Paths []*string `json:"paths,omitempty"`

	// Indicates the version of the partition key definition
	Version *int32 `json:"version,omitempty"`

	// READ-ONLY; Indicates if the container is using a system generated partition key
	SystemKey *bool `json:"systemKey,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerPartitionKey.
func (c ContainerPartitionKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "paths", c.Paths)
	populate(objectMap, "systemKey", c.SystemKey)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// ContinuousBackupInformation - Information about the status of continuous backups.
type ContinuousBackupInformation struct {
	// The latest restorable timestamp for a resource.
	LatestRestorableTimestamp *string `json:"latestRestorableTimestamp,omitempty"`
}

// ContinuousBackupRestoreLocation - Properties of the regional restorable account.
type ContinuousBackupRestoreLocation struct {
	// The name of the continuous backup restore location.
	Location *string `json:"location,omitempty"`
}

// ContinuousModeBackupPolicy - The object representing continuous mode backup policy.
type ContinuousModeBackupPolicy struct {
	BackupPolicy
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousModeBackupPolicy.
func (c ContinuousModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := c.BackupPolicy.marshalInternal(BackupPolicyTypeContinuous)
	return json.Marshal(objectMap)
}

// CorsPolicy - The CORS policy for the Cosmos DB database account.
type CorsPolicy struct {
	// REQUIRED; The origin domains that are permitted to make a request against the service via CORS.
	AllowedOrigins *string `json:"allowedOrigins,omitempty"`

	// The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `json:"allowedHeaders,omitempty"`

	// The methods (HTTP request verbs) that the origin domain may use for a CORS request.
	AllowedMethods *string `json:"allowedMethods,omitempty"`

	// The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `json:"exposedHeaders,omitempty"`

	// The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int64 `json:"maxAgeInSeconds,omitempty"`
}

// CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput"
type CreateUpdateOptions struct {
	// Specifies the Autoscale settings.
	AutoscaleSettings *AutoscaleSettings `json:"autoscaleSettings,omitempty"`

	// Request Units per second. For example, "throughput": 10000.
	Throughput *int32 `json:"throughput,omitempty"`
}

// DatabaseAccountConnectionString - Connection string for the Cosmos DB account
type DatabaseAccountConnectionString struct {
	// READ-ONLY; Value of the connection string
	ConnectionString *string `json:"connectionString,omitempty" azure:"ro"`

	// READ-ONLY; Description of the connection string
	Description *string `json:"description,omitempty" azure:"ro"`
}

// DatabaseAccountCreateUpdateParameters - Parameters to create and update Cosmos DB database accounts.
type DatabaseAccountCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB database accounts.
	Properties *DatabaseAccountCreateUpdateProperties `json:"properties,omitempty"`

	// Identity for the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Indicates the type of database account. This can only be set at database account creation.
	Kind *DatabaseAccountKind `json:"kind,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateParameters.
func (d DatabaseAccountCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := d.ARMResourceProperties.marshalInternal()
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DatabaseAccountCreateUpdateProperties - Properties to create and update Azure Cosmos DB database accounts.
type DatabaseAccountCreateUpdateProperties struct {
	// REQUIRED; The offer type for the database
	DatabaseAccountOfferType *string `json:"databaseAccountOfferType,omitempty"`

	// REQUIRED; An array that contains the georeplication locations enabled for the Cosmos DB account.
	Locations []*Location `json:"locations,omitempty"`

	// API specific properties. Currently, supported only for MongoDB API.
	APIProperties *APIProperties `json:"apiProperties,omitempty"`

	// Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration `json:"analyticalStorageConfiguration,omitempty"`

	// The object representing the policy for taking backups on an account.
	BackupPolicy BackupPolicyClassification `json:"backupPolicy,omitempty"`

	// List of Cosmos DB capabilities for the account
	Capabilities []*Capability `json:"capabilities,omitempty"`

	// The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer *ConnectorOffer `json:"connectorOffer,omitempty"`

	// The consistency policy for the Cosmos DB account.
	ConsistencyPolicy *ConsistencyPolicy `json:"consistencyPolicy,omitempty"`

	// The CORS policy for the Cosmos DB database account.
	Cors []*CorsPolicy `json:"cors,omitempty"`

	// Enum to indicate the mode of account creation.
	CreateMode *CreateMode `json:"createMode,omitempty"`

	// The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users.
	// It can be "FirstPartyIdentity",
	// "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	// Disable write operations on metadata resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a
	// new write region for the account and is chosen
	// based on the failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	// Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	// Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	// Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	// List of IpRules.
	IPRules []*IPAddressOrRange `json:"ipRules,omitempty"`

	// Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	// The URI of the key vault
	KeyVaultKeyURI *string `json:"keyVaultKeyUri,omitempty"`

	// Indicates what services are allowed to bypass firewall checks.
	NetworkACLBypass *NetworkACLBypass `json:"networkAclBypass,omitempty"`

	// An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.
	NetworkACLBypassResourceIDs []*string `json:"networkAclBypassResourceIds,omitempty"`

	// Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// Parameters to indicate the information about the restore.
	RestoreParameters *RestoreParameters `json:"restoreParameters,omitempty"`

	// List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules []*VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d DatabaseAccountCreateUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d *DatabaseAccountCreateUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DatabaseAccountGetProperties - Properties for the database account.
type DatabaseAccountGetProperties struct {
	// API specific properties.
	APIProperties *APIProperties `json:"apiProperties,omitempty"`

	// Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration `json:"analyticalStorageConfiguration,omitempty"`

	// The object representing the policy for taking backups on an account.
	BackupPolicy BackupPolicyClassification `json:"backupPolicy,omitempty"`

	// List of Cosmos DB capabilities for the account
	Capabilities []*Capability `json:"capabilities,omitempty"`

	// The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer *ConnectorOffer `json:"connectorOffer,omitempty"`

	// The consistency policy for the Cosmos DB database account.
	ConsistencyPolicy *ConsistencyPolicy `json:"consistencyPolicy,omitempty"`

	// The CORS policy for the Cosmos DB database account.
	Cors []*CorsPolicy `json:"cors,omitempty"`

	// Enum to indicate the mode of account creation.
	CreateMode *CreateMode `json:"createMode,omitempty"`

	// The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users.
	// It can be "FirstPartyIdentity",
	// "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	// Disable write operations on metadata resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a
	// new write region for the account and is chosen
	// based on the failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	// Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	// Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	// Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	// List of IpRules.
	IPRules []*IPAddressOrRange `json:"ipRules,omitempty"`

	// Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	// The URI of the key vault
	KeyVaultKeyURI *string `json:"keyVaultKeyUri,omitempty"`

	// Indicates what services are allowed to bypass firewall checks.
	NetworkACLBypass *NetworkACLBypass `json:"networkAclBypass,omitempty"`

	// An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.
	NetworkACLBypassResourceIDs []*string `json:"networkAclBypassResourceIds,omitempty"`

	// Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// Parameters to indicate the information about the restore.
	RestoreParameters *RestoreParameters `json:"restoreParameters,omitempty"`

	// List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules []*VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`

	// READ-ONLY; The offer type for the Cosmos DB database account. Default value: Standard.
	DatabaseAccountOfferType *string `json:"databaseAccountOfferType,omitempty" azure:"ro"`

	// READ-ONLY; The connection endpoint for the Cosmos DB database account.
	DocumentEndpoint *string `json:"documentEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; An array that contains the regions ordered by their failover priorities.
	FailoverPolicies []*FailoverPolicy `json:"failoverPolicies,omitempty" azure:"ro"`

	// READ-ONLY; A unique identifier assigned to the database account
	InstanceID *string `json:"instanceId,omitempty" azure:"ro"`

	// READ-ONLY; An array that contains all of the locations enabled for the Cosmos DB account.
	Locations []*Location `json:"locations,omitempty" azure:"ro"`

	// READ-ONLY; List of Private Endpoint Connections configured for the Cosmos DB account.
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account
	// is being created. When an account is in Creating state,
	// only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for
	// use. 'Updating' – the Cosmos DB account is being
	// updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account
	// deletion failed.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; An array that contains of the read locations enabled for the Cosmos DB account.
	ReadLocations []*Location `json:"readLocations,omitempty" azure:"ro"`

	// READ-ONLY; An array that contains the write location for the Cosmos DB account.
	WriteLocations []*Location `json:"writeLocations,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetProperties.
func (d DatabaseAccountGetProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "documentEndpoint", d.DocumentEndpoint)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "failoverPolicies", d.FailoverPolicies)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "instanceId", d.InstanceID)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "privateEndpointConnections", d.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "readLocations", d.ReadLocations)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	populate(objectMap, "writeLocations", d.WriteLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountGetProperties.
func (d *DatabaseAccountGetProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "documentEndpoint":
			err = unpopulate(val, &d.DocumentEndpoint)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "failoverPolicies":
			err = unpopulate(val, &d.FailoverPolicies)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "instanceId":
			err = unpopulate(val, &d.InstanceID)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &d.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "readLocations":
			err = unpopulate(val, &d.ReadLocations)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		case "writeLocations":
			err = unpopulate(val, &d.WriteLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DatabaseAccountGetResults - An Azure Cosmos DB database account.
type DatabaseAccountGetResults struct {
	ARMResourceProperties
	// Identity for the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Indicates the type of database account. This can only be set at database account creation.
	Kind *DatabaseAccountKind `json:"kind,omitempty"`

	// Properties for the database account.
	Properties *DatabaseAccountGetProperties `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetResults.
func (d DatabaseAccountGetResults) MarshalJSON() ([]byte, error) {
	objectMap := d.ARMResourceProperties.marshalInternal()
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// DatabaseAccountListConnectionStringsResult - The connection strings for the given database account.
type DatabaseAccountListConnectionStringsResult struct {
	// An array that contains the connection strings for the Cosmos DB account.
	ConnectionStrings []*DatabaseAccountConnectionString `json:"connectionStrings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountListConnectionStringsResult.
func (d DatabaseAccountListConnectionStringsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionStrings", d.ConnectionStrings)
	return json.Marshal(objectMap)
}

// DatabaseAccountListKeysResult - The access keys for the given database account.
type DatabaseAccountListKeysResult struct {
	DatabaseAccountListReadOnlyKeysResult
	// READ-ONLY; Base 64 encoded value of the primary read-write key.
	PrimaryMasterKey *string `json:"primaryMasterKey,omitempty" azure:"ro"`

	// READ-ONLY; Base 64 encoded value of the secondary read-write key.
	SecondaryMasterKey *string `json:"secondaryMasterKey,omitempty" azure:"ro"`
}

// DatabaseAccountListReadOnlyKeysResult - The read-only access keys for the given database account.
type DatabaseAccountListReadOnlyKeysResult struct {
	// READ-ONLY; Base 64 encoded value of the primary read-only key.
	PrimaryReadonlyMasterKey *string `json:"primaryReadonlyMasterKey,omitempty" azure:"ro"`

	// READ-ONLY; Base 64 encoded value of the secondary read-only key.
	SecondaryReadonlyMasterKey *string `json:"secondaryReadonlyMasterKey,omitempty" azure:"ro"`
}

// DatabaseAccountRegenerateKeyParameters - Parameters to regenerate the keys within the database account.
type DatabaseAccountRegenerateKeyParameters struct {
	// REQUIRED; The access key to regenerate.
	KeyKind *KeyKind `json:"keyKind,omitempty"`
}

// DatabaseAccountRegionListMetricsOptions contains the optional parameters for the DatabaseAccountRegion.ListMetrics method.
type DatabaseAccountRegionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountUpdateParameters - Parameters for patching Azure Cosmos DB database account properties.
type DatabaseAccountUpdateParameters struct {
	// Identity for the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// Properties to update Azure Cosmos DB database accounts.
	Properties *DatabaseAccountUpdateProperties `json:"properties,omitempty"`

	// Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).
	// A maximum of 15 tags can be provided for a
	// resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a
	// template type is set with "defaultExperience":
	// "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateParameters.
func (d DatabaseAccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DatabaseAccountUpdateProperties - Properties to update Azure Cosmos DB database accounts.
type DatabaseAccountUpdateProperties struct {
	// API specific properties. Currently, supported only for MongoDB API.
	APIProperties *APIProperties `json:"apiProperties,omitempty"`

	// Analytical storage specific properties.
	AnalyticalStorageConfiguration *AnalyticalStorageConfiguration `json:"analyticalStorageConfiguration,omitempty"`

	// The object representing the policy for taking backups on an account.
	BackupPolicy BackupPolicyClassification `json:"backupPolicy,omitempty"`

	// List of Cosmos DB capabilities for the account
	Capabilities []*Capability `json:"capabilities,omitempty"`

	// The cassandra connector offer type for the Cosmos DB database C* account.
	ConnectorOffer *ConnectorOffer `json:"connectorOffer,omitempty"`

	// The consistency policy for the Cosmos DB account.
	ConsistencyPolicy *ConsistencyPolicy `json:"consistencyPolicy,omitempty"`

	// The CORS policy for the Cosmos DB database account.
	Cors []*CorsPolicy `json:"cors,omitempty"`

	// The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users.
	// It can be "FirstPartyIdentity",
	// "SystemAssignedIdentity" and more.
	DefaultIdentity *string `json:"defaultIdentity,omitempty"`

	// Disable write operations on metadata resources (databases, containers, throughput) via account keys
	DisableKeyBasedMetadataWriteAccess *bool `json:"disableKeyBasedMetadataWriteAccess,omitempty"`

	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Flag to indicate whether to enable storage analytics.
	EnableAnalyticalStorage *bool `json:"enableAnalyticalStorage,omitempty"`

	// Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a
	// new write region for the account and is chosen
	// based on the failover priorities configured for the account.
	EnableAutomaticFailover *bool `json:"enableAutomaticFailover,omitempty"`

	// Enables the cassandra connector on the Cosmos DB C* account
	EnableCassandraConnector *bool `json:"enableCassandraConnector,omitempty"`

	// Flag to indicate whether Free Tier is enabled.
	EnableFreeTier *bool `json:"enableFreeTier,omitempty"`

	// Enables the account to write in multiple locations
	EnableMultipleWriteLocations *bool `json:"enableMultipleWriteLocations,omitempty"`

	// List of IpRules.
	IPRules []*IPAddressOrRange `json:"ipRules,omitempty"`

	// Flag to indicate whether to enable/disable Virtual Network ACL rules.
	IsVirtualNetworkFilterEnabled *bool `json:"isVirtualNetworkFilterEnabled,omitempty"`

	// The URI of the key vault
	KeyVaultKeyURI *string `json:"keyVaultKeyUri,omitempty"`

	// An array that contains the georeplication locations enabled for the Cosmos DB account.
	Locations []*Location `json:"locations,omitempty"`

	// Indicates what services are allowed to bypass firewall checks.
	NetworkACLBypass *NetworkACLBypass `json:"networkAclBypass,omitempty"`

	// An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.
	NetworkACLBypassResourceIDs []*string `json:"networkAclBypassResourceIds,omitempty"`

	// Whether requests from Public Network are allowed
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// List of Virtual Network ACL rules configured for the Cosmos DB account.
	VirtualNetworkRules []*VirtualNetworkRule `json:"virtualNetworkRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateProperties.
func (d DatabaseAccountUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountUpdateProperties.
func (d *DatabaseAccountUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DatabaseAccountsBeginCreateOrUpdateOptions contains the optional parameters for the DatabaseAccounts.BeginCreateOrUpdate method.
type DatabaseAccountsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginDeleteOptions contains the optional parameters for the DatabaseAccounts.BeginDelete method.
type DatabaseAccountsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginFailoverPriorityChangeOptions contains the optional parameters for the DatabaseAccounts.BeginFailoverPriorityChange method.
type DatabaseAccountsBeginFailoverPriorityChangeOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginOfflineRegionOptions contains the optional parameters for the DatabaseAccounts.BeginOfflineRegion method.
type DatabaseAccountsBeginOfflineRegionOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginOnlineRegionOptions contains the optional parameters for the DatabaseAccounts.BeginOnlineRegion method.
type DatabaseAccountsBeginOnlineRegionOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginRegenerateKeyOptions contains the optional parameters for the DatabaseAccounts.BeginRegenerateKey method.
type DatabaseAccountsBeginRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsBeginUpdateOptions contains the optional parameters for the DatabaseAccounts.BeginUpdate method.
type DatabaseAccountsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsCheckNameExistsOptions contains the optional parameters for the DatabaseAccounts.CheckNameExists method.
type DatabaseAccountsCheckNameExistsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsGetOptions contains the optional parameters for the DatabaseAccounts.Get method.
type DatabaseAccountsGetOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsGetReadOnlyKeysOptions contains the optional parameters for the DatabaseAccounts.GetReadOnlyKeys method.
type DatabaseAccountsGetReadOnlyKeysOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListByResourceGroupOptions contains the optional parameters for the DatabaseAccounts.ListByResourceGroup method.
type DatabaseAccountsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListConnectionStringsOptions contains the optional parameters for the DatabaseAccounts.ListConnectionStrings method.
type DatabaseAccountsListConnectionStringsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListKeysOptions contains the optional parameters for the DatabaseAccounts.ListKeys method.
type DatabaseAccountsListKeysOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListMetricDefinitionsOptions contains the optional parameters for the DatabaseAccounts.ListMetricDefinitions method.
type DatabaseAccountsListMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListMetricsOptions contains the optional parameters for the DatabaseAccounts.ListMetrics method.
type DatabaseAccountsListMetricsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListOptions contains the optional parameters for the DatabaseAccounts.List method.
type DatabaseAccountsListOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListReadOnlyKeysOptions contains the optional parameters for the DatabaseAccounts.ListReadOnlyKeys method.
type DatabaseAccountsListReadOnlyKeysOptions struct {
	// placeholder for future optional parameters
}

// DatabaseAccountsListResult - The List operation response, that contains the database accounts and their properties.
type DatabaseAccountsListResult struct {
	// READ-ONLY; List of database account and their properties.
	Value []*DatabaseAccountGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountsListResult.
func (d DatabaseAccountsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DatabaseAccountsListUsagesOptions contains the optional parameters for the DatabaseAccounts.ListUsages method.
type DatabaseAccountsListUsagesOptions struct {
	// An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of
	// multiple names).
	Filter *string
}

// DatabaseListMetricDefinitionsOptions contains the optional parameters for the Database.ListMetricDefinitions method.
type DatabaseListMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseListMetricsOptions contains the optional parameters for the Database.ListMetrics method.
type DatabaseListMetricsOptions struct {
	// placeholder for future optional parameters
}

// DatabaseListUsagesOptions contains the optional parameters for the Database.ListUsages method.
type DatabaseListUsagesOptions struct {
	// An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of
	// multiple names).
	Filter *string
}

// DatabaseRestoreResource - Specific Databases to restore.
type DatabaseRestoreResource struct {
	// The names of the collections available for restore.
	CollectionNames []*string `json:"collectionNames,omitempty"`

	// The name of the database available for restore.
	DatabaseName *string `json:"databaseName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseRestoreResource.
func (d DatabaseRestoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "collectionNames", d.CollectionNames)
	populate(objectMap, "databaseName", d.DatabaseName)
	return json.Marshal(objectMap)
}

// ErrorResponse - Error Response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Error code.
	Code *string `json:"code,omitempty"`

	// Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

type ExcludedPath struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

// ExtendedResourceProperties - The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs.
type ExtendedResourceProperties struct {
	// READ-ONLY; A system generated property representing the resource etag required for optimistic concurrency control.
	Etag *string `json:"_etag,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property that denotes the last updated timestamp of the resource.
	Ts *float32 `json:"_ts,omitempty" azure:"ro"`
}

// FailoverPolicies - The list of new failover policies for the failover priority change.
type FailoverPolicies struct {
	// REQUIRED; List of failover policies.
	FailoverPolicies []*FailoverPolicy `json:"failoverPolicies,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FailoverPolicies.
func (f FailoverPolicies) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "failoverPolicies", f.FailoverPolicies)
	return json.Marshal(objectMap)
}

// FailoverPolicy - The failover policy for a given region of a database account.
type FailoverPolicy struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of
	// regions - 1). Failover priority values must be
	// unique for each of the regions in which the database account exists.
	FailoverPriority *int32 `json:"failoverPriority,omitempty"`

	// The name of the region in which the database account exists.
	LocationName *string `json:"locationName,omitempty"`

	// READ-ONLY; The unique identifier of the region in which the database account replicates to. Example: <accountName>-<locationName>.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// GremlinDatabaseCreateUpdateParameters - Parameters to create and update Cosmos DB Gremlin database.
type GremlinDatabaseCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB Gremlin database.
	Properties *GremlinDatabaseCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseCreateUpdateParameters.
func (g GremlinDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := g.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GremlinDatabaseCreateUpdateProperties - Properties to create and update Azure Cosmos DB Gremlin database.
type GremlinDatabaseCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a Gremlin database
	Resource *GremlinDatabaseResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// GremlinDatabaseGetProperties - The properties of an Azure Cosmos DB SQL database
type GremlinDatabaseGetProperties struct {
	Options  *GremlinDatabaseGetPropertiesOptions  `json:"options,omitempty"`
	Resource *GremlinDatabaseGetPropertiesResource `json:"resource,omitempty"`
}

type GremlinDatabaseGetPropertiesOptions struct {
	OptionsResource
}

type GremlinDatabaseGetPropertiesResource struct {
	ExtendedResourceProperties
	GremlinDatabaseResource
}

// GremlinDatabaseGetResults - An Azure Cosmos DB Gremlin database.
type GremlinDatabaseGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB SQL database
	Properties *GremlinDatabaseGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseGetResults.
func (g GremlinDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := g.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GremlinDatabaseListResult - The List operation response, that contains the Gremlin databases and their properties.
type GremlinDatabaseListResult struct {
	// READ-ONLY; List of Gremlin databases and their properties.
	Value []*GremlinDatabaseGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseListResult.
func (g GremlinDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// GremlinDatabaseResource - Cosmos DB Gremlin database resource object
type GremlinDatabaseResource struct {
	// REQUIRED; Name of the Cosmos DB Gremlin database
	ID *string `json:"id,omitempty"`
}

// GremlinGraphCreateUpdateParameters - Parameters to create and update Cosmos DB Gremlin graph.
type GremlinGraphCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB Gremlin graph.
	Properties *GremlinGraphCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphCreateUpdateParameters.
func (g GremlinGraphCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := g.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GremlinGraphCreateUpdateProperties - Properties to create and update Azure Cosmos DB Gremlin graph.
type GremlinGraphCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a Gremlin graph
	Resource *GremlinGraphResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// GremlinGraphGetProperties - The properties of an Azure Cosmos DB Gremlin graph
type GremlinGraphGetProperties struct {
	Options  *GremlinGraphGetPropertiesOptions  `json:"options,omitempty"`
	Resource *GremlinGraphGetPropertiesResource `json:"resource,omitempty"`
}

type GremlinGraphGetPropertiesOptions struct {
	OptionsResource
}

type GremlinGraphGetPropertiesResource struct {
	ExtendedResourceProperties
	GremlinGraphResource
}

// GremlinGraphGetResults - An Azure Cosmos DB Gremlin graph.
type GremlinGraphGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB Gremlin graph
	Properties *GremlinGraphGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphGetResults.
func (g GremlinGraphGetResults) MarshalJSON() ([]byte, error) {
	objectMap := g.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GremlinGraphListResult - The List operation response, that contains the graphs and their properties.
type GremlinGraphListResult struct {
	// READ-ONLY; List of graphs and their properties.
	Value []*GremlinGraphGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphListResult.
func (g GremlinGraphListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// GremlinGraphResource - Cosmos DB Gremlin graph resource object
type GremlinGraphResource struct {
	// REQUIRED; Name of the Cosmos DB Gremlin graph
	ID *string `json:"id,omitempty"`

	// The conflict resolution policy for the graph.
	ConflictResolutionPolicy *ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	// Default time to live
	DefaultTTL *int32 `json:"defaultTtl,omitempty"`

	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `json:"partitionKey,omitempty"`

	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `json:"uniqueKeyPolicy,omitempty"`
}

// GremlinResourcesBeginCreateUpdateGremlinDatabaseOptions contains the optional parameters for the GremlinResources.BeginCreateUpdateGremlinDatabase method.
type GremlinResourcesBeginCreateUpdateGremlinDatabaseOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginCreateUpdateGremlinGraphOptions contains the optional parameters for the GremlinResources.BeginCreateUpdateGremlinGraph method.
type GremlinResourcesBeginCreateUpdateGremlinGraphOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginDeleteGremlinDatabaseOptions contains the optional parameters for the GremlinResources.BeginDeleteGremlinDatabase method.
type GremlinResourcesBeginDeleteGremlinDatabaseOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginDeleteGremlinGraphOptions contains the optional parameters for the GremlinResources.BeginDeleteGremlinGraph method.
type GremlinResourcesBeginDeleteGremlinGraphOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginMigrateGremlinDatabaseToAutoscaleOptions contains the optional parameters for the GremlinResources.BeginMigrateGremlinDatabaseToAutoscale
// method.
type GremlinResourcesBeginMigrateGremlinDatabaseToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginMigrateGremlinDatabaseToManualThroughputOptions contains the optional parameters for the GremlinResources.BeginMigrateGremlinDatabaseToManualThroughput
// method.
type GremlinResourcesBeginMigrateGremlinDatabaseToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginMigrateGremlinGraphToAutoscaleOptions contains the optional parameters for the GremlinResources.BeginMigrateGremlinGraphToAutoscale
// method.
type GremlinResourcesBeginMigrateGremlinGraphToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginMigrateGremlinGraphToManualThroughputOptions contains the optional parameters for the GremlinResources.BeginMigrateGremlinGraphToManualThroughput
// method.
type GremlinResourcesBeginMigrateGremlinGraphToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginUpdateGremlinDatabaseThroughputOptions contains the optional parameters for the GremlinResources.BeginUpdateGremlinDatabaseThroughput
// method.
type GremlinResourcesBeginUpdateGremlinDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesBeginUpdateGremlinGraphThroughputOptions contains the optional parameters for the GremlinResources.BeginUpdateGremlinGraphThroughput
// method.
type GremlinResourcesBeginUpdateGremlinGraphThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesGetGremlinDatabaseOptions contains the optional parameters for the GremlinResources.GetGremlinDatabase method.
type GremlinResourcesGetGremlinDatabaseOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesGetGremlinDatabaseThroughputOptions contains the optional parameters for the GremlinResources.GetGremlinDatabaseThroughput method.
type GremlinResourcesGetGremlinDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesGetGremlinGraphOptions contains the optional parameters for the GremlinResources.GetGremlinGraph method.
type GremlinResourcesGetGremlinGraphOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesGetGremlinGraphThroughputOptions contains the optional parameters for the GremlinResources.GetGremlinGraphThroughput method.
type GremlinResourcesGetGremlinGraphThroughputOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesListGremlinDatabasesOptions contains the optional parameters for the GremlinResources.ListGremlinDatabases method.
type GremlinResourcesListGremlinDatabasesOptions struct {
	// placeholder for future optional parameters
}

// GremlinResourcesListGremlinGraphsOptions contains the optional parameters for the GremlinResources.ListGremlinGraphs method.
type GremlinResourcesListGremlinGraphsOptions struct {
	// placeholder for future optional parameters
}

// IPAddressOrRange - IpAddressOrRange object
type IPAddressOrRange struct {
	// A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following
	// ranges: 10.0.0.0/8, 100.64.0.0/10,
	// 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”.
	IPAddressOrRange *string `json:"ipAddressOrRange,omitempty"`
}

// IncludedPath - The paths that are included in indexing
type IncludedPath struct {
	// List of indexes for this path
	Indexes []*Indexes `json:"indexes,omitempty"`

	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IncludedPath.
func (i IncludedPath) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "indexes", i.Indexes)
	populate(objectMap, "path", i.Path)
	return json.Marshal(objectMap)
}

// Indexes - The indexes for the path.
type Indexes struct {
	// The datatype for which the indexing behavior is applied to.
	DataType *DataType `json:"dataType,omitempty"`

	// Indicates the type of index.
	Kind *IndexKind `json:"kind,omitempty"`

	// The precision of the index. -1 is maximum precision.
	Precision *int32 `json:"precision,omitempty"`
}

// IndexingPolicy - Cosmos DB indexing policy
type IndexingPolicy struct {
	// Indicates if the indexing policy is automatic
	Automatic *bool `json:"automatic,omitempty"`

	// List of composite path list
	CompositeIndexes [][]*CompositePath `json:"compositeIndexes,omitempty"`

	// List of paths to exclude from indexing
	ExcludedPaths []*ExcludedPath `json:"excludedPaths,omitempty"`

	// List of paths to include in the indexing
	IncludedPaths []*IncludedPath `json:"includedPaths,omitempty"`

	// Indicates the indexing mode.
	IndexingMode *IndexingMode `json:"indexingMode,omitempty"`

	// List of spatial specifics
	SpatialIndexes []*SpatialSpec `json:"spatialIndexes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IndexingPolicy.
func (i IndexingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "automatic", i.Automatic)
	populate(objectMap, "compositeIndexes", i.CompositeIndexes)
	populate(objectMap, "excludedPaths", i.ExcludedPaths)
	populate(objectMap, "includedPaths", i.IncludedPaths)
	populate(objectMap, "indexingMode", i.IndexingMode)
	populate(objectMap, "spatialIndexes", i.SpatialIndexes)
	return json.Marshal(objectMap)
}

// Location - A region in which the Azure Cosmos DB database account is deployed.
type Location struct {
	// The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of
	// regions - 1). Failover priority values must be
	// unique for each of the regions in which the database account exists.
	FailoverPriority *int32 `json:"failoverPriority,omitempty"`

	// Flag to indicate whether or not this region is an AvailabilityZone region
	IsZoneRedundant *bool `json:"isZoneRedundant,omitempty"`

	// The name of the region.
	LocationName *string `json:"locationName,omitempty"`

	// READ-ONLY; The connection endpoint for the specific region. Example: https://<accountName>-<locationName>.documents.azure.com:443/
	DocumentEndpoint *string `json:"documentEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; The unique identifier of the region within the database account. Example: <accountName>-<locationName>.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account
	// is being created. When an account is in Creating state,
	// only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for
	// use. 'Updating' – the Cosmos DB account is being
	// updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account
	// deletion failed.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// ManagedServiceIdentity - Identity for the resource.
type ManagedServiceIdentity struct {
	// The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned
	// identities. The type 'None' will remove any
	// identities from the service.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// Metric data
type Metric struct {
	// READ-ONLY; The end time for the metric (ISO-8601 format).
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The metric values for the specified time window and timestep.
	MetricValues []*MetricValue `json:"metricValues,omitempty" azure:"ro"`

	// READ-ONLY; The name information for the metric.
	Name *MetricName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The start time for the metric (ISO-8601 format).
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The time grain to be used to summarize the metric values.
	TimeGrain *string `json:"timeGrain,omitempty" azure:"ro"`

	// READ-ONLY; The unit of the metric.
	Unit *UnitType `json:"unit,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Metric.
func (m Metric) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Metric.
func (m *Metric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m Metric) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(m.EndTime))
	populate(objectMap, "metricValues", m.MetricValues)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "startTime", (*timeRFC3339)(m.StartTime))
	populate(objectMap, "timeGrain", m.TimeGrain)
	populate(objectMap, "unit", m.Unit)
	return objectMap
}

func (m *Metric) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, &m.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &m.Name)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &m.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &m.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MetricAvailability - The availability of the metric.
type MetricAvailability struct {
	// READ-ONLY; The retention for the metric values.
	Retention *string `json:"retention,omitempty" azure:"ro"`

	// READ-ONLY; The time grain to be used to summarize the metric values.
	TimeGrain *string `json:"timeGrain,omitempty" azure:"ro"`
}

// MetricDefinition - The definition of a metric.
type MetricDefinition struct {
	// READ-ONLY; The list of metric availabilities for the account.
	MetricAvailabilities []*MetricAvailability `json:"metricAvailabilities,omitempty" azure:"ro"`

	// READ-ONLY; The name information for the metric.
	Name *MetricName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The primary aggregation type of the metric.
	PrimaryAggregationType *PrimaryAggregationType `json:"primaryAggregationType,omitempty" azure:"ro"`

	// READ-ONLY; The resource uri of the database.
	ResourceURI *string `json:"resourceUri,omitempty" azure:"ro"`

	// READ-ONLY; The unit of the metric.
	Unit *UnitType `json:"unit,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricDefinition.
func (m MetricDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metricAvailabilities", m.MetricAvailabilities)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "primaryAggregationType", m.PrimaryAggregationType)
	populate(objectMap, "resourceUri", m.ResourceURI)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MetricDefinitionsListResult - The response to a list metric definitions request.
type MetricDefinitionsListResult struct {
	// READ-ONLY; The list of metric definitions for the account.
	Value []*MetricDefinition `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricDefinitionsListResult.
func (m MetricDefinitionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MetricListResult - The response to a list metrics request.
type MetricListResult struct {
	// READ-ONLY; The list of metrics for the account.
	Value []*Metric `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricListResult.
func (m MetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MetricName - A metric name.
type MetricName struct {
	// READ-ONLY; The friendly name of the metric.
	LocalizedValue *string `json:"localizedValue,omitempty" azure:"ro"`

	// READ-ONLY; The name of the metric.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// MetricValue - Represents metrics values.
type MetricValue struct {
	// READ-ONLY; The average value of the metric.
	Average *float64 `json:"average,omitempty" azure:"ro"`

	// READ-ONLY; The number of values for the metric.
	Count *int32 `json:"_count,omitempty" azure:"ro"`

	// READ-ONLY; The max value of the metric.
	Maximum *float64 `json:"maximum,omitempty" azure:"ro"`

	// READ-ONLY; The min value of the metric.
	Minimum *float64 `json:"minimum,omitempty" azure:"ro"`

	// READ-ONLY; The metric timestamp (ISO-8601 format).
	Timestamp *time.Time `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; The total value of the metric.
	Total *float64 `json:"total,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricValue.
func (m MetricValue) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MetricValue.
func (m *MetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return m.unmarshalInternal(rawMsg)
}

func (m MetricValue) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "average", m.Average)
	populate(objectMap, "_count", m.Count)
	populate(objectMap, "maximum", m.Maximum)
	populate(objectMap, "minimum", m.Minimum)
	populate(objectMap, "timestamp", (*timeRFC3339)(m.Timestamp))
	populate(objectMap, "total", m.Total)
	return objectMap
}

func (m *MetricValue) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "average":
			err = unpopulate(val, &m.Average)
			delete(rawMsg, key)
		case "_count":
			err = unpopulate(val, &m.Count)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, &m.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, &m.Minimum)
			delete(rawMsg, key)
		case "timestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.Timestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &m.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MongoDBCollectionCreateUpdateParameters - Parameters to create and update Cosmos DB MongoDB collection.
type MongoDBCollectionCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB MongoDB collection.
	Properties *MongoDBCollectionCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionCreateUpdateParameters.
func (m MongoDBCollectionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := m.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MongoDBCollectionCreateUpdateProperties - Properties to create and update Azure Cosmos DB MongoDB collection.
type MongoDBCollectionCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a MongoDB collection
	Resource *MongoDBCollectionResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// MongoDBCollectionGetProperties - The properties of an Azure Cosmos DB MongoDB collection
type MongoDBCollectionGetProperties struct {
	Options  *MongoDBCollectionGetPropertiesOptions  `json:"options,omitempty"`
	Resource *MongoDBCollectionGetPropertiesResource `json:"resource,omitempty"`
}

type MongoDBCollectionGetPropertiesOptions struct {
	OptionsResource
}

type MongoDBCollectionGetPropertiesResource struct {
	ExtendedResourceProperties
	MongoDBCollectionResource
}

// MongoDBCollectionGetResults - An Azure Cosmos DB MongoDB collection.
type MongoDBCollectionGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB MongoDB collection
	Properties *MongoDBCollectionGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionGetResults.
func (m MongoDBCollectionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := m.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MongoDBCollectionListResult - The List operation response, that contains the MongoDB collections and their properties.
type MongoDBCollectionListResult struct {
	// READ-ONLY; List of MongoDB collections and their properties.
	Value []*MongoDBCollectionGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionListResult.
func (m MongoDBCollectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MongoDBCollectionResource - Cosmos DB MongoDB collection resource object
type MongoDBCollectionResource struct {
	// REQUIRED; Name of the Cosmos DB MongoDB collection
	ID *string `json:"id,omitempty"`

	// Analytical TTL.
	AnalyticalStorageTTL *int32 `json:"analyticalStorageTtl,omitempty"`

	// List of index keys
	Indexes []*MongoIndex `json:"indexes,omitempty"`

	// A key-value pair of shard keys to be applied for the request.
	ShardKey map[string]*string `json:"shardKey,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionResource.
func (m MongoDBCollectionResource) MarshalJSON() ([]byte, error) {
	objectMap := m.marshalInternal()
	return json.Marshal(objectMap)
}

func (m MongoDBCollectionResource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analyticalStorageTtl", m.AnalyticalStorageTTL)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "indexes", m.Indexes)
	populate(objectMap, "shardKey", m.ShardKey)
	return objectMap
}

// MongoDBDatabaseCreateUpdateParameters - Parameters to create and update Cosmos DB MongoDB database.
type MongoDBDatabaseCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB MongoDB database.
	Properties *MongoDBDatabaseCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseCreateUpdateParameters.
func (m MongoDBDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := m.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MongoDBDatabaseCreateUpdateProperties - Properties to create and update Azure Cosmos DB MongoDB database.
type MongoDBDatabaseCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a MongoDB database
	Resource *MongoDBDatabaseResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// MongoDBDatabaseGetProperties - The properties of an Azure Cosmos DB MongoDB database
type MongoDBDatabaseGetProperties struct {
	Options  *MongoDBDatabaseGetPropertiesOptions  `json:"options,omitempty"`
	Resource *MongoDBDatabaseGetPropertiesResource `json:"resource,omitempty"`
}

type MongoDBDatabaseGetPropertiesOptions struct {
	OptionsResource
}

type MongoDBDatabaseGetPropertiesResource struct {
	ExtendedResourceProperties
	MongoDBDatabaseResource
}

// MongoDBDatabaseGetResults - An Azure Cosmos DB MongoDB database.
type MongoDBDatabaseGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB MongoDB database
	Properties *MongoDBDatabaseGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseGetResults.
func (m MongoDBDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := m.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MongoDBDatabaseListResult - The List operation response, that contains the MongoDB databases and their properties.
type MongoDBDatabaseListResult struct {
	// READ-ONLY; List of MongoDB databases and their properties.
	Value []*MongoDBDatabaseGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseListResult.
func (m MongoDBDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MongoDBDatabaseResource - Cosmos DB MongoDB database resource object
type MongoDBDatabaseResource struct {
	// REQUIRED; Name of the Cosmos DB MongoDB database
	ID *string `json:"id,omitempty"`
}

// MongoDBResourcesBeginCreateUpdateMongoDBCollectionOptions contains the optional parameters for the MongoDBResources.BeginCreateUpdateMongoDBCollection
// method.
type MongoDBResourcesBeginCreateUpdateMongoDBCollectionOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginCreateUpdateMongoDBDatabaseOptions contains the optional parameters for the MongoDBResources.BeginCreateUpdateMongoDBDatabase method.
type MongoDBResourcesBeginCreateUpdateMongoDBDatabaseOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginDeleteMongoDBCollectionOptions contains the optional parameters for the MongoDBResources.BeginDeleteMongoDBCollection method.
type MongoDBResourcesBeginDeleteMongoDBCollectionOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginDeleteMongoDBDatabaseOptions contains the optional parameters for the MongoDBResources.BeginDeleteMongoDBDatabase method.
type MongoDBResourcesBeginDeleteMongoDBDatabaseOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginMigrateMongoDBCollectionToAutoscaleOptions contains the optional parameters for the MongoDBResources.BeginMigrateMongoDBCollectionToAutoscale
// method.
type MongoDBResourcesBeginMigrateMongoDBCollectionToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginMigrateMongoDBCollectionToManualThroughputOptions contains the optional parameters for the MongoDBResources.BeginMigrateMongoDBCollectionToManualThroughput
// method.
type MongoDBResourcesBeginMigrateMongoDBCollectionToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginMigrateMongoDBDatabaseToAutoscaleOptions contains the optional parameters for the MongoDBResources.BeginMigrateMongoDBDatabaseToAutoscale
// method.
type MongoDBResourcesBeginMigrateMongoDBDatabaseToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginMigrateMongoDBDatabaseToManualThroughputOptions contains the optional parameters for the MongoDBResources.BeginMigrateMongoDBDatabaseToManualThroughput
// method.
type MongoDBResourcesBeginMigrateMongoDBDatabaseToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginUpdateMongoDBCollectionThroughputOptions contains the optional parameters for the MongoDBResources.BeginUpdateMongoDBCollectionThroughput
// method.
type MongoDBResourcesBeginUpdateMongoDBCollectionThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesBeginUpdateMongoDBDatabaseThroughputOptions contains the optional parameters for the MongoDBResources.BeginUpdateMongoDBDatabaseThroughput
// method.
type MongoDBResourcesBeginUpdateMongoDBDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesGetMongoDBCollectionOptions contains the optional parameters for the MongoDBResources.GetMongoDBCollection method.
type MongoDBResourcesGetMongoDBCollectionOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesGetMongoDBCollectionThroughputOptions contains the optional parameters for the MongoDBResources.GetMongoDBCollectionThroughput method.
type MongoDBResourcesGetMongoDBCollectionThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesGetMongoDBDatabaseOptions contains the optional parameters for the MongoDBResources.GetMongoDBDatabase method.
type MongoDBResourcesGetMongoDBDatabaseOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesGetMongoDBDatabaseThroughputOptions contains the optional parameters for the MongoDBResources.GetMongoDBDatabaseThroughput method.
type MongoDBResourcesGetMongoDBDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesListMongoDBCollectionsOptions contains the optional parameters for the MongoDBResources.ListMongoDBCollections method.
type MongoDBResourcesListMongoDBCollectionsOptions struct {
	// placeholder for future optional parameters
}

// MongoDBResourcesListMongoDBDatabasesOptions contains the optional parameters for the MongoDBResources.ListMongoDBDatabases method.
type MongoDBResourcesListMongoDBDatabasesOptions struct {
	// placeholder for future optional parameters
}

// MongoIndex - Cosmos DB MongoDB collection index key
type MongoIndex struct {
	// Cosmos DB MongoDB collection index keys
	Key *MongoIndexKeys `json:"key,omitempty"`

	// Cosmos DB MongoDB collection index key options
	Options *MongoIndexOptions `json:"options,omitempty"`
}

// MongoIndexKeys - Cosmos DB MongoDB collection resource object
type MongoIndexKeys struct {
	// List of keys for each MongoDB collection in the Azure Cosmos DB service
	Keys []*string `json:"keys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MongoIndexKeys.
func (m MongoIndexKeys) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "keys", m.Keys)
	return json.Marshal(objectMap)
}

// MongoIndexOptions - Cosmos DB MongoDB collection index options
type MongoIndexOptions struct {
	// Expire after seconds
	ExpireAfterSeconds *int32 `json:"expireAfterSeconds,omitempty"`

	// Is unique or not
	Unique *bool `json:"unique,omitempty"`
}

// NotebookWorkspace - A notebook workspace resource
type NotebookWorkspace struct {
	ARMProxyResource
	// Resource properties.
	Properties *NotebookWorkspaceProperties `json:"properties,omitempty"`
}

// NotebookWorkspaceConnectionInfoResult - The connection info for the given notebook workspace
type NotebookWorkspaceConnectionInfoResult struct {
	// READ-ONLY; Specifies auth token used for connecting to Notebook server (uses token-based auth).
	AuthToken *string `json:"authToken,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the endpoint of Notebook server.
	NotebookServerEndpoint *string `json:"notebookServerEndpoint,omitempty" azure:"ro"`
}

// NotebookWorkspaceCreateUpdateParameters - Parameters to create a notebook workspace resource
type NotebookWorkspaceCreateUpdateParameters struct {
	ARMProxyResource
}

// NotebookWorkspaceListResult - A list of notebook workspace resources
type NotebookWorkspaceListResult struct {
	// Array of notebook workspace resources
	Value []*NotebookWorkspace `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotebookWorkspaceListResult.
func (n NotebookWorkspaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NotebookWorkspaceProperties - Properties of a notebook workspace resource.
type NotebookWorkspaceProperties struct {
	// READ-ONLY; Specifies the endpoint of Notebook server.
	NotebookServerEndpoint *string `json:"notebookServerEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// NotebookWorkspacesBeginCreateOrUpdateOptions contains the optional parameters for the NotebookWorkspaces.BeginCreateOrUpdate method.
type NotebookWorkspacesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesBeginDeleteOptions contains the optional parameters for the NotebookWorkspaces.BeginDelete method.
type NotebookWorkspacesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesBeginRegenerateAuthTokenOptions contains the optional parameters for the NotebookWorkspaces.BeginRegenerateAuthToken method.
type NotebookWorkspacesBeginRegenerateAuthTokenOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesBeginStartOptions contains the optional parameters for the NotebookWorkspaces.BeginStart method.
type NotebookWorkspacesBeginStartOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesGetOptions contains the optional parameters for the NotebookWorkspaces.Get method.
type NotebookWorkspacesGetOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesListByDatabaseAccountOptions contains the optional parameters for the NotebookWorkspaces.ListByDatabaseAccount method.
type NotebookWorkspacesListByDatabaseAccountOptions struct {
	// placeholder for future optional parameters
}

// NotebookWorkspacesListConnectionInfoOptions contains the optional parameters for the NotebookWorkspaces.ListConnectionInfo method.
type NotebookWorkspacesListConnectionInfoOptions struct {
	// placeholder for future optional parameters
}

// Operation - REST API operation
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// Description of operation
	Description *string `json:"Description,omitempty"`

	// Operation type: Read, write, delete, etc.
	Operation *string `json:"Operation,omitempty"`

	// Service provider: Microsoft.ResourceProvider
	Provider *string `json:"Provider,omitempty"`

	// Resource on which the operation is performed: Profile, endpoint, etc.
	Resource *string `json:"Resource,omitempty"`
}

// OperationListResult - Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set
// of results.
type OperationListResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of operations supported by the Resource Provider.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// OptionsResource - Cosmos DB options resource object
type OptionsResource struct {
	// Specifies the Autoscale settings.
	AutoscaleSettings *AutoscaleSettings `json:"autoscaleSettings,omitempty"`

	// Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details.
	Throughput *int32 `json:"throughput,omitempty"`
}

// PartitionKeyRangeIDListMetricsOptions contains the optional parameters for the PartitionKeyRangeID.ListMetrics method.
type PartitionKeyRangeIDListMetricsOptions struct {
	// placeholder for future optional parameters
}

// PartitionKeyRangeIDRegionListMetricsOptions contains the optional parameters for the PartitionKeyRangeIDRegion.ListMetrics method.
type PartitionKeyRangeIDRegionListMetricsOptions struct {
	// placeholder for future optional parameters
}

// PartitionMetric - The metric values for a single partition.
type PartitionMetric struct {
	Metric
	// READ-ONLY; The partition id (GUID identifier) of the metric values.
	PartitionID *string `json:"partitionId,omitempty" azure:"ro"`

	// READ-ONLY; The partition key range id (integer identifier) of the metric values.
	PartitionKeyRangeID *string `json:"partitionKeyRangeId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PartitionMetric.
func (p PartitionMetric) MarshalJSON() ([]byte, error) {
	objectMap := p.Metric.marshalInternal()
	populate(objectMap, "partitionId", p.PartitionID)
	populate(objectMap, "partitionKeyRangeId", p.PartitionKeyRangeID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PartitionMetric.
func (p *PartitionMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "partitionId":
			err = unpopulate(val, &p.PartitionID)
			delete(rawMsg, key)
		case "partitionKeyRangeId":
			err = unpopulate(val, &p.PartitionKeyRangeID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return p.Metric.unmarshalInternal(rawMsg)
}

// PartitionMetricListResult - The response to a list partition metrics request.
type PartitionMetricListResult struct {
	// READ-ONLY; The list of partition-level metrics for the account.
	Value []*PartitionMetric `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PartitionMetricListResult.
func (p PartitionMetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PartitionUsage - The partition level usage data for a usage request.
type PartitionUsage struct {
	Usage
	// READ-ONLY; The partition id (GUID identifier) of the usages.
	PartitionID *string `json:"partitionId,omitempty" azure:"ro"`

	// READ-ONLY; The partition key range id (integer identifier) of the usages.
	PartitionKeyRangeID *string `json:"partitionKeyRangeId,omitempty" azure:"ro"`
}

// PartitionUsagesResult - The response to a list partition level usage request.
type PartitionUsagesResult struct {
	// READ-ONLY; The list of partition-level usages for the database. A usage is a point in time metric
	Value []*PartitionUsage `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PartitionUsagesResult.
func (p PartitionUsagesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PercentileListMetricsOptions contains the optional parameters for the Percentile.ListMetrics method.
type PercentileListMetricsOptions struct {
	// placeholder for future optional parameters
}

// PercentileMetric - Percentile Metric data
type PercentileMetric struct {
	// READ-ONLY; The end time for the metric (ISO-8601 format).
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The percentile metric values for the specified time window and timestep.
	MetricValues []*PercentileMetricValue `json:"metricValues,omitempty" azure:"ro"`

	// READ-ONLY; The name information for the metric.
	Name *MetricName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The start time for the metric (ISO-8601 format).
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The time grain to be used to summarize the metric values.
	TimeGrain *string `json:"timeGrain,omitempty" azure:"ro"`

	// READ-ONLY; The unit of the metric.
	Unit *UnitType `json:"unit,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetric.
func (p PercentileMetric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(p.EndTime))
	populate(objectMap, "metricValues", p.MetricValues)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "startTime", (*timeRFC3339)(p.StartTime))
	populate(objectMap, "timeGrain", p.TimeGrain)
	populate(objectMap, "unit", p.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetric.
func (p *PercentileMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, &p.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &p.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &p.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PercentileMetricListResult - The response to a list percentile metrics request.
type PercentileMetricListResult struct {
	// READ-ONLY; The list of percentile metrics for the account.
	Value []*PercentileMetric `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetricListResult.
func (p PercentileMetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PercentileMetricValue - Represents percentile metrics values.
type PercentileMetricValue struct {
	MetricValue
	// READ-ONLY; The 10th percentile value for the metric.
	P10 *float64 `json:"P10,omitempty" azure:"ro"`

	// READ-ONLY; The 25th percentile value for the metric.
	P25 *float64 `json:"P25,omitempty" azure:"ro"`

	// READ-ONLY; The 50th percentile value for the metric.
	P50 *float64 `json:"P50,omitempty" azure:"ro"`

	// READ-ONLY; The 75th percentile value for the metric.
	P75 *float64 `json:"P75,omitempty" azure:"ro"`

	// READ-ONLY; The 90th percentile value for the metric.
	P90 *float64 `json:"P90,omitempty" azure:"ro"`

	// READ-ONLY; The 95th percentile value for the metric.
	P95 *float64 `json:"P95,omitempty" azure:"ro"`

	// READ-ONLY; The 99th percentile value for the metric.
	P99 *float64 `json:"P99,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetricValue.
func (p PercentileMetricValue) MarshalJSON() ([]byte, error) {
	objectMap := p.MetricValue.marshalInternal()
	populate(objectMap, "P10", p.P10)
	populate(objectMap, "P25", p.P25)
	populate(objectMap, "P50", p.P50)
	populate(objectMap, "P75", p.P75)
	populate(objectMap, "P90", p.P90)
	populate(objectMap, "P95", p.P95)
	populate(objectMap, "P99", p.P99)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetricValue.
func (p *PercentileMetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "P10":
			err = unpopulate(val, &p.P10)
			delete(rawMsg, key)
		case "P25":
			err = unpopulate(val, &p.P25)
			delete(rawMsg, key)
		case "P50":
			err = unpopulate(val, &p.P50)
			delete(rawMsg, key)
		case "P75":
			err = unpopulate(val, &p.P75)
			delete(rawMsg, key)
		case "P90":
			err = unpopulate(val, &p.P90)
			delete(rawMsg, key)
		case "P95":
			err = unpopulate(val, &p.P95)
			delete(rawMsg, key)
		case "P99":
			err = unpopulate(val, &p.P99)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return p.MetricValue.unmarshalInternal(rawMsg)
}

// PercentileSourceTargetListMetricsOptions contains the optional parameters for the PercentileSourceTarget.ListMetrics method.
type PercentileSourceTargetListMetricsOptions struct {
	// placeholder for future optional parameters
}

// PercentileTargetListMetricsOptions contains the optional parameters for the PercentileTarget.ListMetrics method.
type PercentileTargetListMetricsOptions struct {
	// placeholder for future optional parameters
}

// PeriodicModeBackupPolicy - The object representing periodic mode backup policy.
type PeriodicModeBackupPolicy struct {
	BackupPolicy
	// Configuration values for periodic mode backup
	PeriodicModeProperties *PeriodicModeProperties `json:"periodicModeProperties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeriodicModeBackupPolicy.
func (p PeriodicModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := p.BackupPolicy.marshalInternal(BackupPolicyTypePeriodic)
	populate(objectMap, "periodicModeProperties", p.PeriodicModeProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PeriodicModeBackupPolicy.
func (p *PeriodicModeBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "periodicModeProperties":
			err = unpopulate(val, &p.PeriodicModeProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return p.BackupPolicy.unmarshalInternal(rawMsg)
}

// PeriodicModeProperties - Configuration values for periodic mode backup
type PeriodicModeProperties struct {
	// An integer representing the interval in minutes between two backups
	BackupIntervalInMinutes *int32 `json:"backupIntervalInMinutes,omitempty"`

	// An integer representing the time (in hours) that each backup is retained
	BackupRetentionIntervalInHours *int32 `json:"backupRetentionIntervalInHours,omitempty"`
}

// Permission - The set of data plane operations permitted through this Role Definition.
type Permission struct {
	// An array of data actions that are allowed.
	DataActions []*string `json:"dataActions,omitempty"`

	// An array of data actions that are denied.
	NotDataActions []*string `json:"notDataActions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Permission.
func (p Permission) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataActions", p.DataActions)
	populate(objectMap, "notDataActions", p.NotDataActions)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnection - A private endpoint connection
type PrivateEndpointConnection struct {
	ProxyResource
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// PrivateEndpointConnectionListResult - A list of private endpoint connections
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of a private endpoint connection.
type PrivateEndpointConnectionProperties struct {
	// Group id of the private endpoint.
	GroupID *string `json:"groupId,omitempty"`

	// Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty `json:"privateEndpoint,omitempty"`

	// Connection State of the Private Endpoint Connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateProperty `json:"privateLinkServiceConnectionState,omitempty"`

	// Provisioning state of the private endpoint.
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// PrivateEndpointConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnections.BeginCreateOrUpdate method.
type PrivateEndpointConnectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnections.BeginDelete method.
type PrivateEndpointConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListByDatabaseAccountOptions contains the optional parameters for the PrivateEndpointConnections.ListByDatabaseAccount method.
type PrivateEndpointConnectionsListByDatabaseAccountOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointProperty - Private endpoint which the connection belongs to.
type PrivateEndpointProperty struct {
	// Resource id of the private endpoint.
	ID *string `json:"id,omitempty"`
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	ARMProxyResource
	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required zone names.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesGetOptions contains the optional parameters for the PrivateLinkResources.Get method.
type PrivateLinkResourcesGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesListByDatabaseAccountOptions contains the optional parameters for the PrivateLinkResources.ListByDatabaseAccount method.
type PrivateLinkResourcesListByDatabaseAccountOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServiceConnectionStateProperty - Connection State of the Private Endpoint Connection.
type PrivateLinkServiceConnectionStateProperty struct {
	// The private link service connection description.
	Description *string `json:"description,omitempty"`

	// The private link service connection status.
	Status *string `json:"status,omitempty"`

	// READ-ONLY; Any action that is required beyond basic workflow (approve/ reject/ disconnect)
	ActionsRequired *string `json:"actionsRequired,omitempty" azure:"ro"`
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

// RegionForOnlineOffline - Cosmos DB region to online or offline.
type RegionForOnlineOffline struct {
	// REQUIRED; Cosmos DB region, with spaces between words and each word capitalized.
	Region *string `json:"region,omitempty"`
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableDatabaseAccountGetResult - A Azure Cosmos DB restorable database account.
type RestorableDatabaseAccountGetResult struct {
	// The location of the resource group to which the resource belongs.
	Location *string `json:"location,omitempty"`

	// The properties of a restorable database account.
	Properties *RestorableDatabaseAccountProperties `json:"properties,omitempty"`

	// READ-ONLY; The unique resource identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableDatabaseAccountProperties - The properties of a restorable database account.
type RestorableDatabaseAccountProperties struct {
	// The name of the global database account
	AccountName *string `json:"accountName,omitempty"`

	// The creation time of the restorable database account (ISO-8601 format).
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// The time at which the restorable database account has been deleted (ISO-8601 format).
	DeletionTime *time.Time `json:"deletionTime,omitempty"`

	// READ-ONLY; The API type of the restorable database account.
	APIType *APIType `json:"apiType,omitempty" azure:"ro"`

	// READ-ONLY; List of regions where the of the database account can be restored from.
	RestorableLocations []*RestorableLocationResource `json:"restorableLocations,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableDatabaseAccountProperties.
func (r RestorableDatabaseAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiType", r.APIType)
	populate(objectMap, "accountName", r.AccountName)
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "deletionTime", (*timeRFC3339)(r.DeletionTime))
	populate(objectMap, "restorableLocations", r.RestorableLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableDatabaseAccountProperties.
func (r *RestorableDatabaseAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiType":
			err = unpopulate(val, &r.APIType)
			delete(rawMsg, key)
		case "accountName":
			err = unpopulate(val, &r.AccountName)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "deletionTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.DeletionTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "restorableLocations":
			err = unpopulate(val, &r.RestorableLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RestorableDatabaseAccountsGetByLocationOptions contains the optional parameters for the RestorableDatabaseAccounts.GetByLocation method.
type RestorableDatabaseAccountsGetByLocationOptions struct {
	// placeholder for future optional parameters
}

// RestorableDatabaseAccountsListByLocationOptions contains the optional parameters for the RestorableDatabaseAccounts.ListByLocation method.
type RestorableDatabaseAccountsListByLocationOptions struct {
	// placeholder for future optional parameters
}

// RestorableDatabaseAccountsListOptions contains the optional parameters for the RestorableDatabaseAccounts.List method.
type RestorableDatabaseAccountsListOptions struct {
	// placeholder for future optional parameters
}

// RestorableDatabaseAccountsListResult - The List operation response, that contains the restorable database accounts and their properties.
type RestorableDatabaseAccountsListResult struct {
	// READ-ONLY; List of restorable database accounts and their properties.
	Value []*RestorableDatabaseAccountGetResult `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableDatabaseAccountsListResult.
func (r RestorableDatabaseAccountsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableLocationResource - Properties of the regional restorable account.
type RestorableLocationResource struct {
	// READ-ONLY; The creation time of the regional restorable database account (ISO-8601 format).
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; The time at which the regional restorable database account has been deleted (ISO-8601 format).
	DeletionTime *time.Time `json:"deletionTime,omitempty" azure:"ro"`

	// READ-ONLY; The location of the regional restorable account.
	LocationName *string `json:"locationName,omitempty" azure:"ro"`

	// READ-ONLY; The instance id of the regional restorable account.
	RegionalDatabaseAccountInstanceID *string `json:"regionalDatabaseAccountInstanceId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableLocationResource.
func (r RestorableLocationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "deletionTime", (*timeRFC3339)(r.DeletionTime))
	populate(objectMap, "locationName", r.LocationName)
	populate(objectMap, "regionalDatabaseAccountInstanceId", r.RegionalDatabaseAccountInstanceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableLocationResource.
func (r *RestorableLocationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "deletionTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.DeletionTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "locationName":
			err = unpopulate(val, &r.LocationName)
			delete(rawMsg, key)
		case "regionalDatabaseAccountInstanceId":
			err = unpopulate(val, &r.RegionalDatabaseAccountInstanceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RestorableMongodbCollectionGetResult - An Azure Cosmos DB MongoDB collection event
type RestorableMongodbCollectionGetResult struct {
	// The properties of a MongoDB collection event.
	Properties *RestorableMongodbCollectionProperties `json:"properties,omitempty"`

	// READ-ONLY; The unique resource Identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableMongodbCollectionProperties - The properties of an Azure Cosmos DB MongoDB collection event
type RestorableMongodbCollectionProperties struct {
	// The resource of an Azure Cosmos DB MongoDB collection event
	Resource *RestorableMongodbCollectionPropertiesResource `json:"resource,omitempty"`
}

// RestorableMongodbCollectionPropertiesResource - The resource of an Azure Cosmos DB MongoDB collection event
type RestorableMongodbCollectionPropertiesResource struct {
	// READ-ONLY; The time when this collection event happened.
	EventTimestamp *string `json:"eventTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; The operation type of this collection event.
	OperationType *OperationType `json:"operationType,omitempty" azure:"ro"`

	// READ-ONLY; The name of this MongoDB collection.
	OwnerID *string `json:"ownerId,omitempty" azure:"ro"`

	// READ-ONLY; The resource ID of this MongoDB collection.
	OwnerResourceID *string `json:"ownerResourceId,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty" azure:"ro"`
}

// RestorableMongodbCollectionsListOptions contains the optional parameters for the RestorableMongodbCollections.List method.
type RestorableMongodbCollectionsListOptions struct {
	// The resource ID of the MongoDB database.
	RestorableMongodbDatabaseRid *string
}

// RestorableMongodbCollectionsListResult - The List operation response, that contains the MongoDB collection events and their properties.
type RestorableMongodbCollectionsListResult struct {
	// READ-ONLY; List of MongoDB collection events and their properties.
	Value []*RestorableMongodbCollectionGetResult `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbCollectionsListResult.
func (r RestorableMongodbCollectionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableMongodbDatabaseGetResult - An Azure Cosmos DB MongoDB database event
type RestorableMongodbDatabaseGetResult struct {
	// The properties of a MongoDB database event.
	Properties *RestorableMongodbDatabaseProperties `json:"properties,omitempty"`

	// READ-ONLY; The unique resource Identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableMongodbDatabaseProperties - The properties of an Azure Cosmos DB MongoDB database event
type RestorableMongodbDatabaseProperties struct {
	// The resource of an Azure Cosmos DB MongoDB database event
	Resource *RestorableMongodbDatabasePropertiesResource `json:"resource,omitempty"`
}

// RestorableMongodbDatabasePropertiesResource - The resource of an Azure Cosmos DB MongoDB database event
type RestorableMongodbDatabasePropertiesResource struct {
	// READ-ONLY; The time when this database event happened.
	EventTimestamp *string `json:"eventTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; The operation type of this database event.
	OperationType *OperationType `json:"operationType,omitempty" azure:"ro"`

	// READ-ONLY; The name of this MongoDB database.
	OwnerID *string `json:"ownerId,omitempty" azure:"ro"`

	// READ-ONLY; The resource ID of this MongoDB database.
	OwnerResourceID *string `json:"ownerResourceId,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty" azure:"ro"`
}

// RestorableMongodbDatabasesListOptions contains the optional parameters for the RestorableMongodbDatabases.List method.
type RestorableMongodbDatabasesListOptions struct {
	// placeholder for future optional parameters
}

// RestorableMongodbDatabasesListResult - The List operation response, that contains the MongoDB database events and their properties.
type RestorableMongodbDatabasesListResult struct {
	// READ-ONLY; List of MongoDB database events and their properties.
	Value []*RestorableMongodbDatabaseGetResult `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbDatabasesListResult.
func (r RestorableMongodbDatabasesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableMongodbResourcesListOptions contains the optional parameters for the RestorableMongodbResources.List method.
type RestorableMongodbResourcesListOptions struct {
	// The location where the restorable resources are located.
	RestoreLocation *string
	// The timestamp when the restorable resources existed.
	RestoreTimestampInUTC *string
}

// RestorableMongodbResourcesListResult - The List operation response, that contains the restorable MongoDB resources.
type RestorableMongodbResourcesListResult struct {
	// READ-ONLY; List of restorable MongoDB resources, including the database and collection names.
	Value []*DatabaseRestoreResource `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbResourcesListResult.
func (r RestorableMongodbResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableSQLContainerGetResult - An Azure Cosmos DB SQL container event
type RestorableSQLContainerGetResult struct {
	// The properties of a SQL container event.
	Properties *RestorableSQLContainerProperties `json:"properties,omitempty"`

	// READ-ONLY; The unique resource Identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableSQLContainerProperties - The properties of an Azure Cosmos DB SQL container event
type RestorableSQLContainerProperties struct {
	// The resource of an Azure Cosmos DB SQL container event
	Resource *RestorableSQLContainerPropertiesResource `json:"resource,omitempty"`
}

// RestorableSQLContainerPropertiesResource - The resource of an Azure Cosmos DB SQL container event
type RestorableSQLContainerPropertiesResource struct {
	// Cosmos DB SQL container resource object
	Container *RestorableSQLContainerPropertiesResourceContainer `json:"container,omitempty"`

	// READ-ONLY; The when this container event happened.
	EventTimestamp *string `json:"eventTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; The operation type of this container event.
	OperationType *OperationType `json:"operationType,omitempty" azure:"ro"`

	// READ-ONLY; The name of this SQL container.
	OwnerID *string `json:"ownerId,omitempty" azure:"ro"`

	// READ-ONLY; The resource ID of this SQL container.
	OwnerResourceID *string `json:"ownerResourceId,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty" azure:"ro"`
}

// RestorableSQLContainerPropertiesResourceContainer - Cosmos DB SQL container resource object
type RestorableSQLContainerPropertiesResourceContainer struct {
	ExtendedResourceProperties
	SQLContainerResource
	// READ-ONLY; A system generated property that specifies the addressable path of the container resource.
	Self *string `json:"_self,omitempty" azure:"ro"`
}

// RestorableSQLContainersListOptions contains the optional parameters for the RestorableSQLContainers.List method.
type RestorableSQLContainersListOptions struct {
	// The snapshot create timestamp before which snapshots need to be listed.
	EndTime *string
	// The resource ID of the SQL database.
	RestorableSQLDatabaseRid *string
	// The snapshot create timestamp after which snapshots need to be listed.
	StartTime *string
}

// RestorableSQLContainersListResult - The List operation response, that contains the SQL container events and their properties.
type RestorableSQLContainersListResult struct {
	// READ-ONLY; List of SQL container events and their properties.
	Value []*RestorableSQLContainerGetResult `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLContainersListResult.
func (r RestorableSQLContainersListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableSQLDatabaseGetResult - An Azure Cosmos DB SQL database event
type RestorableSQLDatabaseGetResult struct {
	// The properties of a SQL database event.
	Properties *RestorableSQLDatabaseProperties `json:"properties,omitempty"`

	// READ-ONLY; The unique resource Identifier of the ARM resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of Azure resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RestorableSQLDatabaseProperties - The properties of an Azure Cosmos DB SQL database event
type RestorableSQLDatabaseProperties struct {
	// The resource of an Azure Cosmos DB SQL database event
	Resource *RestorableSQLDatabasePropertiesResource `json:"resource,omitempty"`
}

// RestorableSQLDatabasePropertiesResource - The resource of an Azure Cosmos DB SQL database event
type RestorableSQLDatabasePropertiesResource struct {
	// Cosmos DB SQL database resource object
	Database *RestorableSQLDatabasePropertiesResourceDatabase `json:"database,omitempty"`

	// READ-ONLY; The time when this database event happened.
	EventTimestamp *string `json:"eventTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; The operation type of this database event.
	OperationType *OperationType `json:"operationType,omitempty" azure:"ro"`

	// READ-ONLY; The name of the SQL database.
	OwnerID *string `json:"ownerId,omitempty" azure:"ro"`

	// READ-ONLY; The resource ID of the SQL database.
	OwnerResourceID *string `json:"ownerResourceId,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property. A unique identifier.
	Rid *string `json:"_rid,omitempty" azure:"ro"`
}

// RestorableSQLDatabasePropertiesResourceDatabase - Cosmos DB SQL database resource object
type RestorableSQLDatabasePropertiesResourceDatabase struct {
	ExtendedResourceProperties
	SQLDatabaseResource
	// READ-ONLY; A system generated property that specified the addressable path of the collections resource.
	Colls *string `json:"_colls,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property that specifies the addressable path of the database resource.
	Self *string `json:"_self,omitempty" azure:"ro"`

	// READ-ONLY; A system generated property that specifies the addressable path of the users resource.
	Users *string `json:"_users,omitempty" azure:"ro"`
}

// RestorableSQLDatabasesListOptions contains the optional parameters for the RestorableSQLDatabases.List method.
type RestorableSQLDatabasesListOptions struct {
	// placeholder for future optional parameters
}

// RestorableSQLDatabasesListResult - The List operation response, that contains the SQL database events and their properties.
type RestorableSQLDatabasesListResult struct {
	// READ-ONLY; List of SQL database events and their properties.
	Value []*RestorableSQLDatabaseGetResult `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLDatabasesListResult.
func (r RestorableSQLDatabasesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestorableSQLResourcesListOptions contains the optional parameters for the RestorableSQLResources.List method.
type RestorableSQLResourcesListOptions struct {
	// The location where the restorable resources are located.
	RestoreLocation *string
	// The timestamp when the restorable resources existed.
	RestoreTimestampInUTC *string
}

// RestorableSQLResourcesListResult - The List operation response, that contains the restorable SQL resources.
type RestorableSQLResourcesListResult struct {
	// READ-ONLY; List of restorable SQL resources, including the database and collection names.
	Value []*DatabaseRestoreResource `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLResourcesListResult.
func (r RestorableSQLResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RestoreParameters - Parameters to indicate the information about the restore.
type RestoreParameters struct {
	// List of specific databases available for restore.
	DatabasesToRestore []*DatabaseRestoreResource `json:"databasesToRestore,omitempty"`

	// Describes the mode of the restore.
	RestoreMode *RestoreMode `json:"restoreMode,omitempty"`

	// The id of the restorable database account from which the restore has to be initiated. For example:
	// /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}
	RestoreSource *string `json:"restoreSource,omitempty"`

	// Time to which the account has to be restored (ISO-8601 format).
	RestoreTimestampInUTC *time.Time `json:"restoreTimestampInUtc,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreParameters.
func (r RestoreParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databasesToRestore", r.DatabasesToRestore)
	populate(objectMap, "restoreMode", r.RestoreMode)
	populate(objectMap, "restoreSource", r.RestoreSource)
	populate(objectMap, "restoreTimestampInUtc", (*timeRFC3339)(r.RestoreTimestampInUTC))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreParameters.
func (r *RestoreParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "databasesToRestore":
			err = unpopulate(val, &r.DatabasesToRestore)
			delete(rawMsg, key)
		case "restoreMode":
			err = unpopulate(val, &r.RestoreMode)
			delete(rawMsg, key)
		case "restoreSource":
			err = unpopulate(val, &r.RestoreSource)
			delete(rawMsg, key)
		case "restoreTimestampInUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.RestoreTimestampInUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLContainerCreateUpdateParameters - Parameters to create and update Cosmos DB container.
type SQLContainerCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB container.
	Properties *SQLContainerCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerCreateUpdateParameters.
func (s SQLContainerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLContainerCreateUpdateProperties - Properties to create and update Azure Cosmos DB container.
type SQLContainerCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a container
	Resource *SQLContainerResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// SQLContainerGetProperties - The properties of an Azure Cosmos DB container
type SQLContainerGetProperties struct {
	Options  *SQLContainerGetPropertiesOptions  `json:"options,omitempty"`
	Resource *SQLContainerGetPropertiesResource `json:"resource,omitempty"`
}

type SQLContainerGetPropertiesOptions struct {
	OptionsResource
}

type SQLContainerGetPropertiesResource struct {
	ExtendedResourceProperties
	SQLContainerResource
}

// SQLContainerGetResults - An Azure Cosmos DB container.
type SQLContainerGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB container
	Properties *SQLContainerGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerGetResults.
func (s SQLContainerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLContainerListResult - The List operation response, that contains the containers and their properties.
type SQLContainerListResult struct {
	// READ-ONLY; List of containers and their properties.
	Value []*SQLContainerGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerListResult.
func (s SQLContainerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLContainerResource - Cosmos DB SQL container resource object
type SQLContainerResource struct {
	// REQUIRED; Name of the Cosmos DB SQL container
	ID *string `json:"id,omitempty"`

	// Analytical TTL.
	AnalyticalStorageTTL *int64 `json:"analyticalStorageTtl,omitempty"`

	// The conflict resolution policy for the container.
	ConflictResolutionPolicy *ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	// Default time to live
	DefaultTTL *int32 `json:"defaultTtl,omitempty"`

	// The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`

	// The configuration of the partition key to be used for partitioning data into multiple partitions
	PartitionKey *ContainerPartitionKey `json:"partitionKey,omitempty"`

	// The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
	UniqueKeyPolicy *UniqueKeyPolicy `json:"uniqueKeyPolicy,omitempty"`
}

// SQLDatabaseCreateUpdateParameters - Parameters to create and update Cosmos DB SQL database.
type SQLDatabaseCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB SQL database.
	Properties *SQLDatabaseCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseCreateUpdateParameters.
func (s SQLDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLDatabaseCreateUpdateProperties - Properties to create and update Azure Cosmos DB SQL database.
type SQLDatabaseCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a SQL database
	Resource *SQLDatabaseResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// SQLDatabaseGetProperties - The properties of an Azure Cosmos DB SQL database
type SQLDatabaseGetProperties struct {
	Options  *SQLDatabaseGetPropertiesOptions  `json:"options,omitempty"`
	Resource *SQLDatabaseGetPropertiesResource `json:"resource,omitempty"`
}

type SQLDatabaseGetPropertiesOptions struct {
	OptionsResource
}

type SQLDatabaseGetPropertiesResource struct {
	ExtendedResourceProperties
	SQLDatabaseResource
	// A system generated property that specified the addressable path of the collections resource.
	Colls *string `json:"_colls,omitempty"`

	// A system generated property that specifies the addressable path of the users resource.
	Users *string `json:"_users,omitempty"`
}

// SQLDatabaseGetResults - An Azure Cosmos DB SQL database.
type SQLDatabaseGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB SQL database
	Properties *SQLDatabaseGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseGetResults.
func (s SQLDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLDatabaseListResult - The List operation response, that contains the SQL databases and their properties.
type SQLDatabaseListResult struct {
	// READ-ONLY; List of SQL databases and their properties.
	Value []*SQLDatabaseGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseListResult.
func (s SQLDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLDatabaseResource - Cosmos DB SQL database resource object
type SQLDatabaseResource struct {
	// REQUIRED; Name of the Cosmos DB SQL database
	ID *string `json:"id,omitempty"`
}

// SQLResourcesBeginCreateUpdateSQLContainerOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLContainer method.
type SQLResourcesBeginCreateUpdateSQLContainerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLDatabaseOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLDatabase method.
type SQLResourcesBeginCreateUpdateSQLDatabaseOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLRoleAssignmentOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLRoleAssignment method.
type SQLResourcesBeginCreateUpdateSQLRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLRoleDefinitionOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLRoleDefinition method.
type SQLResourcesBeginCreateUpdateSQLRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLStoredProcedureOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLStoredProcedure method.
type SQLResourcesBeginCreateUpdateSQLStoredProcedureOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLTriggerOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLTrigger method.
type SQLResourcesBeginCreateUpdateSQLTriggerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginCreateUpdateSQLUserDefinedFunctionOptions contains the optional parameters for the SQLResources.BeginCreateUpdateSQLUserDefinedFunction
// method.
type SQLResourcesBeginCreateUpdateSQLUserDefinedFunctionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLContainerOptions contains the optional parameters for the SQLResources.BeginDeleteSQLContainer method.
type SQLResourcesBeginDeleteSQLContainerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLDatabaseOptions contains the optional parameters for the SQLResources.BeginDeleteSQLDatabase method.
type SQLResourcesBeginDeleteSQLDatabaseOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLRoleAssignmentOptions contains the optional parameters for the SQLResources.BeginDeleteSQLRoleAssignment method.
type SQLResourcesBeginDeleteSQLRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLRoleDefinitionOptions contains the optional parameters for the SQLResources.BeginDeleteSQLRoleDefinition method.
type SQLResourcesBeginDeleteSQLRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLStoredProcedureOptions contains the optional parameters for the SQLResources.BeginDeleteSQLStoredProcedure method.
type SQLResourcesBeginDeleteSQLStoredProcedureOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLTriggerOptions contains the optional parameters for the SQLResources.BeginDeleteSQLTrigger method.
type SQLResourcesBeginDeleteSQLTriggerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginDeleteSQLUserDefinedFunctionOptions contains the optional parameters for the SQLResources.BeginDeleteSQLUserDefinedFunction method.
type SQLResourcesBeginDeleteSQLUserDefinedFunctionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginMigrateSQLContainerToAutoscaleOptions contains the optional parameters for the SQLResources.BeginMigrateSQLContainerToAutoscale method.
type SQLResourcesBeginMigrateSQLContainerToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginMigrateSQLContainerToManualThroughputOptions contains the optional parameters for the SQLResources.BeginMigrateSQLContainerToManualThroughput
// method.
type SQLResourcesBeginMigrateSQLContainerToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginMigrateSQLDatabaseToAutoscaleOptions contains the optional parameters for the SQLResources.BeginMigrateSQLDatabaseToAutoscale method.
type SQLResourcesBeginMigrateSQLDatabaseToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginMigrateSQLDatabaseToManualThroughputOptions contains the optional parameters for the SQLResources.BeginMigrateSQLDatabaseToManualThroughput
// method.
type SQLResourcesBeginMigrateSQLDatabaseToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginRetrieveContinuousBackupInformationOptions contains the optional parameters for the SQLResources.BeginRetrieveContinuousBackupInformation
// method.
type SQLResourcesBeginRetrieveContinuousBackupInformationOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginUpdateSQLContainerThroughputOptions contains the optional parameters for the SQLResources.BeginUpdateSQLContainerThroughput method.
type SQLResourcesBeginUpdateSQLContainerThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesBeginUpdateSQLDatabaseThroughputOptions contains the optional parameters for the SQLResources.BeginUpdateSQLDatabaseThroughput method.
type SQLResourcesBeginUpdateSQLDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLContainerOptions contains the optional parameters for the SQLResources.GetSQLContainer method.
type SQLResourcesGetSQLContainerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLContainerThroughputOptions contains the optional parameters for the SQLResources.GetSQLContainerThroughput method.
type SQLResourcesGetSQLContainerThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLDatabaseOptions contains the optional parameters for the SQLResources.GetSQLDatabase method.
type SQLResourcesGetSQLDatabaseOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLDatabaseThroughputOptions contains the optional parameters for the SQLResources.GetSQLDatabaseThroughput method.
type SQLResourcesGetSQLDatabaseThroughputOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLRoleAssignmentOptions contains the optional parameters for the SQLResources.GetSQLRoleAssignment method.
type SQLResourcesGetSQLRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLRoleDefinitionOptions contains the optional parameters for the SQLResources.GetSQLRoleDefinition method.
type SQLResourcesGetSQLRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLStoredProcedureOptions contains the optional parameters for the SQLResources.GetSQLStoredProcedure method.
type SQLResourcesGetSQLStoredProcedureOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLTriggerOptions contains the optional parameters for the SQLResources.GetSQLTrigger method.
type SQLResourcesGetSQLTriggerOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesGetSQLUserDefinedFunctionOptions contains the optional parameters for the SQLResources.GetSQLUserDefinedFunction method.
type SQLResourcesGetSQLUserDefinedFunctionOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLContainersOptions contains the optional parameters for the SQLResources.ListSQLContainers method.
type SQLResourcesListSQLContainersOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLDatabasesOptions contains the optional parameters for the SQLResources.ListSQLDatabases method.
type SQLResourcesListSQLDatabasesOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLRoleAssignmentsOptions contains the optional parameters for the SQLResources.ListSQLRoleAssignments method.
type SQLResourcesListSQLRoleAssignmentsOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLRoleDefinitionsOptions contains the optional parameters for the SQLResources.ListSQLRoleDefinitions method.
type SQLResourcesListSQLRoleDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLStoredProceduresOptions contains the optional parameters for the SQLResources.ListSQLStoredProcedures method.
type SQLResourcesListSQLStoredProceduresOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLTriggersOptions contains the optional parameters for the SQLResources.ListSQLTriggers method.
type SQLResourcesListSQLTriggersOptions struct {
	// placeholder for future optional parameters
}

// SQLResourcesListSQLUserDefinedFunctionsOptions contains the optional parameters for the SQLResources.ListSQLUserDefinedFunctions method.
type SQLResourcesListSQLUserDefinedFunctionsOptions struct {
	// placeholder for future optional parameters
}

// SQLRoleAssignmentCreateUpdateParameters - Parameters to create and update an Azure Cosmos DB SQL Role Assignment.
type SQLRoleAssignmentCreateUpdateParameters struct {
	// Properties to create and update an Azure Cosmos DB SQL Role Assignment.
	Properties *SQLRoleAssignmentResource `json:"properties,omitempty"`
}

// SQLRoleAssignmentGetResults - An Azure Cosmos DB Role Assignment
type SQLRoleAssignmentGetResults struct {
	ARMProxyResource
	// Properties related to the Role Assignment.
	Properties *SQLRoleAssignmentResource `json:"properties,omitempty"`
}

// SQLRoleAssignmentListResult - The relevant Role Assignments.
type SQLRoleAssignmentListResult struct {
	// READ-ONLY; List of Role Assignments and their properties
	Value []*SQLRoleAssignmentGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleAssignmentListResult.
func (s SQLRoleAssignmentListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLRoleAssignmentResource - Azure Cosmos DB SQL Role Assignment resource object.
type SQLRoleAssignmentResource struct {
	// The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for
	// the principal is inferred using the tenant
	// associated with the subscription.
	PrincipalID *string `json:"principalId,omitempty"`

	// The unique identifier for the associated Role Definition.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`

	// The data plane resource path for which access is being granted through this Role Assignment.
	Scope *string `json:"scope,omitempty"`
}

// SQLRoleDefinitionCreateUpdateParameters - Parameters to create and update an Azure Cosmos DB SQL Role Definition.
type SQLRoleDefinitionCreateUpdateParameters struct {
	// Properties to create and update an Azure Cosmos DB SQL Role Definition.
	Properties *SQLRoleDefinitionResource `json:"properties,omitempty"`
}

// SQLRoleDefinitionGetResults - An Azure Cosmos DB SQL Role Definition.
type SQLRoleDefinitionGetResults struct {
	ARMProxyResource
	// Properties related to the Role Definition.
	Properties *SQLRoleDefinitionResource `json:"properties,omitempty"`
}

// SQLRoleDefinitionListResult - The relevant Role Definitions.
type SQLRoleDefinitionListResult struct {
	// READ-ONLY; List of Role Definitions and their properties.
	Value []*SQLRoleDefinitionGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleDefinitionListResult.
func (s SQLRoleDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLRoleDefinitionResource - Azure Cosmos DB SQL Role Definition resource object.
type SQLRoleDefinitionResource struct {
	// A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role
	// Definition on the entire database account or any
	// underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note
	// that resources referenced in assignable Scopes need
	// not exist.
	AssignableScopes []*string `json:"assignableScopes,omitempty"`

	// The set of operations allowed through this Role Definition.
	Permissions []*Permission `json:"permissions,omitempty"`

	// A user-friendly name for the Role Definition. Must be unique for the database account.
	RoleName *string `json:"roleName,omitempty"`

	// Indicates whether the Role Definition was built-in or user created.
	Type *RoleDefinitionType `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleDefinitionResource.
func (s SQLRoleDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assignableScopes", s.AssignableScopes)
	populate(objectMap, "permissions", s.Permissions)
	populate(objectMap, "roleName", s.RoleName)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SQLStoredProcedureCreateUpdateParameters - Parameters to create and update Cosmos DB storedProcedure.
type SQLStoredProcedureCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB storedProcedure.
	Properties *SQLStoredProcedureCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureCreateUpdateParameters.
func (s SQLStoredProcedureCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLStoredProcedureCreateUpdateProperties - Properties to create and update Azure Cosmos DB storedProcedure.
type SQLStoredProcedureCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a storedProcedure
	Resource *SQLStoredProcedureResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// SQLStoredProcedureGetProperties - The properties of an Azure Cosmos DB StoredProcedure
type SQLStoredProcedureGetProperties struct {
	Resource *SQLStoredProcedureGetPropertiesResource `json:"resource,omitempty"`
}

type SQLStoredProcedureGetPropertiesResource struct {
	ExtendedResourceProperties
	SQLStoredProcedureResource
}

// SQLStoredProcedureGetResults - An Azure Cosmos DB storedProcedure.
type SQLStoredProcedureGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB storedProcedure
	Properties *SQLStoredProcedureGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureGetResults.
func (s SQLStoredProcedureGetResults) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLStoredProcedureListResult - The List operation response, that contains the storedProcedures and their properties.
type SQLStoredProcedureListResult struct {
	// READ-ONLY; List of storedProcedures and their properties.
	Value []*SQLStoredProcedureGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureListResult.
func (s SQLStoredProcedureListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLStoredProcedureResource - Cosmos DB SQL storedProcedure resource object
type SQLStoredProcedureResource struct {
	// REQUIRED; Name of the Cosmos DB SQL storedProcedure
	ID *string `json:"id,omitempty"`

	// Body of the Stored Procedure
	Body *string `json:"body,omitempty"`
}

// SQLTriggerCreateUpdateParameters - Parameters to create and update Cosmos DB trigger.
type SQLTriggerCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB trigger.
	Properties *SQLTriggerCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerCreateUpdateParameters.
func (s SQLTriggerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLTriggerCreateUpdateProperties - Properties to create and update Azure Cosmos DB trigger.
type SQLTriggerCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a trigger
	Resource *SQLTriggerResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// SQLTriggerGetProperties - The properties of an Azure Cosmos DB trigger
type SQLTriggerGetProperties struct {
	Resource *SQLTriggerGetPropertiesResource `json:"resource,omitempty"`
}

type SQLTriggerGetPropertiesResource struct {
	ExtendedResourceProperties
	SQLTriggerResource
}

// SQLTriggerGetResults - An Azure Cosmos DB trigger.
type SQLTriggerGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB trigger
	Properties *SQLTriggerGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerGetResults.
func (s SQLTriggerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLTriggerListResult - The List operation response, that contains the triggers and their properties.
type SQLTriggerListResult struct {
	// READ-ONLY; List of triggers and their properties.
	Value []*SQLTriggerGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerListResult.
func (s SQLTriggerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLTriggerResource - Cosmos DB SQL trigger resource object
type SQLTriggerResource struct {
	// REQUIRED; Name of the Cosmos DB SQL trigger
	ID *string `json:"id,omitempty"`

	// Body of the Trigger
	Body *string `json:"body,omitempty"`

	// The operation the trigger is associated with
	TriggerOperation *TriggerOperation `json:"triggerOperation,omitempty"`

	// Type of the Trigger
	TriggerType *TriggerType `json:"triggerType,omitempty"`
}

// SQLUserDefinedFunctionCreateUpdateParameters - Parameters to create and update Cosmos DB userDefinedFunction.
type SQLUserDefinedFunctionCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB userDefinedFunction.
	Properties *SQLUserDefinedFunctionCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionCreateUpdateParameters.
func (s SQLUserDefinedFunctionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLUserDefinedFunctionCreateUpdateProperties - Properties to create and update Azure Cosmos DB userDefinedFunction.
type SQLUserDefinedFunctionCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a userDefinedFunction
	Resource *SQLUserDefinedFunctionResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// SQLUserDefinedFunctionGetProperties - The properties of an Azure Cosmos DB userDefinedFunction
type SQLUserDefinedFunctionGetProperties struct {
	Resource *SQLUserDefinedFunctionGetPropertiesResource `json:"resource,omitempty"`
}

type SQLUserDefinedFunctionGetPropertiesResource struct {
	ExtendedResourceProperties
	SQLUserDefinedFunctionResource
}

// SQLUserDefinedFunctionGetResults - An Azure Cosmos DB userDefinedFunction.
type SQLUserDefinedFunctionGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB userDefinedFunction
	Properties *SQLUserDefinedFunctionGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionGetResults.
func (s SQLUserDefinedFunctionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := s.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLUserDefinedFunctionListResult - The List operation response, that contains the userDefinedFunctions and their properties.
type SQLUserDefinedFunctionListResult struct {
	// READ-ONLY; List of userDefinedFunctions and their properties.
	Value []*SQLUserDefinedFunctionGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionListResult.
func (s SQLUserDefinedFunctionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLUserDefinedFunctionResource - Cosmos DB SQL userDefinedFunction resource object
type SQLUserDefinedFunctionResource struct {
	// REQUIRED; Name of the Cosmos DB SQL userDefinedFunction
	ID *string `json:"id,omitempty"`

	// Body of the User Defined Function
	Body *string `json:"body,omitempty"`
}

type SpatialSpec struct {
	// The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)
	Path *string `json:"path,omitempty"`

	// List of path's spatial type
	Types []*SpatialType `json:"types,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SpatialSpec.
func (s SpatialSpec) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "path", s.Path)
	populate(objectMap, "types", s.Types)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdAt", (*timeRFC3339)(s.CreatedAt))
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populate(objectMap, "lastModifiedAt", (*timeRFC3339)(s.LastModifiedAt))
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TableCreateUpdateParameters - Parameters to create and update Cosmos DB Table.
type TableCreateUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to create and update Azure Cosmos DB Table.
	Properties *TableCreateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TableCreateUpdateParameters.
func (t TableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := t.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TableCreateUpdateProperties - Properties to create and update Azure Cosmos DB Table.
type TableCreateUpdateProperties struct {
	// REQUIRED; The standard JSON format of a Table
	Resource *TableResource `json:"resource,omitempty"`

	// A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.
	Options *CreateUpdateOptions `json:"options,omitempty"`
}

// TableGetProperties - The properties of an Azure Cosmos Table
type TableGetProperties struct {
	Options  *TableGetPropertiesOptions  `json:"options,omitempty"`
	Resource *TableGetPropertiesResource `json:"resource,omitempty"`
}

type TableGetPropertiesOptions struct {
	OptionsResource
}

type TableGetPropertiesResource struct {
	ExtendedResourceProperties
	TableResource
}

// TableGetResults - An Azure Cosmos DB Table.
type TableGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB Table
	Properties *TableGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TableGetResults.
func (t TableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := t.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TableListResult - The List operation response, that contains the Table and their properties.
type TableListResult struct {
	// READ-ONLY; List of Table and their properties.
	Value []*TableGetResults `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TableListResult.
func (t TableListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TableResource - Cosmos DB table resource object
type TableResource struct {
	// REQUIRED; Name of the Cosmos DB table
	ID *string `json:"id,omitempty"`
}

// TableResourcesBeginCreateUpdateTableOptions contains the optional parameters for the TableResources.BeginCreateUpdateTable method.
type TableResourcesBeginCreateUpdateTableOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesBeginDeleteTableOptions contains the optional parameters for the TableResources.BeginDeleteTable method.
type TableResourcesBeginDeleteTableOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesBeginMigrateTableToAutoscaleOptions contains the optional parameters for the TableResources.BeginMigrateTableToAutoscale method.
type TableResourcesBeginMigrateTableToAutoscaleOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesBeginMigrateTableToManualThroughputOptions contains the optional parameters for the TableResources.BeginMigrateTableToManualThroughput
// method.
type TableResourcesBeginMigrateTableToManualThroughputOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesBeginUpdateTableThroughputOptions contains the optional parameters for the TableResources.BeginUpdateTableThroughput method.
type TableResourcesBeginUpdateTableThroughputOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesGetTableOptions contains the optional parameters for the TableResources.GetTable method.
type TableResourcesGetTableOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesGetTableThroughputOptions contains the optional parameters for the TableResources.GetTableThroughput method.
type TableResourcesGetTableThroughputOptions struct {
	// placeholder for future optional parameters
}

// TableResourcesListTablesOptions contains the optional parameters for the TableResources.ListTables method.
type TableResourcesListTablesOptions struct {
	// placeholder for future optional parameters
}

// ThroughputPolicyResource - Cosmos DB resource throughput policy
type ThroughputPolicyResource struct {
	// Represents the percentage by which throughput can increase every time throughput policy kicks in.
	IncrementPercent *int32 `json:"incrementPercent,omitempty"`

	// Determines whether the ThroughputPolicy is active or not
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// ThroughputSettingsGetProperties - The properties of an Azure Cosmos DB resource throughput
type ThroughputSettingsGetProperties struct {
	Resource *ThroughputSettingsGetPropertiesResource `json:"resource,omitempty"`
}

type ThroughputSettingsGetPropertiesResource struct {
	ExtendedResourceProperties
	ThroughputSettingsResource
}

// ThroughputSettingsGetResults - An Azure Cosmos DB resource throughput.
type ThroughputSettingsGetResults struct {
	ARMResourceProperties
	// The properties of an Azure Cosmos DB resource throughput
	Properties *ThroughputSettingsGetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsGetResults.
func (t ThroughputSettingsGetResults) MarshalJSON() ([]byte, error) {
	objectMap := t.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// ThroughputSettingsResource - Cosmos DB resource throughput object. Either throughput is required or autoscaleSettings is required, but not both.
type ThroughputSettingsResource struct {
	// Cosmos DB resource for autoscale settings. Either throughput is required or autoscaleSettings is required, but not both.
	AutoscaleSettings *AutoscaleSettingsResource `json:"autoscaleSettings,omitempty"`

	// Value of the Cosmos DB resource throughput. Either throughput is required or autoscaleSettings is required, but not both.
	Throughput *int32 `json:"throughput,omitempty"`

	// READ-ONLY; The minimum throughput of the resource
	MinimumThroughput *string `json:"minimumThroughput,omitempty" azure:"ro"`

	// READ-ONLY; The throughput replace is pending
	OfferReplacePending *string `json:"offerReplacePending,omitempty" azure:"ro"`
}

// ThroughputSettingsUpdateParameters - Parameters to update Cosmos DB resource throughput.
type ThroughputSettingsUpdateParameters struct {
	ARMResourceProperties
	// REQUIRED; Properties to update Azure Cosmos DB resource throughput.
	Properties *ThroughputSettingsUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsUpdateParameters.
func (t ThroughputSettingsUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := t.ARMResourceProperties.marshalInternal()
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// ThroughputSettingsUpdateProperties - Properties to update Azure Cosmos DB resource throughput.
type ThroughputSettingsUpdateProperties struct {
	// REQUIRED; The standard JSON format of a resource throughput
	Resource *ThroughputSettingsResource `json:"resource,omitempty"`
}

// UniqueKey - The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
type UniqueKey struct {
	// List of paths must be unique for each document in the Azure Cosmos DB service
	Paths []*string `json:"paths,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKey.
func (u UniqueKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "paths", u.Paths)
	return json.Marshal(objectMap)
}

// UniqueKeyPolicy - The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
type UniqueKeyPolicy struct {
	// List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.
	UniqueKeys []*UniqueKey `json:"uniqueKeys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKeyPolicy.
func (u UniqueKeyPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "uniqueKeys", u.UniqueKeys)
	return json.Marshal(objectMap)
}

// Usage - The usage data for a usage request.
type Usage struct {
	// READ-ONLY; Current value for this metric
	CurrentValue *int64 `json:"currentValue,omitempty" azure:"ro"`

	// READ-ONLY; Maximum value for this metric
	Limit *int64 `json:"limit,omitempty" azure:"ro"`

	// READ-ONLY; The name information for the metric.
	Name *MetricName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The quota period used to summarize the usage values.
	QuotaPeriod *string `json:"quotaPeriod,omitempty" azure:"ro"`

	// READ-ONLY; The unit of the metric.
	Unit *UnitType `json:"unit,omitempty" azure:"ro"`
}

// UsagesResult - The response to a list usage request.
type UsagesResult struct {
	// READ-ONLY; The list of usages for the database. A usage is a point in time metric
	Value []*Usage `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UsagesResult.
func (u UsagesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// VirtualNetworkRule - Virtual Network ACL Rule object
type VirtualNetworkRule struct {
	// Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
	ID *string `json:"id,omitempty"`

	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVNetServiceEndpoint *bool `json:"ignoreMissingVNetServiceEndpoint,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
