// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type DomainTopicsListByDomainPager interface {
	azcore.Pager
	// PageResponse returns the current DomainTopicsListByDomainResponse.
	PageResponse() DomainTopicsListByDomainResponse
}

type domainTopicsListByDomainPager struct {
	client    *DomainTopicsClient
	current   DomainTopicsListByDomainResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainTopicsListByDomainResponse) (*azcore.Request, error)
}

func (p *domainTopicsListByDomainPager) Err() error {
	return p.err
}

func (p *domainTopicsListByDomainPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainTopicsListResult.NextLink == nil || len(*p.current.DomainTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDomainHandleError(resp)
		return false
	}
	result, err := p.client.listByDomainHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainTopicsListByDomainPager) PageResponse() DomainTopicsListByDomainResponse {
	return p.current
}

type DomainsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListByResourceGroupResponse.
	PageResponse() DomainsListByResourceGroupResponse
}

type domainsListByResourceGroupPager struct {
	client    *DomainsClient
	current   DomainsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *domainsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *domainsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListByResourceGroupPager) PageResponse() DomainsListByResourceGroupResponse {
	return p.current
}

type DomainsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListBySubscriptionResponse.
	PageResponse() DomainsListBySubscriptionResponse
}

type domainsListBySubscriptionPager struct {
	client    *DomainsClient
	current   DomainsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *domainsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *domainsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListBySubscriptionPager) PageResponse() DomainsListBySubscriptionResponse {
	return p.current
}

type EventChannelsListByPartnerNamespacePager interface {
	azcore.Pager
	// PageResponse returns the current EventChannelsListByPartnerNamespaceResponse.
	PageResponse() EventChannelsListByPartnerNamespaceResponse
}

type eventChannelsListByPartnerNamespacePager struct {
	client    *EventChannelsClient
	current   EventChannelsListByPartnerNamespaceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventChannelsListByPartnerNamespaceResponse) (*azcore.Request, error)
}

func (p *eventChannelsListByPartnerNamespacePager) Err() error {
	return p.err
}

func (p *eventChannelsListByPartnerNamespacePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventChannelsListResult.NextLink == nil || len(*p.current.EventChannelsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByPartnerNamespaceHandleError(resp)
		return false
	}
	result, err := p.client.listByPartnerNamespaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventChannelsListByPartnerNamespacePager) PageResponse() EventChannelsListByPartnerNamespaceResponse {
	return p.current
}

type EventSubscriptionsListByDomainTopicPager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListByDomainTopicResponse.
	PageResponse() EventSubscriptionsListByDomainTopicResponse
}

type eventSubscriptionsListByDomainTopicPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListByDomainTopicResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListByDomainTopicResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListByDomainTopicPager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListByDomainTopicPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByDomainTopicHandleError(resp)
		return false
	}
	result, err := p.client.listByDomainTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListByDomainTopicPager) PageResponse() EventSubscriptionsListByDomainTopicResponse {
	return p.current
}

type EventSubscriptionsListByResourcePager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListByResourceResponse.
	PageResponse() EventSubscriptionsListByResourceResponse
}

type eventSubscriptionsListByResourcePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListByResourceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListByResourceResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListByResourcePager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListByResourcePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListByResourcePager) PageResponse() EventSubscriptionsListByResourceResponse {
	return p.current
}

type EventSubscriptionsListGlobalByResourceGroupForTopicTypePager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse.
	PageResponse() EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse
}

type eventSubscriptionsListGlobalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListGlobalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListGlobalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listGlobalByResourceGroupForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListGlobalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse {
	return p.current
}

type EventSubscriptionsListGlobalByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListGlobalByResourceGroupResponse.
	PageResponse() EventSubscriptionsListGlobalByResourceGroupResponse
}

type eventSubscriptionsListGlobalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalByResourceGroupResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListGlobalByResourceGroupPager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListGlobalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listGlobalByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListGlobalByResourceGroupPager) PageResponse() EventSubscriptionsListGlobalByResourceGroupResponse {
	return p.current
}

type EventSubscriptionsListGlobalBySubscriptionForTopicTypePager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse.
	PageResponse() EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse
}

type eventSubscriptionsListGlobalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListGlobalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListGlobalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listGlobalBySubscriptionForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListGlobalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse {
	return p.current
}

type EventSubscriptionsListGlobalBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListGlobalBySubscriptionResponse.
	PageResponse() EventSubscriptionsListGlobalBySubscriptionResponse
}

type eventSubscriptionsListGlobalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalBySubscriptionResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListGlobalBySubscriptionPager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListGlobalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listGlobalBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListGlobalBySubscriptionPager) PageResponse() EventSubscriptionsListGlobalBySubscriptionResponse {
	return p.current
}

type EventSubscriptionsListRegionalByResourceGroupForTopicTypePager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse.
	PageResponse() EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
}

type eventSubscriptionsListRegionalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListRegionalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListRegionalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRegionalByResourceGroupForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListRegionalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse {
	return p.current
}

type EventSubscriptionsListRegionalByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListRegionalByResourceGroupResponse.
	PageResponse() EventSubscriptionsListRegionalByResourceGroupResponse
}

type eventSubscriptionsListRegionalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalByResourceGroupResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListRegionalByResourceGroupPager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListRegionalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRegionalByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListRegionalByResourceGroupPager) PageResponse() EventSubscriptionsListRegionalByResourceGroupResponse {
	return p.current
}

type EventSubscriptionsListRegionalBySubscriptionForTopicTypePager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse.
	PageResponse() EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse
}

type eventSubscriptionsListRegionalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListRegionalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListRegionalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRegionalBySubscriptionForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListRegionalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse {
	return p.current
}

type EventSubscriptionsListRegionalBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current EventSubscriptionsListRegionalBySubscriptionResponse.
	PageResponse() EventSubscriptionsListRegionalBySubscriptionResponse
}

type eventSubscriptionsListRegionalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalBySubscriptionResponse) (*azcore.Request, error)
}

func (p *eventSubscriptionsListRegionalBySubscriptionPager) Err() error {
	return p.err
}

func (p *eventSubscriptionsListRegionalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRegionalBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventSubscriptionsListRegionalBySubscriptionPager) PageResponse() EventSubscriptionsListRegionalBySubscriptionResponse {
	return p.current
}

type PartnerNamespacesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerNamespacesListByResourceGroupResponse.
	PageResponse() PartnerNamespacesListByResourceGroupResponse
}

type partnerNamespacesListByResourceGroupPager struct {
	client    *PartnerNamespacesClient
	current   PartnerNamespacesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerNamespacesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *partnerNamespacesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *partnerNamespacesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerNamespacesListResult.NextLink == nil || len(*p.current.PartnerNamespacesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerNamespacesListByResourceGroupPager) PageResponse() PartnerNamespacesListByResourceGroupResponse {
	return p.current
}

type PartnerNamespacesListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerNamespacesListBySubscriptionResponse.
	PageResponse() PartnerNamespacesListBySubscriptionResponse
}

type partnerNamespacesListBySubscriptionPager struct {
	client    *PartnerNamespacesClient
	current   PartnerNamespacesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerNamespacesListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *partnerNamespacesListBySubscriptionPager) Err() error {
	return p.err
}

func (p *partnerNamespacesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerNamespacesListResult.NextLink == nil || len(*p.current.PartnerNamespacesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerNamespacesListBySubscriptionPager) PageResponse() PartnerNamespacesListBySubscriptionResponse {
	return p.current
}

type PartnerRegistrationsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerRegistrationsListByResourceGroupResponse.
	PageResponse() PartnerRegistrationsListByResourceGroupResponse
}

type partnerRegistrationsListByResourceGroupPager struct {
	client    *PartnerRegistrationsClient
	current   PartnerRegistrationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerRegistrationsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *partnerRegistrationsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *partnerRegistrationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerRegistrationsListResult.NextLink == nil || len(*p.current.PartnerRegistrationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerRegistrationsListByResourceGroupPager) PageResponse() PartnerRegistrationsListByResourceGroupResponse {
	return p.current
}

type PartnerRegistrationsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerRegistrationsListBySubscriptionResponse.
	PageResponse() PartnerRegistrationsListBySubscriptionResponse
}

type partnerRegistrationsListBySubscriptionPager struct {
	client    *PartnerRegistrationsClient
	current   PartnerRegistrationsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerRegistrationsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *partnerRegistrationsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *partnerRegistrationsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerRegistrationsListResult.NextLink == nil || len(*p.current.PartnerRegistrationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerRegistrationsListBySubscriptionPager) PageResponse() PartnerRegistrationsListBySubscriptionResponse {
	return p.current
}

type PartnerTopicEventSubscriptionsListByPartnerTopicPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerTopicEventSubscriptionsListByPartnerTopicResponse.
	PageResponse() PartnerTopicEventSubscriptionsListByPartnerTopicResponse
}

type partnerTopicEventSubscriptionsListByPartnerTopicPager struct {
	client    *PartnerTopicEventSubscriptionsClient
	current   PartnerTopicEventSubscriptionsListByPartnerTopicResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerTopicEventSubscriptionsListByPartnerTopicResponse) (*azcore.Request, error)
}

func (p *partnerTopicEventSubscriptionsListByPartnerTopicPager) Err() error {
	return p.err
}

func (p *partnerTopicEventSubscriptionsListByPartnerTopicPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByPartnerTopicHandleError(resp)
		return false
	}
	result, err := p.client.listByPartnerTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerTopicEventSubscriptionsListByPartnerTopicPager) PageResponse() PartnerTopicEventSubscriptionsListByPartnerTopicResponse {
	return p.current
}

type PartnerTopicsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerTopicsListByResourceGroupResponse.
	PageResponse() PartnerTopicsListByResourceGroupResponse
}

type partnerTopicsListByResourceGroupPager struct {
	client    *PartnerTopicsClient
	current   PartnerTopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerTopicsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *partnerTopicsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *partnerTopicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerTopicsListResult.NextLink == nil || len(*p.current.PartnerTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerTopicsListByResourceGroupPager) PageResponse() PartnerTopicsListByResourceGroupResponse {
	return p.current
}

type PartnerTopicsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current PartnerTopicsListBySubscriptionResponse.
	PageResponse() PartnerTopicsListBySubscriptionResponse
}

type partnerTopicsListBySubscriptionPager struct {
	client    *PartnerTopicsClient
	current   PartnerTopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PartnerTopicsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *partnerTopicsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *partnerTopicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerTopicsListResult.NextLink == nil || len(*p.current.PartnerTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *partnerTopicsListBySubscriptionPager) PageResponse() PartnerTopicsListBySubscriptionResponse {
	return p.current
}

type PrivateEndpointConnectionsListByResourcePager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndpointConnectionsListByResourceResponse.
	PageResponse() PrivateEndpointConnectionsListByResourceResponse
}

type privateEndpointConnectionsListByResourcePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsListByResourceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsListByResourceResponse) (*azcore.Request, error)
}

func (p *privateEndpointConnectionsListByResourcePager) Err() error {
	return p.err
}

func (p *privateEndpointConnectionsListByResourcePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointConnectionsListByResourcePager) PageResponse() PrivateEndpointConnectionsListByResourceResponse {
	return p.current
}

type PrivateLinkResourcesListByResourcePager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkResourcesListByResourceResponse.
	PageResponse() PrivateLinkResourcesListByResourceResponse
}

type privateLinkResourcesListByResourcePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListByResourceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListByResourceResponse) (*azcore.Request, error)
}

func (p *privateLinkResourcesListByResourcePager) Err() error {
	return p.err
}

func (p *privateLinkResourcesListByResourcePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourcesListResult.NextLink == nil || len(*p.current.PrivateLinkResourcesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkResourcesListByResourcePager) PageResponse() PrivateLinkResourcesListByResourceResponse {
	return p.current
}

type SystemTopicEventSubscriptionsListBySystemTopicPager interface {
	azcore.Pager
	// PageResponse returns the current SystemTopicEventSubscriptionsListBySystemTopicResponse.
	PageResponse() SystemTopicEventSubscriptionsListBySystemTopicResponse
}

type systemTopicEventSubscriptionsListBySystemTopicPager struct {
	client    *SystemTopicEventSubscriptionsClient
	current   SystemTopicEventSubscriptionsListBySystemTopicResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SystemTopicEventSubscriptionsListBySystemTopicResponse) (*azcore.Request, error)
}

func (p *systemTopicEventSubscriptionsListBySystemTopicPager) Err() error {
	return p.err
}

func (p *systemTopicEventSubscriptionsListBySystemTopicPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySystemTopicHandleError(resp)
		return false
	}
	result, err := p.client.listBySystemTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *systemTopicEventSubscriptionsListBySystemTopicPager) PageResponse() SystemTopicEventSubscriptionsListBySystemTopicResponse {
	return p.current
}

type SystemTopicsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current SystemTopicsListByResourceGroupResponse.
	PageResponse() SystemTopicsListByResourceGroupResponse
}

type systemTopicsListByResourceGroupPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SystemTopicsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *systemTopicsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *systemTopicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *systemTopicsListByResourceGroupPager) PageResponse() SystemTopicsListByResourceGroupResponse {
	return p.current
}

type SystemTopicsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current SystemTopicsListBySubscriptionResponse.
	PageResponse() SystemTopicsListBySubscriptionResponse
}

type systemTopicsListBySubscriptionPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, SystemTopicsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *systemTopicsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *systemTopicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *systemTopicsListBySubscriptionPager) PageResponse() SystemTopicsListBySubscriptionResponse {
	return p.current
}

type TopicsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current TopicsListByResourceGroupResponse.
	PageResponse() TopicsListByResourceGroupResponse
}

type topicsListByResourceGroupPager struct {
	client    *TopicsClient
	current   TopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopicsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *topicsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *topicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topicsListByResourceGroupPager) PageResponse() TopicsListByResourceGroupResponse {
	return p.current
}

type TopicsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current TopicsListBySubscriptionResponse.
	PageResponse() TopicsListBySubscriptionResponse
}

type topicsListBySubscriptionPager struct {
	client    *TopicsClient
	current   TopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopicsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *topicsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *topicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topicsListBySubscriptionPager) PageResponse() TopicsListBySubscriptionResponse {
	return p.current
}
