//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

import (
	"context"
	"net/http"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// DomainTopicsListByDomainPager provides operations for iterating over paged responses.
type DomainTopicsListByDomainPager struct {
	client    *DomainTopicsClient
	current   DomainTopicsListByDomainResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainTopicsListByDomainResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainTopicsListByDomainPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainTopicsListByDomainPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainTopicsListResult.NextLink == nil || len(*p.current.DomainTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByDomainHandleError(resp)
		return false
	}
	result, err := p.client.listByDomainHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainTopicsListByDomainResponse page.
func (p *DomainTopicsListByDomainPager) PageResponse() DomainTopicsListByDomainResponse {
	return p.current
}

// DomainsListByResourceGroupPager provides operations for iterating over paged responses.
type DomainsListByResourceGroupPager struct {
	client    *DomainsClient
	current   DomainsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListByResourceGroupResponse page.
func (p *DomainsListByResourceGroupPager) PageResponse() DomainsListByResourceGroupResponse {
	return p.current
}

// DomainsListBySubscriptionPager provides operations for iterating over paged responses.
type DomainsListBySubscriptionPager struct {
	client    *DomainsClient
	current   DomainsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListBySubscriptionResponse page.
func (p *DomainsListBySubscriptionPager) PageResponse() DomainsListBySubscriptionResponse {
	return p.current
}

// EventChannelsListByPartnerNamespacePager provides operations for iterating over paged responses.
type EventChannelsListByPartnerNamespacePager struct {
	client    *EventChannelsClient
	current   EventChannelsListByPartnerNamespaceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventChannelsListByPartnerNamespaceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventChannelsListByPartnerNamespacePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventChannelsListByPartnerNamespacePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventChannelsListResult.NextLink == nil || len(*p.current.EventChannelsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByPartnerNamespaceHandleError(resp)
		return false
	}
	result, err := p.client.listByPartnerNamespaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventChannelsListByPartnerNamespaceResponse page.
func (p *EventChannelsListByPartnerNamespacePager) PageResponse() EventChannelsListByPartnerNamespaceResponse {
	return p.current
}

// EventSubscriptionsListByDomainTopicPager provides operations for iterating over paged responses.
type EventSubscriptionsListByDomainTopicPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListByDomainTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListByDomainTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListByDomainTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListByDomainTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByDomainTopicHandleError(resp)
		return false
	}
	result, err := p.client.listByDomainTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListByDomainTopicResponse page.
func (p *EventSubscriptionsListByDomainTopicPager) PageResponse() EventSubscriptionsListByDomainTopicResponse {
	return p.current
}

// EventSubscriptionsListByResourcePager provides operations for iterating over paged responses.
type EventSubscriptionsListByResourcePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListByResourceResponse page.
func (p *EventSubscriptionsListByResourcePager) PageResponse() EventSubscriptionsListByResourceResponse {
	return p.current
}

// EventSubscriptionsListGlobalByResourceGroupForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsListGlobalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListGlobalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListGlobalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listGlobalByResourceGroupForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse page.
func (p *EventSubscriptionsListGlobalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsListGlobalByResourceGroupPager provides operations for iterating over paged responses.
type EventSubscriptionsListGlobalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListGlobalByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListGlobalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listGlobalByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListGlobalByResourceGroupResponse page.
func (p *EventSubscriptionsListGlobalByResourceGroupPager) PageResponse() EventSubscriptionsListGlobalByResourceGroupResponse {
	return p.current
}

// EventSubscriptionsListGlobalBySubscriptionForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsListGlobalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListGlobalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListGlobalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listGlobalBySubscriptionForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse page.
func (p *EventSubscriptionsListGlobalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsListGlobalBySubscriptionPager provides operations for iterating over paged responses.
type EventSubscriptionsListGlobalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListGlobalBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListGlobalBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListGlobalBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListGlobalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listGlobalBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListGlobalBySubscriptionResponse page.
func (p *EventSubscriptionsListGlobalBySubscriptionPager) PageResponse() EventSubscriptionsListGlobalBySubscriptionResponse {
	return p.current
}

// EventSubscriptionsListRegionalByResourceGroupForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsListRegionalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListRegionalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListRegionalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRegionalByResourceGroupForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse page.
func (p *EventSubscriptionsListRegionalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsListRegionalByResourceGroupPager provides operations for iterating over paged responses.
type EventSubscriptionsListRegionalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListRegionalByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListRegionalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRegionalByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListRegionalByResourceGroupResponse page.
func (p *EventSubscriptionsListRegionalByResourceGroupPager) PageResponse() EventSubscriptionsListRegionalByResourceGroupResponse {
	return p.current
}

// EventSubscriptionsListRegionalBySubscriptionForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsListRegionalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListRegionalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListRegionalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRegionalBySubscriptionForTopicTypeHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse page.
func (p *EventSubscriptionsListRegionalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsListRegionalBySubscriptionPager provides operations for iterating over paged responses.
type EventSubscriptionsListRegionalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsListRegionalBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsListRegionalBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsListRegionalBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsListRegionalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRegionalBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsListRegionalBySubscriptionResponse page.
func (p *EventSubscriptionsListRegionalBySubscriptionPager) PageResponse() EventSubscriptionsListRegionalBySubscriptionResponse {
	return p.current
}

// PartnerNamespacesListByResourceGroupPager provides operations for iterating over paged responses.
type PartnerNamespacesListByResourceGroupPager struct {
	client    *PartnerNamespacesClient
	current   PartnerNamespacesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerNamespacesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerNamespacesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerNamespacesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerNamespacesListResult.NextLink == nil || len(*p.current.PartnerNamespacesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerNamespacesListByResourceGroupResponse page.
func (p *PartnerNamespacesListByResourceGroupPager) PageResponse() PartnerNamespacesListByResourceGroupResponse {
	return p.current
}

// PartnerNamespacesListBySubscriptionPager provides operations for iterating over paged responses.
type PartnerNamespacesListBySubscriptionPager struct {
	client    *PartnerNamespacesClient
	current   PartnerNamespacesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerNamespacesListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerNamespacesListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerNamespacesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerNamespacesListResult.NextLink == nil || len(*p.current.PartnerNamespacesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerNamespacesListBySubscriptionResponse page.
func (p *PartnerNamespacesListBySubscriptionPager) PageResponse() PartnerNamespacesListBySubscriptionResponse {
	return p.current
}

// PartnerRegistrationsListByResourceGroupPager provides operations for iterating over paged responses.
type PartnerRegistrationsListByResourceGroupPager struct {
	client    *PartnerRegistrationsClient
	current   PartnerRegistrationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerRegistrationsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerRegistrationsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerRegistrationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerRegistrationsListResult.NextLink == nil || len(*p.current.PartnerRegistrationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerRegistrationsListByResourceGroupResponse page.
func (p *PartnerRegistrationsListByResourceGroupPager) PageResponse() PartnerRegistrationsListByResourceGroupResponse {
	return p.current
}

// PartnerRegistrationsListBySubscriptionPager provides operations for iterating over paged responses.
type PartnerRegistrationsListBySubscriptionPager struct {
	client    *PartnerRegistrationsClient
	current   PartnerRegistrationsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerRegistrationsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerRegistrationsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerRegistrationsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerRegistrationsListResult.NextLink == nil || len(*p.current.PartnerRegistrationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerRegistrationsListBySubscriptionResponse page.
func (p *PartnerRegistrationsListBySubscriptionPager) PageResponse() PartnerRegistrationsListBySubscriptionResponse {
	return p.current
}

// PartnerTopicEventSubscriptionsListByPartnerTopicPager provides operations for iterating over paged responses.
type PartnerTopicEventSubscriptionsListByPartnerTopicPager struct {
	client    *PartnerTopicEventSubscriptionsClient
	current   PartnerTopicEventSubscriptionsListByPartnerTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerTopicEventSubscriptionsListByPartnerTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerTopicEventSubscriptionsListByPartnerTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerTopicEventSubscriptionsListByPartnerTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByPartnerTopicHandleError(resp)
		return false
	}
	result, err := p.client.listByPartnerTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerTopicEventSubscriptionsListByPartnerTopicResponse page.
func (p *PartnerTopicEventSubscriptionsListByPartnerTopicPager) PageResponse() PartnerTopicEventSubscriptionsListByPartnerTopicResponse {
	return p.current
}

// PartnerTopicsListByResourceGroupPager provides operations for iterating over paged responses.
type PartnerTopicsListByResourceGroupPager struct {
	client    *PartnerTopicsClient
	current   PartnerTopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerTopicsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerTopicsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerTopicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerTopicsListResult.NextLink == nil || len(*p.current.PartnerTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerTopicsListByResourceGroupResponse page.
func (p *PartnerTopicsListByResourceGroupPager) PageResponse() PartnerTopicsListByResourceGroupResponse {
	return p.current
}

// PartnerTopicsListBySubscriptionPager provides operations for iterating over paged responses.
type PartnerTopicsListBySubscriptionPager struct {
	client    *PartnerTopicsClient
	current   PartnerTopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PartnerTopicsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PartnerTopicsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PartnerTopicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PartnerTopicsListResult.NextLink == nil || len(*p.current.PartnerTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PartnerTopicsListBySubscriptionResponse page.
func (p *PartnerTopicsListBySubscriptionPager) PageResponse() PartnerTopicsListBySubscriptionResponse {
	return p.current
}

// PrivateEndpointConnectionsListByResourcePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsListByResourcePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsListByResourceResponse page.
func (p *PrivateEndpointConnectionsListByResourcePager) PageResponse() PrivateEndpointConnectionsListByResourceResponse {
	return p.current
}

// PrivateLinkResourcesListByResourcePager provides operations for iterating over paged responses.
type PrivateLinkResourcesListByResourcePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkResourcesListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkResourcesListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourcesListResult.NextLink == nil || len(*p.current.PrivateLinkResourcesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkResourcesListByResourceResponse page.
func (p *PrivateLinkResourcesListByResourcePager) PageResponse() PrivateLinkResourcesListByResourceResponse {
	return p.current
}

// SystemTopicEventSubscriptionsListBySystemTopicPager provides operations for iterating over paged responses.
type SystemTopicEventSubscriptionsListBySystemTopicPager struct {
	client    *SystemTopicEventSubscriptionsClient
	current   SystemTopicEventSubscriptionsListBySystemTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicEventSubscriptionsListBySystemTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicEventSubscriptionsListBySystemTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicEventSubscriptionsListBySystemTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySystemTopicHandleError(resp)
		return false
	}
	result, err := p.client.listBySystemTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicEventSubscriptionsListBySystemTopicResponse page.
func (p *SystemTopicEventSubscriptionsListBySystemTopicPager) PageResponse() SystemTopicEventSubscriptionsListBySystemTopicResponse {
	return p.current
}

// SystemTopicsListByResourceGroupPager provides operations for iterating over paged responses.
type SystemTopicsListByResourceGroupPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicsListByResourceGroupResponse page.
func (p *SystemTopicsListByResourceGroupPager) PageResponse() SystemTopicsListByResourceGroupResponse {
	return p.current
}

// SystemTopicsListBySubscriptionPager provides operations for iterating over paged responses.
type SystemTopicsListBySubscriptionPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicsListBySubscriptionResponse page.
func (p *SystemTopicsListBySubscriptionPager) PageResponse() SystemTopicsListBySubscriptionResponse {
	return p.current
}

// TopicsListByResourceGroupPager provides operations for iterating over paged responses.
type TopicsListByResourceGroupPager struct {
	client    *TopicsClient
	current   TopicsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsListByResourceGroupResponse page.
func (p *TopicsListByResourceGroupPager) PageResponse() TopicsListByResourceGroupResponse {
	return p.current
}

// TopicsListBySubscriptionPager provides operations for iterating over paged responses.
type TopicsListBySubscriptionPager struct {
	client    *TopicsClient
	current   TopicsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsListBySubscriptionResponse page.
func (p *TopicsListBySubscriptionPager) PageResponse() TopicsListBySubscriptionResponse {
	return p.current
}
