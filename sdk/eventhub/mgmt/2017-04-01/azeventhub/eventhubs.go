// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azeventhub

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// EventHubsOperations contains the methods for the EventHubs group.
type EventHubsOperations interface {
	// CreateOrUpdate - Creates or updates a new Event Hub as a nested resource within a Namespace.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, parameters Eventhub) (*EventhubResponse, error)
	// CreateOrUpdateAuthorizationRule - Creates or updates an AuthorizationRule for the specified Event Hub. Creation/update of the AuthorizationRule will take a few seconds to take effect.
	CreateOrUpdateAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters AuthorizationRule) (*AuthorizationRuleResponse, error)
	// Delete - Deletes an Event Hub from the specified Namespace and resource group.
	Delete(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string) (*http.Response, error)
	// DeleteAuthorizationRule - Deletes an Event Hub AuthorizationRule.
	DeleteAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*http.Response, error)
	// Get - Gets an Event Hubs description for the specified Event Hub.
	Get(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string) (*EventhubResponse, error)
	// GetAuthorizationRule - Gets an AuthorizationRule for an Event Hub by rule name.
	GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*AuthorizationRuleResponse, error)
	// ListAuthorizationRules - Gets the authorization rules for an Event Hub.
	ListAuthorizationRules(resourceGroupName string, namespaceName string, eventHubName string) (AuthorizationRuleListResultPager, error)
	// ListByNamespace - Gets all the Event Hubs in a Namespace.
	ListByNamespace(resourceGroupName string, namespaceName string, eventHubsListByNamespaceOptions *EventHubsListByNamespaceOptions) (EventHubListResultPager, error)
	// ListKeys - Gets the ACS and SAS connection strings for the Event Hub.
	ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*AccessKeysResponse, error)
	// RegenerateKeys - Regenerates the ACS and SAS connection strings for the Event Hub.
	RegenerateKeys(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*AccessKeysResponse, error)
}

// eventHubsOperations implements the EventHubsOperations interface.
type eventHubsOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Creates or updates a new Event Hub as a nested resource within a Namespace.
func (client *eventHubsOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, parameters Eventhub) (*EventhubResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, namespaceName, eventHubName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *eventHubsOperations) createOrUpdateCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, parameters Eventhub) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *eventHubsOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*EventhubResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := EventhubResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Eventhub)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *eventHubsOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// CreateOrUpdateAuthorizationRule - Creates or updates an AuthorizationRule for the specified Event Hub. Creation/update of the AuthorizationRule will take a few seconds to take effect.
func (client *eventHubsOperations) CreateOrUpdateAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters AuthorizationRule) (*AuthorizationRuleResponse, error) {
	req, err := client.createOrUpdateAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateAuthorizationRuleCreateRequest creates the CreateOrUpdateAuthorizationRule request.
func (client *eventHubsOperations) createOrUpdateAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters AuthorizationRule) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateAuthorizationRuleHandleResponse handles the CreateOrUpdateAuthorizationRule response.
func (client *eventHubsOperations) createOrUpdateAuthorizationRuleHandleResponse(resp *azcore.Response) (*AuthorizationRuleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.createOrUpdateAuthorizationRuleHandleError(resp)
	}
	result := AuthorizationRuleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRule)
}

// createOrUpdateAuthorizationRuleHandleError handles the CreateOrUpdateAuthorizationRule error response.
func (client *eventHubsOperations) createOrUpdateAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes an Event Hub from the specified Namespace and resource group.
func (client *eventHubsOperations) Delete(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, namespaceName, eventHubName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *eventHubsOperations) deleteCreateRequest(resourceGroupName string, namespaceName string, eventHubName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *eventHubsOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *eventHubsOperations) deleteHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// DeleteAuthorizationRule - Deletes an Event Hub AuthorizationRule.
func (client *eventHubsOperations) DeleteAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*http.Response, error) {
	req, err := client.deleteAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, eventHubName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteAuthorizationRuleCreateRequest creates the DeleteAuthorizationRule request.
func (client *eventHubsOperations) deleteAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteAuthorizationRuleHandleResponse handles the DeleteAuthorizationRule response.
func (client *eventHubsOperations) deleteAuthorizationRuleHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteAuthorizationRuleHandleError(resp)
	}
	return resp.Response, nil
}

// deleteAuthorizationRuleHandleError handles the DeleteAuthorizationRule error response.
func (client *eventHubsOperations) deleteAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Get - Gets an Event Hubs description for the specified Event Hub.
func (client *eventHubsOperations) Get(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string) (*EventhubResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, namespaceName, eventHubName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *eventHubsOperations) getCreateRequest(resourceGroupName string, namespaceName string, eventHubName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *eventHubsOperations) getHandleResponse(resp *azcore.Response) (*EventhubResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := EventhubResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.Eventhub)
}

// getHandleError handles the Get error response.
func (client *eventHubsOperations) getHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// GetAuthorizationRule - Gets an AuthorizationRule for an Event Hub by rule name.
func (client *eventHubsOperations) GetAuthorizationRule(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*AuthorizationRuleResponse, error) {
	req, err := client.getAuthorizationRuleCreateRequest(resourceGroupName, namespaceName, eventHubName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getAuthorizationRuleHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getAuthorizationRuleCreateRequest creates the GetAuthorizationRule request.
func (client *eventHubsOperations) getAuthorizationRuleCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getAuthorizationRuleHandleResponse handles the GetAuthorizationRule response.
func (client *eventHubsOperations) getAuthorizationRuleHandleResponse(resp *azcore.Response) (*AuthorizationRuleResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getAuthorizationRuleHandleError(resp)
	}
	result := AuthorizationRuleResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRule)
}

// getAuthorizationRuleHandleError handles the GetAuthorizationRule error response.
func (client *eventHubsOperations) getAuthorizationRuleHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListAuthorizationRules - Gets the authorization rules for an Event Hub.
func (client *eventHubsOperations) ListAuthorizationRules(resourceGroupName string, namespaceName string, eventHubName string) (AuthorizationRuleListResultPager, error) {
	req, err := client.listAuthorizationRulesCreateRequest(resourceGroupName, namespaceName, eventHubName)
	if err != nil {
		return nil, err
	}
	return &authorizationRuleListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listAuthorizationRulesHandleResponse,
		advancer: func(resp *AuthorizationRuleListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.AuthorizationRuleListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.AuthorizationRuleListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listAuthorizationRulesCreateRequest creates the ListAuthorizationRules request.
func (client *eventHubsOperations) listAuthorizationRulesCreateRequest(resourceGroupName string, namespaceName string, eventHubName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listAuthorizationRulesHandleResponse handles the ListAuthorizationRules response.
func (client *eventHubsOperations) listAuthorizationRulesHandleResponse(resp *azcore.Response) (*AuthorizationRuleListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listAuthorizationRulesHandleError(resp)
	}
	result := AuthorizationRuleListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AuthorizationRuleListResult)
}

// listAuthorizationRulesHandleError handles the ListAuthorizationRules error response.
func (client *eventHubsOperations) listAuthorizationRulesHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListByNamespace - Gets all the Event Hubs in a Namespace.
func (client *eventHubsOperations) ListByNamespace(resourceGroupName string, namespaceName string, eventHubsListByNamespaceOptions *EventHubsListByNamespaceOptions) (EventHubListResultPager, error) {
	req, err := client.listByNamespaceCreateRequest(resourceGroupName, namespaceName, eventHubsListByNamespaceOptions)
	if err != nil {
		return nil, err
	}
	return &eventHubListResultPager{
		pipeline:  client.p,
		request:   req,
		responder: client.listByNamespaceHandleResponse,
		advancer: func(resp *EventHubListResultResponse) (*azcore.Request, error) {
			u, err := url.Parse(*resp.EventHubListResult.NextLink)
			if err != nil {
				return nil, fmt.Errorf("invalid NextLink: %w", err)
			}
			if u.Scheme == "" {
				return nil, fmt.Errorf("no scheme detected in NextLink %s", *resp.EventHubListResult.NextLink)
			}
			return azcore.NewRequest(http.MethodGet, *u), nil
		},
	}, nil
}

// listByNamespaceCreateRequest creates the ListByNamespace request.
func (client *eventHubsOperations) listByNamespaceCreateRequest(resourceGroupName string, namespaceName string, eventHubsListByNamespaceOptions *EventHubsListByNamespaceOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	if eventHubsListByNamespaceOptions != nil && eventHubsListByNamespaceOptions.Skip != nil {
		query.Set("$skip", strconv.FormatInt(int64(*eventHubsListByNamespaceOptions.Skip), 10))
	}
	if eventHubsListByNamespaceOptions != nil && eventHubsListByNamespaceOptions.Top != nil {
		query.Set("$top", strconv.FormatInt(int64(*eventHubsListByNamespaceOptions.Top), 10))
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByNamespaceHandleResponse handles the ListByNamespace response.
func (client *eventHubsOperations) listByNamespaceHandleResponse(resp *azcore.Response) (*EventHubListResultResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByNamespaceHandleError(resp)
	}
	result := EventHubListResultResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.EventHubListResult)
}

// listByNamespaceHandleError handles the ListByNamespace error response.
func (client *eventHubsOperations) listByNamespaceHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// ListKeys - Gets the ACS and SAS connection strings for the Event Hub.
func (client *eventHubsOperations) ListKeys(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*AccessKeysResponse, error) {
	req, err := client.listKeysCreateRequest(resourceGroupName, namespaceName, eventHubName, authorizationRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listKeysHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listKeysCreateRequest creates the ListKeys request.
func (client *eventHubsOperations) listKeysCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}/listKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, nil
}

// listKeysHandleResponse handles the ListKeys response.
func (client *eventHubsOperations) listKeysHandleResponse(resp *azcore.Response) (*AccessKeysResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listKeysHandleError(resp)
	}
	result := AccessKeysResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AccessKeys)
}

// listKeysHandleError handles the ListKeys error response.
func (client *eventHubsOperations) listKeysHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// RegenerateKeys - Regenerates the ACS and SAS connection strings for the Event Hub.
func (client *eventHubsOperations) RegenerateKeys(ctx context.Context, resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*AccessKeysResponse, error) {
	req, err := client.regenerateKeysCreateRequest(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.regenerateKeysHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// regenerateKeysCreateRequest creates the RegenerateKeys request.
func (client *eventHubsOperations) regenerateKeysCreateRequest(resourceGroupName string, namespaceName string, eventHubName string, authorizationRuleName string, parameters RegenerateAccessKeyParameters) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	urlPath = strings.ReplaceAll(urlPath, "{eventHubName}", url.PathEscape(eventHubName))
	urlPath = strings.ReplaceAll(urlPath, "{authorizationRuleName}", url.PathEscape(authorizationRuleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2017-04-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPost, *u)
	return req, req.MarshalAsJSON(parameters)
}

// regenerateKeysHandleResponse handles the RegenerateKeys response.
func (client *eventHubsOperations) regenerateKeysHandleResponse(resp *azcore.Response) (*AccessKeysResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.regenerateKeysHandleError(resp)
	}
	result := AccessKeysResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AccessKeys)
}

// regenerateKeysHandleError handles the RegenerateKeys error response.
func (client *eventHubsOperations) regenerateKeysHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
