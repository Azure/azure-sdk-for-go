//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azpki

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// CertificateDetails - Client makes a call to this end point to retrieve the end entity certificate details.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - baseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - serialNumber - Serial number of the certificate.
//   - options - ClientCertificateDetailsOptions contains the optional parameters for the Client.CertificateDetails method.
func (client *Client) CertificateDetails(ctx context.Context, baseURL string, caName string, serialNumber string, options *ClientCertificateDetailsOptions) (ClientCertificateDetailsResponse, error) {
	req, err := client.certificateDetailsCreateRequest(ctx, baseURL, caName, serialNumber, options)
	if err != nil {
		return ClientCertificateDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientCertificateDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientCertificateDetailsResponse{}, runtime.NewResponseError(resp)
	}
	return client.certificateDetailsHandleResponse(resp)
}

// certificateDetailsCreateRequest creates the CertificateDetails request.
func (client *Client) certificateDetailsCreateRequest(ctx context.Context, baseURL string, caName string, serialNumber string, options *ClientCertificateDetailsOptions) (*policy.Request, error) {
	host := "{BaseUrl}"
	host = strings.ReplaceAll(host, "{BaseUrl}", baseURL)
	urlPath := "/certificateAuthorities/{CAName}/certificates/{serialNumber}/description"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{CAName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// certificateDetailsHandleResponse handles the CertificateDetails response.
func (client *Client) certificateDetailsHandleResponse(resp *http.Response) (ClientCertificateDetailsResponse, error) {
	result := ClientCertificateDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CertificateDescriptionResponse); err != nil {
		return ClientCertificateDetailsResponse{}, err
	}
	return result, nil
}

// EndEntityCertificateDownload - Client makes a call to this end point to retrieve the end entity certificate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - baseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - serialNumber - Serial number of the certificate.
//   - options - ClientEndEntityCertificateDownloadOptions contains the optional parameters for the Client.EndEntityCertificateDownload
//     method.
func (client *Client) EndEntityCertificateDownload(ctx context.Context, baseURL string, caName string, serialNumber string, options *ClientEndEntityCertificateDownloadOptions) (ClientEndEntityCertificateDownloadResponse, error) {
	req, err := client.endEntityCertificateDownloadCreateRequest(ctx, baseURL, caName, serialNumber, options)
	if err != nil {
		return ClientEndEntityCertificateDownloadResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientEndEntityCertificateDownloadResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientEndEntityCertificateDownloadResponse{}, runtime.NewResponseError(resp)
	}
	return ClientEndEntityCertificateDownloadResponse{Body: resp.Body}, nil
}

// endEntityCertificateDownloadCreateRequest creates the EndEntityCertificateDownload request.
func (client *Client) endEntityCertificateDownloadCreateRequest(ctx context.Context, baseURL string, caName string, serialNumber string, options *ClientEndEntityCertificateDownloadOptions) (*policy.Request, error) {
	host := "{BaseUrl}"
	host = strings.ReplaceAll(host, "{BaseUrl}", baseURL)
	urlPath := "/certificateAuthorities/{CAName}/certificates/{serialNumber}"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{CAName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	runtime.SkipBodyDownload(req)
	if client.certificateFileFormat != nil {
		req.Raw().Header["certificate-file-format"] = []string{*client.certificateFileFormat}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// EnrollCertificate - Client makes a call to the PKI service for enrollment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - baseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - policyName - Name of the enrollment policy which can be used to issue certificate.
//   - er - The attributes required to issue a certificate
//   - options - ClientEnrollCertificateOptions contains the optional parameters for the Client.EnrollCertificate method.
func (client *Client) EnrollCertificate(ctx context.Context, baseURL string, policyName string, er EnrollRequest, options *ClientEnrollCertificateOptions) (ClientEnrollCertificateResponse, error) {
	req, err := client.enrollCertificateCreateRequest(ctx, baseURL, policyName, er, options)
	if err != nil {
		return ClientEnrollCertificateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientEnrollCertificateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientEnrollCertificateResponse{}, runtime.NewResponseError(resp)
	}
	return client.enrollCertificateHandleResponse(resp)
}

// enrollCertificateCreateRequest creates the EnrollCertificate request.
func (client *Client) enrollCertificateCreateRequest(ctx context.Context, baseURL string, policyName string, er EnrollRequest, options *ClientEnrollCertificateOptions) (*policy.Request, error) {
	host := "{BaseUrl}"
	host = strings.ReplaceAll(host, "{BaseUrl}", baseURL)
	urlPath := "/enrollmentPolicies/{policyName}:enrollCertificate"
	if policyName == "" {
		return nil, errors.New("parameter policyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyName}", url.PathEscape(policyName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if client.certificateFormat != nil {
		reqQP.Set("certificate-format", *client.certificateFormat)
	}
	if options != nil && options.FullChain != nil {
		reqQP.Set("fullChain", strconv.FormatBool(*options.FullChain))
	}
	if options != nil && options.Include != nil {
		reqQP.Set("include", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Include), "[]")), ","))
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, er)
}

// enrollCertificateHandleResponse handles the EnrollCertificate response.
func (client *Client) enrollCertificateHandleResponse(resp *http.Response) (ClientEnrollCertificateResponse, error) {
	result := ClientEnrollCertificateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnrollResponse); err != nil {
		return ClientEnrollCertificateResponse{}, err
	}
	return result, nil
}

// GetCaCertificate - Client makes a call to this end point to download the CA certificate.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - baseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority (CA).
//   - options - ClientGetCaCertificateOptions contains the optional parameters for the Client.GetCaCertificate method.
func (client *Client) GetCaCertificate(ctx context.Context, baseURL string, caName string, options *ClientGetCaCertificateOptions) (ClientGetCaCertificateResponse, error) {
	req, err := client.getCaCertificateCreateRequest(ctx, baseURL, caName, options)
	if err != nil {
		return ClientGetCaCertificateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientGetCaCertificateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientGetCaCertificateResponse{}, runtime.NewResponseError(resp)
	}
	return ClientGetCaCertificateResponse{Body: resp.Body}, nil
}

// getCaCertificateCreateRequest creates the GetCaCertificate request.
func (client *Client) getCaCertificateCreateRequest(ctx context.Context, baseURL string, caName string, options *ClientGetCaCertificateOptions) (*policy.Request, error) {
	host := "{BaseUrl}"
	host = strings.ReplaceAll(host, "{BaseUrl}", baseURL)
	urlPath := "/certificateAuthorities/{CAName}"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{CAName}", url.PathEscape(caName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.FullChain != nil {
		reqQP.Set("fullChain", strconv.FormatBool(*options.FullChain))
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	runtime.SkipBodyDownload(req)
	if client.certificateFileFormat != nil {
		req.Raw().Header["certificate-file-format"] = []string{*client.certificateFileFormat}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Revoke - Client makes a call to this end point for certificate revocation. The call to the ‘revoke’ endpoint is idempotent.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-01-preview
//   - baseURL - The PKI name with the region name, for example https://contosopki.westus2.pki.azure.net.
//   - caName - Name of the Certificate Authority(CA) which issued the certificate.
//   - serialNumber - Serial number of the certificate which needs to be revoked.
//   - r - The parameters to revoke a certificate.
//   - options - ClientRevokeOptions contains the optional parameters for the Client.Revoke method.
func (client *Client) Revoke(ctx context.Context, baseURL string, caName string, serialNumber string, r RevokeRequest, options *ClientRevokeOptions) (ClientRevokeResponse, error) {
	req, err := client.revokeCreateRequest(ctx, baseURL, caName, serialNumber, r, options)
	if err != nil {
		return ClientRevokeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClientRevokeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return ClientRevokeResponse{}, runtime.NewResponseError(resp)
	}
	return ClientRevokeResponse{}, nil
}

// revokeCreateRequest creates the Revoke request.
func (client *Client) revokeCreateRequest(ctx context.Context, baseURL string, caName string, serialNumber string, r RevokeRequest, options *ClientRevokeOptions) (*policy.Request, error) {
	host := "{BaseUrl}"
	host = strings.ReplaceAll(host, "{BaseUrl}", baseURL)
	urlPath := "/certificateAuthorities/{CAName}/certificates/{serialNumber}:revokeCertificate"
	if caName == "" {
		return nil, errors.New("parameter caName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{CAName}", url.PathEscape(caName))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Include != nil {
		reqQP.Set("include", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(options.Include), "[]")), ","))
	}
	reqQP.Set("api-version", "2022-09-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, r)
}
