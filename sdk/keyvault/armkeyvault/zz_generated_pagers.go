// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// DeletedManagedHsmListResultPager provides iteration over DeletedManagedHsmListResult pages.
type DeletedManagedHsmListResultPager interface {
	azcore.Pager

	// Page returns the current DeletedManagedHsmListResultResponse.
	PageResponse() DeletedManagedHsmListResultResponse
}

type deletedManagedHsmListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedManagedHsmListResultHandleError func(*azcore.Response) error

type deletedManagedHsmListResultHandleResponse func(*azcore.Response) (DeletedManagedHsmListResultResponse, error)

type deletedManagedHsmListResultAdvancePage func(context.Context, DeletedManagedHsmListResultResponse) (*azcore.Request, error)

type deletedManagedHsmListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedManagedHsmListResultCreateRequest
	// callback for handling response errors
	errorer deletedManagedHsmListResultHandleError
	// callback for handling the HTTP response
	responder deletedManagedHsmListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedManagedHsmListResultAdvancePage
	// contains the current response
	current DeletedManagedHsmListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedManagedHsmListResultPager) Err() error {
	return p.err
}

func (p *deletedManagedHsmListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedManagedHsmListResult.NextLink == nil || len(*p.current.DeletedManagedHsmListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedManagedHsmListResultPager) PageResponse() DeletedManagedHsmListResultResponse {
	return p.current
}

// DeletedVaultListResultPager provides iteration over DeletedVaultListResult pages.
type DeletedVaultListResultPager interface {
	azcore.Pager

	// Page returns the current DeletedVaultListResultResponse.
	PageResponse() DeletedVaultListResultResponse
}

type deletedVaultListResultCreateRequest func(context.Context) (*azcore.Request, error)

type deletedVaultListResultHandleError func(*azcore.Response) error

type deletedVaultListResultHandleResponse func(*azcore.Response) (DeletedVaultListResultResponse, error)

type deletedVaultListResultAdvancePage func(context.Context, DeletedVaultListResultResponse) (*azcore.Request, error)

type deletedVaultListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester deletedVaultListResultCreateRequest
	// callback for handling response errors
	errorer deletedVaultListResultHandleError
	// callback for handling the HTTP response
	responder deletedVaultListResultHandleResponse
	// callback for advancing to the next page
	advancer deletedVaultListResultAdvancePage
	// contains the current response
	current DeletedVaultListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *deletedVaultListResultPager) Err() error {
	return p.err
}

func (p *deletedVaultListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedVaultListResult.NextLink == nil || len(*p.current.DeletedVaultListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedVaultListResultPager) PageResponse() DeletedVaultListResultResponse {
	return p.current
}

// MHSMPrivateEndpointConnectionsListResultPager provides iteration over MHSMPrivateEndpointConnectionsListResult pages.
type MHSMPrivateEndpointConnectionsListResultPager interface {
	azcore.Pager

	// Page returns the current MHSMPrivateEndpointConnectionsListResultResponse.
	PageResponse() MHSMPrivateEndpointConnectionsListResultResponse
}

type mhsmPrivateEndpointConnectionsListResultCreateRequest func(context.Context) (*azcore.Request, error)

type mhsmPrivateEndpointConnectionsListResultHandleError func(*azcore.Response) error

type mhsmPrivateEndpointConnectionsListResultHandleResponse func(*azcore.Response) (MHSMPrivateEndpointConnectionsListResultResponse, error)

type mhsmPrivateEndpointConnectionsListResultAdvancePage func(context.Context, MHSMPrivateEndpointConnectionsListResultResponse) (*azcore.Request, error)

type mhsmPrivateEndpointConnectionsListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester mhsmPrivateEndpointConnectionsListResultCreateRequest
	// callback for handling response errors
	errorer mhsmPrivateEndpointConnectionsListResultHandleError
	// callback for handling the HTTP response
	responder mhsmPrivateEndpointConnectionsListResultHandleResponse
	// callback for advancing to the next page
	advancer mhsmPrivateEndpointConnectionsListResultAdvancePage
	// contains the current response
	current MHSMPrivateEndpointConnectionsListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *mhsmPrivateEndpointConnectionsListResultPager) Err() error {
	return p.err
}

func (p *mhsmPrivateEndpointConnectionsListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MHSMPrivateEndpointConnectionsListResult.NextLink == nil || len(*p.current.MHSMPrivateEndpointConnectionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *mhsmPrivateEndpointConnectionsListResultPager) PageResponse() MHSMPrivateEndpointConnectionsListResultResponse {
	return p.current
}

// ManagedHsmListResultPager provides iteration over ManagedHsmListResult pages.
type ManagedHsmListResultPager interface {
	azcore.Pager

	// Page returns the current ManagedHsmListResultResponse.
	PageResponse() ManagedHsmListResultResponse
}

type managedHsmListResultCreateRequest func(context.Context) (*azcore.Request, error)

type managedHsmListResultHandleError func(*azcore.Response) error

type managedHsmListResultHandleResponse func(*azcore.Response) (ManagedHsmListResultResponse, error)

type managedHsmListResultAdvancePage func(context.Context, ManagedHsmListResultResponse) (*azcore.Request, error)

type managedHsmListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester managedHsmListResultCreateRequest
	// callback for handling response errors
	errorer managedHsmListResultHandleError
	// callback for handling the HTTP response
	responder managedHsmListResultHandleResponse
	// callback for advancing to the next page
	advancer managedHsmListResultAdvancePage
	// contains the current response
	current ManagedHsmListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *managedHsmListResultPager) Err() error {
	return p.err
}

func (p *managedHsmListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedHsmListResult.NextLink == nil || len(*p.current.ManagedHsmListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *managedHsmListResultPager) PageResponse() ManagedHsmListResultResponse {
	return p.current
}

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager interface {
	azcore.Pager

	// Page returns the current OperationListResultResponse.
	PageResponse() OperationListResultResponse
}

type operationListResultCreateRequest func(context.Context) (*azcore.Request, error)

type operationListResultHandleError func(*azcore.Response) error

type operationListResultHandleResponse func(*azcore.Response) (OperationListResultResponse, error)

type operationListResultAdvancePage func(context.Context, OperationListResultResponse) (*azcore.Request, error)

type operationListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListResultCreateRequest
	// callback for handling response errors
	errorer operationListResultHandleError
	// callback for handling the HTTP response
	responder operationListResultHandleResponse
	// callback for advancing to the next page
	advancer operationListResultAdvancePage
	// contains the current response
	current OperationListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListResultPager) Err() error {
	return p.err
}

func (p *operationListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListResultPager) PageResponse() OperationListResultResponse {
	return p.current
}

// PrivateEndpointConnectionListResultPager provides iteration over PrivateEndpointConnectionListResult pages.
type PrivateEndpointConnectionListResultPager interface {
	azcore.Pager

	// Page returns the current PrivateEndpointConnectionListResultResponse.
	PageResponse() PrivateEndpointConnectionListResultResponse
}

type privateEndpointConnectionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type privateEndpointConnectionListResultHandleError func(*azcore.Response) error

type privateEndpointConnectionListResultHandleResponse func(*azcore.Response) (PrivateEndpointConnectionListResultResponse, error)

type privateEndpointConnectionListResultAdvancePage func(context.Context, PrivateEndpointConnectionListResultResponse) (*azcore.Request, error)

type privateEndpointConnectionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateEndpointConnectionListResultCreateRequest
	// callback for handling response errors
	errorer privateEndpointConnectionListResultHandleError
	// callback for handling the HTTP response
	responder privateEndpointConnectionListResultHandleResponse
	// callback for advancing to the next page
	advancer privateEndpointConnectionListResultAdvancePage
	// contains the current response
	current PrivateEndpointConnectionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateEndpointConnectionListResultPager) Err() error {
	return p.err
}

func (p *privateEndpointConnectionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointConnectionListResultPager) PageResponse() PrivateEndpointConnectionListResultResponse {
	return p.current
}

// ResourceListResultPager provides iteration over ResourceListResult pages.
type ResourceListResultPager interface {
	azcore.Pager

	// Page returns the current ResourceListResultResponse.
	PageResponse() ResourceListResultResponse
}

type resourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type resourceListResultHandleError func(*azcore.Response) error

type resourceListResultHandleResponse func(*azcore.Response) (ResourceListResultResponse, error)

type resourceListResultAdvancePage func(context.Context, ResourceListResultResponse) (*azcore.Request, error)

type resourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester resourceListResultCreateRequest
	// callback for handling response errors
	errorer resourceListResultHandleError
	// callback for handling the HTTP response
	responder resourceListResultHandleResponse
	// callback for advancing to the next page
	advancer resourceListResultAdvancePage
	// contains the current response
	current ResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *resourceListResultPager) Err() error {
	return p.err
}

func (p *resourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceListResult.NextLink == nil || len(*p.current.ResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceListResultPager) PageResponse() ResourceListResultResponse {
	return p.current
}

// SecretListResultPager provides iteration over SecretListResult pages.
type SecretListResultPager interface {
	azcore.Pager

	// Page returns the current SecretListResultResponse.
	PageResponse() SecretListResultResponse
}

type secretListResultCreateRequest func(context.Context) (*azcore.Request, error)

type secretListResultHandleError func(*azcore.Response) error

type secretListResultHandleResponse func(*azcore.Response) (SecretListResultResponse, error)

type secretListResultAdvancePage func(context.Context, SecretListResultResponse) (*azcore.Request, error)

type secretListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester secretListResultCreateRequest
	// callback for handling response errors
	errorer secretListResultHandleError
	// callback for handling the HTTP response
	responder secretListResultHandleResponse
	// callback for advancing to the next page
	advancer secretListResultAdvancePage
	// contains the current response
	current SecretListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *secretListResultPager) Err() error {
	return p.err
}

func (p *secretListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecretListResult.NextLink == nil || len(*p.current.SecretListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *secretListResultPager) PageResponse() SecretListResultResponse {
	return p.current
}

// VaultListResultPager provides iteration over VaultListResult pages.
type VaultListResultPager interface {
	azcore.Pager

	// Page returns the current VaultListResultResponse.
	PageResponse() VaultListResultResponse
}

type vaultListResultCreateRequest func(context.Context) (*azcore.Request, error)

type vaultListResultHandleError func(*azcore.Response) error

type vaultListResultHandleResponse func(*azcore.Response) (VaultListResultResponse, error)

type vaultListResultAdvancePage func(context.Context, VaultListResultResponse) (*azcore.Request, error)

type vaultListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester vaultListResultCreateRequest
	// callback for handling response errors
	errorer vaultListResultHandleError
	// callback for handling the HTTP response
	responder vaultListResultHandleResponse
	// callback for advancing to the next page
	advancer vaultListResultAdvancePage
	// contains the current response
	current VaultListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *vaultListResultPager) Err() error {
	return p.err
}

func (p *vaultListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultListResult.NextLink == nil || len(*p.current.VaultListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
  } else {
		req, err = p.requester(ctx)
  }
	if err != nil {
		p.err = err
		return false
	}
  	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
	p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *vaultListResultPager) PageResponse() VaultListResultResponse {
	return p.current
}

