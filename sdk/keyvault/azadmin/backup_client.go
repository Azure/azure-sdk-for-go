//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azadmin

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BackupClient contains the methods for the BackupClient group.
// Don't use this type directly, use NewBackupClient() instead.
type BackupClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// BeginFullBackup - Creates a full backup using a user-provided SAS token to an Azure blob storage container.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// azureStorageBlobContainerURI - Azure blob shared access signature token pointing to a valid Azure blob container where
// full backup needs to be stored. This token needs to be valid for at least next 24 hours from the time of making
// this call
// options - BackupClientBeginFullBackupOptions contains the optional parameters for the BackupClient.BeginFullBackup method.
func (client *BackupClient) BeginFullBackup(ctx context.Context, azureStorageBlobContainerURI SASTokenParameter, options *BackupClientBeginFullBackupOptions) (*runtime.Poller[BackupClientFullBackupResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.fullBackup(ctx, azureStorageBlobContainerURI, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientFullBackupResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientFullBackupResponse](options.ResumeToken, client.pl, nil)
	}
}

// FullBackup - Creates a full backup using a user-provided SAS token to an Azure blob storage container.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) fullBackup(ctx context.Context, azureStorageBlobContainerURI SASTokenParameter, options *BackupClientBeginFullBackupOptions) (*http.Response, error) {
	req, err := client.fullBackupCreateRequest(ctx, azureStorageBlobContainerURI, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// fullBackupCreateRequest creates the FullBackup request.
func (client *BackupClient) fullBackupCreateRequest(ctx context.Context, azureStorageBlobContainerURI SASTokenParameter, options *BackupClientBeginFullBackupOptions) (*policy.Request, error) {
	urlPath := "/backup"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, azureStorageBlobContainerURI)
}

// BeginFullRestore - Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup
// folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// restoreBlobDetails - The Azure blob SAS token pointing to a folder where the previous successful full backup was stored
// options - BackupClientBeginFullRestoreOptions contains the optional parameters for the BackupClient.BeginFullRestore method.
func (client *BackupClient) BeginFullRestore(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOptions) (*runtime.Poller[BackupClientFullRestoreResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.fullRestore(ctx, restoreBlobDetails, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientFullRestoreResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientFullRestoreResponse](options.ResumeToken, client.pl, nil)
	}
}

// FullRestore - Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup
// folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) fullRestore(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOptions) (*http.Response, error) {
	req, err := client.fullRestoreCreateRequest(ctx, restoreBlobDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// fullRestoreCreateRequest creates the FullRestore request.
func (client *BackupClient) fullRestoreCreateRequest(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOptions) (*policy.Request, error) {
	urlPath := "/restore"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, restoreBlobDetails)
}

// BeginSelectiveKeyRestore - Restores all key versions of a given key using user supplied SAS token pointing to a previously
// stored Azure Blob storage backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// keyName - The name of the key to be restored from the user supplied backup
// restoreBlobDetails - The Azure blob SAS token pointing to a folder where the previous successful full backup was stored
// options - BackupClientBeginSelectiveKeyRestoreOptions contains the optional parameters for the BackupClient.BeginSelectiveKeyRestore
// method.
func (client *BackupClient) BeginSelectiveKeyRestore(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOptions) (*runtime.Poller[BackupClientSelectiveKeyRestoreResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.selectiveKeyRestore(ctx, keyName, restoreBlobDetails, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientSelectiveKeyRestoreResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientSelectiveKeyRestoreResponse](options.ResumeToken, client.pl, nil)
	}
}

// SelectiveKeyRestore - Restores all key versions of a given key using user supplied SAS token pointing to a previously stored
// Azure Blob storage backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) selectiveKeyRestore(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOptions) (*http.Response, error) {
	req, err := client.selectiveKeyRestoreCreateRequest(ctx, keyName, restoreBlobDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// selectiveKeyRestoreCreateRequest creates the SelectiveKeyRestore request.
func (client *BackupClient) selectiveKeyRestoreCreateRequest(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOptions) (*policy.Request, error) {
	urlPath := "/keys/{keyName}/restore"
	if keyName == "" {
		return nil, errors.New("parameter keyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{keyName}", url.PathEscape(keyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, restoreBlobDetails)
}
