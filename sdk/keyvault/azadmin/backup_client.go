//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azadmin

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BackupClient contains the methods for the BackupClient group.
// Don't use this type directly, use NewBackupClient() instead.
type BackupClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// BeginFullBackup - Creates a full backup using a user-provided SAS token to an Azure blob storage container.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// options - BackupClientBeginFullBackupOptions contains the optional parameters for the BackupClient.BeginFullBackup method.
func (client *BackupClient) BeginFullBackup(ctx context.Context, options *BackupClientBeginFullBackupOptions) (*runtime.Poller[BackupClientFullBackupResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.fullBackup(ctx, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientFullBackupResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientFullBackupResponse](options.ResumeToken, client.pl, nil)
	}
}

// FullBackup - Creates a full backup using a user-provided SAS token to an Azure blob storage container.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) fullBackup(ctx context.Context, options *BackupClientBeginFullBackupOptions) (*http.Response, error) {
	req, err := client.fullBackupCreateRequest(ctx, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// fullBackupCreateRequest creates the FullBackup request.
func (client *BackupClient) fullBackupCreateRequest(ctx context.Context, options *BackupClientBeginFullBackupOptions) (*policy.Request, error) {
	urlPath := "/backup"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.AzureStorageBlobContainerURI != nil {
		return req, runtime.MarshalAsJSON(req, *options.AzureStorageBlobContainerURI)
	}
	return req, nil
}

// FullBackupStatus - Returns the status of full backup operation
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// jobID - The id returned as part of the backup request
// options - BackupClientFullBackupStatusOptions contains the optional parameters for the BackupClient.FullBackupStatus method.
func (client *BackupClient) FullBackupStatus(ctx context.Context, jobID string, options *BackupClientFullBackupStatusOptions) (BackupClientFullBackupStatusResponse, error) {
	req, err := client.fullBackupStatusCreateRequest(ctx, jobID, options)
	if err != nil {
		return BackupClientFullBackupStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BackupClientFullBackupStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BackupClientFullBackupStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.fullBackupStatusHandleResponse(resp)
}

// fullBackupStatusCreateRequest creates the FullBackupStatus request.
func (client *BackupClient) fullBackupStatusCreateRequest(ctx context.Context, jobID string, options *BackupClientFullBackupStatusOptions) (*policy.Request, error) {
	urlPath := "/backup/{jobId}/pending"
	if jobID == "" {
		return nil, errors.New("parameter jobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobId}", url.PathEscape(jobID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// fullBackupStatusHandleResponse handles the FullBackupStatus response.
func (client *BackupClient) fullBackupStatusHandleResponse(resp *http.Response) (BackupClientFullBackupStatusResponse, error) {
	result := BackupClientFullBackupStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.FullBackupOperation); err != nil {
		return BackupClientFullBackupStatusResponse{}, err
	}
	return result, nil
}

// BeginFullRestoreOperation - Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage
// backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// restoreBlobDetails - The Azure blob SAS token pointing to a folder where the previous successful full backup was stored
// options - BackupClientBeginFullRestoreOperationOptions contains the optional parameters for the BackupClient.BeginFullRestoreOperation
// method.
func (client *BackupClient) BeginFullRestoreOperation(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOperationOptions) (*runtime.Poller[BackupClientFullRestoreOperationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.fullRestoreOperation(ctx, restoreBlobDetails, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientFullRestoreOperationResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientFullRestoreOperationResponse](options.ResumeToken, client.pl, nil)
	}
}

// FullRestoreOperation - Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage
// backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) fullRestoreOperation(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOperationOptions) (*http.Response, error) {
	req, err := client.fullRestoreOperationCreateRequest(ctx, restoreBlobDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// fullRestoreOperationCreateRequest creates the FullRestoreOperation request.
func (client *BackupClient) fullRestoreOperationCreateRequest(ctx context.Context, restoreBlobDetails RestoreOperationParameters, options *BackupClientBeginFullRestoreOperationOptions) (*policy.Request, error) {
	urlPath := "/restore"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, restoreBlobDetails)
}

// RestoreStatus - Returns the status of restore operation
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// jobID - The Job Id returned part of the restore operation
// options - BackupClientRestoreStatusOptions contains the optional parameters for the BackupClient.RestoreStatus method.
func (client *BackupClient) RestoreStatus(ctx context.Context, jobID string, options *BackupClientRestoreStatusOptions) (BackupClientRestoreStatusResponse, error) {
	req, err := client.restoreStatusCreateRequest(ctx, jobID, options)
	if err != nil {
		return BackupClientRestoreStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BackupClientRestoreStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BackupClientRestoreStatusResponse{}, runtime.NewResponseError(resp)
	}
	return client.restoreStatusHandleResponse(resp)
}

// restoreStatusCreateRequest creates the RestoreStatus request.
func (client *BackupClient) restoreStatusCreateRequest(ctx context.Context, jobID string, options *BackupClientRestoreStatusOptions) (*policy.Request, error) {
	urlPath := "/restore/{jobId}/pending"
	if jobID == "" {
		return nil, errors.New("parameter jobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobId}", url.PathEscape(jobID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// restoreStatusHandleResponse handles the RestoreStatus response.
func (client *BackupClient) restoreStatusHandleResponse(resp *http.Response) (BackupClientRestoreStatusResponse, error) {
	result := BackupClientRestoreStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RestoreOperation); err != nil {
		return BackupClientRestoreStatusResponse{}, err
	}
	return result, nil
}

// BeginSelectiveKeyRestoreOperation - Restores all key versions of a given key using user supplied SAS token pointing to
// a previously stored Azure Blob storage backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// keyName - The name of the key to be restored from the user supplied backup
// restoreBlobDetails - The Azure blob SAS token pointing to a folder where the previous successful full backup was stored
// options - BackupClientBeginSelectiveKeyRestoreOperationOptions contains the optional parameters for the BackupClient.BeginSelectiveKeyRestoreOperation
// method.
func (client *BackupClient) BeginSelectiveKeyRestoreOperation(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOperationOptions) (*runtime.Poller[BackupClientSelectiveKeyRestoreOperationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.selectiveKeyRestoreOperation(ctx, keyName, restoreBlobDetails, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[BackupClientSelectiveKeyRestoreOperationResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[BackupClientSelectiveKeyRestoreOperationResponse](options.ResumeToken, client.pl, nil)
	}
}

// SelectiveKeyRestoreOperation - Restores all key versions of a given key using user supplied SAS token pointing to a previously
// stored Azure Blob storage backup folder
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
func (client *BackupClient) selectiveKeyRestoreOperation(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOperationOptions) (*http.Response, error) {
	req, err := client.selectiveKeyRestoreOperationCreateRequest(ctx, keyName, restoreBlobDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// selectiveKeyRestoreOperationCreateRequest creates the SelectiveKeyRestoreOperation request.
func (client *BackupClient) selectiveKeyRestoreOperationCreateRequest(ctx context.Context, keyName string, restoreBlobDetails SelectiveKeyRestoreOperationParameters, options *BackupClientBeginSelectiveKeyRestoreOperationOptions) (*policy.Request, error) {
	urlPath := "/keys/{keyName}/restore"
	if keyName == "" {
		return nil, errors.New("parameter keyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{keyName}", url.PathEscape(keyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, restoreBlobDetails)
}
