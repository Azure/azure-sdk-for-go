//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azadmin

import "time"

// AccessControlClientCreateOrUpdateRoleDefinitionOptions contains the optional parameters for the AccessControlClient.CreateOrUpdateRoleDefinition
// method.
type AccessControlClientCreateOrUpdateRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientCreateRoleAssignmentOptions contains the optional parameters for the AccessControlClient.CreateRoleAssignment
// method.
type AccessControlClientCreateRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientDeleteRoleAssignmentOptions contains the optional parameters for the AccessControlClient.DeleteRoleAssignment
// method.
type AccessControlClientDeleteRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientDeleteRoleDefinitionOptions contains the optional parameters for the AccessControlClient.DeleteRoleDefinition
// method.
type AccessControlClientDeleteRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientGetRoleAssignmentOptions contains the optional parameters for the AccessControlClient.GetRoleAssignment
// method.
type AccessControlClientGetRoleAssignmentOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientGetRoleDefinitionOptions contains the optional parameters for the AccessControlClient.GetRoleDefinition
// method.
type AccessControlClientGetRoleDefinitionOptions struct {
	// placeholder for future optional parameters
}

// AccessControlClientListRoleAssignmentsOptions contains the optional parameters for the AccessControlClient.ListRoleAssignments
// method.
type AccessControlClientListRoleAssignmentsOptions struct {
	// The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId
	// eq {id} to return all role assignments at, above or below the
	// scope for the specified principal.
	Filter *string
}

// AccessControlClientListRoleDefinitionsOptions contains the optional parameters for the AccessControlClient.ListRoleDefinitions
// method.
type AccessControlClientListRoleDefinitionsOptions struct {
	// The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well.
	Filter *string
}

// BackupClientBeginFullBackupOptions contains the optional parameters for the BackupClient.BeginFullBackup method.
type BackupClientBeginFullBackupOptions struct {
	// Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be stored.
	// This token needs to be valid for at least next 24 hours from the time of making
	// this call
	AzureStorageBlobContainerURI *SASTokenParameter
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// BackupClientBeginFullRestoreOperationOptions contains the optional parameters for the BackupClient.BeginFullRestoreOperation
// method.
type BackupClientBeginFullRestoreOperationOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// BackupClientBeginSelectiveKeyRestoreOperationOptions contains the optional parameters for the BackupClient.BeginSelectiveKeyRestoreOperation
// method.
type BackupClientBeginSelectiveKeyRestoreOperationOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// BackupClientFullBackupStatusOptions contains the optional parameters for the BackupClient.FullBackupStatus method.
type BackupClientFullBackupStatusOptions struct {
	// placeholder for future optional parameters
}

// BackupClientRestoreStatusOptions contains the optional parameters for the BackupClient.RestoreStatus method.
type BackupClientRestoreStatusOptions struct {
	// placeholder for future optional parameters
}

// Error - The key vault server error.
type Error struct {
	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The key vault server error.
	InnerError *Error `json:"innererror,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// FullBackupOperation - Full backup operation
type FullBackupOperation struct {
	// The Azure blob storage container Uri which contains the full backup
	AzureStorageBlobContainerURI *string `json:"azureStorageBlobContainerUri,omitempty"`

	// The end time of the backup operation in UTC
	EndTime *time.Time `json:"endTime,omitempty"`

	// Error encountered, if any, during the full backup operation.
	Error *Error `json:"error,omitempty"`

	// Identifier for the full backup operation.
	JobID *string `json:"jobId,omitempty"`

	// The start time of the backup operation in UTC
	StartTime *time.Time `json:"startTime,omitempty"`

	// Status of the backup operation.
	Status *string `json:"status,omitempty"`

	// The status details of backup operation.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// KeyVaultError - The key vault error exception.
type KeyVaultError struct {
	// READ-ONLY; The key vault server error.
	Error *Error `json:"error,omitempty" azure:"ro"`
}

// Permission - Role definition permissions.
type Permission struct {
	// Action permissions that are granted.
	Actions []*string `json:"actions,omitempty"`

	// Data action permissions that are granted.
	DataActions []*DataAction `json:"dataActions,omitempty"`

	// Action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal.
	NotActions []*string `json:"notActions,omitempty"`

	// Data action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal.
	NotDataActions []*DataAction `json:"notDataActions,omitempty"`
}

// RestoreOperation - Restore operation
type RestoreOperation struct {
	// The end time of the restore operation
	EndTime *time.Time `json:"endTime,omitempty"`

	// Error encountered, if any, during the restore operation.
	Error *Error `json:"error,omitempty"`

	// Identifier for the restore operation.
	JobID *string `json:"jobId,omitempty"`

	// The start time of the restore operation
	StartTime *time.Time `json:"startTime,omitempty"`

	// Status of the restore operation.
	Status *string `json:"status,omitempty"`

	// The status details of restore operation.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

type RestoreOperationParameters struct {
	// REQUIRED; The Folder name of the blob where the previous successful full backup was stored
	FolderToRestore *string `json:"folderToRestore,omitempty"`

	// REQUIRED
	SasTokenParameters *SASTokenParameter `json:"sasTokenParameters,omitempty"`
}

// RoleAssignment - Role Assignments
type RoleAssignment struct {
	// Role assignment properties.
	Properties *RoleAssignmentPropertiesWithScope `json:"properties,omitempty"`

	// READ-ONLY; The role assignment ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The role assignment name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The role assignment type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RoleAssignmentCreateParameters - Role assignment create parameters.
type RoleAssignmentCreateParameters struct {
	// REQUIRED; Role assignment properties.
	Properties *RoleAssignmentProperties `json:"properties,omitempty"`
}

// RoleAssignmentFilter - Role Assignments filter
type RoleAssignmentFilter struct {
	// Returns role assignment of the specific principal.
	PrincipalID *string `json:"principalId,omitempty"`
}

// RoleAssignmentListResult - Role assignment list operation result.
type RoleAssignmentListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// Role assignment list.
	Value []*RoleAssignment `json:"value,omitempty"`
}

// RoleAssignmentProperties - Role assignment properties.
type RoleAssignmentProperties struct {
	// REQUIRED; The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user,
	// service principal, or security group.
	PrincipalID *string `json:"principalId,omitempty"`

	// REQUIRED; The role definition ID used in the role assignment.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
}

// RoleAssignmentPropertiesWithScope - Role assignment properties with scope.
type RoleAssignmentPropertiesWithScope struct {
	// The principal ID.
	PrincipalID *string `json:"principalId,omitempty"`

	// The role definition ID.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`

	// The role scope.
	Scope *RoleScope `json:"scope,omitempty"`
}

// RoleDefinition - Role definition.
type RoleDefinition struct {
	// Role definition properties.
	Properties *RoleDefinitionProperties `json:"properties,omitempty"`

	// READ-ONLY; The role definition ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The role definition name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The role definition type.
	Type *RoleDefinitionType `json:"type,omitempty" azure:"ro"`
}

// RoleDefinitionCreateParameters - Role definition create parameters.
type RoleDefinitionCreateParameters struct {
	// REQUIRED; Role definition properties.
	Properties *RoleDefinitionProperties `json:"properties,omitempty"`
}

// RoleDefinitionFilter - Role Definitions filter
type RoleDefinitionFilter struct {
	// Returns role definition with the specific name.
	RoleName *string `json:"roleName,omitempty"`
}

// RoleDefinitionListResult - Role definition list operation result.
type RoleDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// Role definition list.
	Value []*RoleDefinition `json:"value,omitempty"`
}

// RoleDefinitionProperties - Role definition properties.
type RoleDefinitionProperties struct {
	// Role definition assignable scopes.
	AssignableScopes []*RoleScope `json:"assignableScopes,omitempty"`

	// The role definition description.
	Description *string `json:"description,omitempty"`

	// Role definition permissions.
	Permissions []*Permission `json:"permissions,omitempty"`

	// The role name.
	RoleName *string `json:"roleName,omitempty"`

	// The role type.
	RoleType *RoleType `json:"type,omitempty"`
}

type SASTokenParameter struct {
	// REQUIRED; Azure Blob storage container Uri
	StorageResourceURI *string `json:"storageResourceUri,omitempty"`

	// REQUIRED; The SAS token pointing to an Azure Blob storage container
	Token *string `json:"token,omitempty"`
}

// SelectiveKeyRestoreOperation - Selective Key Restore operation
type SelectiveKeyRestoreOperation struct {
	// The end time of the restore operation
	EndTime *time.Time `json:"endTime,omitempty"`

	// Error encountered, if any, during the selective key restore operation.
	Error *Error `json:"error,omitempty"`

	// Identifier for the selective key restore operation.
	JobID *string `json:"jobId,omitempty"`

	// The start time of the restore operation
	StartTime *time.Time `json:"startTime,omitempty"`

	// Status of the restore operation.
	Status *string `json:"status,omitempty"`

	// The status details of restore operation.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

type SelectiveKeyRestoreOperationParameters struct {
	// REQUIRED; The Folder name of the blob where the previous successful full backup was stored
	Folder *string `json:"folder,omitempty"`

	// REQUIRED
	SasTokenParameters *SASTokenParameter `json:"sasTokenParameters,omitempty"`
}

type Setting struct {
	// REQUIRED; The account setting to be updated
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the pool setting.
	Value *string `json:"value,omitempty"`

	// The type specifier of the value.
	Type *SettingTypeEnum `json:"type,omitempty"`
}

// SettingsClientGetSettingOptions contains the optional parameters for the SettingsClient.GetSetting method.
type SettingsClientGetSettingOptions struct {
	// placeholder for future optional parameters
}

// SettingsClientGetSettingsOptions contains the optional parameters for the SettingsClient.GetSettings method.
type SettingsClientGetSettingsOptions struct {
	// placeholder for future optional parameters
}

// SettingsClientUpdateSettingOptions contains the optional parameters for the SettingsClient.UpdateSetting method.
type SettingsClientUpdateSettingOptions struct {
	// placeholder for future optional parameters
}

// SettingsListResult - The settings list result.
type SettingsListResult struct {
	// READ-ONLY; A response message containing a list of account settings with their associated value.
	Settings []*Setting `json:"settings,omitempty" azure:"ro"`
}

// UpdateSettingRequest - The update settings request object.
type UpdateSettingRequest struct {
	// REQUIRED; The value of the pool setting.
	Value *string `json:"value,omitempty"`
}
