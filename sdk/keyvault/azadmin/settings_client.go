//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azadmin

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SettingsClient contains the methods for the Settings group.
// Don't use this type directly, use NewSettingsClient() instead.
type SettingsClient struct {
	endpoint string
	pl       runtime.Pipeline
}

// GetSetting - Retrieves the setting object of a specified setting name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// settingName - The name of the account setting. Must be a valid settings option.
// options - SettingsClientGetSettingOptions contains the optional parameters for the SettingsClient.GetSetting method.
func (client *SettingsClient) GetSetting(ctx context.Context, settingName string, options *SettingsClientGetSettingOptions) (SettingsClientGetSettingResponse, error) {
	req, err := client.getSettingCreateRequest(ctx, settingName, options)
	if err != nil {
		return SettingsClientGetSettingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SettingsClientGetSettingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SettingsClientGetSettingResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSettingHandleResponse(resp)
}

// getSettingCreateRequest creates the GetSetting request.
func (client *SettingsClient) getSettingCreateRequest(ctx context.Context, settingName string, options *SettingsClientGetSettingOptions) (*policy.Request, error) {
	urlPath := "/settings/{setting-name}"
	if settingName == "" {
		return nil, errors.New("parameter settingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{setting-name}", url.PathEscape(settingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSettingHandleResponse handles the GetSetting response.
func (client *SettingsClient) getSettingHandleResponse(resp *http.Response) (SettingsClientGetSettingResponse, error) {
	result := SettingsClientGetSettingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Setting); err != nil {
		return SettingsClientGetSettingResponse{}, err
	}
	return result, nil
}

// GetSettings - Retrieves a list of all the available account settings that can be configured.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// options - SettingsClientGetSettingsOptions contains the optional parameters for the SettingsClient.GetSettings method.
func (client *SettingsClient) GetSettings(ctx context.Context, options *SettingsClientGetSettingsOptions) (SettingsClientGetSettingsResponse, error) {
	req, err := client.getSettingsCreateRequest(ctx, options)
	if err != nil {
		return SettingsClientGetSettingsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SettingsClientGetSettingsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SettingsClientGetSettingsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSettingsHandleResponse(resp)
}

// getSettingsCreateRequest creates the GetSettings request.
func (client *SettingsClient) getSettingsCreateRequest(ctx context.Context, options *SettingsClientGetSettingsOptions) (*policy.Request, error) {
	urlPath := "/settings"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getSettingsHandleResponse handles the GetSettings response.
func (client *SettingsClient) getSettingsHandleResponse(resp *http.Response) (SettingsClientGetSettingsResponse, error) {
	result := SettingsClientGetSettingsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SettingsListResult); err != nil {
		return SettingsClientGetSettingsResponse{}, err
	}
	return result, nil
}

// UpdateSetting - Description of the pool setting to be updated
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 7.4-preview.1
// settingName - The name of the account setting. Must be a valid settings option.
// parameters - The parameters to update an account setting.
// options - SettingsClientUpdateSettingOptions contains the optional parameters for the SettingsClient.UpdateSetting method.
func (client *SettingsClient) UpdateSetting(ctx context.Context, settingName string, parameters UpdateSettingRequest, options *SettingsClientUpdateSettingOptions) (SettingsClientUpdateSettingResponse, error) {
	req, err := client.updateSettingCreateRequest(ctx, settingName, parameters, options)
	if err != nil {
		return SettingsClientUpdateSettingResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SettingsClientUpdateSettingResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SettingsClientUpdateSettingResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateSettingHandleResponse(resp)
}

// updateSettingCreateRequest creates the UpdateSetting request.
func (client *SettingsClient) updateSettingCreateRequest(ctx context.Context, settingName string, parameters UpdateSettingRequest, options *SettingsClientUpdateSettingOptions) (*policy.Request, error) {
	urlPath := "/settings/{setting-name}"
	if settingName == "" {
		return nil, errors.New("parameter settingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{setting-name}", url.PathEscape(settingName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "7.4-preview.1")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateSettingHandleResponse handles the UpdateSetting response.
func (client *SettingsClient) updateSettingHandleResponse(resp *http.Response) (SettingsClientUpdateSettingResponse, error) {
	result := SettingsClientUpdateSettingResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Setting); err != nil {
		return SettingsClientUpdateSettingResponse{}, err
	}
	return result, nil
}
