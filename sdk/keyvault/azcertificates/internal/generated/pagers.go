//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package generated

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// KeyVaultClientGetCertificateIssuersPager provides operations for iterating over paged responses.
type KeyVaultClientGetCertificateIssuersPager struct {
	client    *KeyVaultClient
	current   KeyVaultClientGetCertificateIssuersResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyVaultClientGetCertificateIssuersResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeyVaultClientGetCertificateIssuersPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateIssuerListResult.NextLink == nil || len(*p.current.CertificateIssuerListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeyVaultClientGetCertificateIssuersPager) NextPage(ctx context.Context) (KeyVaultClientGetCertificateIssuersResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeyVaultClientGetCertificateIssuersResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeyVaultClientGetCertificateIssuersResponse{}, err
	}
	resp, err := p.client.Pl.Do(req)
	if err != nil {
		return KeyVaultClientGetCertificateIssuersResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeyVaultClientGetCertificateIssuersResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getCertificateIssuersHandleResponse(resp)
	if err != nil {
		return KeyVaultClientGetCertificateIssuersResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// KeyVaultClientGetCertificateVersionsPager provides operations for iterating over paged responses.
type KeyVaultClientGetCertificateVersionsPager struct {
	client    *KeyVaultClient
	current   KeyVaultClientGetCertificateVersionsResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyVaultClientGetCertificateVersionsResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeyVaultClientGetCertificateVersionsPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateListResult.NextLink == nil || len(*p.current.CertificateListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeyVaultClientGetCertificateVersionsPager) NextPage(ctx context.Context) (KeyVaultClientGetCertificateVersionsResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeyVaultClientGetCertificateVersionsResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeyVaultClientGetCertificateVersionsResponse{}, err
	}
	resp, err := p.client.Pl.Do(req)
	if err != nil {
		return KeyVaultClientGetCertificateVersionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeyVaultClientGetCertificateVersionsResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getCertificateVersionsHandleResponse(resp)
	if err != nil {
		return KeyVaultClientGetCertificateVersionsResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// KeyVaultClientGetCertificatesPager provides operations for iterating over paged responses.
type KeyVaultClientGetCertificatesPager struct {
	client    *KeyVaultClient
	current   KeyVaultClientGetCertificatesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyVaultClientGetCertificatesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeyVaultClientGetCertificatesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateListResult.NextLink == nil || len(*p.current.CertificateListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeyVaultClientGetCertificatesPager) NextPage(ctx context.Context) (KeyVaultClientGetCertificatesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeyVaultClientGetCertificatesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeyVaultClientGetCertificatesResponse{}, err
	}
	resp, err := p.client.Pl.Do(req)
	if err != nil {
		return KeyVaultClientGetCertificatesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeyVaultClientGetCertificatesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getCertificatesHandleResponse(resp)
	if err != nil {
		return KeyVaultClientGetCertificatesResponse{}, err
	}
	p.current = result
	return p.current, nil
}

// KeyVaultClientGetDeletedCertificatesPager provides operations for iterating over paged responses.
type KeyVaultClientGetDeletedCertificatesPager struct {
	client    *KeyVaultClient
	current   KeyVaultClientGetDeletedCertificatesResponse
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyVaultClientGetDeletedCertificatesResponse) (*policy.Request, error)
}

// More returns true if there are more pages to retrieve.
func (p *KeyVaultClientGetDeletedCertificatesPager) More() bool {
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedCertificateListResult.NextLink == nil || len(*p.current.DeletedCertificateListResult.NextLink) == 0 {
			return false
		}
	}
	return true
}

// NextPage advances the pager to the next page.
func (p *KeyVaultClientGetDeletedCertificatesPager) NextPage(ctx context.Context) (KeyVaultClientGetDeletedCertificatesResponse, error) {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if !p.More() {
			return KeyVaultClientGetDeletedCertificatesResponse{}, errors.New("no more pages")
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		return KeyVaultClientGetDeletedCertificatesResponse{}, err
	}
	resp, err := p.client.Pl.Do(req)
	if err != nil {
		return KeyVaultClientGetDeletedCertificatesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {

		return KeyVaultClientGetDeletedCertificatesResponse{}, runtime.NewResponseError(resp)
	}
	result, err := p.client.getDeletedCertificatesHandleResponse(resp)
	if err != nil {
		return KeyVaultClientGetDeletedCertificatesResponse{}, err
	}
	p.current = result
	return p.current, nil
}
