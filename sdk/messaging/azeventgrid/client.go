//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package azeventgrid

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// Client contains the methods for the Client group.
// Don't use this type directly, use a constructor function instead.
type Client struct {
	internal *azcore.Client
}

// AcknowledgeCloudEvents - Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if at least
// one event is successfully acknowledged. The response body will include the set of successfully
// acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged
// events will no longer be available to any consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - AcknowledgeOptions.
//   - options - ClientAcknowledgeCloudEventsOptions contains the optional parameters for the Client.AcknowledgeCloudEvents method.
func (client *Client) AcknowledgeCloudEvents(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens AcknowledgeOptions, options *ClientAcknowledgeCloudEventsOptions) (ClientAcknowledgeCloudEventsResponse, error) {
	req, err := client.acknowledgeCloudEventsCreateRequest(ctx, endpoint, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return ClientAcknowledgeCloudEventsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientAcknowledgeCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientAcknowledgeCloudEventsResponse{}, runtime.NewResponseError(resp)
	}
	return client.acknowledgeCloudEventsHandleResponse(resp)
}

// acknowledgeCloudEventsCreateRequest creates the AcknowledgeCloudEvents request.
func (client *Client) acknowledgeCloudEventsCreateRequest(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens AcknowledgeOptions, options *ClientAcknowledgeCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, lockTokens)
}

// acknowledgeCloudEventsHandleResponse handles the AcknowledgeCloudEvents response.
func (client *Client) acknowledgeCloudEventsHandleResponse(resp *http.Response) (ClientAcknowledgeCloudEventsResponse, error) {
	result := ClientAcknowledgeCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcknowledgeResult); err != nil {
		return ClientAcknowledgeCloudEventsResponse{}, err
	}
	return result, nil
}

// PublishCloudEvents - Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP
// 200 status code with an empty JSON object in response. Otherwise, the server can return various error
// codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large,
// 410: which indicates that specific topic is not found, 400: for bad
// request, and 500: for internal server error.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net
//   - topicName - Topic Name.
//   - events - Array of Cloud Events being published.
//   - options - ClientPublishCloudEventsOptions contains the optional parameters for the Client.PublishCloudEvents method.
func (client *Client) internalPublishCloudEvents(ctx context.Context, endpoint string, topicName string, events []*CloudEvent, options *ClientPublishCloudEventsOptions) (ClientPublishCloudEventsResponse, error) {
	req, err := client.publishCloudEventsCreateRequest(ctx, endpoint, topicName, events, options)
	if err != nil {
		return ClientPublishCloudEventsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientPublishCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientPublishCloudEventsResponse{}, runtime.NewResponseError(resp)
	}
	return client.publishCloudEventsHandleResponse(resp)
}

// publishCloudEventsCreateRequest creates the PublishCloudEvents request.
func (client *Client) publishCloudEventsCreateRequest(ctx context.Context, endpoint string, topicName string, events []*CloudEvent, options *ClientPublishCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/topics/{topicName}:publish"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, events)
}

// publishCloudEventsHandleResponse handles the PublishCloudEvents response.
func (client *Client) publishCloudEventsHandleResponse(resp *http.Response) (ClientPublishCloudEventsResponse, error) {
	result := ClientPublishCloudEventsResponse{}
	body, err := runtime.Payload(resp)
	if err != nil {
		return ClientPublishCloudEventsResponse{}, err
	}
	result.RawJSON = body
	return result, nil
}

// ReceiveCloudEvents - Receive Batch of Cloud Events from the Event Subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - options - ClientReceiveCloudEventsOptions contains the optional parameters for the Client.ReceiveCloudEvents method.
func (client *Client) ReceiveCloudEvents(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, options *ClientReceiveCloudEventsOptions) (ClientReceiveCloudEventsResponse, error) {
	req, err := client.receiveCloudEventsCreateRequest(ctx, endpoint, topicName, eventSubscriptionName, options)
	if err != nil {
		return ClientReceiveCloudEventsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientReceiveCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientReceiveCloudEventsResponse{}, runtime.NewResponseError(resp)
	}
	return client.receiveCloudEventsHandleResponse(resp)
}

// receiveCloudEventsCreateRequest creates the ReceiveCloudEvents request.
func (client *Client) receiveCloudEventsCreateRequest(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, options *ClientReceiveCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	if options != nil && options.MaxEvents != nil {
		reqQP.Set("maxEvents", strconv.FormatInt(int64(*options.MaxEvents), 10))
	}
	if options != nil && options.MaxWaitTime != nil {
		reqQP.Set("maxWaitTime", strconv.FormatInt(int64(*options.MaxWaitTime), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// receiveCloudEventsHandleResponse handles the ReceiveCloudEvents response.
func (client *Client) receiveCloudEventsHandleResponse(resp *http.Response) (ClientReceiveCloudEventsResponse, error) {
	result := ClientReceiveCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReceiveResult); err != nil {
		return ClientReceiveCloudEventsResponse{}, err
	}
	return result, nil
}

// RejectCloudEvents - Reject batch of Cloud Events.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - RejectOptions
//   - options - ClientRejectCloudEventsOptions contains the optional parameters for the Client.RejectCloudEvents method.
func (client *Client) RejectCloudEvents(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens RejectOptions, options *ClientRejectCloudEventsOptions) (ClientRejectCloudEventsResponse, error) {
	req, err := client.rejectCloudEventsCreateRequest(ctx, endpoint, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return ClientRejectCloudEventsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientRejectCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientRejectCloudEventsResponse{}, runtime.NewResponseError(resp)
	}
	return client.rejectCloudEventsHandleResponse(resp)
}

// rejectCloudEventsCreateRequest creates the RejectCloudEvents request.
func (client *Client) rejectCloudEventsCreateRequest(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens RejectOptions, options *ClientRejectCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, lockTokens)
}

// rejectCloudEventsHandleResponse handles the RejectCloudEvents response.
func (client *Client) rejectCloudEventsHandleResponse(resp *http.Response) (ClientRejectCloudEventsResponse, error) {
	result := ClientRejectCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RejectResult); err != nil {
		return ClientRejectCloudEventsResponse{}, err
	}
	return result, nil
}

// ReleaseCloudEvents - Release batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event
// is successfully released. The response body will include the set of successfully released
// lockTokens, along with other failed lockTokens with their corresponding error information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-06-01-preview
//   - endpoint - The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - ReleaseOptions
//   - options - ClientReleaseCloudEventsOptions contains the optional parameters for the Client.ReleaseCloudEvents method.
func (client *Client) ReleaseCloudEvents(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens ReleaseOptions, options *ClientReleaseCloudEventsOptions) (ClientReleaseCloudEventsResponse, error) {
	req, err := client.releaseCloudEventsCreateRequest(ctx, endpoint, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return ClientReleaseCloudEventsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientReleaseCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClientReleaseCloudEventsResponse{}, runtime.NewResponseError(resp)
	}
	return client.releaseCloudEventsHandleResponse(resp)
}

// releaseCloudEventsCreateRequest creates the ReleaseCloudEvents request.
func (client *Client) releaseCloudEventsCreateRequest(ctx context.Context, endpoint string, topicName string, eventSubscriptionName string, lockTokens ReleaseOptions, options *ClientReleaseCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, lockTokens)
}

// releaseCloudEventsHandleResponse handles the ReleaseCloudEvents response.
func (client *Client) releaseCloudEventsHandleResponse(resp *http.Response) (ClientReleaseCloudEventsResponse, error) {
	result := ClientReleaseCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReleaseResult); err != nil {
		return ClientReleaseCloudEventsResponse{}, err
	}
	return result, nil
}

