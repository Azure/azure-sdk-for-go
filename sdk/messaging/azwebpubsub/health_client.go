//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azwebpubsub

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// HealthClient contains the methods for the Health group.
// Don't use this type directly, use a constructor function instead.
type HealthClient struct {
	internal *azcore.Client
	endpoint string
}

// GetServiceStatus - Get service health status.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-07-01
//   - options - HealthClientGetServiceStatusOptions contains the optional parameters for the HealthClient.GetServiceStatus method.
func (client *HealthClient) GetServiceStatus(ctx context.Context, options *HealthClientGetServiceStatusOptions) (HealthClientGetServiceStatusResponse, error) {
	var err error
	req, err := client.getServiceStatusCreateRequest(ctx, options)
	if err != nil {
		return HealthClientGetServiceStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HealthClientGetServiceStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return HealthClientGetServiceStatusResponse{}, err
	}
	return HealthClientGetServiceStatusResponse{}, nil
}

// getServiceStatusCreateRequest creates the GetServiceStatus request.
func (client *HealthClient) getServiceStatusCreateRequest(ctx context.Context, options *HealthClientGetServiceStatusOptions) (*policy.Request, error) {
	urlPath := "/api/health"
	req, err := runtime.NewRequest(ctx, http.MethodHead, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

