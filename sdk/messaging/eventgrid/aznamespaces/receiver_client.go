// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package aznamespaces

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ReceiverClient contains the methods for the Microsoft.EventGrid namespace.
// Don't use this type directly, use a constructor function instead.
type ReceiverClient struct {
	data receiverData

	internal *azcore.Client
	endpoint string
}

// acknowledge - Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock
// tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged events
// will no longer be available to be received by any consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - acknowledgeOptions - AcknowledgeOptions.
//   - options - receiverClientacknowledgeOptions contains the optional parameters for the ReceiverClient.acknowledge method.
func (client *ReceiverClient) acknowledge(ctx context.Context, topicName string, eventSubscriptionName string, acknowledgeOptions acknowledgeOptions, options *AcknowledgeOptions) (AcknowledgeResponse, error) {
	var err error
	req, err := client.acknowledgeCreateRequest(ctx, topicName, eventSubscriptionName, acknowledgeOptions, options)
	if err != nil {
		return AcknowledgeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AcknowledgeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AcknowledgeResponse{}, err
	}
	resp, err := client.acknowledgeHandleResponse(httpResp)
	return resp, err
}

// acknowledgeCreateRequest creates the acknowledge request.
func (client *ReceiverClient) acknowledgeCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, acknowledgeOptions acknowledgeOptions, _ *AcknowledgeOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, acknowledgeOptions); err != nil {
		return nil, err
	}
	return req, nil
}

// acknowledgeHandleResponse handles the acknowledge response.
func (client *ReceiverClient) acknowledgeHandleResponse(resp *http.Response) (AcknowledgeResponse, error) {
	result := AcknowledgeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcknowledgeResult); err != nil {
		return AcknowledgeResponse{}, err
	}
	return result, nil
}

// receive - Receive a batch of Cloud Events from a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - options - receiverClientreceiveOptions contains the optional parameters for the ReceiverClient.receive method.
func (client *ReceiverClient) receive(ctx context.Context, topicName string, eventSubscriptionName string, options *ReceiveOptions) (ReceiveResponse, error) {
	var err error
	req, err := client.receiveCreateRequest(ctx, topicName, eventSubscriptionName, options)
	if err != nil {
		return ReceiveResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ReceiveResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ReceiveResponse{}, err
	}
	resp, err := client.receiveHandleResponse(httpResp)
	return resp, err
}

// receiveCreateRequest creates the receive request.
func (client *ReceiverClient) receiveCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, options *ReceiveOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	if options != nil && options.MaxEvents != nil {
		reqQP.Set("maxEvents", strconv.FormatInt(int64(*options.MaxEvents), 10))
	}
	if options != nil && options.MaxWaitTime != nil {
		reqQP.Set("maxWaitTime", strconv.FormatInt(int64(*options.MaxWaitTime), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// receiveHandleResponse handles the receive response.
func (client *ReceiverClient) receiveHandleResponse(resp *http.Response) (ReceiveResponse, error) {
	result := ReceiveResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReceiveResult); err != nil {
		return ReceiveResponse{}, err
	}
	return result, nil
}

// reject - Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along
// with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered
// and can no longer be received by a consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - rejectOptions - RejectOptions
//   - options - receiverClientrejectOptions contains the optional parameters for the ReceiverClient.reject method.
func (client *ReceiverClient) reject(ctx context.Context, topicName string, eventSubscriptionName string, rejectOptions rejectOptions, options *RejectOptions) (RejectResponse, error) {
	var err error
	req, err := client.rejectCreateRequest(ctx, topicName, eventSubscriptionName, rejectOptions, options)
	if err != nil {
		return RejectResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RejectResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RejectResponse{}, err
	}
	resp, err := client.rejectHandleResponse(httpResp)
	return resp, err
}

// rejectCreateRequest creates the reject request.
func (client *ReceiverClient) rejectCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, rejectOptions rejectOptions, _ *RejectOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, rejectOptions); err != nil {
		return nil, err
	}
	return req, nil
}

// rejectHandleResponse handles the reject response.
func (client *ReceiverClient) rejectHandleResponse(resp *http.Response) (RejectResponse, error) {
	result := RejectResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RejectResult); err != nil {
		return RejectResponse{}, err
	}
	return result, nil
}

// release - Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along
// with other failed lock tokens with their corresponding error information. Successfully released events can be received
// by consumers.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - releaseOptions - ReleaseOptions
//   - options - receiverClientreleaseOptions contains the optional parameters for the ReceiverClient.release method.
func (client *ReceiverClient) release(ctx context.Context, topicName string, eventSubscriptionName string, releaseOptions releaseOptions, options *ReleaseOptions) (ReleaseResponse, error) {
	var err error
	req, err := client.releaseCreateRequest(ctx, topicName, eventSubscriptionName, releaseOptions, options)
	if err != nil {
		return ReleaseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ReleaseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ReleaseResponse{}, err
	}
	resp, err := client.releaseHandleResponse(httpResp)
	return resp, err
}

// releaseCreateRequest creates the release request.
func (client *ReceiverClient) releaseCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, releaseOptions releaseOptions, options *ReleaseOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	if options != nil && options.ReleaseDelayInSeconds != nil {
		reqQP.Set("releaseDelayInSeconds", string(*options.ReleaseDelayInSeconds))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, releaseOptions); err != nil {
		return nil, err
	}
	return req, nil
}

// releaseHandleResponse handles the release response.
func (client *ReceiverClient) releaseHandleResponse(resp *http.Response) (ReleaseResponse, error) {
	result := ReleaseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReleaseResult); err != nil {
		return ReleaseResponse{}, err
	}
	return result, nil
}

// renewLock - Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens,
// along with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure
// that the associated event is only available to the consumer that holds the renewed lock.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - renewLockOptions - RenewLockOptions
//   - options - receiverClientrenewLockOptions contains the optional parameters for the ReceiverClient.renewLock method.
func (client *ReceiverClient) renewLock(ctx context.Context, topicName string, eventSubscriptionName string, renewLockOptions renewLockOptions, options *RenewLocksOptions) (RenewLocksResponse, error) {
	var err error
	req, err := client.renewLockCreateRequest(ctx, topicName, eventSubscriptionName, renewLockOptions, options)
	if err != nil {
		return RenewLocksResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RenewLocksResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RenewLocksResponse{}, err
	}
	resp, err := client.renewLockHandleResponse(httpResp)
	return resp, err
}

// renewLockCreateRequest creates the renewLock request.
func (client *ReceiverClient) renewLockCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, renewLockOptions renewLockOptions, _ *RenewLocksOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:renewLock"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, renewLockOptions); err != nil {
		return nil, err
	}
	return req, nil
}

// renewLockHandleResponse handles the renewLock response.
func (client *ReceiverClient) renewLockHandleResponse(resp *http.Response) (RenewLocksResponse, error) {
	result := RenewLocksResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RenewLocksResult); err != nil {
		return RenewLocksResponse{}, err
	}
	return result, nil
}
