// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package aznamespaces

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ReceiverClient contains the methods for the Microsoft.EventGrid namespace.
// Don't use this type directly, use a constructor function instead.
type ReceiverClient struct {
	data receiverData

	internal *azcore.Client
	endpoint string
}

// AcknowledgeEvents - Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged
// lock tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged
// events will no longer be available to be received by any consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - Array of lock tokens.
//   - options - ReceiverClientAcknowledgeEventsOptions contains the optional parameters for the ReceiverClient.AcknowledgeEvents
//     method.
func (client *ReceiverClient) internalAcknowledgeEvents(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *AcknowledgeEventsOptions) (AcknowledgeEventsResponse, error) {
	var err error
	req, err := client.acknowledgeEventsCreateRequest(ctx, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return AcknowledgeEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AcknowledgeEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AcknowledgeEventsResponse{}, err
	}
	resp, err := client.acknowledgeEventsHandleResponse(httpResp)
	return resp, err
}

// acknowledgeEventsCreateRequest creates the AcknowledgeEvents request.
func (client *ReceiverClient) acknowledgeEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, _ *AcknowledgeEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		LockTokens []string `json:"lockTokens"`
	}{
		LockTokens: lockTokens,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// acknowledgeEventsHandleResponse handles the AcknowledgeEvents response.
func (client *ReceiverClient) acknowledgeEventsHandleResponse(resp *http.Response) (AcknowledgeEventsResponse, error) {
	result := AcknowledgeEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcknowledgeResult); err != nil {
		return AcknowledgeEventsResponse{}, err
	}
	return result, nil
}

// ReceiveEvents - Receive a batch of Cloud Events from a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - options - ReceiverClientReceiveEventsOptions contains the optional parameters for the ReceiverClient.ReceiveEvents method.
func (client *ReceiverClient) internalReceiveEvents(ctx context.Context, topicName string, eventSubscriptionName string, options *ReceiveEventsOptions) (ReceiveEventsResponse, error) {
	var err error
	req, err := client.receiveEventsCreateRequest(ctx, topicName, eventSubscriptionName, options)
	if err != nil {
		return ReceiveEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ReceiveEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ReceiveEventsResponse{}, err
	}
	resp, err := client.receiveEventsHandleResponse(httpResp)
	return resp, err
}

// receiveEventsCreateRequest creates the ReceiveEvents request.
func (client *ReceiverClient) receiveEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, options *ReceiveEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	if options != nil && options.MaxEvents != nil {
		reqQP.Set("maxEvents", strconv.FormatInt(int64(*options.MaxEvents), 10))
	}
	if options != nil && options.MaxWaitTime != nil {
		reqQP.Set("maxWaitTime", strconv.FormatInt(int64(*options.MaxWaitTime), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// receiveEventsHandleResponse handles the ReceiveEvents response.
func (client *ReceiverClient) receiveEventsHandleResponse(resp *http.Response) (ReceiveEventsResponse, error) {
	result := ReceiveEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReceiveResult); err != nil {
		return ReceiveEventsResponse{}, err
	}
	return result, nil
}

// RejectEvents - Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens,
// along with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered
// and can no longer be received by a consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - Array of lock tokens.
//   - options - ReceiverClientRejectEventsOptions contains the optional parameters for the ReceiverClient.RejectEvents method.
func (client *ReceiverClient) internalRejectEvents(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *RejectEventsOptions) (RejectEventsResponse, error) {
	var err error
	req, err := client.rejectEventsCreateRequest(ctx, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return RejectEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RejectEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RejectEventsResponse{}, err
	}
	resp, err := client.rejectEventsHandleResponse(httpResp)
	return resp, err
}

// rejectEventsCreateRequest creates the RejectEvents request.
func (client *ReceiverClient) rejectEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, _ *RejectEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		LockTokens []string `json:"lockTokens"`
	}{
		LockTokens: lockTokens,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rejectEventsHandleResponse handles the RejectEvents response.
func (client *ReceiverClient) rejectEventsHandleResponse(resp *http.Response) (RejectEventsResponse, error) {
	result := RejectEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RejectResult); err != nil {
		return RejectEventsResponse{}, err
	}
	return result, nil
}

// ReleaseEvents - Release a batch of Cloud Events. The response will include the set of successfully released lock tokens,
// along with other failed lock tokens with their corresponding error information. Successfully released events can be received
// by consumers.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - Array of lock tokens.
//   - options - ReceiverClientReleaseEventsOptions contains the optional parameters for the ReceiverClient.ReleaseEvents method.
func (client *ReceiverClient) internalReleaseEvents(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *ReleaseEventsOptions) (ReleaseEventsResponse, error) {
	var err error
	req, err := client.releaseEventsCreateRequest(ctx, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return ReleaseEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ReleaseEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ReleaseEventsResponse{}, err
	}
	resp, err := client.releaseEventsHandleResponse(httpResp)
	return resp, err
}

// releaseEventsCreateRequest creates the ReleaseEvents request.
func (client *ReceiverClient) releaseEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *ReleaseEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	if options != nil && options.ReleaseDelayInSeconds != nil {
		reqQP.Set("releaseDelayInSeconds", string(*options.ReleaseDelayInSeconds))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		LockTokens []string `json:"lockTokens"`
	}{
		LockTokens: lockTokens,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// releaseEventsHandleResponse handles the ReleaseEvents response.
func (client *ReceiverClient) releaseEventsHandleResponse(resp *http.Response) (ReleaseEventsResponse, error) {
	result := ReleaseEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReleaseResult); err != nil {
		return ReleaseEventsResponse{}, err
	}
	return result, nil
}

// RenewEventLocks - Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock
// tokens, along with other failed lock tokens with their corresponding error information. Successfully renewed locks will
// ensure that the associated event is only available to the consumer that holds the renewed lock.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - lockTokens - Array of lock tokens.
//   - options - ReceiverClientRenewEventLocksOptions contains the optional parameters for the ReceiverClient.RenewEventLocks
//     method.
func (client *ReceiverClient) internalRenewEventLocks(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, options *RenewEventLocksOptions) (RenewEventLocksResponse, error) {
	var err error
	req, err := client.renewEventLocksCreateRequest(ctx, topicName, eventSubscriptionName, lockTokens, options)
	if err != nil {
		return RenewEventLocksResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return RenewEventLocksResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return RenewEventLocksResponse{}, err
	}
	resp, err := client.renewEventLocksHandleResponse(httpResp)
	return resp, err
}

// renewEventLocksCreateRequest creates the RenewEventLocks request.
func (client *ReceiverClient) renewEventLocksCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, lockTokens []string, _ *RenewEventLocksOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:renewLock"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	body := struct {
		LockTokens []string `json:"lockTokens"`
	}{
		LockTokens: lockTokens,
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// renewEventLocksHandleResponse handles the RenewEventLocks response.
func (client *ReceiverClient) renewEventLocksHandleResponse(resp *http.Response) (RenewEventLocksResponse, error) {
	result := RenewEventLocksResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RenewLocksResult); err != nil {
		return RenewEventLocksResponse{}, err
	}
	return result, nil
}
