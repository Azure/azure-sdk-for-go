// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package aznamespaces

import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/messaging/eventgrid/aznamespaces/internal"
)

// ReceiverClientOptions contains the optional parameters when creating a ReceiverClient.
type ReceiverClientOptions struct {
	azcore.ClientOptions
}

// NewReceiverClient creates a [ReceiverClient] which uses an azcore.TokenCredential for authentication.
//   - topicName - Topic Name.
//   - subscriptionName - Event Subscription Name.
func NewReceiverClient(endpoint string, topic string, subscription string, cred azcore.TokenCredential, options *ReceiverClientOptions) (*ReceiverClient, error) {
	if options == nil {
		options = &ReceiverClientOptions{}
	}

	azc, err := azcore.NewClient(internal.ModuleName+".Client", internal.ModuleVersion, runtime.PipelineOptions{
		PerRetry: []policy.Policy{
			runtime.NewBearerTokenPolicy(cred, []string{authScope}, nil),
		},
	}, &options.ClientOptions)

	if err != nil {
		return nil, err
	}

	return &ReceiverClient{
		internal: azc,
		endpoint: endpoint,
		data: receiverData{
			topic:        topic,
			subscription: subscription,
		},
	}, nil
}

// NewReceiverClientWithSharedKeyCredential creates a [ReceiverClient] using a shared key.
//   - topicName - Topic Name.
//   - subscriptionName - Event Subscription Name.
func NewReceiverClientWithSharedKeyCredential(endpoint string, topic string, subscription string, keyCred *azcore.KeyCredential, options *ReceiverClientOptions) (*ReceiverClient, error) {
	if options == nil {
		options = &ReceiverClientOptions{}
	}

	azc, err := azcore.NewClient(internal.ModuleName+".Client", internal.ModuleVersion, runtime.PipelineOptions{
		PerRetry: []policy.Policy{
			runtime.NewKeyCredentialPolicy(keyCred, "Authorization", &runtime.KeyCredentialPolicyOptions{
				Prefix: "SharedAccessKey ",
			}),
		},
	}, &options.ClientOptions)

	if err != nil {
		return nil, err
	}

	return &ReceiverClient{
		internal: azc,
		endpoint: endpoint,
		data: receiverData{
			topic:        topic,
			subscription: subscription,
		},
	}, nil
}

// RejectEvents rejects a batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
// accepted. The response body will include the set of successfully rejected lockTokens,
// along with other failed lockTokens with their corresponding error information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - lockTokens - slice of lock tokens.
//   - options - RejectEventsOptions contains the optional parameters for the ReceiverClient.RejectEvents method.
func (client *ReceiverClient) RejectEvents(ctx context.Context, lockTokens []string, options *RejectEventsOptions) (RejectEventsResponse, error) {
	return client.internalRejectEvents(ctx, client.data.topic, client.data.subscription, lockTokens, options)
}

// AcknowledgeEvents acknowledges a batch of Cloud Events. The server responds with an HTTP 200 status code if the request
// is successfully accepted. The response body will include the set of successfully acknowledged
// lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events
// will no longer be available to any consumer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - lockTokens - slice of lock tokens.
//   - options - AcknowledgeEventsOptions contains the optional parameters for the ReceiverClient.AcknowledgeEvents method.
func (client *ReceiverClient) AcknowledgeEvents(ctx context.Context, lockTokens []string, options *AcknowledgeEventsOptions) (AcknowledgeEventsResponse, error) {
	return client.internalAcknowledgeEvents(ctx, client.data.topic, client.data.subscription, lockTokens, options)
}

// ReleaseEvents releases a batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
// successfully accepted. The response body will include the set of successfully released lockTokens,
// along with other failed lockTokens with their corresponding error information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - lockTokens - slice of lock tokens.
//   - options - ReleaseEventsOptions contains the optional parameters for the ReceiverClient.ReleaseEvents method.
func (client *ReceiverClient) ReleaseEvents(ctx context.Context, lockTokens []string, options *ReleaseEventsOptions) (ReleaseEventsResponse, error) {
	return client.internalReleaseEvents(ctx, client.data.topic, client.data.subscription, lockTokens, options)
}

// RenewEventLocks renews locks for batch of Cloud Events. The server responds with an HTTP 200 status code if the request
// is successfully accepted. The response body will include the set of successfully renewed
// lockTokens, along with other failed lockTokens with their corresponding error information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - lockTokens - slice of lock tokens.
//   - options - RenewLocksOptions contains the optional parameters for the ReceiverClient.RenewLocks method.
func (client *ReceiverClient) RenewEventLocks(ctx context.Context, lockTokens []string, options *RenewEventLocksOptions) (RenewEventLocksResponse, error) {
	return client.internalRenewEventLocks(ctx, client.data.topic, client.data.subscription, lockTokens, options)
}

// ReceiveEvents receives a batch of Cloud Events from a subscription.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-06-01
//   - options - ReceiveEventsOptions contains the optional parameters for the ReceiverClient.ReceiveEvents method.
func (client *ReceiverClient) ReceiveEvents(ctx context.Context, options *ReceiveEventsOptions) (ReceiveEventsResponse, error) {
	return client.internalReceiveEvents(ctx, client.data.topic, client.data.subscription, options)
}

type receiverData struct {
	topic        string
	subscription string
}
