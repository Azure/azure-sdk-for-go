// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// AlertRuleIncidentsClient contains the methods for the AlertRuleIncidents group.
// Don't use this type directly, use NewAlertRuleIncidentsClient() instead.
type AlertRuleIncidentsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewAlertRuleIncidentsClient creates a new instance of AlertRuleIncidentsClient with the specified values.
func NewAlertRuleIncidentsClient(con *armcore.Connection, subscriptionID string) *AlertRuleIncidentsClient {
	return &AlertRuleIncidentsClient{con: con, subscriptionID: subscriptionID}
}

// Get - Gets an incident associated to an alert rule
// If the operation fails it returns the *ErrorResponse error type.
func (client *AlertRuleIncidentsClient) Get(ctx context.Context, resourceGroupName string, ruleName string, incidentName string, options *AlertRuleIncidentsGetOptions) (IncidentResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, ruleName, incidentName, options)
	if err != nil {
		return IncidentResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return IncidentResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return IncidentResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AlertRuleIncidentsClient) getCreateRequest(ctx context.Context, resourceGroupName string, ruleName string, incidentName string, options *AlertRuleIncidentsGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}/incidents/{incidentName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ruleName == "" {
		return nil, errors.New("parameter ruleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	if incidentName == "" {
		return nil, errors.New("parameter incidentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{incidentName}", url.PathEscape(incidentName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2016-03-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AlertRuleIncidentsClient) getHandleResponse(resp *azcore.Response) (IncidentResponse, error) {
	var val *Incident
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return IncidentResponse{}, err
	}
	return IncidentResponse{RawResponse: resp.Response, Incident: val}, nil
}

// getHandleError handles the Get error response.
func (client *AlertRuleIncidentsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListByAlertRule - Gets a list of incidents associated to an alert rule
// If the operation fails it returns a generic error.
func (client *AlertRuleIncidentsClient) ListByAlertRule(ctx context.Context, resourceGroupName string, ruleName string, options *AlertRuleIncidentsListByAlertRuleOptions) (IncidentListResultResponse, error) {
	req, err := client.listByAlertRuleCreateRequest(ctx, resourceGroupName, ruleName, options)
	if err != nil {
		return IncidentListResultResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return IncidentListResultResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return IncidentListResultResponse{}, client.listByAlertRuleHandleError(resp)
	}
	return client.listByAlertRuleHandleResponse(resp)
}

// listByAlertRuleCreateRequest creates the ListByAlertRule request.
func (client *AlertRuleIncidentsClient) listByAlertRuleCreateRequest(ctx context.Context, resourceGroupName string, ruleName string, options *AlertRuleIncidentsListByAlertRuleOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}/incidents"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if ruleName == "" {
		return nil, errors.New("parameter ruleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2016-03-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByAlertRuleHandleResponse handles the ListByAlertRule response.
func (client *AlertRuleIncidentsClient) listByAlertRuleHandleResponse(resp *azcore.Response) (IncidentListResultResponse, error) {
	var val *IncidentListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return IncidentListResultResponse{}, err
	}
	return IncidentListResultResponse{RawResponse: resp.Response, IncidentListResult: val}, nil
}

// listByAlertRuleHandleError handles the ListByAlertRule error response.
func (client *AlertRuleIncidentsClient) listByAlertRuleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	if len(body) == 0 {
		return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
	}
	return azcore.NewResponseError(errors.New(string(body)), resp.Response)
}
