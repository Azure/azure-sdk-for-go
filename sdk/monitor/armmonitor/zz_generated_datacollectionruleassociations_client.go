// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// DataCollectionRuleAssociationsClient contains the methods for the DataCollectionRuleAssociations group.
// Don't use this type directly, use NewDataCollectionRuleAssociationsClient() instead.
type DataCollectionRuleAssociationsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewDataCollectionRuleAssociationsClient creates a new instance of DataCollectionRuleAssociationsClient with the specified values.
func NewDataCollectionRuleAssociationsClient(con *armcore.Connection, subscriptionID string) *DataCollectionRuleAssociationsClient {
	return &DataCollectionRuleAssociationsClient{con: con, subscriptionID: subscriptionID}
}

// Create - Creates or updates an association.
// If the operation fails it returns the *ErrorResponseCommonV2 error type.
func (client *DataCollectionRuleAssociationsClient) Create(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsCreateOptions) (DataCollectionRuleAssociationProxyOnlyResourceResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceURI, associationName, options)
	if err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *DataCollectionRuleAssociationsClient) createCreateRequest(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsCreateOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if associationName == "" {
		return nil, errors.New("parameter associationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{associationName}", url.PathEscape(associationName))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	if options != nil && options.Body != nil {
		return req, req.MarshalAsJSON(*options.Body)
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *DataCollectionRuleAssociationsClient) createHandleResponse(resp *azcore.Response) (DataCollectionRuleAssociationProxyOnlyResourceResponse, error) {
	var val *DataCollectionRuleAssociationProxyOnlyResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	return DataCollectionRuleAssociationProxyOnlyResourceResponse{RawResponse: resp.Response, DataCollectionRuleAssociationProxyOnlyResource: val}, nil
}

// createHandleError handles the Create error response.
func (client *DataCollectionRuleAssociationsClient) createHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponseCommonV2{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Delete - Deletes an association.
// If the operation fails it returns the *ErrorResponseCommonV2 error type.
func (client *DataCollectionRuleAssociationsClient) Delete(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceURI, associationName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataCollectionRuleAssociationsClient) deleteCreateRequest(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsDeleteOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if associationName == "" {
		return nil, errors.New("parameter associationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{associationName}", url.PathEscape(associationName))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DataCollectionRuleAssociationsClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponseCommonV2{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Get - Returns the specified association.
// If the operation fails it returns the *ErrorResponseCommonV2 error type.
func (client *DataCollectionRuleAssociationsClient) Get(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsGetOptions) (DataCollectionRuleAssociationProxyOnlyResourceResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceURI, associationName, options)
	if err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DataCollectionRuleAssociationsClient) getCreateRequest(ctx context.Context, resourceURI string, associationName string, options *DataCollectionRuleAssociationsGetOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations/{associationName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if associationName == "" {
		return nil, errors.New("parameter associationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{associationName}", url.PathEscape(associationName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataCollectionRuleAssociationsClient) getHandleResponse(resp *azcore.Response) (DataCollectionRuleAssociationProxyOnlyResourceResponse, error) {
	var val *DataCollectionRuleAssociationProxyOnlyResource
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceResponse{}, err
	}
	return DataCollectionRuleAssociationProxyOnlyResourceResponse{RawResponse: resp.Response, DataCollectionRuleAssociationProxyOnlyResource: val}, nil
}

// getHandleError handles the Get error response.
func (client *DataCollectionRuleAssociationsClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponseCommonV2{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListByResource - Lists associations for the specified resource.
// If the operation fails it returns the *ErrorResponseCommonV2 error type.
func (client *DataCollectionRuleAssociationsClient) ListByResource(resourceURI string, options *DataCollectionRuleAssociationsListByResourceOptions) DataCollectionRuleAssociationProxyOnlyResourceListResultPager {
	return &dataCollectionRuleAssociationProxyOnlyResourceListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByResourceCreateRequest(ctx, resourceURI, options)
		},
		responder: client.listByResourceHandleResponse,
		errorer:   client.listByResourceHandleError,
		advancer: func(ctx context.Context, resp DataCollectionRuleAssociationProxyOnlyResourceListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DataCollectionRuleAssociationProxyOnlyResourceListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listByResourceCreateRequest creates the ListByResource request.
func (client *DataCollectionRuleAssociationsClient) listByResourceCreateRequest(ctx context.Context, resourceURI string, options *DataCollectionRuleAssociationsListByResourceOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Insights/dataCollectionRuleAssociations"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceHandleResponse handles the ListByResource response.
func (client *DataCollectionRuleAssociationsClient) listByResourceHandleResponse(resp *azcore.Response) (DataCollectionRuleAssociationProxyOnlyResourceListResultResponse, error) {
	var val *DataCollectionRuleAssociationProxyOnlyResourceListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceListResultResponse{}, err
	}
	return DataCollectionRuleAssociationProxyOnlyResourceListResultResponse{RawResponse: resp.Response, DataCollectionRuleAssociationProxyOnlyResourceListResult: val}, nil
}

// listByResourceHandleError handles the ListByResource error response.
func (client *DataCollectionRuleAssociationsClient) listByResourceHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponseCommonV2{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListByRule - Lists associations for the specified data collection rule.
// If the operation fails it returns the *ErrorResponseCommonV2 error type.
func (client *DataCollectionRuleAssociationsClient) ListByRule(resourceGroupName string, dataCollectionRuleName string, options *DataCollectionRuleAssociationsListByRuleOptions) DataCollectionRuleAssociationProxyOnlyResourceListResultPager {
	return &dataCollectionRuleAssociationProxyOnlyResourceListResultPager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByRuleCreateRequest(ctx, resourceGroupName, dataCollectionRuleName, options)
		},
		responder: client.listByRuleHandleResponse,
		errorer:   client.listByRuleHandleError,
		advancer: func(ctx context.Context, resp DataCollectionRuleAssociationProxyOnlyResourceListResultResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.DataCollectionRuleAssociationProxyOnlyResourceListResult.NextLink)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listByRuleCreateRequest creates the ListByRule request.
func (client *DataCollectionRuleAssociationsClient) listByRuleCreateRequest(ctx context.Context, resourceGroupName string, dataCollectionRuleName string, options *DataCollectionRuleAssociationsListByRuleOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dataCollectionRuleName}/associations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataCollectionRuleName == "" {
		return nil, errors.New("parameter dataCollectionRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataCollectionRuleName}", url.PathEscape(dataCollectionRuleName))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByRuleHandleResponse handles the ListByRule response.
func (client *DataCollectionRuleAssociationsClient) listByRuleHandleResponse(resp *azcore.Response) (DataCollectionRuleAssociationProxyOnlyResourceListResultResponse, error) {
	var val *DataCollectionRuleAssociationProxyOnlyResourceListResult
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return DataCollectionRuleAssociationProxyOnlyResourceListResultResponse{}, err
	}
	return DataCollectionRuleAssociationProxyOnlyResourceListResultResponse{RawResponse: resp.Response, DataCollectionRuleAssociationProxyOnlyResourceListResult: val}, nil
}

// listByRuleHandleError handles the ListByRule error response.
func (client *DataCollectionRuleAssociationsClient) listByRuleHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponseCommonV2{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
