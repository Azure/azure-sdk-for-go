// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

// MetricNamespacesClient contains the methods for the MetricNamespaces group.
// Don't use this type directly, use NewMetricNamespacesClient() instead.
type MetricNamespacesClient struct {
	con *armcore.Connection
}

// NewMetricNamespacesClient creates a new instance of MetricNamespacesClient with the specified values.
func NewMetricNamespacesClient(con *armcore.Connection) *MetricNamespacesClient {
	return &MetricNamespacesClient{con: con}
}

// List - Lists the metric namespaces for the resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MetricNamespacesClient) List(ctx context.Context, resourceURI string, options *MetricNamespacesListOptions) (MetricNamespaceCollectionResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceURI, options)
	if err != nil {
		return MetricNamespaceCollectionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return MetricNamespaceCollectionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return MetricNamespaceCollectionResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *MetricNamespacesClient) listCreateRequest(ctx context.Context, resourceURI string, options *MetricNamespacesListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/metricNamespaces"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2017-12-01-preview")
	if options != nil && options.StartTime != nil {
		reqQP.Set("startTime", *options.StartTime)
	}
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MetricNamespacesClient) listHandleResponse(resp *azcore.Response) (MetricNamespaceCollectionResponse, error) {
	var val *MetricNamespaceCollection
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return MetricNamespaceCollectionResponse{}, err
	}
	return MetricNamespaceCollectionResponse{RawResponse: resp.Response, MetricNamespaceCollection: val}, nil
}

// listHandleError handles the List error response.
func (client *MetricNamespacesClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
