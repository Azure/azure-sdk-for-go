// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// AutoscaleSettingResourceCollectionPager provides iteration over AutoscaleSettingResourceCollection pages.
type AutoscaleSettingResourceCollectionPager interface {
	azcore.Pager

	// PageResponse returns the current AutoscaleSettingResourceCollectionResponse.
	PageResponse() AutoscaleSettingResourceCollectionResponse
}

type autoscaleSettingResourceCollectionCreateRequest func(context.Context) (*azcore.Request, error)

type autoscaleSettingResourceCollectionHandleError func(*azcore.Response) error

type autoscaleSettingResourceCollectionHandleResponse func(*azcore.Response) (AutoscaleSettingResourceCollectionResponse, error)

type autoscaleSettingResourceCollectionAdvancePage func(context.Context, AutoscaleSettingResourceCollectionResponse) (*azcore.Request, error)

type autoscaleSettingResourceCollectionPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester autoscaleSettingResourceCollectionCreateRequest
	// callback for handling response errors
	errorer autoscaleSettingResourceCollectionHandleError
	// callback for handling the HTTP response
	responder autoscaleSettingResourceCollectionHandleResponse
	// callback for advancing to the next page
	advancer autoscaleSettingResourceCollectionAdvancePage
	// contains the current response
	current AutoscaleSettingResourceCollectionResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *autoscaleSettingResourceCollectionPager) Err() error {
	return p.err
}

func (p *autoscaleSettingResourceCollectionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AutoscaleSettingResourceCollection.NextLink == nil || len(*p.current.AutoscaleSettingResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *autoscaleSettingResourceCollectionPager) PageResponse() AutoscaleSettingResourceCollectionResponse {
	return p.current
}

// AzureMonitorPrivateLinkScopeListResultPager provides iteration over AzureMonitorPrivateLinkScopeListResult pages.
type AzureMonitorPrivateLinkScopeListResultPager interface {
	azcore.Pager

	// PageResponse returns the current AzureMonitorPrivateLinkScopeListResultResponse.
	PageResponse() AzureMonitorPrivateLinkScopeListResultResponse
}

type azureMonitorPrivateLinkScopeListResultCreateRequest func(context.Context) (*azcore.Request, error)

type azureMonitorPrivateLinkScopeListResultHandleError func(*azcore.Response) error

type azureMonitorPrivateLinkScopeListResultHandleResponse func(*azcore.Response) (AzureMonitorPrivateLinkScopeListResultResponse, error)

type azureMonitorPrivateLinkScopeListResultAdvancePage func(context.Context, AzureMonitorPrivateLinkScopeListResultResponse) (*azcore.Request, error)

type azureMonitorPrivateLinkScopeListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester azureMonitorPrivateLinkScopeListResultCreateRequest
	// callback for handling response errors
	errorer azureMonitorPrivateLinkScopeListResultHandleError
	// callback for handling the HTTP response
	responder azureMonitorPrivateLinkScopeListResultHandleResponse
	// callback for advancing to the next page
	advancer azureMonitorPrivateLinkScopeListResultAdvancePage
	// contains the current response
	current AzureMonitorPrivateLinkScopeListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *azureMonitorPrivateLinkScopeListResultPager) Err() error {
	return p.err
}

func (p *azureMonitorPrivateLinkScopeListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureMonitorPrivateLinkScopeListResult.NextLink == nil || len(*p.current.AzureMonitorPrivateLinkScopeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *azureMonitorPrivateLinkScopeListResultPager) PageResponse() AzureMonitorPrivateLinkScopeListResultResponse {
	return p.current
}

// DataCollectionEndpointResourceListResultPager provides iteration over DataCollectionEndpointResourceListResult pages.
type DataCollectionEndpointResourceListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DataCollectionEndpointResourceListResultResponse.
	PageResponse() DataCollectionEndpointResourceListResultResponse
}

type dataCollectionEndpointResourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type dataCollectionEndpointResourceListResultHandleError func(*azcore.Response) error

type dataCollectionEndpointResourceListResultHandleResponse func(*azcore.Response) (DataCollectionEndpointResourceListResultResponse, error)

type dataCollectionEndpointResourceListResultAdvancePage func(context.Context, DataCollectionEndpointResourceListResultResponse) (*azcore.Request, error)

type dataCollectionEndpointResourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester dataCollectionEndpointResourceListResultCreateRequest
	// callback for handling response errors
	errorer dataCollectionEndpointResourceListResultHandleError
	// callback for handling the HTTP response
	responder dataCollectionEndpointResourceListResultHandleResponse
	// callback for advancing to the next page
	advancer dataCollectionEndpointResourceListResultAdvancePage
	// contains the current response
	current DataCollectionEndpointResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *dataCollectionEndpointResourceListResultPager) Err() error {
	return p.err
}

func (p *dataCollectionEndpointResourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataCollectionEndpointResourceListResult.NextLink == nil || len(*p.current.DataCollectionEndpointResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataCollectionEndpointResourceListResultPager) PageResponse() DataCollectionEndpointResourceListResultResponse {
	return p.current
}

// DataCollectionRuleAssociationProxyOnlyResourceListResultPager provides iteration over DataCollectionRuleAssociationProxyOnlyResourceListResult pages.
type DataCollectionRuleAssociationProxyOnlyResourceListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DataCollectionRuleAssociationProxyOnlyResourceListResultResponse.
	PageResponse() DataCollectionRuleAssociationProxyOnlyResourceListResultResponse
}

type dataCollectionRuleAssociationProxyOnlyResourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type dataCollectionRuleAssociationProxyOnlyResourceListResultHandleError func(*azcore.Response) error

type dataCollectionRuleAssociationProxyOnlyResourceListResultHandleResponse func(*azcore.Response) (DataCollectionRuleAssociationProxyOnlyResourceListResultResponse, error)

type dataCollectionRuleAssociationProxyOnlyResourceListResultAdvancePage func(context.Context, DataCollectionRuleAssociationProxyOnlyResourceListResultResponse) (*azcore.Request, error)

type dataCollectionRuleAssociationProxyOnlyResourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester dataCollectionRuleAssociationProxyOnlyResourceListResultCreateRequest
	// callback for handling response errors
	errorer dataCollectionRuleAssociationProxyOnlyResourceListResultHandleError
	// callback for handling the HTTP response
	responder dataCollectionRuleAssociationProxyOnlyResourceListResultHandleResponse
	// callback for advancing to the next page
	advancer dataCollectionRuleAssociationProxyOnlyResourceListResultAdvancePage
	// contains the current response
	current DataCollectionRuleAssociationProxyOnlyResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *dataCollectionRuleAssociationProxyOnlyResourceListResultPager) Err() error {
	return p.err
}

func (p *dataCollectionRuleAssociationProxyOnlyResourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataCollectionRuleAssociationProxyOnlyResourceListResult.NextLink == nil || len(*p.current.DataCollectionRuleAssociationProxyOnlyResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataCollectionRuleAssociationProxyOnlyResourceListResultPager) PageResponse() DataCollectionRuleAssociationProxyOnlyResourceListResultResponse {
	return p.current
}

// DataCollectionRuleResourceListResultPager provides iteration over DataCollectionRuleResourceListResult pages.
type DataCollectionRuleResourceListResultPager interface {
	azcore.Pager

	// PageResponse returns the current DataCollectionRuleResourceListResultResponse.
	PageResponse() DataCollectionRuleResourceListResultResponse
}

type dataCollectionRuleResourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type dataCollectionRuleResourceListResultHandleError func(*azcore.Response) error

type dataCollectionRuleResourceListResultHandleResponse func(*azcore.Response) (DataCollectionRuleResourceListResultResponse, error)

type dataCollectionRuleResourceListResultAdvancePage func(context.Context, DataCollectionRuleResourceListResultResponse) (*azcore.Request, error)

type dataCollectionRuleResourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester dataCollectionRuleResourceListResultCreateRequest
	// callback for handling response errors
	errorer dataCollectionRuleResourceListResultHandleError
	// callback for handling the HTTP response
	responder dataCollectionRuleResourceListResultHandleResponse
	// callback for advancing to the next page
	advancer dataCollectionRuleResourceListResultAdvancePage
	// contains the current response
	current DataCollectionRuleResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *dataCollectionRuleResourceListResultPager) Err() error {
	return p.err
}

func (p *dataCollectionRuleResourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataCollectionRuleResourceListResult.NextLink == nil || len(*p.current.DataCollectionRuleResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataCollectionRuleResourceListResultPager) PageResponse() DataCollectionRuleResourceListResultResponse {
	return p.current
}

// EventDataCollectionPager provides iteration over EventDataCollection pages.
type EventDataCollectionPager interface {
	azcore.Pager

	// PageResponse returns the current EventDataCollectionResponse.
	PageResponse() EventDataCollectionResponse
}

type eventDataCollectionCreateRequest func(context.Context) (*azcore.Request, error)

type eventDataCollectionHandleError func(*azcore.Response) error

type eventDataCollectionHandleResponse func(*azcore.Response) (EventDataCollectionResponse, error)

type eventDataCollectionAdvancePage func(context.Context, EventDataCollectionResponse) (*azcore.Request, error)

type eventDataCollectionPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester eventDataCollectionCreateRequest
	// callback for handling response errors
	errorer eventDataCollectionHandleError
	// callback for handling the HTTP response
	responder eventDataCollectionHandleResponse
	// callback for advancing to the next page
	advancer eventDataCollectionAdvancePage
	// contains the current response
	current EventDataCollectionResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *eventDataCollectionPager) Err() error {
	return p.err
}

func (p *eventDataCollectionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventDataCollection.NextLink == nil || len(*p.current.EventDataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *eventDataCollectionPager) PageResponse() EventDataCollectionResponse {
	return p.current
}

// PrivateEndpointConnectionListResultPager provides iteration over PrivateEndpointConnectionListResult pages.
type PrivateEndpointConnectionListResultPager interface {
	azcore.Pager

	// PageResponse returns the current PrivateEndpointConnectionListResultResponse.
	PageResponse() PrivateEndpointConnectionListResultResponse
}

type privateEndpointConnectionListResultCreateRequest func(context.Context) (*azcore.Request, error)

type privateEndpointConnectionListResultHandleError func(*azcore.Response) error

type privateEndpointConnectionListResultHandleResponse func(*azcore.Response) (PrivateEndpointConnectionListResultResponse, error)

type privateEndpointConnectionListResultAdvancePage func(context.Context, PrivateEndpointConnectionListResultResponse) (*azcore.Request, error)

type privateEndpointConnectionListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateEndpointConnectionListResultCreateRequest
	// callback for handling response errors
	errorer privateEndpointConnectionListResultHandleError
	// callback for handling the HTTP response
	responder privateEndpointConnectionListResultHandleResponse
	// callback for advancing to the next page
	advancer privateEndpointConnectionListResultAdvancePage
	// contains the current response
	current PrivateEndpointConnectionListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateEndpointConnectionListResultPager) Err() error {
	return p.err
}

func (p *privateEndpointConnectionListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointConnectionListResultPager) PageResponse() PrivateEndpointConnectionListResultResponse {
	return p.current
}

// PrivateLinkResourceListResultPager provides iteration over PrivateLinkResourceListResult pages.
type PrivateLinkResourceListResultPager interface {
	azcore.Pager

	// PageResponse returns the current PrivateLinkResourceListResultResponse.
	PageResponse() PrivateLinkResourceListResultResponse
}

type privateLinkResourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type privateLinkResourceListResultHandleError func(*azcore.Response) error

type privateLinkResourceListResultHandleResponse func(*azcore.Response) (PrivateLinkResourceListResultResponse, error)

type privateLinkResourceListResultAdvancePage func(context.Context, PrivateLinkResourceListResultResponse) (*azcore.Request, error)

type privateLinkResourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateLinkResourceListResultCreateRequest
	// callback for handling response errors
	errorer privateLinkResourceListResultHandleError
	// callback for handling the HTTP response
	responder privateLinkResourceListResultHandleResponse
	// callback for advancing to the next page
	advancer privateLinkResourceListResultAdvancePage
	// contains the current response
	current PrivateLinkResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateLinkResourceListResultPager) Err() error {
	return p.err
}

func (p *privateLinkResourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkResourceListResultPager) PageResponse() PrivateLinkResourceListResultResponse {
	return p.current
}

// ScopedResourceListResultPager provides iteration over ScopedResourceListResult pages.
type ScopedResourceListResultPager interface {
	azcore.Pager

	// PageResponse returns the current ScopedResourceListResultResponse.
	PageResponse() ScopedResourceListResultResponse
}

type scopedResourceListResultCreateRequest func(context.Context) (*azcore.Request, error)

type scopedResourceListResultHandleError func(*azcore.Response) error

type scopedResourceListResultHandleResponse func(*azcore.Response) (ScopedResourceListResultResponse, error)

type scopedResourceListResultAdvancePage func(context.Context, ScopedResourceListResultResponse) (*azcore.Request, error)

type scopedResourceListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester scopedResourceListResultCreateRequest
	// callback for handling response errors
	errorer scopedResourceListResultHandleError
	// callback for handling the HTTP response
	responder scopedResourceListResultHandleResponse
	// callback for advancing to the next page
	advancer scopedResourceListResultAdvancePage
	// contains the current response
	current ScopedResourceListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *scopedResourceListResultPager) Err() error {
	return p.err
}

func (p *scopedResourceListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ScopedResourceListResult.NextLink == nil || len(*p.current.ScopedResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *scopedResourceListResultPager) PageResponse() ScopedResourceListResultResponse {
	return p.current
}
