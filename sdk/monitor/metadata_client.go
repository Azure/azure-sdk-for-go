//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package monitor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MetadataClient contains the methods for the Metadata group.
// Don't use this type directly, use NewMetadataClient() instead.
type MetadataClient struct {
	pl runtime.Pipeline
}

// NewMetadataClient creates a new instance of MetadataClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewMetadataClient(pl runtime.Pipeline) *MetadataClient {
	client := &MetadataClient{
		pl: pl,
	}
	return client
}

// Get - Retrieve the metadata information for the workspace, including its schema, functions, workspace info, categories
// etc.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-05-19_Preview
// workspaceID - ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
// options - MetadataClientGetOptions contains the optional parameters for the MetadataClient.Get method.
func (client *MetadataClient) Get(ctx context.Context, workspaceID string, options *MetadataClientGetOptions) (MetadataClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return MetadataClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MetadataClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MetadataClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MetadataClient) getCreateRequest(ctx context.Context, workspaceID string, options *MetadataClientGetOptions) (*policy.Request, error) {
	urlPath := "/workspaces/{workspaceId}/metadata"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MetadataClient) getHandleResponse(resp *http.Response) (MetadataClientGetResponse, error) {
	result := MetadataClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetadataResults); err != nil {
		return MetadataClientGetResponse{}, err
	}
	return result, nil
}

// Post - Retrieve the metadata information for the workspace, including its schema, functions, workspace info, categories
// etc.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-05-19_Preview
// workspaceID - ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
// options - MetadataClientPostOptions contains the optional parameters for the MetadataClient.Post method.
func (client *MetadataClient) Post(ctx context.Context, workspaceID string, options *MetadataClientPostOptions) (MetadataClientPostResponse, error) {
	req, err := client.postCreateRequest(ctx, workspaceID, options)
	if err != nil {
		return MetadataClientPostResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MetadataClientPostResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MetadataClientPostResponse{}, runtime.NewResponseError(resp)
	}
	return client.postHandleResponse(resp)
}

// postCreateRequest creates the Post request.
func (client *MetadataClient) postCreateRequest(ctx context.Context, workspaceID string, options *MetadataClientPostOptions) (*policy.Request, error) {
	urlPath := "/workspaces/{workspaceId}/metadata"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// postHandleResponse handles the Post response.
func (client *MetadataClient) postHandleResponse(resp *http.Response) (MetadataClientPostResponse, error) {
	result := MetadataClientPostResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetadataResults); err != nil {
		return MetadataClientPostResponse{}, err
	}
	return result, nil
}
