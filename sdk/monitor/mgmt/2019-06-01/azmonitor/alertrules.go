// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azmonitor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// AlertRulesOperations contains the methods for the AlertRules group.
type AlertRulesOperations interface {
	// CreateOrUpdate - Creates or updates a classic metric alert rule.
	CreateOrUpdate(ctx context.Context, resourceGroupName string, ruleName string, parameters AlertRuleResource) (*AlertRuleResourceResponse, error)
	// Delete - Deletes a classic metric alert rule
	Delete(ctx context.Context, resourceGroupName string, ruleName string) (*http.Response, error)
	// Get - Gets a classic metric alert rule
	Get(ctx context.Context, resourceGroupName string, ruleName string) (*AlertRuleResourceResponse, error)
	// ListByResourceGroup - List the classic metric alert rules within a resource group.
	ListByResourceGroup(ctx context.Context, resourceGroupName string) (*AlertRuleResourceCollectionResponse, error)
	// ListBySubscription - List the classic metric alert rules within a subscription.
	ListBySubscription(ctx context.Context) (*AlertRuleResourceCollectionResponse, error)
	// Update - Updates an existing classic metric AlertRuleResource. To update other fields use the CreateOrUpdate method.
	Update(ctx context.Context, resourceGroupName string, ruleName string, alertRulesResource AlertRuleResourcePatch) (*AlertRuleResourceResponse, error)
}

// alertRulesOperations implements the AlertRulesOperations interface.
type alertRulesOperations struct {
	*Client
	subscriptionID string
}

// CreateOrUpdate - Creates or updates a classic metric alert rule.
func (client *alertRulesOperations) CreateOrUpdate(ctx context.Context, resourceGroupName string, ruleName string, parameters AlertRuleResource) (*AlertRuleResourceResponse, error) {
	req, err := client.createOrUpdateCreateRequest(resourceGroupName, ruleName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.createOrUpdateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *alertRulesOperations) createOrUpdateCreateRequest(resourceGroupName string, ruleName string, parameters AlertRuleResource) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPut, *u)
	return req, req.MarshalAsJSON(parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *alertRulesOperations) createOrUpdateHandleResponse(resp *azcore.Response) (*AlertRuleResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	result := AlertRuleResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AlertRuleResource)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *alertRulesOperations) createOrUpdateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}

// Delete - Deletes a classic metric alert rule
func (client *alertRulesOperations) Delete(ctx context.Context, resourceGroupName string, ruleName string) (*http.Response, error) {
	req, err := client.deleteCreateRequest(resourceGroupName, ruleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client *alertRulesOperations) deleteCreateRequest(resourceGroupName string, ruleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodDelete, *u)
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *alertRulesOperations) deleteHandleResponse(resp *azcore.Response) (*http.Response, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp.Response, nil
}

// deleteHandleError handles the Delete error response.
func (client *alertRulesOperations) deleteHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Get - Gets a classic metric alert rule
func (client *alertRulesOperations) Get(ctx context.Context, resourceGroupName string, ruleName string) (*AlertRuleResourceResponse, error) {
	req, err := client.getCreateRequest(resourceGroupName, ruleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.getHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// getCreateRequest creates the Get request.
func (client *alertRulesOperations) getCreateRequest(resourceGroupName string, ruleName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *alertRulesOperations) getHandleResponse(resp *azcore.Response) (*AlertRuleResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.getHandleError(resp)
	}
	result := AlertRuleResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AlertRuleResource)
}

// getHandleError handles the Get error response.
func (client *alertRulesOperations) getHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListByResourceGroup - List the classic metric alert rules within a resource group.
func (client *alertRulesOperations) ListByResourceGroup(ctx context.Context, resourceGroupName string) (*AlertRuleResourceCollectionResponse, error) {
	req, err := client.listByResourceGroupCreateRequest(resourceGroupName)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *alertRulesOperations) listByResourceGroupCreateRequest(resourceGroupName string) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules"
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *alertRulesOperations) listByResourceGroupHandleResponse(resp *azcore.Response) (*AlertRuleResourceCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listByResourceGroupHandleError(resp)
	}
	result := AlertRuleResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AlertRuleResourceCollection)
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *alertRulesOperations) listByResourceGroupHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// ListBySubscription - List the classic metric alert rules within a subscription.
func (client *alertRulesOperations) ListBySubscription(ctx context.Context) (*AlertRuleResourceCollectionResponse, error) {
	req, err := client.listBySubscriptionCreateRequest()
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *alertRulesOperations) listBySubscriptionCreateRequest() (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.insights/alertrules"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *alertRulesOperations) listBySubscriptionHandleResponse(resp *azcore.Response) (*AlertRuleResourceCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listBySubscriptionHandleError(resp)
	}
	result := AlertRuleResourceCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AlertRuleResourceCollection)
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *alertRulesOperations) listBySubscriptionHandleError(resp *azcore.Response) error {
	return errors.New(resp.Status)
}

// Update - Updates an existing classic metric AlertRuleResource. To update other fields use the CreateOrUpdate method.
func (client *alertRulesOperations) Update(ctx context.Context, resourceGroupName string, ruleName string, alertRulesResource AlertRuleResourcePatch) (*AlertRuleResourceResponse, error) {
	req, err := client.updateCreateRequest(resourceGroupName, ruleName, alertRulesResource)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.updateHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// updateCreateRequest creates the Update request.
func (client *alertRulesOperations) updateCreateRequest(resourceGroupName string, ruleName string, alertRulesResource AlertRuleResourcePatch) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	urlPath = strings.ReplaceAll(urlPath, "{ruleName}", url.PathEscape(ruleName))
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2016-03-01")
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodPatch, *u)
	return req, req.MarshalAsJSON(alertRulesResource)
}

// updateHandleResponse handles the Update response.
func (client *alertRulesOperations) updateHandleResponse(resp *azcore.Response) (*AlertRuleResourceResponse, error) {
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated) {
		return nil, client.updateHandleError(resp)
	}
	result := AlertRuleResourceResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.AlertRuleResource)
}

// updateHandleError handles the Update error response.
func (client *alertRulesOperations) updateHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
