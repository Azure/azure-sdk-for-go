// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azmonitor

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"strings"
)

// MetricDefinitionsOperations contains the methods for the MetricDefinitions group.
type MetricDefinitionsOperations interface {
	// List - Lists the metric definitions for the resource.
	List(ctx context.Context, resourceUri string, metricDefinitionsListOptions *MetricDefinitionsListOptions) (*MetricDefinitionCollectionResponse, error)
}

// metricDefinitionsOperations implements the MetricDefinitionsOperations interface.
type metricDefinitionsOperations struct {
	*Client
}

// List - Lists the metric definitions for the resource.
func (client *metricDefinitionsOperations) List(ctx context.Context, resourceUri string, metricDefinitionsListOptions *MetricDefinitionsListOptions) (*MetricDefinitionCollectionResponse, error) {
	req, err := client.listCreateRequest(resourceUri, metricDefinitionsListOptions)
	if err != nil {
		return nil, err
	}
	resp, err := client.p.Do(ctx, req)
	if err != nil {
		return nil, err
	}
	result, err := client.listHandleResponse(resp)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// listCreateRequest creates the List request.
func (client *metricDefinitionsOperations) listCreateRequest(resourceUri string, metricDefinitionsListOptions *MetricDefinitionsListOptions) (*azcore.Request, error) {
	urlPath := "/{resourceUri}/providers/microsoft.insights/metricDefinitions"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceUri)
	u, err := client.u.Parse(urlPath)
	if err != nil {
		return nil, err
	}
	query := u.Query()
	query.Set("api-version", "2018-01-01")
	if metricDefinitionsListOptions != nil && metricDefinitionsListOptions.Metricnamespace != nil {
		query.Set("metricnamespace", *metricDefinitionsListOptions.Metricnamespace)
	}
	u.RawQuery = query.Encode()
	req := azcore.NewRequest(http.MethodGet, *u)
	return req, nil
}

// listHandleResponse handles the List response.
func (client *metricDefinitionsOperations) listHandleResponse(resp *azcore.Response) (*MetricDefinitionCollectionResponse, error) {
	if !resp.HasStatusCode(http.StatusOK) {
		return nil, client.listHandleError(resp)
	}
	result := MetricDefinitionCollectionResponse{RawResponse: resp.Response}
	return &result, resp.UnmarshalAsJSON(&result.MetricDefinitionCollection)
}

// listHandleError handles the List error response.
func (client *metricDefinitionsOperations) listHandleError(resp *azcore.Response) error {
	var err ErrorResponse
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return err
}
