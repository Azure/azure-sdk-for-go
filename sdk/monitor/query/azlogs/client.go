// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package azlogs

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// Client contains the methods for the group.
// Don't use this type directly, use a constructor function instead.
type Client struct {
	internal   *azcore.Client
	endpoint   string
	apiVersion versions
}

// QueryBatch - Execute a batch of Analytics queries
//
// Executes a batch of Analytics queries for data.
// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
// is an example for using POST with an Analytics query.
// If the operation fails it returns an *azcore.ResponseError type.
//   - body - The batch request body
//   - options - QueryBatchOptions contains the optional parameters for the Client.QueryBatch method.
func (client *Client) QueryBatch(ctx context.Context, body BatchRequest, options *QueryBatchOptions) (QueryBatchResponse, error) {
	var err error
	const operationName = "Client.QueryBatch"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.queryBatchCreateRequest(ctx, body, options)
	if err != nil {
		return QueryBatchResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryBatchResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return QueryBatchResponse{}, err
	}
	resp, err := client.queryBatchHandleResponse(httpResp)
	return resp, err
}

// queryBatchCreateRequest creates the QueryBatch request.
func (client *Client) queryBatchCreateRequest(ctx context.Context, body BatchRequest, _ *QueryBatchOptions) (*policy.Request, error) {
	host := "{endpoint}/{apiVersion}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{apiVersion}", string(client.apiVersion))
	urlPath := "/$batch"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// queryBatchHandleResponse handles the QueryBatch response.
func (client *Client) queryBatchHandleResponse(resp *http.Response) (QueryBatchResponse, error) {
	result := QueryBatchResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BatchResponse); err != nil {
		return QueryBatchResponse{}, err
	}
	return result, nil
}

// QueryResource - Execute an Analytics query using resource ID
//
// Executes an Analytics query for data in the context of a resource.
// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
// is an example for using POST with an Analytics query.
// If the operation fails it returns an *azcore.ResponseError type.
//   - resourceID - The identifier of the resource.
//   - body - The Analytics query. Learn more about the
//     [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
//   - opts - QueryResourceOptions contains the optional parameters for the Client.QueryResource method.
func (client *Client) QueryResource(ctx context.Context, resourceID string, body QueryBody, opts *QueryResourceOptions) (QueryResourceResponse, error) {
	var err error
	const operationName = "Client.QueryResource"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.queryResourceCreateRequest(ctx, resourceID, body, opts)
	if err != nil {
		return QueryResourceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryResourceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return QueryResourceResponse{}, err
	}
	resp, err := client.queryResourceHandleResponse(httpResp)
	return resp, err
}

// queryResourceCreateRequest creates the QueryResource request.
func (client *Client) queryResourceCreateRequest(ctx context.Context, resourceID string, body QueryBody, opts *QueryResourceOptions) (*policy.Request, error) {
	host := "{endpoint}/{apiVersion}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{apiVersion}", string(client.apiVersion))
	urlPath := "/{resourceId}/query"
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", resourceID)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if opts != nil && opts.Options != nil {
		req.Raw().Header["Prefer"] = []string{opts.Options.preferHeader()}
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// queryResourceHandleResponse handles the QueryResource response.
func (client *Client) queryResourceHandleResponse(resp *http.Response) (QueryResourceResponse, error) {
	result := QueryResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResults); err != nil {
		return QueryResourceResponse{}, err
	}
	return result, nil
}

// QueryWorkspace - Execute an Analytics query
//
// Executes an Analytics query for data.
// [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
// is an example for using POST with an Analytics query.
// If the operation fails it returns an *azcore.ResponseError type.
//   - workspaceID - Primary Workspace ID of the query. This is the Workspace ID from the Properties
//     blade in the Azure portal.
//   - body - The Analytics query. Learn more about the
//     [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
//   - opts - QueryWorkspaceOptions contains the optional parameters for the Client.QueryWorkspace method.
func (client *Client) QueryWorkspace(ctx context.Context, workspaceID string, body QueryBody, opts *QueryWorkspaceOptions) (QueryWorkspaceResponse, error) {
	var err error
	const operationName = "Client.QueryWorkspace"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.queryWorkspaceCreateRequest(ctx, workspaceID, body, opts)
	if err != nil {
		return QueryWorkspaceResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QueryWorkspaceResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return QueryWorkspaceResponse{}, err
	}
	resp, err := client.queryWorkspaceHandleResponse(httpResp)
	return resp, err
}

// queryWorkspaceCreateRequest creates the QueryWorkspace request.
func (client *Client) queryWorkspaceCreateRequest(ctx context.Context, workspaceID string, body QueryBody, opts *QueryWorkspaceOptions) (*policy.Request, error) {
	host := "{endpoint}/{apiVersion}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{apiVersion}", string(client.apiVersion))
	urlPath := "/workspaces/{workspaceId}/query"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	if opts != nil && opts.Options != nil {
		req.Raw().Header["Prefer"] = []string{opts.Options.preferHeader()}
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// queryWorkspaceHandleResponse handles the QueryWorkspace response.
func (client *Client) queryWorkspaceHandleResponse(resp *http.Response) (QueryWorkspaceResponse, error) {
	result := QueryWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResults); err != nil {
		return QueryWorkspaceResponse{}, err
	}
	return result, nil
}
