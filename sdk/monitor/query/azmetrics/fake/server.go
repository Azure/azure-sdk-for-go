// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/monitor/query/azmetrics"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// Server is a fake server for instances of the azmetrics.Client type.
type Server struct {
	// QueryResources is the fake for method Client.QueryResources
	// HTTP status codes to indicate success: http.StatusOK
	QueryResources func(ctx context.Context, subscriptionID string, metricNamespace string, metricNames []string, batchRequest azmetrics.ResourceIDList, options *azmetrics.QueryResourcesOptions) (resp azfake.Responder[azmetrics.QueryResourcesResponse], errResp azfake.ErrorResponder)
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of azmetrics.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{srv: srv}
}

// ServerTransport connects instances of azmetrics.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv *Server
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if serverTransportInterceptor != nil {
			res.resp, res.err, intercepted = serverTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "Client.QueryResources":
				res.resp, res.err = s.dispatchQueryResources(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ServerTransport) dispatchQueryResources(req *http.Request) (*http.Response, error) {
	if s.srv.QueryResources == nil {
		return nil, &nonRetriableError{errors.New("fake for method QueryResources not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/metrics:getBatch`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[azmetrics.ResourceIDList](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	startTimeUnescaped, err := url.QueryUnescape(qp.Get("starttime"))
	if err != nil {
		return nil, err
	}
	startTimeParam := getOptional(startTimeUnescaped)
	endTimeUnescaped, err := url.QueryUnescape(qp.Get("endtime"))
	if err != nil {
		return nil, err
	}
	endTimeParam := getOptional(endTimeUnescaped)
	intervalUnescaped, err := url.QueryUnescape(qp.Get("interval"))
	if err != nil {
		return nil, err
	}
	intervalParam := getOptional(intervalUnescaped)
	metricNamespaceParam, err := url.QueryUnescape(qp.Get("metricnamespace"))
	if err != nil {
		return nil, err
	}
	metricNamesParam, err := url.QueryUnescape(qp.Get("metricnames"))
	if err != nil {
		return nil, err
	}
	aggregationUnescaped, err := url.QueryUnescape(qp.Get("aggregation"))
	if err != nil {
		return nil, err
	}
	aggregationParam := getOptional(aggregationUnescaped)
	topUnescaped, err := url.QueryUnescape(qp.Get("top"))
	if err != nil {
		return nil, err
	}
	topParam, err := parseOptional(topUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	orderByUnescaped, err := url.QueryUnescape(qp.Get("orderby"))
	if err != nil {
		return nil, err
	}
	orderByParam := getOptional(orderByUnescaped)
	filterUnescaped, err := url.QueryUnescape(qp.Get("filter"))
	if err != nil {
		return nil, err
	}
	filterParam := getOptional(filterUnescaped)
	rollUpByUnescaped, err := url.QueryUnescape(qp.Get("rollupby"))
	if err != nil {
		return nil, err
	}
	rollUpByParam := getOptional(rollUpByUnescaped)
	var options *azmetrics.QueryResourcesOptions
	if startTimeParam != nil || endTimeParam != nil || intervalParam != nil || aggregationParam != nil || topParam != nil || orderByParam != nil || filterParam != nil || rollUpByParam != nil {
		options = &azmetrics.QueryResourcesOptions{
			StartTime:   startTimeParam,
			EndTime:     endTimeParam,
			Interval:    intervalParam,
			Aggregation: aggregationParam,
			Top:         topParam,
			OrderBy:     orderByParam,
			Filter:      filterParam,
			RollUpBy:    rollUpByParam,
		}
	}
	respr, errRespr := s.srv.QueryResources(req.Context(), subscriptionIDParam, metricNamespaceParam, splitHelper(metricNamesParam, ","), body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MetricResults, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ServerTransport
var serverTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
