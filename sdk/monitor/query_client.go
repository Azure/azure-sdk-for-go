//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package monitor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// QueryClient contains the methods for the Query group.
// Don't use this type directly, use NewQueryClient() instead.
type QueryClient struct {
	pl runtime.Pipeline
}

// NewQueryClient creates a new instance of QueryClient with the specified values.
// pl - the pipeline used for sending requests and handling responses.
func NewQueryClient(pl runtime.Pipeline) *QueryClient {
	client := &QueryClient{
		pl: pl,
	}
	return client
}

// Batch - Executes a batch of Analytics queries for data. Here [https://dev.loganalytics.io/documentation/Using-the-API]
// is an example for using POST with an Analytics query.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-05-19_Preview
// body - The batch request body
// options - QueryClientBatchOptions contains the optional parameters for the QueryClient.Batch method.
func (client *QueryClient) Batch(ctx context.Context, body BatchRequest, options *QueryClientBatchOptions) (QueryClientBatchResponse, error) {
	req, err := client.batchCreateRequest(ctx, body, options)
	if err != nil {
		return QueryClientBatchResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueryClientBatchResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueryClientBatchResponse{}, runtime.NewResponseError(resp)
	}
	return client.batchHandleResponse(resp)
}

// batchCreateRequest creates the Batch request.
func (client *QueryClient) batchCreateRequest(ctx context.Context, body BatchRequest, options *QueryClientBatchOptions) (*policy.Request, error) {
	urlPath := "/$batch"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// batchHandleResponse handles the Batch response.
func (client *QueryClient) batchHandleResponse(resp *http.Response) (QueryClientBatchResponse, error) {
	result := QueryClientBatchResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BatchResponse); err != nil {
		return QueryClientBatchResponse{}, err
	}
	return result, nil
}

// Execute - Executes an Analytics query for data. Here [https://dev.loganalytics.io/documentation/Using-the-API] is an example
// for using POST with an Analytics query.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-05-19_Preview
// workspaceID - ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
// body - The Analytics query. Learn more about the Analytics query syntax [https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/]
// options - QueryClientExecuteOptions contains the optional parameters for the QueryClient.Execute method.
func (client *QueryClient) Execute(ctx context.Context, workspaceID string, body QueryBody, options *QueryClientExecuteOptions) (QueryClientExecuteResponse, error) {
	req, err := client.executeCreateRequest(ctx, workspaceID, body, options)
	if err != nil {
		return QueryClientExecuteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueryClientExecuteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueryClientExecuteResponse{}, runtime.NewResponseError(resp)
	}
	return client.executeHandleResponse(resp)
}

// executeCreateRequest creates the Execute request.
func (client *QueryClient) executeCreateRequest(ctx context.Context, workspaceID string, body QueryBody, options *QueryClientExecuteOptions) (*policy.Request, error) {
	urlPath := "/workspaces/{workspaceId}/query"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	if options != nil && options.Prefer != nil {
		req.Raw().Header["Prefer"] = []string{*options.Prefer}
	}
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// executeHandleResponse handles the Execute response.
func (client *QueryClient) executeHandleResponse(resp *http.Response) (QueryClientExecuteResponse, error) {
	result := QueryClientExecuteResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResults); err != nil {
		return QueryClientExecuteResponse{}, err
	}
	return result, nil
}

// Get - Executes an Analytics query for data
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-05-19_Preview
// workspaceID - ID of the workspace. This is Workspace ID from the Properties blade in the Azure portal.
// query - The Analytics query. Learn more about the Analytics query syntax [https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/]
// options - QueryClientGetOptions contains the optional parameters for the QueryClient.Get method.
func (client *QueryClient) Get(ctx context.Context, workspaceID string, query string, options *QueryClientGetOptions) (QueryClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, workspaceID, query, options)
	if err != nil {
		return QueryClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueryClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueryClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *QueryClient) getCreateRequest(ctx context.Context, workspaceID string, query string, options *QueryClientGetOptions) (*policy.Request, error) {
	urlPath := "/workspaces/{workspaceId}/query"
	if workspaceID == "" {
		return nil, errors.New("parameter workspaceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceId}", url.PathEscape(workspaceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("query", query)
	if options != nil && options.Timespan != nil {
		reqQP.Set("timespan", *options.Timespan)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *QueryClient) getHandleResponse(resp *http.Response) (QueryClientGetResponse, error) {
	result := QueryClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResults); err != nil {
		return QueryClientGetResponse{}, err
	}
	return result, nil
}
