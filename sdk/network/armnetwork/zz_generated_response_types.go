// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"net/http"
	"time"
)

// ApplicationGatewayAvailableSSLOptionsResponse is the response envelope for operations that return a ApplicationGatewayAvailableSSLOptions type.
type ApplicationGatewayAvailableSSLOptionsResponse struct {
	// Response for ApplicationGatewayAvailableSslOptions API service call.
	ApplicationGatewayAvailableSSLOptions *ApplicationGatewayAvailableSSLOptions

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayAvailableSSLPredefinedPoliciesResponse is the response envelope for operations that return a ApplicationGatewayAvailableSSLPredefinedPolicies
// type.
type ApplicationGatewayAvailableSSLPredefinedPoliciesResponse struct {
	// Response for ApplicationGatewayAvailableSslOptions API service call.
	ApplicationGatewayAvailableSSLPredefinedPolicies *ApplicationGatewayAvailableSSLPredefinedPolicies

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayAvailableWafRuleSetsResultResponse is the response envelope for operations that return a ApplicationGatewayAvailableWafRuleSetsResult
// type.
type ApplicationGatewayAvailableWafRuleSetsResultResponse struct {
	// Response for ApplicationGatewayAvailableWafRuleSets API service call.
	ApplicationGatewayAvailableWafRuleSetsResult *ApplicationGatewayAvailableWafRuleSetsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthOnDemandPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealthOnDemand
// type.
type ApplicationGatewayBackendHealthOnDemandPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ApplicationGatewayBackendHealthOnDemandResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayBackendHealthOnDemandPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthOnDemandResponse is the response envelope for operations that return a ApplicationGatewayBackendHealthOnDemand type.
type ApplicationGatewayBackendHealthOnDemandResponse struct {
	// Result of on demand test probe.
	ApplicationGatewayBackendHealthOnDemand *ApplicationGatewayBackendHealthOnDemand

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ApplicationGatewayBackendHealthResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayBackendHealthPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayBackendHealthResponse is the response envelope for operations that return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthResponse struct {
	// Response for ApplicationGatewayBackendHealth API service call.
	ApplicationGatewayBackendHealth *ApplicationGatewayBackendHealth

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayListResultResponse is the response envelope for operations that return a ApplicationGatewayListResult type.
type ApplicationGatewayListResultResponse struct {
	// Response for ListApplicationGateways API service call.
	ApplicationGatewayListResult *ApplicationGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPollerResponse is the response envelope for operations that asynchronously return a ApplicationGateway type.
type ApplicationGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ApplicationGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateEndpointConnectionListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnectionListResult
// type.
type ApplicationGatewayPrivateEndpointConnectionListResultResponse struct {
	// Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.
	ApplicationGatewayPrivateEndpointConnectionListResult *ApplicationGatewayPrivateEndpointConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateEndpointConnectionPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ApplicationGatewayPrivateEndpointConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationGatewayPrivateEndpointConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateEndpointConnectionResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionResponse struct {
	// Private Endpoint connection on an application gateway.
	ApplicationGatewayPrivateEndpointConnection *ApplicationGatewayPrivateEndpointConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayPrivateLinkResourceListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateLinkResourceListResult
// type.
type ApplicationGatewayPrivateLinkResourceListResultResponse struct {
	// Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.
	ApplicationGatewayPrivateLinkResourceListResult *ApplicationGatewayPrivateLinkResourceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewayResponse is the response envelope for operations that return a ApplicationGateway type.
type ApplicationGatewayResponse struct {
	// Application gateway resource.
	ApplicationGateway *ApplicationGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationGatewaySSLPredefinedPolicyResponse is the response envelope for operations that return a ApplicationGatewaySSLPredefinedPolicy type.
type ApplicationGatewaySSLPredefinedPolicyResponse struct {
	// An Ssl predefined policy.
	ApplicationGatewaySSLPredefinedPolicy *ApplicationGatewaySSLPredefinedPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationSecurityGroupListResultResponse is the response envelope for operations that return a ApplicationSecurityGroupListResult type.
type ApplicationSecurityGroupListResultResponse struct {
	// A list of application security groups.
	ApplicationSecurityGroupListResult *ApplicationSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ApplicationSecurityGroupResponse, error)

	// Poller contains an initialized poller.
	Poller ApplicationSecurityGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationSecurityGroupResponse is the response envelope for operations that return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupResponse struct {
	// An application security group in a resource group.
	ApplicationSecurityGroup *ApplicationSecurityGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationListResultResponse is the response envelope for operations that return a AuthorizationListResult type.
type AuthorizationListResultResponse struct {
	// Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
	AuthorizationListResult *AuthorizationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AutoApprovedPrivateLinkServicesResultResponse is the response envelope for operations that return a AutoApprovedPrivateLinkServicesResult type.
type AutoApprovedPrivateLinkServicesResultResponse struct {
	// An array of private link service id that can be linked to a private end point with auto approved.
	AutoApprovedPrivateLinkServicesResult *AutoApprovedPrivateLinkServicesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableDelegationsResultResponse is the response envelope for operations that return a AvailableDelegationsResult type.
type AvailableDelegationsResultResponse struct {
	// An array of available delegations.
	AvailableDelegationsResult *AvailableDelegationsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailablePrivateEndpointTypesResultResponse is the response envelope for operations that return a AvailablePrivateEndpointTypesResult type.
type AvailablePrivateEndpointTypesResultResponse struct {
	// An array of available PrivateEndpoint types.
	AvailablePrivateEndpointTypesResult *AvailablePrivateEndpointTypesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableProvidersListPollerResponse is the response envelope for operations that asynchronously return a AvailableProvidersList type.
type AvailableProvidersListPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (AvailableProvidersListResponse, error)

	// Poller contains an initialized poller.
	Poller AvailableProvidersListPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableProvidersListResponse is the response envelope for operations that return a AvailableProvidersList type.
type AvailableProvidersListResponse struct {
	// List of available countries with details.
	AvailableProvidersList *AvailableProvidersList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableServiceAliasesResultResponse is the response envelope for operations that return a AvailableServiceAliasesResult type.
type AvailableServiceAliasesResultResponse struct {
	// An array of available service aliases.
	AvailableServiceAliasesResult *AvailableServiceAliasesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureFirewallFqdnTagListResultResponse is the response envelope for operations that return a AzureFirewallFqdnTagListResult type.
type AzureFirewallFqdnTagListResultResponse struct {
	// Response for ListAzureFirewallFqdnTags API service call.
	AzureFirewallFqdnTagListResult *AzureFirewallFqdnTagListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureFirewallListResultResponse is the response envelope for operations that return a AzureFirewallListResult type.
type AzureFirewallListResultResponse struct {
	// Response for ListAzureFirewalls API service call.
	AzureFirewallListResult *AzureFirewallListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureFirewallPollerResponse is the response envelope for operations that asynchronously return a AzureFirewall type.
type AzureFirewallPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (AzureFirewallResponse, error)

	// Poller contains an initialized poller.
	Poller AzureFirewallPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureFirewallResponse is the response envelope for operations that return a AzureFirewall type.
type AzureFirewallResponse struct {
	// Azure Firewall resource.
	AzureFirewall *AzureFirewall

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureReachabilityReportPollerResponse is the response envelope for operations that asynchronously return a AzureReachabilityReport type.
type AzureReachabilityReportPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (AzureReachabilityReportResponse, error)

	// Poller contains an initialized poller.
	Poller AzureReachabilityReportPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureReachabilityReportResponse is the response envelope for operations that return a AzureReachabilityReport type.
type AzureReachabilityReportResponse struct {
	// Azure reachability report details.
	AzureReachabilityReport *AzureReachabilityReport

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureWebCategoryListResultResponse is the response envelope for operations that return a AzureWebCategoryListResult type.
type AzureWebCategoryListResultResponse struct {
	// Response for ListAzureWebCategories API service call.
	AzureWebCategoryListResult *AzureWebCategoryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureWebCategoryResponse is the response envelope for operations that return a AzureWebCategory type.
type AzureWebCategoryResponse struct {
	// Azure Web Category Resource.
	AzureWebCategory *AzureWebCategory

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackendAddressPoolPollerResponse is the response envelope for operations that asynchronously return a BackendAddressPool type.
type BackendAddressPoolPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BackendAddressPoolResponse, error)

	// Poller contains an initialized poller.
	Poller BackendAddressPoolPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BackendAddressPoolResponse is the response envelope for operations that return a BackendAddressPool type.
type BackendAddressPoolResponse struct {
	// Pool of backend IP addresses.
	BackendAddressPool *BackendAddressPool

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionActiveSessionListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionActiveSessionListResultPager
// type.
type BastionActiveSessionListResultPagerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BastionActiveSessionListResultPager, error)

	// Poller contains an initialized poller.
	Poller BastionActiveSessionListResultPagerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionActiveSessionListResultResponse is the response envelope for operations that return a BastionActiveSessionListResult type.
type BastionActiveSessionListResultResponse struct {
	// Response for GetActiveSessions.
	BastionActiveSessionListResult *BastionActiveSessionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionHostListResultResponse is the response envelope for operations that return a BastionHostListResult type.
type BastionHostListResultResponse struct {
	// Response for ListBastionHosts API service call.
	BastionHostListResult *BastionHostListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionHostPollerResponse is the response envelope for operations that asynchronously return a BastionHost type.
type BastionHostPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BastionHostResponse, error)

	// Poller contains an initialized poller.
	Poller BastionHostPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionHostResponse is the response envelope for operations that return a BastionHost type.
type BastionHostResponse struct {
	// Bastion Host resource.
	BastionHost *BastionHost

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionSessionDeleteResultResponse is the response envelope for operations that return a BastionSessionDeleteResult type.
type BastionSessionDeleteResultResponse struct {
	// Response for DisconnectActiveSessions.
	BastionSessionDeleteResult *BastionSessionDeleteResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionShareableLinkListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionShareableLinkListResultPager
// type.
type BastionShareableLinkListResultPagerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BastionShareableLinkListResultPager, error)

	// Poller contains an initialized poller.
	Poller BastionShareableLinkListResultPagerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BastionShareableLinkListResultResponse is the response envelope for operations that return a BastionShareableLinkListResult type.
type BastionShareableLinkListResultResponse struct {
	// Response for all the Bastion Shareable Link endpoints.
	BastionShareableLinkListResult *BastionShareableLinkListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpConnectionPollerResponse is the response envelope for operations that asynchronously return a BgpConnection type.
type BgpConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BgpConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller BgpConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpConnectionResponse is the response envelope for operations that return a BgpConnection type.
type BgpConnectionResponse struct {
	// Virtual Appliance Site resource.
	BgpConnection *BgpConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpPeerStatusListResultPollerResponse is the response envelope for operations that asynchronously return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (BgpPeerStatusListResultResponse, error)

	// Poller contains an initialized poller.
	Poller BgpPeerStatusListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpPeerStatusListResultResponse is the response envelope for operations that return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultResponse struct {
	// Response for list BGP peer status API service call.
	BgpPeerStatusListResult *BgpPeerStatusListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BgpServiceCommunityListResultResponse is the response envelope for operations that return a BgpServiceCommunityListResult type.
type BgpServiceCommunityListResultResponse struct {
	// Response for the ListServiceCommunity API service call.
	BgpServiceCommunityListResult *BgpServiceCommunityListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorListResultResponse is the response envelope for operations that return a ConnectionMonitorListResult type.
type ConnectionMonitorListResultResponse struct {
	// List of connection monitors.
	ConnectionMonitorListResult *ConnectionMonitorListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorQueryResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ConnectionMonitorQueryResultResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionMonitorQueryResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorQueryResultResponse is the response envelope for operations that return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultResponse struct {
	// List of connection states snapshots.
	ConnectionMonitorQueryResult *ConnectionMonitorQueryResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorResult type.
type ConnectionMonitorResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ConnectionMonitorResultResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionMonitorResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionMonitorResultResponse is the response envelope for operations that return a ConnectionMonitorResult type.
type ConnectionMonitorResultResponse struct {
	// Information about the connection monitor.
	ConnectionMonitorResult *ConnectionMonitorResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionResetSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ConnectionResetSharedKeyResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionResetSharedKeyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionResetSharedKeyResponse is the response envelope for operations that return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyResponse struct {
	// The virtual network connection reset shared key.
	ConnectionResetSharedKey *ConnectionResetSharedKey

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionSharedKey type.
type ConnectionSharedKeyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ConnectionSharedKeyResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectionSharedKeyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectionSharedKeyResponse is the response envelope for operations that return a ConnectionSharedKey type.
type ConnectionSharedKeyResponse struct {
	// Response for GetConnectionSharedKey API service call.
	ConnectionSharedKey *ConnectionSharedKey

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectivityInformationPollerResponse is the response envelope for operations that asynchronously return a ConnectivityInformation type.
type ConnectivityInformationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ConnectivityInformationResponse, error)

	// Poller contains an initialized poller.
	Poller ConnectivityInformationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConnectivityInformationResponse is the response envelope for operations that return a ConnectivityInformation type.
type ConnectivityInformationResponse struct {
	// Information on the connectivity status.
	ConnectivityInformation *ConnectivityInformation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomIPPrefixListResultResponse is the response envelope for operations that return a CustomIPPrefixListResult type.
type CustomIPPrefixListResultResponse struct {
	// Response for ListCustomIpPrefixes API service call.
	CustomIPPrefixListResult *CustomIPPrefixListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomIPPrefixPollerResponse is the response envelope for operations that asynchronously return a CustomIPPrefix type.
type CustomIPPrefixPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (CustomIPPrefixResponse, error)

	// Poller contains an initialized poller.
	Poller CustomIPPrefixPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomIPPrefixResponse is the response envelope for operations that return a CustomIPPrefix type.
type CustomIPPrefixResponse struct {
	// Custom IP prefix resource.
	CustomIPPrefix *CustomIPPrefix

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DNSNameAvailabilityResultResponse is the response envelope for operations that return a DNSNameAvailabilityResult type.
type DNSNameAvailabilityResultResponse struct {
	// Response for the CheckDnsNameAvailability API service call.
	DNSNameAvailabilityResult *DNSNameAvailabilityResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosCustomPolicyPollerResponse is the response envelope for operations that asynchronously return a DdosCustomPolicy type.
type DdosCustomPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DdosCustomPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller DdosCustomPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosCustomPolicyResponse is the response envelope for operations that return a DdosCustomPolicy type.
type DdosCustomPolicyResponse struct {
	// A DDoS custom policy in a resource group.
	DdosCustomPolicy *DdosCustomPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosProtectionPlanListResultResponse is the response envelope for operations that return a DdosProtectionPlanListResult type.
type DdosProtectionPlanListResultResponse struct {
	// A list of DDoS protection plans.
	DdosProtectionPlanListResult *DdosProtectionPlanListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosProtectionPlanPollerResponse is the response envelope for operations that asynchronously return a DdosProtectionPlan type.
type DdosProtectionPlanPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DdosProtectionPlanResponse, error)

	// Poller contains an initialized poller.
	Poller DdosProtectionPlanPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DdosProtectionPlanResponse is the response envelope for operations that return a DdosProtectionPlan type.
type DdosProtectionPlanResponse struct {
	// A DDoS protection plan in a resource group.
	DdosProtectionPlan *DdosProtectionPlan

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DscpConfigurationListResultResponse is the response envelope for operations that return a DscpConfigurationListResult type.
type DscpConfigurationListResultResponse struct {
	// Response for the DscpConfigurationList API service call.
	DscpConfigurationListResult *DscpConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DscpConfigurationPollerResponse is the response envelope for operations that asynchronously return a DscpConfiguration type.
type DscpConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (DscpConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller DscpConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DscpConfigurationResponse is the response envelope for operations that return a DscpConfiguration type.
type DscpConfigurationResponse struct {
	// DSCP Configuration in a resource group.
	DscpConfiguration *DscpConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveNetworkSecurityGroupListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveNetworkSecurityGroupListResult
// type.
type EffectiveNetworkSecurityGroupListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (EffectiveNetworkSecurityGroupListResultResponse, error)

	// Poller contains an initialized poller.
	Poller EffectiveNetworkSecurityGroupListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveNetworkSecurityGroupListResultResponse is the response envelope for operations that return a EffectiveNetworkSecurityGroupListResult type.
type EffectiveNetworkSecurityGroupListResultResponse struct {
	// Response for list effective network security groups API service call.
	EffectiveNetworkSecurityGroupListResult *EffectiveNetworkSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveRouteListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveRouteListResult type.
type EffectiveRouteListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (EffectiveRouteListResultResponse, error)

	// Poller contains an initialized poller.
	Poller EffectiveRouteListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EffectiveRouteListResultResponse is the response envelope for operations that return a EffectiveRouteListResult type.
type EffectiveRouteListResultResponse struct {
	// Response for list effective route API service call.
	EffectiveRouteListResult *EffectiveRouteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EndpointServicesListResultResponse is the response envelope for operations that return a EndpointServicesListResult type.
type EndpointServicesListResultResponse struct {
	// Response for the ListAvailableEndpointServices API service call.
	EndpointServicesListResult *EndpointServicesListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitAuthorizationPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitAuthorization
// type.
type ExpressRouteCircuitAuthorizationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitAuthorizationResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitAuthorizationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitAuthorizationResponse is the response envelope for operations that return a ExpressRouteCircuitAuthorization type.
type ExpressRouteCircuitAuthorizationResponse struct {
	// Authorization in an ExpressRouteCircuit resource.
	ExpressRouteCircuitAuthorization *ExpressRouteCircuitAuthorization

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCircuitConnectionListResult type.
type ExpressRouteCircuitConnectionListResultResponse struct {
	// Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
	ExpressRouteCircuitConnectionListResult *ExpressRouteCircuitConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitConnectionResponse is the response envelope for operations that return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionResponse struct {
	// Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
	ExpressRouteCircuitConnection *ExpressRouteCircuitConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitListResultResponse is the response envelope for operations that return a ExpressRouteCircuitListResult type.
type ExpressRouteCircuitListResultResponse struct {
	// Response for ListExpressRouteCircuit API service call.
	ExpressRouteCircuitListResult *ExpressRouteCircuitListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPeeringListResultResponse is the response envelope for operations that return a ExpressRouteCircuitPeeringListResult type.
type ExpressRouteCircuitPeeringListResultResponse struct {
	// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
	ExpressRouteCircuitPeeringListResult *ExpressRouteCircuitPeeringListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPeeringResponse is the response envelope for operations that return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringResponse struct {
	// Peering in an ExpressRouteCircuit resource.
	ExpressRouteCircuitPeering *ExpressRouteCircuitPeering

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuit type.
type ExpressRouteCircuitPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitResponse is the response envelope for operations that return a ExpressRouteCircuit type.
type ExpressRouteCircuitResponse struct {
	// ExpressRouteCircuit resource.
	ExpressRouteCircuit *ExpressRouteCircuit

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitStatsResponse is the response envelope for operations that return a ExpressRouteCircuitStats type.
type ExpressRouteCircuitStatsResponse struct {
	// Contains stats associated with the peering.
	ExpressRouteCircuitStats *ExpressRouteCircuitStats

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsArpTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsArpTableListResult
// type.
type ExpressRouteCircuitsArpTableListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitsArpTableListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsArpTableListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsArpTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsArpTableListResult type.
type ExpressRouteCircuitsArpTableListResultResponse struct {
	// Response for ListArpTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsArpTableListResult *ExpressRouteCircuitsArpTableListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableListResult
// type.
type ExpressRouteCircuitsRoutesTableListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitsRoutesTableListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsRoutesTableListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableListResult type.
type ExpressRouteCircuitsRoutesTableListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsRoutesTableListResult *ExpressRouteCircuitsRoutesTableListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCircuitsRoutesTableSummaryListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCircuitsRoutesTableSummaryListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCircuitsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Circuits API.
	ExpressRouteCircuitsRoutesTableSummaryListResult *ExpressRouteCircuitsRoutesTableSummaryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteConnectionListResponse is the response envelope for operations that return a ExpressRouteConnectionList type.
type ExpressRouteConnectionListResponse struct {
	// ExpressRouteConnection list.
	ExpressRouteConnectionList *ExpressRouteConnectionList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteConnection type.
type ExpressRouteConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteConnectionResponse is the response envelope for operations that return a ExpressRouteConnection type.
type ExpressRouteConnectionResponse struct {
	// ExpressRouteConnection resource.
	ExpressRouteConnection *ExpressRouteConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionListResult type.
type ExpressRouteCrossConnectionListResultResponse struct {
	// Response for ListExpressRouteCrossConnection API service call.
	ExpressRouteCrossConnectionListResult *ExpressRouteCrossConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPeeringListResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeeringList type.
type ExpressRouteCrossConnectionPeeringListResponse struct {
	// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
	ExpressRouteCrossConnectionPeeringList *ExpressRouteCrossConnectionPeeringList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionPeering
// type.
type ExpressRouteCrossConnectionPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCrossConnectionPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPeeringResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeering type.
type ExpressRouteCrossConnectionPeeringResponse struct {
	// Peering in an ExpressRoute Cross Connection resource.
	ExpressRouteCrossConnectionPeering *ExpressRouteCrossConnectionPeering

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCrossConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionResponse is the response envelope for operations that return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionResponse struct {
	// ExpressRouteCrossConnection resource.
	ExpressRouteCrossConnection *ExpressRouteCrossConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteCrossConnectionsRoutesTableSummaryListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse struct {
	// Response for ListRoutesTable associated with the Express Route Cross Connections.
	ExpressRouteCrossConnectionsRoutesTableSummaryListResult *ExpressRouteCrossConnectionsRoutesTableSummaryListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteGatewayListResponse is the response envelope for operations that return a ExpressRouteGatewayList type.
type ExpressRouteGatewayListResponse struct {
	// List of ExpressRoute gateways.
	ExpressRouteGatewayList *ExpressRouteGatewayList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteGatewayPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteGateway type.
type ExpressRouteGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRouteGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRouteGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteGatewayResponse is the response envelope for operations that return a ExpressRouteGateway type.
type ExpressRouteGatewayResponse struct {
	// ExpressRoute gateway resource.
	ExpressRouteGateway *ExpressRouteGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteLinkListResultResponse is the response envelope for operations that return a ExpressRouteLinkListResult type.
type ExpressRouteLinkListResultResponse struct {
	// Response for ListExpressRouteLinks API service call.
	ExpressRouteLinkListResult *ExpressRouteLinkListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteLinkResponse is the response envelope for operations that return a ExpressRouteLink type.
type ExpressRouteLinkResponse struct {
	// ExpressRouteLink child resource definition.
	ExpressRouteLink *ExpressRouteLink

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortListResultResponse is the response envelope for operations that return a ExpressRoutePortListResult type.
type ExpressRoutePortListResultResponse struct {
	// Response for ListExpressRoutePorts API service call.
	ExpressRoutePortListResult *ExpressRoutePortListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortPollerResponse is the response envelope for operations that asynchronously return a ExpressRoutePort type.
type ExpressRoutePortPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ExpressRoutePortResponse, error)

	// Poller contains an initialized poller.
	Poller ExpressRoutePortPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortResponse is the response envelope for operations that return a ExpressRoutePort type.
type ExpressRoutePortResponse struct {
	// ExpressRoutePort resource definition.
	ExpressRoutePort *ExpressRoutePort

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortsLocationListResultResponse is the response envelope for operations that return a ExpressRoutePortsLocationListResult type.
type ExpressRoutePortsLocationListResultResponse struct {
	// Response for ListExpressRoutePortsLocations API service call.
	ExpressRoutePortsLocationListResult *ExpressRoutePortsLocationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRoutePortsLocationResponse is the response envelope for operations that return a ExpressRoutePortsLocation type.
type ExpressRoutePortsLocationResponse struct {
	// Definition of the ExpressRoutePorts peering location resource.
	ExpressRoutePortsLocation *ExpressRoutePortsLocation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExpressRouteServiceProviderListResultResponse is the response envelope for operations that return a ExpressRouteServiceProviderListResult type.
type ExpressRouteServiceProviderListResultResponse struct {
	// Response for the ListExpressRouteServiceProvider API service call.
	ExpressRouteServiceProviderListResult *ExpressRouteServiceProviderListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyListResultResponse is the response envelope for operations that return a FirewallPolicyListResult type.
type FirewallPolicyListResultResponse struct {
	// Response for ListFirewallPolicies API service call.
	FirewallPolicyListResult *FirewallPolicyListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicy type.
type FirewallPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (FirewallPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller FirewallPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyResponse is the response envelope for operations that return a FirewallPolicy type.
type FirewallPolicyResponse struct {
	// FirewallPolicy Resource.
	FirewallPolicy *FirewallPolicy

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleCollectionGroupListResultResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroupListResult
// type.
type FirewallPolicyRuleCollectionGroupListResultResponse struct {
	// Response for ListFirewallPolicyRuleCollectionGroups API service call.
	FirewallPolicyRuleCollectionGroupListResult *FirewallPolicyRuleCollectionGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleCollectionGroupPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicyRuleCollectionGroup
// type.
type FirewallPolicyRuleCollectionGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (FirewallPolicyRuleCollectionGroupResponse, error)

	// Poller contains an initialized poller.
	Poller FirewallPolicyRuleCollectionGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallPolicyRuleCollectionGroupResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroup type.
type FirewallPolicyRuleCollectionGroupResponse struct {
	// Rule Collection Group resource.
	FirewallPolicyRuleCollectionGroup *FirewallPolicyRuleCollectionGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogInformationPollerResponse is the response envelope for operations that asynchronously return a FlowLogInformation type.
type FlowLogInformationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (FlowLogInformationResponse, error)

	// Poller contains an initialized poller.
	Poller FlowLogInformationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogInformationResponse is the response envelope for operations that return a FlowLogInformation type.
type FlowLogInformationResponse struct {
	// Information on the configuration of flow log and traffic analytics (optional) .
	FlowLogInformation *FlowLogInformation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogListResultResponse is the response envelope for operations that return a FlowLogListResult type.
type FlowLogListResultResponse struct {
	// List of flow logs.
	FlowLogListResult *FlowLogListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogPollerResponse is the response envelope for operations that asynchronously return a FlowLog type.
type FlowLogPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (FlowLogResponse, error)

	// Poller contains an initialized poller.
	Poller FlowLogPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlowLogResponse is the response envelope for operations that return a FlowLog type.
type FlowLogResponse struct {
	// A flow log resource.
	FlowLog *FlowLog

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FrontendIPConfigurationResponse is the response envelope for operations that return a FrontendIPConfiguration type.
type FrontendIPConfigurationResponse struct {
	// Frontend IP address of the load balancer.
	FrontendIPConfiguration *FrontendIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GatewayRouteListResultPollerResponse is the response envelope for operations that asynchronously return a GatewayRouteListResult type.
type GatewayRouteListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (GatewayRouteListResultResponse, error)

	// Poller contains an initialized poller.
	Poller GatewayRouteListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GatewayRouteListResultResponse is the response envelope for operations that return a GatewayRouteListResult type.
type GatewayRouteListResultResponse struct {
	// List of virtual network gateway routes.
	GatewayRouteListResult *GatewayRouteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GenerateExpressRoutePortsLOAResultResponse is the response envelope for operations that return a GenerateExpressRoutePortsLOAResult type.
type GenerateExpressRoutePortsLOAResultResponse struct {
	// Response for GenerateExpressRoutePortsLOA API service call.
	GenerateExpressRoutePortsLOAResult *GenerateExpressRoutePortsLOAResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (*http.Response, error)

	// Poller contains an initialized poller.
	Poller HTTPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubIPConfigurationPollerResponse is the response envelope for operations that asynchronously return a HubIPConfiguration type.
type HubIPConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (HubIPConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller HubIPConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubIPConfigurationResponse is the response envelope for operations that return a HubIPConfiguration type.
type HubIPConfigurationResponse struct {
	// IpConfigurations.
	HubIPConfiguration *HubIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubRouteTablePollerResponse is the response envelope for operations that asynchronously return a HubRouteTable type.
type HubRouteTablePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (HubRouteTableResponse, error)

	// Poller contains an initialized poller.
	Poller HubRouteTablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubRouteTableResponse is the response envelope for operations that return a HubRouteTable type.
type HubRouteTableResponse struct {
	// RouteTable resource in a virtual hub.
	HubRouteTable *HubRouteTable

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubVirtualNetworkConnectionPollerResponse is the response envelope for operations that asynchronously return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (HubVirtualNetworkConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller HubVirtualNetworkConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HubVirtualNetworkConnectionResponse is the response envelope for operations that return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionResponse struct {
	// HubVirtualNetworkConnection Resource.
	HubVirtualNetworkConnection *HubVirtualNetworkConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAddressAvailabilityResultResponse is the response envelope for operations that return a IPAddressAvailabilityResult type.
type IPAddressAvailabilityResultResponse struct {
	// Response for CheckIPAddressAvailability API service call.
	IPAddressAvailabilityResult *IPAddressAvailabilityResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAllocationListResultResponse is the response envelope for operations that return a IPAllocationListResult type.
type IPAllocationListResultResponse struct {
	// Response for the ListIpAllocations API service call.
	IPAllocationListResult *IPAllocationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAllocationPollerResponse is the response envelope for operations that asynchronously return a IPAllocation type.
type IPAllocationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (IPAllocationResponse, error)

	// Poller contains an initialized poller.
	Poller IPAllocationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPAllocationResponse is the response envelope for operations that return a IPAllocation type.
type IPAllocationResponse struct {
	// IpAllocation resource.
	IPAllocation *IPAllocation

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPGroupListResultResponse is the response envelope for operations that return a IPGroupListResult type.
type IPGroupListResultResponse struct {
	// Response for the ListIpGroups API service call.
	IPGroupListResult *IPGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPGroupPollerResponse is the response envelope for operations that asynchronously return a IPGroup type.
type IPGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (IPGroupResponse, error)

	// Poller contains an initialized poller.
	Poller IPGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPGroupResponse is the response envelope for operations that return a IPGroup type.
type IPGroupResponse struct {
	// The IpGroups resource information.
	IPGroup *IPGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundNatRuleListResultResponse is the response envelope for operations that return a InboundNatRuleListResult type.
type InboundNatRuleListResultResponse struct {
	// Response for ListInboundNatRule API service call.
	InboundNatRuleListResult *InboundNatRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundNatRulePollerResponse is the response envelope for operations that asynchronously return a InboundNatRule type.
type InboundNatRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (InboundNatRuleResponse, error)

	// Poller contains an initialized poller.
	Poller InboundNatRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundNatRuleResponse is the response envelope for operations that return a InboundNatRule type.
type InboundNatRuleResponse struct {
	// Inbound NAT rule of the load balancer.
	InboundNatRule *InboundNatRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundSecurityRulePollerResponse is the response envelope for operations that asynchronously return a InboundSecurityRule type.
type InboundSecurityRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (InboundSecurityRuleResponse, error)

	// Poller contains an initialized poller.
	Poller InboundSecurityRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InboundSecurityRuleResponse is the response envelope for operations that return a InboundSecurityRule type.
type InboundSecurityRuleResponse struct {
	// NVA Inbound Security Rule resource.
	InboundSecurityRule *InboundSecurityRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListHubRouteTablesResultResponse is the response envelope for operations that return a ListHubRouteTablesResult type.
type ListHubRouteTablesResultResponse struct {
	// List of RouteTables and a URL nextLink to get the next set of results.
	ListHubRouteTablesResult *ListHubRouteTablesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListHubVirtualNetworkConnectionsResultResponse is the response envelope for operations that return a ListHubVirtualNetworkConnectionsResult type.
type ListHubVirtualNetworkConnectionsResultResponse struct {
	// List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.
	ListHubVirtualNetworkConnectionsResult *ListHubVirtualNetworkConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListP2SVPNGatewaysResultResponse is the response envelope for operations that return a ListP2SVPNGatewaysResult type.
type ListP2SVPNGatewaysResultResponse struct {
	// Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.
	ListP2SVPNGatewaysResult *ListP2SVPNGatewaysResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNConnectionsResultResponse is the response envelope for operations that return a ListVPNConnectionsResult type.
type ListVPNConnectionsResultResponse struct {
	// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
	// set of results.
	ListVPNConnectionsResult *ListVPNConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNGatewayNatRulesResultResponse is the response envelope for operations that return a ListVPNGatewayNatRulesResult type.
type ListVPNGatewayNatRulesResultResponse struct {
	// Result of the request to list all nat rules to a virtual wan vpn gateway. It contains a list of Nat rules and a URL nextLink to get the next set of results.
	ListVPNGatewayNatRulesResult *ListVPNGatewayNatRulesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNGatewaysResultResponse is the response envelope for operations that return a ListVPNGatewaysResult type.
type ListVPNGatewaysResultResponse struct {
	// Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.
	ListVPNGatewaysResult *ListVPNGatewaysResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNServerConfigurationsResultResponse is the response envelope for operations that return a ListVPNServerConfigurationsResult type.
type ListVPNServerConfigurationsResultResponse struct {
	// Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.
	ListVPNServerConfigurationsResult *ListVPNServerConfigurationsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNSiteLinkConnectionsResultResponse is the response envelope for operations that return a ListVPNSiteLinkConnectionsResult type.
type ListVPNSiteLinkConnectionsResultResponse struct {
	// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
	// set of results.
	ListVPNSiteLinkConnectionsResult *ListVPNSiteLinkConnectionsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNSiteLinksResultResponse is the response envelope for operations that return a ListVPNSiteLinksResult type.
type ListVPNSiteLinksResultResponse struct {
	// Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.
	ListVPNSiteLinksResult *ListVPNSiteLinksResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVPNSitesResultResponse is the response envelope for operations that return a ListVPNSitesResult type.
type ListVPNSitesResultResponse struct {
	// Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.
	ListVPNSitesResult *ListVPNSitesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualHubBgpConnectionResultsResponse is the response envelope for operations that return a ListVirtualHubBgpConnectionResults type.
type ListVirtualHubBgpConnectionResultsResponse struct {
	// VirtualHubBgpConnections list.
	ListVirtualHubBgpConnectionResults *ListVirtualHubBgpConnectionResults

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualHubIPConfigurationResultsResponse is the response envelope for operations that return a ListVirtualHubIPConfigurationResults type.
type ListVirtualHubIPConfigurationResultsResponse struct {
	// VirtualHubIpConfigurations list.
	ListVirtualHubIPConfigurationResults *ListVirtualHubIPConfigurationResults

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualHubRouteTableV2SResultResponse is the response envelope for operations that return a ListVirtualHubRouteTableV2SResult type.
type ListVirtualHubRouteTableV2SResultResponse struct {
	// List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
	ListVirtualHubRouteTableV2SResult *ListVirtualHubRouteTableV2SResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualHubsResultResponse is the response envelope for operations that return a ListVirtualHubsResult type.
type ListVirtualHubsResultResponse struct {
	// Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.
	ListVirtualHubsResult *ListVirtualHubsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualNetworkGatewayNatRulesResultResponse is the response envelope for operations that return a ListVirtualNetworkGatewayNatRulesResult type.
type ListVirtualNetworkGatewayNatRulesResultResponse struct {
	// Result of the request to list all nat rules to a virtual network gateway. It contains a list of Nat rules and a URL nextLink to get the next set of results.
	ListVirtualNetworkGatewayNatRulesResult *ListVirtualNetworkGatewayNatRulesResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ListVirtualWANsResultResponse is the response envelope for operations that return a ListVirtualWANsResult type.
type ListVirtualWANsResultResponse struct {
	// Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.
	ListVirtualWANsResult *ListVirtualWANsResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerBackendAddressPoolListResultResponse is the response envelope for operations that return a LoadBalancerBackendAddressPoolListResult type.
type LoadBalancerBackendAddressPoolListResultResponse struct {
	// Response for ListBackendAddressPool API service call.
	LoadBalancerBackendAddressPoolListResult *LoadBalancerBackendAddressPoolListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerFrontendIPConfigurationListResultResponse is the response envelope for operations that return a LoadBalancerFrontendIPConfigurationListResult
// type.
type LoadBalancerFrontendIPConfigurationListResultResponse struct {
	// Response for ListFrontendIPConfiguration API service call.
	LoadBalancerFrontendIPConfigurationListResult *LoadBalancerFrontendIPConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerListResultResponse is the response envelope for operations that return a LoadBalancerListResult type.
type LoadBalancerListResultResponse struct {
	// Response for ListLoadBalancers API service call.
	LoadBalancerListResult *LoadBalancerListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerLoadBalancingRuleListResultResponse is the response envelope for operations that return a LoadBalancerLoadBalancingRuleListResult type.
type LoadBalancerLoadBalancingRuleListResultResponse struct {
	// Response for ListLoadBalancingRule API service call.
	LoadBalancerLoadBalancingRuleListResult *LoadBalancerLoadBalancingRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerOutboundRuleListResultResponse is the response envelope for operations that return a LoadBalancerOutboundRuleListResult type.
type LoadBalancerOutboundRuleListResultResponse struct {
	// Response for ListOutboundRule API service call.
	LoadBalancerOutboundRuleListResult *LoadBalancerOutboundRuleListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerPollerResponse is the response envelope for operations that asynchronously return a LoadBalancer type.
type LoadBalancerPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (LoadBalancerResponse, error)

	// Poller contains an initialized poller.
	Poller LoadBalancerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerProbeListResultResponse is the response envelope for operations that return a LoadBalancerProbeListResult type.
type LoadBalancerProbeListResultResponse struct {
	// Response for ListProbe API service call.
	LoadBalancerProbeListResult *LoadBalancerProbeListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancerResponse is the response envelope for operations that return a LoadBalancer type.
type LoadBalancerResponse struct {
	// LoadBalancer resource.
	LoadBalancer *LoadBalancer

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadBalancingRuleResponse is the response envelope for operations that return a LoadBalancingRule type.
type LoadBalancingRuleResponse struct {
	// A load balancing rule for a load balancer.
	LoadBalancingRule *LoadBalancingRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGatewayListResultResponse is the response envelope for operations that return a LocalNetworkGatewayListResult type.
type LocalNetworkGatewayListResultResponse struct {
	// Response for ListLocalNetworkGateways API service call.
	LocalNetworkGatewayListResult *LocalNetworkGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a LocalNetworkGateway type.
type LocalNetworkGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (LocalNetworkGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller LocalNetworkGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocalNetworkGatewayResponse is the response envelope for operations that return a LocalNetworkGateway type.
type LocalNetworkGatewayResponse struct {
	// A common class for general resource information.
	LocalNetworkGateway *LocalNetworkGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NatGatewayListResultResponse is the response envelope for operations that return a NatGatewayListResult type.
type NatGatewayListResultResponse struct {
	// Response for ListNatGateways API service call.
	NatGatewayListResult *NatGatewayListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NatGatewayPollerResponse is the response envelope for operations that asynchronously return a NatGateway type.
type NatGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NatGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller NatGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NatGatewayResponse is the response envelope for operations that return a NatGateway type.
type NatGatewayResponse struct {
	// Nat Gateway resource.
	NatGateway *NatGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkConfigurationDiagnosticResponsePollerResponse is the response envelope for operations that asynchronously return a NetworkConfigurationDiagnosticResponse
// type.
type NetworkConfigurationDiagnosticResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NetworkConfigurationDiagnosticResponseResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkConfigurationDiagnosticResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkConfigurationDiagnosticResponseResponse is the response envelope for operations that return a NetworkConfigurationDiagnosticResponse type.
type NetworkConfigurationDiagnosticResponseResponse struct {
	// Results of network configuration diagnostic on the target resource.
	NetworkConfigurationDiagnosticResponse *NetworkConfigurationDiagnosticResponse

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceIPConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceIPConfigurationListResult type.
type NetworkInterfaceIPConfigurationListResultResponse struct {
	// Response for list ip configurations API service call.
	NetworkInterfaceIPConfigurationListResult *NetworkInterfaceIPConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceIPConfigurationResponse is the response envelope for operations that return a NetworkInterfaceIPConfiguration type.
type NetworkInterfaceIPConfigurationResponse struct {
	// IPConfiguration in a network interface.
	NetworkInterfaceIPConfiguration *NetworkInterfaceIPConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceListResultResponse is the response envelope for operations that return a NetworkInterfaceListResult type.
type NetworkInterfaceListResultResponse struct {
	// Response for the ListNetworkInterface API service call.
	NetworkInterfaceListResult *NetworkInterfaceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceLoadBalancerListResultResponse is the response envelope for operations that return a NetworkInterfaceLoadBalancerListResult type.
type NetworkInterfaceLoadBalancerListResultResponse struct {
	// Response for list ip configurations API service call.
	NetworkInterfaceLoadBalancerListResult *NetworkInterfaceLoadBalancerListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfacePollerResponse is the response envelope for operations that asynchronously return a NetworkInterface type.
type NetworkInterfacePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NetworkInterfaceResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkInterfacePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceResponse is the response envelope for operations that return a NetworkInterface type.
type NetworkInterfaceResponse struct {
	// A network interface in a resource group.
	NetworkInterface *NetworkInterface

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceTapConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceTapConfigurationListResult type.
type NetworkInterfaceTapConfigurationListResultResponse struct {
	// Response for list tap configurations API service call.
	NetworkInterfaceTapConfigurationListResult *NetworkInterfaceTapConfigurationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceTapConfigurationPollerResponse is the response envelope for operations that asynchronously return a NetworkInterfaceTapConfiguration
// type.
type NetworkInterfaceTapConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NetworkInterfaceTapConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkInterfaceTapConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkInterfaceTapConfigurationResponse is the response envelope for operations that return a NetworkInterfaceTapConfiguration type.
type NetworkInterfaceTapConfigurationResponse struct {
	// Tap configuration in a Network Interface.
	NetworkInterfaceTapConfiguration *NetworkInterfaceTapConfiguration

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkProfileListResultResponse is the response envelope for operations that return a NetworkProfileListResult type.
type NetworkProfileListResultResponse struct {
	// Response for ListNetworkProfiles API service call.
	NetworkProfileListResult *NetworkProfileListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkProfileResponse is the response envelope for operations that return a NetworkProfile type.
type NetworkProfileResponse struct {
	// Network profile resource.
	NetworkProfile *NetworkProfile

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkSecurityGroupListResultResponse is the response envelope for operations that return a NetworkSecurityGroupListResult type.
type NetworkSecurityGroupListResultResponse struct {
	// Response for ListNetworkSecurityGroups API service call.
	NetworkSecurityGroupListResult *NetworkSecurityGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a NetworkSecurityGroup type.
type NetworkSecurityGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NetworkSecurityGroupResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkSecurityGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkSecurityGroupResponse is the response envelope for operations that return a NetworkSecurityGroup type.
type NetworkSecurityGroupResponse struct {
	// NetworkSecurityGroup resource.
	NetworkSecurityGroup *NetworkSecurityGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualApplianceListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceListResult type.
type NetworkVirtualApplianceListResultResponse struct {
	// Response for ListNetworkVirtualAppliances API service call.
	NetworkVirtualApplianceListResult *NetworkVirtualApplianceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualAppliancePollerResponse is the response envelope for operations that asynchronously return a NetworkVirtualAppliance type.
type NetworkVirtualAppliancePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NetworkVirtualApplianceResponse, error)

	// Poller contains an initialized poller.
	Poller NetworkVirtualAppliancePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualApplianceResponse is the response envelope for operations that return a NetworkVirtualAppliance type.
type NetworkVirtualApplianceResponse struct {
	// NetworkVirtualAppliance Resource.
	NetworkVirtualAppliance *NetworkVirtualAppliance

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualApplianceSKUListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSKUListResult type.
type NetworkVirtualApplianceSKUListResultResponse struct {
	// Response for ListNetworkVirtualApplianceSkus API service call.
	NetworkVirtualApplianceSKUListResult *NetworkVirtualApplianceSKUListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualApplianceSKUResponse is the response envelope for operations that return a NetworkVirtualApplianceSKU type.
type NetworkVirtualApplianceSKUResponse struct {
	// Definition of the NetworkVirtualApplianceSkus resource.
	NetworkVirtualApplianceSKU *NetworkVirtualApplianceSKU

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkVirtualApplianceSiteListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSiteListResult type.
type NetworkVirtualApplianceSiteListResultResponse struct {
	// Response for ListNetworkVirtualApplianceSites API service call.
	NetworkVirtualApplianceSiteListResult *NetworkVirtualApplianceSiteListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkWatcherListResultResponse is the response envelope for operations that return a NetworkWatcherListResult type.
type NetworkWatcherListResultResponse struct {
	// Response for ListNetworkWatchers API service call.
	NetworkWatcherListResult *NetworkWatcherListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NetworkWatcherResponse is the response envelope for operations that return a NetworkWatcher type.
type NetworkWatcherResponse struct {
	// Network watcher in a resource group.
	NetworkWatcher *NetworkWatcher

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NextHopResultPollerResponse is the response envelope for operations that asynchronously return a NextHopResult type.
type NextHopResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (NextHopResultResponse, error)

	// Poller contains an initialized poller.
	Poller NextHopResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// NextHopResultResponse is the response envelope for operations that return a NextHopResult type.
type NextHopResultResponse struct {
	// The information about next hop from the specified VM.
	NextHopResult *NextHopResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse struct {
	// Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.
	OperationListResult *OperationListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OutboundRuleResponse is the response envelope for operations that return a OutboundRule type.
type OutboundRuleResponse struct {
	// Outbound rule of the load balancer.
	OutboundRule *OutboundRule

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// P2SVPNConnectionHealthPollerResponse is the response envelope for operations that asynchronously return a P2SVPNConnectionHealth type.
type P2SVPNConnectionHealthPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (P2SVPNConnectionHealthResponse, error)

	// Poller contains an initialized poller.
	Poller P2SVPNConnectionHealthPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// P2SVPNConnectionHealthResponse is the response envelope for operations that return a P2SVPNConnectionHealth type.
type P2SVPNConnectionHealthResponse struct {
	// P2S Vpn connection detailed health written to sas url.
	P2SVPNConnectionHealth *P2SVPNConnectionHealth

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// P2SVPNGatewayPollerResponse is the response envelope for operations that asynchronously return a P2SVPNGateway type.
type P2SVPNGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (P2SVPNGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller P2SVPNGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// P2SVPNGatewayResponse is the response envelope for operations that return a P2SVPNGateway type.
type P2SVPNGatewayResponse struct {
	// P2SVpnGateway Resource.
	P2SVPNGateway *P2SVPNGateway

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureListResultResponse is the response envelope for operations that return a PacketCaptureListResult type.
type PacketCaptureListResultResponse struct {
	// List of packet capture sessions.
	PacketCaptureListResult *PacketCaptureListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureQueryStatusResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PacketCaptureQueryStatusResultResponse, error)

	// Poller contains an initialized poller.
	Poller PacketCaptureQueryStatusResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureQueryStatusResultResponse is the response envelope for operations that return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultResponse struct {
	// Status of packet capture session.
	PacketCaptureQueryStatusResult *PacketCaptureQueryStatusResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureResult type.
type PacketCaptureResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PacketCaptureResultResponse, error)

	// Poller contains an initialized poller.
	Poller PacketCaptureResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PacketCaptureResultResponse is the response envelope for operations that return a PacketCaptureResult type.
type PacketCaptureResultResponse struct {
	// Information about packet capture session.
	PacketCaptureResult *PacketCaptureResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnectionListResult
// type.
type PeerExpressRouteCircuitConnectionListResultResponse struct {
	// Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
	PeerExpressRouteCircuitConnectionListResult *PeerExpressRouteCircuitConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerExpressRouteCircuitConnectionResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnection type.
type PeerExpressRouteCircuitConnectionResponse struct {
	// Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
	PeerExpressRouteCircuitConnection *PeerExpressRouteCircuitConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerRouteListPollerResponse is the response envelope for operations that asynchronously return a PeerRouteList type.
type PeerRouteListPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PeerRouteListResponse, error)

	// Poller contains an initialized poller.
	Poller PeerRouteListPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PeerRouteListResponse is the response envelope for operations that return a PeerRouteList type.
type PeerRouteListResponse struct {
	// List of virtual router peer routes.
	PeerRouteList *PeerRouteList

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateDNSZoneGroupListResultResponse is the response envelope for operations that return a PrivateDNSZoneGroupListResult type.
type PrivateDNSZoneGroupListResultResponse struct {
	// Response for the ListPrivateDnsZoneGroups API service call.
	PrivateDNSZoneGroupListResult *PrivateDNSZoneGroupListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateDNSZoneGroupPollerResponse is the response envelope for operations that asynchronously return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateDNSZoneGroupResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateDNSZoneGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateDNSZoneGroupResponse is the response envelope for operations that return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupResponse struct {
	// Private dns zone group resource.
	PrivateDNSZoneGroup *PrivateDNSZoneGroup

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionListResultResponse is the response envelope for operations that return a PrivateEndpointConnectionListResult type.
type PrivateEndpointConnectionListResultResponse struct {
	// Response for the ListPrivateEndpointConnection API service call.
	PrivateEndpointConnectionListResult *PrivateEndpointConnectionListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse struct {
	// PrivateEndpointConnection resource.
	PrivateEndpointConnection *PrivateEndpointConnection

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointListResultResponse is the response envelope for operations that return a PrivateEndpointListResult type.
type PrivateEndpointListResultResponse struct {
	// Response for the ListPrivateEndpoints API service call.
	PrivateEndpointListResult *PrivateEndpointListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointPollerResponse is the response envelope for operations that asynchronously return a PrivateEndpoint type.
type PrivateEndpointPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateEndpointResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateEndpointPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointResponse is the response envelope for operations that return a PrivateEndpoint type.
type PrivateEndpointResponse struct {
	// Private endpoint resource.
	PrivateEndpoint *PrivateEndpoint

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServiceListResultResponse is the response envelope for operations that return a PrivateLinkServiceListResult type.
type PrivateLinkServiceListResultResponse struct {
	// Response for the ListPrivateLinkService API service call.
	PrivateLinkServiceListResult *PrivateLinkServiceListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicePollerResponse is the response envelope for operations that asynchronously return a PrivateLinkService type.
type PrivateLinkServicePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateLinkServiceResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateLinkServicePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServiceResponse is the response envelope for operations that return a PrivateLinkService type.
type PrivateLinkServiceResponse struct {
	// Private link service resource.
	PrivateLinkService *PrivateLinkService

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServiceVisibilityPollerResponse is the response envelope for operations that asynchronously return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PrivateLinkServiceVisibilityResponse, error)

	// Poller contains an initialized poller.
	Poller PrivateLinkServiceVisibilityPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServiceVisibilityResponse is the response envelope for operations that return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityResponse struct {
	// Response for the CheckPrivateLinkServiceVisibility API service call.
	PrivateLinkServiceVisibility *PrivateLinkServiceVisibility

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProbeResponse is the response envelope for operations that return a Probe type.
type ProbeResponse struct {
	// A load balancer probe.
	Probe *Probe

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPAddressListResultResponse is the response envelope for operations that return a PublicIPAddressListResult type.
type PublicIPAddressListResultResponse struct {
	// Response for ListPublicIpAddresses API service call.
	PublicIPAddressListResult *PublicIPAddressListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPAddressPollerResponse is the response envelope for operations that asynchronously return a PublicIPAddress type.
type PublicIPAddressPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PublicIPAddressResponse, error)

	// Poller contains an initialized poller.
	Poller PublicIPAddressPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPAddressResponse is the response envelope for operations that return a PublicIPAddress type.
type PublicIPAddressResponse struct {
	// Public IP address resource.
	PublicIPAddress *PublicIPAddress

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPPrefixListResultResponse is the response envelope for operations that return a PublicIPPrefixListResult type.
type PublicIPPrefixListResultResponse struct {
	// Response for ListPublicIpPrefixes API service call.
	PublicIPPrefixListResult *PublicIPPrefixListResult

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPPrefixPollerResponse is the response envelope for operations that asynchronously return a PublicIPPrefix type.
type PublicIPPrefixPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (PublicIPPrefixResponse, error)

	// Poller contains an initialized poller.
	Poller PublicIPPrefixPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicIPPrefixResponse is the response envelope for operations that return a PublicIPPrefix type.
type PublicIPPrefixResponse struct {
	// Public IP prefix resource.
	PublicIPPrefix *PublicIPPrefix

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceNavigationLinksListResultResponse is the response envelope for operations that return a ResourceNavigationLinksListResult type.
type ResourceNavigationLinksListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ResourceNavigationLinks_List operation.
	ResourceNavigationLinksListResult *ResourceNavigationLinksListResult
}

// RouteFilterListResultResponse is the response envelope for operations that return a RouteFilterListResult type.
type RouteFilterListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteFilters API service call.
	RouteFilterListResult *RouteFilterListResult
}

// RouteFilterPollerResponse is the response envelope for operations that asynchronously return a RouteFilter type.
type RouteFilterPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RouteFilterResponse, error)

	// Poller contains an initialized poller.
	Poller RouteFilterPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RouteFilterResponse is the response envelope for operations that return a RouteFilter type.
type RouteFilterResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route Filter Resource.
	RouteFilter *RouteFilter
}

// RouteFilterRuleListResultResponse is the response envelope for operations that return a RouteFilterRuleListResult type.
type RouteFilterRuleListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteFilterRules API service call.
	RouteFilterRuleListResult *RouteFilterRuleListResult
}

// RouteFilterRulePollerResponse is the response envelope for operations that asynchronously return a RouteFilterRule type.
type RouteFilterRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RouteFilterRuleResponse, error)

	// Poller contains an initialized poller.
	Poller RouteFilterRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RouteFilterRuleResponse is the response envelope for operations that return a RouteFilterRule type.
type RouteFilterRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route Filter Rule Resource.
	RouteFilterRule *RouteFilterRule
}

// RouteListResultResponse is the response envelope for operations that return a RouteListResult type.
type RouteListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRoute API service call.
	RouteListResult *RouteListResult
}

// RoutePollerResponse is the response envelope for operations that asynchronously return a Route type.
type RoutePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RouteResponse, error)

	// Poller contains an initialized poller.
	Poller RoutePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RouteResponse is the response envelope for operations that return a Route type.
type RouteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route resource.
	Route *Route
}

// RouteTableListResultResponse is the response envelope for operations that return a RouteTableListResult type.
type RouteTableListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListRouteTable API service call.
	RouteTableListResult *RouteTableListResult
}

// RouteTablePollerResponse is the response envelope for operations that asynchronously return a RouteTable type.
type RouteTablePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (RouteTableResponse, error)

	// Poller contains an initialized poller.
	Poller RouteTablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RouteTableResponse is the response envelope for operations that return a RouteTable type.
type RouteTableResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Route table resource.
	RouteTable *RouteTable
}

// SecurityGroupViewResultPollerResponse is the response envelope for operations that asynchronously return a SecurityGroupViewResult type.
type SecurityGroupViewResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SecurityGroupViewResultResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityGroupViewResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityGroupViewResultResponse is the response envelope for operations that return a SecurityGroupViewResult type.
type SecurityGroupViewResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The information about security rules applied to the specified VM.
	SecurityGroupViewResult *SecurityGroupViewResult
}

// SecurityPartnerProviderListResultResponse is the response envelope for operations that return a SecurityPartnerProviderListResult type.
type SecurityPartnerProviderListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSecurityPartnerProviders API service call.
	SecurityPartnerProviderListResult *SecurityPartnerProviderListResult
}

// SecurityPartnerProviderPollerResponse is the response envelope for operations that asynchronously return a SecurityPartnerProvider type.
type SecurityPartnerProviderPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SecurityPartnerProviderResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityPartnerProviderPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityPartnerProviderResponse is the response envelope for operations that return a SecurityPartnerProvider type.
type SecurityPartnerProviderResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Security Partner Provider resource.
	SecurityPartnerProvider *SecurityPartnerProvider
}

// SecurityRuleListResultResponse is the response envelope for operations that return a SecurityRuleListResult type.
type SecurityRuleListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.
	SecurityRuleListResult *SecurityRuleListResult
}

// SecurityRulePollerResponse is the response envelope for operations that asynchronously return a SecurityRule type.
type SecurityRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SecurityRuleResponse, error)

	// Poller contains an initialized poller.
	Poller SecurityRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SecurityRuleResponse is the response envelope for operations that return a SecurityRule type.
type SecurityRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Network security rule.
	SecurityRule *SecurityRule
}

// ServiceAssociationLinksListResultResponse is the response envelope for operations that return a ServiceAssociationLinksListResult type.
type ServiceAssociationLinksListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ServiceAssociationLinks_List operation.
	ServiceAssociationLinksListResult *ServiceAssociationLinksListResult
}

// ServiceEndpointPolicyDefinitionListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinitionListResult type.
type ServiceEndpointPolicyDefinitionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint
	// policy.
	ServiceEndpointPolicyDefinitionListResult *ServiceEndpointPolicyDefinitionListResult
}

// ServiceEndpointPolicyDefinitionPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ServiceEndpointPolicyDefinitionResponse, error)

	// Poller contains an initialized poller.
	Poller ServiceEndpointPolicyDefinitionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointPolicyDefinitionResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Service Endpoint policy definitions.
	ServiceEndpointPolicyDefinition *ServiceEndpointPolicyDefinition
}

// ServiceEndpointPolicyListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyListResult type.
type ServiceEndpointPolicyListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListServiceEndpointPolicies API service call.
	ServiceEndpointPolicyListResult *ServiceEndpointPolicyListResult
}

// ServiceEndpointPolicyPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (ServiceEndpointPolicyResponse, error)

	// Poller contains an initialized poller.
	Poller ServiceEndpointPolicyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointPolicyResponse is the response envelope for operations that return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Service End point policy resource.
	ServiceEndpointPolicy *ServiceEndpointPolicy
}

// ServiceTagsListResultResponse is the response envelope for operations that return a ServiceTagsListResult type.
type ServiceTagsListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListServiceTags API service call.
	ServiceTagsListResult *ServiceTagsListResult
}

// StringArrayResponse is the response envelope for operations that return a []*string type.
type StringArrayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ApplicationGatewayAvailableServerVariables API service call.
	StringArray []*string
}

// StringPollerResponse is the response envelope for operations that asynchronously return a string type.
type StringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (StringResponse, error)

	// Poller contains an initialized poller.
	Poller StringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StringResponse is the response envelope for operations that return a string type.
type StringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
	Value       *string
}

// SubnetListResultResponse is the response envelope for operations that return a SubnetListResult type.
type SubnetListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
	SubnetListResult *SubnetListResult
}

// SubnetPollerResponse is the response envelope for operations that asynchronously return a Subnet type.
type SubnetPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (SubnetResponse, error)

	// Poller contains an initialized poller.
	Poller SubnetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubnetResponse is the response envelope for operations that return a Subnet type.
type SubnetResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Subnet in a virtual network resource.
	Subnet *Subnet
}

// TopologyResponse is the response envelope for operations that return a Topology type.
type TopologyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Topology of the specified resource group.
	Topology *Topology
}

// TroubleshootingResultPollerResponse is the response envelope for operations that asynchronously return a TroubleshootingResult type.
type TroubleshootingResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (TroubleshootingResultResponse, error)

	// Poller contains an initialized poller.
	Poller TroubleshootingResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TroubleshootingResultResponse is the response envelope for operations that return a TroubleshootingResult type.
type TroubleshootingResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Troubleshooting information gained from specified resource.
	TroubleshootingResult *TroubleshootingResult
}

// UsagesListResultResponse is the response envelope for operations that return a UsagesListResult type.
type UsagesListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// The list usages operation response.
	UsagesListResult *UsagesListResult
}

// VPNClientConnectionHealthDetailListResultPollerResponse is the response envelope for operations that asynchronously return a VPNClientConnectionHealthDetailListResult
// type.
type VPNClientConnectionHealthDetailListResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNClientConnectionHealthDetailListResultResponse, error)

	// Poller contains an initialized poller.
	Poller VPNClientConnectionHealthDetailListResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNClientConnectionHealthDetailListResultResponse is the response envelope for operations that return a VPNClientConnectionHealthDetailListResult type.
type VPNClientConnectionHealthDetailListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// List of virtual network gateway vpn client connection health.
	VPNClientConnectionHealthDetailListResult *VPNClientConnectionHealthDetailListResult
}

// VPNClientIPsecParametersPollerResponse is the response envelope for operations that asynchronously return a VPNClientIPsecParameters type.
type VPNClientIPsecParametersPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNClientIPsecParametersResponse, error)

	// Poller contains an initialized poller.
	Poller VPNClientIPsecParametersPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNClientIPsecParametersResponse is the response envelope for operations that return a VPNClientIPsecParameters type.
type VPNClientIPsecParametersResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// An IPSec parameters for a virtual network gateway P2S connection.
	VPNClientIPsecParameters *VPNClientIPsecParameters
}

// VPNConnectionPollerResponse is the response envelope for operations that asynchronously return a VPNConnection type.
type VPNConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller VPNConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNConnectionResponse is the response envelope for operations that return a VPNConnection type.
type VPNConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnConnection Resource.
	VPNConnection *VPNConnection
}

// VPNGatewayNatRulePollerResponse is the response envelope for operations that asynchronously return a VPNGatewayNatRule type.
type VPNGatewayNatRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNGatewayNatRuleResponse, error)

	// Poller contains an initialized poller.
	Poller VPNGatewayNatRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNGatewayNatRuleResponse is the response envelope for operations that return a VPNGatewayNatRule type.
type VPNGatewayNatRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnGatewayNatRule Resource.
	VPNGatewayNatRule *VPNGatewayNatRule
}

// VPNGatewayPollerResponse is the response envelope for operations that asynchronously return a VPNGateway type.
type VPNGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller VPNGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNGatewayResponse is the response envelope for operations that return a VPNGateway type.
type VPNGatewayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnGateway Resource.
	VPNGateway *VPNGateway
}

// VPNProfileResponsePollerResponse is the response envelope for operations that asynchronously return a VPNProfileResponse type.
type VPNProfileResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNProfileResponseResponse, error)

	// Poller contains an initialized poller.
	Poller VPNProfileResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNProfileResponseResponse is the response envelope for operations that return a VPNProfileResponse type.
type VPNProfileResponseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Vpn Profile Response for package generation.
	VPNProfileResponse *VPNProfileResponse
}

// VPNServerConfigurationPollerResponse is the response envelope for operations that asynchronously return a VPNServerConfiguration type.
type VPNServerConfigurationPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNServerConfigurationResponse, error)

	// Poller contains an initialized poller.
	Poller VPNServerConfigurationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNServerConfigurationResponse is the response envelope for operations that return a VPNServerConfiguration type.
type VPNServerConfigurationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnServerConfiguration Resource.
	VPNServerConfiguration *VPNServerConfiguration
}

// VPNServerConfigurationsResponsePollerResponse is the response envelope for operations that asynchronously return a VPNServerConfigurationsResponse type.
type VPNServerConfigurationsResponsePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNServerConfigurationsResponseResponse, error)

	// Poller contains an initialized poller.
	Poller VPNServerConfigurationsResponsePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNServerConfigurationsResponseResponse is the response envelope for operations that return a VPNServerConfigurationsResponse type.
type VPNServerConfigurationsResponseResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnServerConfigurations list associated with VirtualWan Response.
	VPNServerConfigurationsResponse *VPNServerConfigurationsResponse
}

// VPNSiteLinkConnectionResponse is the response envelope for operations that return a VPNSiteLinkConnection type.
type VPNSiteLinkConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSiteLinkConnection Resource.
	VPNSiteLinkConnection *VPNSiteLinkConnection
}

// VPNSiteLinkResponse is the response envelope for operations that return a VPNSiteLink type.
type VPNSiteLinkResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSiteLink Resource.
	VPNSiteLink *VPNSiteLink
}

// VPNSitePollerResponse is the response envelope for operations that asynchronously return a VPNSite type.
type VPNSitePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VPNSiteResponse, error)

	// Poller contains an initialized poller.
	Poller VPNSitePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VPNSiteResponse is the response envelope for operations that return a VPNSite type.
type VPNSiteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VpnSite Resource.
	VPNSite *VPNSite
}

// VerificationIPFlowResultPollerResponse is the response envelope for operations that asynchronously return a VerificationIPFlowResult type.
type VerificationIPFlowResultPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VerificationIPFlowResultResponse, error)

	// Poller contains an initialized poller.
	Poller VerificationIPFlowResultPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VerificationIPFlowResultResponse is the response envelope for operations that return a VerificationIPFlowResult type.
type VerificationIPFlowResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Results of IP flow verification on the target resource.
	VerificationIPFlowResult *VerificationIPFlowResult
}

// VirtualApplianceSitePollerResponse is the response envelope for operations that asynchronously return a VirtualApplianceSite type.
type VirtualApplianceSitePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualApplianceSiteResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualApplianceSitePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualApplianceSiteResponse is the response envelope for operations that return a VirtualApplianceSite type.
type VirtualApplianceSiteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Appliance Site resource.
	VirtualApplianceSite *VirtualApplianceSite
}

// VirtualHubPollerResponse is the response envelope for operations that asynchronously return a VirtualHub type.
type VirtualHubPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualHubResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualHubPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualHubResponse is the response envelope for operations that return a VirtualHub type.
type VirtualHubResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualHub Resource.
	VirtualHub *VirtualHub
}

// VirtualHubRouteTableV2PollerResponse is the response envelope for operations that asynchronously return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2PollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualHubRouteTableV2Response, error)

	// Poller contains an initialized poller.
	Poller VirtualHubRouteTableV2Poller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualHubRouteTableV2Response is the response envelope for operations that return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2Response struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualHubRouteTableV2 Resource.
	VirtualHubRouteTableV2 *VirtualHubRouteTableV2
}

// VirtualNetworkGatewayConnectionListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayConnectionListResult type.
type VirtualNetworkGatewayConnectionListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworkGatewayConnections API service call.
	VirtualNetworkGatewayConnectionListResult *VirtualNetworkGatewayConnectionListResult
}

// VirtualNetworkGatewayConnectionPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkGatewayConnectionResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkGatewayConnectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkGatewayConnectionResponse is the response envelope for operations that return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A common class for general resource information.
	VirtualNetworkGatewayConnection *VirtualNetworkGatewayConnection
}

// VirtualNetworkGatewayListConnectionsResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListConnectionsResult type.
type VirtualNetworkGatewayListConnectionsResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the VirtualNetworkGatewayListConnections API service call.
	VirtualNetworkGatewayListConnectionsResult *VirtualNetworkGatewayListConnectionsResult
}

// VirtualNetworkGatewayListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListResult type.
type VirtualNetworkGatewayListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworkGateways API service call.
	VirtualNetworkGatewayListResult *VirtualNetworkGatewayListResult
}

// VirtualNetworkGatewayNatRulePollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGatewayNatRule type.
type VirtualNetworkGatewayNatRulePollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkGatewayNatRuleResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkGatewayNatRulePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkGatewayNatRuleResponse is the response envelope for operations that return a VirtualNetworkGatewayNatRule type.
type VirtualNetworkGatewayNatRuleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualNetworkGatewayNatRule Resource.
	VirtualNetworkGatewayNatRule *VirtualNetworkGatewayNatRule
}

// VirtualNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGateway type.
type VirtualNetworkGatewayPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkGatewayResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkGatewayPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkGatewayResponse is the response envelope for operations that return a VirtualNetworkGateway type.
type VirtualNetworkGatewayResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// A common class for general resource information.
	VirtualNetworkGateway *VirtualNetworkGateway
}

// VirtualNetworkListResultResponse is the response envelope for operations that return a VirtualNetworkListResult type.
type VirtualNetworkListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the ListVirtualNetworks API service call.
	VirtualNetworkListResult *VirtualNetworkListResult
}

// VirtualNetworkListUsageResultResponse is the response envelope for operations that return a VirtualNetworkListUsageResult type.
type VirtualNetworkListUsageResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for the virtual networks GetUsage API service call.
	VirtualNetworkListUsageResult *VirtualNetworkListUsageResult
}

// VirtualNetworkPeeringListResultResponse is the response envelope for operations that return a VirtualNetworkPeeringListResult type.
type VirtualNetworkPeeringListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.
	VirtualNetworkPeeringListResult *VirtualNetworkPeeringListResult
}

// VirtualNetworkPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkPeering type.
type VirtualNetworkPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkPeeringResponse is the response envelope for operations that return a VirtualNetworkPeering type.
type VirtualNetworkPeeringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Peerings in a virtual network resource.
	VirtualNetworkPeering *VirtualNetworkPeering
}

// VirtualNetworkPollerResponse is the response envelope for operations that asynchronously return a VirtualNetwork type.
type VirtualNetworkPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkResponse is the response envelope for operations that return a VirtualNetwork type.
type VirtualNetworkResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Network resource.
	VirtualNetwork *VirtualNetwork
}

// VirtualNetworkTapListResultResponse is the response envelope for operations that return a VirtualNetworkTapListResult type.
type VirtualNetworkTapListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualNetworkTap API service call.
	VirtualNetworkTapListResult *VirtualNetworkTapListResult
}

// VirtualNetworkTapPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkTap type.
type VirtualNetworkTapPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualNetworkTapResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualNetworkTapPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkTapResponse is the response envelope for operations that return a VirtualNetworkTap type.
type VirtualNetworkTapResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Network Tap resource.
	VirtualNetworkTap *VirtualNetworkTap
}

// VirtualRouterListResultResponse is the response envelope for operations that return a VirtualRouterListResult type.
type VirtualRouterListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualRouters API service call.
	VirtualRouterListResult *VirtualRouterListResult
}

// VirtualRouterPeeringListResultResponse is the response envelope for operations that return a VirtualRouterPeeringListResult type.
type VirtualRouterPeeringListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Response for ListVirtualRouterPeerings API service call.
	VirtualRouterPeeringListResult *VirtualRouterPeeringListResult
}

// VirtualRouterPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualRouterPeering type.
type VirtualRouterPeeringPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualRouterPeeringResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualRouterPeeringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualRouterPeeringResponse is the response envelope for operations that return a VirtualRouterPeering type.
type VirtualRouterPeeringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Virtual Router Peering resource.
	VirtualRouterPeering *VirtualRouterPeering
}

// VirtualRouterPollerResponse is the response envelope for operations that asynchronously return a VirtualRouter type.
type VirtualRouterPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualRouterResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualRouterPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualRouterResponse is the response envelope for operations that return a VirtualRouter type.
type VirtualRouterResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualRouter Resource.
	VirtualRouter *VirtualRouter
}

// VirtualWANPollerResponse is the response envelope for operations that asynchronously return a VirtualWAN type.
type VirtualWANPollerResponse struct {
	// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received
	PollUntilDone func(ctx context.Context, frequency time.Duration) (VirtualWANResponse, error)

	// Poller contains an initialized poller.
	Poller VirtualWANPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualWANResponse is the response envelope for operations that return a VirtualWAN type.
type VirtualWANResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// VirtualWAN Resource.
	VirtualWAN *VirtualWAN
}

// VirtualWanSecurityProvidersResponse is the response envelope for operations that return a VirtualWanSecurityProviders type.
type VirtualWanSecurityProvidersResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Collection of SecurityProviders.
	VirtualWanSecurityProviders *VirtualWanSecurityProviders
}

// WebApplicationFirewallPolicyListResultResponse is the response envelope for operations that return a WebApplicationFirewallPolicyListResult type.
type WebApplicationFirewallPolicyListResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next
	// set of results.
	WebApplicationFirewallPolicyListResult *WebApplicationFirewallPolicyListResult
}

// WebApplicationFirewallPolicyResponse is the response envelope for operations that return a WebApplicationFirewallPolicy type.
type WebApplicationFirewallPolicyResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// Defines web application firewall policy.
	WebApplicationFirewallPolicy *WebApplicationFirewallPolicy
}
