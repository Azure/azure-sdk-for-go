// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package aznetwork

// Access - Access to be allowed or denied.
type Access string

const (
	AccessAllow Access = "Allow"
	AccessDeny  Access = "Deny"
)

func PossibleAccessValues() []Access {
	return []Access{
		AccessAllow,
		AccessDeny,
	}
}

func (c Access) ToPtr() *Access {
	return &c
}

// ApplicationGatewayBackendHealthServerHealth - Health of backend server.
type ApplicationGatewayBackendHealthServerHealth string

const (
	ApplicationGatewayBackendHealthServerHealthDown     ApplicationGatewayBackendHealthServerHealth = "Down"
	ApplicationGatewayBackendHealthServerHealthDraining ApplicationGatewayBackendHealthServerHealth = "Draining"
	ApplicationGatewayBackendHealthServerHealthPartial  ApplicationGatewayBackendHealthServerHealth = "Partial"
	ApplicationGatewayBackendHealthServerHealthUnknown  ApplicationGatewayBackendHealthServerHealth = "Unknown"
	ApplicationGatewayBackendHealthServerHealthUp       ApplicationGatewayBackendHealthServerHealth = "Up"
)

func PossibleApplicationGatewayBackendHealthServerHealthValues() []ApplicationGatewayBackendHealthServerHealth {
	return []ApplicationGatewayBackendHealthServerHealth{
		ApplicationGatewayBackendHealthServerHealthDown,
		ApplicationGatewayBackendHealthServerHealthDraining,
		ApplicationGatewayBackendHealthServerHealthPartial,
		ApplicationGatewayBackendHealthServerHealthUnknown,
		ApplicationGatewayBackendHealthServerHealthUp,
	}
}

func (c ApplicationGatewayBackendHealthServerHealth) ToPtr() *ApplicationGatewayBackendHealthServerHealth {
	return &c
}

// ApplicationGatewayCookieBasedAffinity - Cookie based affinity.
type ApplicationGatewayCookieBasedAffinity string

const (
	ApplicationGatewayCookieBasedAffinityDisabled ApplicationGatewayCookieBasedAffinity = "Disabled"
	ApplicationGatewayCookieBasedAffinityEnabled  ApplicationGatewayCookieBasedAffinity = "Enabled"
)

func PossibleApplicationGatewayCookieBasedAffinityValues() []ApplicationGatewayCookieBasedAffinity {
	return []ApplicationGatewayCookieBasedAffinity{
		ApplicationGatewayCookieBasedAffinityDisabled,
		ApplicationGatewayCookieBasedAffinityEnabled,
	}
}

func (c ApplicationGatewayCookieBasedAffinity) ToPtr() *ApplicationGatewayCookieBasedAffinity {
	return &c
}

// ApplicationGatewayCustomErrorStatusCode - Status code of the application gateway customer error.
type ApplicationGatewayCustomErrorStatusCode string

const (
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus403 ApplicationGatewayCustomErrorStatusCode = "HttpStatus403"
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus502 ApplicationGatewayCustomErrorStatusCode = "HttpStatus502"
)

func PossibleApplicationGatewayCustomErrorStatusCodeValues() []ApplicationGatewayCustomErrorStatusCode {
	return []ApplicationGatewayCustomErrorStatusCode{
		ApplicationGatewayCustomErrorStatusCodeHTTPStatus403,
		ApplicationGatewayCustomErrorStatusCodeHTTPStatus502,
	}
}

func (c ApplicationGatewayCustomErrorStatusCode) ToPtr() *ApplicationGatewayCustomErrorStatusCode {
	return &c
}

// ApplicationGatewayFirewallMode - Web application firewall mode.
type ApplicationGatewayFirewallMode string

const (
	ApplicationGatewayFirewallModeDetection  ApplicationGatewayFirewallMode = "Detection"
	ApplicationGatewayFirewallModePrevention ApplicationGatewayFirewallMode = "Prevention"
)

func PossibleApplicationGatewayFirewallModeValues() []ApplicationGatewayFirewallMode {
	return []ApplicationGatewayFirewallMode{
		ApplicationGatewayFirewallModeDetection,
		ApplicationGatewayFirewallModePrevention,
	}
}

func (c ApplicationGatewayFirewallMode) ToPtr() *ApplicationGatewayFirewallMode {
	return &c
}

// ApplicationGatewayOperationalState - Operational state of the application gateway resource.
type ApplicationGatewayOperationalState string

const (
	ApplicationGatewayOperationalStateRunning  ApplicationGatewayOperationalState = "Running"
	ApplicationGatewayOperationalStateStarting ApplicationGatewayOperationalState = "Starting"
	ApplicationGatewayOperationalStateStopped  ApplicationGatewayOperationalState = "Stopped"
	ApplicationGatewayOperationalStateStopping ApplicationGatewayOperationalState = "Stopping"
)

func PossibleApplicationGatewayOperationalStateValues() []ApplicationGatewayOperationalState {
	return []ApplicationGatewayOperationalState{
		ApplicationGatewayOperationalStateRunning,
		ApplicationGatewayOperationalStateStarting,
		ApplicationGatewayOperationalStateStopped,
		ApplicationGatewayOperationalStateStopping,
	}
}

func (c ApplicationGatewayOperationalState) ToPtr() *ApplicationGatewayOperationalState {
	return &c
}

// ApplicationGatewayProtocol - Application Gateway protocol.
type ApplicationGatewayProtocol string

const (
	ApplicationGatewayProtocolHTTP  ApplicationGatewayProtocol = "Http"
	ApplicationGatewayProtocolHTTPs ApplicationGatewayProtocol = "Https"
)

func PossibleApplicationGatewayProtocolValues() []ApplicationGatewayProtocol {
	return []ApplicationGatewayProtocol{
		ApplicationGatewayProtocolHTTP,
		ApplicationGatewayProtocolHTTPs,
	}
}

func (c ApplicationGatewayProtocol) ToPtr() *ApplicationGatewayProtocol {
	return &c
}

// ApplicationGatewayRedirectType - Redirect type enum.
type ApplicationGatewayRedirectType string

const (
	ApplicationGatewayRedirectTypeFound     ApplicationGatewayRedirectType = "Found"
	ApplicationGatewayRedirectTypePermanent ApplicationGatewayRedirectType = "Permanent"
	ApplicationGatewayRedirectTypeSeeOther  ApplicationGatewayRedirectType = "SeeOther"
	ApplicationGatewayRedirectTypeTemporary ApplicationGatewayRedirectType = "Temporary"
)

func PossibleApplicationGatewayRedirectTypeValues() []ApplicationGatewayRedirectType {
	return []ApplicationGatewayRedirectType{
		ApplicationGatewayRedirectTypeFound,
		ApplicationGatewayRedirectTypePermanent,
		ApplicationGatewayRedirectTypeSeeOther,
		ApplicationGatewayRedirectTypeTemporary,
	}
}

func (c ApplicationGatewayRedirectType) ToPtr() *ApplicationGatewayRedirectType {
	return &c
}

// ApplicationGatewayRequestRoutingRuleType - Rule type.
type ApplicationGatewayRequestRoutingRuleType string

const (
	ApplicationGatewayRequestRoutingRuleTypeBasic            ApplicationGatewayRequestRoutingRuleType = "Basic"
	ApplicationGatewayRequestRoutingRuleTypePathBasedRouting ApplicationGatewayRequestRoutingRuleType = "PathBasedRouting"
)

func PossibleApplicationGatewayRequestRoutingRuleTypeValues() []ApplicationGatewayRequestRoutingRuleType {
	return []ApplicationGatewayRequestRoutingRuleType{
		ApplicationGatewayRequestRoutingRuleTypeBasic,
		ApplicationGatewayRequestRoutingRuleTypePathBasedRouting,
	}
}

func (c ApplicationGatewayRequestRoutingRuleType) ToPtr() *ApplicationGatewayRequestRoutingRuleType {
	return &c
}

// ApplicationGatewaySkuName - Name of an application gateway SKU.
type ApplicationGatewaySkuName string

const (
	ApplicationGatewaySkuNameStandardLarge  ApplicationGatewaySkuName = "Standard_Large"
	ApplicationGatewaySkuNameStandardMedium ApplicationGatewaySkuName = "Standard_Medium"
	ApplicationGatewaySkuNameStandardSmall  ApplicationGatewaySkuName = "Standard_Small"
	ApplicationGatewaySkuNameStandardV2     ApplicationGatewaySkuName = "Standard_v2"
	ApplicationGatewaySkuNameWafLarge       ApplicationGatewaySkuName = "WAF_Large"
	ApplicationGatewaySkuNameWafMedium      ApplicationGatewaySkuName = "WAF_Medium"
	ApplicationGatewaySkuNameWafv2          ApplicationGatewaySkuName = "WAF_v2"
)

func PossibleApplicationGatewaySkuNameValues() []ApplicationGatewaySkuName {
	return []ApplicationGatewaySkuName{
		ApplicationGatewaySkuNameStandardLarge,
		ApplicationGatewaySkuNameStandardMedium,
		ApplicationGatewaySkuNameStandardSmall,
		ApplicationGatewaySkuNameStandardV2,
		ApplicationGatewaySkuNameWafLarge,
		ApplicationGatewaySkuNameWafMedium,
		ApplicationGatewaySkuNameWafv2,
	}
}

func (c ApplicationGatewaySkuName) ToPtr() *ApplicationGatewaySkuName {
	return &c
}

// ApplicationGatewaySslCipherSuite - Ssl cipher suites enums.
type ApplicationGatewaySslCipherSuite string

const (
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Cbcsha    ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Cbcsha256 ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Gcmsha256 ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Cbcsha    ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Cbcsha384 ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Gcmsha384 ApplicationGatewaySslCipherSuite = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Cbcsha      ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Cbcsha256   ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Gcmsha256   ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Cbcsha      ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Cbcsha384   ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Gcmsha384   ApplicationGatewaySslCipherSuite = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySslCipherSuiteTLSdhedssWith3Desedecbcsha       ApplicationGatewaySslCipherSuite = "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAes128Cbcsha        ApplicationGatewaySslCipherSuite = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAes128Cbcsha256     ApplicationGatewaySslCipherSuite = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAes256Cbcsha        ApplicationGatewaySslCipherSuite = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAes256Cbcsha256     ApplicationGatewaySslCipherSuite = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAes128Cbcsha        ApplicationGatewaySslCipherSuite = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAes128Gcmsha256     ApplicationGatewaySslCipherSuite = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAes256Cbcsha        ApplicationGatewaySslCipherSuite = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAes256Gcmsha384     ApplicationGatewaySslCipherSuite = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384"
	ApplicationGatewaySslCipherSuiteTLSrsaWith3Desedecbcsha          ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Cbcsha           ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_128_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Cbcsha256        ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_128_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Gcmsha256        ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_128_GCM_SHA256"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Cbcsha           ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_256_CBC_SHA"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Cbcsha256        ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_256_CBC_SHA256"
	ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Gcmsha384        ApplicationGatewaySslCipherSuite = "TLS_RSA_WITH_AES_256_GCM_SHA384"
)

func PossibleApplicationGatewaySslCipherSuiteValues() []ApplicationGatewaySslCipherSuite {
	return []ApplicationGatewaySslCipherSuite{
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes128Gcmsha256,
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Cbcsha384,
		ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAes256Gcmsha384,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes128Gcmsha256,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Cbcsha384,
		ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAes256Gcmsha384,
		ApplicationGatewaySslCipherSuiteTLSdhedssWith3Desedecbcsha,
		ApplicationGatewaySslCipherSuiteTLSdhedssWithAes128Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSdhedssWithAes128Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSdhedssWithAes256Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSdhedssWithAes256Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSdhersaWithAes128Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSdhersaWithAes128Gcmsha256,
		ApplicationGatewaySslCipherSuiteTLSdhersaWithAes256Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSdhersaWithAes256Gcmsha384,
		ApplicationGatewaySslCipherSuiteTLSrsaWith3Desedecbcsha,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes128Gcmsha256,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Cbcsha,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Cbcsha256,
		ApplicationGatewaySslCipherSuiteTLSrsaWithAes256Gcmsha384,
	}
}

func (c ApplicationGatewaySslCipherSuite) ToPtr() *ApplicationGatewaySslCipherSuite {
	return &c
}

// ApplicationGatewaySslPolicyName - Ssl predefined policy name enums.
type ApplicationGatewaySslPolicyName string

const (
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20150501  ApplicationGatewaySslPolicyName = "AppGwSslPolicy20150501"
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401  ApplicationGatewaySslPolicyName = "AppGwSslPolicy20170401"
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401S ApplicationGatewaySslPolicyName = "AppGwSslPolicy20170401S"
)

func PossibleApplicationGatewaySslPolicyNameValues() []ApplicationGatewaySslPolicyName {
	return []ApplicationGatewaySslPolicyName{
		ApplicationGatewaySslPolicyNameAppGwSslPolicy20150501,
		ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401,
		ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401S,
	}
}

func (c ApplicationGatewaySslPolicyName) ToPtr() *ApplicationGatewaySslPolicyName {
	return &c
}

// ApplicationGatewaySslPolicyType - Type of Ssl Policy.
type ApplicationGatewaySslPolicyType string

const (
	ApplicationGatewaySslPolicyTypeCustom     ApplicationGatewaySslPolicyType = "Custom"
	ApplicationGatewaySslPolicyTypePredefined ApplicationGatewaySslPolicyType = "Predefined"
)

func PossibleApplicationGatewaySslPolicyTypeValues() []ApplicationGatewaySslPolicyType {
	return []ApplicationGatewaySslPolicyType{
		ApplicationGatewaySslPolicyTypeCustom,
		ApplicationGatewaySslPolicyTypePredefined,
	}
}

func (c ApplicationGatewaySslPolicyType) ToPtr() *ApplicationGatewaySslPolicyType {
	return &c
}

// ApplicationGatewaySslProtocol - Ssl protocol enums.
type ApplicationGatewaySslProtocol string

const (
	ApplicationGatewaySslProtocolTlSv10 ApplicationGatewaySslProtocol = "TLSv1_0"
	ApplicationGatewaySslProtocolTlSv11 ApplicationGatewaySslProtocol = "TLSv1_1"
	ApplicationGatewaySslProtocolTlSv12 ApplicationGatewaySslProtocol = "TLSv1_2"
)

func PossibleApplicationGatewaySslProtocolValues() []ApplicationGatewaySslProtocol {
	return []ApplicationGatewaySslProtocol{
		ApplicationGatewaySslProtocolTlSv10,
		ApplicationGatewaySslProtocolTlSv11,
		ApplicationGatewaySslProtocolTlSv12,
	}
}

func (c ApplicationGatewaySslProtocol) ToPtr() *ApplicationGatewaySslProtocol {
	return &c
}

// ApplicationGatewayTier - Tier of an application gateway.
type ApplicationGatewayTier string

const (
	ApplicationGatewayTierStandard   ApplicationGatewayTier = "Standard"
	ApplicationGatewayTierStandardV2 ApplicationGatewayTier = "Standard_v2"
	ApplicationGatewayTierWaf        ApplicationGatewayTier = "WAF"
	ApplicationGatewayTierWafv2      ApplicationGatewayTier = "WAF_v2"
)

func PossibleApplicationGatewayTierValues() []ApplicationGatewayTier {
	return []ApplicationGatewayTier{
		ApplicationGatewayTierStandard,
		ApplicationGatewayTierStandardV2,
		ApplicationGatewayTierWaf,
		ApplicationGatewayTierWafv2,
	}
}

func (c ApplicationGatewayTier) ToPtr() *ApplicationGatewayTier {
	return &c
}

// AssociationType - The association type of the child resource to the parent resource.
type AssociationType string

const (
	AssociationTypeAssociated AssociationType = "Associated"
	AssociationTypeContains   AssociationType = "Contains"
)

func PossibleAssociationTypeValues() []AssociationType {
	return []AssociationType{
		AssociationTypeAssociated,
		AssociationTypeContains,
	}
}

func (c AssociationType) ToPtr() *AssociationType {
	return &c
}

// AuthenticationMethod - VPN client authentication method.
type AuthenticationMethod string

const (
	AuthenticationMethodEapmschaPv2 AuthenticationMethod = "EAPMSCHAPv2"
	AuthenticationMethodEaptls      AuthenticationMethod = "EAPTLS"
)

func PossibleAuthenticationMethodValues() []AuthenticationMethod {
	return []AuthenticationMethod{
		AuthenticationMethodEapmschaPv2,
		AuthenticationMethodEaptls,
	}
}

func (c AuthenticationMethod) ToPtr() *AuthenticationMethod {
	return &c
}

// AuthorizationUseStatus - The authorization use status.
type AuthorizationUseStatus string

const (
	AuthorizationUseStatusAvailable AuthorizationUseStatus = "Available"
	AuthorizationUseStatusInUse     AuthorizationUseStatus = "InUse"
)

func PossibleAuthorizationUseStatusValues() []AuthorizationUseStatus {
	return []AuthorizationUseStatus{
		AuthorizationUseStatusAvailable,
		AuthorizationUseStatusInUse,
	}
}

func (c AuthorizationUseStatus) ToPtr() *AuthorizationUseStatus {
	return &c
}

// AzureFirewallApplicationRuleProtocolType - The protocol type of a Application Rule resource.
type AzureFirewallApplicationRuleProtocolType string

const (
	AzureFirewallApplicationRuleProtocolTypeHTTP  AzureFirewallApplicationRuleProtocolType = "Http"
	AzureFirewallApplicationRuleProtocolTypeHTTPs AzureFirewallApplicationRuleProtocolType = "Https"
	AzureFirewallApplicationRuleProtocolTypeMssql AzureFirewallApplicationRuleProtocolType = "Mssql"
)

func PossibleAzureFirewallApplicationRuleProtocolTypeValues() []AzureFirewallApplicationRuleProtocolType {
	return []AzureFirewallApplicationRuleProtocolType{
		AzureFirewallApplicationRuleProtocolTypeHTTP,
		AzureFirewallApplicationRuleProtocolTypeHTTPs,
		AzureFirewallApplicationRuleProtocolTypeMssql,
	}
}

func (c AzureFirewallApplicationRuleProtocolType) ToPtr() *AzureFirewallApplicationRuleProtocolType {
	return &c
}

// AzureFirewallNatRCActionType - The action type of a NAT rule collection.
type AzureFirewallNatRCActionType string

const (
	AzureFirewallNatRCActionTypeDnat AzureFirewallNatRCActionType = "Dnat"
	AzureFirewallNatRCActionTypeSnat AzureFirewallNatRCActionType = "Snat"
)

func PossibleAzureFirewallNatRCActionTypeValues() []AzureFirewallNatRCActionType {
	return []AzureFirewallNatRCActionType{
		AzureFirewallNatRCActionTypeDnat,
		AzureFirewallNatRCActionTypeSnat,
	}
}

func (c AzureFirewallNatRCActionType) ToPtr() *AzureFirewallNatRCActionType {
	return &c
}

// AzureFirewallNetworkRuleProtocol - The protocol of a Network Rule resource.
type AzureFirewallNetworkRuleProtocol string

const (
	AzureFirewallNetworkRuleProtocolAny  AzureFirewallNetworkRuleProtocol = "Any"
	AzureFirewallNetworkRuleProtocolIcmp AzureFirewallNetworkRuleProtocol = "ICMP"
	AzureFirewallNetworkRuleProtocolTCP  AzureFirewallNetworkRuleProtocol = "TCP"
	AzureFirewallNetworkRuleProtocolUDP  AzureFirewallNetworkRuleProtocol = "UDP"
)

func PossibleAzureFirewallNetworkRuleProtocolValues() []AzureFirewallNetworkRuleProtocol {
	return []AzureFirewallNetworkRuleProtocol{
		AzureFirewallNetworkRuleProtocolAny,
		AzureFirewallNetworkRuleProtocolIcmp,
		AzureFirewallNetworkRuleProtocolTCP,
		AzureFirewallNetworkRuleProtocolUDP,
	}
}

func (c AzureFirewallNetworkRuleProtocol) ToPtr() *AzureFirewallNetworkRuleProtocol {
	return &c
}

// AzureFirewallRCActionType - The action type of a rule collection.
type AzureFirewallRCActionType string

const (
	AzureFirewallRCActionTypeAllow AzureFirewallRCActionType = "Allow"
	AzureFirewallRCActionTypeDeny  AzureFirewallRCActionType = "Deny"
)

func PossibleAzureFirewallRCActionTypeValues() []AzureFirewallRCActionType {
	return []AzureFirewallRCActionType{
		AzureFirewallRCActionTypeAllow,
		AzureFirewallRCActionTypeDeny,
	}
}

func (c AzureFirewallRCActionType) ToPtr() *AzureFirewallRCActionType {
	return &c
}

// AzureFirewallSkuName - Name of an Azure Firewall SKU.
type AzureFirewallSkuName string

const (
	AzureFirewallSkuNameAzfwHub  AzureFirewallSkuName = "AZFW_Hub"
	AzureFirewallSkuNameAzfwVnet AzureFirewallSkuName = "AZFW_VNet"
)

func PossibleAzureFirewallSkuNameValues() []AzureFirewallSkuName {
	return []AzureFirewallSkuName{
		AzureFirewallSkuNameAzfwHub,
		AzureFirewallSkuNameAzfwVnet,
	}
}

func (c AzureFirewallSkuName) ToPtr() *AzureFirewallSkuName {
	return &c
}

// AzureFirewallThreatIntelMode - The operation mode for Threat Intel.
type AzureFirewallThreatIntelMode string

const (
	AzureFirewallThreatIntelModeAlert AzureFirewallThreatIntelMode = "Alert"
	AzureFirewallThreatIntelModeDeny  AzureFirewallThreatIntelMode = "Deny"
	AzureFirewallThreatIntelModeOff   AzureFirewallThreatIntelMode = "Off"
)

func PossibleAzureFirewallThreatIntelModeValues() []AzureFirewallThreatIntelMode {
	return []AzureFirewallThreatIntelMode{
		AzureFirewallThreatIntelModeAlert,
		AzureFirewallThreatIntelModeDeny,
		AzureFirewallThreatIntelModeOff,
	}
}

func (c AzureFirewallThreatIntelMode) ToPtr() *AzureFirewallThreatIntelMode {
	return &c
}

// BastionConnectProtocol - The protocol used to connect to the target.
type BastionConnectProtocol string

const (
	BastionConnectProtocolRdp BastionConnectProtocol = "RDP"
	BastionConnectProtocolSSH BastionConnectProtocol = "SSH"
)

func PossibleBastionConnectProtocolValues() []BastionConnectProtocol {
	return []BastionConnectProtocol{
		BastionConnectProtocolRdp,
		BastionConnectProtocolSSH,
	}
}

func (c BastionConnectProtocol) ToPtr() *BastionConnectProtocol {
	return &c
}

// BgpPeerState - The BGP peer state.
type BgpPeerState string

const (
	BgpPeerStateConnected  BgpPeerState = "Connected"
	BgpPeerStateConnecting BgpPeerState = "Connecting"
	BgpPeerStateIDle       BgpPeerState = "Idle"
	BgpPeerStateStopped    BgpPeerState = "Stopped"
	BgpPeerStateUnknown    BgpPeerState = "Unknown"
)

func PossibleBgpPeerStateValues() []BgpPeerState {
	return []BgpPeerState{
		BgpPeerStateConnected,
		BgpPeerStateConnecting,
		BgpPeerStateIDle,
		BgpPeerStateStopped,
		BgpPeerStateUnknown,
	}
}

func (c BgpPeerState) ToPtr() *BgpPeerState {
	return &c
}

// CircuitConnectionStatus - Express Route Circuit connection state.
type CircuitConnectionStatus string

const (
	CircuitConnectionStatusConnected    CircuitConnectionStatus = "Connected"
	CircuitConnectionStatusConnecting   CircuitConnectionStatus = "Connecting"
	CircuitConnectionStatusDisconnected CircuitConnectionStatus = "Disconnected"
)

func PossibleCircuitConnectionStatusValues() []CircuitConnectionStatus {
	return []CircuitConnectionStatus{
		CircuitConnectionStatusConnected,
		CircuitConnectionStatusConnecting,
		CircuitConnectionStatusDisconnected,
	}
}

func (c CircuitConnectionStatus) ToPtr() *CircuitConnectionStatus {
	return &c
}

// ConnectionMonitorSourceStatus - Status of connection monitor source.
type ConnectionMonitorSourceStatus string

const (
	ConnectionMonitorSourceStatusActive   ConnectionMonitorSourceStatus = "Active"
	ConnectionMonitorSourceStatusInactive ConnectionMonitorSourceStatus = "Inactive"
	ConnectionMonitorSourceStatusUnknown  ConnectionMonitorSourceStatus = "Unknown"
)

func PossibleConnectionMonitorSourceStatusValues() []ConnectionMonitorSourceStatus {
	return []ConnectionMonitorSourceStatus{
		ConnectionMonitorSourceStatusActive,
		ConnectionMonitorSourceStatusInactive,
		ConnectionMonitorSourceStatusUnknown,
	}
}

func (c ConnectionMonitorSourceStatus) ToPtr() *ConnectionMonitorSourceStatus {
	return &c
}

// ConnectionMonitorTestConfigurationProtocol - The protocol to use in test evaluation.
type ConnectionMonitorTestConfigurationProtocol string

const (
	ConnectionMonitorTestConfigurationProtocolHTTP ConnectionMonitorTestConfigurationProtocol = "Http"
	ConnectionMonitorTestConfigurationProtocolIcmp ConnectionMonitorTestConfigurationProtocol = "Icmp"
	ConnectionMonitorTestConfigurationProtocolTCP  ConnectionMonitorTestConfigurationProtocol = "Tcp"
)

func PossibleConnectionMonitorTestConfigurationProtocolValues() []ConnectionMonitorTestConfigurationProtocol {
	return []ConnectionMonitorTestConfigurationProtocol{
		ConnectionMonitorTestConfigurationProtocolHTTP,
		ConnectionMonitorTestConfigurationProtocolIcmp,
		ConnectionMonitorTestConfigurationProtocolTCP,
	}
}

func (c ConnectionMonitorTestConfigurationProtocol) ToPtr() *ConnectionMonitorTestConfigurationProtocol {
	return &c
}

// ConnectionMonitorType - Type of connection monitor.
type ConnectionMonitorType string

const (
	ConnectionMonitorTypeMultiEndpoint           ConnectionMonitorType = "MultiEndpoint"
	ConnectionMonitorTypeSingleSourceDestination ConnectionMonitorType = "SingleSourceDestination"
)

func PossibleConnectionMonitorTypeValues() []ConnectionMonitorType {
	return []ConnectionMonitorType{
		ConnectionMonitorTypeMultiEndpoint,
		ConnectionMonitorTypeSingleSourceDestination,
	}
}

func (c ConnectionMonitorType) ToPtr() *ConnectionMonitorType {
	return &c
}

// ConnectionState - The connection state.
type ConnectionState string

const (
	ConnectionStateReachable   ConnectionState = "Reachable"
	ConnectionStateUnknown     ConnectionState = "Unknown"
	ConnectionStateUnreachable ConnectionState = "Unreachable"
)

func PossibleConnectionStateValues() []ConnectionState {
	return []ConnectionState{
		ConnectionStateReachable,
		ConnectionStateUnknown,
		ConnectionStateUnreachable,
	}
}

func (c ConnectionState) ToPtr() *ConnectionState {
	return &c
}

// ConnectionStatus - The connection status.
type ConnectionStatus string

const (
	ConnectionStatusConnected    ConnectionStatus = "Connected"
	ConnectionStatusDegraded     ConnectionStatus = "Degraded"
	ConnectionStatusDisconnected ConnectionStatus = "Disconnected"
	ConnectionStatusUnknown      ConnectionStatus = "Unknown"
)

func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{
		ConnectionStatusConnected,
		ConnectionStatusDegraded,
		ConnectionStatusDisconnected,
		ConnectionStatusUnknown,
	}
}

func (c ConnectionStatus) ToPtr() *ConnectionStatus {
	return &c
}

// DdosCustomPolicyProtocol - The protocol for which the DDoS protection policy is being customized.
type DdosCustomPolicyProtocol string

const (
	DdosCustomPolicyProtocolSyn DdosCustomPolicyProtocol = "Syn"
	DdosCustomPolicyProtocolTCP DdosCustomPolicyProtocol = "Tcp"
	DdosCustomPolicyProtocolUDP DdosCustomPolicyProtocol = "Udp"
)

func PossibleDdosCustomPolicyProtocolValues() []DdosCustomPolicyProtocol {
	return []DdosCustomPolicyProtocol{
		DdosCustomPolicyProtocolSyn,
		DdosCustomPolicyProtocolTCP,
		DdosCustomPolicyProtocolUDP,
	}
}

func (c DdosCustomPolicyProtocol) ToPtr() *DdosCustomPolicyProtocol {
	return &c
}

// DdosCustomPolicyTriggerSensitivityOverride - The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
type DdosCustomPolicyTriggerSensitivityOverride string

const (
	DdosCustomPolicyTriggerSensitivityOverrideDefault DdosCustomPolicyTriggerSensitivityOverride = "Default"
	DdosCustomPolicyTriggerSensitivityOverrideHigh    DdosCustomPolicyTriggerSensitivityOverride = "High"
	DdosCustomPolicyTriggerSensitivityOverrideLow     DdosCustomPolicyTriggerSensitivityOverride = "Low"
	DdosCustomPolicyTriggerSensitivityOverrideRelaxed DdosCustomPolicyTriggerSensitivityOverride = "Relaxed"
)

func PossibleDdosCustomPolicyTriggerSensitivityOverrideValues() []DdosCustomPolicyTriggerSensitivityOverride {
	return []DdosCustomPolicyTriggerSensitivityOverride{
		DdosCustomPolicyTriggerSensitivityOverrideDefault,
		DdosCustomPolicyTriggerSensitivityOverrideHigh,
		DdosCustomPolicyTriggerSensitivityOverrideLow,
		DdosCustomPolicyTriggerSensitivityOverrideRelaxed,
	}
}

func (c DdosCustomPolicyTriggerSensitivityOverride) ToPtr() *DdosCustomPolicyTriggerSensitivityOverride {
	return &c
}

// DdosSettingsProtectionCoverage - The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
type DdosSettingsProtectionCoverage string

const (
	DdosSettingsProtectionCoverageBasic    DdosSettingsProtectionCoverage = "Basic"
	DdosSettingsProtectionCoverageStandard DdosSettingsProtectionCoverage = "Standard"
)

func PossibleDdosSettingsProtectionCoverageValues() []DdosSettingsProtectionCoverage {
	return []DdosSettingsProtectionCoverage{
		DdosSettingsProtectionCoverageBasic,
		DdosSettingsProtectionCoverageStandard,
	}
}

func (c DdosSettingsProtectionCoverage) ToPtr() *DdosSettingsProtectionCoverage {
	return &c
}

// DhGroup - The DH Groups used in IKE Phase 1 for initial SA.
type DhGroup string

const (
	DhGroupDhGroup1    DhGroup = "DHGroup1"
	DhGroupDhGroup14   DhGroup = "DHGroup14"
	DhGroupDhGroup2    DhGroup = "DHGroup2"
	DhGroupDhGroup2048 DhGroup = "DHGroup2048"
	DhGroupDhGroup24   DhGroup = "DHGroup24"
	DhGroupEcp256      DhGroup = "ECP256"
	DhGroupEcp384      DhGroup = "ECP384"
	DhGroupNone        DhGroup = "None"
)

func PossibleDhGroupValues() []DhGroup {
	return []DhGroup{
		DhGroupDhGroup1,
		DhGroupDhGroup14,
		DhGroupDhGroup2,
		DhGroupDhGroup2048,
		DhGroupDhGroup24,
		DhGroupEcp256,
		DhGroupEcp384,
		DhGroupNone,
	}
}

func (c DhGroup) ToPtr() *DhGroup {
	return &c
}

// Direction - The direction of the traffic.
type Direction string

const (
	DirectionInbound  Direction = "Inbound"
	DirectionOutbound Direction = "Outbound"
)

func PossibleDirectionValues() []Direction {
	return []Direction{
		DirectionInbound,
		DirectionOutbound,
	}
}

func (c Direction) ToPtr() *Direction {
	return &c
}

// EffectiveRouteSource - Who created the route.
type EffectiveRouteSource string

const (
	EffectiveRouteSourceDefault               EffectiveRouteSource = "Default"
	EffectiveRouteSourceUnknown               EffectiveRouteSource = "Unknown"
	EffectiveRouteSourceUser                  EffectiveRouteSource = "User"
	EffectiveRouteSourceVirtualNetworkGateway EffectiveRouteSource = "VirtualNetworkGateway"
)

func PossibleEffectiveRouteSourceValues() []EffectiveRouteSource {
	return []EffectiveRouteSource{
		EffectiveRouteSourceDefault,
		EffectiveRouteSourceUnknown,
		EffectiveRouteSourceUser,
		EffectiveRouteSourceVirtualNetworkGateway,
	}
}

func (c EffectiveRouteSource) ToPtr() *EffectiveRouteSource {
	return &c
}

// EffectiveRouteState - The value of effective route.
type EffectiveRouteState string

const (
	EffectiveRouteStateActive  EffectiveRouteState = "Active"
	EffectiveRouteStateInvalid EffectiveRouteState = "Invalid"
)

func PossibleEffectiveRouteStateValues() []EffectiveRouteState {
	return []EffectiveRouteState{
		EffectiveRouteStateActive,
		EffectiveRouteStateInvalid,
	}
}

func (c EffectiveRouteState) ToPtr() *EffectiveRouteState {
	return &c
}

// EffectiveSecurityRuleProtocol - The network protocol this rule applies to.
type EffectiveSecurityRuleProtocol string

const (
	EffectiveSecurityRuleProtocolAll EffectiveSecurityRuleProtocol = "All"
	EffectiveSecurityRuleProtocolTCP EffectiveSecurityRuleProtocol = "Tcp"
	EffectiveSecurityRuleProtocolUDP EffectiveSecurityRuleProtocol = "Udp"
)

func PossibleEffectiveSecurityRuleProtocolValues() []EffectiveSecurityRuleProtocol {
	return []EffectiveSecurityRuleProtocol{
		EffectiveSecurityRuleProtocolAll,
		EffectiveSecurityRuleProtocolTCP,
		EffectiveSecurityRuleProtocolUDP,
	}
}

func (c EffectiveSecurityRuleProtocol) ToPtr() *EffectiveSecurityRuleProtocol {
	return &c
}

// EvaluationState - Connectivity analysis evaluation state.
type EvaluationState string

const (
	EvaluationStateCompleted  EvaluationState = "Completed"
	EvaluationStateInProgress EvaluationState = "InProgress"
	EvaluationStateNotStarted EvaluationState = "NotStarted"
)

func PossibleEvaluationStateValues() []EvaluationState {
	return []EvaluationState{
		EvaluationStateCompleted,
		EvaluationStateInProgress,
		EvaluationStateNotStarted,
	}
}

func (c EvaluationState) ToPtr() *EvaluationState {
	return &c
}

// ExpressRouteCircuitPeeringAdvertisedPublicPrefixState - The advertised public prefix state of the Peering resource.
type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState string

const (
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured       ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configured"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring      ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "Configuring"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured    ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "NotConfigured"
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = "ValidationNeeded"
)

func PossibleExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValues() []ExpressRouteCircuitPeeringAdvertisedPublicPrefixState {
	return []ExpressRouteCircuitPeeringAdvertisedPublicPrefixState{
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured,
		ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded,
	}
}

func (c ExpressRouteCircuitPeeringAdvertisedPublicPrefixState) ToPtr() *ExpressRouteCircuitPeeringAdvertisedPublicPrefixState {
	return &c
}

// ExpressRouteCircuitPeeringState - The state of peering.
type ExpressRouteCircuitPeeringState string

const (
	ExpressRouteCircuitPeeringStateDisabled ExpressRouteCircuitPeeringState = "Disabled"
	ExpressRouteCircuitPeeringStateEnabled  ExpressRouteCircuitPeeringState = "Enabled"
)

func PossibleExpressRouteCircuitPeeringStateValues() []ExpressRouteCircuitPeeringState {
	return []ExpressRouteCircuitPeeringState{
		ExpressRouteCircuitPeeringStateDisabled,
		ExpressRouteCircuitPeeringStateEnabled,
	}
}

func (c ExpressRouteCircuitPeeringState) ToPtr() *ExpressRouteCircuitPeeringState {
	return &c
}

// ExpressRouteCircuitSkuFamily - The family of the SKU.
type ExpressRouteCircuitSkuFamily string

const (
	ExpressRouteCircuitSkuFamilyMeteredData   ExpressRouteCircuitSkuFamily = "MeteredData"
	ExpressRouteCircuitSkuFamilyUnlimitedData ExpressRouteCircuitSkuFamily = "UnlimitedData"
)

func PossibleExpressRouteCircuitSkuFamilyValues() []ExpressRouteCircuitSkuFamily {
	return []ExpressRouteCircuitSkuFamily{
		ExpressRouteCircuitSkuFamilyMeteredData,
		ExpressRouteCircuitSkuFamilyUnlimitedData,
	}
}

func (c ExpressRouteCircuitSkuFamily) ToPtr() *ExpressRouteCircuitSkuFamily {
	return &c
}

// ExpressRouteCircuitSkuTier - The tier of the SKU.
type ExpressRouteCircuitSkuTier string

const (
	ExpressRouteCircuitSkuTierBasic    ExpressRouteCircuitSkuTier = "Basic"
	ExpressRouteCircuitSkuTierLocal    ExpressRouteCircuitSkuTier = "Local"
	ExpressRouteCircuitSkuTierPremium  ExpressRouteCircuitSkuTier = "Premium"
	ExpressRouteCircuitSkuTierStandard ExpressRouteCircuitSkuTier = "Standard"
)

func PossibleExpressRouteCircuitSkuTierValues() []ExpressRouteCircuitSkuTier {
	return []ExpressRouteCircuitSkuTier{
		ExpressRouteCircuitSkuTierBasic,
		ExpressRouteCircuitSkuTierLocal,
		ExpressRouteCircuitSkuTierPremium,
		ExpressRouteCircuitSkuTierStandard,
	}
}

func (c ExpressRouteCircuitSkuTier) ToPtr() *ExpressRouteCircuitSkuTier {
	return &c
}

// ExpressRouteLinkAdminState - Administrative state of the physical port.
type ExpressRouteLinkAdminState string

const (
	ExpressRouteLinkAdminStateDisabled ExpressRouteLinkAdminState = "Disabled"
	ExpressRouteLinkAdminStateEnabled  ExpressRouteLinkAdminState = "Enabled"
)

func PossibleExpressRouteLinkAdminStateValues() []ExpressRouteLinkAdminState {
	return []ExpressRouteLinkAdminState{
		ExpressRouteLinkAdminStateDisabled,
		ExpressRouteLinkAdminStateEnabled,
	}
}

func (c ExpressRouteLinkAdminState) ToPtr() *ExpressRouteLinkAdminState {
	return &c
}

// ExpressRouteLinkConnectorType - Physical fiber port type.
type ExpressRouteLinkConnectorType string

const (
	ExpressRouteLinkConnectorTypeLc ExpressRouteLinkConnectorType = "LC"
	ExpressRouteLinkConnectorTypeSc ExpressRouteLinkConnectorType = "SC"
)

func PossibleExpressRouteLinkConnectorTypeValues() []ExpressRouteLinkConnectorType {
	return []ExpressRouteLinkConnectorType{
		ExpressRouteLinkConnectorTypeLc,
		ExpressRouteLinkConnectorTypeSc,
	}
}

func (c ExpressRouteLinkConnectorType) ToPtr() *ExpressRouteLinkConnectorType {
	return &c
}

// ExpressRouteLinkMacSecCipher - Mac security cipher.
type ExpressRouteLinkMacSecCipher string

const (
	ExpressRouteLinkMacSecCipherGcmAes128 ExpressRouteLinkMacSecCipher = "gcm-aes-128"
	ExpressRouteLinkMacSecCipherGcmAes256 ExpressRouteLinkMacSecCipher = "gcm-aes-256"
)

func PossibleExpressRouteLinkMacSecCipherValues() []ExpressRouteLinkMacSecCipher {
	return []ExpressRouteLinkMacSecCipher{
		ExpressRouteLinkMacSecCipherGcmAes128,
		ExpressRouteLinkMacSecCipherGcmAes256,
	}
}

func (c ExpressRouteLinkMacSecCipher) ToPtr() *ExpressRouteLinkMacSecCipher {
	return &c
}

// ExpressRoutePeeringState - The state of peering.
type ExpressRoutePeeringState string

const (
	ExpressRoutePeeringStateDisabled ExpressRoutePeeringState = "Disabled"
	ExpressRoutePeeringStateEnabled  ExpressRoutePeeringState = "Enabled"
)

func PossibleExpressRoutePeeringStateValues() []ExpressRoutePeeringState {
	return []ExpressRoutePeeringState{
		ExpressRoutePeeringStateDisabled,
		ExpressRoutePeeringStateEnabled,
	}
}

func (c ExpressRoutePeeringState) ToPtr() *ExpressRoutePeeringState {
	return &c
}

// ExpressRoutePeeringType - The peering type.
type ExpressRoutePeeringType string

const (
	ExpressRoutePeeringTypeAzurePrivatePeering ExpressRoutePeeringType = "AzurePrivatePeering"
	ExpressRoutePeeringTypeAzurePublicPeering  ExpressRoutePeeringType = "AzurePublicPeering"
	ExpressRoutePeeringTypeMicrosoftPeering    ExpressRoutePeeringType = "MicrosoftPeering"
)

func PossibleExpressRoutePeeringTypeValues() []ExpressRoutePeeringType {
	return []ExpressRoutePeeringType{
		ExpressRoutePeeringTypeAzurePrivatePeering,
		ExpressRoutePeeringTypeAzurePublicPeering,
		ExpressRoutePeeringTypeMicrosoftPeering,
	}
}

func (c ExpressRoutePeeringType) ToPtr() *ExpressRoutePeeringType {
	return &c
}

// ExpressRoutePortsEncapsulation - Encapsulation method on physical ports.
type ExpressRoutePortsEncapsulation string

const (
	ExpressRoutePortsEncapsulationDot1Q ExpressRoutePortsEncapsulation = "Dot1Q"
	ExpressRoutePortsEncapsulationQinQ  ExpressRoutePortsEncapsulation = "QinQ"
)

func PossibleExpressRoutePortsEncapsulationValues() []ExpressRoutePortsEncapsulation {
	return []ExpressRoutePortsEncapsulation{
		ExpressRoutePortsEncapsulationDot1Q,
		ExpressRoutePortsEncapsulationQinQ,
	}
}

func (c ExpressRoutePortsEncapsulation) ToPtr() *ExpressRoutePortsEncapsulation {
	return &c
}

// FirewallPolicyFilterRuleActionType - The action type of a rule.
type FirewallPolicyFilterRuleActionType string

const (
	FirewallPolicyFilterRuleActionTypeAllow FirewallPolicyFilterRuleActionType = "Allow"
	FirewallPolicyFilterRuleActionTypeDeny  FirewallPolicyFilterRuleActionType = "Deny"
)

func PossibleFirewallPolicyFilterRuleActionTypeValues() []FirewallPolicyFilterRuleActionType {
	return []FirewallPolicyFilterRuleActionType{
		FirewallPolicyFilterRuleActionTypeAllow,
		FirewallPolicyFilterRuleActionTypeDeny,
	}
}

func (c FirewallPolicyFilterRuleActionType) ToPtr() *FirewallPolicyFilterRuleActionType {
	return &c
}

// FirewallPolicyIntrusionSystemMode - The operation mode for Intrusion system mode.
type FirewallPolicyIntrusionSystemMode string

const (
	FirewallPolicyIntrusionSystemModeDisabled FirewallPolicyIntrusionSystemMode = "Disabled"
	FirewallPolicyIntrusionSystemModeEnabled  FirewallPolicyIntrusionSystemMode = "Enabled"
)

func PossibleFirewallPolicyIntrusionSystemModeValues() []FirewallPolicyIntrusionSystemMode {
	return []FirewallPolicyIntrusionSystemMode{
		FirewallPolicyIntrusionSystemModeDisabled,
		FirewallPolicyIntrusionSystemModeEnabled,
	}
}

func (c FirewallPolicyIntrusionSystemMode) ToPtr() *FirewallPolicyIntrusionSystemMode {
	return &c
}

// FirewallPolicyRuleConditionApplicationProtocolType - The application protocol type of a Rule condition.
type FirewallPolicyRuleConditionApplicationProtocolType string

const (
	FirewallPolicyRuleConditionApplicationProtocolTypeHTTP  FirewallPolicyRuleConditionApplicationProtocolType = "Http"
	FirewallPolicyRuleConditionApplicationProtocolTypeHTTPs FirewallPolicyRuleConditionApplicationProtocolType = "Https"
)

func PossibleFirewallPolicyRuleConditionApplicationProtocolTypeValues() []FirewallPolicyRuleConditionApplicationProtocolType {
	return []FirewallPolicyRuleConditionApplicationProtocolType{
		FirewallPolicyRuleConditionApplicationProtocolTypeHTTP,
		FirewallPolicyRuleConditionApplicationProtocolTypeHTTPs,
	}
}

func (c FirewallPolicyRuleConditionApplicationProtocolType) ToPtr() *FirewallPolicyRuleConditionApplicationProtocolType {
	return &c
}

// FirewallPolicyRuleConditionNetworkProtocol - The Network protocol of a Rule condition.
type FirewallPolicyRuleConditionNetworkProtocol string

const (
	FirewallPolicyRuleConditionNetworkProtocolAny  FirewallPolicyRuleConditionNetworkProtocol = "Any"
	FirewallPolicyRuleConditionNetworkProtocolIcmp FirewallPolicyRuleConditionNetworkProtocol = "ICMP"
	FirewallPolicyRuleConditionNetworkProtocolTCP  FirewallPolicyRuleConditionNetworkProtocol = "TCP"
	FirewallPolicyRuleConditionNetworkProtocolUDP  FirewallPolicyRuleConditionNetworkProtocol = "UDP"
)

func PossibleFirewallPolicyRuleConditionNetworkProtocolValues() []FirewallPolicyRuleConditionNetworkProtocol {
	return []FirewallPolicyRuleConditionNetworkProtocol{
		FirewallPolicyRuleConditionNetworkProtocolAny,
		FirewallPolicyRuleConditionNetworkProtocolIcmp,
		FirewallPolicyRuleConditionNetworkProtocolTCP,
		FirewallPolicyRuleConditionNetworkProtocolUDP,
	}
}

func (c FirewallPolicyRuleConditionNetworkProtocol) ToPtr() *FirewallPolicyRuleConditionNetworkProtocol {
	return &c
}

// FirewallPolicyRuleConditionType - Rule Condition Type.
type FirewallPolicyRuleConditionType string

const (
	FirewallPolicyRuleConditionTypeApplicationRuleCondition FirewallPolicyRuleConditionType = "ApplicationRuleCondition"
	FirewallPolicyRuleConditionTypeNatRuleCondition         FirewallPolicyRuleConditionType = "NatRuleCondition"
	FirewallPolicyRuleConditionTypeNetworkRuleCondition     FirewallPolicyRuleConditionType = "NetworkRuleCondition"
)

func PossibleFirewallPolicyRuleConditionTypeValues() []FirewallPolicyRuleConditionType {
	return []FirewallPolicyRuleConditionType{
		FirewallPolicyRuleConditionTypeApplicationRuleCondition,
		FirewallPolicyRuleConditionTypeNatRuleCondition,
		FirewallPolicyRuleConditionTypeNetworkRuleCondition,
	}
}

func (c FirewallPolicyRuleConditionType) ToPtr() *FirewallPolicyRuleConditionType {
	return &c
}

// FirewallPolicyRuleType - The type of the rule.
type FirewallPolicyRuleType string

const (
	FirewallPolicyRuleTypeFirewallPolicyFilterRule FirewallPolicyRuleType = "FirewallPolicyFilterRule"
	FirewallPolicyRuleTypeFirewallPolicyNatRule    FirewallPolicyRuleType = "FirewallPolicyNatRule"
)

func PossibleFirewallPolicyRuleTypeValues() []FirewallPolicyRuleType {
	return []FirewallPolicyRuleType{
		FirewallPolicyRuleTypeFirewallPolicyFilterRule,
		FirewallPolicyRuleTypeFirewallPolicyNatRule,
	}
}

func (c FirewallPolicyRuleType) ToPtr() *FirewallPolicyRuleType {
	return &c
}

// HttpConfigurationMethod - The HTTP method to use.
type HttpConfigurationMethod string

const (
	HttpConfigurationMethodGet  HttpConfigurationMethod = "Get"
	HttpConfigurationMethodPost HttpConfigurationMethod = "Post"
)

func PossibleHttpConfigurationMethodValues() []HttpConfigurationMethod {
	return []HttpConfigurationMethod{
		HttpConfigurationMethodGet,
		HttpConfigurationMethodPost,
	}
}

func (c HttpConfigurationMethod) ToPtr() *HttpConfigurationMethod {
	return &c
}

// HubVirtualNetworkConnectionStatus - The current state of the VirtualHub to vnet connection.
type HubVirtualNetworkConnectionStatus string

const (
	HubVirtualNetworkConnectionStatusConnected    HubVirtualNetworkConnectionStatus = "Connected"
	HubVirtualNetworkConnectionStatusConnecting   HubVirtualNetworkConnectionStatus = "Connecting"
	HubVirtualNetworkConnectionStatusNotConnected HubVirtualNetworkConnectionStatus = "NotConnected"
	HubVirtualNetworkConnectionStatusUnknown      HubVirtualNetworkConnectionStatus = "Unknown"
)

func PossibleHubVirtualNetworkConnectionStatusValues() []HubVirtualNetworkConnectionStatus {
	return []HubVirtualNetworkConnectionStatus{
		HubVirtualNetworkConnectionStatusConnected,
		HubVirtualNetworkConnectionStatusConnecting,
		HubVirtualNetworkConnectionStatusNotConnected,
		HubVirtualNetworkConnectionStatusUnknown,
	}
}

func (c HubVirtualNetworkConnectionStatus) ToPtr() *HubVirtualNetworkConnectionStatus {
	return &c
}

// IPAllocationMethod - IP address allocation method.
type IPAllocationMethod string

const (
	IPAllocationMethodDynamic IPAllocationMethod = "Dynamic"
	IPAllocationMethodStatic  IPAllocationMethod = "Static"
)

func PossibleIPAllocationMethodValues() []IPAllocationMethod {
	return []IPAllocationMethod{
		IPAllocationMethodDynamic,
		IPAllocationMethodStatic,
	}
}

func (c IPAllocationMethod) ToPtr() *IPAllocationMethod {
	return &c
}

// IPVersion - IP address version.
type IPVersion string

const (
	IPVersionIPv4 IPVersion = "IPv4"
	IPVersionIPv6 IPVersion = "IPv6"
)

func PossibleIPVersionValues() []IPVersion {
	return []IPVersion{
		IPVersionIPv4,
		IPVersionIPv6,
	}
}

func (c IPVersion) ToPtr() *IPVersion {
	return &c
}

// IkeEncryption - The IKE encryption algorithm (IKE phase 2).
type IkeEncryption string

const (
	IkeEncryptionAes128    IkeEncryption = "AES128"
	IkeEncryptionAes192    IkeEncryption = "AES192"
	IkeEncryptionAes256    IkeEncryption = "AES256"
	IkeEncryptionDes       IkeEncryption = "DES"
	IkeEncryptionDes3      IkeEncryption = "DES3"
	IkeEncryptionGcmaes128 IkeEncryption = "GCMAES128"
	IkeEncryptionGcmaes256 IkeEncryption = "GCMAES256"
)

func PossibleIkeEncryptionValues() []IkeEncryption {
	return []IkeEncryption{
		IkeEncryptionAes128,
		IkeEncryptionAes192,
		IkeEncryptionAes256,
		IkeEncryptionDes,
		IkeEncryptionDes3,
		IkeEncryptionGcmaes128,
		IkeEncryptionGcmaes256,
	}
}

func (c IkeEncryption) ToPtr() *IkeEncryption {
	return &c
}

// IkeIntegrity - The IKE integrity algorithm (IKE phase 2).
type IkeIntegrity string

const (
	IkeIntegrityGcmaes128 IkeIntegrity = "GCMAES128"
	IkeIntegrityGcmaes256 IkeIntegrity = "GCMAES256"
	IkeIntegrityMd5       IkeIntegrity = "MD5"
	IkeIntegritySha1      IkeIntegrity = "SHA1"
	IkeIntegritySha256    IkeIntegrity = "SHA256"
	IkeIntegritySha384    IkeIntegrity = "SHA384"
)

func PossibleIkeIntegrityValues() []IkeIntegrity {
	return []IkeIntegrity{
		IkeIntegrityGcmaes128,
		IkeIntegrityGcmaes256,
		IkeIntegrityMd5,
		IkeIntegritySha1,
		IkeIntegritySha256,
		IkeIntegritySha384,
	}
}

func (c IkeIntegrity) ToPtr() *IkeIntegrity {
	return &c
}

// IpAllocationType - IpAllocation type.
type IpAllocationType string

const (
	IpAllocationTypeHypernet  IpAllocationType = "Hypernet"
	IpAllocationTypeUndefined IpAllocationType = "Undefined"
)

func PossibleIpAllocationTypeValues() []IpAllocationType {
	return []IpAllocationType{
		IpAllocationTypeHypernet,
		IpAllocationTypeUndefined,
	}
}

func (c IpAllocationType) ToPtr() *IpAllocationType {
	return &c
}

// IpFlowProtocol - Protocol to be verified on.
type IpFlowProtocol string

const (
	IpFlowProtocolTCP IpFlowProtocol = "TCP"
	IpFlowProtocolUDP IpFlowProtocol = "UDP"
)

func PossibleIpFlowProtocolValues() []IpFlowProtocol {
	return []IpFlowProtocol{
		IpFlowProtocolTCP,
		IpFlowProtocolUDP,
	}
}

func (c IpFlowProtocol) ToPtr() *IpFlowProtocol {
	return &c
}

// IpsecEncryption - The IPSec encryption algorithm (IKE phase 1).
type IpsecEncryption string

const (
	IpsecEncryptionAes128    IpsecEncryption = "AES128"
	IpsecEncryptionAes192    IpsecEncryption = "AES192"
	IpsecEncryptionAes256    IpsecEncryption = "AES256"
	IpsecEncryptionDes       IpsecEncryption = "DES"
	IpsecEncryptionDes3      IpsecEncryption = "DES3"
	IpsecEncryptionGcmaes128 IpsecEncryption = "GCMAES128"
	IpsecEncryptionGcmaes192 IpsecEncryption = "GCMAES192"
	IpsecEncryptionGcmaes256 IpsecEncryption = "GCMAES256"
	IpsecEncryptionNone      IpsecEncryption = "None"
)

func PossibleIpsecEncryptionValues() []IpsecEncryption {
	return []IpsecEncryption{
		IpsecEncryptionAes128,
		IpsecEncryptionAes192,
		IpsecEncryptionAes256,
		IpsecEncryptionDes,
		IpsecEncryptionDes3,
		IpsecEncryptionGcmaes128,
		IpsecEncryptionGcmaes192,
		IpsecEncryptionGcmaes256,
		IpsecEncryptionNone,
	}
}

func (c IpsecEncryption) ToPtr() *IpsecEncryption {
	return &c
}

// IpsecIntegrity - The IPSec integrity algorithm (IKE phase 1).
type IpsecIntegrity string

const (
	IpsecIntegrityGcmaes128 IpsecIntegrity = "GCMAES128"
	IpsecIntegrityGcmaes192 IpsecIntegrity = "GCMAES192"
	IpsecIntegrityGcmaes256 IpsecIntegrity = "GCMAES256"
	IpsecIntegrityMd5       IpsecIntegrity = "MD5"
	IpsecIntegritySha1      IpsecIntegrity = "SHA1"
	IpsecIntegritySha256    IpsecIntegrity = "SHA256"
)

func PossibleIpsecIntegrityValues() []IpsecIntegrity {
	return []IpsecIntegrity{
		IpsecIntegrityGcmaes128,
		IpsecIntegrityGcmaes192,
		IpsecIntegrityGcmaes256,
		IpsecIntegrityMd5,
		IpsecIntegritySha1,
		IpsecIntegritySha256,
	}
}

func (c IpsecIntegrity) ToPtr() *IpsecIntegrity {
	return &c
}

// IssueType - The type of issue.
type IssueType string

const (
	IssueTypeAgentStopped        IssueType = "AgentStopped"
	IssueTypeDNSResolution       IssueType = "DnsResolution"
	IssueTypeGuestFirewall       IssueType = "GuestFirewall"
	IssueTypeNetworkSecurityRule IssueType = "NetworkSecurityRule"
	IssueTypePlatform            IssueType = "Platform"
	IssueTypePortThrottled       IssueType = "PortThrottled"
	IssueTypeSocketBind          IssueType = "SocketBind"
	IssueTypeUnknown             IssueType = "Unknown"
	IssueTypeUserDefinedRoute    IssueType = "UserDefinedRoute"
)

func PossibleIssueTypeValues() []IssueType {
	return []IssueType{
		IssueTypeAgentStopped,
		IssueTypeDNSResolution,
		IssueTypeGuestFirewall,
		IssueTypeNetworkSecurityRule,
		IssueTypePlatform,
		IssueTypePortThrottled,
		IssueTypeSocketBind,
		IssueTypeUnknown,
		IssueTypeUserDefinedRoute,
	}
}

func (c IssueType) ToPtr() *IssueType {
	return &c
}

// LoadBalancerOutboundRuleProtocol - The protocol for the outbound rule in load balancer.
type LoadBalancerOutboundRuleProtocol string

const (
	LoadBalancerOutboundRuleProtocolAll LoadBalancerOutboundRuleProtocol = "All"
	LoadBalancerOutboundRuleProtocolTCP LoadBalancerOutboundRuleProtocol = "Tcp"
	LoadBalancerOutboundRuleProtocolUDP LoadBalancerOutboundRuleProtocol = "Udp"
)

func PossibleLoadBalancerOutboundRuleProtocolValues() []LoadBalancerOutboundRuleProtocol {
	return []LoadBalancerOutboundRuleProtocol{
		LoadBalancerOutboundRuleProtocolAll,
		LoadBalancerOutboundRuleProtocolTCP,
		LoadBalancerOutboundRuleProtocolUDP,
	}
}

func (c LoadBalancerOutboundRuleProtocol) ToPtr() *LoadBalancerOutboundRuleProtocol {
	return &c
}

// LoadBalancerSkuName - Name of a load balancer SKU.
type LoadBalancerSkuName string

const (
	LoadBalancerSkuNameBasic    LoadBalancerSkuName = "Basic"
	LoadBalancerSkuNameStandard LoadBalancerSkuName = "Standard"
)

func PossibleLoadBalancerSkuNameValues() []LoadBalancerSkuName {
	return []LoadBalancerSkuName{
		LoadBalancerSkuNameBasic,
		LoadBalancerSkuNameStandard,
	}
}

func (c LoadBalancerSkuName) ToPtr() *LoadBalancerSkuName {
	return &c
}

// LoadDistribution - The load distribution policy for this rule.
type LoadDistribution string

const (
	LoadDistributionDefault          LoadDistribution = "Default"
	LoadDistributionSourceIP         LoadDistribution = "SourceIP"
	LoadDistributionSourceIPProtocol LoadDistribution = "SourceIPProtocol"
)

func PossibleLoadDistributionValues() []LoadDistribution {
	return []LoadDistribution{
		LoadDistributionDefault,
		LoadDistributionSourceIP,
		LoadDistributionSourceIPProtocol,
	}
}

func (c LoadDistribution) ToPtr() *LoadDistribution {
	return &c
}

// NetworkOperationStatus - Status of the Azure async operation.
type NetworkOperationStatus string

const (
	NetworkOperationStatusFailed     NetworkOperationStatus = "Failed"
	NetworkOperationStatusInProgress NetworkOperationStatus = "InProgress"
	NetworkOperationStatusSucceeded  NetworkOperationStatus = "Succeeded"
)

func PossibleNetworkOperationStatusValues() []NetworkOperationStatus {
	return []NetworkOperationStatus{
		NetworkOperationStatusFailed,
		NetworkOperationStatusInProgress,
		NetworkOperationStatusSucceeded,
	}
}

func (c NetworkOperationStatus) ToPtr() *NetworkOperationStatus {
	return &c
}

// NextHopType - Next hop type.
type NextHopType string

const (
	NextHopTypeHyperNetGateway       NextHopType = "HyperNetGateway"
	NextHopTypeInternet              NextHopType = "Internet"
	NextHopTypeNone                  NextHopType = "None"
	NextHopTypeVirtualAppliance      NextHopType = "VirtualAppliance"
	NextHopTypeVirtualNetworkGateway NextHopType = "VirtualNetworkGateway"
	NextHopTypeVnetLocal             NextHopType = "VnetLocal"
)

func PossibleNextHopTypeValues() []NextHopType {
	return []NextHopType{
		NextHopTypeHyperNetGateway,
		NextHopTypeInternet,
		NextHopTypeNone,
		NextHopTypeVirtualAppliance,
		NextHopTypeVirtualNetworkGateway,
		NextHopTypeVnetLocal,
	}
}

func (c NextHopType) ToPtr() *NextHopType {
	return &c
}

// OfficeTrafficCategory - The office traffic category.
type OfficeTrafficCategory string

const (
	OfficeTrafficCategoryAll              OfficeTrafficCategory = "All"
	OfficeTrafficCategoryNone             OfficeTrafficCategory = "None"
	OfficeTrafficCategoryOptimize         OfficeTrafficCategory = "Optimize"
	OfficeTrafficCategoryOptimizeAndAllow OfficeTrafficCategory = "OptimizeAndAllow"
)

func PossibleOfficeTrafficCategoryValues() []OfficeTrafficCategory {
	return []OfficeTrafficCategory{
		OfficeTrafficCategoryAll,
		OfficeTrafficCategoryNone,
		OfficeTrafficCategoryOptimize,
		OfficeTrafficCategoryOptimizeAndAllow,
	}
}

func (c OfficeTrafficCategory) ToPtr() *OfficeTrafficCategory {
	return &c
}

// Origin - The origin of the issue.
type Origin string

const (
	OriginInbound  Origin = "Inbound"
	OriginLocal    Origin = "Local"
	OriginOutbound Origin = "Outbound"
)

func PossibleOriginValues() []Origin {
	return []Origin{
		OriginInbound,
		OriginLocal,
		OriginOutbound,
	}
}

func (c Origin) ToPtr() *Origin {
	return &c
}

// OwaspCrsExclusionEntryMatchVariable - The variable to be excluded.
type OwaspCrsExclusionEntryMatchVariable string

const (
	OwaspCrsExclusionEntryMatchVariableRequestArgNames    OwaspCrsExclusionEntryMatchVariable = "RequestArgNames"
	OwaspCrsExclusionEntryMatchVariableRequestCookieNames OwaspCrsExclusionEntryMatchVariable = "RequestCookieNames"
	OwaspCrsExclusionEntryMatchVariableRequestHeaderNames OwaspCrsExclusionEntryMatchVariable = "RequestHeaderNames"
)

func PossibleOwaspCrsExclusionEntryMatchVariableValues() []OwaspCrsExclusionEntryMatchVariable {
	return []OwaspCrsExclusionEntryMatchVariable{
		OwaspCrsExclusionEntryMatchVariableRequestArgNames,
		OwaspCrsExclusionEntryMatchVariableRequestCookieNames,
		OwaspCrsExclusionEntryMatchVariableRequestHeaderNames,
	}
}

func (c OwaspCrsExclusionEntryMatchVariable) ToPtr() *OwaspCrsExclusionEntryMatchVariable {
	return &c
}

// OwaspCrsExclusionEntrySelectorMatchOperator - When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
type OwaspCrsExclusionEntrySelectorMatchOperator string

const (
	OwaspCrsExclusionEntrySelectorMatchOperatorContains   OwaspCrsExclusionEntrySelectorMatchOperator = "Contains"
	OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith   OwaspCrsExclusionEntrySelectorMatchOperator = "EndsWith"
	OwaspCrsExclusionEntrySelectorMatchOperatorEquals     OwaspCrsExclusionEntrySelectorMatchOperator = "Equals"
	OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny  OwaspCrsExclusionEntrySelectorMatchOperator = "EqualsAny"
	OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith OwaspCrsExclusionEntrySelectorMatchOperator = "StartsWith"
)

func PossibleOwaspCrsExclusionEntrySelectorMatchOperatorValues() []OwaspCrsExclusionEntrySelectorMatchOperator {
	return []OwaspCrsExclusionEntrySelectorMatchOperator{
		OwaspCrsExclusionEntrySelectorMatchOperatorContains,
		OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith,
		OwaspCrsExclusionEntrySelectorMatchOperatorEquals,
		OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny,
		OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith,
	}
}

func (c OwaspCrsExclusionEntrySelectorMatchOperator) ToPtr() *OwaspCrsExclusionEntrySelectorMatchOperator {
	return &c
}

type PcError string

const (
	PcErrorAgentStopped    PcError = "AgentStopped"
	PcErrorCaptureFailed   PcError = "CaptureFailed"
	PcErrorInternalError   PcError = "InternalError"
	PcErrorLocalFileFailed PcError = "LocalFileFailed"
	PcErrorStorageFailed   PcError = "StorageFailed"
)

func PossiblePcErrorValues() []PcError {
	return []PcError{
		PcErrorAgentStopped,
		PcErrorCaptureFailed,
		PcErrorInternalError,
		PcErrorLocalFileFailed,
		PcErrorStorageFailed,
	}
}

func (c PcError) ToPtr() *PcError {
	return &c
}

// PcProtocol - Protocol to be filtered on.
type PcProtocol string

const (
	PcProtocolAny PcProtocol = "Any"
	PcProtocolTCP PcProtocol = "TCP"
	PcProtocolUDP PcProtocol = "UDP"
)

func PossiblePcProtocolValues() []PcProtocol {
	return []PcProtocol{
		PcProtocolAny,
		PcProtocolTCP,
		PcProtocolUDP,
	}
}

func (c PcProtocol) ToPtr() *PcProtocol {
	return &c
}

// PcStatus - The status of the packet capture session.
type PcStatus string

const (
	PcStatusError      PcStatus = "Error"
	PcStatusNotStarted PcStatus = "NotStarted"
	PcStatusRunning    PcStatus = "Running"
	PcStatusStopped    PcStatus = "Stopped"
	PcStatusUnknown    PcStatus = "Unknown"
)

func PossiblePcStatusValues() []PcStatus {
	return []PcStatus{
		PcStatusError,
		PcStatusNotStarted,
		PcStatusRunning,
		PcStatusStopped,
		PcStatusUnknown,
	}
}

func (c PcStatus) ToPtr() *PcStatus {
	return &c
}

// PfsGroup - The Pfs Groups used in IKE Phase 2 for new child SA.
type PfsGroup string

const (
	PfsGroupEcp256  PfsGroup = "ECP256"
	PfsGroupEcp384  PfsGroup = "ECP384"
	PfsGroupNone    PfsGroup = "None"
	PfsGroupPfs1    PfsGroup = "PFS1"
	PfsGroupPfs14   PfsGroup = "PFS14"
	PfsGroupPfs2    PfsGroup = "PFS2"
	PfsGroupPfs2048 PfsGroup = "PFS2048"
	PfsGroupPfs24   PfsGroup = "PFS24"
	PfsGroupPfsmm   PfsGroup = "PFSMM"
)

func PossiblePfsGroupValues() []PfsGroup {
	return []PfsGroup{
		PfsGroupEcp256,
		PfsGroupEcp384,
		PfsGroupNone,
		PfsGroupPfs1,
		PfsGroupPfs14,
		PfsGroupPfs2,
		PfsGroupPfs2048,
		PfsGroupPfs24,
		PfsGroupPfsmm,
	}
}

func (c PfsGroup) ToPtr() *PfsGroup {
	return &c
}

// PreferredIPVersion - The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
type PreferredIPVersion string

const (
	PreferredIPVersionIPv4 PreferredIPVersion = "IPv4"
	PreferredIPVersionIPv6 PreferredIPVersion = "IPv6"
)

func PossiblePreferredIPVersionValues() []PreferredIPVersion {
	return []PreferredIPVersion{
		PreferredIPVersionIPv4,
		PreferredIPVersionIPv6,
	}
}

func (c PreferredIPVersion) ToPtr() *PreferredIPVersion {
	return &c
}

// ProbeProtocol - The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
type ProbeProtocol string

const (
	ProbeProtocolHTTP  ProbeProtocol = "Http"
	ProbeProtocolHTTPs ProbeProtocol = "Https"
	ProbeProtocolTCP   ProbeProtocol = "Tcp"
)

func PossibleProbeProtocolValues() []ProbeProtocol {
	return []ProbeProtocol{
		ProbeProtocolHTTP,
		ProbeProtocolHTTPs,
		ProbeProtocolTCP,
	}
}

func (c ProbeProtocol) ToPtr() *ProbeProtocol {
	return &c
}

// ProcessorArchitecture - VPN client Processor Architecture.
type ProcessorArchitecture string

const (
	ProcessorArchitectureAmd64 ProcessorArchitecture = "Amd64"
	ProcessorArchitectureX86   ProcessorArchitecture = "X86"
)

func PossibleProcessorArchitectureValues() []ProcessorArchitecture {
	return []ProcessorArchitecture{
		ProcessorArchitectureAmd64,
		ProcessorArchitectureX86,
	}
}

func (c ProcessorArchitecture) ToPtr() *ProcessorArchitecture {
	return &c
}

// Protocol - Network protocol.
type Protocol string

const (
	ProtocolHTTP  Protocol = "Http"
	ProtocolHTTPs Protocol = "Https"
	ProtocolIcmp  Protocol = "Icmp"
	ProtocolTCP   Protocol = "Tcp"
)

func PossibleProtocolValues() []Protocol {
	return []Protocol{
		ProtocolHTTP,
		ProtocolHTTPs,
		ProtocolIcmp,
		ProtocolTCP,
	}
}

func (c Protocol) ToPtr() *Protocol {
	return &c
}

// ProvisioningState - The current provisioning state.
type ProvisioningState string

const (
	ProvisioningStateDeleting  ProvisioningState = "Deleting"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating  ProvisioningState = "Updating"
)

func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// PublicIPAddressSkuName - Name of a public IP address SKU.
type PublicIPAddressSkuName string

const (
	PublicIPAddressSkuNameBasic    PublicIPAddressSkuName = "Basic"
	PublicIPAddressSkuNameStandard PublicIPAddressSkuName = "Standard"
)

func PossiblePublicIPAddressSkuNameValues() []PublicIPAddressSkuName {
	return []PublicIPAddressSkuName{
		PublicIPAddressSkuNameBasic,
		PublicIPAddressSkuNameStandard,
	}
}

func (c PublicIPAddressSkuName) ToPtr() *PublicIPAddressSkuName {
	return &c
}

// ResourceIdentityType - The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
type ResourceIdentityType string

const (
	ResourceIdentityTypeSystemAssigned             ResourceIdentityType = "SystemAssigned"
	ResourceIdentityTypeUserAssigned               ResourceIdentityType = "UserAssigned"
	ResourceIdentityTypeSystemAssignedUserAssigned ResourceIdentityType = "SystemAssigned, UserAssigned"
	ResourceIdentityTypeNone                       ResourceIdentityType = "None"
)

func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{
		ResourceIdentityTypeSystemAssigned,
		ResourceIdentityTypeUserAssigned,
		ResourceIdentityTypeSystemAssignedUserAssigned,
		ResourceIdentityTypeNone,
	}
}

func (c ResourceIdentityType) ToPtr() *ResourceIdentityType {
	return &c
}

// RouteNextHopType - The type of Azure hop the packet should be sent to.
type RouteNextHopType string

const (
	RouteNextHopTypeInternet              RouteNextHopType = "Internet"
	RouteNextHopTypeNone                  RouteNextHopType = "None"
	RouteNextHopTypeVirtualAppliance      RouteNextHopType = "VirtualAppliance"
	RouteNextHopTypeVirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	RouteNextHopTypeVnetLocal             RouteNextHopType = "VnetLocal"
)

func PossibleRouteNextHopTypeValues() []RouteNextHopType {
	return []RouteNextHopType{
		RouteNextHopTypeInternet,
		RouteNextHopTypeNone,
		RouteNextHopTypeVirtualAppliance,
		RouteNextHopTypeVirtualNetworkGateway,
		RouteNextHopTypeVnetLocal,
	}
}

func (c RouteNextHopType) ToPtr() *RouteNextHopType {
	return &c
}

// SecurityPartnerProviderConnectionStatus - The current state of the connection with Security Partner Provider.
type SecurityPartnerProviderConnectionStatus string

const (
	SecurityPartnerProviderConnectionStatusConnected          SecurityPartnerProviderConnectionStatus = "Connected"
	SecurityPartnerProviderConnectionStatusNotConnected       SecurityPartnerProviderConnectionStatus = "NotConnected"
	SecurityPartnerProviderConnectionStatusPartiallyConnected SecurityPartnerProviderConnectionStatus = "PartiallyConnected"
	SecurityPartnerProviderConnectionStatusUnknown            SecurityPartnerProviderConnectionStatus = "Unknown"
)

func PossibleSecurityPartnerProviderConnectionStatusValues() []SecurityPartnerProviderConnectionStatus {
	return []SecurityPartnerProviderConnectionStatus{
		SecurityPartnerProviderConnectionStatusConnected,
		SecurityPartnerProviderConnectionStatusNotConnected,
		SecurityPartnerProviderConnectionStatusPartiallyConnected,
		SecurityPartnerProviderConnectionStatusUnknown,
	}
}

func (c SecurityPartnerProviderConnectionStatus) ToPtr() *SecurityPartnerProviderConnectionStatus {
	return &c
}

// SecurityProviderName - The Security Providers.
type SecurityProviderName string

const (
	SecurityProviderNameCheckpoint SecurityProviderName = "Checkpoint"
	SecurityProviderNameIBoss      SecurityProviderName = "IBoss"
	SecurityProviderNameZScaler    SecurityProviderName = "ZScaler"
)

func PossibleSecurityProviderNameValues() []SecurityProviderName {
	return []SecurityProviderName{
		SecurityProviderNameCheckpoint,
		SecurityProviderNameIBoss,
		SecurityProviderNameZScaler,
	}
}

func (c SecurityProviderName) ToPtr() *SecurityProviderName {
	return &c
}

// SecurityRuleAccess - Whether network traffic is allowed or denied.
type SecurityRuleAccess string

const (
	SecurityRuleAccessAllow SecurityRuleAccess = "Allow"
	SecurityRuleAccessDeny  SecurityRuleAccess = "Deny"
)

func PossibleSecurityRuleAccessValues() []SecurityRuleAccess {
	return []SecurityRuleAccess{
		SecurityRuleAccessAllow,
		SecurityRuleAccessDeny,
	}
}

func (c SecurityRuleAccess) ToPtr() *SecurityRuleAccess {
	return &c
}

// SecurityRuleDirection - The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
type SecurityRuleDirection string

const (
	SecurityRuleDirectionInbound  SecurityRuleDirection = "Inbound"
	SecurityRuleDirectionOutbound SecurityRuleDirection = "Outbound"
)

func PossibleSecurityRuleDirectionValues() []SecurityRuleDirection {
	return []SecurityRuleDirection{
		SecurityRuleDirectionInbound,
		SecurityRuleDirectionOutbound,
	}
}

func (c SecurityRuleDirection) ToPtr() *SecurityRuleDirection {
	return &c
}

// SecurityRuleProtocol - Network protocol this rule applies to.
type SecurityRuleProtocol string

const (
	SecurityRuleProtocolAh       SecurityRuleProtocol = "Ah"
	SecurityRuleProtocolAsterisk SecurityRuleProtocol = "*"
	SecurityRuleProtocolEsp      SecurityRuleProtocol = "Esp"
	SecurityRuleProtocolIcmp     SecurityRuleProtocol = "Icmp"
	SecurityRuleProtocolTCP      SecurityRuleProtocol = "Tcp"
	SecurityRuleProtocolUDP      SecurityRuleProtocol = "Udp"
)

func PossibleSecurityRuleProtocolValues() []SecurityRuleProtocol {
	return []SecurityRuleProtocol{
		SecurityRuleProtocolAh,
		SecurityRuleProtocolAsterisk,
		SecurityRuleProtocolEsp,
		SecurityRuleProtocolIcmp,
		SecurityRuleProtocolTCP,
		SecurityRuleProtocolUDP,
	}
}

func (c SecurityRuleProtocol) ToPtr() *SecurityRuleProtocol {
	return &c
}

// ServiceProviderProvisioningState - The ServiceProviderProvisioningState state of the resource.
type ServiceProviderProvisioningState string

const (
	ServiceProviderProvisioningStateDeprovisioning ServiceProviderProvisioningState = "Deprovisioning"
	ServiceProviderProvisioningStateNotProvisioned ServiceProviderProvisioningState = "NotProvisioned"
	ServiceProviderProvisioningStateProvisioned    ServiceProviderProvisioningState = "Provisioned"
	ServiceProviderProvisioningStateProvisioning   ServiceProviderProvisioningState = "Provisioning"
)

func PossibleServiceProviderProvisioningStateValues() []ServiceProviderProvisioningState {
	return []ServiceProviderProvisioningState{
		ServiceProviderProvisioningStateDeprovisioning,
		ServiceProviderProvisioningStateNotProvisioned,
		ServiceProviderProvisioningStateProvisioned,
		ServiceProviderProvisioningStateProvisioning,
	}
}

func (c ServiceProviderProvisioningState) ToPtr() *ServiceProviderProvisioningState {
	return &c
}

// Severity - The severity of the issue.
type Severity string

const (
	SeverityError   Severity = "Error"
	SeverityWarning Severity = "Warning"
)

func PossibleSeverityValues() []Severity {
	return []Severity{
		SeverityError,
		SeverityWarning,
	}
}

func (c Severity) ToPtr() *Severity {
	return &c
}

// TransportProtocol - The transport protocol for the endpoint.
type TransportProtocol string

const (
	TransportProtocolAll TransportProtocol = "All"
	TransportProtocolTCP TransportProtocol = "Tcp"
	TransportProtocolUDP TransportProtocol = "Udp"
)

func PossibleTransportProtocolValues() []TransportProtocol {
	return []TransportProtocol{
		TransportProtocolAll,
		TransportProtocolTCP,
		TransportProtocolUDP,
	}
}

func (c TransportProtocol) ToPtr() *TransportProtocol {
	return &c
}

// TunnelConnectionStatus - The current state of the tunnel.
type TunnelConnectionStatus string

const (
	TunnelConnectionStatusConnected    TunnelConnectionStatus = "Connected"
	TunnelConnectionStatusConnecting   TunnelConnectionStatus = "Connecting"
	TunnelConnectionStatusNotConnected TunnelConnectionStatus = "NotConnected"
	TunnelConnectionStatusUnknown      TunnelConnectionStatus = "Unknown"
)

func PossibleTunnelConnectionStatusValues() []TunnelConnectionStatus {
	return []TunnelConnectionStatus{
		TunnelConnectionStatusConnected,
		TunnelConnectionStatusConnecting,
		TunnelConnectionStatusNotConnected,
		TunnelConnectionStatusUnknown,
	}
}

func (c TunnelConnectionStatus) ToPtr() *TunnelConnectionStatus {
	return &c
}

// VerbosityLevel - Verbosity level.
type VerbosityLevel string

const (
	VerbosityLevelFull    VerbosityLevel = "Full"
	VerbosityLevelMinimum VerbosityLevel = "Minimum"
	VerbosityLevelNormal  VerbosityLevel = "Normal"
)

func PossibleVerbosityLevelValues() []VerbosityLevel {
	return []VerbosityLevel{
		VerbosityLevelFull,
		VerbosityLevelMinimum,
		VerbosityLevelNormal,
	}
}

func (c VerbosityLevel) ToPtr() *VerbosityLevel {
	return &c
}

// VirtualNetworkGatewayConnectionProtocol - Gateway connection protocol.
type VirtualNetworkGatewayConnectionProtocol string

const (
	VirtualNetworkGatewayConnectionProtocolIkEv1 VirtualNetworkGatewayConnectionProtocol = "IKEv1"
	VirtualNetworkGatewayConnectionProtocolIkEv2 VirtualNetworkGatewayConnectionProtocol = "IKEv2"
)

func PossibleVirtualNetworkGatewayConnectionProtocolValues() []VirtualNetworkGatewayConnectionProtocol {
	return []VirtualNetworkGatewayConnectionProtocol{
		VirtualNetworkGatewayConnectionProtocolIkEv1,
		VirtualNetworkGatewayConnectionProtocolIkEv2,
	}
}

func (c VirtualNetworkGatewayConnectionProtocol) ToPtr() *VirtualNetworkGatewayConnectionProtocol {
	return &c
}

// VirtualNetworkGatewayConnectionStatus - Virtual Network Gateway connection status.
type VirtualNetworkGatewayConnectionStatus string

const (
	VirtualNetworkGatewayConnectionStatusConnected    VirtualNetworkGatewayConnectionStatus = "Connected"
	VirtualNetworkGatewayConnectionStatusConnecting   VirtualNetworkGatewayConnectionStatus = "Connecting"
	VirtualNetworkGatewayConnectionStatusNotConnected VirtualNetworkGatewayConnectionStatus = "NotConnected"
	VirtualNetworkGatewayConnectionStatusUnknown      VirtualNetworkGatewayConnectionStatus = "Unknown"
)

func PossibleVirtualNetworkGatewayConnectionStatusValues() []VirtualNetworkGatewayConnectionStatus {
	return []VirtualNetworkGatewayConnectionStatus{
		VirtualNetworkGatewayConnectionStatusConnected,
		VirtualNetworkGatewayConnectionStatusConnecting,
		VirtualNetworkGatewayConnectionStatusNotConnected,
		VirtualNetworkGatewayConnectionStatusUnknown,
	}
}

func (c VirtualNetworkGatewayConnectionStatus) ToPtr() *VirtualNetworkGatewayConnectionStatus {
	return &c
}

// VirtualNetworkGatewayConnectionType - Gateway connection type.
type VirtualNetworkGatewayConnectionType string

const (
	VirtualNetworkGatewayConnectionTypeExpressRoute VirtualNetworkGatewayConnectionType = "ExpressRoute"
	VirtualNetworkGatewayConnectionTypeIPsec        VirtualNetworkGatewayConnectionType = "IPsec"
	VirtualNetworkGatewayConnectionTypeVnet2Vnet    VirtualNetworkGatewayConnectionType = "Vnet2Vnet"
	VirtualNetworkGatewayConnectionTypeVpnClient    VirtualNetworkGatewayConnectionType = "VPNClient"
)

func PossibleVirtualNetworkGatewayConnectionTypeValues() []VirtualNetworkGatewayConnectionType {
	return []VirtualNetworkGatewayConnectionType{
		VirtualNetworkGatewayConnectionTypeExpressRoute,
		VirtualNetworkGatewayConnectionTypeIPsec,
		VirtualNetworkGatewayConnectionTypeVnet2Vnet,
		VirtualNetworkGatewayConnectionTypeVpnClient,
	}
}

func (c VirtualNetworkGatewayConnectionType) ToPtr() *VirtualNetworkGatewayConnectionType {
	return &c
}

// VirtualNetworkGatewaySkuName - Gateway SKU name.
type VirtualNetworkGatewaySkuName string

const (
	VirtualNetworkGatewaySkuNameBasic            VirtualNetworkGatewaySkuName = "Basic"
	VirtualNetworkGatewaySkuNameErGw1Az          VirtualNetworkGatewaySkuName = "ErGw1AZ"
	VirtualNetworkGatewaySkuNameErGw2Az          VirtualNetworkGatewaySkuName = "ErGw2AZ"
	VirtualNetworkGatewaySkuNameErGw3Az          VirtualNetworkGatewaySkuName = "ErGw3AZ"
	VirtualNetworkGatewaySkuNameHighPerformance  VirtualNetworkGatewaySkuName = "HighPerformance"
	VirtualNetworkGatewaySkuNameStandard         VirtualNetworkGatewaySkuName = "Standard"
	VirtualNetworkGatewaySkuNameUltraPerformance VirtualNetworkGatewaySkuName = "UltraPerformance"
	VirtualNetworkGatewaySkuNameVpnGw1           VirtualNetworkGatewaySkuName = "VpnGw1"
	VirtualNetworkGatewaySkuNameVpnGw1Az         VirtualNetworkGatewaySkuName = "VpnGw1AZ"
	VirtualNetworkGatewaySkuNameVpnGw2           VirtualNetworkGatewaySkuName = "VpnGw2"
	VirtualNetworkGatewaySkuNameVpnGw2Az         VirtualNetworkGatewaySkuName = "VpnGw2AZ"
	VirtualNetworkGatewaySkuNameVpnGw3           VirtualNetworkGatewaySkuName = "VpnGw3"
	VirtualNetworkGatewaySkuNameVpnGw3Az         VirtualNetworkGatewaySkuName = "VpnGw3AZ"
	VirtualNetworkGatewaySkuNameVpnGw4           VirtualNetworkGatewaySkuName = "VpnGw4"
	VirtualNetworkGatewaySkuNameVpnGw4Az         VirtualNetworkGatewaySkuName = "VpnGw4AZ"
	VirtualNetworkGatewaySkuNameVpnGw5           VirtualNetworkGatewaySkuName = "VpnGw5"
	VirtualNetworkGatewaySkuNameVpnGw5Az         VirtualNetworkGatewaySkuName = "VpnGw5AZ"
)

func PossibleVirtualNetworkGatewaySkuNameValues() []VirtualNetworkGatewaySkuName {
	return []VirtualNetworkGatewaySkuName{
		VirtualNetworkGatewaySkuNameBasic,
		VirtualNetworkGatewaySkuNameErGw1Az,
		VirtualNetworkGatewaySkuNameErGw2Az,
		VirtualNetworkGatewaySkuNameErGw3Az,
		VirtualNetworkGatewaySkuNameHighPerformance,
		VirtualNetworkGatewaySkuNameStandard,
		VirtualNetworkGatewaySkuNameUltraPerformance,
		VirtualNetworkGatewaySkuNameVpnGw1,
		VirtualNetworkGatewaySkuNameVpnGw1Az,
		VirtualNetworkGatewaySkuNameVpnGw2,
		VirtualNetworkGatewaySkuNameVpnGw2Az,
		VirtualNetworkGatewaySkuNameVpnGw3,
		VirtualNetworkGatewaySkuNameVpnGw3Az,
		VirtualNetworkGatewaySkuNameVpnGw4,
		VirtualNetworkGatewaySkuNameVpnGw4Az,
		VirtualNetworkGatewaySkuNameVpnGw5,
		VirtualNetworkGatewaySkuNameVpnGw5Az,
	}
}

func (c VirtualNetworkGatewaySkuName) ToPtr() *VirtualNetworkGatewaySkuName {
	return &c
}

// VirtualNetworkGatewaySkuTier - Gateway SKU tier.
type VirtualNetworkGatewaySkuTier string

const (
	VirtualNetworkGatewaySkuTierBasic            VirtualNetworkGatewaySkuTier = "Basic"
	VirtualNetworkGatewaySkuTierErGw1Az          VirtualNetworkGatewaySkuTier = "ErGw1AZ"
	VirtualNetworkGatewaySkuTierErGw2Az          VirtualNetworkGatewaySkuTier = "ErGw2AZ"
	VirtualNetworkGatewaySkuTierErGw3Az          VirtualNetworkGatewaySkuTier = "ErGw3AZ"
	VirtualNetworkGatewaySkuTierHighPerformance  VirtualNetworkGatewaySkuTier = "HighPerformance"
	VirtualNetworkGatewaySkuTierStandard         VirtualNetworkGatewaySkuTier = "Standard"
	VirtualNetworkGatewaySkuTierUltraPerformance VirtualNetworkGatewaySkuTier = "UltraPerformance"
	VirtualNetworkGatewaySkuTierVpnGw1           VirtualNetworkGatewaySkuTier = "VpnGw1"
	VirtualNetworkGatewaySkuTierVpnGw1Az         VirtualNetworkGatewaySkuTier = "VpnGw1AZ"
	VirtualNetworkGatewaySkuTierVpnGw2           VirtualNetworkGatewaySkuTier = "VpnGw2"
	VirtualNetworkGatewaySkuTierVpnGw2Az         VirtualNetworkGatewaySkuTier = "VpnGw2AZ"
	VirtualNetworkGatewaySkuTierVpnGw3           VirtualNetworkGatewaySkuTier = "VpnGw3"
	VirtualNetworkGatewaySkuTierVpnGw3Az         VirtualNetworkGatewaySkuTier = "VpnGw3AZ"
	VirtualNetworkGatewaySkuTierVpnGw4           VirtualNetworkGatewaySkuTier = "VpnGw4"
	VirtualNetworkGatewaySkuTierVpnGw4Az         VirtualNetworkGatewaySkuTier = "VpnGw4AZ"
	VirtualNetworkGatewaySkuTierVpnGw5           VirtualNetworkGatewaySkuTier = "VpnGw5"
	VirtualNetworkGatewaySkuTierVpnGw5Az         VirtualNetworkGatewaySkuTier = "VpnGw5AZ"
)

func PossibleVirtualNetworkGatewaySkuTierValues() []VirtualNetworkGatewaySkuTier {
	return []VirtualNetworkGatewaySkuTier{
		VirtualNetworkGatewaySkuTierBasic,
		VirtualNetworkGatewaySkuTierErGw1Az,
		VirtualNetworkGatewaySkuTierErGw2Az,
		VirtualNetworkGatewaySkuTierErGw3Az,
		VirtualNetworkGatewaySkuTierHighPerformance,
		VirtualNetworkGatewaySkuTierStandard,
		VirtualNetworkGatewaySkuTierUltraPerformance,
		VirtualNetworkGatewaySkuTierVpnGw1,
		VirtualNetworkGatewaySkuTierVpnGw1Az,
		VirtualNetworkGatewaySkuTierVpnGw2,
		VirtualNetworkGatewaySkuTierVpnGw2Az,
		VirtualNetworkGatewaySkuTierVpnGw3,
		VirtualNetworkGatewaySkuTierVpnGw3Az,
		VirtualNetworkGatewaySkuTierVpnGw4,
		VirtualNetworkGatewaySkuTierVpnGw4Az,
		VirtualNetworkGatewaySkuTierVpnGw5,
		VirtualNetworkGatewaySkuTierVpnGw5Az,
	}
}

func (c VirtualNetworkGatewaySkuTier) ToPtr() *VirtualNetworkGatewaySkuTier {
	return &c
}

// VirtualNetworkGatewayType - The type of this virtual network gateway.
type VirtualNetworkGatewayType string

const (
	VirtualNetworkGatewayTypeExpressRoute VirtualNetworkGatewayType = "ExpressRoute"
	VirtualNetworkGatewayTypeVpn          VirtualNetworkGatewayType = "Vpn"
)

func PossibleVirtualNetworkGatewayTypeValues() []VirtualNetworkGatewayType {
	return []VirtualNetworkGatewayType{
		VirtualNetworkGatewayTypeExpressRoute,
		VirtualNetworkGatewayTypeVpn,
	}
}

func (c VirtualNetworkGatewayType) ToPtr() *VirtualNetworkGatewayType {
	return &c
}

// VirtualNetworkPeeringState - The status of the virtual network peering.
type VirtualNetworkPeeringState string

const (
	VirtualNetworkPeeringStateConnected    VirtualNetworkPeeringState = "Connected"
	VirtualNetworkPeeringStateDisconnected VirtualNetworkPeeringState = "Disconnected"
	VirtualNetworkPeeringStateInitiated    VirtualNetworkPeeringState = "Initiated"
)

func PossibleVirtualNetworkPeeringStateValues() []VirtualNetworkPeeringState {
	return []VirtualNetworkPeeringState{
		VirtualNetworkPeeringStateConnected,
		VirtualNetworkPeeringStateDisconnected,
		VirtualNetworkPeeringStateInitiated,
	}
}

func (c VirtualNetworkPeeringState) ToPtr() *VirtualNetworkPeeringState {
	return &c
}

// VirtualWanSecurityProviderType - The virtual wan security provider type.
type VirtualWanSecurityProviderType string

const (
	VirtualWanSecurityProviderTypeExternal VirtualWanSecurityProviderType = "External"
	VirtualWanSecurityProviderTypeNative   VirtualWanSecurityProviderType = "Native"
)

func PossibleVirtualWanSecurityProviderTypeValues() []VirtualWanSecurityProviderType {
	return []VirtualWanSecurityProviderType{
		VirtualWanSecurityProviderTypeExternal,
		VirtualWanSecurityProviderTypeNative,
	}
}

func (c VirtualWanSecurityProviderType) ToPtr() *VirtualWanSecurityProviderType {
	return &c
}

// VpnAuthenticationType - VPN authentication types enabled for the VpnServerConfiguration.
type VpnAuthenticationType string

const (
	VpnAuthenticationTypeAad         VpnAuthenticationType = "AAD"
	VpnAuthenticationTypeCertificate VpnAuthenticationType = "Certificate"
	VpnAuthenticationTypeRadius      VpnAuthenticationType = "Radius"
)

func PossibleVpnAuthenticationTypeValues() []VpnAuthenticationType {
	return []VpnAuthenticationType{
		VpnAuthenticationTypeAad,
		VpnAuthenticationTypeCertificate,
		VpnAuthenticationTypeRadius,
	}
}

func (c VpnAuthenticationType) ToPtr() *VpnAuthenticationType {
	return &c
}

// VpnClientProtocol - VPN client protocol enabled for the virtual network gateway.
type VpnClientProtocol string

const (
	VpnClientProtocolIkeV2   VpnClientProtocol = "IkeV2"
	VpnClientProtocolOpenVpn VpnClientProtocol = "OpenVPN"
	VpnClientProtocolSstp    VpnClientProtocol = "SSTP"
)

func PossibleVpnClientProtocolValues() []VpnClientProtocol {
	return []VpnClientProtocol{
		VpnClientProtocolIkeV2,
		VpnClientProtocolOpenVpn,
		VpnClientProtocolSstp,
	}
}

func (c VpnClientProtocol) ToPtr() *VpnClientProtocol {
	return &c
}

// VpnConnectionStatus - The current state of the vpn connection.
type VpnConnectionStatus string

const (
	VpnConnectionStatusConnected    VpnConnectionStatus = "Connected"
	VpnConnectionStatusConnecting   VpnConnectionStatus = "Connecting"
	VpnConnectionStatusNotConnected VpnConnectionStatus = "NotConnected"
	VpnConnectionStatusUnknown      VpnConnectionStatus = "Unknown"
)

func PossibleVpnConnectionStatusValues() []VpnConnectionStatus {
	return []VpnConnectionStatus{
		VpnConnectionStatusConnected,
		VpnConnectionStatusConnecting,
		VpnConnectionStatusNotConnected,
		VpnConnectionStatusUnknown,
	}
}

func (c VpnConnectionStatus) ToPtr() *VpnConnectionStatus {
	return &c
}

// VpnGatewayGeneration - The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
type VpnGatewayGeneration string

const (
	VpnGatewayGenerationGeneration1 VpnGatewayGeneration = "Generation1"
	VpnGatewayGenerationGeneration2 VpnGatewayGeneration = "Generation2"
	VpnGatewayGenerationNone        VpnGatewayGeneration = "None"
)

func PossibleVpnGatewayGenerationValues() []VpnGatewayGeneration {
	return []VpnGatewayGeneration{
		VpnGatewayGenerationGeneration1,
		VpnGatewayGenerationGeneration2,
		VpnGatewayGenerationNone,
	}
}

func (c VpnGatewayGeneration) ToPtr() *VpnGatewayGeneration {
	return &c
}

// VpnGatewayTunnelingProtocol - VPN protocol enabled for the VpnServerConfiguration.
type VpnGatewayTunnelingProtocol string

const (
	VpnGatewayTunnelingProtocolIkeV2   VpnGatewayTunnelingProtocol = "IkeV2"
	VpnGatewayTunnelingProtocolOpenVpn VpnGatewayTunnelingProtocol = "OpenVPN"
)

func PossibleVpnGatewayTunnelingProtocolValues() []VpnGatewayTunnelingProtocol {
	return []VpnGatewayTunnelingProtocol{
		VpnGatewayTunnelingProtocolIkeV2,
		VpnGatewayTunnelingProtocolOpenVpn,
	}
}

func (c VpnGatewayTunnelingProtocol) ToPtr() *VpnGatewayTunnelingProtocol {
	return &c
}

// VpnType - The type of this virtual network gateway.
type VpnType string

const (
	VpnTypePolicyBased VpnType = "PolicyBased"
	VpnTypeRouteBased  VpnType = "RouteBased"
)

func PossibleVpnTypeValues() []VpnType {
	return []VpnType{
		VpnTypePolicyBased,
		VpnTypeRouteBased,
	}
}

func (c VpnType) ToPtr() *VpnType {
	return &c
}

// WebApplicationFirewallAction - Type of Actions.
type WebApplicationFirewallAction string

const (
	WebApplicationFirewallActionAllow WebApplicationFirewallAction = "Allow"
	WebApplicationFirewallActionBlock WebApplicationFirewallAction = "Block"
	WebApplicationFirewallActionLog   WebApplicationFirewallAction = "Log"
)

func PossibleWebApplicationFirewallActionValues() []WebApplicationFirewallAction {
	return []WebApplicationFirewallAction{
		WebApplicationFirewallActionAllow,
		WebApplicationFirewallActionBlock,
		WebApplicationFirewallActionLog,
	}
}

func (c WebApplicationFirewallAction) ToPtr() *WebApplicationFirewallAction {
	return &c
}

// WebApplicationFirewallEnabledState - The state of the policy.
type WebApplicationFirewallEnabledState string

const (
	WebApplicationFirewallEnabledStateDisabled WebApplicationFirewallEnabledState = "Disabled"
	WebApplicationFirewallEnabledStateEnabled  WebApplicationFirewallEnabledState = "Enabled"
)

func PossibleWebApplicationFirewallEnabledStateValues() []WebApplicationFirewallEnabledState {
	return []WebApplicationFirewallEnabledState{
		WebApplicationFirewallEnabledStateDisabled,
		WebApplicationFirewallEnabledStateEnabled,
	}
}

func (c WebApplicationFirewallEnabledState) ToPtr() *WebApplicationFirewallEnabledState {
	return &c
}

// WebApplicationFirewallMatchVariable - Match Variable.
type WebApplicationFirewallMatchVariable string

const (
	WebApplicationFirewallMatchVariablePostArgs       WebApplicationFirewallMatchVariable = "PostArgs"
	WebApplicationFirewallMatchVariableQueryString    WebApplicationFirewallMatchVariable = "QueryString"
	WebApplicationFirewallMatchVariableRemoteAddr     WebApplicationFirewallMatchVariable = "RemoteAddr"
	WebApplicationFirewallMatchVariableRequestBody    WebApplicationFirewallMatchVariable = "RequestBody"
	WebApplicationFirewallMatchVariableRequestCookies WebApplicationFirewallMatchVariable = "RequestCookies"
	WebApplicationFirewallMatchVariableRequestHeaders WebApplicationFirewallMatchVariable = "RequestHeaders"
	WebApplicationFirewallMatchVariableRequestMethod  WebApplicationFirewallMatchVariable = "RequestMethod"
	WebApplicationFirewallMatchVariableRequestURI     WebApplicationFirewallMatchVariable = "RequestUri"
)

func PossibleWebApplicationFirewallMatchVariableValues() []WebApplicationFirewallMatchVariable {
	return []WebApplicationFirewallMatchVariable{
		WebApplicationFirewallMatchVariablePostArgs,
		WebApplicationFirewallMatchVariableQueryString,
		WebApplicationFirewallMatchVariableRemoteAddr,
		WebApplicationFirewallMatchVariableRequestBody,
		WebApplicationFirewallMatchVariableRequestCookies,
		WebApplicationFirewallMatchVariableRequestHeaders,
		WebApplicationFirewallMatchVariableRequestMethod,
		WebApplicationFirewallMatchVariableRequestURI,
	}
}

func (c WebApplicationFirewallMatchVariable) ToPtr() *WebApplicationFirewallMatchVariable {
	return &c
}

// WebApplicationFirewallMode - The mode of the policy.
type WebApplicationFirewallMode string

const (
	WebApplicationFirewallModeDetection  WebApplicationFirewallMode = "Detection"
	WebApplicationFirewallModePrevention WebApplicationFirewallMode = "Prevention"
)

func PossibleWebApplicationFirewallModeValues() []WebApplicationFirewallMode {
	return []WebApplicationFirewallMode{
		WebApplicationFirewallModeDetection,
		WebApplicationFirewallModePrevention,
	}
}

func (c WebApplicationFirewallMode) ToPtr() *WebApplicationFirewallMode {
	return &c
}

// WebApplicationFirewallOperator - The operator to be matched.
type WebApplicationFirewallOperator string

const (
	WebApplicationFirewallOperatorBeginsWith         WebApplicationFirewallOperator = "BeginsWith"
	WebApplicationFirewallOperatorContains           WebApplicationFirewallOperator = "Contains"
	WebApplicationFirewallOperatorEndsWith           WebApplicationFirewallOperator = "EndsWith"
	WebApplicationFirewallOperatorEqual              WebApplicationFirewallOperator = "Equal"
	WebApplicationFirewallOperatorGeoMatch           WebApplicationFirewallOperator = "GeoMatch"
	WebApplicationFirewallOperatorGreaterThan        WebApplicationFirewallOperator = "GreaterThan"
	WebApplicationFirewallOperatorGreaterThanOrEqual WebApplicationFirewallOperator = "GreaterThanOrEqual"
	WebApplicationFirewallOperatorIPMatch            WebApplicationFirewallOperator = "IPMatch"
	WebApplicationFirewallOperatorLessThan           WebApplicationFirewallOperator = "LessThan"
	WebApplicationFirewallOperatorLessThanOrEqual    WebApplicationFirewallOperator = "LessThanOrEqual"
	WebApplicationFirewallOperatorRegex              WebApplicationFirewallOperator = "Regex"
)

func PossibleWebApplicationFirewallOperatorValues() []WebApplicationFirewallOperator {
	return []WebApplicationFirewallOperator{
		WebApplicationFirewallOperatorBeginsWith,
		WebApplicationFirewallOperatorContains,
		WebApplicationFirewallOperatorEndsWith,
		WebApplicationFirewallOperatorEqual,
		WebApplicationFirewallOperatorGeoMatch,
		WebApplicationFirewallOperatorGreaterThan,
		WebApplicationFirewallOperatorGreaterThanOrEqual,
		WebApplicationFirewallOperatorIPMatch,
		WebApplicationFirewallOperatorLessThan,
		WebApplicationFirewallOperatorLessThanOrEqual,
		WebApplicationFirewallOperatorRegex,
	}
}

func (c WebApplicationFirewallOperator) ToPtr() *WebApplicationFirewallOperator {
	return &c
}

// WebApplicationFirewallPolicyResourceState - Resource status of the policy.
type WebApplicationFirewallPolicyResourceState string

const (
	WebApplicationFirewallPolicyResourceStateCreating  WebApplicationFirewallPolicyResourceState = "Creating"
	WebApplicationFirewallPolicyResourceStateDeleting  WebApplicationFirewallPolicyResourceState = "Deleting"
	WebApplicationFirewallPolicyResourceStateDisabled  WebApplicationFirewallPolicyResourceState = "Disabled"
	WebApplicationFirewallPolicyResourceStateDisabling WebApplicationFirewallPolicyResourceState = "Disabling"
	WebApplicationFirewallPolicyResourceStateEnabled   WebApplicationFirewallPolicyResourceState = "Enabled"
	WebApplicationFirewallPolicyResourceStateEnabling  WebApplicationFirewallPolicyResourceState = "Enabling"
)

func PossibleWebApplicationFirewallPolicyResourceStateValues() []WebApplicationFirewallPolicyResourceState {
	return []WebApplicationFirewallPolicyResourceState{
		WebApplicationFirewallPolicyResourceStateCreating,
		WebApplicationFirewallPolicyResourceStateDeleting,
		WebApplicationFirewallPolicyResourceStateDisabled,
		WebApplicationFirewallPolicyResourceStateDisabling,
		WebApplicationFirewallPolicyResourceStateEnabled,
		WebApplicationFirewallPolicyResourceStateEnabling,
	}
}

func (c WebApplicationFirewallPolicyResourceState) ToPtr() *WebApplicationFirewallPolicyResourceState {
	return &c
}

// WebApplicationFirewallRuleType - The rule type.
type WebApplicationFirewallRuleType string

const (
	WebApplicationFirewallRuleTypeInvalid   WebApplicationFirewallRuleType = "Invalid"
	WebApplicationFirewallRuleTypeMatchRule WebApplicationFirewallRuleType = "MatchRule"
)

func PossibleWebApplicationFirewallRuleTypeValues() []WebApplicationFirewallRuleType {
	return []WebApplicationFirewallRuleType{
		WebApplicationFirewallRuleTypeInvalid,
		WebApplicationFirewallRuleTypeMatchRule,
	}
}

func (c WebApplicationFirewallRuleType) ToPtr() *WebApplicationFirewallRuleType {
	return &c
}

// WebApplicationFirewallTransform - Transforms applied before matching.
type WebApplicationFirewallTransform string

const (
	WebApplicationFirewallTransformHTMLEntityDecode WebApplicationFirewallTransform = "HtmlEntityDecode"
	WebApplicationFirewallTransformLowercase        WebApplicationFirewallTransform = "Lowercase"
	WebApplicationFirewallTransformRemoveNulls      WebApplicationFirewallTransform = "RemoveNulls"
	WebApplicationFirewallTransformTrim             WebApplicationFirewallTransform = "Trim"
	WebApplicationFirewallTransformURLDecode        WebApplicationFirewallTransform = "UrlDecode"
	WebApplicationFirewallTransformURLEncode        WebApplicationFirewallTransform = "UrlEncode"
)

func PossibleWebApplicationFirewallTransformValues() []WebApplicationFirewallTransform {
	return []WebApplicationFirewallTransform{
		WebApplicationFirewallTransformHTMLEntityDecode,
		WebApplicationFirewallTransformLowercase,
		WebApplicationFirewallTransformRemoveNulls,
		WebApplicationFirewallTransformTrim,
		WebApplicationFirewallTransformURLDecode,
		WebApplicationFirewallTransformURLEncode,
	}
}

func (c WebApplicationFirewallTransform) ToPtr() *WebApplicationFirewallTransform {
	return &c
}
