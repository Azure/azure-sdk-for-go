// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationalinsights

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type ClustersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ClustersListByResourceGroupResponse.
	PageResponse() ClustersListByResourceGroupResponse
}

type clustersListByResourceGroupPager struct {
	client    *ClustersClient
	current   ClustersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ClustersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *clustersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *clustersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *clustersListByResourceGroupPager) PageResponse() ClustersListByResourceGroupResponse {
	return p.current
}

type ClustersListPager interface {
	azcore.Pager
	// PageResponse returns the current ClustersListResponse.
	PageResponse() ClustersListResponse
}

type clustersListPager struct {
	client    *ClustersClient
	current   ClustersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ClustersListResponse) (*azcore.Request, error)
}

func (p *clustersListPager) Err() error {
	return p.err
}

func (p *clustersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterListResult.NextLink == nil || len(*p.current.ClusterListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *clustersListPager) PageResponse() ClustersListResponse {
	return p.current
}

type DataSourcesListByWorkspacePager interface {
	azcore.Pager
	// PageResponse returns the current DataSourcesListByWorkspaceResponse.
	PageResponse() DataSourcesListByWorkspaceResponse
}

type dataSourcesListByWorkspacePager struct {
	client    *DataSourcesClient
	current   DataSourcesListByWorkspaceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DataSourcesListByWorkspaceResponse) (*azcore.Request, error)
}

func (p *dataSourcesListByWorkspacePager) Err() error {
	return p.err
}

func (p *dataSourcesListByWorkspacePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataSourceListResult.NextLink == nil || len(*p.current.DataSourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByWorkspaceHandleError(resp)
		return false
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataSourcesListByWorkspacePager) PageResponse() DataSourcesListByWorkspaceResponse {
	return p.current
}

type OperationsListPager interface {
	azcore.Pager
	// PageResponse returns the current OperationsListResponse.
	PageResponse() OperationsListResponse
}

type operationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*azcore.Request, error)
}

func (p *operationsListPager) Err() error {
	return p.err
}

func (p *operationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

type StorageInsightConfigsListByWorkspacePager interface {
	azcore.Pager
	// PageResponse returns the current StorageInsightConfigsListByWorkspaceResponse.
	PageResponse() StorageInsightConfigsListByWorkspaceResponse
}

type storageInsightConfigsListByWorkspacePager struct {
	client    *StorageInsightConfigsClient
	current   StorageInsightConfigsListByWorkspaceResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StorageInsightConfigsListByWorkspaceResponse) (*azcore.Request, error)
}

func (p *storageInsightConfigsListByWorkspacePager) Err() error {
	return p.err
}

func (p *storageInsightConfigsListByWorkspacePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageInsightListResult.OdataNextLink == nil || len(*p.current.StorageInsightListResult.OdataNextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByWorkspaceHandleError(resp)
		return false
	}
	result, err := p.client.listByWorkspaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *storageInsightConfigsListByWorkspacePager) PageResponse() StorageInsightConfigsListByWorkspaceResponse {
	return p.current
}
