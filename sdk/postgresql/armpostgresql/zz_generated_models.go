//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresql

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// CheckNameAvailabilityExecuteOptions contains the optional parameters for the CheckNameAvailability.Execute method.
type CheckNameAvailabilityExecuteOptions struct {
	// placeholder for future optional parameters
}

// CloudError - An error response from the Batch service.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
	// format.)
	InnerError *ErrorResponse `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// Configuration - Represents a Configuration.
type Configuration struct {
	ProxyResource
	// The properties of a configuration.
	Properties *ConfigurationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Configuration.
func (c Configuration) MarshalJSON() ([]byte, error) {
	objectMap := c.ProxyResource.marshalInternal()
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ConfigurationListResult - A list of server configurations.
type ConfigurationListResult struct {
	// The list of server configurations.
	Value []*Configuration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationListResult.
func (c ConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ConfigurationProperties - The properties of a configuration.
type ConfigurationProperties struct {
	// Source of the configuration.
	Source *string `json:"source,omitempty"`

	// Value of the configuration.
	Value *string `json:"value,omitempty"`

	// READ-ONLY; Allowed values of the configuration.
	AllowedValues *string `json:"allowedValues,omitempty" azure:"ro"`

	// READ-ONLY; Data type of the configuration.
	DataType *string `json:"dataType,omitempty" azure:"ro"`

	// READ-ONLY; Default value of the configuration.
	DefaultValue *string `json:"defaultValue,omitempty" azure:"ro"`

	// READ-ONLY; Description of the configuration.
	Description *string `json:"description,omitempty" azure:"ro"`
}

// ConfigurationsBeginCreateOrUpdateOptions contains the optional parameters for the Configurations.BeginCreateOrUpdate method.
type ConfigurationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ConfigurationsGetOptions contains the optional parameters for the Configurations.Get method.
type ConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// ConfigurationsListByServerOptions contains the optional parameters for the Configurations.ListByServer method.
type ConfigurationsListByServerOptions struct {
	// placeholder for future optional parameters
}

// Database - Represents a Database.
type Database struct {
	ProxyResource
	// The properties of a database.
	Properties *DatabaseProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Database.
func (d Database) MarshalJSON() ([]byte, error) {
	objectMap := d.ProxyResource.marshalInternal()
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DatabaseListResult - A List of databases.
type DatabaseListResult struct {
	// The list of databases housed in a server
	Value []*Database `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseListResult.
func (d DatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DatabaseProperties - The properties of a database.
type DatabaseProperties struct {
	// The charset of the database.
	Charset *string `json:"charset,omitempty"`

	// The collation of the database.
	Collation *string `json:"collation,omitempty"`
}

// DatabasesBeginCreateOrUpdateOptions contains the optional parameters for the Databases.BeginCreateOrUpdate method.
type DatabasesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DatabasesBeginDeleteOptions contains the optional parameters for the Databases.BeginDelete method.
type DatabasesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DatabasesGetOptions contains the optional parameters for the Databases.Get method.
type DatabasesGetOptions struct {
	// placeholder for future optional parameters
}

// DatabasesListByServerOptions contains the optional parameters for the Databases.ListByServer method.
type DatabasesListByServerOptions struct {
	// placeholder for future optional parameters
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.)
type ErrorResponse struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorResponse `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponse.
func (e ErrorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// FirewallRule - Represents a server firewall rule.
type FirewallRule struct {
	ProxyResource
	// REQUIRED; The properties of a firewall rule.
	Properties *FirewallRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRule.
func (f FirewallRule) MarshalJSON() ([]byte, error) {
	objectMap := f.ProxyResource.marshalInternal()
	populate(objectMap, "properties", f.Properties)
	return json.Marshal(objectMap)
}

// FirewallRuleListResult - A list of firewall rules.
type FirewallRuleListResult struct {
	// The list of firewall rules in a server.
	Value []*FirewallRule `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRuleListResult.
func (f FirewallRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FirewallRuleProperties - The properties of a server firewall rule.
type FirewallRuleProperties struct {
	// REQUIRED; The end IP address of the server firewall rule. Must be IPv4 format.
	EndIPAddress *string `json:"endIpAddress,omitempty"`

	// REQUIRED; The start IP address of the server firewall rule. Must be IPv4 format.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
}

// FirewallRulesBeginCreateOrUpdateOptions contains the optional parameters for the FirewallRules.BeginCreateOrUpdate method.
type FirewallRulesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesBeginDeleteOptions contains the optional parameters for the FirewallRules.BeginDelete method.
type FirewallRulesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesGetOptions contains the optional parameters for the FirewallRules.Get method.
type FirewallRulesGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesListByServerOptions contains the optional parameters for the FirewallRules.ListByServer method.
type FirewallRulesListByServerOptions struct {
	// placeholder for future optional parameters
}

// LocationBasedPerformanceTierListOptions contains the optional parameters for the LocationBasedPerformanceTier.List method.
type LocationBasedPerformanceTierListOptions struct {
	// placeholder for future optional parameters
}

// LogFile - Represents a log file.
type LogFile struct {
	ProxyResource
	// The properties of the log file.
	Properties *LogFileProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LogFile.
func (l LogFile) MarshalJSON() ([]byte, error) {
	objectMap := l.ProxyResource.marshalInternal()
	populate(objectMap, "properties", l.Properties)
	return json.Marshal(objectMap)
}

// LogFileListResult - A list of log files.
type LogFileListResult struct {
	// The list of log files.
	Value []*LogFile `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LogFileListResult.
func (l LogFileListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LogFileProperties - The properties of a log file.
type LogFileProperties struct {
	// Size of the log file.
	SizeInKB *int64 `json:"sizeInKB,omitempty"`

	// Type of the log file.
	Type *string `json:"type,omitempty"`

	// The url to download the log file from.
	URL *string `json:"url,omitempty"`

	// READ-ONLY; Creation timestamp of the log file.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Last modified timestamp of the log file.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LogFileProperties.
func (l LogFileProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdTime", (*timeRFC3339)(l.CreatedTime))
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(l.LastModifiedTime))
	populate(objectMap, "sizeInKB", l.SizeInKB)
	populate(objectMap, "type", l.Type)
	populate(objectMap, "url", l.URL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LogFileProperties.
func (l *LogFileProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "sizeInKB":
			err = unpopulate(val, &l.SizeInKB)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &l.Type)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, &l.URL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LogFilesListByServerOptions contains the optional parameters for the LogFiles.ListByServer method.
type LogFilesListByServerOptions struct {
	// placeholder for future optional parameters
}

// NameAvailability - Represents a resource name availability.
type NameAvailability struct {
	// Error Message.
	Message *string `json:"message,omitempty"`

	// Indicates whether the resource name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Reason for name being unavailable.
	Reason *string `json:"reason,omitempty"`
}

// NameAvailabilityRequest - Request from client to check resource name availability.
type NameAvailabilityRequest struct {
	// REQUIRED; Resource name to verify.
	Name *string `json:"name,omitempty"`

	// Resource type used for verification.
	Type *string `json:"type,omitempty"`
}

// Operation - REST API operation definition.
type Operation struct {
	// READ-ONLY; The localized display information for this particular operation or action.
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation being performed on this particular object.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation.
	Origin *OperationOrigin `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; Additional descriptions for the operation.
	Properties map[string]map[string]interface{} `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "display", o.Display)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	populate(objectMap, "properties", o.Properties)
	return json.Marshal(objectMap)
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// READ-ONLY; Operation description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Localized friendly name for the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Operation resource provider name.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of resource provider operations.
type OperationListResult struct {
	// The list of resource provider operations.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PerformanceTierListResult - A list of performance tiers.
type PerformanceTierListResult struct {
	// The list of performance tiers
	Value []*PerformanceTierProperties `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PerformanceTierListResult.
func (p PerformanceTierListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PerformanceTierProperties - Performance tier properties
type PerformanceTierProperties struct {
	// ID of the performance tier.
	ID *string `json:"id,omitempty"`

	// Maximum Backup retention in days for the performance tier edition
	MaxBackupRetentionDays *int32 `json:"maxBackupRetentionDays,omitempty"`

	// Max storage allowed for a server.
	MaxLargeStorageMB *int32 `json:"maxLargeStorageMB,omitempty"`

	// Max storage allowed for a server.
	MaxStorageMB *int32 `json:"maxStorageMB,omitempty"`

	// Minimum Backup retention in days for the performance tier edition
	MinBackupRetentionDays *int32 `json:"minBackupRetentionDays,omitempty"`

	// Max storage allowed for a server.
	MinLargeStorageMB *int32 `json:"minLargeStorageMB,omitempty"`

	// Max storage allowed for a server.
	MinStorageMB *int32 `json:"minStorageMB,omitempty"`

	// Service level objectives associated with the performance tier
	ServiceLevelObjectives []*PerformanceTierServiceLevelObjectives `json:"serviceLevelObjectives,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PerformanceTierProperties.
func (p PerformanceTierProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "maxBackupRetentionDays", p.MaxBackupRetentionDays)
	populate(objectMap, "maxLargeStorageMB", p.MaxLargeStorageMB)
	populate(objectMap, "maxStorageMB", p.MaxStorageMB)
	populate(objectMap, "minBackupRetentionDays", p.MinBackupRetentionDays)
	populate(objectMap, "minLargeStorageMB", p.MinLargeStorageMB)
	populate(objectMap, "minStorageMB", p.MinStorageMB)
	populate(objectMap, "serviceLevelObjectives", p.ServiceLevelObjectives)
	return json.Marshal(objectMap)
}

// PerformanceTierServiceLevelObjectives - Service level objectives for performance tier.
type PerformanceTierServiceLevelObjectives struct {
	// Edition of the performance tier.
	Edition *string `json:"edition,omitempty"`

	// Hardware generation associated with the service level objective
	HardwareGeneration *string `json:"hardwareGeneration,omitempty"`

	// ID for the service level objective.
	ID *string `json:"id,omitempty"`

	// Maximum Backup retention in days for the performance tier edition
	MaxBackupRetentionDays *int32 `json:"maxBackupRetentionDays,omitempty"`

	// Max storage allowed for a server.
	MaxStorageMB *int32 `json:"maxStorageMB,omitempty"`

	// Minimum Backup retention in days for the performance tier edition
	MinBackupRetentionDays *int32 `json:"minBackupRetentionDays,omitempty"`

	// Max storage allowed for a server.
	MinStorageMB *int32 `json:"minStorageMB,omitempty"`

	// vCore associated with the service level objective
	VCore *int32 `json:"vCore,omitempty"`
}

// PrivateEndpointConnection - A private endpoint connection
type PrivateEndpointConnection struct {
	ProxyResource
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnection.
func (p PrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := p.ProxyResource.marshalInternal()
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionListResult - A list of private endpoint connections.
type PrivateEndpointConnectionListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*PrivateEndpointConnection `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of a private endpoint connection.
type PrivateEndpointConnectionProperties struct {
	// Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty `json:"privateEndpoint,omitempty"`

	// Connection state of the private endpoint connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateProperty `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; State of the private endpoint connection.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnections.BeginCreateOrUpdate method.
type PrivateEndpointConnectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnections.BeginDelete method.
type PrivateEndpointConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsBeginUpdateTagsOptions contains the optional parameters for the PrivateEndpointConnections.BeginUpdateTags method.
type PrivateEndpointConnectionsBeginUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListByServerOptions contains the optional parameters for the PrivateEndpointConnections.ListByServer method.
type PrivateEndpointConnectionsListByServerOptions struct {
	// placeholder for future optional parameters
}

type PrivateEndpointProperty struct {
	// Resource id of the private endpoint.
	ID *string `json:"id,omitempty"`
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	ProxyResource
	// READ-ONLY; The private link resource group id.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResource.
func (p PrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := p.ProxyResource.marshalInternal()
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*PrivateLinkResource `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesGetOptions contains the optional parameters for the PrivateLinkResources.Get method.
type PrivateLinkResourcesGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesListByServerOptions contains the optional parameters for the PrivateLinkResources.ListByServer method.
type PrivateLinkResourcesListByServerOptions struct {
	// placeholder for future optional parameters
}

type PrivateLinkServiceConnectionStateProperty struct {
	// REQUIRED; The private link service connection description.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The private link service connection status.
	Status *string `json:"status,omitempty"`

	// READ-ONLY; The actions required for private link service connection.
	ActionsRequired *string `json:"actionsRequired,omitempty" azure:"ro"`
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal() map[string]interface{} {
	objectMap := p.Resource.marshalInternal()
	return objectMap
}

// RecoverableServerProperties - The recoverable server's properties.
type RecoverableServerProperties struct {
	// READ-ONLY; Edition of the performance tier.
	Edition *string `json:"edition,omitempty" azure:"ro"`

	// READ-ONLY; Hardware generation associated with the service level objective
	HardwareGeneration *string `json:"hardwareGeneration,omitempty" azure:"ro"`

	// READ-ONLY; The last available backup date time.
	LastAvailableBackupDateTime *string `json:"lastAvailableBackupDateTime,omitempty" azure:"ro"`

	// READ-ONLY; The service level objective
	ServiceLevelObjective *string `json:"serviceLevelObjective,omitempty" azure:"ro"`

	// READ-ONLY; vCore associated with the service level objective
	VCore *int32 `json:"vCore,omitempty" azure:"ro"`

	// READ-ONLY; The PostgreSQL version
	Version *string `json:"version,omitempty" azure:"ro"`
}

// RecoverableServerResource - A recoverable server resource.
type RecoverableServerResource struct {
	ProxyResource
	// Resource properties.
	Properties *RecoverableServerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RecoverableServerResource.
func (r RecoverableServerResource) MarshalJSON() ([]byte, error) {
	objectMap := r.ProxyResource.marshalInternal()
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RecoverableServersGetOptions contains the optional parameters for the RecoverableServers.Get method.
type RecoverableServersGetOptions struct {
	// placeholder for future optional parameters
}

// ReplicasListByServerOptions contains the optional parameters for the Replicas.ListByServer method.
type ReplicasListByServerOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return objectMap
}

// ResourceIdentity - Azure Active Directory identity configuration for a resource.
type ResourceIdentity struct {
	// The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
	Type *IdentityType `json:"type,omitempty"`

	// READ-ONLY; The Azure Active Directory principal id.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The Azure Active Directory tenant id.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// SKU - Billing information related properties of a server.
type SKU struct {
	// REQUIRED; The name of the sku, typically, tier + family + cores, e.g. BGen41, GPGen58.
	Name *string `json:"name,omitempty"`

	// The scale up/out capacity, representing server's compute units.
	Capacity *int32 `json:"capacity,omitempty"`

	// The family of hardware.
	Family *string `json:"family,omitempty"`

	// The size code, to be interpreted by resource as appropriate.
	Size *string `json:"size,omitempty"`

	// The tier of the particular SKU, e.g. Basic.
	Tier *SKUTier `json:"tier,omitempty"`
}

// SecurityAlertPolicyProperties - Properties of a security alert policy.
type SecurityAlertPolicyProperties struct {
	// REQUIRED; Specifies the state of the policy, whether it is enabled or disabled.
	State *ServerSecurityAlertPolicyState `json:"state,omitempty"`

	// Specifies an array of alerts that are disabled. Allowed values are: SqlInjection, SqlInjectionVulnerability, AccessAnomaly
	DisabledAlerts []*string `json:"disabledAlerts,omitempty"`

	// Specifies that the alert is sent to the account administrators.
	EmailAccountAdmins *bool `json:"emailAccountAdmins,omitempty"`

	// Specifies an array of e-mail addresses to which the alert is sent.
	EmailAddresses []*string `json:"emailAddresses,omitempty"`

	// Specifies the number of days to keep in the Threat Detection audit logs.
	RetentionDays *int32 `json:"retentionDays,omitempty"`

	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey *string `json:"storageAccountAccessKey,omitempty"`

	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `json:"storageEndpoint,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SecurityAlertPolicyProperties.
func (s SecurityAlertPolicyProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disabledAlerts", s.DisabledAlerts)
	populate(objectMap, "emailAccountAdmins", s.EmailAccountAdmins)
	populate(objectMap, "emailAddresses", s.EmailAddresses)
	populate(objectMap, "retentionDays", s.RetentionDays)
	populate(objectMap, "state", s.State)
	populate(objectMap, "storageAccountAccessKey", s.StorageAccountAccessKey)
	populate(objectMap, "storageEndpoint", s.StorageEndpoint)
	return json.Marshal(objectMap)
}

// Server - Represents a server.
type Server struct {
	TrackedResource
	// The Azure Active Directory identity of the server.
	Identity *ResourceIdentity `json:"identity,omitempty"`

	// Properties of the server.
	Properties *ServerProperties `json:"properties,omitempty"`

	// The SKU (pricing tier) of the server.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Server.
func (s Server) MarshalJSON() ([]byte, error) {
	objectMap := s.TrackedResource.marshalInternal()
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	return json.Marshal(objectMap)
}

// ServerAdministratorProperties - The properties of an server Administrator.
type ServerAdministratorProperties struct {
	// REQUIRED; The type of administrator.
	AdministratorType *string `json:"administratorType,omitempty"`

	// REQUIRED; The server administrator login account name.
	Login *string `json:"login,omitempty"`

	// REQUIRED; The server administrator Sid (Secure ID).
	Sid *string `json:"sid,omitempty"`

	// REQUIRED; The server Active Directory Administrator tenant id.
	TenantID *string `json:"tenantId,omitempty"`
}

// ServerAdministratorResource - Represents a and external administrator to be created.
type ServerAdministratorResource struct {
	ProxyResource
	// Properties of the server AAD administrator.
	Properties *ServerAdministratorProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerAdministratorResource.
func (s ServerAdministratorResource) MarshalJSON() ([]byte, error) {
	objectMap := s.ProxyResource.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// ServerAdministratorResourceListResult - The response to a list Active Directory Administrators request.
type ServerAdministratorResourceListResult struct {
	// The list of server Active Directory Administrators for the server.
	Value []*ServerAdministratorResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerAdministratorResourceListResult.
func (s ServerAdministratorResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerAdministratorsBeginCreateOrUpdateOptions contains the optional parameters for the ServerAdministrators.BeginCreateOrUpdate method.
type ServerAdministratorsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServerAdministratorsBeginDeleteOptions contains the optional parameters for the ServerAdministrators.BeginDelete method.
type ServerAdministratorsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServerAdministratorsGetOptions contains the optional parameters for the ServerAdministrators.Get method.
type ServerAdministratorsGetOptions struct {
	// placeholder for future optional parameters
}

// ServerAdministratorsListOptions contains the optional parameters for the ServerAdministrators.List method.
type ServerAdministratorsListOptions struct {
	// placeholder for future optional parameters
}

// ServerBasedPerformanceTierListOptions contains the optional parameters for the ServerBasedPerformanceTier.List method.
type ServerBasedPerformanceTierListOptions struct {
	// placeholder for future optional parameters
}

// ServerForCreate - Represents a server to be created.
type ServerForCreate struct {
	// REQUIRED; The location the resource resides in.
	Location *string `json:"location,omitempty"`

	// REQUIRED; Properties of the server.
	Properties ServerPropertiesForCreateClassification `json:"properties,omitempty"`

	// The Azure Active Directory identity of the server.
	Identity *ResourceIdentity `json:"identity,omitempty"`

	// The SKU (pricing tier) of the server.
	SKU *SKU `json:"sku,omitempty"`

	// Application-specific metadata in the form of key-value pairs.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerForCreate.
func (s ServerForCreate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerForCreate.
func (s *ServerForCreate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			err = unpopulate(val, &s.Identity)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &s.Location)
			delete(rawMsg, key)
		case "properties":
			s.Properties, err = unmarshalServerPropertiesForCreateClassification(val)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &s.SKU)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &s.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ServerKey - A PostgreSQL Server key.
type ServerKey struct {
	ProxyResource
	// Properties of the ServerKey Resource.
	Properties *ServerKeyProperties `json:"properties,omitempty"`

	// READ-ONLY; Kind of encryption protector used to protect the key.
	Kind *string `json:"kind,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerKey.
func (s ServerKey) MarshalJSON() ([]byte, error) {
	objectMap := s.ProxyResource.marshalInternal()
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// ServerKeyListResult - A list of PostgreSQL Server keys.
type ServerKeyListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; A list of PostgreSQL Server keys.
	Value []*ServerKey `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerKeyListResult.
func (s ServerKeyListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerKeyProperties - Properties for a key execution.
type ServerKeyProperties struct {
	// REQUIRED; The key type like 'AzureKeyVault'.
	ServerKeyType *ServerKeyType `json:"serverKeyType,omitempty"`

	// The URI of the key.
	URI *string `json:"uri,omitempty"`

	// READ-ONLY; The key creation date.
	CreationDate *time.Time `json:"creationDate,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerKeyProperties.
func (s ServerKeyProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationDate", (*timeRFC3339)(s.CreationDate))
	populate(objectMap, "serverKeyType", s.ServerKeyType)
	populate(objectMap, "uri", s.URI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerKeyProperties.
func (s *ServerKeyProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "serverKeyType":
			err = unpopulate(val, &s.ServerKeyType)
			delete(rawMsg, key)
		case "uri":
			err = unpopulate(val, &s.URI)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ServerKeysBeginCreateOrUpdateOptions contains the optional parameters for the ServerKeys.BeginCreateOrUpdate method.
type ServerKeysBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServerKeysBeginDeleteOptions contains the optional parameters for the ServerKeys.BeginDelete method.
type ServerKeysBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServerKeysGetOptions contains the optional parameters for the ServerKeys.Get method.
type ServerKeysGetOptions struct {
	// placeholder for future optional parameters
}

// ServerKeysListOptions contains the optional parameters for the ServerKeys.List method.
type ServerKeysListOptions struct {
	// placeholder for future optional parameters
}

// ServerListResult - A list of servers.
type ServerListResult struct {
	// The list of servers
	Value []*Server `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerListResult.
func (s ServerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerParametersBeginListUpdateConfigurationsOptions contains the optional parameters for the ServerParameters.BeginListUpdateConfigurations method.
type ServerParametersBeginListUpdateConfigurationsOptions struct {
	// placeholder for future optional parameters
}

// ServerPrivateEndpointConnection - A private endpoint connection under a server
type ServerPrivateEndpointConnection struct {
	// READ-ONLY; Resource ID of the Private Endpoint Connection.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Private endpoint connection properties
	Properties *ServerPrivateEndpointConnectionProperties `json:"properties,omitempty" azure:"ro"`
}

// ServerPrivateEndpointConnectionProperties - Properties of a private endpoint connection.
type ServerPrivateEndpointConnectionProperties struct {
	// Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty `json:"privateEndpoint,omitempty"`

	// Connection state of the private endpoint connection.
	PrivateLinkServiceConnectionState *ServerPrivateLinkServiceConnectionStateProperty `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; State of the private endpoint connection.
	ProvisioningState *PrivateEndpointProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

type ServerPrivateLinkServiceConnectionStateProperty struct {
	// REQUIRED; The private link service connection description.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The private link service connection status.
	Status *PrivateLinkServiceConnectionStateStatus `json:"status,omitempty"`

	// READ-ONLY; The actions required for private link service connection.
	ActionsRequired *PrivateLinkServiceConnectionStateActionsRequire `json:"actionsRequired,omitempty" azure:"ro"`
}

// ServerProperties - The properties of a server.
type ServerProperties struct {
	// The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// Earliest restore point creation time (ISO8601 format)
	EarliestRestoreDate *time.Time `json:"earliestRestoreDate,omitempty"`

	// The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	// Status showing whether the server enabled infrastructure encryption.
	InfrastructureEncryption *InfrastructureEncryption `json:"infrastructureEncryption,omitempty"`

	// The master server id of a replica server.
	MasterServerID *string `json:"masterServerId,omitempty"`

	// Enforce a minimal Tls version for the server.
	MinimalTLSVersion *MinimalTLSVersionEnum `json:"minimalTlsVersion,omitempty"`

	// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *PublicNetworkAccessEnum `json:"publicNetworkAccess,omitempty"`

	// The maximum number of replicas that a master server can have.
	ReplicaCapacity *int32 `json:"replicaCapacity,omitempty"`

	// The replication role of the server.
	ReplicationRole *string `json:"replicationRole,omitempty"`

	// Enable ssl enforcement or not when connect to server.
	SSLEnforcement *SSLEnforcementEnum `json:"sslEnforcement,omitempty"`

	// Storage profile of a server.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// A state of a server that is visible to user.
	UserVisibleState *ServerState `json:"userVisibleState,omitempty"`

	// Server version.
	Version *ServerVersion `json:"version,omitempty"`

	// READ-ONLY; Status showing whether the server data encryption is enabled with customer-managed keys.
	ByokEnforcement *string `json:"byokEnforcement,omitempty" azure:"ro"`

	// READ-ONLY; List of private endpoint connections on a server
	PrivateEndpointConnections []*ServerPrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerProperties.
func (s ServerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "administratorLogin", s.AdministratorLogin)
	populate(objectMap, "byokEnforcement", s.ByokEnforcement)
	populate(objectMap, "earliestRestoreDate", (*timeRFC3339)(s.EarliestRestoreDate))
	populate(objectMap, "fullyQualifiedDomainName", s.FullyQualifiedDomainName)
	populate(objectMap, "infrastructureEncryption", s.InfrastructureEncryption)
	populate(objectMap, "masterServerId", s.MasterServerID)
	populate(objectMap, "minimalTlsVersion", s.MinimalTLSVersion)
	populate(objectMap, "privateEndpointConnections", s.PrivateEndpointConnections)
	populate(objectMap, "publicNetworkAccess", s.PublicNetworkAccess)
	populate(objectMap, "replicaCapacity", s.ReplicaCapacity)
	populate(objectMap, "replicationRole", s.ReplicationRole)
	populate(objectMap, "sslEnforcement", s.SSLEnforcement)
	populate(objectMap, "storageProfile", s.StorageProfile)
	populate(objectMap, "userVisibleState", s.UserVisibleState)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerProperties.
func (s *ServerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "administratorLogin":
			err = unpopulate(val, &s.AdministratorLogin)
			delete(rawMsg, key)
		case "byokEnforcement":
			err = unpopulate(val, &s.ByokEnforcement)
			delete(rawMsg, key)
		case "earliestRestoreDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.EarliestRestoreDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "fullyQualifiedDomainName":
			err = unpopulate(val, &s.FullyQualifiedDomainName)
			delete(rawMsg, key)
		case "infrastructureEncryption":
			err = unpopulate(val, &s.InfrastructureEncryption)
			delete(rawMsg, key)
		case "masterServerId":
			err = unpopulate(val, &s.MasterServerID)
			delete(rawMsg, key)
		case "minimalTlsVersion":
			err = unpopulate(val, &s.MinimalTLSVersion)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &s.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &s.PublicNetworkAccess)
			delete(rawMsg, key)
		case "replicaCapacity":
			err = unpopulate(val, &s.ReplicaCapacity)
			delete(rawMsg, key)
		case "replicationRole":
			err = unpopulate(val, &s.ReplicationRole)
			delete(rawMsg, key)
		case "sslEnforcement":
			err = unpopulate(val, &s.SSLEnforcement)
			delete(rawMsg, key)
		case "storageProfile":
			err = unpopulate(val, &s.StorageProfile)
			delete(rawMsg, key)
		case "userVisibleState":
			err = unpopulate(val, &s.UserVisibleState)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ServerPropertiesForCreateClassification provides polymorphic access to related types.
// Call the interface's GetServerPropertiesForCreate() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ServerPropertiesForCreate, *ServerPropertiesForDefaultCreate, *ServerPropertiesForGeoRestore, *ServerPropertiesForReplica,
// - *ServerPropertiesForRestore
type ServerPropertiesForCreateClassification interface {
	// GetServerPropertiesForCreate returns the ServerPropertiesForCreate content of the underlying type.
	GetServerPropertiesForCreate() *ServerPropertiesForCreate
}

// ServerPropertiesForCreate - The properties used to create a new server.
type ServerPropertiesForCreate struct {
	// REQUIRED; The mode to create a new server.
	CreateMode *CreateMode `json:"createMode,omitempty"`

	// Status showing whether the server enabled infrastructure encryption.
	InfrastructureEncryption *InfrastructureEncryption `json:"infrastructureEncryption,omitempty"`

	// Enforce a minimal Tls version for the server.
	MinimalTLSVersion *MinimalTLSVersionEnum `json:"minimalTlsVersion,omitempty"`

	// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *PublicNetworkAccessEnum `json:"publicNetworkAccess,omitempty"`

	// Enable ssl enforcement or not when connect to server.
	SSLEnforcement *SSLEnforcementEnum `json:"sslEnforcement,omitempty"`

	// Storage profile of a server.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// Server version.
	Version *ServerVersion `json:"version,omitempty"`
}

// GetServerPropertiesForCreate implements the ServerPropertiesForCreateClassification interface for type ServerPropertiesForCreate.
func (s *ServerPropertiesForCreate) GetServerPropertiesForCreate() *ServerPropertiesForCreate {
	return s
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerPropertiesForCreate.
func (s *ServerPropertiesForCreate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return s.unmarshalInternal(rawMsg)
}

func (s ServerPropertiesForCreate) marshalInternal(discValue CreateMode) map[string]interface{} {
	objectMap := make(map[string]interface{})
	s.CreateMode = &discValue
	objectMap["createMode"] = s.CreateMode
	populate(objectMap, "infrastructureEncryption", s.InfrastructureEncryption)
	populate(objectMap, "minimalTlsVersion", s.MinimalTLSVersion)
	populate(objectMap, "publicNetworkAccess", s.PublicNetworkAccess)
	populate(objectMap, "sslEnforcement", s.SSLEnforcement)
	populate(objectMap, "storageProfile", s.StorageProfile)
	populate(objectMap, "version", s.Version)
	return objectMap
}

func (s *ServerPropertiesForCreate) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createMode":
			err = unpopulate(val, &s.CreateMode)
			delete(rawMsg, key)
		case "infrastructureEncryption":
			err = unpopulate(val, &s.InfrastructureEncryption)
			delete(rawMsg, key)
		case "minimalTlsVersion":
			err = unpopulate(val, &s.MinimalTLSVersion)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &s.PublicNetworkAccess)
			delete(rawMsg, key)
		case "sslEnforcement":
			err = unpopulate(val, &s.SSLEnforcement)
			delete(rawMsg, key)
		case "storageProfile":
			err = unpopulate(val, &s.StorageProfile)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ServerPropertiesForDefaultCreate - The properties used to create a new server.
type ServerPropertiesForDefaultCreate struct {
	ServerPropertiesForCreate
	// REQUIRED; The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// REQUIRED; The password of the administrator login.
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerPropertiesForDefaultCreate.
func (s ServerPropertiesForDefaultCreate) MarshalJSON() ([]byte, error) {
	objectMap := s.ServerPropertiesForCreate.marshalInternal(CreateModeDefault)
	populate(objectMap, "administratorLogin", s.AdministratorLogin)
	populate(objectMap, "administratorLoginPassword", s.AdministratorLoginPassword)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerPropertiesForDefaultCreate.
func (s *ServerPropertiesForDefaultCreate) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "administratorLogin":
			err = unpopulate(val, &s.AdministratorLogin)
			delete(rawMsg, key)
		case "administratorLoginPassword":
			err = unpopulate(val, &s.AdministratorLoginPassword)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return s.ServerPropertiesForCreate.unmarshalInternal(rawMsg)
}

// ServerPropertiesForGeoRestore - The properties used to create a new server by restoring to a different region from a geo replicated backup.
type ServerPropertiesForGeoRestore struct {
	ServerPropertiesForCreate
	// REQUIRED; The source server id to restore from.
	SourceServerID *string `json:"sourceServerId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerPropertiesForGeoRestore.
func (s ServerPropertiesForGeoRestore) MarshalJSON() ([]byte, error) {
	objectMap := s.ServerPropertiesForCreate.marshalInternal(CreateModeGeoRestore)
	populate(objectMap, "sourceServerId", s.SourceServerID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerPropertiesForGeoRestore.
func (s *ServerPropertiesForGeoRestore) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sourceServerId":
			err = unpopulate(val, &s.SourceServerID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return s.ServerPropertiesForCreate.unmarshalInternal(rawMsg)
}

// ServerPropertiesForReplica - The properties to create a new replica.
type ServerPropertiesForReplica struct {
	ServerPropertiesForCreate
	// REQUIRED; The master server id to create replica from.
	SourceServerID *string `json:"sourceServerId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerPropertiesForReplica.
func (s ServerPropertiesForReplica) MarshalJSON() ([]byte, error) {
	objectMap := s.ServerPropertiesForCreate.marshalInternal(CreateModeReplica)
	populate(objectMap, "sourceServerId", s.SourceServerID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerPropertiesForReplica.
func (s *ServerPropertiesForReplica) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sourceServerId":
			err = unpopulate(val, &s.SourceServerID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return s.ServerPropertiesForCreate.unmarshalInternal(rawMsg)
}

// ServerPropertiesForRestore - The properties used to create a new server by restoring from a backup.
type ServerPropertiesForRestore struct {
	ServerPropertiesForCreate
	// REQUIRED; Restore point creation time (ISO8601 format), specifying the time to restore from.
	RestorePointInTime *time.Time `json:"restorePointInTime,omitempty"`

	// REQUIRED; The source server id to restore from.
	SourceServerID *string `json:"sourceServerId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerPropertiesForRestore.
func (s ServerPropertiesForRestore) MarshalJSON() ([]byte, error) {
	objectMap := s.ServerPropertiesForCreate.marshalInternal(CreateModePointInTimeRestore)
	populate(objectMap, "restorePointInTime", (*timeRFC3339)(s.RestorePointInTime))
	populate(objectMap, "sourceServerId", s.SourceServerID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerPropertiesForRestore.
func (s *ServerPropertiesForRestore) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "restorePointInTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.RestorePointInTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "sourceServerId":
			err = unpopulate(val, &s.SourceServerID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return s.ServerPropertiesForCreate.unmarshalInternal(rawMsg)
}

// ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions contains the optional parameters for the ServerSecurityAlertPolicies.BeginCreateOrUpdate method.
type ServerSecurityAlertPoliciesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServerSecurityAlertPoliciesGetOptions contains the optional parameters for the ServerSecurityAlertPolicies.Get method.
type ServerSecurityAlertPoliciesGetOptions struct {
	// placeholder for future optional parameters
}

// ServerSecurityAlertPoliciesListByServerOptions contains the optional parameters for the ServerSecurityAlertPolicies.ListByServer method.
type ServerSecurityAlertPoliciesListByServerOptions struct {
	// placeholder for future optional parameters
}

// ServerSecurityAlertPolicy - A server security alert policy.
type ServerSecurityAlertPolicy struct {
	ProxyResource
	// Resource properties.
	Properties *SecurityAlertPolicyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerSecurityAlertPolicy.
func (s ServerSecurityAlertPolicy) MarshalJSON() ([]byte, error) {
	objectMap := s.ProxyResource.marshalInternal()
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// ServerSecurityAlertPolicyListResult - A list of the server's security alert policies.
type ServerSecurityAlertPolicyListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*ServerSecurityAlertPolicy `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerSecurityAlertPolicyListResult.
func (s ServerSecurityAlertPolicyListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerUpdateParameters - Parameters allowed to update for a server.
type ServerUpdateParameters struct {
	// The Azure Active Directory identity of the server.
	Identity *ResourceIdentity `json:"identity,omitempty"`

	// The properties that can be updated for a server.
	Properties *ServerUpdateParametersProperties `json:"properties,omitempty"`

	// The SKU (pricing tier) of the server.
	SKU *SKU `json:"sku,omitempty"`

	// Application-specific metadata in the form of key-value pairs.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerUpdateParameters.
func (s ServerUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// ServerUpdateParametersProperties - The properties that can be updated for a server.
type ServerUpdateParametersProperties struct {
	// The password of the administrator login.
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Enforce a minimal Tls version for the server.
	MinimalTLSVersion *MinimalTLSVersionEnum `json:"minimalTlsVersion,omitempty"`

	// Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
	PublicNetworkAccess *PublicNetworkAccessEnum `json:"publicNetworkAccess,omitempty"`

	// The replication role of the server.
	ReplicationRole *string `json:"replicationRole,omitempty"`

	// Enable ssl enforcement or not when connect to server.
	SSLEnforcement *SSLEnforcementEnum `json:"sslEnforcement,omitempty"`

	// Storage profile of a server.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// The version of a server.
	Version *ServerVersion `json:"version,omitempty"`
}

// ServersBeginCreateOptions contains the optional parameters for the Servers.BeginCreate method.
type ServersBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// ServersBeginDeleteOptions contains the optional parameters for the Servers.BeginDelete method.
type ServersBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServersBeginRestartOptions contains the optional parameters for the Servers.BeginRestart method.
type ServersBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// ServersBeginUpdateOptions contains the optional parameters for the Servers.BeginUpdate method.
type ServersBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServersGetOptions contains the optional parameters for the Servers.Get method.
type ServersGetOptions struct {
	// placeholder for future optional parameters
}

// ServersListByResourceGroupOptions contains the optional parameters for the Servers.ListByResourceGroup method.
type ServersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ServersListOptions contains the optional parameters for the Servers.List method.
type ServersListOptions struct {
	// placeholder for future optional parameters
}

// StorageProfile - Storage Profile properties of a server
type StorageProfile struct {
	// Backup retention days for the server.
	BackupRetentionDays *int32 `json:"backupRetentionDays,omitempty"`

	// Enable Geo-redundant or not for server backup.
	GeoRedundantBackup *GeoRedundantBackup `json:"geoRedundantBackup,omitempty"`

	// Enable Storage Auto Grow.
	StorageAutogrow *StorageAutogrow `json:"storageAutogrow,omitempty"`

	// Max storage allowed for a server.
	StorageMB *int32 `json:"storageMB,omitempty"`
}

// TagsObject - Tags object for patch operations.
type TagsObject struct {
	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TagsObject.
func (t TagsObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", t.Tags)
	return json.Marshal(objectMap)
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := t.marshalInternal()
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal() map[string]interface{} {
	objectMap := t.Resource.marshalInternal()
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
	return objectMap
}

// VirtualNetworkRule - A virtual network rule.
type VirtualNetworkRule struct {
	ProxyResource
	// Resource properties.
	Properties *VirtualNetworkRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkRule.
func (v VirtualNetworkRule) MarshalJSON() ([]byte, error) {
	objectMap := v.ProxyResource.marshalInternal()
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VirtualNetworkRuleListResult - A list of virtual network rules.
type VirtualNetworkRuleListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*VirtualNetworkRule `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkRuleListResult.
func (v VirtualNetworkRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VirtualNetworkRuleProperties - Properties of a virtual network rule.
type VirtualNetworkRuleProperties struct {
	// REQUIRED; The ARM resource id of the virtual network subnet.
	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty"`

	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint *bool `json:"ignoreMissingVnetServiceEndpoint,omitempty"`

	// READ-ONLY; Virtual Network Rule State
	State *VirtualNetworkRuleState `json:"state,omitempty" azure:"ro"`
}

// VirtualNetworkRulesBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkRules.BeginCreateOrUpdate method.
type VirtualNetworkRulesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesBeginDeleteOptions contains the optional parameters for the VirtualNetworkRules.BeginDelete method.
type VirtualNetworkRulesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesGetOptions contains the optional parameters for the VirtualNetworkRules.Get method.
type VirtualNetworkRulesGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesListByServerOptions contains the optional parameters for the VirtualNetworkRules.ListByServer method.
type VirtualNetworkRulesListByServerOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
