// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresql

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type PrivateEndpointConnectionsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateEndpointConnectionsListByServerResponse.
	PageResponse() PrivateEndpointConnectionsListByServerResponse
}

type privateEndpointConnectionsListByServerPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsListByServerResponse) (*azcore.Request, error)
}

func (p *privateEndpointConnectionsListByServerPager) Err() error {
	return p.err
}

func (p *privateEndpointConnectionsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateEndpointConnectionsListByServerPager) PageResponse() PrivateEndpointConnectionsListByServerResponse {
	return p.current
}

type PrivateLinkResourcesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current PrivateLinkResourcesListByServerResponse.
	PageResponse() PrivateLinkResourcesListByServerResponse
}

type privateLinkResourcesListByServerPager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListByServerResponse) (*azcore.Request, error)
}

func (p *privateLinkResourcesListByServerPager) Err() error {
	return p.err
}

func (p *privateLinkResourcesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateLinkResourcesListByServerPager) PageResponse() PrivateLinkResourcesListByServerResponse {
	return p.current
}

type ServerKeysListPager interface {
	azcore.Pager
	// PageResponse returns the current ServerKeysListResponse.
	PageResponse() ServerKeysListResponse
}

type serverKeysListPager struct {
	client    *ServerKeysClient
	current   ServerKeysListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerKeysListResponse) (*azcore.Request, error)
}

func (p *serverKeysListPager) Err() error {
	return p.err
}

func (p *serverKeysListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerKeyListResult.NextLink == nil || len(*p.current.ServerKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverKeysListPager) PageResponse() ServerKeysListResponse {
	return p.current
}

type ServerSecurityAlertPoliciesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ServerSecurityAlertPoliciesListByServerResponse.
	PageResponse() ServerSecurityAlertPoliciesListByServerResponse
}

type serverSecurityAlertPoliciesListByServerPager struct {
	client    *ServerSecurityAlertPoliciesClient
	current   ServerSecurityAlertPoliciesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServerSecurityAlertPoliciesListByServerResponse) (*azcore.Request, error)
}

func (p *serverSecurityAlertPoliciesListByServerPager) Err() error {
	return p.err
}

func (p *serverSecurityAlertPoliciesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerSecurityAlertPolicyListResult.NextLink == nil || len(*p.current.ServerSecurityAlertPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serverSecurityAlertPoliciesListByServerPager) PageResponse() ServerSecurityAlertPoliciesListByServerResponse {
	return p.current
}

type VirtualNetworkRulesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current VirtualNetworkRulesListByServerResponse.
	PageResponse() VirtualNetworkRulesListByServerResponse
}

type virtualNetworkRulesListByServerPager struct {
	client    *VirtualNetworkRulesClient
	current   VirtualNetworkRulesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, VirtualNetworkRulesListByServerResponse) (*azcore.Request, error)
}

func (p *virtualNetworkRulesListByServerPager) Err() error {
	return p.err
}

func (p *virtualNetworkRulesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkRuleListResult.NextLink == nil || len(*p.current.VirtualNetworkRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkRulesListByServerPager) PageResponse() VirtualNetworkRulesListByServerResponse {
	return p.current
}
