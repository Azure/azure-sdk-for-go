// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresql

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ConfigurationsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ConfigurationsCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ConfigurationsCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ConfigurationsCreateOrUpdateResponse, error)
}

type configurationsCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *configurationsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *configurationsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *configurationsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ConfigurationsCreateOrUpdateResponse, error) {
	respType := ConfigurationsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Configuration)
	if err != nil {
		return ConfigurationsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *configurationsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *configurationsCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ConfigurationsCreateOrUpdateResponse, error) {
	respType := ConfigurationsCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Configuration)
	if err != nil {
		return ConfigurationsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DatabasesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type DatabasesCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DatabasesCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (DatabasesCreateOrUpdateResponse, error)
}

type databasesCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *databasesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *databasesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *databasesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (DatabasesCreateOrUpdateResponse, error) {
	respType := DatabasesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Database)
	if err != nil {
		return DatabasesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *databasesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *databasesCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DatabasesCreateOrUpdateResponse, error) {
	respType := DatabasesCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Database)
	if err != nil {
		return DatabasesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DatabasesDeletePoller provides polling facilities until the operation reaches a terminal state.
type DatabasesDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DatabasesDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (DatabasesDeleteResponse, error)
}

type databasesDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *databasesDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *databasesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *databasesDeletePoller) FinalResponse(ctx context.Context) (DatabasesDeleteResponse, error) {
	respType := DatabasesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return DatabasesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *databasesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *databasesDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DatabasesDeleteResponse, error) {
	respType := DatabasesDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return DatabasesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// FirewallRulesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type FirewallRulesCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final FirewallRulesCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (FirewallRulesCreateOrUpdateResponse, error)
}

type firewallRulesCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *firewallRulesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *firewallRulesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *firewallRulesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (FirewallRulesCreateOrUpdateResponse, error) {
	respType := FirewallRulesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.FirewallRule)
	if err != nil {
		return FirewallRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *firewallRulesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *firewallRulesCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesCreateOrUpdateResponse, error) {
	respType := FirewallRulesCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.FirewallRule)
	if err != nil {
		return FirewallRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// FirewallRulesDeletePoller provides polling facilities until the operation reaches a terminal state.
type FirewallRulesDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final FirewallRulesDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (FirewallRulesDeleteResponse, error)
}

type firewallRulesDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *firewallRulesDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *firewallRulesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *firewallRulesDeletePoller) FinalResponse(ctx context.Context) (FirewallRulesDeleteResponse, error) {
	respType := FirewallRulesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return FirewallRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *firewallRulesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *firewallRulesDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesDeleteResponse, error) {
	respType := FirewallRulesDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return FirewallRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PrivateEndpointConnectionsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PrivateEndpointConnectionsCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateEndpointConnectionsCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateEndpointConnectionsCreateOrUpdateResponse, error)
}

type privateEndpointConnectionsCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *privateEndpointConnectionsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *privateEndpointConnectionsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *privateEndpointConnectionsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (PrivateEndpointConnectionsCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PrivateEndpointConnection)
	if err != nil {
		return PrivateEndpointConnectionsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateEndpointConnectionsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateEndpointConnectionsCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return PrivateEndpointConnectionsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PrivateEndpointConnectionsDeletePoller provides polling facilities until the operation reaches a terminal state.
type PrivateEndpointConnectionsDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateEndpointConnectionsDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateEndpointConnectionsDeleteResponse, error)
}

type privateEndpointConnectionsDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *privateEndpointConnectionsDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *privateEndpointConnectionsDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *privateEndpointConnectionsDeletePoller) FinalResponse(ctx context.Context) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PrivateEndpointConnectionsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateEndpointConnectionsDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateEndpointConnectionsDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return PrivateEndpointConnectionsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PrivateEndpointConnectionsUpdateTagsPoller provides polling facilities until the operation reaches a terminal state.
type PrivateEndpointConnectionsUpdateTagsPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateEndpointConnectionsUpdateTagsResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateEndpointConnectionsUpdateTagsResponse, error)
}

type privateEndpointConnectionsUpdateTagsPoller struct {
	pt *armcore.LROPoller
}

func (p *privateEndpointConnectionsUpdateTagsPoller) Done() bool {
	return p.pt.Done()
}

func (p *privateEndpointConnectionsUpdateTagsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *privateEndpointConnectionsUpdateTagsPoller) FinalResponse(ctx context.Context) (PrivateEndpointConnectionsUpdateTagsResponse, error) {
	respType := PrivateEndpointConnectionsUpdateTagsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PrivateEndpointConnection)
	if err != nil {
		return PrivateEndpointConnectionsUpdateTagsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateEndpointConnectionsUpdateTagsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateEndpointConnectionsUpdateTagsPoller) pollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsUpdateTagsResponse, error) {
	respType := PrivateEndpointConnectionsUpdateTagsResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return PrivateEndpointConnectionsUpdateTagsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerAdministratorsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ServerAdministratorsCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerAdministratorsCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ServerAdministratorsCreateOrUpdateResponse, error)
}

type serverAdministratorsCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *serverAdministratorsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverAdministratorsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverAdministratorsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ServerAdministratorsCreateOrUpdateResponse, error) {
	respType := ServerAdministratorsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ServerAdministratorResource)
	if err != nil {
		return ServerAdministratorsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverAdministratorsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverAdministratorsCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerAdministratorsCreateOrUpdateResponse, error) {
	respType := ServerAdministratorsCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ServerAdministratorResource)
	if err != nil {
		return ServerAdministratorsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerAdministratorsDeletePoller provides polling facilities until the operation reaches a terminal state.
type ServerAdministratorsDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerAdministratorsDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ServerAdministratorsDeleteResponse, error)
}

type serverAdministratorsDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *serverAdministratorsDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverAdministratorsDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverAdministratorsDeletePoller) FinalResponse(ctx context.Context) (ServerAdministratorsDeleteResponse, error) {
	respType := ServerAdministratorsDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServerAdministratorsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverAdministratorsDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverAdministratorsDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerAdministratorsDeleteResponse, error) {
	respType := ServerAdministratorsDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServerAdministratorsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerKeysCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ServerKeysCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerKeysCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ServerKeysCreateOrUpdateResponse, error)
}

type serverKeysCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *serverKeysCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverKeysCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverKeysCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ServerKeysCreateOrUpdateResponse, error) {
	respType := ServerKeysCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ServerKey)
	if err != nil {
		return ServerKeysCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverKeysCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverKeysCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerKeysCreateOrUpdateResponse, error) {
	respType := ServerKeysCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ServerKey)
	if err != nil {
		return ServerKeysCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerKeysDeletePoller provides polling facilities until the operation reaches a terminal state.
type ServerKeysDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerKeysDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ServerKeysDeleteResponse, error)
}

type serverKeysDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *serverKeysDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverKeysDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverKeysDeletePoller) FinalResponse(ctx context.Context) (ServerKeysDeleteResponse, error) {
	respType := ServerKeysDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServerKeysDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverKeysDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverKeysDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerKeysDeleteResponse, error) {
	respType := ServerKeysDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServerKeysDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerParametersListUpdateConfigurationsPoller provides polling facilities until the operation reaches a terminal state.
type ServerParametersListUpdateConfigurationsPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerParametersListUpdateConfigurationsResponse will be returned.
	FinalResponse(ctx context.Context) (ServerParametersListUpdateConfigurationsResponse, error)
}

type serverParametersListUpdateConfigurationsPoller struct {
	pt *armcore.LROPoller
}

func (p *serverParametersListUpdateConfigurationsPoller) Done() bool {
	return p.pt.Done()
}

func (p *serverParametersListUpdateConfigurationsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverParametersListUpdateConfigurationsPoller) FinalResponse(ctx context.Context) (ServerParametersListUpdateConfigurationsResponse, error) {
	respType := ServerParametersListUpdateConfigurationsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ConfigurationListResult)
	if err != nil {
		return ServerParametersListUpdateConfigurationsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverParametersListUpdateConfigurationsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverParametersListUpdateConfigurationsPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerParametersListUpdateConfigurationsResponse, error) {
	respType := ServerParametersListUpdateConfigurationsResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ConfigurationListResult)
	if err != nil {
		return ServerParametersListUpdateConfigurationsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServerSecurityAlertPoliciesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ServerSecurityAlertPoliciesCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServerSecurityAlertPoliciesCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ServerSecurityAlertPoliciesCreateOrUpdateResponse, error)
}

type serverSecurityAlertPoliciesCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *serverSecurityAlertPoliciesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serverSecurityAlertPoliciesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serverSecurityAlertPoliciesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ServerSecurityAlertPoliciesCreateOrUpdateResponse, error) {
	respType := ServerSecurityAlertPoliciesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ServerSecurityAlertPolicy)
	if err != nil {
		return ServerSecurityAlertPoliciesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serverSecurityAlertPoliciesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serverSecurityAlertPoliciesCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServerSecurityAlertPoliciesCreateOrUpdateResponse, error) {
	respType := ServerSecurityAlertPoliciesCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.ServerSecurityAlertPolicy)
	if err != nil {
		return ServerSecurityAlertPoliciesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersCreatePoller provides polling facilities until the operation reaches a terminal state.
type ServersCreatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersCreateResponse will be returned.
	FinalResponse(ctx context.Context) (ServersCreateResponse, error)
}

type serversCreatePoller struct {
	pt *armcore.LROPoller
}

func (p *serversCreatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversCreatePoller) FinalResponse(ctx context.Context) (ServersCreateResponse, error) {
	respType := ServersCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Server)
	if err != nil {
		return ServersCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversCreatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersCreateResponse, error) {
	respType := ServersCreateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return ServersCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersDeletePoller provides polling facilities until the operation reaches a terminal state.
type ServersDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ServersDeleteResponse, error)
}

type serversDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *serversDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversDeletePoller) FinalResponse(ctx context.Context) (ServersDeleteResponse, error) {
	respType := ServersDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersDeleteResponse, error) {
	respType := ServersDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersRestartPoller provides polling facilities until the operation reaches a terminal state.
type ServersRestartPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersRestartResponse will be returned.
	FinalResponse(ctx context.Context) (ServersRestartResponse, error)
}

type serversRestartPoller struct {
	pt *armcore.LROPoller
}

func (p *serversRestartPoller) Done() bool {
	return p.pt.Done()
}

func (p *serversRestartPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversRestartPoller) FinalResponse(ctx context.Context) (ServersRestartResponse, error) {
	respType := ServersRestartResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersRestartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversRestartPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversRestartPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersRestartResponse, error) {
	respType := ServersRestartResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersRestartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ServersUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ServersUpdateResponse, error)
}

type serversUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *serversUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversUpdatePoller) FinalResponse(ctx context.Context) (ServersUpdateResponse, error) {
	respType := ServersUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Server)
	if err != nil {
		return ServersUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersUpdateResponse, error) {
	respType := ServersUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return ServersUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualNetworkRulesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type VirtualNetworkRulesCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final VirtualNetworkRulesCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (VirtualNetworkRulesCreateOrUpdateResponse, error)
}

type virtualNetworkRulesCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *virtualNetworkRulesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *virtualNetworkRulesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *virtualNetworkRulesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (VirtualNetworkRulesCreateOrUpdateResponse, error) {
	respType := VirtualNetworkRulesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.VirtualNetworkRule)
	if err != nil {
		return VirtualNetworkRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *virtualNetworkRulesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *virtualNetworkRulesCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkRulesCreateOrUpdateResponse, error) {
	respType := VirtualNetworkRulesCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.VirtualNetworkRule)
	if err != nil {
		return VirtualNetworkRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// VirtualNetworkRulesDeletePoller provides polling facilities until the operation reaches a terminal state.
type VirtualNetworkRulesDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final VirtualNetworkRulesDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (VirtualNetworkRulesDeleteResponse, error)
}

type virtualNetworkRulesDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *virtualNetworkRulesDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *virtualNetworkRulesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *virtualNetworkRulesDeletePoller) FinalResponse(ctx context.Context) (VirtualNetworkRulesDeleteResponse, error) {
	respType := VirtualNetworkRulesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return VirtualNetworkRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *virtualNetworkRulesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *virtualNetworkRulesDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkRulesDeleteResponse, error) {
	respType := VirtualNetworkRulesDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return VirtualNetworkRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
