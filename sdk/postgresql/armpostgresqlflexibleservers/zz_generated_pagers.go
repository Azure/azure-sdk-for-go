// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlflexibleservers

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type ConfigurationsListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current ConfigurationsListByServerResponse.
	PageResponse() ConfigurationsListByServerResponse
}

type configurationsListByServerPager struct {
	client    *ConfigurationsClient
	current   ConfigurationsListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ConfigurationsListByServerResponse) (*azcore.Request, error)
}

func (p *configurationsListByServerPager) Err() error {
	return p.err
}

func (p *configurationsListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationListResult.NextLink == nil || len(*p.current.ConfigurationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *configurationsListByServerPager) PageResponse() ConfigurationsListByServerResponse {
	return p.current
}

type DatabasesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current DatabasesListByServerResponse.
	PageResponse() DatabasesListByServerResponse
}

type databasesListByServerPager struct {
	client    *DatabasesClient
	current   DatabasesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DatabasesListByServerResponse) (*azcore.Request, error)
}

func (p *databasesListByServerPager) Err() error {
	return p.err
}

func (p *databasesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatabaseListResult.NextLink == nil || len(*p.current.DatabaseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *databasesListByServerPager) PageResponse() DatabasesListByServerResponse {
	return p.current
}

type FirewallRulesListByServerPager interface {
	azcore.Pager
	// PageResponse returns the current FirewallRulesListByServerResponse.
	PageResponse() FirewallRulesListByServerResponse
}

type firewallRulesListByServerPager struct {
	client    *FirewallRulesClient
	current   FirewallRulesListByServerResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, FirewallRulesListByServerResponse) (*azcore.Request, error)
}

func (p *firewallRulesListByServerPager) Err() error {
	return p.err
}

func (p *firewallRulesListByServerPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FirewallRuleListResult.NextLink == nil || len(*p.current.FirewallRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByServerHandleError(resp)
		return false
	}
	result, err := p.client.listByServerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *firewallRulesListByServerPager) PageResponse() FirewallRulesListByServerResponse {
	return p.current
}

type LocationBasedCapabilitiesExecutePager interface {
	azcore.Pager
	// PageResponse returns the current LocationBasedCapabilitiesExecuteResponse.
	PageResponse() LocationBasedCapabilitiesExecuteResponse
}

type locationBasedCapabilitiesExecutePager struct {
	client    *LocationBasedCapabilitiesClient
	current   LocationBasedCapabilitiesExecuteResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, LocationBasedCapabilitiesExecuteResponse) (*azcore.Request, error)
}

func (p *locationBasedCapabilitiesExecutePager) Err() error {
	return p.err
}

func (p *locationBasedCapabilitiesExecutePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilitiesListResult.NextLink == nil || len(*p.current.CapabilitiesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.executeHandleError(resp)
		return false
	}
	result, err := p.client.executeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *locationBasedCapabilitiesExecutePager) PageResponse() LocationBasedCapabilitiesExecuteResponse {
	return p.current
}

type ServersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ServersListByResourceGroupResponse.
	PageResponse() ServersListByResourceGroupResponse
}

type serversListByResourceGroupPager struct {
	client    *ServersClient
	current   ServersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *serversListByResourceGroupPager) Err() error {
	return p.err
}

func (p *serversListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerListResult.NextLink == nil || len(*p.current.ServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serversListByResourceGroupPager) PageResponse() ServersListByResourceGroupResponse {
	return p.current
}

type ServersListPager interface {
	azcore.Pager
	// PageResponse returns the current ServersListResponse.
	PageResponse() ServersListResponse
}

type serversListPager struct {
	client    *ServersClient
	current   ServersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ServersListResponse) (*azcore.Request, error)
}

func (p *serversListPager) Err() error {
	return p.err
}

func (p *serversListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServerListResult.NextLink == nil || len(*p.current.ServerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *serversListPager) PageResponse() ServersListResponse {
	return p.current
}
