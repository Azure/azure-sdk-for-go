// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlflexibleservers

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ConfigurationsPutPoller provides polling facilities until the operation reaches a terminal state.
type ConfigurationsPutPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ConfigurationsPutResponse will be returned.
	FinalResponse(ctx context.Context) (ConfigurationsPutResponse, error)
}

type configurationsPutPoller struct {
	pt *armcore.LROPoller
}

func (p *configurationsPutPoller) Done() bool {
	return p.pt.Done()
}

func (p *configurationsPutPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *configurationsPutPoller) FinalResponse(ctx context.Context) (ConfigurationsPutResponse, error) {
	respType := ConfigurationsPutResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Configuration)
	if err != nil {
		return ConfigurationsPutResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *configurationsPutPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *configurationsPutPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ConfigurationsPutResponse, error) {
	respType := ConfigurationsPutResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Configuration)
	if err != nil {
		return ConfigurationsPutResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ConfigurationsUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ConfigurationsUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ConfigurationsUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ConfigurationsUpdateResponse, error)
}

type configurationsUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *configurationsUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *configurationsUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *configurationsUpdatePoller) FinalResponse(ctx context.Context) (ConfigurationsUpdateResponse, error) {
	respType := ConfigurationsUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Configuration)
	if err != nil {
		return ConfigurationsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *configurationsUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *configurationsUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ConfigurationsUpdateResponse, error) {
	respType := ConfigurationsUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Configuration)
	if err != nil {
		return ConfigurationsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DatabasesCreatePoller provides polling facilities until the operation reaches a terminal state.
type DatabasesCreatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DatabasesCreateResponse will be returned.
	FinalResponse(ctx context.Context) (DatabasesCreateResponse, error)
}

type databasesCreatePoller struct {
	pt *armcore.LROPoller
}

func (p *databasesCreatePoller) Done() bool {
	return p.pt.Done()
}

func (p *databasesCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *databasesCreatePoller) FinalResponse(ctx context.Context) (DatabasesCreateResponse, error) {
	respType := DatabasesCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Database)
	if err != nil {
		return DatabasesCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *databasesCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *databasesCreatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DatabasesCreateResponse, error) {
	respType := DatabasesCreateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Database)
	if err != nil {
		return DatabasesCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DatabasesDeletePoller provides polling facilities until the operation reaches a terminal state.
type DatabasesDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DatabasesDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (DatabasesDeleteResponse, error)
}

type databasesDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *databasesDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *databasesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *databasesDeletePoller) FinalResponse(ctx context.Context) (DatabasesDeleteResponse, error) {
	respType := DatabasesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return DatabasesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *databasesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *databasesDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DatabasesDeleteResponse, error) {
	respType := DatabasesDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return DatabasesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// FirewallRulesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type FirewallRulesCreateOrUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final FirewallRulesCreateOrUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (FirewallRulesCreateOrUpdateResponse, error)
}

type firewallRulesCreateOrUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *firewallRulesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *firewallRulesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *firewallRulesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (FirewallRulesCreateOrUpdateResponse, error) {
	respType := FirewallRulesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.FirewallRule)
	if err != nil {
		return FirewallRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *firewallRulesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *firewallRulesCreateOrUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesCreateOrUpdateResponse, error) {
	respType := FirewallRulesCreateOrUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.FirewallRule)
	if err != nil {
		return FirewallRulesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// FirewallRulesDeletePoller provides polling facilities until the operation reaches a terminal state.
type FirewallRulesDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final FirewallRulesDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (FirewallRulesDeleteResponse, error)
}

type firewallRulesDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *firewallRulesDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *firewallRulesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *firewallRulesDeletePoller) FinalResponse(ctx context.Context) (FirewallRulesDeleteResponse, error) {
	respType := FirewallRulesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return FirewallRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *firewallRulesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *firewallRulesDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesDeleteResponse, error) {
	respType := FirewallRulesDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return FirewallRulesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersCreatePoller provides polling facilities until the operation reaches a terminal state.
type ServersCreatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersCreateResponse will be returned.
	FinalResponse(ctx context.Context) (ServersCreateResponse, error)
}

type serversCreatePoller struct {
	pt *armcore.LROPoller
}

func (p *serversCreatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversCreatePoller) FinalResponse(ctx context.Context) (ServersCreateResponse, error) {
	respType := ServersCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Server)
	if err != nil {
		return ServersCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversCreatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersCreateResponse, error) {
	respType := ServersCreateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return ServersCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersDeletePoller provides polling facilities until the operation reaches a terminal state.
type ServersDeletePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersDeleteResponse will be returned.
	FinalResponse(ctx context.Context) (ServersDeleteResponse, error)
}

type serversDeletePoller struct {
	pt *armcore.LROPoller
}

func (p *serversDeletePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversDeletePoller) FinalResponse(ctx context.Context) (ServersDeleteResponse, error) {
	respType := ServersDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversDeletePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersDeleteResponse, error) {
	respType := ServersDeleteResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersRestartPoller provides polling facilities until the operation reaches a terminal state.
type ServersRestartPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersRestartResponse will be returned.
	FinalResponse(ctx context.Context) (ServersRestartResponse, error)
}

type serversRestartPoller struct {
	pt *armcore.LROPoller
}

func (p *serversRestartPoller) Done() bool {
	return p.pt.Done()
}

func (p *serversRestartPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversRestartPoller) FinalResponse(ctx context.Context) (ServersRestartResponse, error) {
	respType := ServersRestartResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersRestartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversRestartPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversRestartPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersRestartResponse, error) {
	respType := ServersRestartResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersRestartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersStartPoller provides polling facilities until the operation reaches a terminal state.
type ServersStartPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersStartResponse will be returned.
	FinalResponse(ctx context.Context) (ServersStartResponse, error)
}

type serversStartPoller struct {
	pt *armcore.LROPoller
}

func (p *serversStartPoller) Done() bool {
	return p.pt.Done()
}

func (p *serversStartPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversStartPoller) FinalResponse(ctx context.Context) (ServersStartResponse, error) {
	respType := ServersStartResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersStartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversStartPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversStartPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersStartResponse, error) {
	respType := ServersStartResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersStartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersStopPoller provides polling facilities until the operation reaches a terminal state.
type ServersStopPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersStopResponse will be returned.
	FinalResponse(ctx context.Context) (ServersStopResponse, error)
}

type serversStopPoller struct {
	pt *armcore.LROPoller
}

func (p *serversStopPoller) Done() bool {
	return p.pt.Done()
}

func (p *serversStopPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversStopPoller) FinalResponse(ctx context.Context) (ServersStopResponse, error) {
	respType := ServersStopResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ServersStopResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversStopPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversStopPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersStopResponse, error) {
	respType := ServersStopResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return ServersStopResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ServersUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ServersUpdatePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ServersUpdateResponse will be returned.
	FinalResponse(ctx context.Context) (ServersUpdateResponse, error)
}

type serversUpdatePoller struct {
	pt *armcore.LROPoller
}

func (p *serversUpdatePoller) Done() bool {
	return p.pt.Done()
}

func (p *serversUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *serversUpdatePoller) FinalResponse(ctx context.Context) (ServersUpdateResponse, error) {
	respType := ServersUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Server)
	if err != nil {
		return ServersUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *serversUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *serversUpdatePoller) pollUntilDone(ctx context.Context, freq time.Duration) (ServersUpdateResponse, error) {
	respType := ServersUpdateResponse{}
	resp, err := p.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return ServersUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
