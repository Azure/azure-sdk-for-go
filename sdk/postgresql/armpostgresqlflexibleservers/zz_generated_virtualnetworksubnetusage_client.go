// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlflexibleservers

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// VirtualNetworkSubnetUsageClient contains the methods for the VirtualNetworkSubnetUsage group.
// Don't use this type directly, use NewVirtualNetworkSubnetUsageClient() instead.
type VirtualNetworkSubnetUsageClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewVirtualNetworkSubnetUsageClient creates a new instance of VirtualNetworkSubnetUsageClient with the specified values.
func NewVirtualNetworkSubnetUsageClient(con *armcore.Connection, subscriptionID string) *VirtualNetworkSubnetUsageClient {
	return &VirtualNetworkSubnetUsageClient{con: con, subscriptionID: subscriptionID}
}

// Execute - Get virtual network subnet usage for a given vNet resource id.
// If the operation fails it returns the *CloudError error type.
func (client *VirtualNetworkSubnetUsageClient) Execute(ctx context.Context, locationName string, parameters VirtualNetworkSubnetUsageParameter, options *VirtualNetworkSubnetUsageExecuteOptions) (VirtualNetworkSubnetUsageExecuteResponse, error) {
	req, err := client.executeCreateRequest(ctx, locationName, parameters, options)
	if err != nil {
		return VirtualNetworkSubnetUsageExecuteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return VirtualNetworkSubnetUsageExecuteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return VirtualNetworkSubnetUsageExecuteResponse{}, client.executeHandleError(resp)
	}
	return client.executeHandleResponse(resp)
}

// executeCreateRequest creates the Execute request.
func (client *VirtualNetworkSubnetUsageClient) executeCreateRequest(ctx context.Context, locationName string, parameters VirtualNetworkSubnetUsageParameter, options *VirtualNetworkSubnetUsageExecuteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/checkVirtualNetworkSubnetUsage"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(parameters)
}

// executeHandleResponse handles the Execute response.
func (client *VirtualNetworkSubnetUsageClient) executeHandleResponse(resp *azcore.Response) (VirtualNetworkSubnetUsageExecuteResponse, error) {
	result := VirtualNetworkSubnetUsageExecuteResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VirtualNetworkSubnetUsageResult); err != nil {
		return VirtualNetworkSubnetUsageExecuteResponse{}, err
	}
	return result, nil
}

// executeHandleError handles the Execute error response.
func (client *VirtualNetworkSubnetUsageClient) executeHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := CloudError{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
