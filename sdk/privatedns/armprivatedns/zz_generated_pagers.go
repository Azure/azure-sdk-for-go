// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprivatedns

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// PrivateZoneListResultPager provides iteration over PrivateZoneListResult pages.
type PrivateZoneListResultPager interface {
	azcore.Pager

	// PageResponse returns the current PrivateZoneListResultResponse.
	PageResponse() PrivateZoneListResultResponse
}

type privateZoneListResultCreateRequest func(context.Context) (*azcore.Request, error)

type privateZoneListResultHandleError func(*azcore.Response) error

type privateZoneListResultHandleResponse func(*azcore.Response) (PrivateZoneListResultResponse, error)

type privateZoneListResultAdvancePage func(context.Context, PrivateZoneListResultResponse) (*azcore.Request, error)

type privateZoneListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateZoneListResultCreateRequest
	// callback for handling response errors
	errorer privateZoneListResultHandleError
	// callback for handling the HTTP response
	responder privateZoneListResultHandleResponse
	// callback for advancing to the next page
	advancer privateZoneListResultAdvancePage
	// contains the current response
	current PrivateZoneListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateZoneListResultPager) Err() error {
	return p.err
}

func (p *privateZoneListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateZoneListResult.NextLink == nil || len(*p.current.PrivateZoneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateZoneListResultPager) PageResponse() PrivateZoneListResultResponse {
	return p.current
}

// RecordSetListResultPager provides iteration over RecordSetListResult pages.
type RecordSetListResultPager interface {
	azcore.Pager

	// PageResponse returns the current RecordSetListResultResponse.
	PageResponse() RecordSetListResultResponse
}

type recordSetListResultCreateRequest func(context.Context) (*azcore.Request, error)

type recordSetListResultHandleError func(*azcore.Response) error

type recordSetListResultHandleResponse func(*azcore.Response) (RecordSetListResultResponse, error)

type recordSetListResultAdvancePage func(context.Context, RecordSetListResultResponse) (*azcore.Request, error)

type recordSetListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester recordSetListResultCreateRequest
	// callback for handling response errors
	errorer recordSetListResultHandleError
	// callback for handling the HTTP response
	responder recordSetListResultHandleResponse
	// callback for advancing to the next page
	advancer recordSetListResultAdvancePage
	// contains the current response
	current RecordSetListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *recordSetListResultPager) Err() error {
	return p.err
}

func (p *recordSetListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recordSetListResultPager) PageResponse() RecordSetListResultResponse {
	return p.current
}

// VirtualNetworkLinkListResultPager provides iteration over VirtualNetworkLinkListResult pages.
type VirtualNetworkLinkListResultPager interface {
	azcore.Pager

	// PageResponse returns the current VirtualNetworkLinkListResultResponse.
	PageResponse() VirtualNetworkLinkListResultResponse
}

type virtualNetworkLinkListResultCreateRequest func(context.Context) (*azcore.Request, error)

type virtualNetworkLinkListResultHandleError func(*azcore.Response) error

type virtualNetworkLinkListResultHandleResponse func(*azcore.Response) (VirtualNetworkLinkListResultResponse, error)

type virtualNetworkLinkListResultAdvancePage func(context.Context, VirtualNetworkLinkListResultResponse) (*azcore.Request, error)

type virtualNetworkLinkListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester virtualNetworkLinkListResultCreateRequest
	// callback for handling response errors
	errorer virtualNetworkLinkListResultHandleError
	// callback for handling the HTTP response
	responder virtualNetworkLinkListResultHandleResponse
	// callback for advancing to the next page
	advancer virtualNetworkLinkListResultAdvancePage
	// contains the current response
	current VirtualNetworkLinkListResultResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *virtualNetworkLinkListResultPager) Err() error {
	return p.err
}

func (p *virtualNetworkLinkListResultPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VirtualNetworkLinkListResult.NextLink == nil || len(*p.current.VirtualNetworkLinkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *virtualNetworkLinkListResultPager) PageResponse() VirtualNetworkLinkListResultResponse {
	return p.current
}
