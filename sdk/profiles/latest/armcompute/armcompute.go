// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// This code was generated by a tool.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import (
	original "github.com/Azure/azure-sdk-for-go/sdk/arm/compute/2020-09-30/armcompute"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
)

type AccessLevel = original.AccessLevel

const (
	AccessLevelNone  = original.AccessLevelNone
	AccessLevelRead  = original.AccessLevelRead
	AccessLevelWrite = original.AccessLevelWrite
)

// AggregatedReplicationState - This is the aggregated replication status based on all the regional replication status flags.
type AggregatedReplicationState = original.AggregatedReplicationState

const (
	AggregatedReplicationStateCompleted  = original.AggregatedReplicationStateCompleted
	AggregatedReplicationStateFailed     = original.AggregatedReplicationStateFailed
	AggregatedReplicationStateInProgress = original.AggregatedReplicationStateInProgress
	AggregatedReplicationStateUnknown    = original.AggregatedReplicationStateUnknown
)

// AvailabilitySetSKUTypes - Specifies the sku of an Availability Set. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines
// with unmanaged disks. Default value is 'Classic'.
type AvailabilitySetSKUTypes = original.AvailabilitySetSKUTypes

const (
	AvailabilitySetSKUTypesAligned = original.AvailabilitySetSKUTypesAligned
	AvailabilitySetSKUTypesClassic = original.AvailabilitySetSKUTypesClassic
)

// CachingTypes - Specifies the caching requirements.
// Possible values are:
// None
// ReadOnly
// ReadWrite
// Default: None for Standard storage. ReadOnly for Premium storage
type CachingTypes = original.CachingTypes

const (
	CachingTypesNone      = original.CachingTypesNone
	CachingTypesReadOnly  = original.CachingTypesReadOnly
	CachingTypesReadWrite = original.CachingTypesReadWrite
)

// ContainerServiceOrchestratorTypes - The orchestrator to use to manage container service cluster resources. Valid values are Swarm, DCOS, and Custom.
type ContainerServiceOrchestratorTypes = original.ContainerServiceOrchestratorTypes

const (
	ContainerServiceOrchestratorTypesSwarm      = original.ContainerServiceOrchestratorTypesSwarm
	ContainerServiceOrchestratorTypesDcos       = original.ContainerServiceOrchestratorTypesDcos
	ContainerServiceOrchestratorTypesCustom     = original.ContainerServiceOrchestratorTypesCustom
	ContainerServiceOrchestratorTypesKubernetes = original.ContainerServiceOrchestratorTypesKubernetes
)

// ContainerServiceVMSizeTypes - Size of agent VMs.
type ContainerServiceVMSizeTypes = original.ContainerServiceVMSizeTypes

const (
	ContainerServiceVMSizeTypesStandardA0    = original.ContainerServiceVMSizeTypesStandardA0
	ContainerServiceVMSizeTypesStandardA1    = original.ContainerServiceVMSizeTypesStandardA1
	ContainerServiceVMSizeTypesStandardA10   = original.ContainerServiceVMSizeTypesStandardA10
	ContainerServiceVMSizeTypesStandardA11   = original.ContainerServiceVMSizeTypesStandardA11
	ContainerServiceVMSizeTypesStandardA2    = original.ContainerServiceVMSizeTypesStandardA2
	ContainerServiceVMSizeTypesStandardA3    = original.ContainerServiceVMSizeTypesStandardA3
	ContainerServiceVMSizeTypesStandardA4    = original.ContainerServiceVMSizeTypesStandardA4
	ContainerServiceVMSizeTypesStandardA5    = original.ContainerServiceVMSizeTypesStandardA5
	ContainerServiceVMSizeTypesStandardA6    = original.ContainerServiceVMSizeTypesStandardA6
	ContainerServiceVMSizeTypesStandardA7    = original.ContainerServiceVMSizeTypesStandardA7
	ContainerServiceVMSizeTypesStandardA8    = original.ContainerServiceVMSizeTypesStandardA8
	ContainerServiceVMSizeTypesStandardA9    = original.ContainerServiceVMSizeTypesStandardA9
	ContainerServiceVMSizeTypesStandardD1    = original.ContainerServiceVMSizeTypesStandardD1
	ContainerServiceVMSizeTypesStandardD11   = original.ContainerServiceVMSizeTypesStandardD11
	ContainerServiceVMSizeTypesStandardD11V2 = original.ContainerServiceVMSizeTypesStandardD11V2
	ContainerServiceVMSizeTypesStandardD12   = original.ContainerServiceVMSizeTypesStandardD12
	ContainerServiceVMSizeTypesStandardD12V2 = original.ContainerServiceVMSizeTypesStandardD12V2
	ContainerServiceVMSizeTypesStandardD13   = original.ContainerServiceVMSizeTypesStandardD13
	ContainerServiceVMSizeTypesStandardD13V2 = original.ContainerServiceVMSizeTypesStandardD13V2
	ContainerServiceVMSizeTypesStandardD14   = original.ContainerServiceVMSizeTypesStandardD14
	ContainerServiceVMSizeTypesStandardD14V2 = original.ContainerServiceVMSizeTypesStandardD14V2
	ContainerServiceVMSizeTypesStandardD1V2  = original.ContainerServiceVMSizeTypesStandardD1V2
	ContainerServiceVMSizeTypesStandardD2    = original.ContainerServiceVMSizeTypesStandardD2
	ContainerServiceVMSizeTypesStandardD2V2  = original.ContainerServiceVMSizeTypesStandardD2V2
	ContainerServiceVMSizeTypesStandardD3    = original.ContainerServiceVMSizeTypesStandardD3
	ContainerServiceVMSizeTypesStandardD3V2  = original.ContainerServiceVMSizeTypesStandardD3V2
	ContainerServiceVMSizeTypesStandardD4    = original.ContainerServiceVMSizeTypesStandardD4
	ContainerServiceVMSizeTypesStandardD4V2  = original.ContainerServiceVMSizeTypesStandardD4V2
	ContainerServiceVMSizeTypesStandardD5V2  = original.ContainerServiceVMSizeTypesStandardD5V2
	ContainerServiceVMSizeTypesStandardDs1   = original.ContainerServiceVMSizeTypesStandardDs1
	ContainerServiceVMSizeTypesStandardDs11  = original.ContainerServiceVMSizeTypesStandardDs11
	ContainerServiceVMSizeTypesStandardDs12  = original.ContainerServiceVMSizeTypesStandardDs12
	ContainerServiceVMSizeTypesStandardDs13  = original.ContainerServiceVMSizeTypesStandardDs13
	ContainerServiceVMSizeTypesStandardDs14  = original.ContainerServiceVMSizeTypesStandardDs14
	ContainerServiceVMSizeTypesStandardDs2   = original.ContainerServiceVMSizeTypesStandardDs2
	ContainerServiceVMSizeTypesStandardDs3   = original.ContainerServiceVMSizeTypesStandardDs3
	ContainerServiceVMSizeTypesStandardDs4   = original.ContainerServiceVMSizeTypesStandardDs4
	ContainerServiceVMSizeTypesStandardG1    = original.ContainerServiceVMSizeTypesStandardG1
	ContainerServiceVMSizeTypesStandardG2    = original.ContainerServiceVMSizeTypesStandardG2
	ContainerServiceVMSizeTypesStandardG3    = original.ContainerServiceVMSizeTypesStandardG3
	ContainerServiceVMSizeTypesStandardG4    = original.ContainerServiceVMSizeTypesStandardG4
	ContainerServiceVMSizeTypesStandardG5    = original.ContainerServiceVMSizeTypesStandardG5
	ContainerServiceVMSizeTypesStandardGs1   = original.ContainerServiceVMSizeTypesStandardGs1
	ContainerServiceVMSizeTypesStandardGs2   = original.ContainerServiceVMSizeTypesStandardGs2
	ContainerServiceVMSizeTypesStandardGs3   = original.ContainerServiceVMSizeTypesStandardGs3
	ContainerServiceVMSizeTypesStandardGs4   = original.ContainerServiceVMSizeTypesStandardGs4
	ContainerServiceVMSizeTypesStandardGs5   = original.ContainerServiceVMSizeTypesStandardGs5
)

// DedicatedHostLicenseTypes - Specifies the software license type that will be applied to the VMs deployed on the dedicated host.
// Possible values are:
// None
// WindowsServerHybrid
// WindowsServerPerpetual
// Default: None
type DedicatedHostLicenseTypes = original.DedicatedHostLicenseTypes

const (
	DedicatedHostLicenseTypesNone                   = original.DedicatedHostLicenseTypesNone
	DedicatedHostLicenseTypesWindowsServerHybrid    = original.DedicatedHostLicenseTypesWindowsServerHybrid
	DedicatedHostLicenseTypesWindowsServerPerpetual = original.DedicatedHostLicenseTypesWindowsServerPerpetual
)

// DiffDiskOptions - Specifies the ephemeral disk option for operating system disk.
type DiffDiskOptions = original.DiffDiskOptions

const DiffDiskOptionsLocal = original.DiffDiskOptionsLocal

// DiffDiskPlacement - Specifies the ephemeral disk placement for operating system disk. This property can be used by user in the request to choose the
// location i.e, cache disk or resource disk space for Ephemeral OS disk
// provisioning. For more information on Ephemeral OS disk size requirements, please refer Ephemeral OS disk size requirements for Windows VM at
// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VM at
// https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements
type DiffDiskPlacement = original.DiffDiskPlacement

const (
	DiffDiskPlacementCacheDisk    = original.DiffDiskPlacementCacheDisk
	DiffDiskPlacementResourceDisk = original.DiffDiskPlacementResourceDisk
)

// DiskCreateOption - This enumerates the possible sources of a disk's creation.
type DiskCreateOption = original.DiskCreateOption

const ( // DiskCreateOptionAttach - Disk will be attached to a VM.
	DiskCreateOptionAttach    = original.DiskCreateOptionAttach    // DiskCreateOptionCopy - Create a new disk or snapshot by copying from a disk or snapshot specified by the given sourceResourceId.
	DiskCreateOptionCopy      = original.DiskCreateOptionCopy      // DiskCreateOptionEmpty - Create an empty data disk of a size given by diskSizeGB.
	DiskCreateOptionEmpty     = original.DiskCreateOptionEmpty     // DiskCreateOptionFromImage - Create a new disk from a platform image specified by the given imageReference or galleryImageReference.
	DiskCreateOptionFromImage = original.DiskCreateOptionFromImage // DiskCreateOptionImport - Create a disk by importing from a blob specified by a sourceUri in a storage account specified by storageAccountId.
	DiskCreateOptionImport    = original.DiskCreateOptionImport    // DiskCreateOptionRestore - Create a new disk by copying from a backup recovery point.
	DiskCreateOptionRestore   = original.DiskCreateOptionRestore   // DiskCreateOptionUpload - Create a new disk by obtaining a write token and using it to directly upload the contents of the disk.
	DiskCreateOptionUpload    = original.DiskCreateOptionUpload
)

// DiskCreateOptionTypes - Specifies how the virtual machine should be created.
// Possible values are:
// Attach \u2013 This value is used when you are using a specialized disk to create the virtual machine.
// FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference
// element described above. If you are
// using a marketplace image, you also use the plan element previously described.
type DiskCreateOptionTypes = original.DiskCreateOptionTypes

const (
	DiskCreateOptionTypesAttach    = original.DiskCreateOptionTypesAttach
	DiskCreateOptionTypesEmpty     = original.DiskCreateOptionTypesEmpty
	DiskCreateOptionTypesFromImage = original.DiskCreateOptionTypesFromImage
)

// DiskEncryptionSetIDentityType - The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
type DiskEncryptionSetIDentityType = original.DiskEncryptionSetIDentityType

const DiskEncryptionSetIDentityTypeSystemAssigned = original.DiskEncryptionSetIDentityTypeSystemAssigned

// DiskEncryptionSetType - The type of key used to encrypt the data of the disk.
type DiskEncryptionSetType = original.DiskEncryptionSetType

const ( // DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey - Resource using diskEncryptionSet would be encrypted at rest with Customer managed key that can
	// be changed and revoked by a customer.
	DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey = original.DiskEncryptionSetTypeEncryptionAtRestWithCustomerKey // DiskEncryptionSetTypeEncryptionAtRestWithPlatformAndCustomerKeys - Resource using diskEncryptionSet would be encrypted at rest with two layers of encryption.
	// One of the keys is Customer managed and the other key is Platform managed.
	DiskEncryptionSetTypeEncryptionAtRestWithPlatformAndCustomerKeys = original.DiskEncryptionSetTypeEncryptionAtRestWithPlatformAndCustomerKeys
)

// DiskState - This enumerates the possible state of the disk.
type DiskState = original.DiskState

const ( // DiskStateActiveSas - The disk currently has an Active SAS Uri associated with it.
	DiskStateActiveSas     = original.DiskStateActiveSas     // DiskStateActiveUpload - A disk is created for upload and a write token has been issued for uploading to it.
	DiskStateActiveUpload  = original.DiskStateActiveUpload  // DiskStateAttached - The disk is currently mounted to a running VM.
	DiskStateAttached      = original.DiskStateAttached      // DiskStateReadyToUpload - A disk is ready to be created by upload by requesting a write token.
	DiskStateReadyToUpload = original.DiskStateReadyToUpload // DiskStateReserved - The disk is mounted to a stopped-deallocated VM
	DiskStateReserved      = original.DiskStateReserved      // DiskStateUnattached - The disk is not being used and can be attached to a VM.
	DiskStateUnattached    = original.DiskStateUnattached
)

// DiskStorageAccountTypes - The sku name.
type DiskStorageAccountTypes = original.DiskStorageAccountTypes

const ( // DiskStorageAccountTypesPremiumLrs - Premium SSD locally redundant storage. Best for production and performance sensitive workloads.
	DiskStorageAccountTypesPremiumLrs     = original.DiskStorageAccountTypesPremiumLrs     // DiskStorageAccountTypesStandardLrs - Standard HDD locally redundant storage. Best for backup, non-critical, and infrequent access.
	DiskStorageAccountTypesStandardLrs    = original.DiskStorageAccountTypesStandardLrs    // DiskStorageAccountTypesStandardSsdlrs - Standard SSD locally redundant storage. Best for web servers, lightly used enterprise applications and dev/test.
	DiskStorageAccountTypesStandardSsdlrs = original.DiskStorageAccountTypesStandardSsdlrs // DiskStorageAccountTypesUltraSsdlrs - Ultra SSD locally redundant storage. Best for IO-intensive workloads such as SAP HANA, top tier databases (for example,
	// SQL, Oracle), and other transaction-heavy workloads.
	DiskStorageAccountTypesUltraSsdlrs = original.DiskStorageAccountTypesUltraSsdlrs
)

// EncryptionType - The type of key used to encrypt the data of the disk.
type EncryptionType = original.EncryptionType

const ( // EncryptionTypeEncryptionAtRestWithCustomerKey - Disk is encrypted at rest with Customer managed key that can be changed and revoked by a customer.
	EncryptionTypeEncryptionAtRestWithCustomerKey = original.EncryptionTypeEncryptionAtRestWithCustomerKey // EncryptionTypeEncryptionAtRestWithPlatformAndCustomerKeys - Disk is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed
	// and the other key is Platform managed.
	EncryptionTypeEncryptionAtRestWithPlatformAndCustomerKeys = original.EncryptionTypeEncryptionAtRestWithPlatformAndCustomerKeys // EncryptionTypeEncryptionAtRestWithPlatformKey - Disk is encrypted at rest with Platform managed key. It is the default encryption type. This is not a
	// valid encryption type for disk encryption sets.
	EncryptionTypeEncryptionAtRestWithPlatformKey = original.EncryptionTypeEncryptionAtRestWithPlatformKey
)

// Enum47 - Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
type Enum47 = original.Enum47

const (
	Enum47Five  = original.Enum47Five
	Enum47One   = original.Enum47One
	Enum47Three = original.Enum47Three
)

// ExecutionState - Script execution status.
type ExecutionState = original.ExecutionState

const (
	ExecutionStateCanceled  = original.ExecutionStateCanceled
	ExecutionStateFailed    = original.ExecutionStateFailed
	ExecutionStatePending   = original.ExecutionStatePending
	ExecutionStateRunning   = original.ExecutionStateRunning
	ExecutionStateSucceeded = original.ExecutionStateSucceeded
	ExecutionStateTimedOut  = original.ExecutionStateTimedOut
	ExecutionStateUnknown   = original.ExecutionStateUnknown
)

// GalleryApplicationVersionPropertiesProvisioningState - The provisioning state, which only appears in the response.
type GalleryApplicationVersionPropertiesProvisioningState = original.GalleryApplicationVersionPropertiesProvisioningState

const (
	GalleryApplicationVersionPropertiesProvisioningStateCreating  = original.GalleryApplicationVersionPropertiesProvisioningStateCreating
	GalleryApplicationVersionPropertiesProvisioningStateDeleting  = original.GalleryApplicationVersionPropertiesProvisioningStateDeleting
	GalleryApplicationVersionPropertiesProvisioningStateFailed    = original.GalleryApplicationVersionPropertiesProvisioningStateFailed
	GalleryApplicationVersionPropertiesProvisioningStateMigrating = original.GalleryApplicationVersionPropertiesProvisioningStateMigrating
	GalleryApplicationVersionPropertiesProvisioningStateSucceeded = original.GalleryApplicationVersionPropertiesProvisioningStateSucceeded
	GalleryApplicationVersionPropertiesProvisioningStateUpdating  = original.GalleryApplicationVersionPropertiesProvisioningStateUpdating
)

// GalleryImagePropertiesProvisioningState - The provisioning state, which only appears in the response.
type GalleryImagePropertiesProvisioningState = original.GalleryImagePropertiesProvisioningState

const (
	GalleryImagePropertiesProvisioningStateCreating  = original.GalleryImagePropertiesProvisioningStateCreating
	GalleryImagePropertiesProvisioningStateDeleting  = original.GalleryImagePropertiesProvisioningStateDeleting
	GalleryImagePropertiesProvisioningStateFailed    = original.GalleryImagePropertiesProvisioningStateFailed
	GalleryImagePropertiesProvisioningStateMigrating = original.GalleryImagePropertiesProvisioningStateMigrating
	GalleryImagePropertiesProvisioningStateSucceeded = original.GalleryImagePropertiesProvisioningStateSucceeded
	GalleryImagePropertiesProvisioningStateUpdating  = original.GalleryImagePropertiesProvisioningStateUpdating
)

// GalleryImageVersionPropertiesProvisioningState - The provisioning state, which only appears in the response.
type GalleryImageVersionPropertiesProvisioningState = original.GalleryImageVersionPropertiesProvisioningState

const (
	GalleryImageVersionPropertiesProvisioningStateCreating  = original.GalleryImageVersionPropertiesProvisioningStateCreating
	GalleryImageVersionPropertiesProvisioningStateDeleting  = original.GalleryImageVersionPropertiesProvisioningStateDeleting
	GalleryImageVersionPropertiesProvisioningStateFailed    = original.GalleryImageVersionPropertiesProvisioningStateFailed
	GalleryImageVersionPropertiesProvisioningStateMigrating = original.GalleryImageVersionPropertiesProvisioningStateMigrating
	GalleryImageVersionPropertiesProvisioningStateSucceeded = original.GalleryImageVersionPropertiesProvisioningStateSucceeded
	GalleryImageVersionPropertiesProvisioningStateUpdating  = original.GalleryImageVersionPropertiesProvisioningStateUpdating
)

// GalleryPropertiesProvisioningState - The provisioning state, which only appears in the response.
type GalleryPropertiesProvisioningState = original.GalleryPropertiesProvisioningState

const (
	GalleryPropertiesProvisioningStateCreating  = original.GalleryPropertiesProvisioningStateCreating
	GalleryPropertiesProvisioningStateDeleting  = original.GalleryPropertiesProvisioningStateDeleting
	GalleryPropertiesProvisioningStateFailed    = original.GalleryPropertiesProvisioningStateFailed
	GalleryPropertiesProvisioningStateMigrating = original.GalleryPropertiesProvisioningStateMigrating
	GalleryPropertiesProvisioningStateSucceeded = original.GalleryPropertiesProvisioningStateSucceeded
	GalleryPropertiesProvisioningStateUpdating  = original.GalleryPropertiesProvisioningStateUpdating
)

// GallerySharingPermissionTypes - This property allows you to specify the permission of sharing gallery.
// Possible values are:
// Private
// Groups
type GallerySharingPermissionTypes = original.GallerySharingPermissionTypes

const (
	GallerySharingPermissionTypesGroups  = original.GallerySharingPermissionTypesGroups
	GallerySharingPermissionTypesPrivate = original.GallerySharingPermissionTypesPrivate
)

// HostCaching - The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
type HostCaching = original.HostCaching

const (
	HostCachingNone      = original.HostCachingNone
	HostCachingReadOnly  = original.HostCachingReadOnly
	HostCachingReadWrite = original.HostCachingReadWrite
)

// HyperVGeneration - The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
type HyperVGeneration = original.HyperVGeneration

const (
	HyperVGenerationV1 = original.HyperVGenerationV1
	HyperVGenerationV2 = original.HyperVGenerationV2
)

// HyperVGenerationType - Specifies the HyperVGeneration Type associated with a resource
type HyperVGenerationType = original.HyperVGenerationType

const (
	HyperVGenerationTypeV1 = original.HyperVGenerationTypeV1
	HyperVGenerationTypeV2 = original.HyperVGenerationTypeV2
)

// HyperVGenerationTypes - Specifies the HyperVGeneration Type
type HyperVGenerationTypes = original.HyperVGenerationTypes

const (
	HyperVGenerationTypesV1 = original.HyperVGenerationTypesV1
	HyperVGenerationTypesV2 = original.HyperVGenerationTypesV2
)

// IPVersion - Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
// Possible values are: 'IPv4' and 'IPv6'.
type IPVersion = original.IPVersion

const (
	IPVersionIPv4 = original.IPVersionIPv4
	IPVersionIPv6 = original.IPVersionIPv6
)

// InGuestPatchMode - Specifies the mode of in-guest patching to IaaS virtual machine.
// Possible values are:
// Manual - You control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic
// updates are disabled; the property
// WindowsConfiguration.enableAutomaticUpdates must be false
// AutomaticByOS - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true.
// ** AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates
// must be true
type InGuestPatchMode = original.InGuestPatchMode

const (
	InGuestPatchModeAutomaticByOS       = original.InGuestPatchModeAutomaticByOS
	InGuestPatchModeAutomaticByPlatform = original.InGuestPatchModeAutomaticByPlatform
	InGuestPatchModeManual              = original.InGuestPatchModeManual
)

// IntervalInMins - Interval value in minutes used to create LogAnalytics call rate logs.
type IntervalInMins = original.IntervalInMins

const (
	IntervalInMinsThreeMins  = original.IntervalInMinsThreeMins
	IntervalInMinsFiveMins   = original.IntervalInMinsFiveMins
	IntervalInMinsThirtyMins = original.IntervalInMinsThirtyMins
	IntervalInMinsSixtyMins  = original.IntervalInMinsSixtyMins
)

// MaintenanceOperationResultCodeTypes - The Last Maintenance Operation Result Code.
type MaintenanceOperationResultCodeTypes = original.MaintenanceOperationResultCodeTypes

const (
	MaintenanceOperationResultCodeTypesNone                 = original.MaintenanceOperationResultCodeTypesNone
	MaintenanceOperationResultCodeTypesRetryLater           = original.MaintenanceOperationResultCodeTypesRetryLater
	MaintenanceOperationResultCodeTypesMaintenanceAborted   = original.MaintenanceOperationResultCodeTypesMaintenanceAborted
	MaintenanceOperationResultCodeTypesMaintenanceCompleted = original.MaintenanceOperationResultCodeTypesMaintenanceCompleted
)

// NetworkAccessPolicy - Policy for accessing the disk via network.
type NetworkAccessPolicy = original.NetworkAccessPolicy

const ( // NetworkAccessPolicyAllowAll - The disk can be exported or uploaded to from any network.
	NetworkAccessPolicyAllowAll     = original.NetworkAccessPolicyAllowAll     // NetworkAccessPolicyAllowPrivate - The disk can be exported or uploaded to using a DiskAccess resource's private endpoints.
	NetworkAccessPolicyAllowPrivate = original.NetworkAccessPolicyAllowPrivate // NetworkAccessPolicyDenyAll - The disk cannot be exported.
	NetworkAccessPolicyDenyAll      = original.NetworkAccessPolicyDenyAll
)

// OperatingSystemStateTypes - The OS State.
type OperatingSystemStateTypes = original.OperatingSystemStateTypes

const ( // OperatingSystemStateTypesGeneralized - Generalized image. Needs to be provisioned during deployment time.
	OperatingSystemStateTypesGeneralized = original.OperatingSystemStateTypesGeneralized // OperatingSystemStateTypesSpecialized - Specialized image. Contains already provisioned OS Disk.
	OperatingSystemStateTypesSpecialized = original.OperatingSystemStateTypesSpecialized
)

// OperatingSystemTypes - The operating system of the osDiskImage.
type OperatingSystemTypes = original.OperatingSystemTypes

const (
	OperatingSystemTypesWindows = original.OperatingSystemTypesWindows
	OperatingSystemTypesLinux   = original.OperatingSystemTypesLinux
)

// OrchestrationServiceNames - The name of the service.
type OrchestrationServiceNames = original.OrchestrationServiceNames

const OrchestrationServiceNamesAutomaticRepairs = original.OrchestrationServiceNamesAutomaticRepairs

// OrchestrationServiceState - The current state of the service.
type OrchestrationServiceState = original.OrchestrationServiceState

const (
	OrchestrationServiceStateNotRunning = original.OrchestrationServiceStateNotRunning
	OrchestrationServiceStateRunning    = original.OrchestrationServiceStateRunning
	OrchestrationServiceStateSuspended  = original.OrchestrationServiceStateSuspended
)

// OrchestrationServiceStateAction - The action to be performed.
type OrchestrationServiceStateAction = original.OrchestrationServiceStateAction

const (
	OrchestrationServiceStateActionResume  = original.OrchestrationServiceStateActionResume
	OrchestrationServiceStateActionSuspend = original.OrchestrationServiceStateActionSuspend
)

// PatchAssessmentState - Describes the outcome of an install operation for a given patch.
type PatchAssessmentState = original.PatchAssessmentState

const (
	PatchAssessmentStateAvailable   = original.PatchAssessmentStateAvailable
	PatchAssessmentStateExcluded    = original.PatchAssessmentStateExcluded
	PatchAssessmentStateFailed      = original.PatchAssessmentStateFailed
	PatchAssessmentStateInstalled   = original.PatchAssessmentStateInstalled
	PatchAssessmentStateNotSelected = original.PatchAssessmentStateNotSelected
	PatchAssessmentStatePending     = original.PatchAssessmentStatePending
)

// PatchOperationStatus - The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it
// will become "Failed", "Succeeded", or "CompletedWithWarnings."
type PatchOperationStatus = original.PatchOperationStatus

const (
	PatchOperationStatusCompletedWithWarnings = original.PatchOperationStatusCompletedWithWarnings
	PatchOperationStatusFailed                = original.PatchOperationStatusFailed
	PatchOperationStatusInProgress            = original.PatchOperationStatusInProgress
	PatchOperationStatusSucceeded             = original.PatchOperationStatusSucceeded
)

// PrivateEndpointConnectionProvisioningState - The current provisioning state.
type PrivateEndpointConnectionProvisioningState = original.PrivateEndpointConnectionProvisioningState

const (
	PrivateEndpointConnectionProvisioningStateCreating  = original.PrivateEndpointConnectionProvisioningStateCreating
	PrivateEndpointConnectionProvisioningStateDeleting  = original.PrivateEndpointConnectionProvisioningStateDeleting
	PrivateEndpointConnectionProvisioningStateFailed    = original.PrivateEndpointConnectionProvisioningStateFailed
	PrivateEndpointConnectionProvisioningStateSucceeded = original.PrivateEndpointConnectionProvisioningStateSucceeded
)

// PrivateEndpointServiceConnectionStatus - The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus = original.PrivateEndpointServiceConnectionStatus

const (
	PrivateEndpointServiceConnectionStatusApproved = original.PrivateEndpointServiceConnectionStatusApproved
	PrivateEndpointServiceConnectionStatusPending  = original.PrivateEndpointServiceConnectionStatusPending
	PrivateEndpointServiceConnectionStatusRejected = original.PrivateEndpointServiceConnectionStatusRejected
)

// ProtocolTypes - Specifies the protocol of WinRM listener.
// Possible values are:
// http
// https
type ProtocolTypes = original.ProtocolTypes

const (
	ProtocolTypesHTTP  = original.ProtocolTypesHTTP
	ProtocolTypesHTTPs = original.ProtocolTypesHTTPs
)

// ProximityPlacementGroupType - Specifies the type of the proximity placement group.
// Possible values are:
// Standard : Co-locate resources within an Azure region or Availability Zone.
// Ultra : For future use.
type ProximityPlacementGroupType = original.ProximityPlacementGroupType

const (
	ProximityPlacementGroupTypeStandard = original.ProximityPlacementGroupTypeStandard
	ProximityPlacementGroupTypeUltra    = original.ProximityPlacementGroupTypeUltra
)

// RebootStatus - The reboot status of the machine after the patch operation. It will be in "NotNeeded" status if reboot is not needed after the patch operation.
// "Required" will be the status once the patch is applied
// and machine is required to reboot. "Started" will be the reboot status when the machine has started to reboot. "Failed" will be the status if the machine
// is failed to reboot. "Completed" will be the
// status once the machine is rebooted successfully
type RebootStatus = original.RebootStatus

const (
	RebootStatusCompleted = original.RebootStatusCompleted
	RebootStatusFailed    = original.RebootStatusFailed
	RebootStatusNotNeeded = original.RebootStatusNotNeeded
	RebootStatusRequired  = original.RebootStatusRequired
	RebootStatusStarted   = original.RebootStatusStarted
)

// ReplicationState - This is the regional replication state.
type ReplicationState = original.ReplicationState

const (
	ReplicationStateCompleted   = original.ReplicationStateCompleted
	ReplicationStateFailed      = original.ReplicationStateFailed
	ReplicationStateReplicating = original.ReplicationStateReplicating
	ReplicationStateUnknown     = original.ReplicationStateUnknown
)

type ReplicationStatusTypes = original.ReplicationStatusTypes

const ReplicationStatusTypesReplicationStatus = original.ReplicationStatusTypesReplicationStatus

// ResourceIDentityType - The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created
// identity and a set of user assigned identities. The type 'None' will
// remove any identities from the virtual machine.
type ResourceIDentityType = original.ResourceIDentityType

const (
	ResourceIDentityTypeSystemAssigned             = original.ResourceIDentityTypeSystemAssigned
	ResourceIDentityTypeUserAssigned               = original.ResourceIDentityTypeUserAssigned
	ResourceIDentityTypeSystemAssignedUserAssigned = original.ResourceIDentityTypeSystemAssignedUserAssigned
	ResourceIDentityTypeNone                       = original.ResourceIDentityTypeNone
)

// ResourceSKUCapacityScaleType - The scale type applicable to the sku.
type ResourceSKUCapacityScaleType = original.ResourceSKUCapacityScaleType

const (
	ResourceSKUCapacityScaleTypeAutomatic = original.ResourceSKUCapacityScaleTypeAutomatic
	ResourceSKUCapacityScaleTypeManual    = original.ResourceSKUCapacityScaleTypeManual
	ResourceSKUCapacityScaleTypeNone      = original.ResourceSKUCapacityScaleTypeNone
)

// ResourceSKURestrictionsReasonCode - The reason for restriction.
type ResourceSKURestrictionsReasonCode = original.ResourceSKURestrictionsReasonCode

const (
	ResourceSKURestrictionsReasonCodeQuotaID                     = original.ResourceSKURestrictionsReasonCodeQuotaID
	ResourceSKURestrictionsReasonCodeNotAvailableForSubscription = original.ResourceSKURestrictionsReasonCodeNotAvailableForSubscription
)

// ResourceSKURestrictionsType - The type of restrictions.
type ResourceSKURestrictionsType = original.ResourceSKURestrictionsType

const (
	ResourceSKURestrictionsTypeLocation = original.ResourceSKURestrictionsTypeLocation
	ResourceSKURestrictionsTypeZone     = original.ResourceSKURestrictionsTypeZone
)

// RollingUpgradeActionType - The last action performed on the rolling upgrade.
type RollingUpgradeActionType = original.RollingUpgradeActionType

const (
	RollingUpgradeActionTypeStart  = original.RollingUpgradeActionTypeStart
	RollingUpgradeActionTypeCancel = original.RollingUpgradeActionTypeCancel
)

// RollingUpgradeStatusCode - Code indicating the current status of the upgrade.
type RollingUpgradeStatusCode = original.RollingUpgradeStatusCode

const (
	RollingUpgradeStatusCodeRollingForward = original.RollingUpgradeStatusCodeRollingForward
	RollingUpgradeStatusCodeCancelled      = original.RollingUpgradeStatusCodeCancelled
	RollingUpgradeStatusCodeCompleted      = original.RollingUpgradeStatusCodeCompleted
	RollingUpgradeStatusCodeFaulted        = original.RollingUpgradeStatusCodeFaulted
)

type SelectPermissions = original.SelectPermissions

const SelectPermissionsPermissions = original.SelectPermissionsPermissions

// SettingNames - Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
type SettingNames = original.SettingNames

const (
	SettingNamesAutoLogon          = original.SettingNamesAutoLogon
	SettingNamesFirstLogonCommands = original.SettingNamesFirstLogonCommands
)

type SharedToValues = original.SharedToValues

const SharedToValuesTenant = original.SharedToValuesTenant

// SharingProfileGroupTypes - This property allows you to specify the type of sharing group.
// Possible values are:
// Subscriptions
// AADTenants
type SharingProfileGroupTypes = original.SharingProfileGroupTypes

const (
	SharingProfileGroupTypesAadTenants    = original.SharingProfileGroupTypesAadTenants
	SharingProfileGroupTypesSubscriptions = original.SharingProfileGroupTypesSubscriptions
)

// SharingUpdateOperationTypes - This property allows you to specify the operation type of gallery sharing update.
// Possible values are:
// Add
// Remove
// Reset
type SharingUpdateOperationTypes = original.SharingUpdateOperationTypes

const (
	SharingUpdateOperationTypesAdd    = original.SharingUpdateOperationTypesAdd
	SharingUpdateOperationTypesRemove = original.SharingUpdateOperationTypesRemove
	SharingUpdateOperationTypesReset  = original.SharingUpdateOperationTypesReset
)

// SnapshotStorageAccountTypes - The sku name.
type SnapshotStorageAccountTypes = original.SnapshotStorageAccountTypes

const ( // SnapshotStorageAccountTypesPremiumLrs - Premium SSD locally redundant storage
	SnapshotStorageAccountTypesPremiumLrs  = original.SnapshotStorageAccountTypesPremiumLrs  // SnapshotStorageAccountTypesStandardLrs - Standard HDD locally redundant storage
	SnapshotStorageAccountTypesStandardLrs = original.SnapshotStorageAccountTypesStandardLrs // SnapshotStorageAccountTypesStandardZrs - Standard zone redundant storage
	SnapshotStorageAccountTypesStandardZrs = original.SnapshotStorageAccountTypesStandardZrs
)

// SoftwareUpdateRebootBehavior - Describes the reboot requirements of the patch.
type SoftwareUpdateRebootBehavior = original.SoftwareUpdateRebootBehavior

const (
	SoftwareUpdateRebootBehaviorAlwaysRequiresReboot = original.SoftwareUpdateRebootBehaviorAlwaysRequiresReboot
	SoftwareUpdateRebootBehaviorCanRequestReboot     = original.SoftwareUpdateRebootBehaviorCanRequestReboot
	SoftwareUpdateRebootBehaviorNeverReboots         = original.SoftwareUpdateRebootBehaviorNeverReboots
)

// StatusLevelTypes - The level code.
type StatusLevelTypes = original.StatusLevelTypes

const (
	StatusLevelTypesInfo    = original.StatusLevelTypesInfo
	StatusLevelTypesWarning = original.StatusLevelTypesWarning
	StatusLevelTypesError   = original.StatusLevelTypesError
)

// StorageAccountType - Specifies the storage account type to be used to store the image. This property is not updatable.
type StorageAccountType = original.StorageAccountType

const (
	StorageAccountTypePremiumLrs  = original.StorageAccountTypePremiumLrs
	StorageAccountTypeStandardLrs = original.StorageAccountTypeStandardLrs
	StorageAccountTypeStandardZrs = original.StorageAccountTypeStandardZrs
)

// StorageAccountTypes - Specifies the storage account type for the managed disk. Managed OS disk storage account type can only be set when you create the
// scale set. NOTE: UltraSSDLRS can only be used with data disks. It
// cannot be used with OS Disk. StandardLRS uses Standard HDD. StandardSSDLRS uses Standard SSD. PremiumLRS uses Premium SSD. UltraSSD_LRS uses Ultra disk.
// For more information regarding disks supported
// for Windows Virtual Machines, refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-types and, for Linux Virtual Machines, refer
// to
// https://docs.microsoft.com/en-us/azure/virtual-machines/linux/disks-types
type StorageAccountTypes = original.StorageAccountTypes

const (
	StorageAccountTypesPremiumLrs     = original.StorageAccountTypesPremiumLrs
	StorageAccountTypesStandardLrs    = original.StorageAccountTypesStandardLrs
	StorageAccountTypesStandardSsdlrs = original.StorageAccountTypesStandardSsdlrs
	StorageAccountTypesUltraSsdlrs    = original.StorageAccountTypesUltraSsdlrs
)

// UpgradeMode - Specifies the mode of an upgrade to virtual machines in the scale set.
// Possible values are:
// Manual - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.
// Automatic - All virtual machines in the scale set are automatically updated at the same time.
type UpgradeMode = original.UpgradeMode

const (
	UpgradeModeAutomatic = original.UpgradeModeAutomatic
	UpgradeModeManual    = original.UpgradeModeManual
	UpgradeModeRolling   = original.UpgradeModeRolling
)

// UpgradeOperationInvoker - Invoker of the Upgrade Operation
type UpgradeOperationInvoker = original.UpgradeOperationInvoker

const (
	UpgradeOperationInvokerUnknown  = original.UpgradeOperationInvokerUnknown
	UpgradeOperationInvokerUser     = original.UpgradeOperationInvokerUser
	UpgradeOperationInvokerPlatform = original.UpgradeOperationInvokerPlatform
)

// UpgradeState - Code indicating the current status of the upgrade.
type UpgradeState = original.UpgradeState

const (
	UpgradeStateRollingForward = original.UpgradeStateRollingForward
	UpgradeStateCancelled      = original.UpgradeStateCancelled
	UpgradeStateCompleted      = original.UpgradeStateCompleted
	UpgradeStateFaulted        = original.UpgradeStateFaulted
)

// VMDiskTypes - VM disk types which are disallowed.
type VMDiskTypes = original.VMDiskTypes

const (
	VMDiskTypesNone      = original.VMDiskTypesNone
	VMDiskTypesUnmanaged = original.VMDiskTypesUnmanaged
)

// VirtualMachineEvictionPolicyTypes - Specifies the eviction policy for the Azure Spot VM/VMSS
type VirtualMachineEvictionPolicyTypes = original.VirtualMachineEvictionPolicyTypes

const (
	VirtualMachineEvictionPolicyTypesDeallocate = original.VirtualMachineEvictionPolicyTypesDeallocate
	VirtualMachineEvictionPolicyTypesDelete     = original.VirtualMachineEvictionPolicyTypesDelete
)

// VirtualMachinePriorityTypes - Specifies the priority for a standalone virtual machine or the virtual machines in the scale set.
// 'Low' enum will be deprecated in the future, please use 'Spot' as the enum to deploy Azure Spot VM/VMSS.
type VirtualMachinePriorityTypes = original.VirtualMachinePriorityTypes

const (
	VirtualMachinePriorityTypesLow     = original.VirtualMachinePriorityTypesLow
	VirtualMachinePriorityTypesRegular = original.VirtualMachinePriorityTypesRegular
	VirtualMachinePriorityTypesSpot    = original.VirtualMachinePriorityTypesSpot
)

// VirtualMachineScaleSetSKUScaleType - The scale type applicable to the sku.
type VirtualMachineScaleSetSKUScaleType = original.VirtualMachineScaleSetSKUScaleType

const (
	VirtualMachineScaleSetSKUScaleTypeAutomatic = original.VirtualMachineScaleSetSKUScaleTypeAutomatic
	VirtualMachineScaleSetSKUScaleTypeNone      = original.VirtualMachineScaleSetSKUScaleTypeNone
)

type VirtualMachineScaleSetScaleInRules = original.VirtualMachineScaleSetScaleInRules

const (
	VirtualMachineScaleSetScaleInRulesDefault  = original.VirtualMachineScaleSetScaleInRulesDefault
	VirtualMachineScaleSetScaleInRulesNewestVM = original.VirtualMachineScaleSetScaleInRulesNewestVM
	VirtualMachineScaleSetScaleInRulesOldestVM = original.VirtualMachineScaleSetScaleInRulesOldestVM
)

// VirtualMachineSizeTypes - Specifies the size of the virtual machine. For more information about virtual machine sizes, see Sizes for virtual machines
// [https://docs.microsoft.com/en-us/azure/virtual-machines/sizes].
// The available VM sizes depend on region and availability set. For a list of available sizes use these APIs:
// List all available virtual machine sizes in an availability set [https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes]
// List all available virtual machine sizes in a region [https://docs.microsoft.com/en-us/rest/api/compute/resourceskus/list]
// List all available virtual machine sizes for resizing [https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes].
// This list of sizes is no longer updated and the VirtualMachineSizeTypes string constants will be removed from the subsequent REST API specification.
// Use List all available virtual machine sizes in a
// region [https://docs.microsoft.com/en-us/rest/api/compute/resourceskus/list] to get the latest sizes.
type VirtualMachineSizeTypes = original.VirtualMachineSizeTypes

const (
	VirtualMachineSizeTypesBasicA0          = original.VirtualMachineSizeTypesBasicA0
	VirtualMachineSizeTypesBasicA1          = original.VirtualMachineSizeTypesBasicA1
	VirtualMachineSizeTypesBasicA2          = original.VirtualMachineSizeTypesBasicA2
	VirtualMachineSizeTypesBasicA3          = original.VirtualMachineSizeTypesBasicA3
	VirtualMachineSizeTypesBasicA4          = original.VirtualMachineSizeTypesBasicA4
	VirtualMachineSizeTypesStandardA0       = original.VirtualMachineSizeTypesStandardA0
	VirtualMachineSizeTypesStandardA1       = original.VirtualMachineSizeTypesStandardA1
	VirtualMachineSizeTypesStandardA10      = original.VirtualMachineSizeTypesStandardA10
	VirtualMachineSizeTypesStandardA11      = original.VirtualMachineSizeTypesStandardA11
	VirtualMachineSizeTypesStandardA1V2     = original.VirtualMachineSizeTypesStandardA1V2
	VirtualMachineSizeTypesStandardA2       = original.VirtualMachineSizeTypesStandardA2
	VirtualMachineSizeTypesStandardA2Mv2    = original.VirtualMachineSizeTypesStandardA2Mv2
	VirtualMachineSizeTypesStandardA2V2     = original.VirtualMachineSizeTypesStandardA2V2
	VirtualMachineSizeTypesStandardA3       = original.VirtualMachineSizeTypesStandardA3
	VirtualMachineSizeTypesStandardA4       = original.VirtualMachineSizeTypesStandardA4
	VirtualMachineSizeTypesStandardA4Mv2    = original.VirtualMachineSizeTypesStandardA4Mv2
	VirtualMachineSizeTypesStandardA4V2     = original.VirtualMachineSizeTypesStandardA4V2
	VirtualMachineSizeTypesStandardA5       = original.VirtualMachineSizeTypesStandardA5
	VirtualMachineSizeTypesStandardA6       = original.VirtualMachineSizeTypesStandardA6
	VirtualMachineSizeTypesStandardA7       = original.VirtualMachineSizeTypesStandardA7
	VirtualMachineSizeTypesStandardA8       = original.VirtualMachineSizeTypesStandardA8
	VirtualMachineSizeTypesStandardA8Mv2    = original.VirtualMachineSizeTypesStandardA8Mv2
	VirtualMachineSizeTypesStandardA8V2     = original.VirtualMachineSizeTypesStandardA8V2
	VirtualMachineSizeTypesStandardA9       = original.VirtualMachineSizeTypesStandardA9
	VirtualMachineSizeTypesStandardB1MS     = original.VirtualMachineSizeTypesStandardB1MS
	VirtualMachineSizeTypesStandardB1S      = original.VirtualMachineSizeTypesStandardB1S
	VirtualMachineSizeTypesStandardB2MS     = original.VirtualMachineSizeTypesStandardB2MS
	VirtualMachineSizeTypesStandardB2S      = original.VirtualMachineSizeTypesStandardB2S
	VirtualMachineSizeTypesStandardB4MS     = original.VirtualMachineSizeTypesStandardB4MS
	VirtualMachineSizeTypesStandardB8MS     = original.VirtualMachineSizeTypesStandardB8MS
	VirtualMachineSizeTypesStandardD1       = original.VirtualMachineSizeTypesStandardD1
	VirtualMachineSizeTypesStandardD11      = original.VirtualMachineSizeTypesStandardD11
	VirtualMachineSizeTypesStandardD11V2    = original.VirtualMachineSizeTypesStandardD11V2
	VirtualMachineSizeTypesStandardD12      = original.VirtualMachineSizeTypesStandardD12
	VirtualMachineSizeTypesStandardD12V2    = original.VirtualMachineSizeTypesStandardD12V2
	VirtualMachineSizeTypesStandardD13      = original.VirtualMachineSizeTypesStandardD13
	VirtualMachineSizeTypesStandardD13V2    = original.VirtualMachineSizeTypesStandardD13V2
	VirtualMachineSizeTypesStandardD14      = original.VirtualMachineSizeTypesStandardD14
	VirtualMachineSizeTypesStandardD14V2    = original.VirtualMachineSizeTypesStandardD14V2
	VirtualMachineSizeTypesStandardD15V2    = original.VirtualMachineSizeTypesStandardD15V2
	VirtualMachineSizeTypesStandardD16Sv3   = original.VirtualMachineSizeTypesStandardD16Sv3
	VirtualMachineSizeTypesStandardD16V3    = original.VirtualMachineSizeTypesStandardD16V3
	VirtualMachineSizeTypesStandardD1V2     = original.VirtualMachineSizeTypesStandardD1V2
	VirtualMachineSizeTypesStandardD2       = original.VirtualMachineSizeTypesStandardD2
	VirtualMachineSizeTypesStandardD2Sv3    = original.VirtualMachineSizeTypesStandardD2Sv3
	VirtualMachineSizeTypesStandardD2V2     = original.VirtualMachineSizeTypesStandardD2V2
	VirtualMachineSizeTypesStandardD2V3     = original.VirtualMachineSizeTypesStandardD2V3
	VirtualMachineSizeTypesStandardD3       = original.VirtualMachineSizeTypesStandardD3
	VirtualMachineSizeTypesStandardD32Sv3   = original.VirtualMachineSizeTypesStandardD32Sv3
	VirtualMachineSizeTypesStandardD32V3    = original.VirtualMachineSizeTypesStandardD32V3
	VirtualMachineSizeTypesStandardD3V2     = original.VirtualMachineSizeTypesStandardD3V2
	VirtualMachineSizeTypesStandardD4       = original.VirtualMachineSizeTypesStandardD4
	VirtualMachineSizeTypesStandardD4Sv3    = original.VirtualMachineSizeTypesStandardD4Sv3
	VirtualMachineSizeTypesStandardD4V2     = original.VirtualMachineSizeTypesStandardD4V2
	VirtualMachineSizeTypesStandardD4V3     = original.VirtualMachineSizeTypesStandardD4V3
	VirtualMachineSizeTypesStandardD5V2     = original.VirtualMachineSizeTypesStandardD5V2
	VirtualMachineSizeTypesStandardD64Sv3   = original.VirtualMachineSizeTypesStandardD64Sv3
	VirtualMachineSizeTypesStandardD64V3    = original.VirtualMachineSizeTypesStandardD64V3
	VirtualMachineSizeTypesStandardD8Sv3    = original.VirtualMachineSizeTypesStandardD8Sv3
	VirtualMachineSizeTypesStandardD8V3     = original.VirtualMachineSizeTypesStandardD8V3
	VirtualMachineSizeTypesStandardDs1      = original.VirtualMachineSizeTypesStandardDs1
	VirtualMachineSizeTypesStandardDs11     = original.VirtualMachineSizeTypesStandardDs11
	VirtualMachineSizeTypesStandardDs11V2   = original.VirtualMachineSizeTypesStandardDs11V2
	VirtualMachineSizeTypesStandardDs12     = original.VirtualMachineSizeTypesStandardDs12
	VirtualMachineSizeTypesStandardDs12V2   = original.VirtualMachineSizeTypesStandardDs12V2
	VirtualMachineSizeTypesStandardDs13     = original.VirtualMachineSizeTypesStandardDs13
	VirtualMachineSizeTypesStandardDs132V2  = original.VirtualMachineSizeTypesStandardDs132V2
	VirtualMachineSizeTypesStandardDs134V2  = original.VirtualMachineSizeTypesStandardDs134V2
	VirtualMachineSizeTypesStandardDs13V2   = original.VirtualMachineSizeTypesStandardDs13V2
	VirtualMachineSizeTypesStandardDs14     = original.VirtualMachineSizeTypesStandardDs14
	VirtualMachineSizeTypesStandardDs144V2  = original.VirtualMachineSizeTypesStandardDs144V2
	VirtualMachineSizeTypesStandardDs148V2  = original.VirtualMachineSizeTypesStandardDs148V2
	VirtualMachineSizeTypesStandardDs14V2   = original.VirtualMachineSizeTypesStandardDs14V2
	VirtualMachineSizeTypesStandardDs15V2   = original.VirtualMachineSizeTypesStandardDs15V2
	VirtualMachineSizeTypesStandardDs1V2    = original.VirtualMachineSizeTypesStandardDs1V2
	VirtualMachineSizeTypesStandardDs2      = original.VirtualMachineSizeTypesStandardDs2
	VirtualMachineSizeTypesStandardDs2V2    = original.VirtualMachineSizeTypesStandardDs2V2
	VirtualMachineSizeTypesStandardDs3      = original.VirtualMachineSizeTypesStandardDs3
	VirtualMachineSizeTypesStandardDs3V2    = original.VirtualMachineSizeTypesStandardDs3V2
	VirtualMachineSizeTypesStandardDs4      = original.VirtualMachineSizeTypesStandardDs4
	VirtualMachineSizeTypesStandardDs4V2    = original.VirtualMachineSizeTypesStandardDs4V2
	VirtualMachineSizeTypesStandardDs5V2    = original.VirtualMachineSizeTypesStandardDs5V2
	VirtualMachineSizeTypesStandardE16Sv3   = original.VirtualMachineSizeTypesStandardE16Sv3
	VirtualMachineSizeTypesStandardE16V3    = original.VirtualMachineSizeTypesStandardE16V3
	VirtualMachineSizeTypesStandardE2Sv3    = original.VirtualMachineSizeTypesStandardE2Sv3
	VirtualMachineSizeTypesStandardE2V3     = original.VirtualMachineSizeTypesStandardE2V3
	VirtualMachineSizeTypesStandardE3216V3  = original.VirtualMachineSizeTypesStandardE3216V3
	VirtualMachineSizeTypesStandardE328Sv3  = original.VirtualMachineSizeTypesStandardE328Sv3
	VirtualMachineSizeTypesStandardE32Sv3   = original.VirtualMachineSizeTypesStandardE32Sv3
	VirtualMachineSizeTypesStandardE32V3    = original.VirtualMachineSizeTypesStandardE32V3
	VirtualMachineSizeTypesStandardE4Sv3    = original.VirtualMachineSizeTypesStandardE4Sv3
	VirtualMachineSizeTypesStandardE4V3     = original.VirtualMachineSizeTypesStandardE4V3
	VirtualMachineSizeTypesStandardE6416Sv3 = original.VirtualMachineSizeTypesStandardE6416Sv3
	VirtualMachineSizeTypesStandardE6432Sv3 = original.VirtualMachineSizeTypesStandardE6432Sv3
	VirtualMachineSizeTypesStandardE64Sv3   = original.VirtualMachineSizeTypesStandardE64Sv3
	VirtualMachineSizeTypesStandardE64V3    = original.VirtualMachineSizeTypesStandardE64V3
	VirtualMachineSizeTypesStandardE8Sv3    = original.VirtualMachineSizeTypesStandardE8Sv3
	VirtualMachineSizeTypesStandardE8V3     = original.VirtualMachineSizeTypesStandardE8V3
	VirtualMachineSizeTypesStandardF1       = original.VirtualMachineSizeTypesStandardF1
	VirtualMachineSizeTypesStandardF16      = original.VirtualMachineSizeTypesStandardF16
	VirtualMachineSizeTypesStandardF16S     = original.VirtualMachineSizeTypesStandardF16S
	VirtualMachineSizeTypesStandardF16Sv2   = original.VirtualMachineSizeTypesStandardF16Sv2
	VirtualMachineSizeTypesStandardF1S      = original.VirtualMachineSizeTypesStandardF1S
	VirtualMachineSizeTypesStandardF2       = original.VirtualMachineSizeTypesStandardF2
	VirtualMachineSizeTypesStandardF2S      = original.VirtualMachineSizeTypesStandardF2S
	VirtualMachineSizeTypesStandardF2Sv2    = original.VirtualMachineSizeTypesStandardF2Sv2
	VirtualMachineSizeTypesStandardF32Sv2   = original.VirtualMachineSizeTypesStandardF32Sv2
	VirtualMachineSizeTypesStandardF4       = original.VirtualMachineSizeTypesStandardF4
	VirtualMachineSizeTypesStandardF4S      = original.VirtualMachineSizeTypesStandardF4S
	VirtualMachineSizeTypesStandardF4Sv2    = original.VirtualMachineSizeTypesStandardF4Sv2
	VirtualMachineSizeTypesStandardF64Sv2   = original.VirtualMachineSizeTypesStandardF64Sv2
	VirtualMachineSizeTypesStandardF72Sv2   = original.VirtualMachineSizeTypesStandardF72Sv2
	VirtualMachineSizeTypesStandardF8       = original.VirtualMachineSizeTypesStandardF8
	VirtualMachineSizeTypesStandardF8S      = original.VirtualMachineSizeTypesStandardF8S
	VirtualMachineSizeTypesStandardF8Sv2    = original.VirtualMachineSizeTypesStandardF8Sv2
	VirtualMachineSizeTypesStandardG1       = original.VirtualMachineSizeTypesStandardG1
	VirtualMachineSizeTypesStandardG2       = original.VirtualMachineSizeTypesStandardG2
	VirtualMachineSizeTypesStandardG3       = original.VirtualMachineSizeTypesStandardG3
	VirtualMachineSizeTypesStandardG4       = original.VirtualMachineSizeTypesStandardG4
	VirtualMachineSizeTypesStandardG5       = original.VirtualMachineSizeTypesStandardG5
	VirtualMachineSizeTypesStandardGs1      = original.VirtualMachineSizeTypesStandardGs1
	VirtualMachineSizeTypesStandardGs2      = original.VirtualMachineSizeTypesStandardGs2
	VirtualMachineSizeTypesStandardGs3      = original.VirtualMachineSizeTypesStandardGs3
	VirtualMachineSizeTypesStandardGs4      = original.VirtualMachineSizeTypesStandardGs4
	VirtualMachineSizeTypesStandardGs44     = original.VirtualMachineSizeTypesStandardGs44
	VirtualMachineSizeTypesStandardGs48     = original.VirtualMachineSizeTypesStandardGs48
	VirtualMachineSizeTypesStandardGs5      = original.VirtualMachineSizeTypesStandardGs5
	VirtualMachineSizeTypesStandardGs516    = original.VirtualMachineSizeTypesStandardGs516
	VirtualMachineSizeTypesStandardGs58     = original.VirtualMachineSizeTypesStandardGs58
	VirtualMachineSizeTypesStandardH16      = original.VirtualMachineSizeTypesStandardH16
	VirtualMachineSizeTypesStandardH16M     = original.VirtualMachineSizeTypesStandardH16M
	VirtualMachineSizeTypesStandardH16Mr    = original.VirtualMachineSizeTypesStandardH16Mr
	VirtualMachineSizeTypesStandardH16R     = original.VirtualMachineSizeTypesStandardH16R
	VirtualMachineSizeTypesStandardH8       = original.VirtualMachineSizeTypesStandardH8
	VirtualMachineSizeTypesStandardH8M      = original.VirtualMachineSizeTypesStandardH8M
	VirtualMachineSizeTypesStandardL16S     = original.VirtualMachineSizeTypesStandardL16S
	VirtualMachineSizeTypesStandardL32S     = original.VirtualMachineSizeTypesStandardL32S
	VirtualMachineSizeTypesStandardL4S      = original.VirtualMachineSizeTypesStandardL4S
	VirtualMachineSizeTypesStandardL8S      = original.VirtualMachineSizeTypesStandardL8S
	VirtualMachineSizeTypesStandardM12832MS = original.VirtualMachineSizeTypesStandardM12832MS
	VirtualMachineSizeTypesStandardM12864MS = original.VirtualMachineSizeTypesStandardM12864MS
	VirtualMachineSizeTypesStandardM128MS   = original.VirtualMachineSizeTypesStandardM128MS
	VirtualMachineSizeTypesStandardM128S    = original.VirtualMachineSizeTypesStandardM128S
	VirtualMachineSizeTypesStandardM6416MS  = original.VirtualMachineSizeTypesStandardM6416MS
	VirtualMachineSizeTypesStandardM6432MS  = original.VirtualMachineSizeTypesStandardM6432MS
	VirtualMachineSizeTypesStandardM64MS    = original.VirtualMachineSizeTypesStandardM64MS
	VirtualMachineSizeTypesStandardM64S     = original.VirtualMachineSizeTypesStandardM64S
	VirtualMachineSizeTypesStandardNc12     = original.VirtualMachineSizeTypesStandardNc12
	VirtualMachineSizeTypesStandardNc12Sv2  = original.VirtualMachineSizeTypesStandardNc12Sv2
	VirtualMachineSizeTypesStandardNc12Sv3  = original.VirtualMachineSizeTypesStandardNc12Sv3
	VirtualMachineSizeTypesStandardNc24     = original.VirtualMachineSizeTypesStandardNc24
	VirtualMachineSizeTypesStandardNc24R    = original.VirtualMachineSizeTypesStandardNc24R
	VirtualMachineSizeTypesStandardNc24RsV2 = original.VirtualMachineSizeTypesStandardNc24RsV2
	VirtualMachineSizeTypesStandardNc24RsV3 = original.VirtualMachineSizeTypesStandardNc24RsV3
	VirtualMachineSizeTypesStandardNc24Sv2  = original.VirtualMachineSizeTypesStandardNc24Sv2
	VirtualMachineSizeTypesStandardNc24Sv3  = original.VirtualMachineSizeTypesStandardNc24Sv3
	VirtualMachineSizeTypesStandardNc6      = original.VirtualMachineSizeTypesStandardNc6
	VirtualMachineSizeTypesStandardNc6Sv2   = original.VirtualMachineSizeTypesStandardNc6Sv2
	VirtualMachineSizeTypesStandardNc6Sv3   = original.VirtualMachineSizeTypesStandardNc6Sv3
	VirtualMachineSizeTypesStandardNd12S    = original.VirtualMachineSizeTypesStandardNd12S
	VirtualMachineSizeTypesStandardNd24Rs   = original.VirtualMachineSizeTypesStandardNd24Rs
	VirtualMachineSizeTypesStandardNd24S    = original.VirtualMachineSizeTypesStandardNd24S
	VirtualMachineSizeTypesStandardNd6S     = original.VirtualMachineSizeTypesStandardNd6S
	VirtualMachineSizeTypesStandardNv12     = original.VirtualMachineSizeTypesStandardNv12
	VirtualMachineSizeTypesStandardNv24     = original.VirtualMachineSizeTypesStandardNv24
	VirtualMachineSizeTypesStandardNv6      = original.VirtualMachineSizeTypesStandardNv6
)

// The API entity reference.
type APIEntityReference = original.APIEntityReference

// Api error.
type APIError = original.APIError

// Api error base.
type APIErrorBase = original.APIErrorBase

// A disk access SAS uri.
type AccessURI = original.AccessURI

// AccessURIPoller provides polling facilities until the operation completes
type AccessURIPoller = original.AccessURIPoller

// AccessURIPollerResponse is the response envelope for operations that asynchronously return a AccessURI type.
type AccessURIPollerResponse = original.AccessURIPollerResponse

// AccessURIResponse is the response envelope for operations that return a AccessURI type.
type AccessURIResponse = original.AccessURIResponse

// Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilities = original.AdditionalCapabilities

// Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by
// setting name, component name, and the pass in
// which the content is applied.
type AdditionalUnattendContent = original.AdditionalUnattendContent

// The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicy = original.AutomaticOSUpgradePolicy

// Describes automatic OS upgrade properties on the image.
type AutomaticOSUpgradeProperties = original.AutomaticOSUpgradeProperties

// Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicy = original.AutomaticRepairsPolicy

// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability
// set are allocated to different nodes to maximize
// availability. For more information about availability sets, see Manage the availability of virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
// For more information on Azure planned maintenance, see Planned maintenance for virtual machines in Azure
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json]
// Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
type AvailabilitySet = original.AvailabilitySet

// The List Availability Set operation response.
type AvailabilitySetListResult = original.AvailabilitySetListResult

// AvailabilitySetListResultPager provides iteration over AvailabilitySetListResult pages.
type AvailabilitySetListResultPager = original.AvailabilitySetListResultPager

// AvailabilitySetListResultResponse is the response envelope for operations that return a AvailabilitySetListResult type.
type AvailabilitySetListResultResponse = original.AvailabilitySetListResultResponse

// The instance view of a resource.
type AvailabilitySetProperties = original.AvailabilitySetProperties

// AvailabilitySetResponse is the response envelope for operations that return a AvailabilitySet type.
type AvailabilitySetResponse = original.AvailabilitySetResponse

// Specifies information about the availability set that the virtual machine should be assigned to. Only tags may be updated.
type AvailabilitySetUpdate = original.AvailabilitySetUpdate

// AvailabilitySetsClient contains the methods for the AvailabilitySets group.
// Don't use this type directly, use NewAvailabilitySetsClient() instead.
type AvailabilitySetsClient = original.AvailabilitySetsClient

// AvailabilitySetsCreateOrUpdateOptions contains the optional parameters for the AvailabilitySets.CreateOrUpdate method.
type AvailabilitySetsCreateOrUpdateOptions = original.AvailabilitySetsCreateOrUpdateOptions

// AvailabilitySetsDeleteOptions contains the optional parameters for the AvailabilitySets.Delete method.
type AvailabilitySetsDeleteOptions = original.AvailabilitySetsDeleteOptions

// AvailabilitySetsGetOptions contains the optional parameters for the AvailabilitySets.Get method.
type AvailabilitySetsGetOptions = original.AvailabilitySetsGetOptions

// AvailabilitySetsListAvailableSizesOptions contains the optional parameters for the AvailabilitySets.ListAvailableSizes method.
type AvailabilitySetsListAvailableSizesOptions = original.AvailabilitySetsListAvailableSizesOptions

// AvailabilitySetsListBySubscriptionOptions contains the optional parameters for the AvailabilitySets.ListBySubscription method.
type AvailabilitySetsListBySubscriptionOptions = original.AvailabilitySetsListBySubscriptionOptions

// AvailabilitySetsListOptions contains the optional parameters for the AvailabilitySets.List method.
type AvailabilitySetsListOptions = original.AvailabilitySetsListOptions

// AvailabilitySetsUpdateOptions contains the optional parameters for the AvailabilitySets.Update method.
type AvailabilitySetsUpdateOptions = original.AvailabilitySetsUpdateOptions

// Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummary = original.AvailablePatchSummary

// Specifies the billing related details of a Azure Spot VM or VMSS.
// Minimum api-version: 2019-03-01.
type BillingProfile = original.BillingProfile

// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
// You can easily view the output of your console log.
// Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnostics = original.BootDiagnostics

// The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceView = original.BootDiagnosticsInstanceView

// An error response from the Compute service.
type CloudError = original.CloudError

// The List Compute Operation operation response.
type ComputeOperationListResult = original.ComputeOperationListResult

// ComputeOperationListResultResponse is the response envelope for operations that return a ComputeOperationListResult type.
type ComputeOperationListResultResponse = original.ComputeOperationListResultResponse

// Describes the properties of a Compute Operation value.
type ComputeOperationValue = original.ComputeOperationValue

// Describes the properties of a Compute Operation Value Display.
type ComputeOperationValueDisplay = original.ComputeOperationValueDisplay

// Container service.
type ContainerService = original.ContainerService

// Profile for the container service agent pool.
type ContainerServiceAgentPoolProfile = original.ContainerServiceAgentPoolProfile

// Properties to configure a custom container service cluster.
type ContainerServiceCustomProfile = original.ContainerServiceCustomProfile
type ContainerServiceDiagnosticsProfile = original.ContainerServiceDiagnosticsProfile

// Profile for Linux VMs in the container service cluster.
type ContainerServiceLinuxProfile = original.ContainerServiceLinuxProfile

// The response from the List Container Services operation.
type ContainerServiceListResult = original.ContainerServiceListResult

// ContainerServiceListResultPager provides iteration over ContainerServiceListResult pages.
type ContainerServiceListResultPager = original.ContainerServiceListResultPager

// ContainerServiceListResultResponse is the response envelope for operations that return a ContainerServiceListResult type.
type ContainerServiceListResultResponse = original.ContainerServiceListResultResponse

// Profile for the container service master.
type ContainerServiceMasterProfile = original.ContainerServiceMasterProfile

// Profile for the container service orchestrator.
type ContainerServiceOrchestratorProfile = original.ContainerServiceOrchestratorProfile

// ContainerServicePoller provides polling facilities until the operation completes
type ContainerServicePoller = original.ContainerServicePoller

// ContainerServicePollerResponse is the response envelope for operations that asynchronously return a ContainerService type.
type ContainerServicePollerResponse = original.ContainerServicePollerResponse

// Information about a service principal identity for the cluster to use for manipulating Azure APIs.
type ContainerServicePrincipalProfile = original.ContainerServicePrincipalProfile

// Properties of the container service.
type ContainerServiceProperties = original.ContainerServiceProperties

// ContainerServiceResponse is the response envelope for operations that return a ContainerService type.
type ContainerServiceResponse = original.ContainerServiceResponse

// SSH configuration for Linux-based VMs running on Azure.
type ContainerServiceSSHConfiguration = original.ContainerServiceSSHConfiguration

// Contains information about SSH certificate public key data.
type ContainerServiceSSHPublicKey = original.ContainerServiceSSHPublicKey

// Profile for diagnostics on the container service VMs.
type ContainerServiceVMDiagnostics = original.ContainerServiceVMDiagnostics

// Profile for Windows VMs in the container service cluster.
type ContainerServiceWindowsProfile = original.ContainerServiceWindowsProfile

// ContainerServicesBeginCreateOrUpdateOptions contains the optional parameters for the ContainerServices.BeginCreateOrUpdate method.
type ContainerServicesBeginCreateOrUpdateOptions = original.ContainerServicesBeginCreateOrUpdateOptions

// ContainerServicesBeginDeleteOptions contains the optional parameters for the ContainerServices.BeginDelete method.
type ContainerServicesBeginDeleteOptions = original.ContainerServicesBeginDeleteOptions

// ContainerServicesClient contains the methods for the ContainerServices group.
// Don't use this type directly, use NewContainerServicesClient() instead.
type ContainerServicesClient = original.ContainerServicesClient

// ContainerServicesGetOptions contains the optional parameters for the ContainerServices.Get method.
type ContainerServicesGetOptions = original.ContainerServicesGetOptions

// ContainerServicesListByResourceGroupOptions contains the optional parameters for the ContainerServices.ListByResourceGroup method.
type ContainerServicesListByResourceGroupOptions = original.ContainerServicesListByResourceGroupOptions

// ContainerServicesListOptions contains the optional parameters for the ContainerServices.List method.
type ContainerServicesListOptions = original.ContainerServicesListOptions

// Data used when creating a disk.
type CreationData = original.CreationData

// Describes a data disk.
type DataDisk = original.DataDisk

// Contains the data disk images information.
type DataDiskImage = original.DataDiskImage

// Contains encryption settings for a data disk image.
type DataDiskImageEncryption = original.DataDiskImageEncryption

// Specifies information about the Dedicated host.
type DedicatedHost = original.DedicatedHost

// Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVM = original.DedicatedHostAllocatableVM

// Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacity = original.DedicatedHostAvailableCapacity

// Specifies information about the dedicated host group that the dedicated hosts should be assigned to.
// Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot be added to another dedicated
// host group.
type DedicatedHostGroup = original.DedicatedHostGroup
type DedicatedHostGroupInstanceView = original.DedicatedHostGroupInstanceView

// The List Dedicated Host Group with resource group response.
type DedicatedHostGroupListResult = original.DedicatedHostGroupListResult

// DedicatedHostGroupListResultPager provides iteration over DedicatedHostGroupListResult pages.
type DedicatedHostGroupListResultPager = original.DedicatedHostGroupListResultPager

// DedicatedHostGroupListResultResponse is the response envelope for operations that return a DedicatedHostGroupListResult type.
type DedicatedHostGroupListResultResponse = original.DedicatedHostGroupListResultResponse

// Dedicated Host Group Properties.
type DedicatedHostGroupProperties = original.DedicatedHostGroupProperties

// DedicatedHostGroupResponse is the response envelope for operations that return a DedicatedHostGroup type.
type DedicatedHostGroupResponse = original.DedicatedHostGroupResponse

// Specifies information about the dedicated host group that the dedicated host should be assigned to. Only tags may be updated.
type DedicatedHostGroupUpdate = original.DedicatedHostGroupUpdate

// DedicatedHostGroupsClient contains the methods for the DedicatedHostGroups group.
// Don't use this type directly, use NewDedicatedHostGroupsClient() instead.
type DedicatedHostGroupsClient = original.DedicatedHostGroupsClient

// DedicatedHostGroupsCreateOrUpdateOptions contains the optional parameters for the DedicatedHostGroups.CreateOrUpdate method.
type DedicatedHostGroupsCreateOrUpdateOptions = original.DedicatedHostGroupsCreateOrUpdateOptions

// DedicatedHostGroupsDeleteOptions contains the optional parameters for the DedicatedHostGroups.Delete method.
type DedicatedHostGroupsDeleteOptions = original.DedicatedHostGroupsDeleteOptions

// DedicatedHostGroupsGetOptions contains the optional parameters for the DedicatedHostGroups.Get method.
type DedicatedHostGroupsGetOptions = original.DedicatedHostGroupsGetOptions

// DedicatedHostGroupsListByResourceGroupOptions contains the optional parameters for the DedicatedHostGroups.ListByResourceGroup method.
type DedicatedHostGroupsListByResourceGroupOptions = original.DedicatedHostGroupsListByResourceGroupOptions

// DedicatedHostGroupsListBySubscriptionOptions contains the optional parameters for the DedicatedHostGroups.ListBySubscription method.
type DedicatedHostGroupsListBySubscriptionOptions = original.DedicatedHostGroupsListBySubscriptionOptions

// DedicatedHostGroupsUpdateOptions contains the optional parameters for the DedicatedHostGroups.Update method.
type DedicatedHostGroupsUpdateOptions = original.DedicatedHostGroupsUpdateOptions

// The instance view of a dedicated host.
type DedicatedHostInstanceView = original.DedicatedHostInstanceView

// The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host
// group.
type DedicatedHostInstanceViewWithName = original.DedicatedHostInstanceViewWithName

// The list dedicated host operation response.
type DedicatedHostListResult = original.DedicatedHostListResult

// DedicatedHostListResultPager provides iteration over DedicatedHostListResult pages.
type DedicatedHostListResultPager = original.DedicatedHostListResultPager

// DedicatedHostListResultResponse is the response envelope for operations that return a DedicatedHostListResult type.
type DedicatedHostListResultResponse = original.DedicatedHostListResultResponse

// DedicatedHostPoller provides polling facilities until the operation completes
type DedicatedHostPoller = original.DedicatedHostPoller

// DedicatedHostPollerResponse is the response envelope for operations that asynchronously return a DedicatedHost type.
type DedicatedHostPollerResponse = original.DedicatedHostPollerResponse

// Properties of the dedicated host.
type DedicatedHostProperties = original.DedicatedHostProperties

// DedicatedHostResponse is the response envelope for operations that return a DedicatedHost type.
type DedicatedHostResponse = original.DedicatedHostResponse

// Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may be updated.
type DedicatedHostUpdate = original.DedicatedHostUpdate

// DedicatedHostsBeginCreateOrUpdateOptions contains the optional parameters for the DedicatedHosts.BeginCreateOrUpdate method.
type DedicatedHostsBeginCreateOrUpdateOptions = original.DedicatedHostsBeginCreateOrUpdateOptions

// DedicatedHostsBeginDeleteOptions contains the optional parameters for the DedicatedHosts.BeginDelete method.
type DedicatedHostsBeginDeleteOptions = original.DedicatedHostsBeginDeleteOptions

// DedicatedHostsBeginUpdateOptions contains the optional parameters for the DedicatedHosts.BeginUpdate method.
type DedicatedHostsBeginUpdateOptions = original.DedicatedHostsBeginUpdateOptions

// DedicatedHostsClient contains the methods for the DedicatedHosts group.
// Don't use this type directly, use NewDedicatedHostsClient() instead.
type DedicatedHostsClient = original.DedicatedHostsClient

// DedicatedHostsGetOptions contains the optional parameters for the DedicatedHosts.Get method.
type DedicatedHostsGetOptions = original.DedicatedHostsGetOptions

// DedicatedHostsListByHostGroupOptions contains the optional parameters for the DedicatedHosts.ListByHostGroup method.
type DedicatedHostsListByHostGroupOptions = original.DedicatedHostsListByHostGroupOptions

// Specifies the boot diagnostic settings state.
// Minimum api-version: 2015-06-15.
type DiagnosticsProfile = original.DiagnosticsProfile

// Describes the parameters of ephemeral disk settings that can be specified for operating system disk.
// NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettings = original.DiffDiskSettings

// Describes the disallowed disk types.
type Disallowed = original.Disallowed

// Specifies the disallowed configuration for a virtual machine image.
type DisallowedConfiguration = original.DisallowedConfiguration

// Disk resource.
type Disk = original.Disk

// disk access resource.
type DiskAccess = original.DiskAccess

// The List disk access operation response.
type DiskAccessList = original.DiskAccessList

// DiskAccessListPager provides iteration over DiskAccessList pages.
type DiskAccessListPager = original.DiskAccessListPager

// DiskAccessListResponse is the response envelope for operations that return a DiskAccessList type.
type DiskAccessListResponse = original.DiskAccessListResponse

// DiskAccessPoller provides polling facilities until the operation completes
type DiskAccessPoller = original.DiskAccessPoller

// DiskAccessPollerResponse is the response envelope for operations that asynchronously return a DiskAccess type.
type DiskAccessPollerResponse = original.DiskAccessPollerResponse
type DiskAccessProperties = original.DiskAccessProperties

// DiskAccessResponse is the response envelope for operations that return a DiskAccess type.
type DiskAccessResponse = original.DiskAccessResponse

// Used for updating a disk access resource.
type DiskAccessUpdate = original.DiskAccessUpdate

// DiskAccessesBeginCreateOrUpdateOptions contains the optional parameters for the DiskAccesses.BeginCreateOrUpdate method.
type DiskAccessesBeginCreateOrUpdateOptions = original.DiskAccessesBeginCreateOrUpdateOptions

// DiskAccessesBeginDeleteOptions contains the optional parameters for the DiskAccesses.BeginDelete method.
type DiskAccessesBeginDeleteOptions = original.DiskAccessesBeginDeleteOptions

// DiskAccessesBeginUpdateOptions contains the optional parameters for the DiskAccesses.BeginUpdate method.
type DiskAccessesBeginUpdateOptions = original.DiskAccessesBeginUpdateOptions

// DiskAccessesClient contains the methods for the DiskAccesses group.
// Don't use this type directly, use NewDiskAccessesClient() instead.
type DiskAccessesClient = original.DiskAccessesClient

// DiskAccessesGetOptions contains the optional parameters for the DiskAccesses.Get method.
type DiskAccessesGetOptions = original.DiskAccessesGetOptions

// DiskAccessesGetPrivateLinkResourcesOptions contains the optional parameters for the DiskAccesses.GetPrivateLinkResources method.
type DiskAccessesGetPrivateLinkResourcesOptions = original.DiskAccessesGetPrivateLinkResourcesOptions

// DiskAccessesListByResourceGroupOptions contains the optional parameters for the DiskAccesses.ListByResourceGroup method.
type DiskAccessesListByResourceGroupOptions = original.DiskAccessesListByResourceGroupOptions

// DiskAccessesListOptions contains the optional parameters for the DiskAccesses.List method.
type DiskAccessesListOptions = original.DiskAccessesListOptions

// disk encryption set resource.
type DiskEncryptionSet = original.DiskEncryptionSet

// The List disk encryption set operation response.
type DiskEncryptionSetList = original.DiskEncryptionSetList

// DiskEncryptionSetListPager provides iteration over DiskEncryptionSetList pages.
type DiskEncryptionSetListPager = original.DiskEncryptionSetListPager

// DiskEncryptionSetListResponse is the response envelope for operations that return a DiskEncryptionSetList type.
type DiskEncryptionSetListResponse = original.DiskEncryptionSetListResponse

// Describes the parameter of customer managed disk encryption set resource id that can be specified for disk.
// NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.
type DiskEncryptionSetParameters = original.DiskEncryptionSetParameters

// DiskEncryptionSetPoller provides polling facilities until the operation completes
type DiskEncryptionSetPoller = original.DiskEncryptionSetPoller

// DiskEncryptionSetPollerResponse is the response envelope for operations that asynchronously return a DiskEncryptionSet type.
type DiskEncryptionSetPollerResponse = original.DiskEncryptionSetPollerResponse

// DiskEncryptionSetResponse is the response envelope for operations that return a DiskEncryptionSet type.
type DiskEncryptionSetResponse = original.DiskEncryptionSetResponse

// disk encryption set update resource.
type DiskEncryptionSetUpdate = original.DiskEncryptionSetUpdate

// disk encryption set resource update properties.
type DiskEncryptionSetUpdateProperties = original.DiskEncryptionSetUpdateProperties

// DiskEncryptionSetsBeginCreateOrUpdateOptions contains the optional parameters for the DiskEncryptionSets.BeginCreateOrUpdate method.
type DiskEncryptionSetsBeginCreateOrUpdateOptions = original.DiskEncryptionSetsBeginCreateOrUpdateOptions

// DiskEncryptionSetsBeginDeleteOptions contains the optional parameters for the DiskEncryptionSets.BeginDelete method.
type DiskEncryptionSetsBeginDeleteOptions = original.DiskEncryptionSetsBeginDeleteOptions

// DiskEncryptionSetsBeginUpdateOptions contains the optional parameters for the DiskEncryptionSets.BeginUpdate method.
type DiskEncryptionSetsBeginUpdateOptions = original.DiskEncryptionSetsBeginUpdateOptions

// DiskEncryptionSetsClient contains the methods for the DiskEncryptionSets group.
// Don't use this type directly, use NewDiskEncryptionSetsClient() instead.
type DiskEncryptionSetsClient = original.DiskEncryptionSetsClient

// DiskEncryptionSetsGetOptions contains the optional parameters for the DiskEncryptionSets.Get method.
type DiskEncryptionSetsGetOptions = original.DiskEncryptionSetsGetOptions

// DiskEncryptionSetsListAssociatedResourcesOptions contains the optional parameters for the DiskEncryptionSets.ListAssociatedResources method.
type DiskEncryptionSetsListAssociatedResourcesOptions = original.DiskEncryptionSetsListAssociatedResourcesOptions

// DiskEncryptionSetsListByResourceGroupOptions contains the optional parameters for the DiskEncryptionSets.ListByResourceGroup method.
type DiskEncryptionSetsListByResourceGroupOptions = original.DiskEncryptionSetsListByResourceGroupOptions

// DiskEncryptionSetsListOptions contains the optional parameters for the DiskEncryptionSets.List method.
type DiskEncryptionSetsListOptions = original.DiskEncryptionSetsListOptions

// Describes a Encryption Settings for a Disk
type DiskEncryptionSettings = original.DiskEncryptionSettings

// This is the disk image encryption base class.
type DiskImageEncryption = original.DiskImageEncryption

// The instance view of the disk.
type DiskInstanceView = original.DiskInstanceView

// The List Disks operation response.
type DiskList = original.DiskList

// DiskListPager provides iteration over DiskList pages.
type DiskListPager = original.DiskListPager

// DiskListResponse is the response envelope for operations that return a DiskList type.
type DiskListResponse = original.DiskListResponse

// DiskPoller provides polling facilities until the operation completes
type DiskPoller = original.DiskPoller

// DiskPollerResponse is the response envelope for operations that asynchronously return a Disk type.
type DiskPollerResponse = original.DiskPollerResponse

// Disk resource properties.
type DiskProperties = original.DiskProperties

// DiskResponse is the response envelope for operations that return a Disk type.
type DiskResponse = original.DiskResponse

// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, or UltraSSDLRS.
type DiskSKU = original.DiskSKU

// Disk update resource.
type DiskUpdate = original.DiskUpdate

// Disk resource update properties.
type DiskUpdateProperties = original.DiskUpdateProperties

// DisksBeginCreateOrUpdateOptions contains the optional parameters for the Disks.BeginCreateOrUpdate method.
type DisksBeginCreateOrUpdateOptions = original.DisksBeginCreateOrUpdateOptions

// DisksBeginDeleteOptions contains the optional parameters for the Disks.BeginDelete method.
type DisksBeginDeleteOptions = original.DisksBeginDeleteOptions

// DisksBeginGrantAccessOptions contains the optional parameters for the Disks.BeginGrantAccess method.
type DisksBeginGrantAccessOptions = original.DisksBeginGrantAccessOptions

// DisksBeginRevokeAccessOptions contains the optional parameters for the Disks.BeginRevokeAccess method.
type DisksBeginRevokeAccessOptions = original.DisksBeginRevokeAccessOptions

// DisksBeginUpdateOptions contains the optional parameters for the Disks.BeginUpdate method.
type DisksBeginUpdateOptions = original.DisksBeginUpdateOptions

// DisksClient contains the methods for the Disks group.
// Don't use this type directly, use NewDisksClient() instead.
type DisksClient = original.DisksClient

// DisksGetOptions contains the optional parameters for the Disks.Get method.
type DisksGetOptions = original.DisksGetOptions

// DisksListByResourceGroupOptions contains the optional parameters for the Disks.ListByResourceGroup method.
type DisksListByResourceGroupOptions = original.DisksListByResourceGroupOptions

// DisksListOptions contains the optional parameters for the Disks.List method.
type DisksListOptions = original.DisksListOptions

// Encryption at rest settings for disk or snapshot
type Encryption = original.Encryption

// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
type EncryptionImages = original.EncryptionImages

// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
type EncryptionSetIDentity = original.EncryptionSetIDentity
type EncryptionSetProperties = original.EncryptionSetProperties

// Encryption settings for disk or snapshot
type EncryptionSettingsCollection = original.EncryptionSettingsCollection

// Encryption settings for one disk volume.
type EncryptionSettingsElement = original.EncryptionSettingsElement

// GalleriesBeginCreateOrUpdateOptions contains the optional parameters for the Galleries.BeginCreateOrUpdate method.
type GalleriesBeginCreateOrUpdateOptions = original.GalleriesBeginCreateOrUpdateOptions

// GalleriesBeginDeleteOptions contains the optional parameters for the Galleries.BeginDelete method.
type GalleriesBeginDeleteOptions = original.GalleriesBeginDeleteOptions

// GalleriesBeginUpdateOptions contains the optional parameters for the Galleries.BeginUpdate method.
type GalleriesBeginUpdateOptions = original.GalleriesBeginUpdateOptions

// GalleriesClient contains the methods for the Galleries group.
// Don't use this type directly, use NewGalleriesClient() instead.
type GalleriesClient = original.GalleriesClient

// GalleriesGetOptions contains the optional parameters for the Galleries.Get method.
type GalleriesGetOptions = original.GalleriesGetOptions

// GalleriesListByResourceGroupOptions contains the optional parameters for the Galleries.ListByResourceGroup method.
type GalleriesListByResourceGroupOptions = original.GalleriesListByResourceGroupOptions

// GalleriesListOptions contains the optional parameters for the Galleries.List method.
type GalleriesListOptions = original.GalleriesListOptions

// Specifies information about the Shared Image Gallery that you want to create or update.
type Gallery = original.Gallery

// Specifies information about the gallery Application Definition that you want to create or update.
type GalleryApplication = original.GalleryApplication

// The List Gallery Applications operation response.
type GalleryApplicationList = original.GalleryApplicationList

// GalleryApplicationListPager provides iteration over GalleryApplicationList pages.
type GalleryApplicationListPager = original.GalleryApplicationListPager

// GalleryApplicationListResponse is the response envelope for operations that return a GalleryApplicationList type.
type GalleryApplicationListResponse = original.GalleryApplicationListResponse

// GalleryApplicationPoller provides polling facilities until the operation completes
type GalleryApplicationPoller = original.GalleryApplicationPoller

// GalleryApplicationPollerResponse is the response envelope for operations that asynchronously return a GalleryApplication type.
type GalleryApplicationPollerResponse = original.GalleryApplicationPollerResponse

// Describes the properties of a gallery Application Definition.
type GalleryApplicationProperties = original.GalleryApplicationProperties

// GalleryApplicationResponse is the response envelope for operations that return a GalleryApplication type.
type GalleryApplicationResponse = original.GalleryApplicationResponse

// Specifies information about the gallery Application Definition that you want to update.
type GalleryApplicationUpdate = original.GalleryApplicationUpdate

// Specifies information about the gallery Application Version that you want to create or update.
type GalleryApplicationVersion = original.GalleryApplicationVersion

// The List Gallery Application version operation response.
type GalleryApplicationVersionList = original.GalleryApplicationVersionList

// GalleryApplicationVersionListPager provides iteration over GalleryApplicationVersionList pages.
type GalleryApplicationVersionListPager = original.GalleryApplicationVersionListPager

// GalleryApplicationVersionListResponse is the response envelope for operations that return a GalleryApplicationVersionList type.
type GalleryApplicationVersionListResponse = original.GalleryApplicationVersionListResponse

// GalleryApplicationVersionPoller provides polling facilities until the operation completes
type GalleryApplicationVersionPoller = original.GalleryApplicationVersionPoller

// GalleryApplicationVersionPollerResponse is the response envelope for operations that asynchronously return a GalleryApplicationVersion type.
type GalleryApplicationVersionPollerResponse = original.GalleryApplicationVersionPollerResponse

// Describes the properties of a gallery image version.
type GalleryApplicationVersionProperties = original.GalleryApplicationVersionProperties

// The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfile = original.GalleryApplicationVersionPublishingProfile

// GalleryApplicationVersionResponse is the response envelope for operations that return a GalleryApplicationVersion type.
type GalleryApplicationVersionResponse = original.GalleryApplicationVersionResponse

// Specifies information about the gallery Application Version that you want to update.
type GalleryApplicationVersionUpdate = original.GalleryApplicationVersionUpdate

// GalleryApplicationVersionsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryApplicationVersions.BeginCreateOrUpdate method.
type GalleryApplicationVersionsBeginCreateOrUpdateOptions = original.GalleryApplicationVersionsBeginCreateOrUpdateOptions

// GalleryApplicationVersionsBeginDeleteOptions contains the optional parameters for the GalleryApplicationVersions.BeginDelete method.
type GalleryApplicationVersionsBeginDeleteOptions = original.GalleryApplicationVersionsBeginDeleteOptions

// GalleryApplicationVersionsBeginUpdateOptions contains the optional parameters for the GalleryApplicationVersions.BeginUpdate method.
type GalleryApplicationVersionsBeginUpdateOptions = original.GalleryApplicationVersionsBeginUpdateOptions

// GalleryApplicationVersionsClient contains the methods for the GalleryApplicationVersions group.
// Don't use this type directly, use NewGalleryApplicationVersionsClient() instead.
type GalleryApplicationVersionsClient = original.GalleryApplicationVersionsClient

// GalleryApplicationVersionsGetOptions contains the optional parameters for the GalleryApplicationVersions.Get method.
type GalleryApplicationVersionsGetOptions = original.GalleryApplicationVersionsGetOptions

// GalleryApplicationVersionsListByGalleryApplicationOptions contains the optional parameters for the GalleryApplicationVersions.ListByGalleryApplication
// method.
type GalleryApplicationVersionsListByGalleryApplicationOptions = original.GalleryApplicationVersionsListByGalleryApplicationOptions

// GalleryApplicationsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryApplications.BeginCreateOrUpdate method.
type GalleryApplicationsBeginCreateOrUpdateOptions = original.GalleryApplicationsBeginCreateOrUpdateOptions

// GalleryApplicationsBeginDeleteOptions contains the optional parameters for the GalleryApplications.BeginDelete method.
type GalleryApplicationsBeginDeleteOptions = original.GalleryApplicationsBeginDeleteOptions

// GalleryApplicationsBeginUpdateOptions contains the optional parameters for the GalleryApplications.BeginUpdate method.
type GalleryApplicationsBeginUpdateOptions = original.GalleryApplicationsBeginUpdateOptions

// GalleryApplicationsClient contains the methods for the GalleryApplications group.
// Don't use this type directly, use NewGalleryApplicationsClient() instead.
type GalleryApplicationsClient = original.GalleryApplicationsClient

// GalleryApplicationsGetOptions contains the optional parameters for the GalleryApplications.Get method.
type GalleryApplicationsGetOptions = original.GalleryApplicationsGetOptions

// GalleryApplicationsListByGalleryOptions contains the optional parameters for the GalleryApplications.ListByGallery method.
type GalleryApplicationsListByGalleryOptions = original.GalleryApplicationsListByGalleryOptions

// Describes the basic gallery artifact publishing profile.
type GalleryArtifactPublishingProfileBase = original.GalleryArtifactPublishingProfileBase

// The source image from which the Image Version is going to be created.
type GalleryArtifactSource = original.GalleryArtifactSource

// The gallery artifact version source.
type GalleryArtifactVersionSource = original.GalleryArtifactVersionSource

// This is the data disk image.
type GalleryDataDiskImage = original.GalleryDataDiskImage

// This is the disk image base class.
type GalleryDiskImage = original.GalleryDiskImage

// Describes the gallery unique name.
type GalleryIDentifier = original.GalleryIDentifier

// Specifies information about the gallery image definition that you want to create or update.
type GalleryImage = original.GalleryImage

// A feature for gallery image.
type GalleryImageFeature = original.GalleryImageFeature

// This is the gallery image definition identifier.
type GalleryImageIDentifier = original.GalleryImageIDentifier

// The List Gallery Images operation response.
type GalleryImageList = original.GalleryImageList

// GalleryImageListPager provides iteration over GalleryImageList pages.
type GalleryImageListPager = original.GalleryImageListPager

// GalleryImageListResponse is the response envelope for operations that return a GalleryImageList type.
type GalleryImageListResponse = original.GalleryImageListResponse

// GalleryImagePoller provides polling facilities until the operation completes
type GalleryImagePoller = original.GalleryImagePoller

// GalleryImagePollerResponse is the response envelope for operations that asynchronously return a GalleryImage type.
type GalleryImagePollerResponse = original.GalleryImagePollerResponse

// Describes the properties of a gallery image definition.
type GalleryImageProperties = original.GalleryImageProperties

// GalleryImageResponse is the response envelope for operations that return a GalleryImage type.
type GalleryImageResponse = original.GalleryImageResponse

// Specifies information about the gallery image definition that you want to update.
type GalleryImageUpdate = original.GalleryImageUpdate

// Specifies information about the gallery image version that you want to create or update.
type GalleryImageVersion = original.GalleryImageVersion

// The List Gallery Image version operation response.
type GalleryImageVersionList = original.GalleryImageVersionList

// GalleryImageVersionListPager provides iteration over GalleryImageVersionList pages.
type GalleryImageVersionListPager = original.GalleryImageVersionListPager

// GalleryImageVersionListResponse is the response envelope for operations that return a GalleryImageVersionList type.
type GalleryImageVersionListResponse = original.GalleryImageVersionListResponse

// GalleryImageVersionPoller provides polling facilities until the operation completes
type GalleryImageVersionPoller = original.GalleryImageVersionPoller

// GalleryImageVersionPollerResponse is the response envelope for operations that asynchronously return a GalleryImageVersion type.
type GalleryImageVersionPollerResponse = original.GalleryImageVersionPollerResponse

// Describes the properties of a gallery image version.
type GalleryImageVersionProperties = original.GalleryImageVersionProperties

// The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfile = original.GalleryImageVersionPublishingProfile

// GalleryImageVersionResponse is the response envelope for operations that return a GalleryImageVersion type.
type GalleryImageVersionResponse = original.GalleryImageVersionResponse

// This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfile = original.GalleryImageVersionStorageProfile

// Specifies information about the gallery image version that you want to update.
type GalleryImageVersionUpdate = original.GalleryImageVersionUpdate

// GalleryImageVersionsBeginCreateOrUpdateOptions contains the optional parameters for the GalleryImageVersions.BeginCreateOrUpdate method.
type GalleryImageVersionsBeginCreateOrUpdateOptions = original.GalleryImageVersionsBeginCreateOrUpdateOptions

// GalleryImageVersionsBeginDeleteOptions contains the optional parameters for the GalleryImageVersions.BeginDelete method.
type GalleryImageVersionsBeginDeleteOptions = original.GalleryImageVersionsBeginDeleteOptions

// GalleryImageVersionsBeginUpdateOptions contains the optional parameters for the GalleryImageVersions.BeginUpdate method.
type GalleryImageVersionsBeginUpdateOptions = original.GalleryImageVersionsBeginUpdateOptions

// GalleryImageVersionsClient contains the methods for the GalleryImageVersions group.
// Don't use this type directly, use NewGalleryImageVersionsClient() instead.
type GalleryImageVersionsClient = original.GalleryImageVersionsClient

// GalleryImageVersionsGetOptions contains the optional parameters for the GalleryImageVersions.Get method.
type GalleryImageVersionsGetOptions = original.GalleryImageVersionsGetOptions

// GalleryImageVersionsListByGalleryImageOptions contains the optional parameters for the GalleryImageVersions.ListByGalleryImage method.
type GalleryImageVersionsListByGalleryImageOptions = original.GalleryImageVersionsListByGalleryImageOptions

// GalleryImagesBeginCreateOrUpdateOptions contains the optional parameters for the GalleryImages.BeginCreateOrUpdate method.
type GalleryImagesBeginCreateOrUpdateOptions = original.GalleryImagesBeginCreateOrUpdateOptions

// GalleryImagesBeginDeleteOptions contains the optional parameters for the GalleryImages.BeginDelete method.
type GalleryImagesBeginDeleteOptions = original.GalleryImagesBeginDeleteOptions

// GalleryImagesBeginUpdateOptions contains the optional parameters for the GalleryImages.BeginUpdate method.
type GalleryImagesBeginUpdateOptions = original.GalleryImagesBeginUpdateOptions

// GalleryImagesClient contains the methods for the GalleryImages group.
// Don't use this type directly, use NewGalleryImagesClient() instead.
type GalleryImagesClient = original.GalleryImagesClient

// GalleryImagesGetOptions contains the optional parameters for the GalleryImages.Get method.
type GalleryImagesGetOptions = original.GalleryImagesGetOptions

// GalleryImagesListByGalleryOptions contains the optional parameters for the GalleryImages.ListByGallery method.
type GalleryImagesListByGalleryOptions = original.GalleryImagesListByGalleryOptions

// The List Galleries operation response.
type GalleryList = original.GalleryList

// GalleryListPager provides iteration over GalleryList pages.
type GalleryListPager = original.GalleryListPager

// GalleryListResponse is the response envelope for operations that return a GalleryList type.
type GalleryListResponse = original.GalleryListResponse

// This is the OS disk image.
type GalleryOSDiskImage = original.GalleryOSDiskImage

// GalleryPoller provides polling facilities until the operation completes
type GalleryPoller = original.GalleryPoller

// GalleryPollerResponse is the response envelope for operations that asynchronously return a Gallery type.
type GalleryPollerResponse = original.GalleryPollerResponse

// Describes the properties of a Shared Image Gallery.
type GalleryProperties = original.GalleryProperties

// GalleryResponse is the response envelope for operations that return a Gallery type.
type GalleryResponse = original.GalleryResponse

// GallerySharingProfileBeginUpdateOptions contains the optional parameters for the GallerySharingProfile.BeginUpdate method.
type GallerySharingProfileBeginUpdateOptions = original.GallerySharingProfileBeginUpdateOptions

// GallerySharingProfileClient contains the methods for the GallerySharingProfile group.
// Don't use this type directly, use NewGallerySharingProfileClient() instead.
type GallerySharingProfileClient = original.GallerySharingProfileClient

// Specifies information about the Shared Image Gallery that you want to update.
type GalleryUpdate = original.GalleryUpdate

// Data used for requesting a SAS.
type GrantAccessData = original.GrantAccessData

// HTTPPoller provides polling facilities until the operation completes
type HTTPPoller = original.HTTPPoller

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse = original.HTTPPollerResponse

// Specifies the hardware settings for the virtual machine.
type HardwareProfile = original.HardwareProfile

// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided,
// the destination virtual hard drive must not
// exist.
type Image = original.Image

// Describes a data disk.
type ImageDataDisk = original.ImageDataDisk

// Describes a image disk.
type ImageDisk = original.ImageDisk

// The source image used for creating the disk.
type ImageDiskReference = original.ImageDiskReference

// The List Image operation response.
type ImageListResult = original.ImageListResult

// ImageListResultPager provides iteration over ImageListResult pages.
type ImageListResultPager = original.ImageListResultPager

// ImageListResultResponse is the response envelope for operations that return a ImageListResult type.
type ImageListResultResponse = original.ImageListResultResponse

// Describes an Operating System disk.
type ImageOSDisk = original.ImageOSDisk

// ImagePoller provides polling facilities until the operation completes
type ImagePoller = original.ImagePoller

// ImagePollerResponse is the response envelope for operations that asynchronously return a Image type.
type ImagePollerResponse = original.ImagePollerResponse

// Describes the properties of an Image.
type ImageProperties = original.ImageProperties

// Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlan = original.ImagePurchasePlan

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This
// element is required when you want to use a platform
// image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only
// be set when you create the scale set.
type ImageReference = original.ImageReference

// ImageResponse is the response envelope for operations that return a Image type.
type ImageResponse = original.ImageResponse

// Describes a storage profile.
type ImageStorageProfile = original.ImageStorageProfile

// The source user image virtual hard disk. Only tags may be updated.
type ImageUpdate = original.ImageUpdate

// ImagesBeginCreateOrUpdateOptions contains the optional parameters for the Images.BeginCreateOrUpdate method.
type ImagesBeginCreateOrUpdateOptions = original.ImagesBeginCreateOrUpdateOptions

// ImagesBeginDeleteOptions contains the optional parameters for the Images.BeginDelete method.
type ImagesBeginDeleteOptions = original.ImagesBeginDeleteOptions

// ImagesBeginUpdateOptions contains the optional parameters for the Images.BeginUpdate method.
type ImagesBeginUpdateOptions = original.ImagesBeginUpdateOptions

// ImagesClient contains the methods for the Images group.
// Don't use this type directly, use NewImagesClient() instead.
type ImagesClient = original.ImagesClient

// ImagesGetOptions contains the optional parameters for the Images.Get method.
type ImagesGetOptions = original.ImagesGetOptions

// ImagesListByResourceGroupOptions contains the optional parameters for the Images.ListByResourceGroup method.
type ImagesListByResourceGroupOptions = original.ImagesListByResourceGroupOptions

// ImagesListOptions contains the optional parameters for the Images.List method.
type ImagesListOptions = original.ImagesListOptions

// Inner error details.
type InnerError = original.InnerError

// Instance view status.
type InstanceViewStatus = original.InstanceViewStatus

// Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
type KeyVaultAndKeyReference = original.KeyVaultAndKeyReference

// Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference = original.KeyVaultAndSecretReference

// Describes a reference to Key Vault Key
type KeyVaultKeyReference = original.KeyVaultKeyReference

// Describes a reference to Key Vault Secret
type KeyVaultSecretReference = original.KeyVaultSecretReference

// Describes the properties of the last installed patch summary.
type LastPatchInstallationSummary = original.LastPatchInstallationSummary

// Specifies the Linux operating system settings on the virtual machine.
// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
type LinuxConfiguration = original.LinuxConfiguration

// The List Usages operation response.
type ListUsagesResult = original.ListUsagesResult

// ListUsagesResultPager provides iteration over ListUsagesResult pages.
type ListUsagesResultPager = original.ListUsagesResultPager

// ListUsagesResultResponse is the response envelope for operations that return a ListUsagesResult type.
type ListUsagesResultResponse = original.ListUsagesResultResponse

// LogAnalyticsBeginExportRequestRateByIntervalOptions contains the optional parameters for the LogAnalytics.BeginExportRequestRateByInterval method.
type LogAnalyticsBeginExportRequestRateByIntervalOptions = original.LogAnalyticsBeginExportRequestRateByIntervalOptions

// LogAnalyticsBeginExportThrottledRequestsOptions contains the optional parameters for the LogAnalytics.BeginExportThrottledRequests method.
type LogAnalyticsBeginExportThrottledRequestsOptions = original.LogAnalyticsBeginExportThrottledRequestsOptions

// LogAnalyticsClient contains the methods for the LogAnalytics group.
// Don't use this type directly, use NewLogAnalyticsClient() instead.
type LogAnalyticsClient = original.LogAnalyticsClient

// Api input base class for LogAnalytics Api.
type LogAnalyticsInputBase = original.LogAnalyticsInputBase

// LogAnalytics operation status response
type LogAnalyticsOperationResult = original.LogAnalyticsOperationResult

// LogAnalyticsOperationResultPoller provides polling facilities until the operation completes
type LogAnalyticsOperationResultPoller = original.LogAnalyticsOperationResultPoller

// LogAnalyticsOperationResultPollerResponse is the response envelope for operations that asynchronously return a LogAnalyticsOperationResult type.
type LogAnalyticsOperationResultPollerResponse = original.LogAnalyticsOperationResultPollerResponse

// LogAnalyticsOperationResultResponse is the response envelope for operations that return a LogAnalyticsOperationResult type.
type LogAnalyticsOperationResultResponse = original.LogAnalyticsOperationResultResponse

// LogAnalytics output properties
type LogAnalyticsOutput = original.LogAnalyticsOutput

// Maintenance Operation Status.
type MaintenanceRedeployStatus = original.MaintenanceRedeployStatus

// The managed artifact.
type ManagedArtifact = original.ManagedArtifact

// The parameters of a managed disk.
type ManagedDiskParameters = original.ManagedDiskParameters

// Describes a network interface reference.
type NetworkInterfaceReference = original.NetworkInterfaceReference

// Describes a network interface reference properties.
type NetworkInterfaceReferenceProperties = original.NetworkInterfaceReferenceProperties

// Specifies the network interfaces of the virtual machine.
type NetworkProfile = original.NetworkProfile

// Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type OSDisk = original.OSDisk

// Contains the os disk image information.
type OSDiskImage = original.OSDiskImage

// Contains encryption settings for an OS disk image.
type OSDiskImageEncryption = original.OSDiskImageEncryption

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile = original.OSProfile

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient = original.OperationsClient

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions = original.OperationsListOptions

// The input for OrchestrationServiceState
type OrchestrationServiceStateInput = original.OrchestrationServiceStateInput

// Summary for an orchestration service of a virtual machine scale set.
type OrchestrationServiceSummary = original.OrchestrationServiceSummary
type PatchSettings = original.PatchSettings

// The Resource model definition.
type PirResource = original.PirResource

// Base information about the shared gallery resource in pir.
type PirSharedGalleryResource = original.PirSharedGalleryResource

// PirSharedGalleryResourceResponse is the response envelope for operations that return a PirSharedGalleryResource type.
type PirSharedGalleryResourceResponse = original.PirSharedGalleryResourceResponse

// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can
// use a marketplace image from an API, you must
// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click Want to deploy programmatically,
// Get Started ->. Enter any required
// information and then click Save.
type Plan = original.Plan

// The Private Endpoint resource.
type PrivateEndpoint = original.PrivateEndpoint

// The Private Endpoint Connection resource.
type PrivateEndpointConnection = original.PrivateEndpointConnection

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties = original.PrivateEndpointConnectionProperties

// A private link resource
type PrivateLinkResource = original.PrivateLinkResource

// A list of private link resources
type PrivateLinkResourceListResult = original.PrivateLinkResourceListResult

// PrivateLinkResourceListResultResponse is the response envelope for operations that return a PrivateLinkResourceListResult type.
type PrivateLinkResourceListResultResponse = original.PrivateLinkResourceListResultResponse

// Properties of a private link resource.
type PrivateLinkResourceProperties = original.PrivateLinkResourceProperties

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState = original.PrivateLinkServiceConnectionState

// Specifies information about the proximity placement group.
type ProximityPlacementGroup = original.ProximityPlacementGroup

// The List Proximity Placement Group operation response.
type ProximityPlacementGroupListResult = original.ProximityPlacementGroupListResult

// ProximityPlacementGroupListResultPager provides iteration over ProximityPlacementGroupListResult pages.
type ProximityPlacementGroupListResultPager = original.ProximityPlacementGroupListResultPager

// ProximityPlacementGroupListResultResponse is the response envelope for operations that return a ProximityPlacementGroupListResult type.
type ProximityPlacementGroupListResultResponse = original.ProximityPlacementGroupListResultResponse

// Describes the properties of a Proximity Placement Group.
type ProximityPlacementGroupProperties = original.ProximityPlacementGroupProperties

// ProximityPlacementGroupResponse is the response envelope for operations that return a ProximityPlacementGroup type.
type ProximityPlacementGroupResponse = original.ProximityPlacementGroupResponse

// Specifies information about the proximity placement group.
type ProximityPlacementGroupUpdate = original.ProximityPlacementGroupUpdate

// ProximityPlacementGroupsClient contains the methods for the ProximityPlacementGroups group.
// Don't use this type directly, use NewProximityPlacementGroupsClient() instead.
type ProximityPlacementGroupsClient = original.ProximityPlacementGroupsClient

// ProximityPlacementGroupsCreateOrUpdateOptions contains the optional parameters for the ProximityPlacementGroups.CreateOrUpdate method.
type ProximityPlacementGroupsCreateOrUpdateOptions = original.ProximityPlacementGroupsCreateOrUpdateOptions

// ProximityPlacementGroupsDeleteOptions contains the optional parameters for the ProximityPlacementGroups.Delete method.
type ProximityPlacementGroupsDeleteOptions = original.ProximityPlacementGroupsDeleteOptions

// ProximityPlacementGroupsGetOptions contains the optional parameters for the ProximityPlacementGroups.Get method.
type ProximityPlacementGroupsGetOptions = original.ProximityPlacementGroupsGetOptions

// ProximityPlacementGroupsListByResourceGroupOptions contains the optional parameters for the ProximityPlacementGroups.ListByResourceGroup method.
type ProximityPlacementGroupsListByResourceGroupOptions = original.ProximityPlacementGroupsListByResourceGroupOptions

// ProximityPlacementGroupsListBySubscriptionOptions contains the optional parameters for the ProximityPlacementGroups.ListBySubscription method.
type ProximityPlacementGroupsListBySubscriptionOptions = original.ProximityPlacementGroupsListBySubscriptionOptions

// ProximityPlacementGroupsUpdateOptions contains the optional parameters for the ProximityPlacementGroups.Update method.
type ProximityPlacementGroupsUpdateOptions = original.ProximityPlacementGroupsUpdateOptions

// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlan = original.PurchasePlan

// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
type RecommendedMachineConfiguration = original.RecommendedMachineConfiguration

// Response after calling a manual recovery walk
type RecoveryWalkResponse = original.RecoveryWalkResponse

// RecoveryWalkResponseResponse is the response envelope for operations that return a RecoveryWalkResponse type.
type RecoveryWalkResponseResponse = original.RecoveryWalkResponseResponse

// This is the regional replication status.
type RegionalReplicationStatus = original.RegionalReplicationStatus

// This is the replication status of the gallery image version.
type ReplicationStatus = original.ReplicationStatus

// Api request input for LogAnalytics getRequestRateByInterval Api.
type RequestRateByIntervalInput = original.RequestRateByIntervalInput

// The Resource model definition.
type Resource = original.Resource

// Describes the resource range.
type ResourceRange = original.ResourceRange

// Describes an available Compute SKU.
type ResourceSKU = original.ResourceSKU

// Describes The SKU capabilities object.
type ResourceSKUCapabilities = original.ResourceSKUCapabilities

// Describes scaling information of a SKU.
type ResourceSKUCapacity = original.ResourceSKUCapacity

// Describes metadata for retrieving price info.
type ResourceSKUCosts = original.ResourceSKUCosts
type ResourceSKULocationInfo = original.ResourceSKULocationInfo
type ResourceSKURestrictionInfo = original.ResourceSKURestrictionInfo

// Describes scaling information of a SKU.
type ResourceSKURestrictions = original.ResourceSKURestrictions

// Describes The zonal capabilities of a SKU.
type ResourceSKUZoneDetails = original.ResourceSKUZoneDetails

// ResourceSKUsClient contains the methods for the ResourceSKUs group.
// Don't use this type directly, use NewResourceSKUsClient() instead.
type ResourceSKUsClient = original.ResourceSKUsClient

// ResourceSKUsListOptions contains the optional parameters for the ResourceSKUs.List method.
type ResourceSKUsListOptions = original.ResourceSKUsListOptions

// The List Resource Skus operation response.
type ResourceSKUsResult = original.ResourceSKUsResult

// ResourceSKUsResultPager provides iteration over ResourceSKUsResult pages.
type ResourceSKUsResultPager = original.ResourceSKUsResultPager

// ResourceSKUsResultResponse is the response envelope for operations that return a ResourceSKUsResult type.
type ResourceSKUsResultResponse = original.ResourceSKUsResultResponse

// The List resources which are encrypted with the disk encryption set.
type ResourceURIList = original.ResourceURIList

// ResourceURIListPager provides iteration over ResourceURIList pages.
type ResourceURIListPager = original.ResourceURIListPager

// ResourceURIListResponse is the response envelope for operations that return a ResourceURIList type.
type ResourceURIListResponse = original.ResourceURIListResponse

// The SAS URIs of the console screenshot and serial log blobs.
type RetrieveBootDiagnosticsDataResult = original.RetrieveBootDiagnosticsDataResult

// RetrieveBootDiagnosticsDataResultResponse is the response envelope for operations that return a RetrieveBootDiagnosticsDataResult type.
type RetrieveBootDiagnosticsDataResultResponse = original.RetrieveBootDiagnosticsDataResultResponse

// Information about rollback on failed VM instances after a OS Upgrade operation.
type RollbackStatusInfo = original.RollbackStatusInfo

// The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicy = original.RollingUpgradePolicy

// Information about the number of virtual machine instances in each upgrade state.
type RollingUpgradeProgressInfo = original.RollingUpgradeProgressInfo

// Information about the current running state of the overall upgrade.
type RollingUpgradeRunningStatus = original.RollingUpgradeRunningStatus

// The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfo = original.RollingUpgradeStatusInfo

// The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfoProperties = original.RollingUpgradeStatusInfoProperties

// RollingUpgradeStatusInfoResponse is the response envelope for operations that return a RollingUpgradeStatusInfo type.
type RollingUpgradeStatusInfoResponse = original.RollingUpgradeStatusInfoResponse

// Describes the properties of a Run Command.
type RunCommandDocument = original.RunCommandDocument

// Describes the properties of a Run Command metadata.
type RunCommandDocumentBase = original.RunCommandDocumentBase

// RunCommandDocumentResponse is the response envelope for operations that return a RunCommandDocument type.
type RunCommandDocumentResponse = original.RunCommandDocumentResponse

// Capture Virtual Machine parameters.
type RunCommandInput = original.RunCommandInput

// Describes the properties of a run command parameter.
type RunCommandInputParameter = original.RunCommandInputParameter

// The List Virtual Machine operation response.
type RunCommandListResult = original.RunCommandListResult

// RunCommandListResultPager provides iteration over RunCommandListResult pages.
type RunCommandListResultPager = original.RunCommandListResultPager

// RunCommandListResultResponse is the response envelope for operations that return a RunCommandListResult type.
type RunCommandListResultResponse = original.RunCommandListResultResponse

// Describes the properties of a run command parameter.
type RunCommandParameterDefinition = original.RunCommandParameterDefinition
type RunCommandResult = original.RunCommandResult

// RunCommandResultPoller provides polling facilities until the operation completes
type RunCommandResultPoller = original.RunCommandResultPoller

// RunCommandResultPollerResponse is the response envelope for operations that asynchronously return a RunCommandResult type.
type RunCommandResultPollerResponse = original.RunCommandResultPollerResponse

// RunCommandResultResponse is the response envelope for operations that return a RunCommandResult type.
type RunCommandResultResponse = original.RunCommandResultResponse

// Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate
// the VMs in the scale set before you modify the
// SKU name.
type SKU = original.SKU

// SSH configuration for Linux based VMs running on Azure
type SSHConfiguration = original.SSHConfiguration

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SSHPublicKey = original.SSHPublicKey

// Response from generation of an SSH key pair.
type SSHPublicKeyGenerateKeyPairResult = original.SSHPublicKeyGenerateKeyPairResult

// SSHPublicKeyGenerateKeyPairResultResponse is the response envelope for operations that return a SSHPublicKeyGenerateKeyPairResult type.
type SSHPublicKeyGenerateKeyPairResultResponse = original.SSHPublicKeyGenerateKeyPairResultResponse

// Specifies information about the SSH public key.
type SSHPublicKeyResource = original.SSHPublicKeyResource

// Properties of the SSH public key.
type SSHPublicKeyResourceProperties = original.SSHPublicKeyResourceProperties

// SSHPublicKeyResourceResponse is the response envelope for operations that return a SSHPublicKeyResource type.
type SSHPublicKeyResourceResponse = original.SSHPublicKeyResourceResponse

// Specifies information about the SSH public key.
type SSHPublicKeyUpdateResource = original.SSHPublicKeyUpdateResource

// SSHPublicKeysClient contains the methods for the SSHPublicKeys group.
// Don't use this type directly, use NewSSHPublicKeysClient() instead.
type SSHPublicKeysClient = original.SSHPublicKeysClient

// SSHPublicKeysCreateOptions contains the optional parameters for the SSHPublicKeys.Create method.
type SSHPublicKeysCreateOptions = original.SSHPublicKeysCreateOptions

// SSHPublicKeysDeleteOptions contains the optional parameters for the SSHPublicKeys.Delete method.
type SSHPublicKeysDeleteOptions = original.SSHPublicKeysDeleteOptions

// SSHPublicKeysGenerateKeyPairOptions contains the optional parameters for the SSHPublicKeys.GenerateKeyPair method.
type SSHPublicKeysGenerateKeyPairOptions = original.SSHPublicKeysGenerateKeyPairOptions

// SSHPublicKeysGetOptions contains the optional parameters for the SSHPublicKeys.Get method.
type SSHPublicKeysGetOptions = original.SSHPublicKeysGetOptions

// The list SSH public keys operation response.
type SSHPublicKeysGroupListResult = original.SSHPublicKeysGroupListResult

// SSHPublicKeysGroupListResultPager provides iteration over SSHPublicKeysGroupListResult pages.
type SSHPublicKeysGroupListResultPager = original.SSHPublicKeysGroupListResultPager

// SSHPublicKeysGroupListResultResponse is the response envelope for operations that return a SSHPublicKeysGroupListResult type.
type SSHPublicKeysGroupListResultResponse = original.SSHPublicKeysGroupListResultResponse

// SSHPublicKeysListByResourceGroupOptions contains the optional parameters for the SSHPublicKeys.ListByResourceGroup method.
type SSHPublicKeysListByResourceGroupOptions = original.SSHPublicKeysListByResourceGroupOptions

// SSHPublicKeysListBySubscriptionOptions contains the optional parameters for the SSHPublicKeys.ListBySubscription method.
type SSHPublicKeysListBySubscriptionOptions = original.SSHPublicKeysListBySubscriptionOptions

// SSHPublicKeysUpdateOptions contains the optional parameters for the SSHPublicKeys.Update method.
type SSHPublicKeysUpdateOptions = original.SSHPublicKeysUpdateOptions

// Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicy = original.ScaleInPolicy
type ScheduledEventsProfile = original.ScheduledEventsProfile

// Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfile = original.SecurityProfile
type ShareInfoElement = original.ShareInfoElement

// SharedGalleriesClient contains the methods for the SharedGalleries group.
// Don't use this type directly, use NewSharedGalleriesClient() instead.
type SharedGalleriesClient = original.SharedGalleriesClient

// SharedGalleriesGetOptions contains the optional parameters for the SharedGalleries.Get method.
type SharedGalleriesGetOptions = original.SharedGalleriesGetOptions

// SharedGalleriesListOptions contains the optional parameters for the SharedGalleries.List method.
type SharedGalleriesListOptions = original.SharedGalleriesListOptions

// Specifies information about the Shared Gallery that you want to create or update.
type SharedGallery = original.SharedGallery

// The identifier information of shared gallery.
type SharedGalleryIDentifier = original.SharedGalleryIDentifier

// Specifies information about the gallery image definition that you want to create or update.
type SharedGalleryImage = original.SharedGalleryImage

// The List Shared Gallery Images operation response.
type SharedGalleryImageList = original.SharedGalleryImageList

// SharedGalleryImageListPager provides iteration over SharedGalleryImageList pages.
type SharedGalleryImageListPager = original.SharedGalleryImageListPager

// SharedGalleryImageListResponse is the response envelope for operations that return a SharedGalleryImageList type.
type SharedGalleryImageListResponse = original.SharedGalleryImageListResponse

// Describes the properties of a gallery image definition.
type SharedGalleryImageProperties = original.SharedGalleryImageProperties

// SharedGalleryImageResponse is the response envelope for operations that return a SharedGalleryImage type.
type SharedGalleryImageResponse = original.SharedGalleryImageResponse

// Specifies information about the gallery image version that you want to create or update.
type SharedGalleryImageVersion = original.SharedGalleryImageVersion

// The List Shared Gallery Image versions operation response.
type SharedGalleryImageVersionList = original.SharedGalleryImageVersionList

// SharedGalleryImageVersionListPager provides iteration over SharedGalleryImageVersionList pages.
type SharedGalleryImageVersionListPager = original.SharedGalleryImageVersionListPager

// SharedGalleryImageVersionListResponse is the response envelope for operations that return a SharedGalleryImageVersionList type.
type SharedGalleryImageVersionListResponse = original.SharedGalleryImageVersionListResponse

// Describes the properties of a gallery image version.
type SharedGalleryImageVersionProperties = original.SharedGalleryImageVersionProperties

// SharedGalleryImageVersionResponse is the response envelope for operations that return a SharedGalleryImageVersion type.
type SharedGalleryImageVersionResponse = original.SharedGalleryImageVersionResponse

// SharedGalleryImageVersionsClient contains the methods for the SharedGalleryImageVersions group.
// Don't use this type directly, use NewSharedGalleryImageVersionsClient() instead.
type SharedGalleryImageVersionsClient = original.SharedGalleryImageVersionsClient

// SharedGalleryImageVersionsGetOptions contains the optional parameters for the SharedGalleryImageVersions.Get method.
type SharedGalleryImageVersionsGetOptions = original.SharedGalleryImageVersionsGetOptions

// SharedGalleryImageVersionsListOptions contains the optional parameters for the SharedGalleryImageVersions.List method.
type SharedGalleryImageVersionsListOptions = original.SharedGalleryImageVersionsListOptions

// SharedGalleryImagesClient contains the methods for the SharedGalleryImages group.
// Don't use this type directly, use NewSharedGalleryImagesClient() instead.
type SharedGalleryImagesClient = original.SharedGalleryImagesClient

// SharedGalleryImagesGetOptions contains the optional parameters for the SharedGalleryImages.Get method.
type SharedGalleryImagesGetOptions = original.SharedGalleryImagesGetOptions

// SharedGalleryImagesListOptions contains the optional parameters for the SharedGalleryImages.List method.
type SharedGalleryImagesListOptions = original.SharedGalleryImagesListOptions

// The List Shared Galleries operation response.
type SharedGalleryList = original.SharedGalleryList

// SharedGalleryListPager provides iteration over SharedGalleryList pages.
type SharedGalleryListPager = original.SharedGalleryListPager

// SharedGalleryListResponse is the response envelope for operations that return a SharedGalleryList type.
type SharedGalleryListResponse = original.SharedGalleryListResponse

// Profile for gallery sharing to subscription or tenant
type SharingProfile = original.SharingProfile

// Group of the gallery sharing profile
type SharingProfileGroup = original.SharingProfileGroup

// Specifies information about the gallery sharing profile update.
type SharingUpdate = original.SharingUpdate

// SharingUpdatePoller provides polling facilities until the operation completes
type SharingUpdatePoller = original.SharingUpdatePoller

// SharingUpdatePollerResponse is the response envelope for operations that asynchronously return a SharingUpdate type.
type SharingUpdatePollerResponse = original.SharingUpdatePollerResponse

// SharingUpdateResponse is the response envelope for operations that return a SharingUpdate type.
type SharingUpdateResponse = original.SharingUpdateResponse

// Snapshot resource.
type Snapshot = original.Snapshot

// The List Snapshots operation response.
type SnapshotList = original.SnapshotList

// SnapshotListPager provides iteration over SnapshotList pages.
type SnapshotListPager = original.SnapshotListPager

// SnapshotListResponse is the response envelope for operations that return a SnapshotList type.
type SnapshotListResponse = original.SnapshotListResponse

// SnapshotPoller provides polling facilities until the operation completes
type SnapshotPoller = original.SnapshotPoller

// SnapshotPollerResponse is the response envelope for operations that asynchronously return a Snapshot type.
type SnapshotPollerResponse = original.SnapshotPollerResponse

// Snapshot resource properties.
type SnapshotProperties = original.SnapshotProperties

// SnapshotResponse is the response envelope for operations that return a Snapshot type.
type SnapshotResponse = original.SnapshotResponse

// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS.
type SnapshotSKU = original.SnapshotSKU

// Snapshot update resource.
type SnapshotUpdate = original.SnapshotUpdate

// Snapshot resource update properties.
type SnapshotUpdateProperties = original.SnapshotUpdateProperties

// SnapshotsBeginCreateOrUpdateOptions contains the optional parameters for the Snapshots.BeginCreateOrUpdate method.
type SnapshotsBeginCreateOrUpdateOptions = original.SnapshotsBeginCreateOrUpdateOptions

// SnapshotsBeginDeleteOptions contains the optional parameters for the Snapshots.BeginDelete method.
type SnapshotsBeginDeleteOptions = original.SnapshotsBeginDeleteOptions

// SnapshotsBeginGrantAccessOptions contains the optional parameters for the Snapshots.BeginGrantAccess method.
type SnapshotsBeginGrantAccessOptions = original.SnapshotsBeginGrantAccessOptions

// SnapshotsBeginRevokeAccessOptions contains the optional parameters for the Snapshots.BeginRevokeAccess method.
type SnapshotsBeginRevokeAccessOptions = original.SnapshotsBeginRevokeAccessOptions

// SnapshotsBeginUpdateOptions contains the optional parameters for the Snapshots.BeginUpdate method.
type SnapshotsBeginUpdateOptions = original.SnapshotsBeginUpdateOptions

// SnapshotsClient contains the methods for the Snapshots group.
// Don't use this type directly, use NewSnapshotsClient() instead.
type SnapshotsClient = original.SnapshotsClient

// SnapshotsGetOptions contains the optional parameters for the Snapshots.Get method.
type SnapshotsGetOptions = original.SnapshotsGetOptions

// SnapshotsListByResourceGroupOptions contains the optional parameters for the Snapshots.ListByResourceGroup method.
type SnapshotsListByResourceGroupOptions = original.SnapshotsListByResourceGroupOptions

// SnapshotsListOptions contains the optional parameters for the Snapshots.List method.
type SnapshotsListOptions = original.SnapshotsListOptions

// The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault = original.SourceVault

// Specifies the storage settings for the virtual machine disks.
type StorageProfile = original.StorageProfile
type SubResource = original.SubResource
type SubResourceReadOnly = original.SubResourceReadOnly
type SubResourceWithColocationStatus = original.SubResourceWithColocationStatus

// Describes the target region information.
type TargetRegion = original.TargetRegion
type TerminateNotificationProfile = original.TerminateNotificationProfile

// Api request input for LogAnalytics getThrottledRequests Api.
type ThrottledRequestsInput = original.ThrottledRequestsInput

// The Update Resource model definition.
type UpdateResource = original.UpdateResource

// The Update Resource model definition.
type UpdateResourceDefinition = original.UpdateResourceDefinition

// Virtual Machine Scale Set OS Upgrade History operation response.
type UpgradeOperationHistoricalStatusInfo = original.UpgradeOperationHistoricalStatusInfo

// Describes each OS upgrade on the Virtual Machine Scale Set.
type UpgradeOperationHistoricalStatusInfoProperties = original.UpgradeOperationHistoricalStatusInfoProperties

// Information about the current running state of the overall upgrade.
type UpgradeOperationHistoryStatus = original.UpgradeOperationHistoryStatus

// Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicy = original.UpgradePolicy

// Describes Compute Resource Usage.
type Usage = original.Usage

// UsageClient contains the methods for the Usage group.
// Don't use this type directly, use NewUsageClient() instead.
type UsageClient = original.UsageClient

// UsageListOptions contains the optional parameters for the Usage.List method.
type UsageListOptions = original.UsageListOptions

// The Usage Names.
type UsageName = original.UsageName
type UserArtifactManage = original.UserArtifactManage

// The source image from which the Image Version is going to be created.
type UserArtifactSource = original.UserArtifactSource
type UserAssignedIDentitiesValue = original.UserAssignedIDentitiesValue
type VMScaleSetConvertToSinglePlacementGroupInput = original.VMScaleSetConvertToSinglePlacementGroupInput

// Describes a single certificate reference in a Key Vault, and where the certificate should reside on the VM.
type VaultCertificate = original.VaultCertificate

// Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroup = original.VaultSecretGroup

// Describes the uri of a disk.
type VirtualHardDisk = original.VirtualHardDisk

// Describes a Virtual Machine.
type VirtualMachine = original.VirtualMachine

// The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceView = original.VirtualMachineAgentInstanceView

// Describes the properties of an AssessPatches result.
type VirtualMachineAssessPatchesResult = original.VirtualMachineAssessPatchesResult

// VirtualMachineAssessPatchesResultPoller provides polling facilities until the operation completes
type VirtualMachineAssessPatchesResultPoller = original.VirtualMachineAssessPatchesResultPoller

// VirtualMachineAssessPatchesResultPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineAssessPatchesResult
// type.
type VirtualMachineAssessPatchesResultPollerResponse = original.VirtualMachineAssessPatchesResultPollerResponse

// VirtualMachineAssessPatchesResultResponse is the response envelope for operations that return a VirtualMachineAssessPatchesResult type.
type VirtualMachineAssessPatchesResultResponse = original.VirtualMachineAssessPatchesResultResponse

// Capture Virtual Machine parameters.
type VirtualMachineCaptureParameters = original.VirtualMachineCaptureParameters

// Output of virtual machine capture operation.
type VirtualMachineCaptureResult = original.VirtualMachineCaptureResult

// VirtualMachineCaptureResultPoller provides polling facilities until the operation completes
type VirtualMachineCaptureResultPoller = original.VirtualMachineCaptureResultPoller

// VirtualMachineCaptureResultPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineCaptureResult type.
type VirtualMachineCaptureResultPollerResponse = original.VirtualMachineCaptureResultPollerResponse

// VirtualMachineCaptureResultResponse is the response envelope for operations that return a VirtualMachineCaptureResult type.
type VirtualMachineCaptureResultResponse = original.VirtualMachineCaptureResultResponse

// Describes a Virtual Machine Extension.
type VirtualMachineExtension = original.VirtualMachineExtension

// The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceView = original.VirtualMachineExtensionHandlerInstanceView

// Describes a Virtual Machine Extension Image.
type VirtualMachineExtensionImage = original.VirtualMachineExtensionImage

// VirtualMachineExtensionImageArrayResponse is the response envelope for operations that return a []VirtualMachineExtensionImage type.
type VirtualMachineExtensionImageArrayResponse = original.VirtualMachineExtensionImageArrayResponse

// Describes the properties of a Virtual Machine Extension Image.
type VirtualMachineExtensionImageProperties = original.VirtualMachineExtensionImageProperties

// VirtualMachineExtensionImageResponse is the response envelope for operations that return a VirtualMachineExtensionImage type.
type VirtualMachineExtensionImageResponse = original.VirtualMachineExtensionImageResponse

// VirtualMachineExtensionImagesClient contains the methods for the VirtualMachineExtensionImages group.
// Don't use this type directly, use NewVirtualMachineExtensionImagesClient() instead.
type VirtualMachineExtensionImagesClient = original.VirtualMachineExtensionImagesClient

// VirtualMachineExtensionImagesGetOptions contains the optional parameters for the VirtualMachineExtensionImages.Get method.
type VirtualMachineExtensionImagesGetOptions = original.VirtualMachineExtensionImagesGetOptions

// VirtualMachineExtensionImagesListTypesOptions contains the optional parameters for the VirtualMachineExtensionImages.ListTypes method.
type VirtualMachineExtensionImagesListTypesOptions = original.VirtualMachineExtensionImagesListTypesOptions

// VirtualMachineExtensionImagesListVersionsOptions contains the optional parameters for the VirtualMachineExtensionImages.ListVersions method.
type VirtualMachineExtensionImagesListVersionsOptions = original.VirtualMachineExtensionImagesListVersionsOptions

// The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceView = original.VirtualMachineExtensionInstanceView

// VirtualMachineExtensionPoller provides polling facilities until the operation completes
type VirtualMachineExtensionPoller = original.VirtualMachineExtensionPoller

// VirtualMachineExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineExtension type.
type VirtualMachineExtensionPollerResponse = original.VirtualMachineExtensionPollerResponse

// Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionProperties = original.VirtualMachineExtensionProperties

// VirtualMachineExtensionResponse is the response envelope for operations that return a VirtualMachineExtension type.
type VirtualMachineExtensionResponse = original.VirtualMachineExtensionResponse

// Describes a Virtual Machine Extension.
type VirtualMachineExtensionUpdate = original.VirtualMachineExtensionUpdate

// Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionUpdateProperties = original.VirtualMachineExtensionUpdateProperties

// VirtualMachineExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineExtensions.BeginCreateOrUpdate method.
type VirtualMachineExtensionsBeginCreateOrUpdateOptions = original.VirtualMachineExtensionsBeginCreateOrUpdateOptions

// VirtualMachineExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineExtensions.BeginDelete method.
type VirtualMachineExtensionsBeginDeleteOptions = original.VirtualMachineExtensionsBeginDeleteOptions

// VirtualMachineExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineExtensions.BeginUpdate method.
type VirtualMachineExtensionsBeginUpdateOptions = original.VirtualMachineExtensionsBeginUpdateOptions

// VirtualMachineExtensionsClient contains the methods for the VirtualMachineExtensions group.
// Don't use this type directly, use NewVirtualMachineExtensionsClient() instead.
type VirtualMachineExtensionsClient = original.VirtualMachineExtensionsClient

// VirtualMachineExtensionsGetOptions contains the optional parameters for the VirtualMachineExtensions.Get method.
type VirtualMachineExtensionsGetOptions = original.VirtualMachineExtensionsGetOptions

// VirtualMachineExtensionsListOptions contains the optional parameters for the VirtualMachineExtensions.List method.
type VirtualMachineExtensionsListOptions = original.VirtualMachineExtensionsListOptions

// The List Extension operation response
type VirtualMachineExtensionsListResult = original.VirtualMachineExtensionsListResult

// VirtualMachineExtensionsListResultResponse is the response envelope for operations that return a VirtualMachineExtensionsListResult type.
type VirtualMachineExtensionsListResultResponse = original.VirtualMachineExtensionsListResultResponse

// The health status of the VM.
type VirtualMachineHealthStatus = original.VirtualMachineHealthStatus

// Identity for the virtual machine.
type VirtualMachineIDentity = original.VirtualMachineIDentity

// Describes a Virtual Machine Image.
type VirtualMachineImage = original.VirtualMachineImage

// Describes the properties of a Virtual Machine Image.
type VirtualMachineImageProperties = original.VirtualMachineImageProperties

// Virtual machine image resource information.
type VirtualMachineImageResource = original.VirtualMachineImageResource

// VirtualMachineImageResourceArrayResponse is the response envelope for operations that return a []VirtualMachineImageResource type.
type VirtualMachineImageResourceArrayResponse = original.VirtualMachineImageResourceArrayResponse

// VirtualMachineImageResponse is the response envelope for operations that return a VirtualMachineImage type.
type VirtualMachineImageResponse = original.VirtualMachineImageResponse

// VirtualMachineImagesClient contains the methods for the VirtualMachineImages group.
// Don't use this type directly, use NewVirtualMachineImagesClient() instead.
type VirtualMachineImagesClient = original.VirtualMachineImagesClient

// VirtualMachineImagesGetOptions contains the optional parameters for the VirtualMachineImages.Get method.
type VirtualMachineImagesGetOptions = original.VirtualMachineImagesGetOptions

// VirtualMachineImagesListOffersOptions contains the optional parameters for the VirtualMachineImages.ListOffers method.
type VirtualMachineImagesListOffersOptions = original.VirtualMachineImagesListOffersOptions

// VirtualMachineImagesListOptions contains the optional parameters for the VirtualMachineImages.List method.
type VirtualMachineImagesListOptions = original.VirtualMachineImagesListOptions

// VirtualMachineImagesListPublishersOptions contains the optional parameters for the VirtualMachineImages.ListPublishers method.
type VirtualMachineImagesListPublishersOptions = original.VirtualMachineImagesListPublishersOptions

// VirtualMachineImagesListSKUsOptions contains the optional parameters for the VirtualMachineImages.ListSKUs method.
type VirtualMachineImagesListSKUsOptions = original.VirtualMachineImagesListSKUsOptions

// The instance view of a virtual machine.
type VirtualMachineInstanceView = original.VirtualMachineInstanceView

// VirtualMachineInstanceViewResponse is the response envelope for operations that return a VirtualMachineInstanceView type.
type VirtualMachineInstanceViewResponse = original.VirtualMachineInstanceViewResponse

// The List Virtual Machine operation response.
type VirtualMachineListResult = original.VirtualMachineListResult

// VirtualMachineListResultPager provides iteration over VirtualMachineListResult pages.
type VirtualMachineListResultPager = original.VirtualMachineListResultPager

// VirtualMachineListResultResponse is the response envelope for operations that return a VirtualMachineListResult type.
type VirtualMachineListResultResponse = original.VirtualMachineListResultResponse

// The status of virtual machine patch operations.
type VirtualMachinePatchStatus = original.VirtualMachinePatchStatus

// VirtualMachinePoller provides polling facilities until the operation completes
type VirtualMachinePoller = original.VirtualMachinePoller

// VirtualMachinePollerResponse is the response envelope for operations that asynchronously return a VirtualMachine type.
type VirtualMachinePollerResponse = original.VirtualMachinePollerResponse

// Describes the properties of a Virtual Machine.
type VirtualMachineProperties = original.VirtualMachineProperties

// Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be reimaged
type VirtualMachineReimageParameters = original.VirtualMachineReimageParameters

// VirtualMachineResponse is the response envelope for operations that return a VirtualMachine type.
type VirtualMachineResponse = original.VirtualMachineResponse

// Describes a Virtual Machine run command.
type VirtualMachineRunCommand = original.VirtualMachineRunCommand

// The instance view of a virtual machine run command.
type VirtualMachineRunCommandInstanceView = original.VirtualMachineRunCommandInstanceView

// VirtualMachineRunCommandPoller provides polling facilities until the operation completes
type VirtualMachineRunCommandPoller = original.VirtualMachineRunCommandPoller

// VirtualMachineRunCommandPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineRunCommand type.
type VirtualMachineRunCommandPollerResponse = original.VirtualMachineRunCommandPollerResponse

// Describes the properties of a Virtual Machine run command.
type VirtualMachineRunCommandProperties = original.VirtualMachineRunCommandProperties

// VirtualMachineRunCommandResponse is the response envelope for operations that return a VirtualMachineRunCommand type.
type VirtualMachineRunCommandResponse = original.VirtualMachineRunCommandResponse

// Describes the script sources for run command.
type VirtualMachineRunCommandScriptSource = original.VirtualMachineRunCommandScriptSource

// Describes a Virtual Machine run command.
type VirtualMachineRunCommandUpdate = original.VirtualMachineRunCommandUpdate

// VirtualMachineRunCommandsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineRunCommands.BeginCreateOrUpdate method.
type VirtualMachineRunCommandsBeginCreateOrUpdateOptions = original.VirtualMachineRunCommandsBeginCreateOrUpdateOptions

// VirtualMachineRunCommandsBeginDeleteOptions contains the optional parameters for the VirtualMachineRunCommands.BeginDelete method.
type VirtualMachineRunCommandsBeginDeleteOptions = original.VirtualMachineRunCommandsBeginDeleteOptions

// VirtualMachineRunCommandsBeginUpdateOptions contains the optional parameters for the VirtualMachineRunCommands.BeginUpdate method.
type VirtualMachineRunCommandsBeginUpdateOptions = original.VirtualMachineRunCommandsBeginUpdateOptions

// VirtualMachineRunCommandsClient contains the methods for the VirtualMachineRunCommands group.
// Don't use this type directly, use NewVirtualMachineRunCommandsClient() instead.
type VirtualMachineRunCommandsClient = original.VirtualMachineRunCommandsClient

// VirtualMachineRunCommandsGetByVirtualMachineOptions contains the optional parameters for the VirtualMachineRunCommands.GetByVirtualMachine method.
type VirtualMachineRunCommandsGetByVirtualMachineOptions = original.VirtualMachineRunCommandsGetByVirtualMachineOptions

// VirtualMachineRunCommandsGetOptions contains the optional parameters for the VirtualMachineRunCommands.Get method.
type VirtualMachineRunCommandsGetOptions = original.VirtualMachineRunCommandsGetOptions

// VirtualMachineRunCommandsListByVirtualMachineOptions contains the optional parameters for the VirtualMachineRunCommands.ListByVirtualMachine method.
type VirtualMachineRunCommandsListByVirtualMachineOptions = original.VirtualMachineRunCommandsListByVirtualMachineOptions

// VirtualMachineRunCommandsListOptions contains the optional parameters for the VirtualMachineRunCommands.List method.
type VirtualMachineRunCommandsListOptions = original.VirtualMachineRunCommandsListOptions

// The List run command operation response
type VirtualMachineRunCommandsListResult = original.VirtualMachineRunCommandsListResult

// VirtualMachineRunCommandsListResultPager provides iteration over VirtualMachineRunCommandsListResult pages.
type VirtualMachineRunCommandsListResultPager = original.VirtualMachineRunCommandsListResultPager

// VirtualMachineRunCommandsListResultResponse is the response envelope for operations that return a VirtualMachineRunCommandsListResult type.
type VirtualMachineRunCommandsListResultResponse = original.VirtualMachineRunCommandsListResultResponse

// Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSet = original.VirtualMachineScaleSet

// Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDisk = original.VirtualMachineScaleSetDataDisk

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtension = original.VirtualMachineScaleSetExtension

// The List VM scale set extension operation response.
type VirtualMachineScaleSetExtensionListResult = original.VirtualMachineScaleSetExtensionListResult

// VirtualMachineScaleSetExtensionListResultPager provides iteration over VirtualMachineScaleSetExtensionListResult pages.
type VirtualMachineScaleSetExtensionListResultPager = original.VirtualMachineScaleSetExtensionListResultPager

// VirtualMachineScaleSetExtensionListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetExtensionListResult type.
type VirtualMachineScaleSetExtensionListResultResponse = original.VirtualMachineScaleSetExtensionListResultResponse

// VirtualMachineScaleSetExtensionPoller provides polling facilities until the operation completes
type VirtualMachineScaleSetExtensionPoller = original.VirtualMachineScaleSetExtensionPoller

// VirtualMachineScaleSetExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetExtension type.
type VirtualMachineScaleSetExtensionPollerResponse = original.VirtualMachineScaleSetExtensionPollerResponse

// Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfile = original.VirtualMachineScaleSetExtensionProfile

// Describes the properties of a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionProperties = original.VirtualMachineScaleSetExtensionProperties

// VirtualMachineScaleSetExtensionResponse is the response envelope for operations that return a VirtualMachineScaleSetExtension type.
type VirtualMachineScaleSetExtensionResponse = original.VirtualMachineScaleSetExtensionResponse

// Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionUpdate = original.VirtualMachineScaleSetExtensionUpdate

// VirtualMachineScaleSetExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetExtensionsBeginCreateOrUpdateOptions = original.VirtualMachineScaleSetExtensionsBeginCreateOrUpdateOptions

// VirtualMachineScaleSetExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginDelete method.
type VirtualMachineScaleSetExtensionsBeginDeleteOptions = original.VirtualMachineScaleSetExtensionsBeginDeleteOptions

// VirtualMachineScaleSetExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.BeginUpdate method.
type VirtualMachineScaleSetExtensionsBeginUpdateOptions = original.VirtualMachineScaleSetExtensionsBeginUpdateOptions

// VirtualMachineScaleSetExtensionsClient contains the methods for the VirtualMachineScaleSetExtensions group.
// Don't use this type directly, use NewVirtualMachineScaleSetExtensionsClient() instead.
type VirtualMachineScaleSetExtensionsClient = original.VirtualMachineScaleSetExtensionsClient

// VirtualMachineScaleSetExtensionsGetOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.Get method.
type VirtualMachineScaleSetExtensionsGetOptions = original.VirtualMachineScaleSetExtensionsGetOptions

// VirtualMachineScaleSetExtensionsListOptions contains the optional parameters for the VirtualMachineScaleSetExtensions.List method.
type VirtualMachineScaleSetExtensionsListOptions = original.VirtualMachineScaleSetExtensionsListOptions

// Identity for the virtual machine scale set.
type VirtualMachineScaleSetIDentity = original.VirtualMachineScaleSetIDentity
type VirtualMachineScaleSetIDentityUserAssignedIdentitiesValue = original.VirtualMachineScaleSetIDentityUserAssignedIdentitiesValue

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfiguration = original.VirtualMachineScaleSetIPConfiguration

// Describes a virtual machine scale set network profile's IP configuration properties.
type VirtualMachineScaleSetIPConfigurationProperties = original.VirtualMachineScaleSetIPConfigurationProperties

// Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIPTag = original.VirtualMachineScaleSetIPTag

// The instance view of a virtual machine scale set.
type VirtualMachineScaleSetInstanceView = original.VirtualMachineScaleSetInstanceView

// VirtualMachineScaleSetInstanceViewResponse is the response envelope for operations that return a VirtualMachineScaleSetInstanceView type.
type VirtualMachineScaleSetInstanceViewResponse = original.VirtualMachineScaleSetInstanceViewResponse

// Instance view statuses summary for virtual machines of a virtual machine scale set.
type VirtualMachineScaleSetInstanceViewStatusesSummary = original.VirtualMachineScaleSetInstanceViewStatusesSummary

// List of Virtual Machine Scale Set OS Upgrade History operation response.
type VirtualMachineScaleSetListOSUpgradeHistory = original.VirtualMachineScaleSetListOSUpgradeHistory

// VirtualMachineScaleSetListOSUpgradeHistoryPager provides iteration over VirtualMachineScaleSetListOSUpgradeHistory pages.
type VirtualMachineScaleSetListOSUpgradeHistoryPager = original.VirtualMachineScaleSetListOSUpgradeHistoryPager

// VirtualMachineScaleSetListOSUpgradeHistoryResponse is the response envelope for operations that return a VirtualMachineScaleSetListOSUpgradeHistory type.
type VirtualMachineScaleSetListOSUpgradeHistoryResponse = original.VirtualMachineScaleSetListOSUpgradeHistoryResponse

// The List Virtual Machine operation response.
type VirtualMachineScaleSetListResult = original.VirtualMachineScaleSetListResult

// VirtualMachineScaleSetListResultPager provides iteration over VirtualMachineScaleSetListResult pages.
type VirtualMachineScaleSetListResultPager = original.VirtualMachineScaleSetListResultPager

// VirtualMachineScaleSetListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListResult type.
type VirtualMachineScaleSetListResultResponse = original.VirtualMachineScaleSetListResultResponse

// The Virtual Machine Scale Set List Skus operation response.
type VirtualMachineScaleSetListSKUsResult = original.VirtualMachineScaleSetListSKUsResult

// VirtualMachineScaleSetListSKUsResultPager provides iteration over VirtualMachineScaleSetListSKUsResult pages.
type VirtualMachineScaleSetListSKUsResultPager = original.VirtualMachineScaleSetListSKUsResultPager

// VirtualMachineScaleSetListSKUsResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListSKUsResult type.
type VirtualMachineScaleSetListSKUsResultResponse = original.VirtualMachineScaleSetListSKUsResultResponse

// The List Virtual Machine operation response.
type VirtualMachineScaleSetListWithLinkResult = original.VirtualMachineScaleSetListWithLinkResult

// VirtualMachineScaleSetListWithLinkResultPager provides iteration over VirtualMachineScaleSetListWithLinkResult pages.
type VirtualMachineScaleSetListWithLinkResultPager = original.VirtualMachineScaleSetListWithLinkResultPager

// VirtualMachineScaleSetListWithLinkResultResponse is the response envelope for operations that return a VirtualMachineScaleSetListWithLinkResult type.
type VirtualMachineScaleSetListWithLinkResultResponse = original.VirtualMachineScaleSetListWithLinkResultResponse

// Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParameters = original.VirtualMachineScaleSetManagedDiskParameters

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfiguration = original.VirtualMachineScaleSetNetworkConfiguration

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDNSSettings = original.VirtualMachineScaleSetNetworkConfigurationDNSSettings

// Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetNetworkConfigurationProperties = original.VirtualMachineScaleSetNetworkConfigurationProperties

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfile = original.VirtualMachineScaleSetNetworkProfile

// Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDisk = original.VirtualMachineScaleSetOSDisk

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfile = original.VirtualMachineScaleSetOSProfile

// VirtualMachineScaleSetPoller provides polling facilities until the operation completes
type VirtualMachineScaleSetPoller = original.VirtualMachineScaleSetPoller

// VirtualMachineScaleSetPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSet type.
type VirtualMachineScaleSetPollerResponse = original.VirtualMachineScaleSetPollerResponse

// Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetProperties = original.VirtualMachineScaleSetProperties

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfiguration = original.VirtualMachineScaleSetPublicIPAddressConfiguration

// Describes a virtual machines scale sets network configuration's DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings = original.VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationProperties = original.VirtualMachineScaleSetPublicIPAddressConfigurationProperties

// Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetReimageParameters = original.VirtualMachineScaleSetReimageParameters

// VirtualMachineScaleSetResponse is the response envelope for operations that return a VirtualMachineScaleSet type.
type VirtualMachineScaleSetResponse = original.VirtualMachineScaleSetResponse

// VirtualMachineScaleSetRollingUpgradesBeginCancelOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginCancel method.
type VirtualMachineScaleSetRollingUpgradesBeginCancelOptions = original.VirtualMachineScaleSetRollingUpgradesBeginCancelOptions

// VirtualMachineScaleSetRollingUpgradesBeginStartExtensionUpgradeOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginStartExtensionUpgrade
// method.
type VirtualMachineScaleSetRollingUpgradesBeginStartExtensionUpgradeOptions = original.VirtualMachineScaleSetRollingUpgradesBeginStartExtensionUpgradeOptions

// VirtualMachineScaleSetRollingUpgradesBeginStartOSUpgradeOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.BeginStartOSUpgrade
// method.
type VirtualMachineScaleSetRollingUpgradesBeginStartOSUpgradeOptions = original.VirtualMachineScaleSetRollingUpgradesBeginStartOSUpgradeOptions

// VirtualMachineScaleSetRollingUpgradesClient contains the methods for the VirtualMachineScaleSetRollingUpgrades group.
// Don't use this type directly, use NewVirtualMachineScaleSetRollingUpgradesClient() instead.
type VirtualMachineScaleSetRollingUpgradesClient = original.VirtualMachineScaleSetRollingUpgradesClient

// VirtualMachineScaleSetRollingUpgradesGetLatestOptions contains the optional parameters for the VirtualMachineScaleSetRollingUpgrades.GetLatest method.
type VirtualMachineScaleSetRollingUpgradesGetLatestOptions = original.VirtualMachineScaleSetRollingUpgradesGetLatestOptions

// Describes an available virtual machine scale set sku.
type VirtualMachineScaleSetSKU = original.VirtualMachineScaleSetSKU

// Describes scaling information of a sku.
type VirtualMachineScaleSetSKUCapacity = original.VirtualMachineScaleSetSKUCapacity

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfile = original.VirtualMachineScaleSetStorageProfile

// Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdate = original.VirtualMachineScaleSetUpdate

// Describes a virtual machine scale set network profile's IP configuration. NOTE: The subnet of a scale set may be modified as long as the original subnet
// and the new subnet are in the same virtual
// network
type VirtualMachineScaleSetUpdateIPConfiguration = original.VirtualMachineScaleSetUpdateIPConfiguration

// Describes a virtual machine scale set network profile's IP configuration properties.
type VirtualMachineScaleSetUpdateIPConfigurationProperties = original.VirtualMachineScaleSetUpdateIPConfigurationProperties

// Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetUpdateNetworkConfiguration = original.VirtualMachineScaleSetUpdateNetworkConfiguration

// Describes a virtual machine scale set updatable network profile's IP configuration.Use this object for updating network profile's IP Configuration.
type VirtualMachineScaleSetUpdateNetworkConfigurationProperties = original.VirtualMachineScaleSetUpdateNetworkConfigurationProperties

// Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetUpdateNetworkProfile = original.VirtualMachineScaleSetUpdateNetworkProfile

// Describes virtual machine scale set operating system disk Update Object. This should be used for Updating VMSS OS Disk.
type VirtualMachineScaleSetUpdateOSDisk = original.VirtualMachineScaleSetUpdateOSDisk

// Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetUpdateOSProfile = original.VirtualMachineScaleSetUpdateOSProfile

// Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdateProperties = original.VirtualMachineScaleSetUpdateProperties

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfiguration = original.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration

// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties = original.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties

// Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetUpdateStorageProfile = original.VirtualMachineScaleSetUpdateStorageProfile

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetUpdateVMProfile = original.VirtualMachineScaleSetUpdateVMProfile

// Describes a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVM = original.VirtualMachineScaleSetVM

// Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtension = original.VirtualMachineScaleSetVMExtension

// VirtualMachineScaleSetVMExtensionPoller provides polling facilities until the operation completes
type VirtualMachineScaleSetVMExtensionPoller = original.VirtualMachineScaleSetVMExtensionPoller

// VirtualMachineScaleSetVMExtensionPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetVMExtension
// type.
type VirtualMachineScaleSetVMExtensionPollerResponse = original.VirtualMachineScaleSetVMExtensionPollerResponse

// VirtualMachineScaleSetVMExtensionResponse is the response envelope for operations that return a VirtualMachineScaleSetVMExtension type.
type VirtualMachineScaleSetVMExtensionResponse = original.VirtualMachineScaleSetVMExtensionResponse

// Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtensionUpdate = original.VirtualMachineScaleSetVMExtensionUpdate

// VirtualMachineScaleSetVMExtensionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetVMExtensionsBeginCreateOrUpdateOptions = original.VirtualMachineScaleSetVMExtensionsBeginCreateOrUpdateOptions

// VirtualMachineScaleSetVMExtensionsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginDelete method.
type VirtualMachineScaleSetVMExtensionsBeginDeleteOptions = original.VirtualMachineScaleSetVMExtensionsBeginDeleteOptions

// VirtualMachineScaleSetVMExtensionsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.BeginUpdate method.
type VirtualMachineScaleSetVMExtensionsBeginUpdateOptions = original.VirtualMachineScaleSetVMExtensionsBeginUpdateOptions

// VirtualMachineScaleSetVMExtensionsClient contains the methods for the VirtualMachineScaleSetVMExtensions group.
// Don't use this type directly, use NewVirtualMachineScaleSetVMExtensionsClient() instead.
type VirtualMachineScaleSetVMExtensionsClient = original.VirtualMachineScaleSetVMExtensionsClient

// VirtualMachineScaleSetVMExtensionsGetOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.Get method.
type VirtualMachineScaleSetVMExtensionsGetOptions = original.VirtualMachineScaleSetVMExtensionsGetOptions

// VirtualMachineScaleSetVMExtensionsListOptions contains the optional parameters for the VirtualMachineScaleSetVMExtensions.List method.
type VirtualMachineScaleSetVMExtensionsListOptions = original.VirtualMachineScaleSetVMExtensionsListOptions

// The List VMSS VM Extension operation response
type VirtualMachineScaleSetVMExtensionsListResult = original.VirtualMachineScaleSetVMExtensionsListResult

// VirtualMachineScaleSetVMExtensionsListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetVMExtensionsListResult
// type.
type VirtualMachineScaleSetVMExtensionsListResultResponse = original.VirtualMachineScaleSetVMExtensionsListResultResponse

// Extensions summary for virtual machines of a virtual machine scale set.
type VirtualMachineScaleSetVMExtensionsSummary = original.VirtualMachineScaleSetVMExtensionsSummary

// Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceIDs = original.VirtualMachineScaleSetVMInstanceIDs

// Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceRequiredIDs = original.VirtualMachineScaleSetVMInstanceRequiredIDs

// The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceView = original.VirtualMachineScaleSetVMInstanceView

// VirtualMachineScaleSetVMInstanceViewResponse is the response envelope for operations that return a VirtualMachineScaleSetVMInstanceView type.
type VirtualMachineScaleSetVMInstanceViewResponse = original.VirtualMachineScaleSetVMInstanceViewResponse

// The List Virtual Machine Scale Set VMs operation response.
type VirtualMachineScaleSetVMListResult = original.VirtualMachineScaleSetVMListResult

// VirtualMachineScaleSetVMListResultPager provides iteration over VirtualMachineScaleSetVMListResult pages.
type VirtualMachineScaleSetVMListResultPager = original.VirtualMachineScaleSetVMListResultPager

// VirtualMachineScaleSetVMListResultResponse is the response envelope for operations that return a VirtualMachineScaleSetVMListResult type.
type VirtualMachineScaleSetVMListResultResponse = original.VirtualMachineScaleSetVMListResultResponse

// Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfiguration = original.VirtualMachineScaleSetVMNetworkProfileConfiguration

// VirtualMachineScaleSetVMPoller provides polling facilities until the operation completes
type VirtualMachineScaleSetVMPoller = original.VirtualMachineScaleSetVMPoller

// VirtualMachineScaleSetVMPollerResponse is the response envelope for operations that asynchronously return a VirtualMachineScaleSetVM type.
type VirtualMachineScaleSetVMPollerResponse = original.VirtualMachineScaleSetVMPollerResponse

// Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfile = original.VirtualMachineScaleSetVMProfile

// Describes the properties of a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVMProperties = original.VirtualMachineScaleSetVMProperties

// The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicy = original.VirtualMachineScaleSetVMProtectionPolicy

// Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetVMReimageParameters = original.VirtualMachineScaleSetVMReimageParameters

// VirtualMachineScaleSetVMResponse is the response envelope for operations that return a VirtualMachineScaleSetVM type.
type VirtualMachineScaleSetVMResponse = original.VirtualMachineScaleSetVMResponse

// VirtualMachineScaleSetVMRunCommandsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginCreateOrUpdate
// method.
type VirtualMachineScaleSetVMRunCommandsBeginCreateOrUpdateOptions = original.VirtualMachineScaleSetVMRunCommandsBeginCreateOrUpdateOptions

// VirtualMachineScaleSetVMRunCommandsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginDelete method.
type VirtualMachineScaleSetVMRunCommandsBeginDeleteOptions = original.VirtualMachineScaleSetVMRunCommandsBeginDeleteOptions

// VirtualMachineScaleSetVMRunCommandsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.BeginUpdate method.
type VirtualMachineScaleSetVMRunCommandsBeginUpdateOptions = original.VirtualMachineScaleSetVMRunCommandsBeginUpdateOptions

// VirtualMachineScaleSetVMRunCommandsClient contains the methods for the VirtualMachineScaleSetVMRunCommands group.
// Don't use this type directly, use NewVirtualMachineScaleSetVMRunCommandsClient() instead.
type VirtualMachineScaleSetVMRunCommandsClient = original.VirtualMachineScaleSetVMRunCommandsClient

// VirtualMachineScaleSetVMRunCommandsGetOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.Get method.
type VirtualMachineScaleSetVMRunCommandsGetOptions = original.VirtualMachineScaleSetVMRunCommandsGetOptions

// VirtualMachineScaleSetVMRunCommandsListOptions contains the optional parameters for the VirtualMachineScaleSetVMRunCommands.List method.
type VirtualMachineScaleSetVMRunCommandsListOptions = original.VirtualMachineScaleSetVMRunCommandsListOptions

// VirtualMachineScaleSetVMSBeginDeallocateOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginDeallocate method.
type VirtualMachineScaleSetVMSBeginDeallocateOptions = original.VirtualMachineScaleSetVMSBeginDeallocateOptions

// VirtualMachineScaleSetVMSBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginDelete method.
type VirtualMachineScaleSetVMSBeginDeleteOptions = original.VirtualMachineScaleSetVMSBeginDeleteOptions

// VirtualMachineScaleSetVMSBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginPerformMaintenance method.
type VirtualMachineScaleSetVMSBeginPerformMaintenanceOptions = original.VirtualMachineScaleSetVMSBeginPerformMaintenanceOptions

// VirtualMachineScaleSetVMSBeginPowerOffOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginPowerOff method.
type VirtualMachineScaleSetVMSBeginPowerOffOptions = original.VirtualMachineScaleSetVMSBeginPowerOffOptions

// VirtualMachineScaleSetVMSBeginRedeployOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginRedeploy method.
type VirtualMachineScaleSetVMSBeginRedeployOptions = original.VirtualMachineScaleSetVMSBeginRedeployOptions

// VirtualMachineScaleSetVMSBeginReimageAllOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginReimageAll method.
type VirtualMachineScaleSetVMSBeginReimageAllOptions = original.VirtualMachineScaleSetVMSBeginReimageAllOptions

// VirtualMachineScaleSetVMSBeginReimageOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginReimage method.
type VirtualMachineScaleSetVMSBeginReimageOptions = original.VirtualMachineScaleSetVMSBeginReimageOptions

// VirtualMachineScaleSetVMSBeginRestartOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginRestart method.
type VirtualMachineScaleSetVMSBeginRestartOptions = original.VirtualMachineScaleSetVMSBeginRestartOptions

// VirtualMachineScaleSetVMSBeginRunCommandOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginRunCommand method.
type VirtualMachineScaleSetVMSBeginRunCommandOptions = original.VirtualMachineScaleSetVMSBeginRunCommandOptions

// VirtualMachineScaleSetVMSBeginStartOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginStart method.
type VirtualMachineScaleSetVMSBeginStartOptions = original.VirtualMachineScaleSetVMSBeginStartOptions

// VirtualMachineScaleSetVMSBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSetVMS.BeginUpdate method.
type VirtualMachineScaleSetVMSBeginUpdateOptions = original.VirtualMachineScaleSetVMSBeginUpdateOptions

// VirtualMachineScaleSetVMSClient contains the methods for the VirtualMachineScaleSetVMS group.
// Don't use this type directly, use NewVirtualMachineScaleSetVMSClient() instead.
type VirtualMachineScaleSetVMSClient = original.VirtualMachineScaleSetVMSClient

// VirtualMachineScaleSetVMSGetInstanceViewOptions contains the optional parameters for the VirtualMachineScaleSetVMS.GetInstanceView method.
type VirtualMachineScaleSetVMSGetInstanceViewOptions = original.VirtualMachineScaleSetVMSGetInstanceViewOptions

// VirtualMachineScaleSetVMSGetOptions contains the optional parameters for the VirtualMachineScaleSetVMS.Get method.
type VirtualMachineScaleSetVMSGetOptions = original.VirtualMachineScaleSetVMSGetOptions

// VirtualMachineScaleSetVMSListOptions contains the optional parameters for the VirtualMachineScaleSetVMS.List method.
type VirtualMachineScaleSetVMSListOptions = original.VirtualMachineScaleSetVMSListOptions

// VirtualMachineScaleSetVMSRetrieveBootDiagnosticsDataOptions contains the optional parameters for the VirtualMachineScaleSetVMS.RetrieveBootDiagnosticsData
// method.
type VirtualMachineScaleSetVMSRetrieveBootDiagnosticsDataOptions = original.VirtualMachineScaleSetVMSRetrieveBootDiagnosticsDataOptions

// VirtualMachineScaleSetVMSSimulateEvictionOptions contains the optional parameters for the VirtualMachineScaleSetVMS.SimulateEviction method.
type VirtualMachineScaleSetVMSSimulateEvictionOptions = original.VirtualMachineScaleSetVMSSimulateEvictionOptions

// VirtualMachineScaleSetsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginCreateOrUpdate method.
type VirtualMachineScaleSetsBeginCreateOrUpdateOptions = original.VirtualMachineScaleSetsBeginCreateOrUpdateOptions

// VirtualMachineScaleSetsBeginDeallocateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDeallocate method.
type VirtualMachineScaleSetsBeginDeallocateOptions = original.VirtualMachineScaleSetsBeginDeallocateOptions

// VirtualMachineScaleSetsBeginDeleteInstancesOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDeleteInstances method.
type VirtualMachineScaleSetsBeginDeleteInstancesOptions = original.VirtualMachineScaleSetsBeginDeleteInstancesOptions

// VirtualMachineScaleSetsBeginDeleteOptions contains the optional parameters for the VirtualMachineScaleSets.BeginDelete method.
type VirtualMachineScaleSetsBeginDeleteOptions = original.VirtualMachineScaleSetsBeginDeleteOptions

// VirtualMachineScaleSetsBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachineScaleSets.BeginPerformMaintenance method.
type VirtualMachineScaleSetsBeginPerformMaintenanceOptions = original.VirtualMachineScaleSetsBeginPerformMaintenanceOptions

// VirtualMachineScaleSetsBeginPowerOffOptions contains the optional parameters for the VirtualMachineScaleSets.BeginPowerOff method.
type VirtualMachineScaleSetsBeginPowerOffOptions = original.VirtualMachineScaleSetsBeginPowerOffOptions

// VirtualMachineScaleSetsBeginRedeployOptions contains the optional parameters for the VirtualMachineScaleSets.BeginRedeploy method.
type VirtualMachineScaleSetsBeginRedeployOptions = original.VirtualMachineScaleSetsBeginRedeployOptions

// VirtualMachineScaleSetsBeginReimageAllOptions contains the optional parameters for the VirtualMachineScaleSets.BeginReimageAll method.
type VirtualMachineScaleSetsBeginReimageAllOptions = original.VirtualMachineScaleSetsBeginReimageAllOptions

// VirtualMachineScaleSetsBeginReimageOptions contains the optional parameters for the VirtualMachineScaleSets.BeginReimage method.
type VirtualMachineScaleSetsBeginReimageOptions = original.VirtualMachineScaleSetsBeginReimageOptions

// VirtualMachineScaleSetsBeginRestartOptions contains the optional parameters for the VirtualMachineScaleSets.BeginRestart method.
type VirtualMachineScaleSetsBeginRestartOptions = original.VirtualMachineScaleSetsBeginRestartOptions

// VirtualMachineScaleSetsBeginSetOrchestrationServiceStateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginSetOrchestrationServiceState
// method.
type VirtualMachineScaleSetsBeginSetOrchestrationServiceStateOptions = original.VirtualMachineScaleSetsBeginSetOrchestrationServiceStateOptions

// VirtualMachineScaleSetsBeginStartOptions contains the optional parameters for the VirtualMachineScaleSets.BeginStart method.
type VirtualMachineScaleSetsBeginStartOptions = original.VirtualMachineScaleSetsBeginStartOptions

// VirtualMachineScaleSetsBeginUpdateInstancesOptions contains the optional parameters for the VirtualMachineScaleSets.BeginUpdateInstances method.
type VirtualMachineScaleSetsBeginUpdateInstancesOptions = original.VirtualMachineScaleSetsBeginUpdateInstancesOptions

// VirtualMachineScaleSetsBeginUpdateOptions contains the optional parameters for the VirtualMachineScaleSets.BeginUpdate method.
type VirtualMachineScaleSetsBeginUpdateOptions = original.VirtualMachineScaleSetsBeginUpdateOptions

// VirtualMachineScaleSetsClient contains the methods for the VirtualMachineScaleSets group.
// Don't use this type directly, use NewVirtualMachineScaleSetsClient() instead.
type VirtualMachineScaleSetsClient = original.VirtualMachineScaleSetsClient

// VirtualMachineScaleSetsConvertToSinglePlacementGroupOptions contains the optional parameters for the VirtualMachineScaleSets.ConvertToSinglePlacementGroup
// method.
type VirtualMachineScaleSetsConvertToSinglePlacementGroupOptions = original.VirtualMachineScaleSetsConvertToSinglePlacementGroupOptions

// VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions contains the optional parameters for the VirtualMachineScaleSets.ForceRecoveryServiceFabricPlatformUpdateDomainWalk
// method.
type VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions = original.VirtualMachineScaleSetsForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions

// VirtualMachineScaleSetsGetInstanceViewOptions contains the optional parameters for the VirtualMachineScaleSets.GetInstanceView method.
type VirtualMachineScaleSetsGetInstanceViewOptions = original.VirtualMachineScaleSetsGetInstanceViewOptions

// VirtualMachineScaleSetsGetOSUpgradeHistoryOptions contains the optional parameters for the VirtualMachineScaleSets.GetOSUpgradeHistory method.
type VirtualMachineScaleSetsGetOSUpgradeHistoryOptions = original.VirtualMachineScaleSetsGetOSUpgradeHistoryOptions

// VirtualMachineScaleSetsGetOptions contains the optional parameters for the VirtualMachineScaleSets.Get method.
type VirtualMachineScaleSetsGetOptions = original.VirtualMachineScaleSetsGetOptions

// VirtualMachineScaleSetsListAllOptions contains the optional parameters for the VirtualMachineScaleSets.ListAll method.
type VirtualMachineScaleSetsListAllOptions = original.VirtualMachineScaleSetsListAllOptions

// VirtualMachineScaleSetsListOptions contains the optional parameters for the VirtualMachineScaleSets.List method.
type VirtualMachineScaleSetsListOptions = original.VirtualMachineScaleSetsListOptions

// VirtualMachineScaleSetsListSKUsOptions contains the optional parameters for the VirtualMachineScaleSets.ListSKUs method.
type VirtualMachineScaleSetsListSKUsOptions = original.VirtualMachineScaleSetsListSKUsOptions

// Describes the properties of a VM size.
type VirtualMachineSize = original.VirtualMachineSize

// The List Virtual Machine operation response.
type VirtualMachineSizeListResult = original.VirtualMachineSizeListResult

// VirtualMachineSizeListResultResponse is the response envelope for operations that return a VirtualMachineSizeListResult type.
type VirtualMachineSizeListResultResponse = original.VirtualMachineSizeListResultResponse

// VirtualMachineSizesClient contains the methods for the VirtualMachineSizes group.
// Don't use this type directly, use NewVirtualMachineSizesClient() instead.
type VirtualMachineSizesClient = original.VirtualMachineSizesClient

// VirtualMachineSizesListOptions contains the optional parameters for the VirtualMachineSizes.List method.
type VirtualMachineSizesListOptions = original.VirtualMachineSizesListOptions

// Describes the properties of a Virtual Machine software patch.
type VirtualMachineSoftwarePatchProperties = original.VirtualMachineSoftwarePatchProperties

// The status code and count of the virtual machine scale set instance view status summary.
type VirtualMachineStatusCodeCount = original.VirtualMachineStatusCodeCount

// Describes a Virtual Machine Update.
type VirtualMachineUpdate = original.VirtualMachineUpdate

// VirtualMachinesBeginAssessPatchesOptions contains the optional parameters for the VirtualMachines.BeginAssessPatches method.
type VirtualMachinesBeginAssessPatchesOptions = original.VirtualMachinesBeginAssessPatchesOptions

// VirtualMachinesBeginCaptureOptions contains the optional parameters for the VirtualMachines.BeginCapture method.
type VirtualMachinesBeginCaptureOptions = original.VirtualMachinesBeginCaptureOptions

// VirtualMachinesBeginConvertToManagedDisksOptions contains the optional parameters for the VirtualMachines.BeginConvertToManagedDisks method.
type VirtualMachinesBeginConvertToManagedDisksOptions = original.VirtualMachinesBeginConvertToManagedDisksOptions

// VirtualMachinesBeginCreateOrUpdateOptions contains the optional parameters for the VirtualMachines.BeginCreateOrUpdate method.
type VirtualMachinesBeginCreateOrUpdateOptions = original.VirtualMachinesBeginCreateOrUpdateOptions

// VirtualMachinesBeginDeallocateOptions contains the optional parameters for the VirtualMachines.BeginDeallocate method.
type VirtualMachinesBeginDeallocateOptions = original.VirtualMachinesBeginDeallocateOptions

// VirtualMachinesBeginDeleteOptions contains the optional parameters for the VirtualMachines.BeginDelete method.
type VirtualMachinesBeginDeleteOptions = original.VirtualMachinesBeginDeleteOptions

// VirtualMachinesBeginPerformMaintenanceOptions contains the optional parameters for the VirtualMachines.BeginPerformMaintenance method.
type VirtualMachinesBeginPerformMaintenanceOptions = original.VirtualMachinesBeginPerformMaintenanceOptions

// VirtualMachinesBeginPowerOffOptions contains the optional parameters for the VirtualMachines.BeginPowerOff method.
type VirtualMachinesBeginPowerOffOptions = original.VirtualMachinesBeginPowerOffOptions

// VirtualMachinesBeginReapplyOptions contains the optional parameters for the VirtualMachines.BeginReapply method.
type VirtualMachinesBeginReapplyOptions = original.VirtualMachinesBeginReapplyOptions

// VirtualMachinesBeginRedeployOptions contains the optional parameters for the VirtualMachines.BeginRedeploy method.
type VirtualMachinesBeginRedeployOptions = original.VirtualMachinesBeginRedeployOptions

// VirtualMachinesBeginReimageOptions contains the optional parameters for the VirtualMachines.BeginReimage method.
type VirtualMachinesBeginReimageOptions = original.VirtualMachinesBeginReimageOptions

// VirtualMachinesBeginRestartOptions contains the optional parameters for the VirtualMachines.BeginRestart method.
type VirtualMachinesBeginRestartOptions = original.VirtualMachinesBeginRestartOptions

// VirtualMachinesBeginRunCommandOptions contains the optional parameters for the VirtualMachines.BeginRunCommand method.
type VirtualMachinesBeginRunCommandOptions = original.VirtualMachinesBeginRunCommandOptions

// VirtualMachinesBeginStartOptions contains the optional parameters for the VirtualMachines.BeginStart method.
type VirtualMachinesBeginStartOptions = original.VirtualMachinesBeginStartOptions

// VirtualMachinesBeginUpdateOptions contains the optional parameters for the VirtualMachines.BeginUpdate method.
type VirtualMachinesBeginUpdateOptions = original.VirtualMachinesBeginUpdateOptions

// VirtualMachinesClient contains the methods for the VirtualMachines group.
// Don't use this type directly, use NewVirtualMachinesClient() instead.
type VirtualMachinesClient = original.VirtualMachinesClient

// VirtualMachinesGeneralizeOptions contains the optional parameters for the VirtualMachines.Generalize method.
type VirtualMachinesGeneralizeOptions = original.VirtualMachinesGeneralizeOptions

// VirtualMachinesGetOptions contains the optional parameters for the VirtualMachines.Get method.
type VirtualMachinesGetOptions = original.VirtualMachinesGetOptions

// VirtualMachinesInstanceViewOptions contains the optional parameters for the VirtualMachines.InstanceView method.
type VirtualMachinesInstanceViewOptions = original.VirtualMachinesInstanceViewOptions

// VirtualMachinesListAllOptions contains the optional parameters for the VirtualMachines.ListAll method.
type VirtualMachinesListAllOptions = original.VirtualMachinesListAllOptions

// VirtualMachinesListAvailableSizesOptions contains the optional parameters for the VirtualMachines.ListAvailableSizes method.
type VirtualMachinesListAvailableSizesOptions = original.VirtualMachinesListAvailableSizesOptions

// VirtualMachinesListByLocationOptions contains the optional parameters for the VirtualMachines.ListByLocation method.
type VirtualMachinesListByLocationOptions = original.VirtualMachinesListByLocationOptions

// VirtualMachinesListOptions contains the optional parameters for the VirtualMachines.List method.
type VirtualMachinesListOptions = original.VirtualMachinesListOptions

// VirtualMachinesRetrieveBootDiagnosticsDataOptions contains the optional parameters for the VirtualMachines.RetrieveBootDiagnosticsData method.
type VirtualMachinesRetrieveBootDiagnosticsDataOptions = original.VirtualMachinesRetrieveBootDiagnosticsDataOptions

// VirtualMachinesSimulateEvictionOptions contains the optional parameters for the VirtualMachines.SimulateEviction method.
type VirtualMachinesSimulateEvictionOptions = original.VirtualMachinesSimulateEvictionOptions

// Describes Windows Remote Management configuration of the VM
type WinRmConfiguration = original.WinRmConfiguration

// Describes Protocol and thumbprint of Windows Remote Management listener
type WinRmListener = original.WinRmListener

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration = original.WindowsConfiguration

// NewAvailabilitySetsClient creates a new instance of AvailabilitySetsClient with the specified values.
func NewAvailabilitySetsClient(con *armcore.Connection, subscriptionID string) AvailabilitySetsClient {
	return original.NewAvailabilitySetsClient(con, subscriptionID)
}

// NewContainerServicesClient creates a new instance of ContainerServicesClient with the specified values.
func NewContainerServicesClient(con *armcore.Connection, subscriptionID string) ContainerServicesClient {
	return original.NewContainerServicesClient(con, subscriptionID)
}

// NewDedicatedHostGroupsClient creates a new instance of DedicatedHostGroupsClient with the specified values.
func NewDedicatedHostGroupsClient(con *armcore.Connection, subscriptionID string) DedicatedHostGroupsClient {
	return original.NewDedicatedHostGroupsClient(con, subscriptionID)
}

// NewDedicatedHostsClient creates a new instance of DedicatedHostsClient with the specified values.
func NewDedicatedHostsClient(con *armcore.Connection, subscriptionID string) DedicatedHostsClient {
	return original.NewDedicatedHostsClient(con, subscriptionID)
}

// NewDiskAccessesClient creates a new instance of DiskAccessesClient with the specified values.
func NewDiskAccessesClient(con *armcore.Connection, subscriptionID string) DiskAccessesClient {
	return original.NewDiskAccessesClient(con, subscriptionID)
}

// NewDiskEncryptionSetsClient creates a new instance of DiskEncryptionSetsClient with the specified values.
func NewDiskEncryptionSetsClient(con *armcore.Connection, subscriptionID string) DiskEncryptionSetsClient {
	return original.NewDiskEncryptionSetsClient(con, subscriptionID)
}

// NewDisksClient creates a new instance of DisksClient with the specified values.
func NewDisksClient(con *armcore.Connection, subscriptionID string) DisksClient {
	return original.NewDisksClient(con, subscriptionID)
}

// NewGalleriesClient creates a new instance of GalleriesClient with the specified values.
func NewGalleriesClient(con *armcore.Connection, subscriptionID string) GalleriesClient {
	return original.NewGalleriesClient(con, subscriptionID)
}

// NewGalleryApplicationVersionsClient creates a new instance of GalleryApplicationVersionsClient with the specified values.
func NewGalleryApplicationVersionsClient(con *armcore.Connection, subscriptionID string) GalleryApplicationVersionsClient {
	return original.NewGalleryApplicationVersionsClient(con, subscriptionID)
}

// NewGalleryApplicationsClient creates a new instance of GalleryApplicationsClient with the specified values.
func NewGalleryApplicationsClient(con *armcore.Connection, subscriptionID string) GalleryApplicationsClient {
	return original.NewGalleryApplicationsClient(con, subscriptionID)
}

// NewGalleryImageVersionsClient creates a new instance of GalleryImageVersionsClient with the specified values.
func NewGalleryImageVersionsClient(con *armcore.Connection, subscriptionID string) GalleryImageVersionsClient {
	return original.NewGalleryImageVersionsClient(con, subscriptionID)
}

// NewGalleryImagesClient creates a new instance of GalleryImagesClient with the specified values.
func NewGalleryImagesClient(con *armcore.Connection, subscriptionID string) GalleryImagesClient {
	return original.NewGalleryImagesClient(con, subscriptionID)
}

// NewGallerySharingProfileClient creates a new instance of GallerySharingProfileClient with the specified values.
func NewGallerySharingProfileClient(con *armcore.Connection, subscriptionID string) GallerySharingProfileClient {
	return original.NewGallerySharingProfileClient(con, subscriptionID)
}

// NewImagesClient creates a new instance of ImagesClient with the specified values.
func NewImagesClient(con *armcore.Connection, subscriptionID string) ImagesClient {
	return original.NewImagesClient(con, subscriptionID)
}

// NewLogAnalyticsClient creates a new instance of LogAnalyticsClient with the specified values.
func NewLogAnalyticsClient(con *armcore.Connection, subscriptionID string) LogAnalyticsClient {
	return original.NewLogAnalyticsClient(con, subscriptionID)
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(con *armcore.Connection) OperationsClient {
	return original.NewOperationsClient(con)
}

// NewProximityPlacementGroupsClient creates a new instance of ProximityPlacementGroupsClient with the specified values.
func NewProximityPlacementGroupsClient(con *armcore.Connection, subscriptionID string) ProximityPlacementGroupsClient {
	return original.NewProximityPlacementGroupsClient(con, subscriptionID)
}

// NewResourceSKUsClient creates a new instance of ResourceSKUsClient with the specified values.
func NewResourceSKUsClient(con *armcore.Connection, subscriptionID string) ResourceSKUsClient {
	return original.NewResourceSKUsClient(con, subscriptionID)
}

// NewSSHPublicKeysClient creates a new instance of SSHPublicKeysClient with the specified values.
func NewSSHPublicKeysClient(con *armcore.Connection, subscriptionID string) SSHPublicKeysClient {
	return original.NewSSHPublicKeysClient(con, subscriptionID)
}

// NewSharedGalleriesClient creates a new instance of SharedGalleriesClient with the specified values.
func NewSharedGalleriesClient(con *armcore.Connection, subscriptionID string) SharedGalleriesClient {
	return original.NewSharedGalleriesClient(con, subscriptionID)
}

// NewSharedGalleryImageVersionsClient creates a new instance of SharedGalleryImageVersionsClient with the specified values.
func NewSharedGalleryImageVersionsClient(con *armcore.Connection, subscriptionID string) SharedGalleryImageVersionsClient {
	return original.NewSharedGalleryImageVersionsClient(con, subscriptionID)
}

// NewSharedGalleryImagesClient creates a new instance of SharedGalleryImagesClient with the specified values.
func NewSharedGalleryImagesClient(con *armcore.Connection, subscriptionID string) SharedGalleryImagesClient {
	return original.NewSharedGalleryImagesClient(con, subscriptionID)
}

// NewSnapshotsClient creates a new instance of SnapshotsClient with the specified values.
func NewSnapshotsClient(con *armcore.Connection, subscriptionID string) SnapshotsClient {
	return original.NewSnapshotsClient(con, subscriptionID)
}

// NewUsageClient creates a new instance of UsageClient with the specified values.
func NewUsageClient(con *armcore.Connection, subscriptionID string) UsageClient {
	return original.NewUsageClient(con, subscriptionID)
}

// NewVirtualMachineExtensionImagesClient creates a new instance of VirtualMachineExtensionImagesClient with the specified values.
func NewVirtualMachineExtensionImagesClient(con *armcore.Connection, subscriptionID string) VirtualMachineExtensionImagesClient {
	return original.NewVirtualMachineExtensionImagesClient(con, subscriptionID)
}

// NewVirtualMachineExtensionsClient creates a new instance of VirtualMachineExtensionsClient with the specified values.
func NewVirtualMachineExtensionsClient(con *armcore.Connection, subscriptionID string) VirtualMachineExtensionsClient {
	return original.NewVirtualMachineExtensionsClient(con, subscriptionID)
}

// NewVirtualMachineImagesClient creates a new instance of VirtualMachineImagesClient with the specified values.
func NewVirtualMachineImagesClient(con *armcore.Connection, subscriptionID string) VirtualMachineImagesClient {
	return original.NewVirtualMachineImagesClient(con, subscriptionID)
}

// NewVirtualMachineRunCommandsClient creates a new instance of VirtualMachineRunCommandsClient with the specified values.
func NewVirtualMachineRunCommandsClient(con *armcore.Connection, subscriptionID string) VirtualMachineRunCommandsClient {
	return original.NewVirtualMachineRunCommandsClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetExtensionsClient creates a new instance of VirtualMachineScaleSetExtensionsClient with the specified values.
func NewVirtualMachineScaleSetExtensionsClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetExtensionsClient {
	return original.NewVirtualMachineScaleSetExtensionsClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetRollingUpgradesClient creates a new instance of VirtualMachineScaleSetRollingUpgradesClient with the specified values.
func NewVirtualMachineScaleSetRollingUpgradesClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetRollingUpgradesClient {
	return original.NewVirtualMachineScaleSetRollingUpgradesClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetVMExtensionsClient creates a new instance of VirtualMachineScaleSetVMExtensionsClient with the specified values.
func NewVirtualMachineScaleSetVMExtensionsClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetVMExtensionsClient {
	return original.NewVirtualMachineScaleSetVMExtensionsClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetVMRunCommandsClient creates a new instance of VirtualMachineScaleSetVMRunCommandsClient with the specified values.
func NewVirtualMachineScaleSetVMRunCommandsClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetVMRunCommandsClient {
	return original.NewVirtualMachineScaleSetVMRunCommandsClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetVMSClient creates a new instance of VirtualMachineScaleSetVMSClient with the specified values.
func NewVirtualMachineScaleSetVMSClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetVMSClient {
	return original.NewVirtualMachineScaleSetVMSClient(con, subscriptionID)
}

// NewVirtualMachineScaleSetsClient creates a new instance of VirtualMachineScaleSetsClient with the specified values.
func NewVirtualMachineScaleSetsClient(con *armcore.Connection, subscriptionID string) VirtualMachineScaleSetsClient {
	return original.NewVirtualMachineScaleSetsClient(con, subscriptionID)
}

// NewVirtualMachineSizesClient creates a new instance of VirtualMachineSizesClient with the specified values.
func NewVirtualMachineSizesClient(con *armcore.Connection, subscriptionID string) VirtualMachineSizesClient {
	return original.NewVirtualMachineSizesClient(con, subscriptionID)
}

// NewVirtualMachinesClient creates a new instance of VirtualMachinesClient with the specified values.
func NewVirtualMachinesClient(con *armcore.Connection, subscriptionID string) VirtualMachinesClient {
	return original.NewVirtualMachinesClient(con, subscriptionID)
}
func PossibleAccessLevelValues() []AccessLevel {
	return original.PossibleAccessLevelValues()
}
func PossibleAggregatedReplicationStateValues() []AggregatedReplicationState {
	return original.PossibleAggregatedReplicationStateValues()
}
func PossibleAvailabilitySetSKUTypesValues() []AvailabilitySetSKUTypes {
	return original.PossibleAvailabilitySetSKUTypesValues()
}
func PossibleCachingTypesValues() []CachingTypes {
	return original.PossibleCachingTypesValues()
}
func PossibleContainerServiceOrchestratorTypesValues() []ContainerServiceOrchestratorTypes {
	return original.PossibleContainerServiceOrchestratorTypesValues()
}
func PossibleContainerServiceVMSizeTypesValues() []ContainerServiceVMSizeTypes {
	return original.PossibleContainerServiceVMSizeTypesValues()
}
func PossibleDedicatedHostLicenseTypesValues() []DedicatedHostLicenseTypes {
	return original.PossibleDedicatedHostLicenseTypesValues()
}
func PossibleDiffDiskOptionsValues() []DiffDiskOptions {
	return original.PossibleDiffDiskOptionsValues()
}
func PossibleDiffDiskPlacementValues() []DiffDiskPlacement {
	return original.PossibleDiffDiskPlacementValues()
}
func PossibleDiskCreateOptionTypesValues() []DiskCreateOptionTypes {
	return original.PossibleDiskCreateOptionTypesValues()
}
func PossibleDiskCreateOptionValues() []DiskCreateOption {
	return original.PossibleDiskCreateOptionValues()
}
func PossibleDiskEncryptionSetIDentityTypeValues() []DiskEncryptionSetIDentityType {
	return original.PossibleDiskEncryptionSetIDentityTypeValues()
}
func PossibleDiskEncryptionSetTypeValues() []DiskEncryptionSetType {
	return original.PossibleDiskEncryptionSetTypeValues()
}
func PossibleDiskStateValues() []DiskState {
	return original.PossibleDiskStateValues()
}
func PossibleDiskStorageAccountTypesValues() []DiskStorageAccountTypes {
	return original.PossibleDiskStorageAccountTypesValues()
}
func PossibleEncryptionTypeValues() []EncryptionType {
	return original.PossibleEncryptionTypeValues()
}
func PossibleEnum47Values() []Enum47 {
	return original.PossibleEnum47Values()
}
func PossibleExecutionStateValues() []ExecutionState {
	return original.PossibleExecutionStateValues()
}
func PossibleGalleryApplicationVersionPropertiesProvisioningStateValues() []GalleryApplicationVersionPropertiesProvisioningState {
	return original.PossibleGalleryApplicationVersionPropertiesProvisioningStateValues()
}
func PossibleGalleryImagePropertiesProvisioningStateValues() []GalleryImagePropertiesProvisioningState {
	return original.PossibleGalleryImagePropertiesProvisioningStateValues()
}
func PossibleGalleryImageVersionPropertiesProvisioningStateValues() []GalleryImageVersionPropertiesProvisioningState {
	return original.PossibleGalleryImageVersionPropertiesProvisioningStateValues()
}
func PossibleGalleryPropertiesProvisioningStateValues() []GalleryPropertiesProvisioningState {
	return original.PossibleGalleryPropertiesProvisioningStateValues()
}
func PossibleGallerySharingPermissionTypesValues() []GallerySharingPermissionTypes {
	return original.PossibleGallerySharingPermissionTypesValues()
}
func PossibleHostCachingValues() []HostCaching {
	return original.PossibleHostCachingValues()
}
func PossibleHyperVGenerationTypeValues() []HyperVGenerationType {
	return original.PossibleHyperVGenerationTypeValues()
}
func PossibleHyperVGenerationTypesValues() []HyperVGenerationTypes {
	return original.PossibleHyperVGenerationTypesValues()
}
func PossibleHyperVGenerationValues() []HyperVGeneration {
	return original.PossibleHyperVGenerationValues()
}
func PossibleIPVersionValues() []IPVersion {
	return original.PossibleIPVersionValues()
}
func PossibleInGuestPatchModeValues() []InGuestPatchMode {
	return original.PossibleInGuestPatchModeValues()
}
func PossibleIntervalInMinsValues() []IntervalInMins {
	return original.PossibleIntervalInMinsValues()
}
func PossibleMaintenanceOperationResultCodeTypesValues() []MaintenanceOperationResultCodeTypes {
	return original.PossibleMaintenanceOperationResultCodeTypesValues()
}
func PossibleNetworkAccessPolicyValues() []NetworkAccessPolicy {
	return original.PossibleNetworkAccessPolicyValues()
}
func PossibleOperatingSystemStateTypesValues() []OperatingSystemStateTypes {
	return original.PossibleOperatingSystemStateTypesValues()
}
func PossibleOperatingSystemTypesValues() []OperatingSystemTypes {
	return original.PossibleOperatingSystemTypesValues()
}
func PossibleOrchestrationServiceNamesValues() []OrchestrationServiceNames {
	return original.PossibleOrchestrationServiceNamesValues()
}
func PossibleOrchestrationServiceStateActionValues() []OrchestrationServiceStateAction {
	return original.PossibleOrchestrationServiceStateActionValues()
}
func PossibleOrchestrationServiceStateValues() []OrchestrationServiceState {
	return original.PossibleOrchestrationServiceStateValues()
}
func PossiblePatchAssessmentStateValues() []PatchAssessmentState {
	return original.PossiblePatchAssessmentStateValues()
}
func PossiblePatchOperationStatusValues() []PatchOperationStatus {
	return original.PossiblePatchOperationStatusValues()
}
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return original.PossiblePrivateEndpointConnectionProvisioningStateValues()
}
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return original.PossiblePrivateEndpointServiceConnectionStatusValues()
}
func PossibleProtocolTypesValues() []ProtocolTypes {
	return original.PossibleProtocolTypesValues()
}
func PossibleProximityPlacementGroupTypeValues() []ProximityPlacementGroupType {
	return original.PossibleProximityPlacementGroupTypeValues()
}
func PossibleRebootStatusValues() []RebootStatus {
	return original.PossibleRebootStatusValues()
}
func PossibleReplicationStateValues() []ReplicationState {
	return original.PossibleReplicationStateValues()
}
func PossibleReplicationStatusTypesValues() []ReplicationStatusTypes {
	return original.PossibleReplicationStatusTypesValues()
}
func PossibleResourceIDentityTypeValues() []ResourceIDentityType {
	return original.PossibleResourceIDentityTypeValues()
}
func PossibleResourceSKUCapacityScaleTypeValues() []ResourceSKUCapacityScaleType {
	return original.PossibleResourceSKUCapacityScaleTypeValues()
}
func PossibleResourceSKURestrictionsReasonCodeValues() []ResourceSKURestrictionsReasonCode {
	return original.PossibleResourceSKURestrictionsReasonCodeValues()
}
func PossibleResourceSKURestrictionsTypeValues() []ResourceSKURestrictionsType {
	return original.PossibleResourceSKURestrictionsTypeValues()
}
func PossibleRollingUpgradeActionTypeValues() []RollingUpgradeActionType {
	return original.PossibleRollingUpgradeActionTypeValues()
}
func PossibleRollingUpgradeStatusCodeValues() []RollingUpgradeStatusCode {
	return original.PossibleRollingUpgradeStatusCodeValues()
}
func PossibleSelectPermissionsValues() []SelectPermissions {
	return original.PossibleSelectPermissionsValues()
}
func PossibleSettingNamesValues() []SettingNames {
	return original.PossibleSettingNamesValues()
}
func PossibleSharedToValuesValues() []SharedToValues {
	return original.PossibleSharedToValuesValues()
}
func PossibleSharingProfileGroupTypesValues() []SharingProfileGroupTypes {
	return original.PossibleSharingProfileGroupTypesValues()
}
func PossibleSharingUpdateOperationTypesValues() []SharingUpdateOperationTypes {
	return original.PossibleSharingUpdateOperationTypesValues()
}
func PossibleSnapshotStorageAccountTypesValues() []SnapshotStorageAccountTypes {
	return original.PossibleSnapshotStorageAccountTypesValues()
}
func PossibleSoftwareUpdateRebootBehaviorValues() []SoftwareUpdateRebootBehavior {
	return original.PossibleSoftwareUpdateRebootBehaviorValues()
}
func PossibleStatusLevelTypesValues() []StatusLevelTypes {
	return original.PossibleStatusLevelTypesValues()
}
func PossibleStorageAccountTypeValues() []StorageAccountType {
	return original.PossibleStorageAccountTypeValues()
}
func PossibleStorageAccountTypesValues() []StorageAccountTypes {
	return original.PossibleStorageAccountTypesValues()
}
func PossibleUpgradeModeValues() []UpgradeMode {
	return original.PossibleUpgradeModeValues()
}
func PossibleUpgradeOperationInvokerValues() []UpgradeOperationInvoker {
	return original.PossibleUpgradeOperationInvokerValues()
}
func PossibleUpgradeStateValues() []UpgradeState {
	return original.PossibleUpgradeStateValues()
}
func PossibleVMDiskTypesValues() []VMDiskTypes {
	return original.PossibleVMDiskTypesValues()
}
func PossibleVirtualMachineEvictionPolicyTypesValues() []VirtualMachineEvictionPolicyTypes {
	return original.PossibleVirtualMachineEvictionPolicyTypesValues()
}
func PossibleVirtualMachinePriorityTypesValues() []VirtualMachinePriorityTypes {
	return original.PossibleVirtualMachinePriorityTypesValues()
}
func PossibleVirtualMachineScaleSetSKUScaleTypeValues() []VirtualMachineScaleSetSKUScaleType {
	return original.PossibleVirtualMachineScaleSetSKUScaleTypeValues()
}
func PossibleVirtualMachineScaleSetScaleInRulesValues() []VirtualMachineScaleSetScaleInRules {
	return original.PossibleVirtualMachineScaleSetScaleInRulesValues()
}
func PossibleVirtualMachineSizeTypesValues() []VirtualMachineSizeTypes {
	return original.PossibleVirtualMachineSizeTypesValues()
}
