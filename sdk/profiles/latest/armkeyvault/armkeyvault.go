// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// This code was generated by a tool.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault

import (
	original "github.com/Azure/azure-sdk-for-go/sdk/arm/keyvault/2019-09-01/armkeyvault"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
)

type AccessPolicyUpdateKind = original.AccessPolicyUpdateKind

const (
	AccessPolicyUpdateKindAdd     = original.AccessPolicyUpdateKindAdd
	AccessPolicyUpdateKindReplace = original.AccessPolicyUpdateKindReplace
	AccessPolicyUpdateKindRemove  = original.AccessPolicyUpdateKindRemove
)

type CertificatePermissions = original.CertificatePermissions

const (
	CertificatePermissionsAll            = original.CertificatePermissionsAll
	CertificatePermissionsBackup         = original.CertificatePermissionsBackup
	CertificatePermissionsCreate         = original.CertificatePermissionsCreate
	CertificatePermissionsDelete         = original.CertificatePermissionsDelete
	CertificatePermissionsDeleteissuers  = original.CertificatePermissionsDeleteissuers
	CertificatePermissionsGet            = original.CertificatePermissionsGet
	CertificatePermissionsGetissuers     = original.CertificatePermissionsGetissuers
	CertificatePermissionsImport         = original.CertificatePermissionsImport
	CertificatePermissionsList           = original.CertificatePermissionsList
	CertificatePermissionsListissuers    = original.CertificatePermissionsListissuers
	CertificatePermissionsManagecontacts = original.CertificatePermissionsManagecontacts
	CertificatePermissionsManageissuers  = original.CertificatePermissionsManageissuers
	CertificatePermissionsPurge          = original.CertificatePermissionsPurge
	CertificatePermissionsRecover        = original.CertificatePermissionsRecover
	CertificatePermissionsRestore        = original.CertificatePermissionsRestore
	CertificatePermissionsSetissuers     = original.CertificatePermissionsSetissuers
	CertificatePermissionsUpdate         = original.CertificatePermissionsUpdate
)

// CreateMode - The vault's create mode to indicate whether the vault need to be recovered or not.
type CreateMode = original.CreateMode

const (
	CreateModeRecover = original.CreateModeRecover
	CreateModeDefault = original.CreateModeDefault
)

// DeletionRecoveryLevel - The deletion recovery level currently in effect for the object. If it contains 'Purgeable', then the object can be permanently
// deleted by a privileged user; otherwise, only the system can purge the
// object at the end of the retention interval.
type DeletionRecoveryLevel = original.DeletionRecoveryLevel

const (
	DeletionRecoveryLevelPurgeable                        = original.DeletionRecoveryLevelPurgeable
	DeletionRecoveryLevelRecoverable                      = original.DeletionRecoveryLevelRecoverable
	DeletionRecoveryLevelRecoverableProtectedSubscription = original.DeletionRecoveryLevelRecoverableProtectedSubscription
	DeletionRecoveryLevelRecoverablePurgeable             = original.DeletionRecoveryLevelRecoverablePurgeable
)

// JSONWebKeyCurveName - The elliptic curve name. For valid values, see JsonWebKeyCurveName.
type JSONWebKeyCurveName = original.JSONWebKeyCurveName

const (
	JSONWebKeyCurveNameP256  = original.JSONWebKeyCurveNameP256
	JSONWebKeyCurveNameP256K = original.JSONWebKeyCurveNameP256K
	JSONWebKeyCurveNameP384  = original.JSONWebKeyCurveNameP384
	JSONWebKeyCurveNameP521  = original.JSONWebKeyCurveNameP521
)

// JSONWebKeyOperation - The permitted JSON web key operations of the key. For more information, see JsonWebKeyOperation.
type JSONWebKeyOperation = original.JSONWebKeyOperation

const (
	JSONWebKeyOperationDecrypt   = original.JSONWebKeyOperationDecrypt
	JSONWebKeyOperationEncrypt   = original.JSONWebKeyOperationEncrypt
	JSONWebKeyOperationImport    = original.JSONWebKeyOperationImport
	JSONWebKeyOperationSign      = original.JSONWebKeyOperationSign
	JSONWebKeyOperationUnwrapKey = original.JSONWebKeyOperationUnwrapKey
	JSONWebKeyOperationVerify    = original.JSONWebKeyOperationVerify
	JSONWebKeyOperationWrapKey   = original.JSONWebKeyOperationWrapKey
)

// JSONWebKeyType - The type of the key. For valid values, see JsonWebKeyType.
type JSONWebKeyType = original.JSONWebKeyType

const (
	JSONWebKeyTypeEc     = original.JSONWebKeyTypeEc
	JSONWebKeyTypeEchsm  = original.JSONWebKeyTypeEchsm
	JSONWebKeyTypeRsa    = original.JSONWebKeyTypeRsa
	JSONWebKeyTypeRsahsm = original.JSONWebKeyTypeRsahsm
)

type KeyPermissions = original.KeyPermissions

const (
	KeyPermissionsAll       = original.KeyPermissionsAll
	KeyPermissionsBackup    = original.KeyPermissionsBackup
	KeyPermissionsCreate    = original.KeyPermissionsCreate
	KeyPermissionsDecrypt   = original.KeyPermissionsDecrypt
	KeyPermissionsDelete    = original.KeyPermissionsDelete
	KeyPermissionsEncrypt   = original.KeyPermissionsEncrypt
	KeyPermissionsGet       = original.KeyPermissionsGet
	KeyPermissionsImport    = original.KeyPermissionsImport
	KeyPermissionsList      = original.KeyPermissionsList
	KeyPermissionsPurge     = original.KeyPermissionsPurge
	KeyPermissionsRecover   = original.KeyPermissionsRecover
	KeyPermissionsRestore   = original.KeyPermissionsRestore
	KeyPermissionsSign      = original.KeyPermissionsSign
	KeyPermissionsUnwrapKey = original.KeyPermissionsUnwrapKey
	KeyPermissionsUpdate    = original.KeyPermissionsUpdate
	KeyPermissionsVerify    = original.KeyPermissionsVerify
	KeyPermissionsWrapKey   = original.KeyPermissionsWrapKey
)

// NetworkRuleAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has
// been evaluated.
type NetworkRuleAction = original.NetworkRuleAction

const (
	NetworkRuleActionAllow = original.NetworkRuleActionAllow
	NetworkRuleActionDeny  = original.NetworkRuleActionDeny
)

// NetworkRuleBypassOptions - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
type NetworkRuleBypassOptions = original.NetworkRuleBypassOptions

const (
	NetworkRuleBypassOptionsAzureServices = original.NetworkRuleBypassOptionsAzureServices
	NetworkRuleBypassOptionsNone          = original.NetworkRuleBypassOptionsNone
)

// PrivateEndpointConnectionProvisioningState - The current provisioning state.
type PrivateEndpointConnectionProvisioningState = original.PrivateEndpointConnectionProvisioningState

const (
	PrivateEndpointConnectionProvisioningStateCreating     = original.PrivateEndpointConnectionProvisioningStateCreating
	PrivateEndpointConnectionProvisioningStateDeleting     = original.PrivateEndpointConnectionProvisioningStateDeleting
	PrivateEndpointConnectionProvisioningStateDisconnected = original.PrivateEndpointConnectionProvisioningStateDisconnected
	PrivateEndpointConnectionProvisioningStateFailed       = original.PrivateEndpointConnectionProvisioningStateFailed
	PrivateEndpointConnectionProvisioningStateSucceeded    = original.PrivateEndpointConnectionProvisioningStateSucceeded
	PrivateEndpointConnectionProvisioningStateUpdating     = original.PrivateEndpointConnectionProvisioningStateUpdating
)

// PrivateEndpointServiceConnectionStatus - The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus = original.PrivateEndpointServiceConnectionStatus

const (
	PrivateEndpointServiceConnectionStatusApproved     = original.PrivateEndpointServiceConnectionStatusApproved
	PrivateEndpointServiceConnectionStatusDisconnected = original.PrivateEndpointServiceConnectionStatusDisconnected
	PrivateEndpointServiceConnectionStatusPending      = original.PrivateEndpointServiceConnectionStatusPending
	PrivateEndpointServiceConnectionStatusRejected     = original.PrivateEndpointServiceConnectionStatusRejected
)

// Reason - The reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false.
type Reason = original.Reason

const (
	ReasonAccountNameInvalid = original.ReasonAccountNameInvalid
	ReasonAlreadyExists      = original.ReasonAlreadyExists
)

// SKUFamily - SKU family name
type SKUFamily = original.SKUFamily

const SKUFamilyA = original.SKUFamilyA

// SKUName - SKU name to specify whether the key vault is a standard vault or a premium vault.
type SKUName = original.SKUName

const (
	SKUNameStandard = original.SKUNameStandard
	SKUNamePremium  = original.SKUNamePremium
)

type SecretPermissions = original.SecretPermissions

const (
	SecretPermissionsAll     = original.SecretPermissionsAll
	SecretPermissionsBackup  = original.SecretPermissionsBackup
	SecretPermissionsDelete  = original.SecretPermissionsDelete
	SecretPermissionsGet     = original.SecretPermissionsGet
	SecretPermissionsList    = original.SecretPermissionsList
	SecretPermissionsPurge   = original.SecretPermissionsPurge
	SecretPermissionsRecover = original.SecretPermissionsRecover
	SecretPermissionsRestore = original.SecretPermissionsRestore
	SecretPermissionsSet     = original.SecretPermissionsSet
)

type StoragePermissions = original.StoragePermissions

const (
	StoragePermissionsAll           = original.StoragePermissionsAll
	StoragePermissionsBackup        = original.StoragePermissionsBackup
	StoragePermissionsDelete        = original.StoragePermissionsDelete
	StoragePermissionsDeletesas     = original.StoragePermissionsDeletesas
	StoragePermissionsGet           = original.StoragePermissionsGet
	StoragePermissionsGetsas        = original.StoragePermissionsGetsas
	StoragePermissionsList          = original.StoragePermissionsList
	StoragePermissionsListsas       = original.StoragePermissionsListsas
	StoragePermissionsPurge         = original.StoragePermissionsPurge
	StoragePermissionsRecover       = original.StoragePermissionsRecover
	StoragePermissionsRegeneratekey = original.StoragePermissionsRegeneratekey
	StoragePermissionsRestore       = original.StoragePermissionsRestore
	StoragePermissionsSet           = original.StoragePermissionsSet
	StoragePermissionsSetsas        = original.StoragePermissionsSetsas
	StoragePermissionsUpdate        = original.StoragePermissionsUpdate
)

// An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
type AccessPolicyEntry = original.AccessPolicyEntry

// The object attributes managed by the Azure Key Vault service.
type Attributes = original.Attributes

// The CheckNameAvailability operation response.
type CheckNameAvailabilityResult = original.CheckNameAvailabilityResult

// CheckNameAvailabilityResultResponse is the response envelope for operations that return a CheckNameAvailabilityResult type.
type CheckNameAvailabilityResultResponse = original.CheckNameAvailabilityResultResponse

// An error response from Key Vault resource provider
type CloudError = original.CloudError

// An error response from Key Vault resource provider
type CloudErrorBody = original.CloudErrorBody

// Deleted vault information with extended details.
type DeletedVault = original.DeletedVault

// List of vaults
type DeletedVaultListResult = original.DeletedVaultListResult

// DeletedVaultListResultPager provides iteration over DeletedVaultListResult pages.
type DeletedVaultListResultPager = original.DeletedVaultListResultPager

// DeletedVaultListResultResponse is the response envelope for operations that return a DeletedVaultListResult type.
type DeletedVaultListResultResponse = original.DeletedVaultListResultResponse

// Properties of the deleted vault.
type DeletedVaultProperties = original.DeletedVaultProperties

// DeletedVaultResponse is the response envelope for operations that return a DeletedVault type.
type DeletedVaultResponse = original.DeletedVaultResponse

// HTTPPoller provides polling facilities until the operation completes
type HTTPPoller = original.HTTPPoller

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse = original.HTTPPollerResponse

// A rule governing the accessibility of a vault from a specific ip address or ip range.
type IPRule = original.IPRule

// The key resource.
type Key = original.Key

// The attributes of the key.
type KeyAttributes = original.KeyAttributes

// The parameters used to create a key.
type KeyCreateParameters = original.KeyCreateParameters

// The page of keys.
type KeyListResult = original.KeyListResult

// KeyListResultPager provides iteration over KeyListResult pages.
type KeyListResultPager = original.KeyListResultPager

// KeyListResultResponse is the response envelope for operations that return a KeyListResult type.
type KeyListResultResponse = original.KeyListResultResponse

// The properties of the key.
type KeyProperties = original.KeyProperties

// KeyResponse is the response envelope for operations that return a Key type.
type KeyResponse = original.KeyResponse

// KeysClient contains the methods for the Keys group.
// Don't use this type directly, use NewKeysClient() instead.
type KeysClient = original.KeysClient

// KeysCreateIfNotExistOptions contains the optional parameters for the Keys.CreateIfNotExist method.
type KeysCreateIfNotExistOptions = original.KeysCreateIfNotExistOptions

// KeysGetOptions contains the optional parameters for the Keys.Get method.
type KeysGetOptions = original.KeysGetOptions

// KeysGetVersionOptions contains the optional parameters for the Keys.GetVersion method.
type KeysGetVersionOptions = original.KeysGetVersionOptions

// KeysListOptions contains the optional parameters for the Keys.List method.
type KeysListOptions = original.KeysListOptions

// KeysListVersionsOptions contains the optional parameters for the Keys.ListVersions method.
type KeysListVersionsOptions = original.KeysListVersionsOptions

// Log specification of operation.
type LogSpecification = original.LogSpecification

// A set of rules governing the network accessibility of a vault.
type NetworkRuleSet = original.NetworkRuleSet

// Key Vault REST API operation definition.
type Operation = original.Operation

// Display metadata associated with the operation.
type OperationDisplay = original.OperationDisplay

// Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult = original.OperationListResult

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager = original.OperationListResultPager

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse = original.OperationListResultResponse

// Properties of operation, include metric specifications.
type OperationProperties = original.OperationProperties

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient = original.OperationsClient

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions = original.OperationsListOptions

// Permissions the identity has for keys, secrets, certificates and storage.
type Permissions = original.Permissions

// Private endpoint object properties.
type PrivateEndpoint = original.PrivateEndpoint

// Private endpoint connection resource.
type PrivateEndpointConnection = original.PrivateEndpointConnection

// Private endpoint connection item.
type PrivateEndpointConnectionItem = original.PrivateEndpointConnectionItem

// PrivateEndpointConnectionPoller provides polling facilities until the operation completes
type PrivateEndpointConnectionPoller = original.PrivateEndpointConnectionPoller

// PrivateEndpointConnectionPollerResponse is the response envelope for operations that asynchronously return a PrivateEndpointConnection type.
type PrivateEndpointConnectionPollerResponse = original.PrivateEndpointConnectionPollerResponse

// Properties of the private endpoint connection resource.
type PrivateEndpointConnectionProperties = original.PrivateEndpointConnectionProperties

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse = original.PrivateEndpointConnectionResponse

// PrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnections.BeginDelete method.
type PrivateEndpointConnectionsBeginDeleteOptions = original.PrivateEndpointConnectionsBeginDeleteOptions

// PrivateEndpointConnectionsClient contains the methods for the PrivateEndpointConnections group.
// Don't use this type directly, use NewPrivateEndpointConnectionsClient() instead.
type PrivateEndpointConnectionsClient = original.PrivateEndpointConnectionsClient

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions = original.PrivateEndpointConnectionsGetOptions

// PrivateEndpointConnectionsPutOptions contains the optional parameters for the PrivateEndpointConnections.Put method.
type PrivateEndpointConnectionsPutOptions = original.PrivateEndpointConnectionsPutOptions

// A private link resource
type PrivateLinkResource = original.PrivateLinkResource

// A list of private link resources
type PrivateLinkResourceListResult = original.PrivateLinkResourceListResult

// PrivateLinkResourceListResultResponse is the response envelope for operations that return a PrivateLinkResourceListResult type.
type PrivateLinkResourceListResultResponse = original.PrivateLinkResourceListResultResponse

// Properties of a private link resource.
type PrivateLinkResourceProperties = original.PrivateLinkResourceProperties

// PrivateLinkResourcesClient contains the methods for the PrivateLinkResources group.
// Don't use this type directly, use NewPrivateLinkResourcesClient() instead.
type PrivateLinkResourcesClient = original.PrivateLinkResourcesClient

// PrivateLinkResourcesListByVaultOptions contains the optional parameters for the PrivateLinkResources.ListByVault method.
type PrivateLinkResourcesListByVaultOptions = original.PrivateLinkResourcesListByVaultOptions

// An object that represents the approval state of the private link connection.
type PrivateLinkServiceConnectionState = original.PrivateLinkServiceConnectionState

// Key Vault resource
type Resource = original.Resource

// List of vault resources.
type ResourceListResult = original.ResourceListResult

// ResourceListResultPager provides iteration over ResourceListResult pages.
type ResourceListResultPager = original.ResourceListResultPager

// ResourceListResultResponse is the response envelope for operations that return a ResourceListResult type.
type ResourceListResultResponse = original.ResourceListResultResponse

// SKU details
type SKU = original.SKU

// One property of operation, include log specifications.
type ServiceSpecification = original.ServiceSpecification

// Resource information with extended details.
type Vault = original.Vault

// Parameters for updating the access policy in a vault
type VaultAccessPolicyParameters = original.VaultAccessPolicyParameters

// VaultAccessPolicyParametersResponse is the response envelope for operations that return a VaultAccessPolicyParameters type.
type VaultAccessPolicyParametersResponse = original.VaultAccessPolicyParametersResponse

// Properties of the vault access policy
type VaultAccessPolicyProperties = original.VaultAccessPolicyProperties

// The parameters used to check the availability of the vault name.
type VaultCheckNameAvailabilityParameters = original.VaultCheckNameAvailabilityParameters

// Parameters for creating or updating a vault
type VaultCreateOrUpdateParameters = original.VaultCreateOrUpdateParameters

// List of vaults
type VaultListResult = original.VaultListResult

// VaultListResultPager provides iteration over VaultListResult pages.
type VaultListResultPager = original.VaultListResultPager

// VaultListResultResponse is the response envelope for operations that return a VaultListResult type.
type VaultListResultResponse = original.VaultListResultResponse

// Parameters for creating or updating a vault
type VaultPatchParameters = original.VaultPatchParameters

// Properties of the vault
type VaultPatchProperties = original.VaultPatchProperties

// VaultPoller provides polling facilities until the operation completes
type VaultPoller = original.VaultPoller

// VaultPollerResponse is the response envelope for operations that asynchronously return a Vault type.
type VaultPollerResponse = original.VaultPollerResponse

// Properties of the vault
type VaultProperties = original.VaultProperties

// VaultResponse is the response envelope for operations that return a Vault type.
type VaultResponse = original.VaultResponse

// VaultsBeginCreateOrUpdateOptions contains the optional parameters for the Vaults.BeginCreateOrUpdate method.
type VaultsBeginCreateOrUpdateOptions = original.VaultsBeginCreateOrUpdateOptions

// VaultsBeginPurgeDeletedOptions contains the optional parameters for the Vaults.BeginPurgeDeleted method.
type VaultsBeginPurgeDeletedOptions = original.VaultsBeginPurgeDeletedOptions

// VaultsCheckNameAvailabilityOptions contains the optional parameters for the Vaults.CheckNameAvailability method.
type VaultsCheckNameAvailabilityOptions = original.VaultsCheckNameAvailabilityOptions

// VaultsClient contains the methods for the Vaults group.
// Don't use this type directly, use NewVaultsClient() instead.
type VaultsClient = original.VaultsClient

// VaultsDeleteOptions contains the optional parameters for the Vaults.Delete method.
type VaultsDeleteOptions = original.VaultsDeleteOptions

// VaultsGetDeletedOptions contains the optional parameters for the Vaults.GetDeleted method.
type VaultsGetDeletedOptions = original.VaultsGetDeletedOptions

// VaultsGetOptions contains the optional parameters for the Vaults.Get method.
type VaultsGetOptions = original.VaultsGetOptions

// VaultsListByResourceGroupOptions contains the optional parameters for the Vaults.ListByResourceGroup method.
type VaultsListByResourceGroupOptions = original.VaultsListByResourceGroupOptions

// VaultsListBySubscriptionOptions contains the optional parameters for the Vaults.ListBySubscription method.
type VaultsListBySubscriptionOptions = original.VaultsListBySubscriptionOptions

// VaultsListDeletedOptions contains the optional parameters for the Vaults.ListDeleted method.
type VaultsListDeletedOptions = original.VaultsListDeletedOptions

// VaultsListOptions contains the optional parameters for the Vaults.List method.
type VaultsListOptions = original.VaultsListOptions

// VaultsUpdateAccessPolicyOptions contains the optional parameters for the Vaults.UpdateAccessPolicy method.
type VaultsUpdateAccessPolicyOptions = original.VaultsUpdateAccessPolicyOptions

// VaultsUpdateOptions contains the optional parameters for the Vaults.Update method.
type VaultsUpdateOptions = original.VaultsUpdateOptions

// A rule governing the accessibility of a vault from a specific virtual network.
type VirtualNetworkRule = original.VirtualNetworkRule

// NewKeysClient creates a new instance of KeysClient with the specified values.
func NewKeysClient(con *armcore.Connection, subscriptionID string) KeysClient {
	return original.NewKeysClient(con, subscriptionID)
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(con *armcore.Connection) OperationsClient {
	return original.NewOperationsClient(con)
}

// NewPrivateEndpointConnectionsClient creates a new instance of PrivateEndpointConnectionsClient with the specified values.
func NewPrivateEndpointConnectionsClient(con *armcore.Connection, subscriptionID string) PrivateEndpointConnectionsClient {
	return original.NewPrivateEndpointConnectionsClient(con, subscriptionID)
}

// NewPrivateLinkResourcesClient creates a new instance of PrivateLinkResourcesClient with the specified values.
func NewPrivateLinkResourcesClient(con *armcore.Connection, subscriptionID string) PrivateLinkResourcesClient {
	return original.NewPrivateLinkResourcesClient(con, subscriptionID)
}

// NewVaultsClient creates a new instance of VaultsClient with the specified values.
func NewVaultsClient(con *armcore.Connection, subscriptionID string) VaultsClient {
	return original.NewVaultsClient(con, subscriptionID)
}
func PossibleAccessPolicyUpdateKindValues() []AccessPolicyUpdateKind {
	return original.PossibleAccessPolicyUpdateKindValues()
}
func PossibleCertificatePermissionsValues() []CertificatePermissions {
	return original.PossibleCertificatePermissionsValues()
}
func PossibleCreateModeValues() []CreateMode {
	return original.PossibleCreateModeValues()
}
func PossibleDeletionRecoveryLevelValues() []DeletionRecoveryLevel {
	return original.PossibleDeletionRecoveryLevelValues()
}
func PossibleJSONWebKeyCurveNameValues() []JSONWebKeyCurveName {
	return original.PossibleJSONWebKeyCurveNameValues()
}
func PossibleJSONWebKeyOperationValues() []JSONWebKeyOperation {
	return original.PossibleJSONWebKeyOperationValues()
}
func PossibleJSONWebKeyTypeValues() []JSONWebKeyType {
	return original.PossibleJSONWebKeyTypeValues()
}
func PossibleKeyPermissionsValues() []KeyPermissions {
	return original.PossibleKeyPermissionsValues()
}
func PossibleNetworkRuleActionValues() []NetworkRuleAction {
	return original.PossibleNetworkRuleActionValues()
}
func PossibleNetworkRuleBypassOptionsValues() []NetworkRuleBypassOptions {
	return original.PossibleNetworkRuleBypassOptionsValues()
}
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return original.PossiblePrivateEndpointConnectionProvisioningStateValues()
}
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return original.PossiblePrivateEndpointServiceConnectionStatusValues()
}
func PossibleReasonValues() []Reason {
	return original.PossibleReasonValues()
}
func PossibleSKUFamilyValues() []SKUFamily {
	return original.PossibleSKUFamilyValues()
}
func PossibleSKUNameValues() []SKUName {
	return original.PossibleSKUNameValues()
}
func PossibleSecretPermissionsValues() []SecretPermissions {
	return original.PossibleSecretPermissionsValues()
}
func PossibleStoragePermissionsValues() []StoragePermissions {
	return original.PossibleStoragePermissionsValues()
}
