// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// This code was generated by a tool.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	original "github.com/Azure/azure-sdk-for-go/sdk/arm/network/2020-07-01/armnetwork"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
)

// Access - Access to be allowed or denied.
type Access = original.Access

const (
	AccessAllow = original.AccessAllow
	AccessDeny  = original.AccessDeny
)

// ApplicationGatewayBackendHealthServerHealth - Health of backend server.
type ApplicationGatewayBackendHealthServerHealth = original.ApplicationGatewayBackendHealthServerHealth

const (
	ApplicationGatewayBackendHealthServerHealthDown     = original.ApplicationGatewayBackendHealthServerHealthDown
	ApplicationGatewayBackendHealthServerHealthDraining = original.ApplicationGatewayBackendHealthServerHealthDraining
	ApplicationGatewayBackendHealthServerHealthPartial  = original.ApplicationGatewayBackendHealthServerHealthPartial
	ApplicationGatewayBackendHealthServerHealthUnknown  = original.ApplicationGatewayBackendHealthServerHealthUnknown
	ApplicationGatewayBackendHealthServerHealthUp       = original.ApplicationGatewayBackendHealthServerHealthUp
)

// ApplicationGatewayCookieBasedAffinity - Cookie based affinity.
type ApplicationGatewayCookieBasedAffinity = original.ApplicationGatewayCookieBasedAffinity

const (
	ApplicationGatewayCookieBasedAffinityDisabled = original.ApplicationGatewayCookieBasedAffinityDisabled
	ApplicationGatewayCookieBasedAffinityEnabled  = original.ApplicationGatewayCookieBasedAffinityEnabled
)

// ApplicationGatewayCustomErrorStatusCode - Status code of the application gateway customer error.
type ApplicationGatewayCustomErrorStatusCode = original.ApplicationGatewayCustomErrorStatusCode

const (
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus403 = original.ApplicationGatewayCustomErrorStatusCodeHTTPStatus403
	ApplicationGatewayCustomErrorStatusCodeHTTPStatus502 = original.ApplicationGatewayCustomErrorStatusCodeHTTPStatus502
)

// ApplicationGatewayFirewallMode - Web application firewall mode.
type ApplicationGatewayFirewallMode = original.ApplicationGatewayFirewallMode

const (
	ApplicationGatewayFirewallModeDetection  = original.ApplicationGatewayFirewallModeDetection
	ApplicationGatewayFirewallModePrevention = original.ApplicationGatewayFirewallModePrevention
)

// ApplicationGatewayOperationalState - Operational state of the application gateway resource.
type ApplicationGatewayOperationalState = original.ApplicationGatewayOperationalState

const (
	ApplicationGatewayOperationalStateRunning  = original.ApplicationGatewayOperationalStateRunning
	ApplicationGatewayOperationalStateStarting = original.ApplicationGatewayOperationalStateStarting
	ApplicationGatewayOperationalStateStopped  = original.ApplicationGatewayOperationalStateStopped
	ApplicationGatewayOperationalStateStopping = original.ApplicationGatewayOperationalStateStopping
)

// ApplicationGatewayProtocol - Application Gateway protocol.
type ApplicationGatewayProtocol = original.ApplicationGatewayProtocol

const (
	ApplicationGatewayProtocolHTTP  = original.ApplicationGatewayProtocolHTTP
	ApplicationGatewayProtocolHTTPs = original.ApplicationGatewayProtocolHTTPs
)

// ApplicationGatewayRedirectType - Redirect type enum.
type ApplicationGatewayRedirectType = original.ApplicationGatewayRedirectType

const (
	ApplicationGatewayRedirectTypeFound     = original.ApplicationGatewayRedirectTypeFound
	ApplicationGatewayRedirectTypePermanent = original.ApplicationGatewayRedirectTypePermanent
	ApplicationGatewayRedirectTypeSeeOther  = original.ApplicationGatewayRedirectTypeSeeOther
	ApplicationGatewayRedirectTypeTemporary = original.ApplicationGatewayRedirectTypeTemporary
)

// ApplicationGatewayRequestRoutingRuleType - Rule type.
type ApplicationGatewayRequestRoutingRuleType = original.ApplicationGatewayRequestRoutingRuleType

const (
	ApplicationGatewayRequestRoutingRuleTypeBasic            = original.ApplicationGatewayRequestRoutingRuleTypeBasic
	ApplicationGatewayRequestRoutingRuleTypePathBasedRouting = original.ApplicationGatewayRequestRoutingRuleTypePathBasedRouting
)

// ApplicationGatewaySKUName - Name of an application gateway SKU.
type ApplicationGatewaySKUName = original.ApplicationGatewaySKUName

const (
	ApplicationGatewaySKUNameStandardLarge  = original.ApplicationGatewaySKUNameStandardLarge
	ApplicationGatewaySKUNameStandardMedium = original.ApplicationGatewaySKUNameStandardMedium
	ApplicationGatewaySKUNameStandardSmall  = original.ApplicationGatewaySKUNameStandardSmall
	ApplicationGatewaySKUNameStandardV2     = original.ApplicationGatewaySKUNameStandardV2
	ApplicationGatewaySKUNameWafLarge       = original.ApplicationGatewaySKUNameWafLarge
	ApplicationGatewaySKUNameWafMedium      = original.ApplicationGatewaySKUNameWafMedium
	ApplicationGatewaySKUNameWafv2          = original.ApplicationGatewaySKUNameWafv2
)

// ApplicationGatewaySslCipherSuite - Ssl cipher suites enums.
type ApplicationGatewaySslCipherSuite = original.ApplicationGatewaySslCipherSuite

const (
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128Cbcsha    = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128Cbcsha
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128Cbcsha256 = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128GCMsha256 = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES128GCMsha256
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256Cbcsha    = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256Cbcsha
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256Cbcsha384 = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256Cbcsha384
	ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256GCMsha384 = original.ApplicationGatewaySslCipherSuiteTLSEcdheEcdsaWithAES256GCMsha384
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128Cbcsha      = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128Cbcsha
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128Cbcsha256   = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128GCMsha256   = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES128GCMsha256
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256Cbcsha      = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256Cbcsha
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256Cbcsha384   = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256Cbcsha384
	ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256GCMsha384   = original.ApplicationGatewaySslCipherSuiteTLSEcdheRsawithAES256GCMsha384
	ApplicationGatewaySslCipherSuiteTLSdhedssWith3Desedecbcsha       = original.ApplicationGatewaySslCipherSuiteTLSdhedssWith3Desedecbcsha
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAES128Cbcsha        = original.ApplicationGatewaySslCipherSuiteTLSdhedssWithAES128Cbcsha
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAES128Cbcsha256     = original.ApplicationGatewaySslCipherSuiteTLSdhedssWithAES128Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAES256Cbcsha        = original.ApplicationGatewaySslCipherSuiteTLSdhedssWithAES256Cbcsha
	ApplicationGatewaySslCipherSuiteTLSdhedssWithAES256Cbcsha256     = original.ApplicationGatewaySslCipherSuiteTLSdhedssWithAES256Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAES128Cbcsha        = original.ApplicationGatewaySslCipherSuiteTLSdhersaWithAES128Cbcsha
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAES128GCMsha256     = original.ApplicationGatewaySslCipherSuiteTLSdhersaWithAES128GCMsha256
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAES256Cbcsha        = original.ApplicationGatewaySslCipherSuiteTLSdhersaWithAES256Cbcsha
	ApplicationGatewaySslCipherSuiteTLSdhersaWithAES256GCMsha384     = original.ApplicationGatewaySslCipherSuiteTLSdhersaWithAES256GCMsha384
	ApplicationGatewaySslCipherSuiteTLSrsaWith3Desedecbcsha          = original.ApplicationGatewaySslCipherSuiteTLSrsaWith3Desedecbcsha
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES128Cbcsha           = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES128Cbcsha
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES128Cbcsha256        = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES128Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES128GCMsha256        = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES128GCMsha256
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES256Cbcsha           = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES256Cbcsha
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES256Cbcsha256        = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES256Cbcsha256
	ApplicationGatewaySslCipherSuiteTLSrsaWithAES256GCMsha384        = original.ApplicationGatewaySslCipherSuiteTLSrsaWithAES256GCMsha384
)

// ApplicationGatewaySslPolicyName - Ssl predefined policy name enums.
type ApplicationGatewaySslPolicyName = original.ApplicationGatewaySslPolicyName

const (
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20150501  = original.ApplicationGatewaySslPolicyNameAppGwSslPolicy20150501
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401  = original.ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401
	ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401S = original.ApplicationGatewaySslPolicyNameAppGwSslPolicy20170401S
)

// ApplicationGatewaySslPolicyType - Type of Ssl Policy.
type ApplicationGatewaySslPolicyType = original.ApplicationGatewaySslPolicyType

const (
	ApplicationGatewaySslPolicyTypeCustom     = original.ApplicationGatewaySslPolicyTypeCustom
	ApplicationGatewaySslPolicyTypePredefined = original.ApplicationGatewaySslPolicyTypePredefined
)

// ApplicationGatewaySslProtocol - Ssl protocol enums.
type ApplicationGatewaySslProtocol = original.ApplicationGatewaySslProtocol

const (
	ApplicationGatewaySslProtocolTlSv10 = original.ApplicationGatewaySslProtocolTlSv10
	ApplicationGatewaySslProtocolTlSv11 = original.ApplicationGatewaySslProtocolTlSv11
	ApplicationGatewaySslProtocolTlSv12 = original.ApplicationGatewaySslProtocolTlSv12
)

// ApplicationGatewayTier - Tier of an application gateway.
type ApplicationGatewayTier = original.ApplicationGatewayTier

const (
	ApplicationGatewayTierStandard   = original.ApplicationGatewayTierStandard
	ApplicationGatewayTierStandardV2 = original.ApplicationGatewayTierStandardV2
	ApplicationGatewayTierWaf        = original.ApplicationGatewayTierWaf
	ApplicationGatewayTierWafv2      = original.ApplicationGatewayTierWafv2
)

// AssociationType - The association type of the child resource to the parent resource.
type AssociationType = original.AssociationType

const (
	AssociationTypeAssociated = original.AssociationTypeAssociated
	AssociationTypeContains   = original.AssociationTypeContains
)

// AuthenticationMethod - VPN client authentication method.
type AuthenticationMethod = original.AuthenticationMethod

const (
	AuthenticationMethodEapmschaPv2 = original.AuthenticationMethodEapmschaPv2
	AuthenticationMethodEaptls      = original.AuthenticationMethodEaptls
)

// AuthorizationUseStatus - The authorization use status.
type AuthorizationUseStatus = original.AuthorizationUseStatus

const (
	AuthorizationUseStatusAvailable = original.AuthorizationUseStatusAvailable
	AuthorizationUseStatusInUse     = original.AuthorizationUseStatusInUse
)

// AzureFirewallApplicationRuleProtocolType - The protocol type of a Application Rule resource.
type AzureFirewallApplicationRuleProtocolType = original.AzureFirewallApplicationRuleProtocolType

const (
	AzureFirewallApplicationRuleProtocolTypeHTTP  = original.AzureFirewallApplicationRuleProtocolTypeHTTP
	AzureFirewallApplicationRuleProtocolTypeHTTPs = original.AzureFirewallApplicationRuleProtocolTypeHTTPs
	AzureFirewallApplicationRuleProtocolTypeMssql = original.AzureFirewallApplicationRuleProtocolTypeMssql
)

// AzureFirewallNatRCActionType - The action type of a NAT rule collection.
type AzureFirewallNatRCActionType = original.AzureFirewallNatRCActionType

const (
	AzureFirewallNatRCActionTypeDnat = original.AzureFirewallNatRCActionTypeDnat
	AzureFirewallNatRCActionTypeSnat = original.AzureFirewallNatRCActionTypeSnat
)

// AzureFirewallNetworkRuleProtocol - The protocol of a Network Rule resource.
type AzureFirewallNetworkRuleProtocol = original.AzureFirewallNetworkRuleProtocol

const (
	AzureFirewallNetworkRuleProtocolAny  = original.AzureFirewallNetworkRuleProtocolAny
	AzureFirewallNetworkRuleProtocolIcmp = original.AzureFirewallNetworkRuleProtocolIcmp
	AzureFirewallNetworkRuleProtocolTCP  = original.AzureFirewallNetworkRuleProtocolTCP
	AzureFirewallNetworkRuleProtocolUDP  = original.AzureFirewallNetworkRuleProtocolUDP
)

// AzureFirewallRCActionType - The action type of a rule collection.
type AzureFirewallRCActionType = original.AzureFirewallRCActionType

const (
	AzureFirewallRCActionTypeAllow = original.AzureFirewallRCActionTypeAllow
	AzureFirewallRCActionTypeDeny  = original.AzureFirewallRCActionTypeDeny
)

// AzureFirewallSKUName - Name of an Azure Firewall SKU.
type AzureFirewallSKUName = original.AzureFirewallSKUName

const (
	AzureFirewallSKUNameAzfwHub  = original.AzureFirewallSKUNameAzfwHub
	AzureFirewallSKUNameAzfwVnet = original.AzureFirewallSKUNameAzfwVnet
)

// AzureFirewallSKUTier - Tier of an Azure Firewall.
type AzureFirewallSKUTier = original.AzureFirewallSKUTier

const (
	AzureFirewallSKUTierPremium  = original.AzureFirewallSKUTierPremium
	AzureFirewallSKUTierStandard = original.AzureFirewallSKUTierStandard
)

// AzureFirewallThreatIntelMode - The operation mode for Threat Intel.
type AzureFirewallThreatIntelMode = original.AzureFirewallThreatIntelMode

const (
	AzureFirewallThreatIntelModeAlert = original.AzureFirewallThreatIntelModeAlert
	AzureFirewallThreatIntelModeDeny  = original.AzureFirewallThreatIntelModeDeny
	AzureFirewallThreatIntelModeOff   = original.AzureFirewallThreatIntelModeOff
)

// BastionConnectProtocol - The protocol used to connect to the target.
type BastionConnectProtocol = original.BastionConnectProtocol

const (
	BastionConnectProtocolRdp = original.BastionConnectProtocolRdp
	BastionConnectProtocolSSH = original.BastionConnectProtocolSSH
)

// BgpPeerState - The BGP peer state.
type BgpPeerState = original.BgpPeerState

const (
	BgpPeerStateConnected  = original.BgpPeerStateConnected
	BgpPeerStateConnecting = original.BgpPeerStateConnecting
	BgpPeerStateIDle       = original.BgpPeerStateIDle
	BgpPeerStateStopped    = original.BgpPeerStateStopped
	BgpPeerStateUnknown    = original.BgpPeerStateUnknown
)

// CircuitConnectionStatus - Express Route Circuit connection state.
type CircuitConnectionStatus = original.CircuitConnectionStatus

const (
	CircuitConnectionStatusConnected    = original.CircuitConnectionStatusConnected
	CircuitConnectionStatusConnecting   = original.CircuitConnectionStatusConnecting
	CircuitConnectionStatusDisconnected = original.CircuitConnectionStatusDisconnected
)

// CommissionedState - The commissioned state of the Custom IP Prefix.
type CommissionedState = original.CommissionedState

const (
	CommissionedStateCommissioned    = original.CommissionedStateCommissioned
	CommissionedStateCommissioning   = original.CommissionedStateCommissioning
	CommissionedStateDecommissioning = original.CommissionedStateDecommissioning
	CommissionedStateDeprovisioning  = original.CommissionedStateDeprovisioning
	CommissionedStateProvisioned     = original.CommissionedStateProvisioned
	CommissionedStateProvisioning    = original.CommissionedStateProvisioning
)

// ConnectionMonitorEndpointFilterItemType - The type of item included in the filter. Currently only 'AgentAddress' is supported.
type ConnectionMonitorEndpointFilterItemType = original.ConnectionMonitorEndpointFilterItemType

const ConnectionMonitorEndpointFilterItemTypeAgentAddress = original.ConnectionMonitorEndpointFilterItemTypeAgentAddress

// ConnectionMonitorEndpointFilterType - The behavior of the endpoint filter. Currently only 'Include' is supported.
type ConnectionMonitorEndpointFilterType = original.ConnectionMonitorEndpointFilterType

const ConnectionMonitorEndpointFilterTypeInclude = original.ConnectionMonitorEndpointFilterTypeInclude

// ConnectionMonitorSourceStatus - Status of connection monitor source.
type ConnectionMonitorSourceStatus = original.ConnectionMonitorSourceStatus

const (
	ConnectionMonitorSourceStatusActive   = original.ConnectionMonitorSourceStatusActive
	ConnectionMonitorSourceStatusInactive = original.ConnectionMonitorSourceStatusInactive
	ConnectionMonitorSourceStatusUnknown  = original.ConnectionMonitorSourceStatusUnknown
)

// ConnectionMonitorTestConfigurationProtocol - The protocol to use in test evaluation.
type ConnectionMonitorTestConfigurationProtocol = original.ConnectionMonitorTestConfigurationProtocol

const (
	ConnectionMonitorTestConfigurationProtocolHTTP = original.ConnectionMonitorTestConfigurationProtocolHTTP
	ConnectionMonitorTestConfigurationProtocolIcmp = original.ConnectionMonitorTestConfigurationProtocolIcmp
	ConnectionMonitorTestConfigurationProtocolTCP  = original.ConnectionMonitorTestConfigurationProtocolTCP
)

// ConnectionMonitorType - Type of connection monitor.
type ConnectionMonitorType = original.ConnectionMonitorType

const (
	ConnectionMonitorTypeMultiEndpoint           = original.ConnectionMonitorTypeMultiEndpoint
	ConnectionMonitorTypeSingleSourceDestination = original.ConnectionMonitorTypeSingleSourceDestination
)

// ConnectionState - The connection state.
type ConnectionState = original.ConnectionState

const (
	ConnectionStateReachable   = original.ConnectionStateReachable
	ConnectionStateUnknown     = original.ConnectionStateUnknown
	ConnectionStateUnreachable = original.ConnectionStateUnreachable
)

// ConnectionStatus - The connection status.
type ConnectionStatus = original.ConnectionStatus

const (
	ConnectionStatusConnected    = original.ConnectionStatusConnected
	ConnectionStatusDegraded     = original.ConnectionStatusDegraded
	ConnectionStatusDisconnected = original.ConnectionStatusDisconnected
	ConnectionStatusUnknown      = original.ConnectionStatusUnknown
)

// CoverageLevel - Test coverage for the endpoint.
type CoverageLevel = original.CoverageLevel

const (
	CoverageLevelAboveAverage = original.CoverageLevelAboveAverage
	CoverageLevelAverage      = original.CoverageLevelAverage
	CoverageLevelBelowAverage = original.CoverageLevelBelowAverage
	CoverageLevelDefault      = original.CoverageLevelDefault
	CoverageLevelFull         = original.CoverageLevelFull
	CoverageLevelLow          = original.CoverageLevelLow
)

// DdosCustomPolicyProtocol - The protocol for which the DDoS protection policy is being customized.
type DdosCustomPolicyProtocol = original.DdosCustomPolicyProtocol

const (
	DdosCustomPolicyProtocolSyn = original.DdosCustomPolicyProtocolSyn
	DdosCustomPolicyProtocolTCP = original.DdosCustomPolicyProtocolTCP
	DdosCustomPolicyProtocolUDP = original.DdosCustomPolicyProtocolUDP
)

// DdosCustomPolicyTriggerSensitivityOverride - The customized DDoS protection trigger rate sensitivity degrees. High: Trigger rate set with most sensitivity
// w.r.t. normal traffic. Default: Trigger rate set with moderate sensitivity w.r.t. normal
// traffic. Low: Trigger rate set with less sensitivity w.r.t. normal traffic. Relaxed: Trigger rate set with least sensitivity w.r.t. normal traffic.
type DdosCustomPolicyTriggerSensitivityOverride = original.DdosCustomPolicyTriggerSensitivityOverride

const (
	DdosCustomPolicyTriggerSensitivityOverrideDefault = original.DdosCustomPolicyTriggerSensitivityOverrideDefault
	DdosCustomPolicyTriggerSensitivityOverrideHigh    = original.DdosCustomPolicyTriggerSensitivityOverrideHigh
	DdosCustomPolicyTriggerSensitivityOverrideLow     = original.DdosCustomPolicyTriggerSensitivityOverrideLow
	DdosCustomPolicyTriggerSensitivityOverrideRelaxed = original.DdosCustomPolicyTriggerSensitivityOverrideRelaxed
)

// DdosSettingsProtectionCoverage - The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
type DdosSettingsProtectionCoverage = original.DdosSettingsProtectionCoverage

const (
	DdosSettingsProtectionCoverageBasic    = original.DdosSettingsProtectionCoverageBasic
	DdosSettingsProtectionCoverageStandard = original.DdosSettingsProtectionCoverageStandard
)

// DestinationPortBehavior - Destination port behavior.
type DestinationPortBehavior = original.DestinationPortBehavior

const (
	DestinationPortBehaviorListenIfAvailable = original.DestinationPortBehaviorListenIfAvailable
	DestinationPortBehaviorNone              = original.DestinationPortBehaviorNone
)

// DhGroup - The DH Groups used in IKE Phase 1 for initial SA.
type DhGroup = original.DhGroup

const (
	DhGroupDhGroup1    = original.DhGroupDhGroup1
	DhGroupDhGroup14   = original.DhGroupDhGroup14
	DhGroupDhGroup2    = original.DhGroupDhGroup2
	DhGroupDhGroup2048 = original.DhGroupDhGroup2048
	DhGroupDhGroup24   = original.DhGroupDhGroup24
	DhGroupEcp256      = original.DhGroupEcp256
	DhGroupEcp384      = original.DhGroupEcp384
	DhGroupNone        = original.DhGroupNone
)

// Direction - The direction of the traffic.
type Direction = original.Direction

const (
	DirectionInbound  = original.DirectionInbound
	DirectionOutbound = original.DirectionOutbound
)

// EffectiveRouteSource - Who created the route.
type EffectiveRouteSource = original.EffectiveRouteSource

const (
	EffectiveRouteSourceDefault               = original.EffectiveRouteSourceDefault
	EffectiveRouteSourceUnknown               = original.EffectiveRouteSourceUnknown
	EffectiveRouteSourceUser                  = original.EffectiveRouteSourceUser
	EffectiveRouteSourceVirtualNetworkGateway = original.EffectiveRouteSourceVirtualNetworkGateway
)

// EffectiveRouteState - The value of effective route.
type EffectiveRouteState = original.EffectiveRouteState

const (
	EffectiveRouteStateActive  = original.EffectiveRouteStateActive
	EffectiveRouteStateInvalid = original.EffectiveRouteStateInvalid
)

// EffectiveSecurityRuleProtocol - The network protocol this rule applies to.
type EffectiveSecurityRuleProtocol = original.EffectiveSecurityRuleProtocol

const (
	EffectiveSecurityRuleProtocolAll = original.EffectiveSecurityRuleProtocolAll
	EffectiveSecurityRuleProtocolTCP = original.EffectiveSecurityRuleProtocolTCP
	EffectiveSecurityRuleProtocolUDP = original.EffectiveSecurityRuleProtocolUDP
)

// EndpointType - The endpoint type.
type EndpointType = original.EndpointType

const (
	EndpointTypeAzureSubnet         = original.EndpointTypeAzureSubnet
	EndpointTypeAzureVM             = original.EndpointTypeAzureVM
	EndpointTypeAzureVNet           = original.EndpointTypeAzureVNet
	EndpointTypeExternalAddress     = original.EndpointTypeExternalAddress
	EndpointTypeMmaWorkspaceMachine = original.EndpointTypeMmaWorkspaceMachine
	EndpointTypeMmaWorkspaceNetwork = original.EndpointTypeMmaWorkspaceNetwork
)

// EvaluationState - Connectivity analysis evaluation state.
type EvaluationState = original.EvaluationState

const (
	EvaluationStateCompleted  = original.EvaluationStateCompleted
	EvaluationStateInProgress = original.EvaluationStateInProgress
	EvaluationStateNotStarted = original.EvaluationStateNotStarted
)

// ExpressRouteCircuitPeeringAdvertisedPublicPrefixState - The advertised public prefix state of the Peering resource.
type ExpressRouteCircuitPeeringAdvertisedPublicPrefixState = original.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState

const (
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured       = original.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfigured
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring      = original.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateConfiguring
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured    = original.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateNotConfigured
	ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded = original.ExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValidationNeeded
)

// ExpressRouteCircuitPeeringState - The state of peering.
type ExpressRouteCircuitPeeringState = original.ExpressRouteCircuitPeeringState

const (
	ExpressRouteCircuitPeeringStateDisabled = original.ExpressRouteCircuitPeeringStateDisabled
	ExpressRouteCircuitPeeringStateEnabled  = original.ExpressRouteCircuitPeeringStateEnabled
)

// ExpressRouteCircuitSKUFamily - The family of the SKU.
type ExpressRouteCircuitSKUFamily = original.ExpressRouteCircuitSKUFamily

const (
	ExpressRouteCircuitSKUFamilyMeteredData   = original.ExpressRouteCircuitSKUFamilyMeteredData
	ExpressRouteCircuitSKUFamilyUnlimitedData = original.ExpressRouteCircuitSKUFamilyUnlimitedData
)

// ExpressRouteCircuitSKUTier - The tier of the SKU.
type ExpressRouteCircuitSKUTier = original.ExpressRouteCircuitSKUTier

const (
	ExpressRouteCircuitSKUTierBasic    = original.ExpressRouteCircuitSKUTierBasic
	ExpressRouteCircuitSKUTierLocal    = original.ExpressRouteCircuitSKUTierLocal
	ExpressRouteCircuitSKUTierPremium  = original.ExpressRouteCircuitSKUTierPremium
	ExpressRouteCircuitSKUTierStandard = original.ExpressRouteCircuitSKUTierStandard
)

// ExpressRouteLinkAdminState - Administrative state of the physical port.
type ExpressRouteLinkAdminState = original.ExpressRouteLinkAdminState

const (
	ExpressRouteLinkAdminStateDisabled = original.ExpressRouteLinkAdminStateDisabled
	ExpressRouteLinkAdminStateEnabled  = original.ExpressRouteLinkAdminStateEnabled
)

// ExpressRouteLinkConnectorType - Physical fiber port type.
type ExpressRouteLinkConnectorType = original.ExpressRouteLinkConnectorType

const (
	ExpressRouteLinkConnectorTypeLc = original.ExpressRouteLinkConnectorTypeLc
	ExpressRouteLinkConnectorTypeSc = original.ExpressRouteLinkConnectorTypeSc
)

// ExpressRouteLinkMacSecCipher - Mac security cipher.
type ExpressRouteLinkMacSecCipher = original.ExpressRouteLinkMacSecCipher

const (
	ExpressRouteLinkMacSecCipherGCMAES128    = original.ExpressRouteLinkMacSecCipherGCMAES128
	ExpressRouteLinkMacSecCipherGCMAES256    = original.ExpressRouteLinkMacSecCipherGCMAES256
	ExpressRouteLinkMacSecCipherGCMAESXpn128 = original.ExpressRouteLinkMacSecCipherGCMAESXpn128
	ExpressRouteLinkMacSecCipherGCMAESXpn256 = original.ExpressRouteLinkMacSecCipherGCMAESXpn256
)

// ExpressRouteLinkMacSecSciState - Sci mode enabled/disabled.
type ExpressRouteLinkMacSecSciState = original.ExpressRouteLinkMacSecSciState

const (
	ExpressRouteLinkMacSecSciStateDisabled = original.ExpressRouteLinkMacSecSciStateDisabled
	ExpressRouteLinkMacSecSciStateEnabled  = original.ExpressRouteLinkMacSecSciStateEnabled
)

// ExpressRoutePeeringState - The state of peering.
type ExpressRoutePeeringState = original.ExpressRoutePeeringState

const (
	ExpressRoutePeeringStateDisabled = original.ExpressRoutePeeringStateDisabled
	ExpressRoutePeeringStateEnabled  = original.ExpressRoutePeeringStateEnabled
)

// ExpressRoutePeeringType - The peering type.
type ExpressRoutePeeringType = original.ExpressRoutePeeringType

const (
	ExpressRoutePeeringTypeAzurePrivatePeering = original.ExpressRoutePeeringTypeAzurePrivatePeering
	ExpressRoutePeeringTypeAzurePublicPeering  = original.ExpressRoutePeeringTypeAzurePublicPeering
	ExpressRoutePeeringTypeMicrosoftPeering    = original.ExpressRoutePeeringTypeMicrosoftPeering
)

// ExpressRoutePortsEncapsulation - Encapsulation method on physical ports.
type ExpressRoutePortsEncapsulation = original.ExpressRoutePortsEncapsulation

const (
	ExpressRoutePortsEncapsulationDot1Q = original.ExpressRoutePortsEncapsulationDot1Q
	ExpressRoutePortsEncapsulationQinQ  = original.ExpressRoutePortsEncapsulationQinQ
)

// ExtendedLocationTypes - The supported ExtendedLocation types. Currently only EdgeZone is supported in Microsoft.Network resources.
type ExtendedLocationTypes = original.ExtendedLocationTypes

const ExtendedLocationTypesEdgeZone = original.ExtendedLocationTypesEdgeZone

// FirewallPolicyFilterRuleCollectionActionType - The action type of a rule.
type FirewallPolicyFilterRuleCollectionActionType = original.FirewallPolicyFilterRuleCollectionActionType

const (
	FirewallPolicyFilterRuleCollectionActionTypeAllow = original.FirewallPolicyFilterRuleCollectionActionTypeAllow
	FirewallPolicyFilterRuleCollectionActionTypeDeny  = original.FirewallPolicyFilterRuleCollectionActionTypeDeny
)

// FirewallPolicyIntrusionDetectionProtocol - Possible intrusion detection bypass traffic protocols.
type FirewallPolicyIntrusionDetectionProtocol = original.FirewallPolicyIntrusionDetectionProtocol

const (
	FirewallPolicyIntrusionDetectionProtocolAny  = original.FirewallPolicyIntrusionDetectionProtocolAny
	FirewallPolicyIntrusionDetectionProtocolIcmp = original.FirewallPolicyIntrusionDetectionProtocolIcmp
	FirewallPolicyIntrusionDetectionProtocolTCP  = original.FirewallPolicyIntrusionDetectionProtocolTCP
	FirewallPolicyIntrusionDetectionProtocolUDP  = original.FirewallPolicyIntrusionDetectionProtocolUDP
)

// FirewallPolicyIntrusionDetectionStateType - Possible state values.
type FirewallPolicyIntrusionDetectionStateType = original.FirewallPolicyIntrusionDetectionStateType

const (
	FirewallPolicyIntrusionDetectionStateTypeAlert = original.FirewallPolicyIntrusionDetectionStateTypeAlert
	FirewallPolicyIntrusionDetectionStateTypeDeny  = original.FirewallPolicyIntrusionDetectionStateTypeDeny
	FirewallPolicyIntrusionDetectionStateTypeOff   = original.FirewallPolicyIntrusionDetectionStateTypeOff
)

// FirewallPolicyNatRuleCollectionActionType - The action type of a rule.
type FirewallPolicyNatRuleCollectionActionType = original.FirewallPolicyNatRuleCollectionActionType

const FirewallPolicyNatRuleCollectionActionTypeDnat = original.FirewallPolicyNatRuleCollectionActionTypeDnat

// FirewallPolicyRuleApplicationProtocolType - The application protocol type of a Rule.
type FirewallPolicyRuleApplicationProtocolType = original.FirewallPolicyRuleApplicationProtocolType

const (
	FirewallPolicyRuleApplicationProtocolTypeHTTP  = original.FirewallPolicyRuleApplicationProtocolTypeHTTP
	FirewallPolicyRuleApplicationProtocolTypeHTTPs = original.FirewallPolicyRuleApplicationProtocolTypeHTTPs
)

// FirewallPolicyRuleCollectionType - The type of the rule collection.
type FirewallPolicyRuleCollectionType = original.FirewallPolicyRuleCollectionType

const (
	FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection = original.FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection
	FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection    = original.FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection
)

// FirewallPolicyRuleNetworkProtocol - The Network protocol of a Rule.
type FirewallPolicyRuleNetworkProtocol = original.FirewallPolicyRuleNetworkProtocol

const (
	FirewallPolicyRuleNetworkProtocolAny  = original.FirewallPolicyRuleNetworkProtocolAny
	FirewallPolicyRuleNetworkProtocolIcmp = original.FirewallPolicyRuleNetworkProtocolIcmp
	FirewallPolicyRuleNetworkProtocolTCP  = original.FirewallPolicyRuleNetworkProtocolTCP
	FirewallPolicyRuleNetworkProtocolUDP  = original.FirewallPolicyRuleNetworkProtocolUDP
)

// FirewallPolicyRuleType - Rule Type.
type FirewallPolicyRuleType = original.FirewallPolicyRuleType

const (
	FirewallPolicyRuleTypeApplicationRule = original.FirewallPolicyRuleTypeApplicationRule
	FirewallPolicyRuleTypeNatRule         = original.FirewallPolicyRuleTypeNatRule
	FirewallPolicyRuleTypeNetworkRule     = original.FirewallPolicyRuleTypeNetworkRule
)

// FirewallPolicySKUTier - Tier of Firewall Policy.
type FirewallPolicySKUTier = original.FirewallPolicySKUTier

const (
	FirewallPolicySKUTierPremium  = original.FirewallPolicySKUTierPremium
	FirewallPolicySKUTierStandard = original.FirewallPolicySKUTierStandard
)

// FlowLogFormatType - The file type of flow log.
type FlowLogFormatType = original.FlowLogFormatType

const FlowLogFormatTypeJSON = original.FlowLogFormatTypeJSON

// HTTPConfigurationMethod - The HTTP method to use.
type HTTPConfigurationMethod = original.HTTPConfigurationMethod

const (
	HTTPConfigurationMethodGet  = original.HTTPConfigurationMethodGet
	HTTPConfigurationMethodPost = original.HTTPConfigurationMethodPost
)

// HTTPMethod - HTTP method.
type HTTPMethod = original.HTTPMethod

const HTTPMethodGet = original.HTTPMethodGet

// HubBgpConnectionStatus - The current state of the VirtualHub to Peer.
type HubBgpConnectionStatus = original.HubBgpConnectionStatus

const (
	HubBgpConnectionStatusConnected    = original.HubBgpConnectionStatusConnected
	HubBgpConnectionStatusConnecting   = original.HubBgpConnectionStatusConnecting
	HubBgpConnectionStatusNotConnected = original.HubBgpConnectionStatusNotConnected
	HubBgpConnectionStatusUnknown      = original.HubBgpConnectionStatusUnknown
)

// HubVirtualNetworkConnectionStatus - The current state of the VirtualHub to vnet connection.
type HubVirtualNetworkConnectionStatus = original.HubVirtualNetworkConnectionStatus

const (
	HubVirtualNetworkConnectionStatusConnected    = original.HubVirtualNetworkConnectionStatusConnected
	HubVirtualNetworkConnectionStatusConnecting   = original.HubVirtualNetworkConnectionStatusConnecting
	HubVirtualNetworkConnectionStatusNotConnected = original.HubVirtualNetworkConnectionStatusNotConnected
	HubVirtualNetworkConnectionStatusUnknown      = original.HubVirtualNetworkConnectionStatusUnknown
)

// IPAllocationMethod - IP address allocation method.
type IPAllocationMethod = original.IPAllocationMethod

const (
	IPAllocationMethodDynamic = original.IPAllocationMethodDynamic
	IPAllocationMethodStatic  = original.IPAllocationMethodStatic
)

// IPAllocationType - IpAllocation type.
type IPAllocationType = original.IPAllocationType

const (
	IPAllocationTypeHypernet  = original.IPAllocationTypeHypernet
	IPAllocationTypeUndefined = original.IPAllocationTypeUndefined
)

// IPFlowProtocol - Protocol to be verified on.
type IPFlowProtocol = original.IPFlowProtocol

const (
	IPFlowProtocolTCP = original.IPFlowProtocolTCP
	IPFlowProtocolUDP = original.IPFlowProtocolUDP
)

// IPVersion - IP address version.
type IPVersion = original.IPVersion

const (
	IPVersionIPv4 = original.IPVersionIPv4
	IPVersionIPv6 = original.IPVersionIPv6
)

// IPsecEncryption - The IPSec encryption algorithm (IKE phase 1).
type IPsecEncryption = original.IPsecEncryption

const (
	IPsecEncryptionAES128    = original.IPsecEncryptionAES128
	IPsecEncryptionAES192    = original.IPsecEncryptionAES192
	IPsecEncryptionAES256    = original.IPsecEncryptionAES256
	IPsecEncryptionDes       = original.IPsecEncryptionDes
	IPsecEncryptionDes3      = original.IPsecEncryptionDes3
	IPsecEncryptionGCMaes128 = original.IPsecEncryptionGCMaes128
	IPsecEncryptionGCMaes192 = original.IPsecEncryptionGCMaes192
	IPsecEncryptionGCMaes256 = original.IPsecEncryptionGCMaes256
	IPsecEncryptionNone      = original.IPsecEncryptionNone
)

// IPsecIntegrity - The IPSec integrity algorithm (IKE phase 1).
type IPsecIntegrity = original.IPsecIntegrity

const (
	IPsecIntegrityGCMaes128 = original.IPsecIntegrityGCMaes128
	IPsecIntegrityGCMaes192 = original.IPsecIntegrityGCMaes192
	IPsecIntegrityGCMaes256 = original.IPsecIntegrityGCMaes256
	IPsecIntegrityMD5       = original.IPsecIntegrityMD5
	IPsecIntegritySHA1      = original.IPsecIntegritySHA1
	IPsecIntegritySHA256    = original.IPsecIntegritySHA256
)

// IkeEncryption - The IKE encryption algorithm (IKE phase 2).
type IkeEncryption = original.IkeEncryption

const (
	IkeEncryptionAES128    = original.IkeEncryptionAES128
	IkeEncryptionAES192    = original.IkeEncryptionAES192
	IkeEncryptionAES256    = original.IkeEncryptionAES256
	IkeEncryptionDes       = original.IkeEncryptionDes
	IkeEncryptionDes3      = original.IkeEncryptionDes3
	IkeEncryptionGCMaes128 = original.IkeEncryptionGCMaes128
	IkeEncryptionGCMaes256 = original.IkeEncryptionGCMaes256
)

// IkeIntegrity - The IKE integrity algorithm (IKE phase 2).
type IkeIntegrity = original.IkeIntegrity

const (
	IkeIntegrityGCMaes128 = original.IkeIntegrityGCMaes128
	IkeIntegrityGCMaes256 = original.IkeIntegrityGCMaes256
	IkeIntegrityMD5       = original.IkeIntegrityMD5
	IkeIntegritySHA1      = original.IkeIntegritySHA1
	IkeIntegritySHA256    = original.IkeIntegritySHA256
	IkeIntegritySHA384    = original.IkeIntegritySHA384
)

// InboundSecurityRulesProtocol - Protocol. This should be either TCP or UDP.
type InboundSecurityRulesProtocol = original.InboundSecurityRulesProtocol

const (
	InboundSecurityRulesProtocolTCP = original.InboundSecurityRulesProtocolTCP
	InboundSecurityRulesProtocolUDP = original.InboundSecurityRulesProtocolUDP
)

// IssueType - The type of issue.
type IssueType = original.IssueType

const (
	IssueTypeAgentStopped        = original.IssueTypeAgentStopped
	IssueTypeDNSResolution       = original.IssueTypeDNSResolution
	IssueTypeGuestFirewall       = original.IssueTypeGuestFirewall
	IssueTypeNetworkSecurityRule = original.IssueTypeNetworkSecurityRule
	IssueTypePlatform            = original.IssueTypePlatform
	IssueTypePortThrottled       = original.IssueTypePortThrottled
	IssueTypeSocketBind          = original.IssueTypeSocketBind
	IssueTypeUnknown             = original.IssueTypeUnknown
	IssueTypeUserDefinedRoute    = original.IssueTypeUserDefinedRoute
)

// LoadBalancerOutboundRuleProtocol - The protocol for the outbound rule in load balancer.
type LoadBalancerOutboundRuleProtocol = original.LoadBalancerOutboundRuleProtocol

const (
	LoadBalancerOutboundRuleProtocolAll = original.LoadBalancerOutboundRuleProtocolAll
	LoadBalancerOutboundRuleProtocolTCP = original.LoadBalancerOutboundRuleProtocolTCP
	LoadBalancerOutboundRuleProtocolUDP = original.LoadBalancerOutboundRuleProtocolUDP
)

// LoadBalancerSKUName - Name of a load balancer SKU.
type LoadBalancerSKUName = original.LoadBalancerSKUName

const (
	LoadBalancerSKUNameBasic    = original.LoadBalancerSKUNameBasic
	LoadBalancerSKUNameStandard = original.LoadBalancerSKUNameStandard
)

// LoadBalancerSKUTier - Tier of a load balancer SKU.
type LoadBalancerSKUTier = original.LoadBalancerSKUTier

const (
	LoadBalancerSKUTierGlobal   = original.LoadBalancerSKUTierGlobal
	LoadBalancerSKUTierRegional = original.LoadBalancerSKUTierRegional
)

// LoadDistribution - The load distribution policy for this rule.
type LoadDistribution = original.LoadDistribution

const (
	LoadDistributionDefault          = original.LoadDistributionDefault
	LoadDistributionSourceIP         = original.LoadDistributionSourceIP
	LoadDistributionSourceIPProtocol = original.LoadDistributionSourceIPProtocol
)

// ManagedRuleEnabledState - The state of the managed rule. Defaults to Disabled if not specified.
type ManagedRuleEnabledState = original.ManagedRuleEnabledState

const ManagedRuleEnabledStateDisabled = original.ManagedRuleEnabledStateDisabled

// NatGatewaySKUName - Name of Nat Gateway SKU.
type NatGatewaySKUName = original.NatGatewaySKUName

const NatGatewaySKUNameStandard = original.NatGatewaySKUNameStandard

// NetworkOperationStatus - Status of the Azure async operation.
type NetworkOperationStatus = original.NetworkOperationStatus

const (
	NetworkOperationStatusFailed     = original.NetworkOperationStatusFailed
	NetworkOperationStatusInProgress = original.NetworkOperationStatusInProgress
	NetworkOperationStatusSucceeded  = original.NetworkOperationStatusSucceeded
)

// NextHopType - Next hop type.
type NextHopType = original.NextHopType

const (
	NextHopTypeHyperNetGateway       = original.NextHopTypeHyperNetGateway
	NextHopTypeInternet              = original.NextHopTypeInternet
	NextHopTypeNone                  = original.NextHopTypeNone
	NextHopTypeVirtualAppliance      = original.NextHopTypeVirtualAppliance
	NextHopTypeVirtualNetworkGateway = original.NextHopTypeVirtualNetworkGateway
	NextHopTypeVnetLocal             = original.NextHopTypeVnetLocal
)

// OfficeTrafficCategory - The office traffic category.
type OfficeTrafficCategory = original.OfficeTrafficCategory

const (
	OfficeTrafficCategoryAll              = original.OfficeTrafficCategoryAll
	OfficeTrafficCategoryNone             = original.OfficeTrafficCategoryNone
	OfficeTrafficCategoryOptimize         = original.OfficeTrafficCategoryOptimize
	OfficeTrafficCategoryOptimizeAndAllow = original.OfficeTrafficCategoryOptimizeAndAllow
)

// Origin - The origin of the issue.
type Origin = original.Origin

const (
	OriginInbound  = original.OriginInbound
	OriginLocal    = original.OriginLocal
	OriginOutbound = original.OriginOutbound
)

// OutputType - Connection monitor output destination type. Currently, only "Workspace" is supported.
type OutputType = original.OutputType

const OutputTypeWorkspace = original.OutputTypeWorkspace

// OwaspCrsExclusionEntryMatchVariable - The variable to be excluded.
type OwaspCrsExclusionEntryMatchVariable = original.OwaspCrsExclusionEntryMatchVariable

const (
	OwaspCrsExclusionEntryMatchVariableRequestArgNames    = original.OwaspCrsExclusionEntryMatchVariableRequestArgNames
	OwaspCrsExclusionEntryMatchVariableRequestCookieNames = original.OwaspCrsExclusionEntryMatchVariableRequestCookieNames
	OwaspCrsExclusionEntryMatchVariableRequestHeaderNames = original.OwaspCrsExclusionEntryMatchVariableRequestHeaderNames
)

// OwaspCrsExclusionEntrySelectorMatchOperator - When matchVariable is a collection, operate on the selector to specify which elements in the collection
// this exclusion applies to.
type OwaspCrsExclusionEntrySelectorMatchOperator = original.OwaspCrsExclusionEntrySelectorMatchOperator

const (
	OwaspCrsExclusionEntrySelectorMatchOperatorContains   = original.OwaspCrsExclusionEntrySelectorMatchOperatorContains
	OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith   = original.OwaspCrsExclusionEntrySelectorMatchOperatorEndsWith
	OwaspCrsExclusionEntrySelectorMatchOperatorEquals     = original.OwaspCrsExclusionEntrySelectorMatchOperatorEquals
	OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny  = original.OwaspCrsExclusionEntrySelectorMatchOperatorEqualsAny
	OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith = original.OwaspCrsExclusionEntrySelectorMatchOperatorStartsWith
)

type PcError = original.PcError

const (
	PcErrorAgentStopped    = original.PcErrorAgentStopped
	PcErrorCaptureFailed   = original.PcErrorCaptureFailed
	PcErrorInternalError   = original.PcErrorInternalError
	PcErrorLocalFileFailed = original.PcErrorLocalFileFailed
	PcErrorStorageFailed   = original.PcErrorStorageFailed
)

// PcProtocol - Protocol to be filtered on.
type PcProtocol = original.PcProtocol

const (
	PcProtocolAny = original.PcProtocolAny
	PcProtocolTCP = original.PcProtocolTCP
	PcProtocolUDP = original.PcProtocolUDP
)

// PcStatus - The status of the packet capture session.
type PcStatus = original.PcStatus

const (
	PcStatusError      = original.PcStatusError
	PcStatusNotStarted = original.PcStatusNotStarted
	PcStatusRunning    = original.PcStatusRunning
	PcStatusStopped    = original.PcStatusStopped
	PcStatusUnknown    = original.PcStatusUnknown
)

// PfsGroup - The Pfs Groups used in IKE Phase 2 for new child SA.
type PfsGroup = original.PfsGroup

const (
	PfsGroupEcp256  = original.PfsGroupEcp256
	PfsGroupEcp384  = original.PfsGroupEcp384
	PfsGroupNone    = original.PfsGroupNone
	PfsGroupPfs1    = original.PfsGroupPfs1
	PfsGroupPfs14   = original.PfsGroupPfs14
	PfsGroupPfs2    = original.PfsGroupPfs2
	PfsGroupPfs2048 = original.PfsGroupPfs2048
	PfsGroupPfs24   = original.PfsGroupPfs24
	PfsGroupPfsmm   = original.PfsGroupPfsmm
)

// PreferredIPVersion - The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other
// parameters.
type PreferredIPVersion = original.PreferredIPVersion

const (
	PreferredIPVersionIPv4 = original.PreferredIPVersionIPv4
	PreferredIPVersionIPv6 = original.PreferredIPVersionIPv6
)

// ProbeProtocol - The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https'
// is specified, a 200 OK response from the specifies URI is required
// for the probe to be successful.
type ProbeProtocol = original.ProbeProtocol

const (
	ProbeProtocolHTTP  = original.ProbeProtocolHTTP
	ProbeProtocolHTTPs = original.ProbeProtocolHTTPs
	ProbeProtocolTCP   = original.ProbeProtocolTCP
)

// ProcessorArchitecture - VPN client Processor Architecture.
type ProcessorArchitecture = original.ProcessorArchitecture

const (
	ProcessorArchitectureAmd64 = original.ProcessorArchitectureAmd64
	ProcessorArchitectureX86   = original.ProcessorArchitectureX86
)

// Protocol - Network protocol.
type Protocol = original.Protocol

const (
	ProtocolHTTP  = original.ProtocolHTTP
	ProtocolHTTPs = original.ProtocolHTTPs
	ProtocolIcmp  = original.ProtocolIcmp
	ProtocolTCP   = original.ProtocolTCP
)

// ProtocolType - RNM supported protocol types.
type ProtocolType = original.ProtocolType

const (
	ProtocolTypeAh       = original.ProtocolTypeAh
	ProtocolTypeAll      = original.ProtocolTypeAll
	ProtocolTypeDoNotUse = original.ProtocolTypeDoNotUse
	ProtocolTypeEsp      = original.ProtocolTypeEsp
	ProtocolTypeGre      = original.ProtocolTypeGre
	ProtocolTypeIcmp     = original.ProtocolTypeIcmp
	ProtocolTypeTCP      = original.ProtocolTypeTCP
	ProtocolTypeUDP      = original.ProtocolTypeUDP
	ProtocolTypeVxlan    = original.ProtocolTypeVxlan
)

// ProvisioningState - The current provisioning state.
type ProvisioningState = original.ProvisioningState

const (
	ProvisioningStateDeleting  = original.ProvisioningStateDeleting
	ProvisioningStateFailed    = original.ProvisioningStateFailed
	ProvisioningStateSucceeded = original.ProvisioningStateSucceeded
	ProvisioningStateUpdating  = original.ProvisioningStateUpdating
)

// PublicIPAddressSKUName - Name of a public IP address SKU.
type PublicIPAddressSKUName = original.PublicIPAddressSKUName

const (
	PublicIPAddressSKUNameBasic    = original.PublicIPAddressSKUNameBasic
	PublicIPAddressSKUNameStandard = original.PublicIPAddressSKUNameStandard
)

// PublicIPAddressSKUTier - Tier of a public IP address SKU.
type PublicIPAddressSKUTier = original.PublicIPAddressSKUTier

const (
	PublicIPAddressSKUTierGlobal   = original.PublicIPAddressSKUTierGlobal
	PublicIPAddressSKUTierRegional = original.PublicIPAddressSKUTierRegional
)

// PublicIPPrefixSKUName - Name of a public IP prefix SKU.
type PublicIPPrefixSKUName = original.PublicIPPrefixSKUName

const PublicIPPrefixSKUNameStandard = original.PublicIPPrefixSKUNameStandard

// PublicIPPrefixSKUTier - Tier of a public IP prefix SKU.
type PublicIPPrefixSKUTier = original.PublicIPPrefixSKUTier

const (
	PublicIPPrefixSKUTierGlobal   = original.PublicIPPrefixSKUTierGlobal
	PublicIPPrefixSKUTierRegional = original.PublicIPPrefixSKUTierRegional
)

// ResourceIDentityType - The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
// and a set of user assigned identities. The type 'None' will remove any
// identities from the virtual machine.
type ResourceIDentityType = original.ResourceIDentityType

const (
	ResourceIDentityTypeSystemAssigned             = original.ResourceIDentityTypeSystemAssigned
	ResourceIDentityTypeUserAssigned               = original.ResourceIDentityTypeUserAssigned
	ResourceIDentityTypeSystemAssignedUserAssigned = original.ResourceIDentityTypeSystemAssignedUserAssigned
	ResourceIDentityTypeNone                       = original.ResourceIDentityTypeNone
)

// RouteFilterRuleType - The rule type of the rule.
type RouteFilterRuleType = original.RouteFilterRuleType

const RouteFilterRuleTypeCommunity = original.RouteFilterRuleTypeCommunity

// RouteNextHopType - The type of Azure hop the packet should be sent to.
type RouteNextHopType = original.RouteNextHopType

const (
	RouteNextHopTypeInternet              = original.RouteNextHopTypeInternet
	RouteNextHopTypeNone                  = original.RouteNextHopTypeNone
	RouteNextHopTypeVirtualAppliance      = original.RouteNextHopTypeVirtualAppliance
	RouteNextHopTypeVirtualNetworkGateway = original.RouteNextHopTypeVirtualNetworkGateway
	RouteNextHopTypeVnetLocal             = original.RouteNextHopTypeVnetLocal
)

// RoutingState - The current routing state of the VirtualHub.
type RoutingState = original.RoutingState

const (
	RoutingStateFailed       = original.RoutingStateFailed
	RoutingStateNone         = original.RoutingStateNone
	RoutingStateProvisioned  = original.RoutingStateProvisioned
	RoutingStateProvisioning = original.RoutingStateProvisioning
)

// SecurityPartnerProviderConnectionStatus - The current state of the connection with Security Partner Provider.
type SecurityPartnerProviderConnectionStatus = original.SecurityPartnerProviderConnectionStatus

const (
	SecurityPartnerProviderConnectionStatusConnected          = original.SecurityPartnerProviderConnectionStatusConnected
	SecurityPartnerProviderConnectionStatusNotConnected       = original.SecurityPartnerProviderConnectionStatusNotConnected
	SecurityPartnerProviderConnectionStatusPartiallyConnected = original.SecurityPartnerProviderConnectionStatusPartiallyConnected
	SecurityPartnerProviderConnectionStatusUnknown            = original.SecurityPartnerProviderConnectionStatusUnknown
)

// SecurityProviderName - The Security Providers.
type SecurityProviderName = original.SecurityProviderName

const (
	SecurityProviderNameCheckpoint = original.SecurityProviderNameCheckpoint
	SecurityProviderNameIBoss      = original.SecurityProviderNameIBoss
	SecurityProviderNameZScaler    = original.SecurityProviderNameZScaler
)

// SecurityRuleAccess - Whether network traffic is allowed or denied.
type SecurityRuleAccess = original.SecurityRuleAccess

const (
	SecurityRuleAccessAllow = original.SecurityRuleAccessAllow
	SecurityRuleAccessDeny  = original.SecurityRuleAccessDeny
)

// SecurityRuleDirection - The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
type SecurityRuleDirection = original.SecurityRuleDirection

const (
	SecurityRuleDirectionInbound  = original.SecurityRuleDirectionInbound
	SecurityRuleDirectionOutbound = original.SecurityRuleDirectionOutbound
)

// SecurityRuleProtocol - Network protocol this rule applies to.
type SecurityRuleProtocol = original.SecurityRuleProtocol

const (
	SecurityRuleProtocolAh       = original.SecurityRuleProtocolAh
	SecurityRuleProtocolAsterisk = original.SecurityRuleProtocolAsterisk
	SecurityRuleProtocolEsp      = original.SecurityRuleProtocolEsp
	SecurityRuleProtocolIcmp     = original.SecurityRuleProtocolIcmp
	SecurityRuleProtocolTCP      = original.SecurityRuleProtocolTCP
	SecurityRuleProtocolUDP      = original.SecurityRuleProtocolUDP
)

// ServiceProviderProvisioningState - The ServiceProviderProvisioningState state of the resource.
type ServiceProviderProvisioningState = original.ServiceProviderProvisioningState

const (
	ServiceProviderProvisioningStateDeprovisioning = original.ServiceProviderProvisioningStateDeprovisioning
	ServiceProviderProvisioningStateNotProvisioned = original.ServiceProviderProvisioningStateNotProvisioned
	ServiceProviderProvisioningStateProvisioned    = original.ServiceProviderProvisioningStateProvisioned
	ServiceProviderProvisioningStateProvisioning   = original.ServiceProviderProvisioningStateProvisioning
)

// Severity - The severity of the issue.
type Severity = original.Severity

const (
	SeverityError   = original.SeverityError
	SeverityWarning = original.SeverityWarning
)

// TransportProtocol - The transport protocol for the endpoint.
type TransportProtocol = original.TransportProtocol

const (
	TransportProtocolAll = original.TransportProtocolAll
	TransportProtocolTCP = original.TransportProtocolTCP
	TransportProtocolUDP = original.TransportProtocolUDP
)

// TunnelConnectionStatus - The current state of the tunnel.
type TunnelConnectionStatus = original.TunnelConnectionStatus

const (
	TunnelConnectionStatusConnected    = original.TunnelConnectionStatusConnected
	TunnelConnectionStatusConnecting   = original.TunnelConnectionStatusConnecting
	TunnelConnectionStatusNotConnected = original.TunnelConnectionStatusNotConnected
	TunnelConnectionStatusUnknown      = original.TunnelConnectionStatusUnknown
)

// UsageUnit - An enum describing the unit of measurement.
type UsageUnit = original.UsageUnit

const UsageUnitCount = original.UsageUnitCount

// VerbosityLevel - Verbosity level.
type VerbosityLevel = original.VerbosityLevel

const (
	VerbosityLevelFull    = original.VerbosityLevelFull
	VerbosityLevelMinimum = original.VerbosityLevelMinimum
	VerbosityLevelNormal  = original.VerbosityLevelNormal
)

// VirtualNetworkGatewayConnectionMode - Gateway connection type.
type VirtualNetworkGatewayConnectionMode = original.VirtualNetworkGatewayConnectionMode

const (
	VirtualNetworkGatewayConnectionModeDefault       = original.VirtualNetworkGatewayConnectionModeDefault
	VirtualNetworkGatewayConnectionModeInitiatorOnly = original.VirtualNetworkGatewayConnectionModeInitiatorOnly
	VirtualNetworkGatewayConnectionModeResponderOnly = original.VirtualNetworkGatewayConnectionModeResponderOnly
)

// VirtualNetworkGatewayConnectionProtocol - Gateway connection protocol.
type VirtualNetworkGatewayConnectionProtocol = original.VirtualNetworkGatewayConnectionProtocol

const (
	VirtualNetworkGatewayConnectionProtocolIkEv1 = original.VirtualNetworkGatewayConnectionProtocolIkEv1
	VirtualNetworkGatewayConnectionProtocolIkEv2 = original.VirtualNetworkGatewayConnectionProtocolIkEv2
)

// VirtualNetworkGatewayConnectionStatus - Virtual Network Gateway connection status.
type VirtualNetworkGatewayConnectionStatus = original.VirtualNetworkGatewayConnectionStatus

const (
	VirtualNetworkGatewayConnectionStatusConnected    = original.VirtualNetworkGatewayConnectionStatusConnected
	VirtualNetworkGatewayConnectionStatusConnecting   = original.VirtualNetworkGatewayConnectionStatusConnecting
	VirtualNetworkGatewayConnectionStatusNotConnected = original.VirtualNetworkGatewayConnectionStatusNotConnected
	VirtualNetworkGatewayConnectionStatusUnknown      = original.VirtualNetworkGatewayConnectionStatusUnknown
)

// VirtualNetworkGatewayConnectionType - Gateway connection type.
type VirtualNetworkGatewayConnectionType = original.VirtualNetworkGatewayConnectionType

const (
	VirtualNetworkGatewayConnectionTypeExpressRoute = original.VirtualNetworkGatewayConnectionTypeExpressRoute
	VirtualNetworkGatewayConnectionTypeIPsec        = original.VirtualNetworkGatewayConnectionTypeIPsec
	VirtualNetworkGatewayConnectionTypeVnet2Vnet    = original.VirtualNetworkGatewayConnectionTypeVnet2Vnet
	VirtualNetworkGatewayConnectionTypeVpnClient    = original.VirtualNetworkGatewayConnectionTypeVpnClient
)

// VirtualNetworkGatewaySKUName - Gateway SKU name.
type VirtualNetworkGatewaySKUName = original.VirtualNetworkGatewaySKUName

const (
	VirtualNetworkGatewaySKUNameBasic            = original.VirtualNetworkGatewaySKUNameBasic
	VirtualNetworkGatewaySKUNameErGw1Az          = original.VirtualNetworkGatewaySKUNameErGw1Az
	VirtualNetworkGatewaySKUNameErGw2Az          = original.VirtualNetworkGatewaySKUNameErGw2Az
	VirtualNetworkGatewaySKUNameErGw3Az          = original.VirtualNetworkGatewaySKUNameErGw3Az
	VirtualNetworkGatewaySKUNameHighPerformance  = original.VirtualNetworkGatewaySKUNameHighPerformance
	VirtualNetworkGatewaySKUNameStandard         = original.VirtualNetworkGatewaySKUNameStandard
	VirtualNetworkGatewaySKUNameUltraPerformance = original.VirtualNetworkGatewaySKUNameUltraPerformance
	VirtualNetworkGatewaySKUNameVpnGw1           = original.VirtualNetworkGatewaySKUNameVpnGw1
	VirtualNetworkGatewaySKUNameVpnGw1Az         = original.VirtualNetworkGatewaySKUNameVpnGw1Az
	VirtualNetworkGatewaySKUNameVpnGw2           = original.VirtualNetworkGatewaySKUNameVpnGw2
	VirtualNetworkGatewaySKUNameVpnGw2Az         = original.VirtualNetworkGatewaySKUNameVpnGw2Az
	VirtualNetworkGatewaySKUNameVpnGw3           = original.VirtualNetworkGatewaySKUNameVpnGw3
	VirtualNetworkGatewaySKUNameVpnGw3Az         = original.VirtualNetworkGatewaySKUNameVpnGw3Az
	VirtualNetworkGatewaySKUNameVpnGw4           = original.VirtualNetworkGatewaySKUNameVpnGw4
	VirtualNetworkGatewaySKUNameVpnGw4Az         = original.VirtualNetworkGatewaySKUNameVpnGw4Az
	VirtualNetworkGatewaySKUNameVpnGw5           = original.VirtualNetworkGatewaySKUNameVpnGw5
	VirtualNetworkGatewaySKUNameVpnGw5Az         = original.VirtualNetworkGatewaySKUNameVpnGw5Az
)

// VirtualNetworkGatewaySKUTier - Gateway SKU tier.
type VirtualNetworkGatewaySKUTier = original.VirtualNetworkGatewaySKUTier

const (
	VirtualNetworkGatewaySKUTierBasic            = original.VirtualNetworkGatewaySKUTierBasic
	VirtualNetworkGatewaySKUTierErGw1Az          = original.VirtualNetworkGatewaySKUTierErGw1Az
	VirtualNetworkGatewaySKUTierErGw2Az          = original.VirtualNetworkGatewaySKUTierErGw2Az
	VirtualNetworkGatewaySKUTierErGw3Az          = original.VirtualNetworkGatewaySKUTierErGw3Az
	VirtualNetworkGatewaySKUTierHighPerformance  = original.VirtualNetworkGatewaySKUTierHighPerformance
	VirtualNetworkGatewaySKUTierStandard         = original.VirtualNetworkGatewaySKUTierStandard
	VirtualNetworkGatewaySKUTierUltraPerformance = original.VirtualNetworkGatewaySKUTierUltraPerformance
	VirtualNetworkGatewaySKUTierVpnGw1           = original.VirtualNetworkGatewaySKUTierVpnGw1
	VirtualNetworkGatewaySKUTierVpnGw1Az         = original.VirtualNetworkGatewaySKUTierVpnGw1Az
	VirtualNetworkGatewaySKUTierVpnGw2           = original.VirtualNetworkGatewaySKUTierVpnGw2
	VirtualNetworkGatewaySKUTierVpnGw2Az         = original.VirtualNetworkGatewaySKUTierVpnGw2Az
	VirtualNetworkGatewaySKUTierVpnGw3           = original.VirtualNetworkGatewaySKUTierVpnGw3
	VirtualNetworkGatewaySKUTierVpnGw3Az         = original.VirtualNetworkGatewaySKUTierVpnGw3Az
	VirtualNetworkGatewaySKUTierVpnGw4           = original.VirtualNetworkGatewaySKUTierVpnGw4
	VirtualNetworkGatewaySKUTierVpnGw4Az         = original.VirtualNetworkGatewaySKUTierVpnGw4Az
	VirtualNetworkGatewaySKUTierVpnGw5           = original.VirtualNetworkGatewaySKUTierVpnGw5
	VirtualNetworkGatewaySKUTierVpnGw5Az         = original.VirtualNetworkGatewaySKUTierVpnGw5Az
)

// VirtualNetworkGatewayType - The type of this virtual network gateway.
type VirtualNetworkGatewayType = original.VirtualNetworkGatewayType

const (
	VirtualNetworkGatewayTypeExpressRoute = original.VirtualNetworkGatewayTypeExpressRoute
	VirtualNetworkGatewayTypeLocalGateway = original.VirtualNetworkGatewayTypeLocalGateway
	VirtualNetworkGatewayTypeVpn          = original.VirtualNetworkGatewayTypeVpn
)

// VirtualNetworkPeeringState - The status of the virtual network peering.
type VirtualNetworkPeeringState = original.VirtualNetworkPeeringState

const (
	VirtualNetworkPeeringStateConnected    = original.VirtualNetworkPeeringStateConnected
	VirtualNetworkPeeringStateDisconnected = original.VirtualNetworkPeeringStateDisconnected
	VirtualNetworkPeeringStateInitiated    = original.VirtualNetworkPeeringStateInitiated
)

// VirtualWanSecurityProviderType - The virtual wan security provider type.
type VirtualWanSecurityProviderType = original.VirtualWanSecurityProviderType

const (
	VirtualWanSecurityProviderTypeExternal = original.VirtualWanSecurityProviderTypeExternal
	VirtualWanSecurityProviderTypeNative   = original.VirtualWanSecurityProviderTypeNative
)

// VpnAuthenticationType - VPN authentication types enabled for the VpnServerConfiguration.
type VpnAuthenticationType = original.VpnAuthenticationType

const (
	VpnAuthenticationTypeAad         = original.VpnAuthenticationTypeAad
	VpnAuthenticationTypeCertificate = original.VpnAuthenticationTypeCertificate
	VpnAuthenticationTypeRadius      = original.VpnAuthenticationTypeRadius
)

// VpnClientProtocol - VPN client protocol enabled for the virtual network gateway.
type VpnClientProtocol = original.VpnClientProtocol

const (
	VpnClientProtocolIkeV2   = original.VpnClientProtocolIkeV2
	VpnClientProtocolOpenVpn = original.VpnClientProtocolOpenVpn
	VpnClientProtocolSstp    = original.VpnClientProtocolSstp
)

// VpnConnectionStatus - The current state of the vpn connection.
type VpnConnectionStatus = original.VpnConnectionStatus

const (
	VpnConnectionStatusConnected    = original.VpnConnectionStatusConnected
	VpnConnectionStatusConnecting   = original.VpnConnectionStatusConnecting
	VpnConnectionStatusNotConnected = original.VpnConnectionStatusNotConnected
	VpnConnectionStatusUnknown      = original.VpnConnectionStatusUnknown
)

// VpnGatewayGeneration - The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
type VpnGatewayGeneration = original.VpnGatewayGeneration

const (
	VpnGatewayGenerationGeneration1 = original.VpnGatewayGenerationGeneration1
	VpnGatewayGenerationGeneration2 = original.VpnGatewayGenerationGeneration2
	VpnGatewayGenerationNone        = original.VpnGatewayGenerationNone
)

// VpnGatewayTunnelingProtocol - VPN protocol enabled for the VpnServerConfiguration.
type VpnGatewayTunnelingProtocol = original.VpnGatewayTunnelingProtocol

const (
	VpnGatewayTunnelingProtocolIkeV2   = original.VpnGatewayTunnelingProtocolIkeV2
	VpnGatewayTunnelingProtocolOpenVpn = original.VpnGatewayTunnelingProtocolOpenVpn
)

// VpnType - The type of this virtual network gateway.
type VpnType = original.VpnType

const (
	VpnTypePolicyBased = original.VpnTypePolicyBased
	VpnTypeRouteBased  = original.VpnTypeRouteBased
)

// WebApplicationFirewallAction - Type of Actions.
type WebApplicationFirewallAction = original.WebApplicationFirewallAction

const (
	WebApplicationFirewallActionAllow = original.WebApplicationFirewallActionAllow
	WebApplicationFirewallActionBlock = original.WebApplicationFirewallActionBlock
	WebApplicationFirewallActionLog   = original.WebApplicationFirewallActionLog
)

// WebApplicationFirewallEnabledState - The state of the policy.
type WebApplicationFirewallEnabledState = original.WebApplicationFirewallEnabledState

const (
	WebApplicationFirewallEnabledStateDisabled = original.WebApplicationFirewallEnabledStateDisabled
	WebApplicationFirewallEnabledStateEnabled  = original.WebApplicationFirewallEnabledStateEnabled
)

// WebApplicationFirewallMatchVariable - Match Variable.
type WebApplicationFirewallMatchVariable = original.WebApplicationFirewallMatchVariable

const (
	WebApplicationFirewallMatchVariablePostArgs       = original.WebApplicationFirewallMatchVariablePostArgs
	WebApplicationFirewallMatchVariableQueryString    = original.WebApplicationFirewallMatchVariableQueryString
	WebApplicationFirewallMatchVariableRemoteAddr     = original.WebApplicationFirewallMatchVariableRemoteAddr
	WebApplicationFirewallMatchVariableRequestBody    = original.WebApplicationFirewallMatchVariableRequestBody
	WebApplicationFirewallMatchVariableRequestCookies = original.WebApplicationFirewallMatchVariableRequestCookies
	WebApplicationFirewallMatchVariableRequestHeaders = original.WebApplicationFirewallMatchVariableRequestHeaders
	WebApplicationFirewallMatchVariableRequestMethod  = original.WebApplicationFirewallMatchVariableRequestMethod
	WebApplicationFirewallMatchVariableRequestURI     = original.WebApplicationFirewallMatchVariableRequestURI
)

// WebApplicationFirewallMode - The mode of the policy.
type WebApplicationFirewallMode = original.WebApplicationFirewallMode

const (
	WebApplicationFirewallModeDetection  = original.WebApplicationFirewallModeDetection
	WebApplicationFirewallModePrevention = original.WebApplicationFirewallModePrevention
)

// WebApplicationFirewallOperator - The operator to be matched.
type WebApplicationFirewallOperator = original.WebApplicationFirewallOperator

const (
	WebApplicationFirewallOperatorBeginsWith         = original.WebApplicationFirewallOperatorBeginsWith
	WebApplicationFirewallOperatorContains           = original.WebApplicationFirewallOperatorContains
	WebApplicationFirewallOperatorEndsWith           = original.WebApplicationFirewallOperatorEndsWith
	WebApplicationFirewallOperatorEqual              = original.WebApplicationFirewallOperatorEqual
	WebApplicationFirewallOperatorGeoMatch           = original.WebApplicationFirewallOperatorGeoMatch
	WebApplicationFirewallOperatorGreaterThan        = original.WebApplicationFirewallOperatorGreaterThan
	WebApplicationFirewallOperatorGreaterThanOrEqual = original.WebApplicationFirewallOperatorGreaterThanOrEqual
	WebApplicationFirewallOperatorIPMatch            = original.WebApplicationFirewallOperatorIPMatch
	WebApplicationFirewallOperatorLessThan           = original.WebApplicationFirewallOperatorLessThan
	WebApplicationFirewallOperatorLessThanOrEqual    = original.WebApplicationFirewallOperatorLessThanOrEqual
	WebApplicationFirewallOperatorRegex              = original.WebApplicationFirewallOperatorRegex
)

// WebApplicationFirewallPolicyResourceState - Resource status of the policy.
type WebApplicationFirewallPolicyResourceState = original.WebApplicationFirewallPolicyResourceState

const (
	WebApplicationFirewallPolicyResourceStateCreating  = original.WebApplicationFirewallPolicyResourceStateCreating
	WebApplicationFirewallPolicyResourceStateDeleting  = original.WebApplicationFirewallPolicyResourceStateDeleting
	WebApplicationFirewallPolicyResourceStateDisabled  = original.WebApplicationFirewallPolicyResourceStateDisabled
	WebApplicationFirewallPolicyResourceStateDisabling = original.WebApplicationFirewallPolicyResourceStateDisabling
	WebApplicationFirewallPolicyResourceStateEnabled   = original.WebApplicationFirewallPolicyResourceStateEnabled
	WebApplicationFirewallPolicyResourceStateEnabling  = original.WebApplicationFirewallPolicyResourceStateEnabling
)

// WebApplicationFirewallRuleType - The rule type.
type WebApplicationFirewallRuleType = original.WebApplicationFirewallRuleType

const (
	WebApplicationFirewallRuleTypeInvalid   = original.WebApplicationFirewallRuleTypeInvalid
	WebApplicationFirewallRuleTypeMatchRule = original.WebApplicationFirewallRuleTypeMatchRule
)

// WebApplicationFirewallTransform - Transforms applied before matching.
type WebApplicationFirewallTransform = original.WebApplicationFirewallTransform

const (
	WebApplicationFirewallTransformHTMLEntityDecode = original.WebApplicationFirewallTransformHTMLEntityDecode
	WebApplicationFirewallTransformLowercase        = original.WebApplicationFirewallTransformLowercase
	WebApplicationFirewallTransformRemoveNulls      = original.WebApplicationFirewallTransformRemoveNulls
	WebApplicationFirewallTransformTrim             = original.WebApplicationFirewallTransformTrim
	WebApplicationFirewallTransformURLDecode        = original.WebApplicationFirewallTransformURLDecode
	WebApplicationFirewallTransformURLEncode        = original.WebApplicationFirewallTransformURLEncode
)

// AAD Vpn authentication type related parameters.
type AadAuthenticationParameters = original.AadAuthenticationParameters

// AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
type AddressSpace = original.AddressSpace

// Application gateway resource.
type ApplicationGateway = original.ApplicationGateway

// Authentication certificates of an application gateway.
type ApplicationGatewayAuthenticationCertificate = original.ApplicationGatewayAuthenticationCertificate

// Authentication certificates properties of an application gateway.
type ApplicationGatewayAuthenticationCertificatePropertiesFormat = original.ApplicationGatewayAuthenticationCertificatePropertiesFormat

// Application Gateway autoscale configuration.
type ApplicationGatewayAutoscaleConfiguration = original.ApplicationGatewayAutoscaleConfiguration

// Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSslOptions = original.ApplicationGatewayAvailableSslOptions

// Properties of ApplicationGatewayAvailableSslOptions.
type ApplicationGatewayAvailableSslOptionsPropertiesFormat = original.ApplicationGatewayAvailableSslOptionsPropertiesFormat

// ApplicationGatewayAvailableSslOptionsResponse is the response envelope for operations that return a ApplicationGatewayAvailableSslOptions type.
type ApplicationGatewayAvailableSslOptionsResponse = original.ApplicationGatewayAvailableSslOptionsResponse

// Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSslPredefinedPolicies = original.ApplicationGatewayAvailableSslPredefinedPolicies

// ApplicationGatewayAvailableSslPredefinedPoliciesPager provides iteration over ApplicationGatewayAvailableSslPredefinedPolicies pages.
type ApplicationGatewayAvailableSslPredefinedPoliciesPager = original.ApplicationGatewayAvailableSslPredefinedPoliciesPager

// ApplicationGatewayAvailableSslPredefinedPoliciesResponse is the response envelope for operations that return a ApplicationGatewayAvailableSslPredefinedPolicies
// type.
type ApplicationGatewayAvailableSslPredefinedPoliciesResponse = original.ApplicationGatewayAvailableSslPredefinedPoliciesResponse

// Response for ApplicationGatewayAvailableWafRuleSets API service call.
type ApplicationGatewayAvailableWafRuleSetsResult = original.ApplicationGatewayAvailableWafRuleSetsResult

// ApplicationGatewayAvailableWafRuleSetsResultResponse is the response envelope for operations that return a ApplicationGatewayAvailableWafRuleSetsResult
// type.
type ApplicationGatewayAvailableWafRuleSetsResultResponse = original.ApplicationGatewayAvailableWafRuleSetsResultResponse

// Backend address of an application gateway.
type ApplicationGatewayBackendAddress = original.ApplicationGatewayBackendAddress

// Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPool = original.ApplicationGatewayBackendAddressPool

// Properties of Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat = original.ApplicationGatewayBackendAddressPoolPropertiesFormat

// Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettings = original.ApplicationGatewayBackendHTTPSettings

// Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettingsPropertiesFormat = original.ApplicationGatewayBackendHTTPSettingsPropertiesFormat

// Response for ApplicationGatewayBackendHealth API service call.
type ApplicationGatewayBackendHealth = original.ApplicationGatewayBackendHealth

// Application gateway BackendHealthHttp settings.
type ApplicationGatewayBackendHealthHTTPSettings = original.ApplicationGatewayBackendHealthHTTPSettings

// Result of on demand test probe.
type ApplicationGatewayBackendHealthOnDemand = original.ApplicationGatewayBackendHealthOnDemand

// ApplicationGatewayBackendHealthOnDemandPoller provides polling facilities until the operation completes
type ApplicationGatewayBackendHealthOnDemandPoller = original.ApplicationGatewayBackendHealthOnDemandPoller

// ApplicationGatewayBackendHealthOnDemandPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealthOnDemand
// type.
type ApplicationGatewayBackendHealthOnDemandPollerResponse = original.ApplicationGatewayBackendHealthOnDemandPollerResponse

// ApplicationGatewayBackendHealthOnDemandResponse is the response envelope for operations that return a ApplicationGatewayBackendHealthOnDemand type.
type ApplicationGatewayBackendHealthOnDemandResponse = original.ApplicationGatewayBackendHealthOnDemandResponse

// ApplicationGatewayBackendHealthPoller provides polling facilities until the operation completes
type ApplicationGatewayBackendHealthPoller = original.ApplicationGatewayBackendHealthPoller

// ApplicationGatewayBackendHealthPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthPollerResponse = original.ApplicationGatewayBackendHealthPollerResponse

// Application gateway BackendHealth pool.
type ApplicationGatewayBackendHealthPool = original.ApplicationGatewayBackendHealthPool

// ApplicationGatewayBackendHealthResponse is the response envelope for operations that return a ApplicationGatewayBackendHealth type.
type ApplicationGatewayBackendHealthResponse = original.ApplicationGatewayBackendHealthResponse

// Application gateway backendhealth http settings.
type ApplicationGatewayBackendHealthServer = original.ApplicationGatewayBackendHealthServer

// Application gateway client authentication configuration.
type ApplicationGatewayClientAuthConfiguration = original.ApplicationGatewayClientAuthConfiguration

// Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
type ApplicationGatewayConnectionDraining = original.ApplicationGatewayConnectionDraining

// Customer error of an application gateway.
type ApplicationGatewayCustomError = original.ApplicationGatewayCustomError

// Allows to disable rules within a rule group or an entire rule group.
type ApplicationGatewayFirewallDisabledRuleGroup = original.ApplicationGatewayFirewallDisabledRuleGroup

// Allow to exclude some variable satisfy the condition for the WAF check.
type ApplicationGatewayFirewallExclusion = original.ApplicationGatewayFirewallExclusion

// A web application firewall rule.
type ApplicationGatewayFirewallRule = original.ApplicationGatewayFirewallRule

// A web application firewall rule group.
type ApplicationGatewayFirewallRuleGroup = original.ApplicationGatewayFirewallRuleGroup

// A web application firewall rule set.
type ApplicationGatewayFirewallRuleSet = original.ApplicationGatewayFirewallRuleSet

// Properties of the web application firewall rule set.
type ApplicationGatewayFirewallRuleSetPropertiesFormat = original.ApplicationGatewayFirewallRuleSetPropertiesFormat

// Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfiguration = original.ApplicationGatewayFrontendIPConfiguration

// Properties of Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat = original.ApplicationGatewayFrontendIPConfigurationPropertiesFormat

// Frontend port of an application gateway.
type ApplicationGatewayFrontendPort = original.ApplicationGatewayFrontendPort

// Properties of Frontend port of an application gateway.
type ApplicationGatewayFrontendPortPropertiesFormat = original.ApplicationGatewayFrontendPortPropertiesFormat

// Http listener of an application gateway.
type ApplicationGatewayHTTPListener = original.ApplicationGatewayHTTPListener

// Properties of HTTP listener of an application gateway.
type ApplicationGatewayHTTPListenerPropertiesFormat = original.ApplicationGatewayHTTPListenerPropertiesFormat

// Header configuration of the Actions set in Application Gateway.
type ApplicationGatewayHeaderConfiguration = original.ApplicationGatewayHeaderConfiguration

// IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
type ApplicationGatewayIPConfiguration = original.ApplicationGatewayIPConfiguration

// Properties of IP configuration of an application gateway.
type ApplicationGatewayIPConfigurationPropertiesFormat = original.ApplicationGatewayIPConfigurationPropertiesFormat

// Response for ListApplicationGateways API service call.
type ApplicationGatewayListResult = original.ApplicationGatewayListResult

// ApplicationGatewayListResultPager provides iteration over ApplicationGatewayListResult pages.
type ApplicationGatewayListResultPager = original.ApplicationGatewayListResultPager

// ApplicationGatewayListResultResponse is the response envelope for operations that return a ApplicationGatewayListResult type.
type ApplicationGatewayListResultResponse = original.ApplicationGatewayListResultResponse

// Details of on demand test probe request.
type ApplicationGatewayOnDemandProbe = original.ApplicationGatewayOnDemandProbe

// Path rule of URL path map of an application gateway.
type ApplicationGatewayPathRule = original.ApplicationGatewayPathRule

// Properties of path rule of an application gateway.
type ApplicationGatewayPathRulePropertiesFormat = original.ApplicationGatewayPathRulePropertiesFormat

// ApplicationGatewayPoller provides polling facilities until the operation completes
type ApplicationGatewayPoller = original.ApplicationGatewayPoller

// ApplicationGatewayPollerResponse is the response envelope for operations that asynchronously return a ApplicationGateway type.
type ApplicationGatewayPollerResponse = original.ApplicationGatewayPollerResponse

// Private Endpoint connection on an application gateway.
type ApplicationGatewayPrivateEndpointConnection = original.ApplicationGatewayPrivateEndpointConnection

// Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.
type ApplicationGatewayPrivateEndpointConnectionListResult = original.ApplicationGatewayPrivateEndpointConnectionListResult

// ApplicationGatewayPrivateEndpointConnectionListResultPager provides iteration over ApplicationGatewayPrivateEndpointConnectionListResult pages.
type ApplicationGatewayPrivateEndpointConnectionListResultPager = original.ApplicationGatewayPrivateEndpointConnectionListResultPager

// ApplicationGatewayPrivateEndpointConnectionListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnectionListResult
// type.
type ApplicationGatewayPrivateEndpointConnectionListResultResponse = original.ApplicationGatewayPrivateEndpointConnectionListResultResponse

// ApplicationGatewayPrivateEndpointConnectionPoller provides polling facilities until the operation completes
type ApplicationGatewayPrivateEndpointConnectionPoller = original.ApplicationGatewayPrivateEndpointConnectionPoller

// ApplicationGatewayPrivateEndpointConnectionPollerResponse is the response envelope for operations that asynchronously return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionPollerResponse = original.ApplicationGatewayPrivateEndpointConnectionPollerResponse

// Properties of Private Link Resource of an application gateway.
type ApplicationGatewayPrivateEndpointConnectionProperties = original.ApplicationGatewayPrivateEndpointConnectionProperties

// ApplicationGatewayPrivateEndpointConnectionResponse is the response envelope for operations that return a ApplicationGatewayPrivateEndpointConnection
// type.
type ApplicationGatewayPrivateEndpointConnectionResponse = original.ApplicationGatewayPrivateEndpointConnectionResponse

// ApplicationGatewayPrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.BeginDelete
// method.
type ApplicationGatewayPrivateEndpointConnectionsBeginDeleteOptions = original.ApplicationGatewayPrivateEndpointConnectionsBeginDeleteOptions

// ApplicationGatewayPrivateEndpointConnectionsBeginUpdateOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.BeginUpdate
// method.
type ApplicationGatewayPrivateEndpointConnectionsBeginUpdateOptions = original.ApplicationGatewayPrivateEndpointConnectionsBeginUpdateOptions

// ApplicationGatewayPrivateEndpointConnectionsClient contains the methods for the ApplicationGatewayPrivateEndpointConnections group.
// Don't use this type directly, use NewApplicationGatewayPrivateEndpointConnectionsClient() instead.
type ApplicationGatewayPrivateEndpointConnectionsClient = original.ApplicationGatewayPrivateEndpointConnectionsClient

// ApplicationGatewayPrivateEndpointConnectionsGetOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.Get method.
type ApplicationGatewayPrivateEndpointConnectionsGetOptions = original.ApplicationGatewayPrivateEndpointConnectionsGetOptions

// ApplicationGatewayPrivateEndpointConnectionsListOptions contains the optional parameters for the ApplicationGatewayPrivateEndpointConnections.List method.
type ApplicationGatewayPrivateEndpointConnectionsListOptions = original.ApplicationGatewayPrivateEndpointConnectionsListOptions

// Private Link Configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfiguration = original.ApplicationGatewayPrivateLinkConfiguration

// Properties of private link configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfigurationProperties = original.ApplicationGatewayPrivateLinkConfigurationProperties

// The application gateway private link ip configuration.
type ApplicationGatewayPrivateLinkIPConfiguration = original.ApplicationGatewayPrivateLinkIPConfiguration

// Properties of an application gateway private link IP configuration.
type ApplicationGatewayPrivateLinkIPConfigurationProperties = original.ApplicationGatewayPrivateLinkIPConfigurationProperties

// PrivateLink Resource of an application gateway.
type ApplicationGatewayPrivateLinkResource = original.ApplicationGatewayPrivateLinkResource

// Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.
type ApplicationGatewayPrivateLinkResourceListResult = original.ApplicationGatewayPrivateLinkResourceListResult

// ApplicationGatewayPrivateLinkResourceListResultPager provides iteration over ApplicationGatewayPrivateLinkResourceListResult pages.
type ApplicationGatewayPrivateLinkResourceListResultPager = original.ApplicationGatewayPrivateLinkResourceListResultPager

// ApplicationGatewayPrivateLinkResourceListResultResponse is the response envelope for operations that return a ApplicationGatewayPrivateLinkResourceListResult
// type.
type ApplicationGatewayPrivateLinkResourceListResultResponse = original.ApplicationGatewayPrivateLinkResourceListResultResponse

// Properties of a private link resource.
type ApplicationGatewayPrivateLinkResourceProperties = original.ApplicationGatewayPrivateLinkResourceProperties

// ApplicationGatewayPrivateLinkResourcesClient contains the methods for the ApplicationGatewayPrivateLinkResources group.
// Don't use this type directly, use NewApplicationGatewayPrivateLinkResourcesClient() instead.
type ApplicationGatewayPrivateLinkResourcesClient = original.ApplicationGatewayPrivateLinkResourcesClient

// ApplicationGatewayPrivateLinkResourcesListOptions contains the optional parameters for the ApplicationGatewayPrivateLinkResources.List method.
type ApplicationGatewayPrivateLinkResourcesListOptions = original.ApplicationGatewayPrivateLinkResourcesListOptions

// Probe of the application gateway.
type ApplicationGatewayProbe = original.ApplicationGatewayProbe

// Application gateway probe health response match.
type ApplicationGatewayProbeHealthResponseMatch = original.ApplicationGatewayProbeHealthResponseMatch

// Properties of probe of an application gateway.
type ApplicationGatewayProbePropertiesFormat = original.ApplicationGatewayProbePropertiesFormat

// Properties of the application gateway.
type ApplicationGatewayPropertiesFormat = original.ApplicationGatewayPropertiesFormat

// Redirect configuration of an application gateway.
type ApplicationGatewayRedirectConfiguration = original.ApplicationGatewayRedirectConfiguration

// Properties of redirect configuration of the application gateway.
type ApplicationGatewayRedirectConfigurationPropertiesFormat = original.ApplicationGatewayRedirectConfigurationPropertiesFormat

// Request routing rule of an application gateway.
type ApplicationGatewayRequestRoutingRule = original.ApplicationGatewayRequestRoutingRule

// Properties of request routing rule of the application gateway.
type ApplicationGatewayRequestRoutingRulePropertiesFormat = original.ApplicationGatewayRequestRoutingRulePropertiesFormat

// ApplicationGatewayResponse is the response envelope for operations that return a ApplicationGateway type.
type ApplicationGatewayResponse = original.ApplicationGatewayResponse

// Rewrite rule of an application gateway.
type ApplicationGatewayRewriteRule = original.ApplicationGatewayRewriteRule

// Set of actions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleActionSet = original.ApplicationGatewayRewriteRuleActionSet

// Set of conditions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleCondition = original.ApplicationGatewayRewriteRuleCondition

// Rewrite rule set of an application gateway.
type ApplicationGatewayRewriteRuleSet = original.ApplicationGatewayRewriteRuleSet

// Properties of rewrite rule set of the application gateway.
type ApplicationGatewayRewriteRuleSetPropertiesFormat = original.ApplicationGatewayRewriteRuleSetPropertiesFormat

// SKU of an application gateway.
type ApplicationGatewaySKU = original.ApplicationGatewaySKU

// SSL certificates of an application gateway.
type ApplicationGatewaySslCertificate = original.ApplicationGatewaySslCertificate

// Properties of SSL certificates of an application gateway.
type ApplicationGatewaySslCertificatePropertiesFormat = original.ApplicationGatewaySslCertificatePropertiesFormat

// Application Gateway Ssl policy.
type ApplicationGatewaySslPolicy = original.ApplicationGatewaySslPolicy

// An Ssl predefined policy.
type ApplicationGatewaySslPredefinedPolicy = original.ApplicationGatewaySslPredefinedPolicy

// Properties of ApplicationGatewaySslPredefinedPolicy.
type ApplicationGatewaySslPredefinedPolicyPropertiesFormat = original.ApplicationGatewaySslPredefinedPolicyPropertiesFormat

// ApplicationGatewaySslPredefinedPolicyResponse is the response envelope for operations that return a ApplicationGatewaySslPredefinedPolicy type.
type ApplicationGatewaySslPredefinedPolicyResponse = original.ApplicationGatewaySslPredefinedPolicyResponse

// SSL profile of an application gateway.
type ApplicationGatewaySslProfile = original.ApplicationGatewaySslProfile

// Properties of SSL profile of an application gateway.
type ApplicationGatewaySslProfilePropertiesFormat = original.ApplicationGatewaySslProfilePropertiesFormat

// Trusted client certificates of an application gateway.
type ApplicationGatewayTrustedClientCertificate = original.ApplicationGatewayTrustedClientCertificate

// Trusted client certificates properties of an application gateway.
type ApplicationGatewayTrustedClientCertificatePropertiesFormat = original.ApplicationGatewayTrustedClientCertificatePropertiesFormat

// Trusted Root certificates of an application gateway.
type ApplicationGatewayTrustedRootCertificate = original.ApplicationGatewayTrustedRootCertificate

// Trusted Root certificates properties of an application gateway.
type ApplicationGatewayTrustedRootCertificatePropertiesFormat = original.ApplicationGatewayTrustedRootCertificatePropertiesFormat

// Url configuration of the Actions set in Application Gateway.
type ApplicationGatewayURLConfiguration = original.ApplicationGatewayURLConfiguration

// UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
type ApplicationGatewayURLPathMap = original.ApplicationGatewayURLPathMap

// Properties of UrlPathMap of the application gateway.
type ApplicationGatewayURLPathMapPropertiesFormat = original.ApplicationGatewayURLPathMapPropertiesFormat

// Application gateway web application firewall configuration.
type ApplicationGatewayWebApplicationFirewallConfiguration = original.ApplicationGatewayWebApplicationFirewallConfiguration

// ApplicationGatewaysBeginBackendHealthOnDemandOptions contains the optional parameters for the ApplicationGateways.BeginBackendHealthOnDemand method.
type ApplicationGatewaysBeginBackendHealthOnDemandOptions = original.ApplicationGatewaysBeginBackendHealthOnDemandOptions

// ApplicationGatewaysBeginBackendHealthOptions contains the optional parameters for the ApplicationGateways.BeginBackendHealth method.
type ApplicationGatewaysBeginBackendHealthOptions = original.ApplicationGatewaysBeginBackendHealthOptions

// ApplicationGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the ApplicationGateways.BeginCreateOrUpdate method.
type ApplicationGatewaysBeginCreateOrUpdateOptions = original.ApplicationGatewaysBeginCreateOrUpdateOptions

// ApplicationGatewaysBeginDeleteOptions contains the optional parameters for the ApplicationGateways.BeginDelete method.
type ApplicationGatewaysBeginDeleteOptions = original.ApplicationGatewaysBeginDeleteOptions

// ApplicationGatewaysBeginStartOptions contains the optional parameters for the ApplicationGateways.BeginStart method.
type ApplicationGatewaysBeginStartOptions = original.ApplicationGatewaysBeginStartOptions

// ApplicationGatewaysBeginStopOptions contains the optional parameters for the ApplicationGateways.BeginStop method.
type ApplicationGatewaysBeginStopOptions = original.ApplicationGatewaysBeginStopOptions

// ApplicationGatewaysClient contains the methods for the ApplicationGateways group.
// Don't use this type directly, use NewApplicationGatewaysClient() instead.
type ApplicationGatewaysClient = original.ApplicationGatewaysClient

// ApplicationGatewaysGetOptions contains the optional parameters for the ApplicationGateways.Get method.
type ApplicationGatewaysGetOptions = original.ApplicationGatewaysGetOptions

// ApplicationGatewaysGetSslPredefinedPolicyOptions contains the optional parameters for the ApplicationGateways.GetSslPredefinedPolicy method.
type ApplicationGatewaysGetSslPredefinedPolicyOptions = original.ApplicationGatewaysGetSslPredefinedPolicyOptions

// ApplicationGatewaysListAllOptions contains the optional parameters for the ApplicationGateways.ListAll method.
type ApplicationGatewaysListAllOptions = original.ApplicationGatewaysListAllOptions

// ApplicationGatewaysListAvailableRequestHeadersOptions contains the optional parameters for the ApplicationGateways.ListAvailableRequestHeaders method.
type ApplicationGatewaysListAvailableRequestHeadersOptions = original.ApplicationGatewaysListAvailableRequestHeadersOptions

// ApplicationGatewaysListAvailableResponseHeadersOptions contains the optional parameters for the ApplicationGateways.ListAvailableResponseHeaders method.
type ApplicationGatewaysListAvailableResponseHeadersOptions = original.ApplicationGatewaysListAvailableResponseHeadersOptions

// ApplicationGatewaysListAvailableServerVariablesOptions contains the optional parameters for the ApplicationGateways.ListAvailableServerVariables method.
type ApplicationGatewaysListAvailableServerVariablesOptions = original.ApplicationGatewaysListAvailableServerVariablesOptions

// ApplicationGatewaysListAvailableSslOptionsOptions contains the optional parameters for the ApplicationGateways.ListAvailableSslOptions method.
type ApplicationGatewaysListAvailableSslOptionsOptions = original.ApplicationGatewaysListAvailableSslOptionsOptions

// ApplicationGatewaysListAvailableSslPredefinedPoliciesOptions contains the optional parameters for the ApplicationGateways.ListAvailableSslPredefinedPolicies
// method.
type ApplicationGatewaysListAvailableSslPredefinedPoliciesOptions = original.ApplicationGatewaysListAvailableSslPredefinedPoliciesOptions

// ApplicationGatewaysListAvailableWafRuleSetsOptions contains the optional parameters for the ApplicationGateways.ListAvailableWafRuleSets method.
type ApplicationGatewaysListAvailableWafRuleSetsOptions = original.ApplicationGatewaysListAvailableWafRuleSetsOptions

// ApplicationGatewaysListOptions contains the optional parameters for the ApplicationGateways.List method.
type ApplicationGatewaysListOptions = original.ApplicationGatewaysListOptions

// ApplicationGatewaysUpdateTagsOptions contains the optional parameters for the ApplicationGateways.UpdateTags method.
type ApplicationGatewaysUpdateTagsOptions = original.ApplicationGatewaysUpdateTagsOptions

// Rule of type application.
type ApplicationRule = original.ApplicationRule

// An application security group in a resource group.
type ApplicationSecurityGroup = original.ApplicationSecurityGroup

// A list of application security groups.
type ApplicationSecurityGroupListResult = original.ApplicationSecurityGroupListResult

// ApplicationSecurityGroupListResultPager provides iteration over ApplicationSecurityGroupListResult pages.
type ApplicationSecurityGroupListResultPager = original.ApplicationSecurityGroupListResultPager

// ApplicationSecurityGroupListResultResponse is the response envelope for operations that return a ApplicationSecurityGroupListResult type.
type ApplicationSecurityGroupListResultResponse = original.ApplicationSecurityGroupListResultResponse

// ApplicationSecurityGroupPoller provides polling facilities until the operation completes
type ApplicationSecurityGroupPoller = original.ApplicationSecurityGroupPoller

// ApplicationSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupPollerResponse = original.ApplicationSecurityGroupPollerResponse

// Application security group properties.
type ApplicationSecurityGroupPropertiesFormat = original.ApplicationSecurityGroupPropertiesFormat

// ApplicationSecurityGroupResponse is the response envelope for operations that return a ApplicationSecurityGroup type.
type ApplicationSecurityGroupResponse = original.ApplicationSecurityGroupResponse

// ApplicationSecurityGroupsBeginCreateOrUpdateOptions contains the optional parameters for the ApplicationSecurityGroups.BeginCreateOrUpdate method.
type ApplicationSecurityGroupsBeginCreateOrUpdateOptions = original.ApplicationSecurityGroupsBeginCreateOrUpdateOptions

// ApplicationSecurityGroupsBeginDeleteOptions contains the optional parameters for the ApplicationSecurityGroups.BeginDelete method.
type ApplicationSecurityGroupsBeginDeleteOptions = original.ApplicationSecurityGroupsBeginDeleteOptions

// ApplicationSecurityGroupsClient contains the methods for the ApplicationSecurityGroups group.
// Don't use this type directly, use NewApplicationSecurityGroupsClient() instead.
type ApplicationSecurityGroupsClient = original.ApplicationSecurityGroupsClient

// ApplicationSecurityGroupsGetOptions contains the optional parameters for the ApplicationSecurityGroups.Get method.
type ApplicationSecurityGroupsGetOptions = original.ApplicationSecurityGroupsGetOptions

// ApplicationSecurityGroupsListAllOptions contains the optional parameters for the ApplicationSecurityGroups.ListAll method.
type ApplicationSecurityGroupsListAllOptions = original.ApplicationSecurityGroupsListAllOptions

// ApplicationSecurityGroupsListOptions contains the optional parameters for the ApplicationSecurityGroups.List method.
type ApplicationSecurityGroupsListOptions = original.ApplicationSecurityGroupsListOptions

// ApplicationSecurityGroupsUpdateTagsOptions contains the optional parameters for the ApplicationSecurityGroups.UpdateTags method.
type ApplicationSecurityGroupsUpdateTagsOptions = original.ApplicationSecurityGroupsUpdateTagsOptions

// Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.
type AuthorizationListResult = original.AuthorizationListResult

// AuthorizationListResultPager provides iteration over AuthorizationListResult pages.
type AuthorizationListResultPager = original.AuthorizationListResultPager

// AuthorizationListResultResponse is the response envelope for operations that return a AuthorizationListResult type.
type AuthorizationListResultResponse = original.AuthorizationListResultResponse

// Properties of ExpressRouteCircuitAuthorization.
type AuthorizationPropertiesFormat = original.AuthorizationPropertiesFormat

// The information of an AutoApprovedPrivateLinkService.
type AutoApprovedPrivateLinkService = original.AutoApprovedPrivateLinkService

// An array of private link service id that can be linked to a private end point with auto approved.
type AutoApprovedPrivateLinkServicesResult = original.AutoApprovedPrivateLinkServicesResult

// AutoApprovedPrivateLinkServicesResultPager provides iteration over AutoApprovedPrivateLinkServicesResult pages.
type AutoApprovedPrivateLinkServicesResultPager = original.AutoApprovedPrivateLinkServicesResultPager

// AutoApprovedPrivateLinkServicesResultResponse is the response envelope for operations that return a AutoApprovedPrivateLinkServicesResult type.
type AutoApprovedPrivateLinkServicesResultResponse = original.AutoApprovedPrivateLinkServicesResultResponse

// Availability of the metric.
type Availability = original.Availability

// The serviceName of an AvailableDelegation indicates a possible delegation for a subnet.
type AvailableDelegation = original.AvailableDelegation

// AvailableDelegationsClient contains the methods for the AvailableDelegations group.
// Don't use this type directly, use NewAvailableDelegationsClient() instead.
type AvailableDelegationsClient = original.AvailableDelegationsClient

// AvailableDelegationsListOptions contains the optional parameters for the AvailableDelegations.List method.
type AvailableDelegationsListOptions = original.AvailableDelegationsListOptions

// An array of available delegations.
type AvailableDelegationsResult = original.AvailableDelegationsResult

// AvailableDelegationsResultPager provides iteration over AvailableDelegationsResult pages.
type AvailableDelegationsResultPager = original.AvailableDelegationsResultPager

// AvailableDelegationsResultResponse is the response envelope for operations that return a AvailableDelegationsResult type.
type AvailableDelegationsResultResponse = original.AvailableDelegationsResultResponse

// AvailableEndpointServicesClient contains the methods for the AvailableEndpointServices group.
// Don't use this type directly, use NewAvailableEndpointServicesClient() instead.
type AvailableEndpointServicesClient = original.AvailableEndpointServicesClient

// AvailableEndpointServicesListOptions contains the optional parameters for the AvailableEndpointServices.List method.
type AvailableEndpointServicesListOptions = original.AvailableEndpointServicesListOptions

// The information of an AvailablePrivateEndpointType.
type AvailablePrivateEndpointType = original.AvailablePrivateEndpointType

// AvailablePrivateEndpointTypesClient contains the methods for the AvailablePrivateEndpointTypes group.
// Don't use this type directly, use NewAvailablePrivateEndpointTypesClient() instead.
type AvailablePrivateEndpointTypesClient = original.AvailablePrivateEndpointTypesClient

// AvailablePrivateEndpointTypesListByResourceGroupOptions contains the optional parameters for the AvailablePrivateEndpointTypes.ListByResourceGroup method.
type AvailablePrivateEndpointTypesListByResourceGroupOptions = original.AvailablePrivateEndpointTypesListByResourceGroupOptions

// AvailablePrivateEndpointTypesListOptions contains the optional parameters for the AvailablePrivateEndpointTypes.List method.
type AvailablePrivateEndpointTypesListOptions = original.AvailablePrivateEndpointTypesListOptions

// An array of available PrivateEndpoint types.
type AvailablePrivateEndpointTypesResult = original.AvailablePrivateEndpointTypesResult

// AvailablePrivateEndpointTypesResultPager provides iteration over AvailablePrivateEndpointTypesResult pages.
type AvailablePrivateEndpointTypesResultPager = original.AvailablePrivateEndpointTypesResultPager

// AvailablePrivateEndpointTypesResultResponse is the response envelope for operations that return a AvailablePrivateEndpointTypesResult type.
type AvailablePrivateEndpointTypesResultResponse = original.AvailablePrivateEndpointTypesResultResponse

// List of available countries with details.
type AvailableProvidersList = original.AvailableProvidersList

// City or town details.
type AvailableProvidersListCity = original.AvailableProvidersListCity

// Country details.
type AvailableProvidersListCountry = original.AvailableProvidersListCountry

// Constraints that determine the list of available Internet service providers.
type AvailableProvidersListParameters = original.AvailableProvidersListParameters

// AvailableProvidersListPoller provides polling facilities until the operation completes
type AvailableProvidersListPoller = original.AvailableProvidersListPoller

// AvailableProvidersListPollerResponse is the response envelope for operations that asynchronously return a AvailableProvidersList type.
type AvailableProvidersListPollerResponse = original.AvailableProvidersListPollerResponse

// AvailableProvidersListResponse is the response envelope for operations that return a AvailableProvidersList type.
type AvailableProvidersListResponse = original.AvailableProvidersListResponse

// State details.
type AvailableProvidersListState = original.AvailableProvidersListState

// AvailableResourceGroupDelegationsClient contains the methods for the AvailableResourceGroupDelegations group.
// Don't use this type directly, use NewAvailableResourceGroupDelegationsClient() instead.
type AvailableResourceGroupDelegationsClient = original.AvailableResourceGroupDelegationsClient

// AvailableResourceGroupDelegationsListOptions contains the optional parameters for the AvailableResourceGroupDelegations.List method.
type AvailableResourceGroupDelegationsListOptions = original.AvailableResourceGroupDelegationsListOptions

// The available service alias.
type AvailableServiceAlias = original.AvailableServiceAlias

// AvailableServiceAliasesClient contains the methods for the AvailableServiceAliases group.
// Don't use this type directly, use NewAvailableServiceAliasesClient() instead.
type AvailableServiceAliasesClient = original.AvailableServiceAliasesClient

// AvailableServiceAliasesListByResourceGroupOptions contains the optional parameters for the AvailableServiceAliases.ListByResourceGroup method.
type AvailableServiceAliasesListByResourceGroupOptions = original.AvailableServiceAliasesListByResourceGroupOptions

// AvailableServiceAliasesListOptions contains the optional parameters for the AvailableServiceAliases.List method.
type AvailableServiceAliasesListOptions = original.AvailableServiceAliasesListOptions

// An array of available service aliases.
type AvailableServiceAliasesResult = original.AvailableServiceAliasesResult

// AvailableServiceAliasesResultPager provides iteration over AvailableServiceAliasesResult pages.
type AvailableServiceAliasesResultPager = original.AvailableServiceAliasesResultPager

// AvailableServiceAliasesResultResponse is the response envelope for operations that return a AvailableServiceAliasesResult type.
type AvailableServiceAliasesResultResponse = original.AvailableServiceAliasesResultResponse

// The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note
// that this status is distinct from the HTTP
// status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status
// code for the successful request. If the
// asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.
type AzureAsyncOperationResult = original.AzureAsyncOperationResult

// Azure Firewall resource.
type AzureFirewall = original.AzureFirewall

// Properties of an application rule.
type AzureFirewallApplicationRule = original.AzureFirewallApplicationRule

// Application rule collection resource.
type AzureFirewallApplicationRuleCollection = original.AzureFirewallApplicationRuleCollection

// Properties of the application rule collection.
type AzureFirewallApplicationRuleCollectionPropertiesFormat = original.AzureFirewallApplicationRuleCollectionPropertiesFormat

// Properties of the application rule protocol.
type AzureFirewallApplicationRuleProtocol = original.AzureFirewallApplicationRuleProtocol

// Azure Firewall FQDN Tag Resource.
type AzureFirewallFqdnTag = original.AzureFirewallFqdnTag

// Response for ListAzureFirewallFqdnTags API service call.
type AzureFirewallFqdnTagListResult = original.AzureFirewallFqdnTagListResult

// AzureFirewallFqdnTagListResultPager provides iteration over AzureFirewallFqdnTagListResult pages.
type AzureFirewallFqdnTagListResultPager = original.AzureFirewallFqdnTagListResultPager

// AzureFirewallFqdnTagListResultResponse is the response envelope for operations that return a AzureFirewallFqdnTagListResult type.
type AzureFirewallFqdnTagListResultResponse = original.AzureFirewallFqdnTagListResultResponse

// Azure Firewall FQDN Tag Properties.
type AzureFirewallFqdnTagPropertiesFormat = original.AzureFirewallFqdnTagPropertiesFormat

// AzureFirewallFqdnTagsClient contains the methods for the AzureFirewallFqdnTags group.
// Don't use this type directly, use NewAzureFirewallFqdnTagsClient() instead.
type AzureFirewallFqdnTagsClient = original.AzureFirewallFqdnTagsClient

// AzureFirewallFqdnTagsListAllOptions contains the optional parameters for the AzureFirewallFqdnTags.ListAll method.
type AzureFirewallFqdnTagsListAllOptions = original.AzureFirewallFqdnTagsListAllOptions

// IP configuration of an Azure Firewall.
type AzureFirewallIPConfiguration = original.AzureFirewallIPConfiguration

// Properties of IP configuration of an Azure Firewall.
type AzureFirewallIPConfigurationPropertiesFormat = original.AzureFirewallIPConfigurationPropertiesFormat

// IpGroups associated with azure firewall.
type AzureFirewallIPGroups = original.AzureFirewallIPGroups

// Response for ListAzureFirewalls API service call.
type AzureFirewallListResult = original.AzureFirewallListResult

// AzureFirewallListResultPager provides iteration over AzureFirewallListResult pages.
type AzureFirewallListResultPager = original.AzureFirewallListResultPager

// AzureFirewallListResultResponse is the response envelope for operations that return a AzureFirewallListResult type.
type AzureFirewallListResultResponse = original.AzureFirewallListResultResponse

// AzureFirewall NAT Rule Collection Action.
type AzureFirewallNatRcAction = original.AzureFirewallNatRcAction

// Properties of a NAT rule.
type AzureFirewallNatRule = original.AzureFirewallNatRule

// NAT rule collection resource.
type AzureFirewallNatRuleCollection = original.AzureFirewallNatRuleCollection

// Properties of the NAT rule collection.
type AzureFirewallNatRuleCollectionProperties = original.AzureFirewallNatRuleCollectionProperties

// Properties of the network rule.
type AzureFirewallNetworkRule = original.AzureFirewallNetworkRule

// Network rule collection resource.
type AzureFirewallNetworkRuleCollection = original.AzureFirewallNetworkRuleCollection

// Properties of the network rule collection.
type AzureFirewallNetworkRuleCollectionPropertiesFormat = original.AzureFirewallNetworkRuleCollectionPropertiesFormat

// AzureFirewallPoller provides polling facilities until the operation completes
type AzureFirewallPoller = original.AzureFirewallPoller

// AzureFirewallPollerResponse is the response envelope for operations that asynchronously return a AzureFirewall type.
type AzureFirewallPollerResponse = original.AzureFirewallPollerResponse

// Properties of the Azure Firewall.
type AzureFirewallPropertiesFormat = original.AzureFirewallPropertiesFormat

// Public IP Address associated with azure firewall.
type AzureFirewallPublicIPAddress = original.AzureFirewallPublicIPAddress

// Properties of the AzureFirewallRCAction.
type AzureFirewallRcAction = original.AzureFirewallRcAction

// AzureFirewallResponse is the response envelope for operations that return a AzureFirewall type.
type AzureFirewallResponse = original.AzureFirewallResponse

// SKU of an Azure Firewall.
type AzureFirewallSKU = original.AzureFirewallSKU

// AzureFirewallsBeginCreateOrUpdateOptions contains the optional parameters for the AzureFirewalls.BeginCreateOrUpdate method.
type AzureFirewallsBeginCreateOrUpdateOptions = original.AzureFirewallsBeginCreateOrUpdateOptions

// AzureFirewallsBeginDeleteOptions contains the optional parameters for the AzureFirewalls.BeginDelete method.
type AzureFirewallsBeginDeleteOptions = original.AzureFirewallsBeginDeleteOptions

// AzureFirewallsBeginUpdateTagsOptions contains the optional parameters for the AzureFirewalls.BeginUpdateTags method.
type AzureFirewallsBeginUpdateTagsOptions = original.AzureFirewallsBeginUpdateTagsOptions

// AzureFirewallsClient contains the methods for the AzureFirewalls group.
// Don't use this type directly, use NewAzureFirewallsClient() instead.
type AzureFirewallsClient = original.AzureFirewallsClient

// AzureFirewallsGetOptions contains the optional parameters for the AzureFirewalls.Get method.
type AzureFirewallsGetOptions = original.AzureFirewallsGetOptions

// AzureFirewallsListAllOptions contains the optional parameters for the AzureFirewalls.ListAll method.
type AzureFirewallsListAllOptions = original.AzureFirewallsListAllOptions

// AzureFirewallsListOptions contains the optional parameters for the AzureFirewalls.List method.
type AzureFirewallsListOptions = original.AzureFirewallsListOptions

// Azure reachability report details.
type AzureReachabilityReport = original.AzureReachabilityReport

// Azure reachability report details for a given provider location.
type AzureReachabilityReportItem = original.AzureReachabilityReportItem

// Details on latency for a time series.
type AzureReachabilityReportLatencyInfo = original.AzureReachabilityReportLatencyInfo

// Parameters that define a geographic location.
type AzureReachabilityReportLocation = original.AzureReachabilityReportLocation

// Geographic and time constraints for Azure reachability report.
type AzureReachabilityReportParameters = original.AzureReachabilityReportParameters

// AzureReachabilityReportPoller provides polling facilities until the operation completes
type AzureReachabilityReportPoller = original.AzureReachabilityReportPoller

// AzureReachabilityReportPollerResponse is the response envelope for operations that asynchronously return a AzureReachabilityReport type.
type AzureReachabilityReportPollerResponse = original.AzureReachabilityReportPollerResponse

// AzureReachabilityReportResponse is the response envelope for operations that return a AzureReachabilityReport type.
type AzureReachabilityReportResponse = original.AzureReachabilityReportResponse

// Azure Web Category Resource.
type AzureWebCategory = original.AzureWebCategory

// Response for ListAzureWebCategories API service call.
type AzureWebCategoryListResult = original.AzureWebCategoryListResult

// AzureWebCategoryListResultPager provides iteration over AzureWebCategoryListResult pages.
type AzureWebCategoryListResultPager = original.AzureWebCategoryListResultPager

// AzureWebCategoryListResultResponse is the response envelope for operations that return a AzureWebCategoryListResult type.
type AzureWebCategoryListResultResponse = original.AzureWebCategoryListResultResponse

// Azure Web Category Properties.
type AzureWebCategoryPropertiesFormat = original.AzureWebCategoryPropertiesFormat

// AzureWebCategoryResponse is the response envelope for operations that return a AzureWebCategory type.
type AzureWebCategoryResponse = original.AzureWebCategoryResponse

// Pool of backend IP addresses.
type BackendAddressPool = original.BackendAddressPool

// BackendAddressPoolPoller provides polling facilities until the operation completes
type BackendAddressPoolPoller = original.BackendAddressPoolPoller

// BackendAddressPoolPollerResponse is the response envelope for operations that asynchronously return a BackendAddressPool type.
type BackendAddressPoolPollerResponse = original.BackendAddressPoolPollerResponse

// Properties of the backend address pool.
type BackendAddressPoolPropertiesFormat = original.BackendAddressPoolPropertiesFormat

// BackendAddressPoolResponse is the response envelope for operations that return a BackendAddressPool type.
type BackendAddressPoolResponse = original.BackendAddressPoolResponse

// The session detail for a target.
type BastionActiveSession = original.BastionActiveSession

// Response for GetActiveSessions.
type BastionActiveSessionListResult = original.BastionActiveSessionListResult

// BastionActiveSessionListResultPager provides iteration over BastionActiveSessionListResult pages.
type BastionActiveSessionListResultPager = original.BastionActiveSessionListResultPager

// BastionActiveSessionListResultPagerPoller provides polling facilities until the operation completes
type BastionActiveSessionListResultPagerPoller = original.BastionActiveSessionListResultPagerPoller

// BastionActiveSessionListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionActiveSessionListResultPager
// type.
type BastionActiveSessionListResultPagerPollerResponse = original.BastionActiveSessionListResultPagerPollerResponse

// BastionActiveSessionListResultResponse is the response envelope for operations that return a BastionActiveSessionListResult type.
type BastionActiveSessionListResultResponse = original.BastionActiveSessionListResultResponse

// Bastion Host resource.
type BastionHost = original.BastionHost

// IP configuration of an Bastion Host.
type BastionHostIPConfiguration = original.BastionHostIPConfiguration

// Properties of IP configuration of an Bastion Host.
type BastionHostIPConfigurationPropertiesFormat = original.BastionHostIPConfigurationPropertiesFormat

// Response for ListBastionHosts API service call.
type BastionHostListResult = original.BastionHostListResult

// BastionHostListResultPager provides iteration over BastionHostListResult pages.
type BastionHostListResultPager = original.BastionHostListResultPager

// BastionHostListResultResponse is the response envelope for operations that return a BastionHostListResult type.
type BastionHostListResultResponse = original.BastionHostListResultResponse

// BastionHostPoller provides polling facilities until the operation completes
type BastionHostPoller = original.BastionHostPoller

// BastionHostPollerResponse is the response envelope for operations that asynchronously return a BastionHost type.
type BastionHostPollerResponse = original.BastionHostPollerResponse

// Properties of the Bastion Host.
type BastionHostPropertiesFormat = original.BastionHostPropertiesFormat

// BastionHostResponse is the response envelope for operations that return a BastionHost type.
type BastionHostResponse = original.BastionHostResponse

// BastionHostsBeginCreateOrUpdateOptions contains the optional parameters for the BastionHosts.BeginCreateOrUpdate method.
type BastionHostsBeginCreateOrUpdateOptions = original.BastionHostsBeginCreateOrUpdateOptions

// BastionHostsBeginDeleteOptions contains the optional parameters for the BastionHosts.BeginDelete method.
type BastionHostsBeginDeleteOptions = original.BastionHostsBeginDeleteOptions

// BastionHostsClient contains the methods for the BastionHosts group.
// Don't use this type directly, use NewBastionHostsClient() instead.
type BastionHostsClient = original.BastionHostsClient

// BastionHostsGetOptions contains the optional parameters for the BastionHosts.Get method.
type BastionHostsGetOptions = original.BastionHostsGetOptions

// BastionHostsListByResourceGroupOptions contains the optional parameters for the BastionHosts.ListByResourceGroup method.
type BastionHostsListByResourceGroupOptions = original.BastionHostsListByResourceGroupOptions

// BastionHostsListOptions contains the optional parameters for the BastionHosts.List method.
type BastionHostsListOptions = original.BastionHostsListOptions

// Response for DisconnectActiveSessions.
type BastionSessionDeleteResult = original.BastionSessionDeleteResult

// BastionSessionDeleteResultPager provides iteration over BastionSessionDeleteResult pages.
type BastionSessionDeleteResultPager = original.BastionSessionDeleteResultPager

// BastionSessionDeleteResultResponse is the response envelope for operations that return a BastionSessionDeleteResult type.
type BastionSessionDeleteResultResponse = original.BastionSessionDeleteResultResponse

// The session state detail for a target.
type BastionSessionState = original.BastionSessionState

// Bastion Shareable Link.
type BastionShareableLink = original.BastionShareableLink

// Post request for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListRequest = original.BastionShareableLinkListRequest

// Response for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListResult = original.BastionShareableLinkListResult

// BastionShareableLinkListResultPager provides iteration over BastionShareableLinkListResult pages.
type BastionShareableLinkListResultPager = original.BastionShareableLinkListResultPager

// BastionShareableLinkListResultPagerPoller provides polling facilities until the operation completes
type BastionShareableLinkListResultPagerPoller = original.BastionShareableLinkListResultPagerPoller

// BastionShareableLinkListResultPagerPollerResponse is the response envelope for operations that asynchronously return a BastionShareableLinkListResultPager
// type.
type BastionShareableLinkListResultPagerPollerResponse = original.BastionShareableLinkListResultPagerPollerResponse

// BastionShareableLinkListResultResponse is the response envelope for operations that return a BastionShareableLinkListResult type.
type BastionShareableLinkListResultResponse = original.BastionShareableLinkListResultResponse

// Contains bgp community information offered in Service Community resources.
type BgpCommunity = original.BgpCommunity

// Virtual Appliance Site resource.
type BgpConnection = original.BgpConnection

// BgpConnectionPoller provides polling facilities until the operation completes
type BgpConnectionPoller = original.BgpConnectionPoller

// BgpConnectionPollerResponse is the response envelope for operations that asynchronously return a BgpConnection type.
type BgpConnectionPollerResponse = original.BgpConnectionPollerResponse

// Properties of the bgp connection.
type BgpConnectionProperties = original.BgpConnectionProperties

// BgpConnectionResponse is the response envelope for operations that return a BgpConnection type.
type BgpConnectionResponse = original.BgpConnectionResponse

// BGP peer status details.
type BgpPeerStatus = original.BgpPeerStatus

// Response for list BGP peer status API service call.
type BgpPeerStatusListResult = original.BgpPeerStatusListResult

// BgpPeerStatusListResultPoller provides polling facilities until the operation completes
type BgpPeerStatusListResultPoller = original.BgpPeerStatusListResultPoller

// BgpPeerStatusListResultPollerResponse is the response envelope for operations that asynchronously return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultPollerResponse = original.BgpPeerStatusListResultPollerResponse

// BgpPeerStatusListResultResponse is the response envelope for operations that return a BgpPeerStatusListResult type.
type BgpPeerStatusListResultResponse = original.BgpPeerStatusListResultResponse

// BgpServiceCommunitiesClient contains the methods for the BgpServiceCommunities group.
// Don't use this type directly, use NewBgpServiceCommunitiesClient() instead.
type BgpServiceCommunitiesClient = original.BgpServiceCommunitiesClient

// BgpServiceCommunitiesListOptions contains the optional parameters for the BgpServiceCommunities.List method.
type BgpServiceCommunitiesListOptions = original.BgpServiceCommunitiesListOptions

// Service Community Properties.
type BgpServiceCommunity = original.BgpServiceCommunity

// Response for the ListServiceCommunity API service call.
type BgpServiceCommunityListResult = original.BgpServiceCommunityListResult

// BgpServiceCommunityListResultPager provides iteration over BgpServiceCommunityListResult pages.
type BgpServiceCommunityListResultPager = original.BgpServiceCommunityListResultPager

// BgpServiceCommunityListResultResponse is the response envelope for operations that return a BgpServiceCommunityListResult type.
type BgpServiceCommunityListResultResponse = original.BgpServiceCommunityListResultResponse

// Properties of Service Community.
type BgpServiceCommunityPropertiesFormat = original.BgpServiceCommunityPropertiesFormat

// BGP settings details.
type BgpSettings = original.BgpSettings

// Network Virtual Appliance Sku Properties.
type BreakOutCategoryPolicies = original.BreakOutCategoryPolicies

// Request body of the CheckPrivateLinkServiceVisibility API service call.
type CheckPrivateLinkServiceVisibilityRequest = original.CheckPrivateLinkServiceVisibilityRequest

// An error response from the service.
type CloudError = original.CloudError

// An error response from the service.
type CloudErrorBody = original.CloudErrorBody
type Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties = original.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties

// Parameters that define the operation to create a connection monitor.
type ConnectionMonitor = original.ConnectionMonitor

// Describes the destination of connection monitor.
type ConnectionMonitorDestination = original.ConnectionMonitorDestination

// Describes the connection monitor endpoint.
type ConnectionMonitorEndpoint = original.ConnectionMonitorEndpoint

// Describes the connection monitor endpoint filter.
type ConnectionMonitorEndpointFilter = original.ConnectionMonitorEndpointFilter

// Describes the connection monitor endpoint filter item.
type ConnectionMonitorEndpointFilterItem = original.ConnectionMonitorEndpointFilterItem

// Describes the connection monitor endpoint scope.
type ConnectionMonitorEndpointScope = original.ConnectionMonitorEndpointScope

// Describes the connection monitor endpoint scope item.
type ConnectionMonitorEndpointScopeItem = original.ConnectionMonitorEndpointScopeItem

// Describes the HTTP configuration.
type ConnectionMonitorHTTPConfiguration = original.ConnectionMonitorHTTPConfiguration

// Describes the ICMP configuration.
type ConnectionMonitorIcmpConfiguration = original.ConnectionMonitorIcmpConfiguration

// List of connection monitors.
type ConnectionMonitorListResult = original.ConnectionMonitorListResult

// ConnectionMonitorListResultResponse is the response envelope for operations that return a ConnectionMonitorListResult type.
type ConnectionMonitorListResultResponse = original.ConnectionMonitorListResultResponse

// Describes a connection monitor output destination.
type ConnectionMonitorOutput = original.ConnectionMonitorOutput

// Parameters that define the operation to create a connection monitor.
type ConnectionMonitorParameters = original.ConnectionMonitorParameters

// List of connection states snapshots.
type ConnectionMonitorQueryResult = original.ConnectionMonitorQueryResult

// ConnectionMonitorQueryResultPoller provides polling facilities until the operation completes
type ConnectionMonitorQueryResultPoller = original.ConnectionMonitorQueryResultPoller

// ConnectionMonitorQueryResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultPollerResponse = original.ConnectionMonitorQueryResultPollerResponse

// ConnectionMonitorQueryResultResponse is the response envelope for operations that return a ConnectionMonitorQueryResult type.
type ConnectionMonitorQueryResultResponse = original.ConnectionMonitorQueryResultResponse

// Information about the connection monitor.
type ConnectionMonitorResult = original.ConnectionMonitorResult

// ConnectionMonitorResultPoller provides polling facilities until the operation completes
type ConnectionMonitorResultPoller = original.ConnectionMonitorResultPoller

// ConnectionMonitorResultPollerResponse is the response envelope for operations that asynchronously return a ConnectionMonitorResult type.
type ConnectionMonitorResultPollerResponse = original.ConnectionMonitorResultPollerResponse

// Describes the properties of a connection monitor.
type ConnectionMonitorResultProperties = original.ConnectionMonitorResultProperties

// ConnectionMonitorResultResponse is the response envelope for operations that return a ConnectionMonitorResult type.
type ConnectionMonitorResultResponse = original.ConnectionMonitorResultResponse

// Describes the source of connection monitor.
type ConnectionMonitorSource = original.ConnectionMonitorSource

// Describes the threshold for declaring a test successful.
type ConnectionMonitorSuccessThreshold = original.ConnectionMonitorSuccessThreshold

// Describes the TCP configuration.
type ConnectionMonitorTCPConfiguration = original.ConnectionMonitorTCPConfiguration

// Describes a connection monitor test configuration.
type ConnectionMonitorTestConfiguration = original.ConnectionMonitorTestConfiguration

// Describes the connection monitor test group.
type ConnectionMonitorTestGroup = original.ConnectionMonitorTestGroup

// Describes the settings for producing output into a log analytics workspace.
type ConnectionMonitorWorkspaceSettings = original.ConnectionMonitorWorkspaceSettings

// ConnectionMonitorsBeginCreateOrUpdateOptions contains the optional parameters for the ConnectionMonitors.BeginCreateOrUpdate method.
type ConnectionMonitorsBeginCreateOrUpdateOptions = original.ConnectionMonitorsBeginCreateOrUpdateOptions

// ConnectionMonitorsBeginDeleteOptions contains the optional parameters for the ConnectionMonitors.BeginDelete method.
type ConnectionMonitorsBeginDeleteOptions = original.ConnectionMonitorsBeginDeleteOptions

// ConnectionMonitorsBeginQueryOptions contains the optional parameters for the ConnectionMonitors.BeginQuery method.
type ConnectionMonitorsBeginQueryOptions = original.ConnectionMonitorsBeginQueryOptions

// ConnectionMonitorsBeginStartOptions contains the optional parameters for the ConnectionMonitors.BeginStart method.
type ConnectionMonitorsBeginStartOptions = original.ConnectionMonitorsBeginStartOptions

// ConnectionMonitorsBeginStopOptions contains the optional parameters for the ConnectionMonitors.BeginStop method.
type ConnectionMonitorsBeginStopOptions = original.ConnectionMonitorsBeginStopOptions

// ConnectionMonitorsClient contains the methods for the ConnectionMonitors group.
// Don't use this type directly, use NewConnectionMonitorsClient() instead.
type ConnectionMonitorsClient = original.ConnectionMonitorsClient

// ConnectionMonitorsGetOptions contains the optional parameters for the ConnectionMonitors.Get method.
type ConnectionMonitorsGetOptions = original.ConnectionMonitorsGetOptions

// ConnectionMonitorsListOptions contains the optional parameters for the ConnectionMonitors.List method.
type ConnectionMonitorsListOptions = original.ConnectionMonitorsListOptions

// ConnectionMonitorsUpdateTagsOptions contains the optional parameters for the ConnectionMonitors.UpdateTags method.
type ConnectionMonitorsUpdateTagsOptions = original.ConnectionMonitorsUpdateTagsOptions

// The virtual network connection reset shared key.
type ConnectionResetSharedKey = original.ConnectionResetSharedKey

// ConnectionResetSharedKeyPoller provides polling facilities until the operation completes
type ConnectionResetSharedKeyPoller = original.ConnectionResetSharedKeyPoller

// ConnectionResetSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyPollerResponse = original.ConnectionResetSharedKeyPollerResponse

// ConnectionResetSharedKeyResponse is the response envelope for operations that return a ConnectionResetSharedKey type.
type ConnectionResetSharedKeyResponse = original.ConnectionResetSharedKeyResponse

// Response for GetConnectionSharedKey API service call.
type ConnectionSharedKey = original.ConnectionSharedKey

// ConnectionSharedKeyPoller provides polling facilities until the operation completes
type ConnectionSharedKeyPoller = original.ConnectionSharedKeyPoller

// ConnectionSharedKeyPollerResponse is the response envelope for operations that asynchronously return a ConnectionSharedKey type.
type ConnectionSharedKeyPollerResponse = original.ConnectionSharedKeyPollerResponse

// ConnectionSharedKeyResponse is the response envelope for operations that return a ConnectionSharedKey type.
type ConnectionSharedKeyResponse = original.ConnectionSharedKeyResponse

// Connection state snapshot.
type ConnectionStateSnapshot = original.ConnectionStateSnapshot

// Parameters that define destination of connection.
type ConnectivityDestination = original.ConnectivityDestination

// Information about a hop between the source and the destination.
type ConnectivityHop = original.ConnectivityHop

// Information on the connectivity status.
type ConnectivityInformation = original.ConnectivityInformation

// ConnectivityInformationPoller provides polling facilities until the operation completes
type ConnectivityInformationPoller = original.ConnectivityInformationPoller

// ConnectivityInformationPollerResponse is the response envelope for operations that asynchronously return a ConnectivityInformation type.
type ConnectivityInformationPollerResponse = original.ConnectivityInformationPollerResponse

// ConnectivityInformationResponse is the response envelope for operations that return a ConnectivityInformation type.
type ConnectivityInformationResponse = original.ConnectivityInformationResponse

// Information about an issue encountered in the process of checking for connectivity.
type ConnectivityIssue = original.ConnectivityIssue

// Parameters that determine how the connectivity check will be performed.
type ConnectivityParameters = original.ConnectivityParameters

// Parameters that define the source of the connection.
type ConnectivitySource = original.ConnectivitySource

// Reference to container resource in remote resource provider.
type Container = original.Container

// Container network interface child resource.
type ContainerNetworkInterface = original.ContainerNetworkInterface

// Container network interface configuration child resource.
type ContainerNetworkInterfaceConfiguration = original.ContainerNetworkInterfaceConfiguration

// Container network interface configuration properties.
type ContainerNetworkInterfaceConfigurationPropertiesFormat = original.ContainerNetworkInterfaceConfigurationPropertiesFormat

// The ip configuration for a container network interface.
type ContainerNetworkInterfaceIPConfiguration = original.ContainerNetworkInterfaceIPConfiguration

// Properties of the container network interface IP configuration.
type ContainerNetworkInterfaceIPConfigurationPropertiesFormat = original.ContainerNetworkInterfaceIPConfigurationPropertiesFormat

// Properties of container network interface.
type ContainerNetworkInterfacePropertiesFormat = original.ContainerNetworkInterfacePropertiesFormat

// Contains custom Dns resolution configuration from customer.
type CustomDNSConfigPropertiesFormat = original.CustomDNSConfigPropertiesFormat

// Custom IP prefix resource.
type CustomIPPrefix = original.CustomIPPrefix

// Response for ListCustomIpPrefixes API service call.
type CustomIPPrefixListResult = original.CustomIPPrefixListResult

// CustomIPPrefixListResultPager provides iteration over CustomIPPrefixListResult pages.
type CustomIPPrefixListResultPager = original.CustomIPPrefixListResultPager

// CustomIPPrefixListResultResponse is the response envelope for operations that return a CustomIPPrefixListResult type.
type CustomIPPrefixListResultResponse = original.CustomIPPrefixListResultResponse

// CustomIPPrefixPoller provides polling facilities until the operation completes
type CustomIPPrefixPoller = original.CustomIPPrefixPoller

// CustomIPPrefixPollerResponse is the response envelope for operations that asynchronously return a CustomIPPrefix type.
type CustomIPPrefixPollerResponse = original.CustomIPPrefixPollerResponse

// Custom IP prefix properties.
type CustomIPPrefixPropertiesFormat = original.CustomIPPrefixPropertiesFormat

// CustomIPPrefixResponse is the response envelope for operations that return a CustomIPPrefix type.
type CustomIPPrefixResponse = original.CustomIPPrefixResponse

// CustomIPPrefixesBeginCreateOrUpdateOptions contains the optional parameters for the CustomIPPrefixes.BeginCreateOrUpdate method.
type CustomIPPrefixesBeginCreateOrUpdateOptions = original.CustomIPPrefixesBeginCreateOrUpdateOptions

// CustomIPPrefixesBeginDeleteOptions contains the optional parameters for the CustomIPPrefixes.BeginDelete method.
type CustomIPPrefixesBeginDeleteOptions = original.CustomIPPrefixesBeginDeleteOptions

// CustomIPPrefixesClient contains the methods for the CustomIPPrefixes group.
// Don't use this type directly, use NewCustomIPPrefixesClient() instead.
type CustomIPPrefixesClient = original.CustomIPPrefixesClient

// CustomIPPrefixesGetOptions contains the optional parameters for the CustomIPPrefixes.Get method.
type CustomIPPrefixesGetOptions = original.CustomIPPrefixesGetOptions

// CustomIPPrefixesListAllOptions contains the optional parameters for the CustomIPPrefixes.ListAll method.
type CustomIPPrefixesListAllOptions = original.CustomIPPrefixesListAllOptions

// CustomIPPrefixesListOptions contains the optional parameters for the CustomIPPrefixes.List method.
type CustomIPPrefixesListOptions = original.CustomIPPrefixesListOptions

// CustomIPPrefixesUpdateTagsOptions contains the optional parameters for the CustomIPPrefixes.UpdateTags method.
type CustomIPPrefixesUpdateTagsOptions = original.CustomIPPrefixesUpdateTagsOptions

// Response for the CheckDnsNameAvailability API service call.
type DNSNameAvailabilityResult = original.DNSNameAvailabilityResult

// DNSNameAvailabilityResultResponse is the response envelope for operations that return a DNSNameAvailabilityResult type.
type DNSNameAvailabilityResultResponse = original.DNSNameAvailabilityResultResponse

// DNS Proxy Settings in Firewall Policy.
type DNSSettings = original.DNSSettings

// DdosCustomPoliciesBeginCreateOrUpdateOptions contains the optional parameters for the DdosCustomPolicies.BeginCreateOrUpdate method.
type DdosCustomPoliciesBeginCreateOrUpdateOptions = original.DdosCustomPoliciesBeginCreateOrUpdateOptions

// DdosCustomPoliciesBeginDeleteOptions contains the optional parameters for the DdosCustomPolicies.BeginDelete method.
type DdosCustomPoliciesBeginDeleteOptions = original.DdosCustomPoliciesBeginDeleteOptions

// DdosCustomPoliciesClient contains the methods for the DdosCustomPolicies group.
// Don't use this type directly, use NewDdosCustomPoliciesClient() instead.
type DdosCustomPoliciesClient = original.DdosCustomPoliciesClient

// DdosCustomPoliciesGetOptions contains the optional parameters for the DdosCustomPolicies.Get method.
type DdosCustomPoliciesGetOptions = original.DdosCustomPoliciesGetOptions

// DdosCustomPoliciesUpdateTagsOptions contains the optional parameters for the DdosCustomPolicies.UpdateTags method.
type DdosCustomPoliciesUpdateTagsOptions = original.DdosCustomPoliciesUpdateTagsOptions

// A DDoS custom policy in a resource group.
type DdosCustomPolicy = original.DdosCustomPolicy

// DdosCustomPolicyPoller provides polling facilities until the operation completes
type DdosCustomPolicyPoller = original.DdosCustomPolicyPoller

// DdosCustomPolicyPollerResponse is the response envelope for operations that asynchronously return a DdosCustomPolicy type.
type DdosCustomPolicyPollerResponse = original.DdosCustomPolicyPollerResponse

// DDoS custom policy properties.
type DdosCustomPolicyPropertiesFormat = original.DdosCustomPolicyPropertiesFormat

// DdosCustomPolicyResponse is the response envelope for operations that return a DdosCustomPolicy type.
type DdosCustomPolicyResponse = original.DdosCustomPolicyResponse

// A DDoS protection plan in a resource group.
type DdosProtectionPlan = original.DdosProtectionPlan

// A list of DDoS protection plans.
type DdosProtectionPlanListResult = original.DdosProtectionPlanListResult

// DdosProtectionPlanListResultPager provides iteration over DdosProtectionPlanListResult pages.
type DdosProtectionPlanListResultPager = original.DdosProtectionPlanListResultPager

// DdosProtectionPlanListResultResponse is the response envelope for operations that return a DdosProtectionPlanListResult type.
type DdosProtectionPlanListResultResponse = original.DdosProtectionPlanListResultResponse

// DdosProtectionPlanPoller provides polling facilities until the operation completes
type DdosProtectionPlanPoller = original.DdosProtectionPlanPoller

// DdosProtectionPlanPollerResponse is the response envelope for operations that asynchronously return a DdosProtectionPlan type.
type DdosProtectionPlanPollerResponse = original.DdosProtectionPlanPollerResponse

// DDoS protection plan properties.
type DdosProtectionPlanPropertiesFormat = original.DdosProtectionPlanPropertiesFormat

// DdosProtectionPlanResponse is the response envelope for operations that return a DdosProtectionPlan type.
type DdosProtectionPlanResponse = original.DdosProtectionPlanResponse

// DdosProtectionPlansBeginCreateOrUpdateOptions contains the optional parameters for the DdosProtectionPlans.BeginCreateOrUpdate method.
type DdosProtectionPlansBeginCreateOrUpdateOptions = original.DdosProtectionPlansBeginCreateOrUpdateOptions

// DdosProtectionPlansBeginDeleteOptions contains the optional parameters for the DdosProtectionPlans.BeginDelete method.
type DdosProtectionPlansBeginDeleteOptions = original.DdosProtectionPlansBeginDeleteOptions

// DdosProtectionPlansClient contains the methods for the DdosProtectionPlans group.
// Don't use this type directly, use NewDdosProtectionPlansClient() instead.
type DdosProtectionPlansClient = original.DdosProtectionPlansClient

// DdosProtectionPlansGetOptions contains the optional parameters for the DdosProtectionPlans.Get method.
type DdosProtectionPlansGetOptions = original.DdosProtectionPlansGetOptions

// DdosProtectionPlansListByResourceGroupOptions contains the optional parameters for the DdosProtectionPlans.ListByResourceGroup method.
type DdosProtectionPlansListByResourceGroupOptions = original.DdosProtectionPlansListByResourceGroupOptions

// DdosProtectionPlansListOptions contains the optional parameters for the DdosProtectionPlans.List method.
type DdosProtectionPlansListOptions = original.DdosProtectionPlansListOptions

// DdosProtectionPlansUpdateTagsOptions contains the optional parameters for the DdosProtectionPlans.UpdateTags method.
type DdosProtectionPlansUpdateTagsOptions = original.DdosProtectionPlansUpdateTagsOptions

// Contains the DDoS protection settings of the public IP.
type DdosSettings = original.DdosSettings

// DefaultSecurityRulesClient contains the methods for the DefaultSecurityRules group.
// Don't use this type directly, use NewDefaultSecurityRulesClient() instead.
type DefaultSecurityRulesClient = original.DefaultSecurityRulesClient

// DefaultSecurityRulesGetOptions contains the optional parameters for the DefaultSecurityRules.Get method.
type DefaultSecurityRulesGetOptions = original.DefaultSecurityRulesGetOptions

// DefaultSecurityRulesListOptions contains the optional parameters for the DefaultSecurityRules.List method.
type DefaultSecurityRulesListOptions = original.DefaultSecurityRulesListOptions

// Details the service to which the subnet is delegated.
type Delegation = original.Delegation

// List of properties of the device.
type DeviceProperties = original.DeviceProperties

// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP
// options.
type DhcpOptions = original.DhcpOptions

// Dimension of the metric.
type Dimension = original.Dimension

// DSCP Configuration in a resource group.
type DscpConfiguration = original.DscpConfiguration

// DscpConfigurationBeginCreateOrUpdateOptions contains the optional parameters for the DscpConfiguration.BeginCreateOrUpdate method.
type DscpConfigurationBeginCreateOrUpdateOptions = original.DscpConfigurationBeginCreateOrUpdateOptions

// DscpConfigurationBeginDeleteOptions contains the optional parameters for the DscpConfiguration.BeginDelete method.
type DscpConfigurationBeginDeleteOptions = original.DscpConfigurationBeginDeleteOptions

// DscpConfigurationClient contains the methods for the DscpConfiguration group.
// Don't use this type directly, use NewDscpConfigurationClient() instead.
type DscpConfigurationClient = original.DscpConfigurationClient

// DscpConfigurationGetOptions contains the optional parameters for the DscpConfiguration.Get method.
type DscpConfigurationGetOptions = original.DscpConfigurationGetOptions

// DscpConfigurationListAllOptions contains the optional parameters for the DscpConfiguration.ListAll method.
type DscpConfigurationListAllOptions = original.DscpConfigurationListAllOptions

// DscpConfigurationListOptions contains the optional parameters for the DscpConfiguration.List method.
type DscpConfigurationListOptions = original.DscpConfigurationListOptions

// Response for the DscpConfigurationList API service call.
type DscpConfigurationListResult = original.DscpConfigurationListResult

// DscpConfigurationListResultPager provides iteration over DscpConfigurationListResult pages.
type DscpConfigurationListResultPager = original.DscpConfigurationListResultPager

// DscpConfigurationListResultResponse is the response envelope for operations that return a DscpConfigurationListResult type.
type DscpConfigurationListResultResponse = original.DscpConfigurationListResultResponse

// DscpConfigurationPoller provides polling facilities until the operation completes
type DscpConfigurationPoller = original.DscpConfigurationPoller

// DscpConfigurationPollerResponse is the response envelope for operations that asynchronously return a DscpConfiguration type.
type DscpConfigurationPollerResponse = original.DscpConfigurationPollerResponse

// DSCP Configuration properties.
type DscpConfigurationPropertiesFormat = original.DscpConfigurationPropertiesFormat

// DscpConfigurationResponse is the response envelope for operations that return a DscpConfiguration type.
type DscpConfigurationResponse = original.DscpConfigurationResponse

// Effective network security group.
type EffectiveNetworkSecurityGroup = original.EffectiveNetworkSecurityGroup

// The effective network security group association.
type EffectiveNetworkSecurityGroupAssociation = original.EffectiveNetworkSecurityGroupAssociation

// Response for list effective network security groups API service call.
type EffectiveNetworkSecurityGroupListResult = original.EffectiveNetworkSecurityGroupListResult

// EffectiveNetworkSecurityGroupListResultPoller provides polling facilities until the operation completes
type EffectiveNetworkSecurityGroupListResultPoller = original.EffectiveNetworkSecurityGroupListResultPoller

// EffectiveNetworkSecurityGroupListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveNetworkSecurityGroupListResult
// type.
type EffectiveNetworkSecurityGroupListResultPollerResponse = original.EffectiveNetworkSecurityGroupListResultPollerResponse

// EffectiveNetworkSecurityGroupListResultResponse is the response envelope for operations that return a EffectiveNetworkSecurityGroupListResult type.
type EffectiveNetworkSecurityGroupListResultResponse = original.EffectiveNetworkSecurityGroupListResultResponse

// Effective network security rules.
type EffectiveNetworkSecurityRule = original.EffectiveNetworkSecurityRule

// Effective Route.
type EffectiveRoute = original.EffectiveRoute

// Response for list effective route API service call.
type EffectiveRouteListResult = original.EffectiveRouteListResult

// EffectiveRouteListResultPoller provides polling facilities until the operation completes
type EffectiveRouteListResultPoller = original.EffectiveRouteListResultPoller

// EffectiveRouteListResultPollerResponse is the response envelope for operations that asynchronously return a EffectiveRouteListResult type.
type EffectiveRouteListResultPollerResponse = original.EffectiveRouteListResultPollerResponse

// EffectiveRouteListResultResponse is the response envelope for operations that return a EffectiveRouteListResult type.
type EffectiveRouteListResultResponse = original.EffectiveRouteListResultResponse

// The parameters specifying the resource whose effective routes are being requested.
type EffectiveRoutesParameters = original.EffectiveRoutesParameters

// Endpoint service.
type EndpointServiceResult = original.EndpointServiceResult

// Response for the ListAvailableEndpointServices API service call.
type EndpointServicesListResult = original.EndpointServicesListResult

// EndpointServicesListResultPager provides iteration over EndpointServicesListResult pages.
type EndpointServicesListResultPager = original.EndpointServicesListResultPager

// EndpointServicesListResultResponse is the response envelope for operations that return a EndpointServicesListResult type.
type EndpointServicesListResultResponse = original.EndpointServicesListResultResponse

// Common error representation.
type Error = original.Error

// Common error details representation.
type ErrorDetails = original.ErrorDetails

// The error object.
type ErrorResponse = original.ErrorResponse

// Results of network security group evaluation.
type EvaluatedNetworkSecurityGroup = original.EvaluatedNetworkSecurityGroup

// ExpressRouteCircuit resource.
type ExpressRouteCircuit = original.ExpressRouteCircuit

// The ARP table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitArpTable = original.ExpressRouteCircuitArpTable

// Authorization in an ExpressRouteCircuit resource.
type ExpressRouteCircuitAuthorization = original.ExpressRouteCircuitAuthorization

// ExpressRouteCircuitAuthorizationPoller provides polling facilities until the operation completes
type ExpressRouteCircuitAuthorizationPoller = original.ExpressRouteCircuitAuthorizationPoller

// ExpressRouteCircuitAuthorizationPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitAuthorization
// type.
type ExpressRouteCircuitAuthorizationPollerResponse = original.ExpressRouteCircuitAuthorizationPollerResponse

// ExpressRouteCircuitAuthorizationResponse is the response envelope for operations that return a ExpressRouteCircuitAuthorization type.
type ExpressRouteCircuitAuthorizationResponse = original.ExpressRouteCircuitAuthorizationResponse

// ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.BeginCreateOrUpdate
// method.
type ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateOptions = original.ExpressRouteCircuitAuthorizationsBeginCreateOrUpdateOptions

// ExpressRouteCircuitAuthorizationsBeginDeleteOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.BeginDelete method.
type ExpressRouteCircuitAuthorizationsBeginDeleteOptions = original.ExpressRouteCircuitAuthorizationsBeginDeleteOptions

// ExpressRouteCircuitAuthorizationsClient contains the methods for the ExpressRouteCircuitAuthorizations group.
// Don't use this type directly, use NewExpressRouteCircuitAuthorizationsClient() instead.
type ExpressRouteCircuitAuthorizationsClient = original.ExpressRouteCircuitAuthorizationsClient

// ExpressRouteCircuitAuthorizationsGetOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.Get method.
type ExpressRouteCircuitAuthorizationsGetOptions = original.ExpressRouteCircuitAuthorizationsGetOptions

// ExpressRouteCircuitAuthorizationsListOptions contains the optional parameters for the ExpressRouteCircuitAuthorizations.List method.
type ExpressRouteCircuitAuthorizationsListOptions = original.ExpressRouteCircuitAuthorizationsListOptions

// Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitConnection = original.ExpressRouteCircuitConnection

// Response for ListConnections API service call retrieves all global reach connections that belongs to a Private Peering for an ExpressRouteCircuit.
type ExpressRouteCircuitConnectionListResult = original.ExpressRouteCircuitConnectionListResult

// ExpressRouteCircuitConnectionListResultPager provides iteration over ExpressRouteCircuitConnectionListResult pages.
type ExpressRouteCircuitConnectionListResultPager = original.ExpressRouteCircuitConnectionListResultPager

// ExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCircuitConnectionListResult type.
type ExpressRouteCircuitConnectionListResultResponse = original.ExpressRouteCircuitConnectionListResultResponse

// ExpressRouteCircuitConnectionPoller provides polling facilities until the operation completes
type ExpressRouteCircuitConnectionPoller = original.ExpressRouteCircuitConnectionPoller

// ExpressRouteCircuitConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionPollerResponse = original.ExpressRouteCircuitConnectionPollerResponse

// Properties of the express route circuit connection.
type ExpressRouteCircuitConnectionPropertiesFormat = original.ExpressRouteCircuitConnectionPropertiesFormat

// ExpressRouteCircuitConnectionResponse is the response envelope for operations that return a ExpressRouteCircuitConnection type.
type ExpressRouteCircuitConnectionResponse = original.ExpressRouteCircuitConnectionResponse

// ExpressRouteCircuitConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitConnections.BeginCreateOrUpdate
// method.
type ExpressRouteCircuitConnectionsBeginCreateOrUpdateOptions = original.ExpressRouteCircuitConnectionsBeginCreateOrUpdateOptions

// ExpressRouteCircuitConnectionsBeginDeleteOptions contains the optional parameters for the ExpressRouteCircuitConnections.BeginDelete method.
type ExpressRouteCircuitConnectionsBeginDeleteOptions = original.ExpressRouteCircuitConnectionsBeginDeleteOptions

// ExpressRouteCircuitConnectionsClient contains the methods for the ExpressRouteCircuitConnections group.
// Don't use this type directly, use NewExpressRouteCircuitConnectionsClient() instead.
type ExpressRouteCircuitConnectionsClient = original.ExpressRouteCircuitConnectionsClient

// ExpressRouteCircuitConnectionsGetOptions contains the optional parameters for the ExpressRouteCircuitConnections.Get method.
type ExpressRouteCircuitConnectionsGetOptions = original.ExpressRouteCircuitConnectionsGetOptions

// ExpressRouteCircuitConnectionsListOptions contains the optional parameters for the ExpressRouteCircuitConnections.List method.
type ExpressRouteCircuitConnectionsListOptions = original.ExpressRouteCircuitConnectionsListOptions

// Response for ListExpressRouteCircuit API service call.
type ExpressRouteCircuitListResult = original.ExpressRouteCircuitListResult

// ExpressRouteCircuitListResultPager provides iteration over ExpressRouteCircuitListResult pages.
type ExpressRouteCircuitListResultPager = original.ExpressRouteCircuitListResultPager

// ExpressRouteCircuitListResultResponse is the response envelope for operations that return a ExpressRouteCircuitListResult type.
type ExpressRouteCircuitListResultResponse = original.ExpressRouteCircuitListResultResponse

// Peering in an ExpressRouteCircuit resource.
type ExpressRouteCircuitPeering = original.ExpressRouteCircuitPeering

// Specifies the peering configuration.
type ExpressRouteCircuitPeeringConfig = original.ExpressRouteCircuitPeeringConfig

// ExpressRoute circuit peering identifier.
type ExpressRouteCircuitPeeringID = original.ExpressRouteCircuitPeeringID

// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.
type ExpressRouteCircuitPeeringListResult = original.ExpressRouteCircuitPeeringListResult

// ExpressRouteCircuitPeeringListResultPager provides iteration over ExpressRouteCircuitPeeringListResult pages.
type ExpressRouteCircuitPeeringListResultPager = original.ExpressRouteCircuitPeeringListResultPager

// ExpressRouteCircuitPeeringListResultResponse is the response envelope for operations that return a ExpressRouteCircuitPeeringListResult type.
type ExpressRouteCircuitPeeringListResultResponse = original.ExpressRouteCircuitPeeringListResultResponse

// ExpressRouteCircuitPeeringPoller provides polling facilities until the operation completes
type ExpressRouteCircuitPeeringPoller = original.ExpressRouteCircuitPeeringPoller

// ExpressRouteCircuitPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringPollerResponse = original.ExpressRouteCircuitPeeringPollerResponse

// Properties of the express route circuit peering.
type ExpressRouteCircuitPeeringPropertiesFormat = original.ExpressRouteCircuitPeeringPropertiesFormat

// ExpressRouteCircuitPeeringResponse is the response envelope for operations that return a ExpressRouteCircuitPeering type.
type ExpressRouteCircuitPeeringResponse = original.ExpressRouteCircuitPeeringResponse

// ExpressRouteCircuitPeeringsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuitPeerings.BeginCreateOrUpdate method.
type ExpressRouteCircuitPeeringsBeginCreateOrUpdateOptions = original.ExpressRouteCircuitPeeringsBeginCreateOrUpdateOptions

// ExpressRouteCircuitPeeringsBeginDeleteOptions contains the optional parameters for the ExpressRouteCircuitPeerings.BeginDelete method.
type ExpressRouteCircuitPeeringsBeginDeleteOptions = original.ExpressRouteCircuitPeeringsBeginDeleteOptions

// ExpressRouteCircuitPeeringsClient contains the methods for the ExpressRouteCircuitPeerings group.
// Don't use this type directly, use NewExpressRouteCircuitPeeringsClient() instead.
type ExpressRouteCircuitPeeringsClient = original.ExpressRouteCircuitPeeringsClient

// ExpressRouteCircuitPeeringsGetOptions contains the optional parameters for the ExpressRouteCircuitPeerings.Get method.
type ExpressRouteCircuitPeeringsGetOptions = original.ExpressRouteCircuitPeeringsGetOptions

// ExpressRouteCircuitPeeringsListOptions contains the optional parameters for the ExpressRouteCircuitPeerings.List method.
type ExpressRouteCircuitPeeringsListOptions = original.ExpressRouteCircuitPeeringsListOptions

// ExpressRouteCircuitPoller provides polling facilities until the operation completes
type ExpressRouteCircuitPoller = original.ExpressRouteCircuitPoller

// ExpressRouteCircuitPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuit type.
type ExpressRouteCircuitPollerResponse = original.ExpressRouteCircuitPollerResponse

// Properties of ExpressRouteCircuit.
type ExpressRouteCircuitPropertiesFormat = original.ExpressRouteCircuitPropertiesFormat

// Reference to an express route circuit.
type ExpressRouteCircuitReference = original.ExpressRouteCircuitReference

// ExpressRouteCircuitResponse is the response envelope for operations that return a ExpressRouteCircuit type.
type ExpressRouteCircuitResponse = original.ExpressRouteCircuitResponse

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTable = original.ExpressRouteCircuitRoutesTable

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTableSummary = original.ExpressRouteCircuitRoutesTableSummary

// Contains SKU in an ExpressRouteCircuit.
type ExpressRouteCircuitSKU = original.ExpressRouteCircuitSKU

// Contains ServiceProviderProperties in an ExpressRouteCircuit.
type ExpressRouteCircuitServiceProviderProperties = original.ExpressRouteCircuitServiceProviderProperties

// Contains stats associated with the peering.
type ExpressRouteCircuitStats = original.ExpressRouteCircuitStats

// ExpressRouteCircuitStatsResponse is the response envelope for operations that return a ExpressRouteCircuitStats type.
type ExpressRouteCircuitStatsResponse = original.ExpressRouteCircuitStatsResponse

// Response for ListArpTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsArpTableListResult = original.ExpressRouteCircuitsArpTableListResult

// ExpressRouteCircuitsArpTableListResultPoller provides polling facilities until the operation completes
type ExpressRouteCircuitsArpTableListResultPoller = original.ExpressRouteCircuitsArpTableListResultPoller

// ExpressRouteCircuitsArpTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsArpTableListResult
// type.
type ExpressRouteCircuitsArpTableListResultPollerResponse = original.ExpressRouteCircuitsArpTableListResultPollerResponse

// ExpressRouteCircuitsArpTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsArpTableListResult type.
type ExpressRouteCircuitsArpTableListResultResponse = original.ExpressRouteCircuitsArpTableListResultResponse

// ExpressRouteCircuitsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCircuits.BeginCreateOrUpdate method.
type ExpressRouteCircuitsBeginCreateOrUpdateOptions = original.ExpressRouteCircuitsBeginCreateOrUpdateOptions

// ExpressRouteCircuitsBeginDeleteOptions contains the optional parameters for the ExpressRouteCircuits.BeginDelete method.
type ExpressRouteCircuitsBeginDeleteOptions = original.ExpressRouteCircuitsBeginDeleteOptions

// ExpressRouteCircuitsBeginListArpTableOptions contains the optional parameters for the ExpressRouteCircuits.BeginListArpTable method.
type ExpressRouteCircuitsBeginListArpTableOptions = original.ExpressRouteCircuitsBeginListArpTableOptions

// ExpressRouteCircuitsBeginListRoutesTableOptions contains the optional parameters for the ExpressRouteCircuits.BeginListRoutesTable method.
type ExpressRouteCircuitsBeginListRoutesTableOptions = original.ExpressRouteCircuitsBeginListRoutesTableOptions

// ExpressRouteCircuitsBeginListRoutesTableSummaryOptions contains the optional parameters for the ExpressRouteCircuits.BeginListRoutesTableSummary method.
type ExpressRouteCircuitsBeginListRoutesTableSummaryOptions = original.ExpressRouteCircuitsBeginListRoutesTableSummaryOptions

// ExpressRouteCircuitsClient contains the methods for the ExpressRouteCircuits group.
// Don't use this type directly, use NewExpressRouteCircuitsClient() instead.
type ExpressRouteCircuitsClient = original.ExpressRouteCircuitsClient

// ExpressRouteCircuitsGetOptions contains the optional parameters for the ExpressRouteCircuits.Get method.
type ExpressRouteCircuitsGetOptions = original.ExpressRouteCircuitsGetOptions

// ExpressRouteCircuitsGetPeeringStatsOptions contains the optional parameters for the ExpressRouteCircuits.GetPeeringStats method.
type ExpressRouteCircuitsGetPeeringStatsOptions = original.ExpressRouteCircuitsGetPeeringStatsOptions

// ExpressRouteCircuitsGetStatsOptions contains the optional parameters for the ExpressRouteCircuits.GetStats method.
type ExpressRouteCircuitsGetStatsOptions = original.ExpressRouteCircuitsGetStatsOptions

// ExpressRouteCircuitsListAllOptions contains the optional parameters for the ExpressRouteCircuits.ListAll method.
type ExpressRouteCircuitsListAllOptions = original.ExpressRouteCircuitsListAllOptions

// ExpressRouteCircuitsListOptions contains the optional parameters for the ExpressRouteCircuits.List method.
type ExpressRouteCircuitsListOptions = original.ExpressRouteCircuitsListOptions

// Response for ListRoutesTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsRoutesTableListResult = original.ExpressRouteCircuitsRoutesTableListResult

// ExpressRouteCircuitsRoutesTableListResultPoller provides polling facilities until the operation completes
type ExpressRouteCircuitsRoutesTableListResultPoller = original.ExpressRouteCircuitsRoutesTableListResultPoller

// ExpressRouteCircuitsRoutesTableListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableListResult
// type.
type ExpressRouteCircuitsRoutesTableListResultPollerResponse = original.ExpressRouteCircuitsRoutesTableListResultPollerResponse

// ExpressRouteCircuitsRoutesTableListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableListResult type.
type ExpressRouteCircuitsRoutesTableListResultResponse = original.ExpressRouteCircuitsRoutesTableListResultResponse

// Response for ListRoutesTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsRoutesTableSummaryListResult = original.ExpressRouteCircuitsRoutesTableSummaryListResult

// ExpressRouteCircuitsRoutesTableSummaryListResultPoller provides polling facilities until the operation completes
type ExpressRouteCircuitsRoutesTableSummaryListResultPoller = original.ExpressRouteCircuitsRoutesTableSummaryListResultPoller

// ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse = original.ExpressRouteCircuitsRoutesTableSummaryListResultPollerResponse

// ExpressRouteCircuitsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCircuitsRoutesTableSummaryListResult
// type.
type ExpressRouteCircuitsRoutesTableSummaryListResultResponse = original.ExpressRouteCircuitsRoutesTableSummaryListResultResponse

// ExpressRouteCircuitsUpdateTagsOptions contains the optional parameters for the ExpressRouteCircuits.UpdateTags method.
type ExpressRouteCircuitsUpdateTagsOptions = original.ExpressRouteCircuitsUpdateTagsOptions

// ExpressRouteConnection resource.
type ExpressRouteConnection = original.ExpressRouteConnection

// The ID of the ExpressRouteConnection.
type ExpressRouteConnectionID = original.ExpressRouteConnectionID

// ExpressRouteConnection list.
type ExpressRouteConnectionList = original.ExpressRouteConnectionList

// ExpressRouteConnectionListResponse is the response envelope for operations that return a ExpressRouteConnectionList type.
type ExpressRouteConnectionListResponse = original.ExpressRouteConnectionListResponse

// ExpressRouteConnectionPoller provides polling facilities until the operation completes
type ExpressRouteConnectionPoller = original.ExpressRouteConnectionPoller

// ExpressRouteConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteConnection type.
type ExpressRouteConnectionPollerResponse = original.ExpressRouteConnectionPollerResponse

// Properties of the ExpressRouteConnection subresource.
type ExpressRouteConnectionProperties = original.ExpressRouteConnectionProperties

// ExpressRouteConnectionResponse is the response envelope for operations that return a ExpressRouteConnection type.
type ExpressRouteConnectionResponse = original.ExpressRouteConnectionResponse

// ExpressRouteConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteConnections.BeginCreateOrUpdate method.
type ExpressRouteConnectionsBeginCreateOrUpdateOptions = original.ExpressRouteConnectionsBeginCreateOrUpdateOptions

// ExpressRouteConnectionsBeginDeleteOptions contains the optional parameters for the ExpressRouteConnections.BeginDelete method.
type ExpressRouteConnectionsBeginDeleteOptions = original.ExpressRouteConnectionsBeginDeleteOptions

// ExpressRouteConnectionsClient contains the methods for the ExpressRouteConnections group.
// Don't use this type directly, use NewExpressRouteConnectionsClient() instead.
type ExpressRouteConnectionsClient = original.ExpressRouteConnectionsClient

// ExpressRouteConnectionsGetOptions contains the optional parameters for the ExpressRouteConnections.Get method.
type ExpressRouteConnectionsGetOptions = original.ExpressRouteConnectionsGetOptions

// ExpressRouteConnectionsListOptions contains the optional parameters for the ExpressRouteConnections.List method.
type ExpressRouteConnectionsListOptions = original.ExpressRouteConnectionsListOptions

// ExpressRouteCrossConnection resource.
type ExpressRouteCrossConnection = original.ExpressRouteCrossConnection

// Response for ListExpressRouteCrossConnection API service call.
type ExpressRouteCrossConnectionListResult = original.ExpressRouteCrossConnectionListResult

// ExpressRouteCrossConnectionListResultPager provides iteration over ExpressRouteCrossConnectionListResult pages.
type ExpressRouteCrossConnectionListResultPager = original.ExpressRouteCrossConnectionListResultPager

// ExpressRouteCrossConnectionListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionListResult type.
type ExpressRouteCrossConnectionListResultResponse = original.ExpressRouteCrossConnectionListResultResponse

// Peering in an ExpressRoute Cross Connection resource.
type ExpressRouteCrossConnectionPeering = original.ExpressRouteCrossConnectionPeering

// Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionPeeringList = original.ExpressRouteCrossConnectionPeeringList

// ExpressRouteCrossConnectionPeeringListPager provides iteration over ExpressRouteCrossConnectionPeeringList pages.
type ExpressRouteCrossConnectionPeeringListPager = original.ExpressRouteCrossConnectionPeeringListPager

// ExpressRouteCrossConnectionPeeringListResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeeringList type.
type ExpressRouteCrossConnectionPeeringListResponse = original.ExpressRouteCrossConnectionPeeringListResponse

// ExpressRouteCrossConnectionPeeringPoller provides polling facilities until the operation completes
type ExpressRouteCrossConnectionPeeringPoller = original.ExpressRouteCrossConnectionPeeringPoller

// ExpressRouteCrossConnectionPeeringPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionPeering
// type.
type ExpressRouteCrossConnectionPeeringPollerResponse = original.ExpressRouteCrossConnectionPeeringPollerResponse

// Properties of express route cross connection peering.
type ExpressRouteCrossConnectionPeeringProperties = original.ExpressRouteCrossConnectionPeeringProperties

// ExpressRouteCrossConnectionPeeringResponse is the response envelope for operations that return a ExpressRouteCrossConnectionPeering type.
type ExpressRouteCrossConnectionPeeringResponse = original.ExpressRouteCrossConnectionPeeringResponse

// ExpressRouteCrossConnectionPeeringsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.BeginCreateOrUpdate
// method.
type ExpressRouteCrossConnectionPeeringsBeginCreateOrUpdateOptions = original.ExpressRouteCrossConnectionPeeringsBeginCreateOrUpdateOptions

// ExpressRouteCrossConnectionPeeringsBeginDeleteOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.BeginDelete method.
type ExpressRouteCrossConnectionPeeringsBeginDeleteOptions = original.ExpressRouteCrossConnectionPeeringsBeginDeleteOptions

// ExpressRouteCrossConnectionPeeringsClient contains the methods for the ExpressRouteCrossConnectionPeerings group.
// Don't use this type directly, use NewExpressRouteCrossConnectionPeeringsClient() instead.
type ExpressRouteCrossConnectionPeeringsClient = original.ExpressRouteCrossConnectionPeeringsClient

// ExpressRouteCrossConnectionPeeringsGetOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.Get method.
type ExpressRouteCrossConnectionPeeringsGetOptions = original.ExpressRouteCrossConnectionPeeringsGetOptions

// ExpressRouteCrossConnectionPeeringsListOptions contains the optional parameters for the ExpressRouteCrossConnectionPeerings.List method.
type ExpressRouteCrossConnectionPeeringsListOptions = original.ExpressRouteCrossConnectionPeeringsListOptions

// ExpressRouteCrossConnectionPoller provides polling facilities until the operation completes
type ExpressRouteCrossConnectionPoller = original.ExpressRouteCrossConnectionPoller

// ExpressRouteCrossConnectionPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionPollerResponse = original.ExpressRouteCrossConnectionPollerResponse

// Properties of ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionProperties = original.ExpressRouteCrossConnectionProperties

// ExpressRouteCrossConnectionResponse is the response envelope for operations that return a ExpressRouteCrossConnection type.
type ExpressRouteCrossConnectionResponse = original.ExpressRouteCrossConnectionResponse

// The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCrossConnectionRoutesTableSummary = original.ExpressRouteCrossConnectionRoutesTableSummary

// ExpressRouteCrossConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteCrossConnections.BeginCreateOrUpdate method.
type ExpressRouteCrossConnectionsBeginCreateOrUpdateOptions = original.ExpressRouteCrossConnectionsBeginCreateOrUpdateOptions

// ExpressRouteCrossConnectionsBeginListArpTableOptions contains the optional parameters for the ExpressRouteCrossConnections.BeginListArpTable method.
type ExpressRouteCrossConnectionsBeginListArpTableOptions = original.ExpressRouteCrossConnectionsBeginListArpTableOptions

// ExpressRouteCrossConnectionsBeginListRoutesTableOptions contains the optional parameters for the ExpressRouteCrossConnections.BeginListRoutesTable method.
type ExpressRouteCrossConnectionsBeginListRoutesTableOptions = original.ExpressRouteCrossConnectionsBeginListRoutesTableOptions

// ExpressRouteCrossConnectionsBeginListRoutesTableSummaryOptions contains the optional parameters for the ExpressRouteCrossConnections.BeginListRoutesTableSummary
// method.
type ExpressRouteCrossConnectionsBeginListRoutesTableSummaryOptions = original.ExpressRouteCrossConnectionsBeginListRoutesTableSummaryOptions

// ExpressRouteCrossConnectionsClient contains the methods for the ExpressRouteCrossConnections group.
// Don't use this type directly, use NewExpressRouteCrossConnectionsClient() instead.
type ExpressRouteCrossConnectionsClient = original.ExpressRouteCrossConnectionsClient

// ExpressRouteCrossConnectionsGetOptions contains the optional parameters for the ExpressRouteCrossConnections.Get method.
type ExpressRouteCrossConnectionsGetOptions = original.ExpressRouteCrossConnectionsGetOptions

// ExpressRouteCrossConnectionsListByResourceGroupOptions contains the optional parameters for the ExpressRouteCrossConnections.ListByResourceGroup method.
type ExpressRouteCrossConnectionsListByResourceGroupOptions = original.ExpressRouteCrossConnectionsListByResourceGroupOptions

// ExpressRouteCrossConnectionsListOptions contains the optional parameters for the ExpressRouteCrossConnections.List method.
type ExpressRouteCrossConnectionsListOptions = original.ExpressRouteCrossConnectionsListOptions

// Response for ListRoutesTable associated with the Express Route Cross Connections.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResult = original.ExpressRouteCrossConnectionsRoutesTableSummaryListResult

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultPoller provides polling facilities until the operation completes
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultPoller = original.ExpressRouteCrossConnectionsRoutesTableSummaryListResultPoller

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse = original.ExpressRouteCrossConnectionsRoutesTableSummaryListResultPollerResponse

// ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse is the response envelope for operations that return a ExpressRouteCrossConnectionsRoutesTableSummaryListResult
// type.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse = original.ExpressRouteCrossConnectionsRoutesTableSummaryListResultResponse

// ExpressRouteCrossConnectionsUpdateTagsOptions contains the optional parameters for the ExpressRouteCrossConnections.UpdateTags method.
type ExpressRouteCrossConnectionsUpdateTagsOptions = original.ExpressRouteCrossConnectionsUpdateTagsOptions

// ExpressRoute gateway resource.
type ExpressRouteGateway = original.ExpressRouteGateway

// List of ExpressRoute gateways.
type ExpressRouteGatewayList = original.ExpressRouteGatewayList

// ExpressRouteGatewayListResponse is the response envelope for operations that return a ExpressRouteGatewayList type.
type ExpressRouteGatewayListResponse = original.ExpressRouteGatewayListResponse

// ExpressRouteGatewayPoller provides polling facilities until the operation completes
type ExpressRouteGatewayPoller = original.ExpressRouteGatewayPoller

// ExpressRouteGatewayPollerResponse is the response envelope for operations that asynchronously return a ExpressRouteGateway type.
type ExpressRouteGatewayPollerResponse = original.ExpressRouteGatewayPollerResponse

// ExpressRoute gateway resource properties.
type ExpressRouteGatewayProperties = original.ExpressRouteGatewayProperties

// Configuration for auto scaling.
type ExpressRouteGatewayPropertiesAutoScaleConfiguration = original.ExpressRouteGatewayPropertiesAutoScaleConfiguration

// Minimum and maximum number of scale units to deploy.
type ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds = original.ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds

// ExpressRouteGatewayResponse is the response envelope for operations that return a ExpressRouteGateway type.
type ExpressRouteGatewayResponse = original.ExpressRouteGatewayResponse

// ExpressRouteGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRouteGateways.BeginCreateOrUpdate method.
type ExpressRouteGatewaysBeginCreateOrUpdateOptions = original.ExpressRouteGatewaysBeginCreateOrUpdateOptions

// ExpressRouteGatewaysBeginDeleteOptions contains the optional parameters for the ExpressRouteGateways.BeginDelete method.
type ExpressRouteGatewaysBeginDeleteOptions = original.ExpressRouteGatewaysBeginDeleteOptions

// ExpressRouteGatewaysClient contains the methods for the ExpressRouteGateways group.
// Don't use this type directly, use NewExpressRouteGatewaysClient() instead.
type ExpressRouteGatewaysClient = original.ExpressRouteGatewaysClient

// ExpressRouteGatewaysGetOptions contains the optional parameters for the ExpressRouteGateways.Get method.
type ExpressRouteGatewaysGetOptions = original.ExpressRouteGatewaysGetOptions

// ExpressRouteGatewaysListByResourceGroupOptions contains the optional parameters for the ExpressRouteGateways.ListByResourceGroup method.
type ExpressRouteGatewaysListByResourceGroupOptions = original.ExpressRouteGatewaysListByResourceGroupOptions

// ExpressRouteGatewaysListBySubscriptionOptions contains the optional parameters for the ExpressRouteGateways.ListBySubscription method.
type ExpressRouteGatewaysListBySubscriptionOptions = original.ExpressRouteGatewaysListBySubscriptionOptions

// ExpressRouteLink child resource definition.
type ExpressRouteLink = original.ExpressRouteLink

// Response for ListExpressRouteLinks API service call.
type ExpressRouteLinkListResult = original.ExpressRouteLinkListResult

// ExpressRouteLinkListResultPager provides iteration over ExpressRouteLinkListResult pages.
type ExpressRouteLinkListResultPager = original.ExpressRouteLinkListResultPager

// ExpressRouteLinkListResultResponse is the response envelope for operations that return a ExpressRouteLinkListResult type.
type ExpressRouteLinkListResultResponse = original.ExpressRouteLinkListResultResponse

// ExpressRouteLink Mac Security Configuration.
type ExpressRouteLinkMacSecConfig = original.ExpressRouteLinkMacSecConfig

// Properties specific to ExpressRouteLink resources.
type ExpressRouteLinkPropertiesFormat = original.ExpressRouteLinkPropertiesFormat

// ExpressRouteLinkResponse is the response envelope for operations that return a ExpressRouteLink type.
type ExpressRouteLinkResponse = original.ExpressRouteLinkResponse

// ExpressRouteLinksClient contains the methods for the ExpressRouteLinks group.
// Don't use this type directly, use NewExpressRouteLinksClient() instead.
type ExpressRouteLinksClient = original.ExpressRouteLinksClient

// ExpressRouteLinksGetOptions contains the optional parameters for the ExpressRouteLinks.Get method.
type ExpressRouteLinksGetOptions = original.ExpressRouteLinksGetOptions

// ExpressRouteLinksListOptions contains the optional parameters for the ExpressRouteLinks.List method.
type ExpressRouteLinksListOptions = original.ExpressRouteLinksListOptions

// ExpressRoutePort resource definition.
type ExpressRoutePort = original.ExpressRoutePort

// Response for ListExpressRoutePorts API service call.
type ExpressRoutePortListResult = original.ExpressRoutePortListResult

// ExpressRoutePortListResultPager provides iteration over ExpressRoutePortListResult pages.
type ExpressRoutePortListResultPager = original.ExpressRoutePortListResultPager

// ExpressRoutePortListResultResponse is the response envelope for operations that return a ExpressRoutePortListResult type.
type ExpressRoutePortListResultResponse = original.ExpressRoutePortListResultResponse

// ExpressRoutePortPoller provides polling facilities until the operation completes
type ExpressRoutePortPoller = original.ExpressRoutePortPoller

// ExpressRoutePortPollerResponse is the response envelope for operations that asynchronously return a ExpressRoutePort type.
type ExpressRoutePortPollerResponse = original.ExpressRoutePortPollerResponse

// Properties specific to ExpressRoutePort resources.
type ExpressRoutePortPropertiesFormat = original.ExpressRoutePortPropertiesFormat

// ExpressRoutePortResponse is the response envelope for operations that return a ExpressRoutePort type.
type ExpressRoutePortResponse = original.ExpressRoutePortResponse

// ExpressRoutePortsBeginCreateOrUpdateOptions contains the optional parameters for the ExpressRoutePorts.BeginCreateOrUpdate method.
type ExpressRoutePortsBeginCreateOrUpdateOptions = original.ExpressRoutePortsBeginCreateOrUpdateOptions

// ExpressRoutePortsBeginDeleteOptions contains the optional parameters for the ExpressRoutePorts.BeginDelete method.
type ExpressRoutePortsBeginDeleteOptions = original.ExpressRoutePortsBeginDeleteOptions

// ExpressRoutePortsClient contains the methods for the ExpressRoutePorts group.
// Don't use this type directly, use NewExpressRoutePortsClient() instead.
type ExpressRoutePortsClient = original.ExpressRoutePortsClient

// ExpressRoutePortsGenerateLoaOptions contains the optional parameters for the ExpressRoutePorts.GenerateLoa method.
type ExpressRoutePortsGenerateLoaOptions = original.ExpressRoutePortsGenerateLoaOptions

// ExpressRoutePortsGetOptions contains the optional parameters for the ExpressRoutePorts.Get method.
type ExpressRoutePortsGetOptions = original.ExpressRoutePortsGetOptions

// ExpressRoutePortsListByResourceGroupOptions contains the optional parameters for the ExpressRoutePorts.ListByResourceGroup method.
type ExpressRoutePortsListByResourceGroupOptions = original.ExpressRoutePortsListByResourceGroupOptions

// ExpressRoutePortsListOptions contains the optional parameters for the ExpressRoutePorts.List method.
type ExpressRoutePortsListOptions = original.ExpressRoutePortsListOptions

// Definition of the ExpressRoutePorts peering location resource.
type ExpressRoutePortsLocation = original.ExpressRoutePortsLocation

// Real-time inventory of available ExpressRoute port bandwidths.
type ExpressRoutePortsLocationBandwidths = original.ExpressRoutePortsLocationBandwidths

// Response for ListExpressRoutePortsLocations API service call.
type ExpressRoutePortsLocationListResult = original.ExpressRoutePortsLocationListResult

// ExpressRoutePortsLocationListResultPager provides iteration over ExpressRoutePortsLocationListResult pages.
type ExpressRoutePortsLocationListResultPager = original.ExpressRoutePortsLocationListResultPager

// ExpressRoutePortsLocationListResultResponse is the response envelope for operations that return a ExpressRoutePortsLocationListResult type.
type ExpressRoutePortsLocationListResultResponse = original.ExpressRoutePortsLocationListResultResponse

// Properties specific to ExpressRoutePorts peering location resources.
type ExpressRoutePortsLocationPropertiesFormat = original.ExpressRoutePortsLocationPropertiesFormat

// ExpressRoutePortsLocationResponse is the response envelope for operations that return a ExpressRoutePortsLocation type.
type ExpressRoutePortsLocationResponse = original.ExpressRoutePortsLocationResponse

// ExpressRoutePortsLocationsClient contains the methods for the ExpressRoutePortsLocations group.
// Don't use this type directly, use NewExpressRoutePortsLocationsClient() instead.
type ExpressRoutePortsLocationsClient = original.ExpressRoutePortsLocationsClient

// ExpressRoutePortsLocationsGetOptions contains the optional parameters for the ExpressRoutePortsLocations.Get method.
type ExpressRoutePortsLocationsGetOptions = original.ExpressRoutePortsLocationsGetOptions

// ExpressRoutePortsLocationsListOptions contains the optional parameters for the ExpressRoutePortsLocations.List method.
type ExpressRoutePortsLocationsListOptions = original.ExpressRoutePortsLocationsListOptions

// ExpressRoutePortsUpdateTagsOptions contains the optional parameters for the ExpressRoutePorts.UpdateTags method.
type ExpressRoutePortsUpdateTagsOptions = original.ExpressRoutePortsUpdateTagsOptions

// A ExpressRouteResourceProvider object.
type ExpressRouteServiceProvider = original.ExpressRouteServiceProvider

// Contains bandwidths offered in ExpressRouteServiceProvider resources.
type ExpressRouteServiceProviderBandwidthsOffered = original.ExpressRouteServiceProviderBandwidthsOffered

// Response for the ListExpressRouteServiceProvider API service call.
type ExpressRouteServiceProviderListResult = original.ExpressRouteServiceProviderListResult

// ExpressRouteServiceProviderListResultPager provides iteration over ExpressRouteServiceProviderListResult pages.
type ExpressRouteServiceProviderListResultPager = original.ExpressRouteServiceProviderListResultPager

// ExpressRouteServiceProviderListResultResponse is the response envelope for operations that return a ExpressRouteServiceProviderListResult type.
type ExpressRouteServiceProviderListResultResponse = original.ExpressRouteServiceProviderListResultResponse

// Properties of ExpressRouteServiceProvider.
type ExpressRouteServiceProviderPropertiesFormat = original.ExpressRouteServiceProviderPropertiesFormat

// ExpressRouteServiceProvidersClient contains the methods for the ExpressRouteServiceProviders group.
// Don't use this type directly, use NewExpressRouteServiceProvidersClient() instead.
type ExpressRouteServiceProvidersClient = original.ExpressRouteServiceProvidersClient

// ExpressRouteServiceProvidersListOptions contains the optional parameters for the ExpressRouteServiceProviders.List method.
type ExpressRouteServiceProvidersListOptions = original.ExpressRouteServiceProvidersListOptions

// ExtendedLocation complex type.
type ExtendedLocation = original.ExtendedLocation

// FirewallPoliciesBeginCreateOrUpdateOptions contains the optional parameters for the FirewallPolicies.BeginCreateOrUpdate method.
type FirewallPoliciesBeginCreateOrUpdateOptions = original.FirewallPoliciesBeginCreateOrUpdateOptions

// FirewallPoliciesBeginDeleteOptions contains the optional parameters for the FirewallPolicies.BeginDelete method.
type FirewallPoliciesBeginDeleteOptions = original.FirewallPoliciesBeginDeleteOptions

// FirewallPoliciesClient contains the methods for the FirewallPolicies group.
// Don't use this type directly, use NewFirewallPoliciesClient() instead.
type FirewallPoliciesClient = original.FirewallPoliciesClient

// FirewallPoliciesGetOptions contains the optional parameters for the FirewallPolicies.Get method.
type FirewallPoliciesGetOptions = original.FirewallPoliciesGetOptions

// FirewallPoliciesListAllOptions contains the optional parameters for the FirewallPolicies.ListAll method.
type FirewallPoliciesListAllOptions = original.FirewallPoliciesListAllOptions

// FirewallPoliciesListOptions contains the optional parameters for the FirewallPolicies.List method.
type FirewallPoliciesListOptions = original.FirewallPoliciesListOptions

// FirewallPolicy Resource.
type FirewallPolicy = original.FirewallPolicy

// Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthority = original.FirewallPolicyCertificateAuthority

// Firewall Policy Filter Rule Collection.
type FirewallPolicyFilterRuleCollection = original.FirewallPolicyFilterRuleCollection

// Properties of the FirewallPolicyFilterRuleCollectionAction.
type FirewallPolicyFilterRuleCollectionAction = original.FirewallPolicyFilterRuleCollectionAction

// Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetection = original.FirewallPolicyIntrusionDetection

// Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecifications = original.FirewallPolicyIntrusionDetectionBypassTrafficSpecifications

// The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfiguration = original.FirewallPolicyIntrusionDetectionConfiguration

// Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecification = original.FirewallPolicyIntrusionDetectionSignatureSpecification

// Response for ListFirewallPolicies API service call.
type FirewallPolicyListResult = original.FirewallPolicyListResult

// FirewallPolicyListResultPager provides iteration over FirewallPolicyListResult pages.
type FirewallPolicyListResultPager = original.FirewallPolicyListResultPager

// FirewallPolicyListResultResponse is the response envelope for operations that return a FirewallPolicyListResult type.
type FirewallPolicyListResultResponse = original.FirewallPolicyListResultResponse

// Firewall Policy NAT Rule Collection.
type FirewallPolicyNatRuleCollection = original.FirewallPolicyNatRuleCollection

// Properties of the FirewallPolicyNatRuleCollectionAction.
type FirewallPolicyNatRuleCollectionAction = original.FirewallPolicyNatRuleCollectionAction

// FirewallPolicyPoller provides polling facilities until the operation completes
type FirewallPolicyPoller = original.FirewallPolicyPoller

// FirewallPolicyPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicy type.
type FirewallPolicyPollerResponse = original.FirewallPolicyPollerResponse

// Firewall Policy definition.
type FirewallPolicyPropertiesFormat = original.FirewallPolicyPropertiesFormat

// FirewallPolicyResponse is the response envelope for operations that return a FirewallPolicy type.
type FirewallPolicyResponse = original.FirewallPolicyResponse

// Properties of a rule.
type FirewallPolicyRule = original.FirewallPolicyRule

// Properties of the application rule protocol.
type FirewallPolicyRuleApplicationProtocol = original.FirewallPolicyRuleApplicationProtocol

// FirewallPolicyRuleClassification provides polymorphic access to related types.
// Call the interface's GetFirewallPolicyRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FirewallPolicyRule, *ApplicationRule, *NatRule, *NetworkRule
type FirewallPolicyRuleClassification = original.FirewallPolicyRuleClassification

// Properties of the rule collection.
type FirewallPolicyRuleCollection = original.FirewallPolicyRuleCollection

// FirewallPolicyRuleCollectionClassification provides polymorphic access to related types.
// Call the interface's GetFirewallPolicyRuleCollection() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FirewallPolicyRuleCollection, *FirewallPolicyFilterRuleCollection, *FirewallPolicyNatRuleCollection
type FirewallPolicyRuleCollectionClassification = original.FirewallPolicyRuleCollectionClassification

// Rule Collection Group resource.
type FirewallPolicyRuleCollectionGroup = original.FirewallPolicyRuleCollectionGroup

// Response for ListFirewallPolicyRuleCollectionGroups API service call.
type FirewallPolicyRuleCollectionGroupListResult = original.FirewallPolicyRuleCollectionGroupListResult

// FirewallPolicyRuleCollectionGroupListResultPager provides iteration over FirewallPolicyRuleCollectionGroupListResult pages.
type FirewallPolicyRuleCollectionGroupListResultPager = original.FirewallPolicyRuleCollectionGroupListResultPager

// FirewallPolicyRuleCollectionGroupListResultResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroupListResult
// type.
type FirewallPolicyRuleCollectionGroupListResultResponse = original.FirewallPolicyRuleCollectionGroupListResultResponse

// FirewallPolicyRuleCollectionGroupPoller provides polling facilities until the operation completes
type FirewallPolicyRuleCollectionGroupPoller = original.FirewallPolicyRuleCollectionGroupPoller

// FirewallPolicyRuleCollectionGroupPollerResponse is the response envelope for operations that asynchronously return a FirewallPolicyRuleCollectionGroup
// type.
type FirewallPolicyRuleCollectionGroupPollerResponse = original.FirewallPolicyRuleCollectionGroupPollerResponse

// Properties of the rule collection group.
type FirewallPolicyRuleCollectionGroupProperties = original.FirewallPolicyRuleCollectionGroupProperties

// FirewallPolicyRuleCollectionGroupResponse is the response envelope for operations that return a FirewallPolicyRuleCollectionGroup type.
type FirewallPolicyRuleCollectionGroupResponse = original.FirewallPolicyRuleCollectionGroupResponse

// FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.BeginCreateOrUpdate
// method.
type FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions = original.FirewallPolicyRuleCollectionGroupsBeginCreateOrUpdateOptions

// FirewallPolicyRuleCollectionGroupsBeginDeleteOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.BeginDelete method.
type FirewallPolicyRuleCollectionGroupsBeginDeleteOptions = original.FirewallPolicyRuleCollectionGroupsBeginDeleteOptions

// FirewallPolicyRuleCollectionGroupsClient contains the methods for the FirewallPolicyRuleCollectionGroups group.
// Don't use this type directly, use NewFirewallPolicyRuleCollectionGroupsClient() instead.
type FirewallPolicyRuleCollectionGroupsClient = original.FirewallPolicyRuleCollectionGroupsClient

// FirewallPolicyRuleCollectionGroupsGetOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.Get method.
type FirewallPolicyRuleCollectionGroupsGetOptions = original.FirewallPolicyRuleCollectionGroupsGetOptions

// FirewallPolicyRuleCollectionGroupsListOptions contains the optional parameters for the FirewallPolicyRuleCollectionGroups.List method.
type FirewallPolicyRuleCollectionGroupsListOptions = original.FirewallPolicyRuleCollectionGroupsListOptions

// SKU of Firewall policy.
type FirewallPolicySKU = original.FirewallPolicySKU

// ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelist = original.FirewallPolicyThreatIntelWhitelist

// Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurity = original.FirewallPolicyTransportSecurity

// A flow log resource.
type FlowLog = original.FlowLog

// Parameters that define the flow log format.
type FlowLogFormatParameters = original.FlowLogFormatParameters

// Information on the configuration of flow log and traffic analytics (optional) .
type FlowLogInformation = original.FlowLogInformation

// FlowLogInformationPoller provides polling facilities until the operation completes
type FlowLogInformationPoller = original.FlowLogInformationPoller

// FlowLogInformationPollerResponse is the response envelope for operations that asynchronously return a FlowLogInformation type.
type FlowLogInformationPollerResponse = original.FlowLogInformationPollerResponse

// FlowLogInformationResponse is the response envelope for operations that return a FlowLogInformation type.
type FlowLogInformationResponse = original.FlowLogInformationResponse

// List of flow logs.
type FlowLogListResult = original.FlowLogListResult

// FlowLogListResultPager provides iteration over FlowLogListResult pages.
type FlowLogListResultPager = original.FlowLogListResultPager

// FlowLogListResultResponse is the response envelope for operations that return a FlowLogListResult type.
type FlowLogListResultResponse = original.FlowLogListResultResponse

// FlowLogPoller provides polling facilities until the operation completes
type FlowLogPoller = original.FlowLogPoller

// FlowLogPollerResponse is the response envelope for operations that asynchronously return a FlowLog type.
type FlowLogPollerResponse = original.FlowLogPollerResponse

// Parameters that define the configuration of flow log.
type FlowLogProperties = original.FlowLogProperties

// Parameters that define the configuration of flow log.
type FlowLogPropertiesFormat = original.FlowLogPropertiesFormat

// FlowLogResponse is the response envelope for operations that return a FlowLog type.
type FlowLogResponse = original.FlowLogResponse

// Parameters that define a resource to query flow log and traffic analytics (optional) status.
type FlowLogStatusParameters = original.FlowLogStatusParameters

// FlowLogsBeginCreateOrUpdateOptions contains the optional parameters for the FlowLogs.BeginCreateOrUpdate method.
type FlowLogsBeginCreateOrUpdateOptions = original.FlowLogsBeginCreateOrUpdateOptions

// FlowLogsBeginDeleteOptions contains the optional parameters for the FlowLogs.BeginDelete method.
type FlowLogsBeginDeleteOptions = original.FlowLogsBeginDeleteOptions

// FlowLogsClient contains the methods for the FlowLogs group.
// Don't use this type directly, use NewFlowLogsClient() instead.
type FlowLogsClient = original.FlowLogsClient

// FlowLogsGetOptions contains the optional parameters for the FlowLogs.Get method.
type FlowLogsGetOptions = original.FlowLogsGetOptions

// FlowLogsListOptions contains the optional parameters for the FlowLogs.List method.
type FlowLogsListOptions = original.FlowLogsListOptions

// FlowLogsUpdateTagsOptions contains the optional parameters for the FlowLogs.UpdateTags method.
type FlowLogsUpdateTagsOptions = original.FlowLogsUpdateTagsOptions

// Frontend IP address of the load balancer.
type FrontendIPConfiguration = original.FrontendIPConfiguration

// Properties of Frontend IP Configuration of the load balancer.
type FrontendIPConfigurationPropertiesFormat = original.FrontendIPConfigurationPropertiesFormat

// FrontendIPConfigurationResponse is the response envelope for operations that return a FrontendIPConfiguration type.
type FrontendIPConfigurationResponse = original.FrontendIPConfigurationResponse

// Gateway routing details.
type GatewayRoute = original.GatewayRoute

// List of virtual network gateway routes.
type GatewayRouteListResult = original.GatewayRouteListResult

// GatewayRouteListResultPoller provides polling facilities until the operation completes
type GatewayRouteListResultPoller = original.GatewayRouteListResultPoller

// GatewayRouteListResultPollerResponse is the response envelope for operations that asynchronously return a GatewayRouteListResult type.
type GatewayRouteListResultPollerResponse = original.GatewayRouteListResultPollerResponse

// GatewayRouteListResultResponse is the response envelope for operations that return a GatewayRouteListResult type.
type GatewayRouteListResultResponse = original.GatewayRouteListResultResponse

// The customer name to be printed on a letter of authorization.
type GenerateExpressRoutePortsLoaRequest = original.GenerateExpressRoutePortsLoaRequest

// Response for GenerateExpressRoutePortsLOA API service call.
type GenerateExpressRoutePortsLoaResult = original.GenerateExpressRoutePortsLoaResult

// GenerateExpressRoutePortsLoaResultResponse is the response envelope for operations that return a GenerateExpressRoutePortsLoaResult type.
type GenerateExpressRoutePortsLoaResultResponse = original.GenerateExpressRoutePortsLoaResultResponse

// List of Vpn-Sites.
type GetVpnSitesConfigurationRequest = original.GetVpnSitesConfigurationRequest

// HTTP configuration of the connectivity check.
type HTTPConfiguration = original.HTTPConfiguration

// The HTTP header.
type HTTPHeader = original.HTTPHeader

// HTTPPoller provides polling facilities until the operation completes
type HTTPPoller = original.HTTPPoller

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse = original.HTTPPollerResponse

// Hop link.
type HopLink = original.HopLink

// Hop link properties.
type HopLinkProperties = original.HopLinkProperties

// IP addresses associated with azure firewall.
type HubIPAddresses = original.HubIPAddresses

// IpConfigurations.
type HubIPConfiguration = original.HubIPConfiguration

// HubIPConfigurationPoller provides polling facilities until the operation completes
type HubIPConfigurationPoller = original.HubIPConfigurationPoller

// HubIPConfigurationPollerResponse is the response envelope for operations that asynchronously return a HubIPConfiguration type.
type HubIPConfigurationPollerResponse = original.HubIPConfigurationPollerResponse

// Properties of IP configuration.
type HubIPConfigurationPropertiesFormat = original.HubIPConfigurationPropertiesFormat

// HubIPConfigurationResponse is the response envelope for operations that return a HubIPConfiguration type.
type HubIPConfigurationResponse = original.HubIPConfigurationResponse

// Public IP addresses associated with azure firewall.
type HubPublicIPAddresses = original.HubPublicIPAddresses

// RouteTable route.
type HubRoute = original.HubRoute

// RouteTable resource in a virtual hub.
type HubRouteTable = original.HubRouteTable

// HubRouteTablePoller provides polling facilities until the operation completes
type HubRouteTablePoller = original.HubRouteTablePoller

// HubRouteTablePollerResponse is the response envelope for operations that asynchronously return a HubRouteTable type.
type HubRouteTablePollerResponse = original.HubRouteTablePollerResponse

// Parameters for RouteTable.
type HubRouteTableProperties = original.HubRouteTableProperties

// HubRouteTableResponse is the response envelope for operations that return a HubRouteTable type.
type HubRouteTableResponse = original.HubRouteTableResponse

// HubRouteTablesBeginCreateOrUpdateOptions contains the optional parameters for the HubRouteTables.BeginCreateOrUpdate method.
type HubRouteTablesBeginCreateOrUpdateOptions = original.HubRouteTablesBeginCreateOrUpdateOptions

// HubRouteTablesBeginDeleteOptions contains the optional parameters for the HubRouteTables.BeginDelete method.
type HubRouteTablesBeginDeleteOptions = original.HubRouteTablesBeginDeleteOptions

// HubRouteTablesClient contains the methods for the HubRouteTables group.
// Don't use this type directly, use NewHubRouteTablesClient() instead.
type HubRouteTablesClient = original.HubRouteTablesClient

// HubRouteTablesGetOptions contains the optional parameters for the HubRouteTables.Get method.
type HubRouteTablesGetOptions = original.HubRouteTablesGetOptions

// HubRouteTablesListOptions contains the optional parameters for the HubRouteTables.List method.
type HubRouteTablesListOptions = original.HubRouteTablesListOptions

// HubVirtualNetworkConnection Resource.
type HubVirtualNetworkConnection = original.HubVirtualNetworkConnection

// HubVirtualNetworkConnectionPoller provides polling facilities until the operation completes
type HubVirtualNetworkConnectionPoller = original.HubVirtualNetworkConnectionPoller

// HubVirtualNetworkConnectionPollerResponse is the response envelope for operations that asynchronously return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionPollerResponse = original.HubVirtualNetworkConnectionPollerResponse

// Parameters for HubVirtualNetworkConnection.
type HubVirtualNetworkConnectionProperties = original.HubVirtualNetworkConnectionProperties

// HubVirtualNetworkConnectionResponse is the response envelope for operations that return a HubVirtualNetworkConnection type.
type HubVirtualNetworkConnectionResponse = original.HubVirtualNetworkConnectionResponse

// HubVirtualNetworkConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the HubVirtualNetworkConnections.BeginCreateOrUpdate method.
type HubVirtualNetworkConnectionsBeginCreateOrUpdateOptions = original.HubVirtualNetworkConnectionsBeginCreateOrUpdateOptions

// HubVirtualNetworkConnectionsBeginDeleteOptions contains the optional parameters for the HubVirtualNetworkConnections.BeginDelete method.
type HubVirtualNetworkConnectionsBeginDeleteOptions = original.HubVirtualNetworkConnectionsBeginDeleteOptions

// HubVirtualNetworkConnectionsClient contains the methods for the HubVirtualNetworkConnections group.
// Don't use this type directly, use NewHubVirtualNetworkConnectionsClient() instead.
type HubVirtualNetworkConnectionsClient = original.HubVirtualNetworkConnectionsClient

// HubVirtualNetworkConnectionsGetOptions contains the optional parameters for the HubVirtualNetworkConnections.Get method.
type HubVirtualNetworkConnectionsGetOptions = original.HubVirtualNetworkConnectionsGetOptions

// HubVirtualNetworkConnectionsListOptions contains the optional parameters for the HubVirtualNetworkConnections.List method.
type HubVirtualNetworkConnectionsListOptions = original.HubVirtualNetworkConnectionsListOptions

// Response for CheckIPAddressAvailability API service call.
type IPAddressAvailabilityResult = original.IPAddressAvailabilityResult

// IPAddressAvailabilityResultResponse is the response envelope for operations that return a IPAddressAvailabilityResult type.
type IPAddressAvailabilityResultResponse = original.IPAddressAvailabilityResultResponse

// IpAllocation resource.
type IPAllocation = original.IPAllocation

// Response for the ListIpAllocations API service call.
type IPAllocationListResult = original.IPAllocationListResult

// IPAllocationListResultPager provides iteration over IPAllocationListResult pages.
type IPAllocationListResultPager = original.IPAllocationListResultPager

// IPAllocationListResultResponse is the response envelope for operations that return a IPAllocationListResult type.
type IPAllocationListResultResponse = original.IPAllocationListResultResponse

// IPAllocationPoller provides polling facilities until the operation completes
type IPAllocationPoller = original.IPAllocationPoller

// IPAllocationPollerResponse is the response envelope for operations that asynchronously return a IPAllocation type.
type IPAllocationPollerResponse = original.IPAllocationPollerResponse

// Properties of the IpAllocation.
type IPAllocationPropertiesFormat = original.IPAllocationPropertiesFormat

// IPAllocationResponse is the response envelope for operations that return a IPAllocation type.
type IPAllocationResponse = original.IPAllocationResponse

// IPAllocationsBeginCreateOrUpdateOptions contains the optional parameters for the IPAllocations.BeginCreateOrUpdate method.
type IPAllocationsBeginCreateOrUpdateOptions = original.IPAllocationsBeginCreateOrUpdateOptions

// IPAllocationsBeginDeleteOptions contains the optional parameters for the IPAllocations.BeginDelete method.
type IPAllocationsBeginDeleteOptions = original.IPAllocationsBeginDeleteOptions

// IPAllocationsClient contains the methods for the IPAllocations group.
// Don't use this type directly, use NewIPAllocationsClient() instead.
type IPAllocationsClient = original.IPAllocationsClient

// IPAllocationsGetOptions contains the optional parameters for the IPAllocations.Get method.
type IPAllocationsGetOptions = original.IPAllocationsGetOptions

// IPAllocationsListByResourceGroupOptions contains the optional parameters for the IPAllocations.ListByResourceGroup method.
type IPAllocationsListByResourceGroupOptions = original.IPAllocationsListByResourceGroupOptions

// IPAllocationsListOptions contains the optional parameters for the IPAllocations.List method.
type IPAllocationsListOptions = original.IPAllocationsListOptions

// IPAllocationsUpdateTagsOptions contains the optional parameters for the IPAllocations.UpdateTags method.
type IPAllocationsUpdateTagsOptions = original.IPAllocationsUpdateTagsOptions

// IP configuration.
type IPConfiguration = original.IPConfiguration

// Properties of IPConfigurationBgpPeeringAddress.
type IPConfigurationBgpPeeringAddress = original.IPConfigurationBgpPeeringAddress

// IP configuration profile child resource.
type IPConfigurationProfile = original.IPConfigurationProfile

// IP configuration profile properties.
type IPConfigurationProfilePropertiesFormat = original.IPConfigurationProfilePropertiesFormat

// Properties of IP configuration.
type IPConfigurationPropertiesFormat = original.IPConfigurationPropertiesFormat

// The IpGroups resource information.
type IPGroup = original.IPGroup

// Response for the ListIpGroups API service call.
type IPGroupListResult = original.IPGroupListResult

// IPGroupListResultPager provides iteration over IPGroupListResult pages.
type IPGroupListResultPager = original.IPGroupListResultPager

// IPGroupListResultResponse is the response envelope for operations that return a IPGroupListResult type.
type IPGroupListResultResponse = original.IPGroupListResultResponse

// IPGroupPoller provides polling facilities until the operation completes
type IPGroupPoller = original.IPGroupPoller

// IPGroupPollerResponse is the response envelope for operations that asynchronously return a IPGroup type.
type IPGroupPollerResponse = original.IPGroupPollerResponse

// The IpGroups property information.
type IPGroupPropertiesFormat = original.IPGroupPropertiesFormat

// IPGroupResponse is the response envelope for operations that return a IPGroup type.
type IPGroupResponse = original.IPGroupResponse

// IPGroupsBeginCreateOrUpdateOptions contains the optional parameters for the IPGroups.BeginCreateOrUpdate method.
type IPGroupsBeginCreateOrUpdateOptions = original.IPGroupsBeginCreateOrUpdateOptions

// IPGroupsBeginDeleteOptions contains the optional parameters for the IPGroups.BeginDelete method.
type IPGroupsBeginDeleteOptions = original.IPGroupsBeginDeleteOptions

// IPGroupsClient contains the methods for the IPGroups group.
// Don't use this type directly, use NewIPGroupsClient() instead.
type IPGroupsClient = original.IPGroupsClient

// IPGroupsGetOptions contains the optional parameters for the IPGroups.Get method.
type IPGroupsGetOptions = original.IPGroupsGetOptions

// IPGroupsListByResourceGroupOptions contains the optional parameters for the IPGroups.ListByResourceGroup method.
type IPGroupsListByResourceGroupOptions = original.IPGroupsListByResourceGroupOptions

// IPGroupsListOptions contains the optional parameters for the IPGroups.List method.
type IPGroupsListOptions = original.IPGroupsListOptions

// IPGroupsUpdateGroupsOptions contains the optional parameters for the IPGroups.UpdateGroups method.
type IPGroupsUpdateGroupsOptions = original.IPGroupsUpdateGroupsOptions

// Contains the IpTag associated with the object.
type IPTag = original.IPTag

// An IPSec Policy configuration for a virtual network gateway connection.
type IPsecPolicy = original.IPsecPolicy

// IPv6 Circuit Connection properties for global reach.
type IPv6CircuitConnectionConfig = original.IPv6CircuitConnectionConfig

// Contains IPv6 peering config.
type IPv6ExpressRouteCircuitPeeringConfig = original.IPv6ExpressRouteCircuitPeeringConfig

// Inbound NAT pool of the load balancer.
type InboundNatPool = original.InboundNatPool

// Properties of Inbound NAT pool.
type InboundNatPoolPropertiesFormat = original.InboundNatPoolPropertiesFormat

// Inbound NAT rule of the load balancer.
type InboundNatRule = original.InboundNatRule

// Response for ListInboundNatRule API service call.
type InboundNatRuleListResult = original.InboundNatRuleListResult

// InboundNatRuleListResultPager provides iteration over InboundNatRuleListResult pages.
type InboundNatRuleListResultPager = original.InboundNatRuleListResultPager

// InboundNatRuleListResultResponse is the response envelope for operations that return a InboundNatRuleListResult type.
type InboundNatRuleListResultResponse = original.InboundNatRuleListResultResponse

// InboundNatRulePoller provides polling facilities until the operation completes
type InboundNatRulePoller = original.InboundNatRulePoller

// InboundNatRulePollerResponse is the response envelope for operations that asynchronously return a InboundNatRule type.
type InboundNatRulePollerResponse = original.InboundNatRulePollerResponse

// Properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat = original.InboundNatRulePropertiesFormat

// InboundNatRuleResponse is the response envelope for operations that return a InboundNatRule type.
type InboundNatRuleResponse = original.InboundNatRuleResponse

// InboundNatRulesBeginCreateOrUpdateOptions contains the optional parameters for the InboundNatRules.BeginCreateOrUpdate method.
type InboundNatRulesBeginCreateOrUpdateOptions = original.InboundNatRulesBeginCreateOrUpdateOptions

// InboundNatRulesBeginDeleteOptions contains the optional parameters for the InboundNatRules.BeginDelete method.
type InboundNatRulesBeginDeleteOptions = original.InboundNatRulesBeginDeleteOptions

// InboundNatRulesClient contains the methods for the InboundNatRules group.
// Don't use this type directly, use NewInboundNatRulesClient() instead.
type InboundNatRulesClient = original.InboundNatRulesClient

// InboundNatRulesGetOptions contains the optional parameters for the InboundNatRules.Get method.
type InboundNatRulesGetOptions = original.InboundNatRulesGetOptions

// InboundNatRulesListOptions contains the optional parameters for the InboundNatRules.List method.
type InboundNatRulesListOptions = original.InboundNatRulesListOptions

// NVA Inbound Security Rule resource.
type InboundSecurityRule = original.InboundSecurityRule

// InboundSecurityRuleBeginCreateOrUpdateOptions contains the optional parameters for the InboundSecurityRule.BeginCreateOrUpdate method.
type InboundSecurityRuleBeginCreateOrUpdateOptions = original.InboundSecurityRuleBeginCreateOrUpdateOptions

// InboundSecurityRuleClient contains the methods for the InboundSecurityRule group.
// Don't use this type directly, use NewInboundSecurityRuleClient() instead.
type InboundSecurityRuleClient = original.InboundSecurityRuleClient

// InboundSecurityRulePoller provides polling facilities until the operation completes
type InboundSecurityRulePoller = original.InboundSecurityRulePoller

// InboundSecurityRulePollerResponse is the response envelope for operations that asynchronously return a InboundSecurityRule type.
type InboundSecurityRulePollerResponse = original.InboundSecurityRulePollerResponse

// Properties of the Inbound Security Rules resource.
type InboundSecurityRuleProperties = original.InboundSecurityRuleProperties

// InboundSecurityRuleResponse is the response envelope for operations that return a InboundSecurityRule type.
type InboundSecurityRuleResponse = original.InboundSecurityRuleResponse

// Properties of the Inbound Security Rules resource.
type InboundSecurityRules = original.InboundSecurityRules

// List of RouteTables and a URL nextLink to get the next set of results.
type ListHubRouteTablesResult = original.ListHubRouteTablesResult

// ListHubRouteTablesResultPager provides iteration over ListHubRouteTablesResult pages.
type ListHubRouteTablesResultPager = original.ListHubRouteTablesResultPager

// ListHubRouteTablesResultResponse is the response envelope for operations that return a ListHubRouteTablesResult type.
type ListHubRouteTablesResultResponse = original.ListHubRouteTablesResultResponse

// List of HubVirtualNetworkConnections and a URL nextLink to get the next set of results.
type ListHubVirtualNetworkConnectionsResult = original.ListHubVirtualNetworkConnectionsResult

// ListHubVirtualNetworkConnectionsResultPager provides iteration over ListHubVirtualNetworkConnectionsResult pages.
type ListHubVirtualNetworkConnectionsResultPager = original.ListHubVirtualNetworkConnectionsResultPager

// ListHubVirtualNetworkConnectionsResultResponse is the response envelope for operations that return a ListHubVirtualNetworkConnectionsResult type.
type ListHubVirtualNetworkConnectionsResultResponse = original.ListHubVirtualNetworkConnectionsResultResponse

// Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL nextLink to get the next set of results.
type ListP2SVpnGatewaysResult = original.ListP2SVpnGatewaysResult

// ListP2SVpnGatewaysResultPager provides iteration over ListP2SVpnGatewaysResult pages.
type ListP2SVpnGatewaysResultPager = original.ListP2SVpnGatewaysResultPager

// ListP2SVpnGatewaysResultResponse is the response envelope for operations that return a ListP2SVpnGatewaysResult type.
type ListP2SVpnGatewaysResultResponse = original.ListP2SVpnGatewaysResultResponse

// VirtualHubBgpConnections list.
type ListVirtualHubBgpConnectionResults = original.ListVirtualHubBgpConnectionResults

// ListVirtualHubBgpConnectionResultsPager provides iteration over ListVirtualHubBgpConnectionResults pages.
type ListVirtualHubBgpConnectionResultsPager = original.ListVirtualHubBgpConnectionResultsPager

// ListVirtualHubBgpConnectionResultsResponse is the response envelope for operations that return a ListVirtualHubBgpConnectionResults type.
type ListVirtualHubBgpConnectionResultsResponse = original.ListVirtualHubBgpConnectionResultsResponse

// VirtualHubIpConfigurations list.
type ListVirtualHubIPConfigurationResults = original.ListVirtualHubIPConfigurationResults

// ListVirtualHubIPConfigurationResultsPager provides iteration over ListVirtualHubIPConfigurationResults pages.
type ListVirtualHubIPConfigurationResultsPager = original.ListVirtualHubIPConfigurationResultsPager

// ListVirtualHubIPConfigurationResultsResponse is the response envelope for operations that return a ListVirtualHubIPConfigurationResults type.
type ListVirtualHubIPConfigurationResultsResponse = original.ListVirtualHubIPConfigurationResultsResponse

// List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
type ListVirtualHubRouteTableV2SResult = original.ListVirtualHubRouteTableV2SResult

// ListVirtualHubRouteTableV2SResultPager provides iteration over ListVirtualHubRouteTableV2SResult pages.
type ListVirtualHubRouteTableV2SResultPager = original.ListVirtualHubRouteTableV2SResultPager

// ListVirtualHubRouteTableV2SResultResponse is the response envelope for operations that return a ListVirtualHubRouteTableV2SResult type.
type ListVirtualHubRouteTableV2SResultResponse = original.ListVirtualHubRouteTableV2SResultResponse

// Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink to get the next set of results.
type ListVirtualHubsResult = original.ListVirtualHubsResult

// ListVirtualHubsResultPager provides iteration over ListVirtualHubsResult pages.
type ListVirtualHubsResultPager = original.ListVirtualHubsResultPager

// ListVirtualHubsResultResponse is the response envelope for operations that return a ListVirtualHubsResult type.
type ListVirtualHubsResultResponse = original.ListVirtualHubsResultResponse

// Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink to get the next set of results.
type ListVirtualWaNsResult = original.ListVirtualWaNsResult

// ListVirtualWaNsResultPager provides iteration over ListVirtualWaNsResult pages.
type ListVirtualWaNsResultPager = original.ListVirtualWaNsResultPager

// ListVirtualWaNsResultResponse is the response envelope for operations that return a ListVirtualWaNsResult type.
type ListVirtualWaNsResultResponse = original.ListVirtualWaNsResultResponse

// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
// set of results.
type ListVpnConnectionsResult = original.ListVpnConnectionsResult

// ListVpnConnectionsResultPager provides iteration over ListVpnConnectionsResult pages.
type ListVpnConnectionsResultPager = original.ListVpnConnectionsResultPager

// ListVpnConnectionsResultResponse is the response envelope for operations that return a ListVpnConnectionsResult type.
type ListVpnConnectionsResultResponse = original.ListVpnConnectionsResultResponse

// Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink to get the next set of results.
type ListVpnGatewaysResult = original.ListVpnGatewaysResult

// ListVpnGatewaysResultPager provides iteration over ListVpnGatewaysResult pages.
type ListVpnGatewaysResultPager = original.ListVpnGatewaysResultPager

// ListVpnGatewaysResultResponse is the response envelope for operations that return a ListVpnGatewaysResult type.
type ListVpnGatewaysResultResponse = original.ListVpnGatewaysResultResponse

// Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations and a URL nextLink to get the next set of results.
type ListVpnServerConfigurationsResult = original.ListVpnServerConfigurationsResult

// ListVpnServerConfigurationsResultPager provides iteration over ListVpnServerConfigurationsResult pages.
type ListVpnServerConfigurationsResultPager = original.ListVpnServerConfigurationsResultPager

// ListVpnServerConfigurationsResultResponse is the response envelope for operations that return a ListVpnServerConfigurationsResult type.
type ListVpnServerConfigurationsResultResponse = original.ListVpnServerConfigurationsResultResponse

// Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains a list of Vpn Connections and a URL nextLink to get the next
// set of results.
type ListVpnSiteLinkConnectionsResult = original.ListVpnSiteLinkConnectionsResult

// ListVpnSiteLinkConnectionsResultPager provides iteration over ListVpnSiteLinkConnectionsResult pages.
type ListVpnSiteLinkConnectionsResultPager = original.ListVpnSiteLinkConnectionsResultPager

// ListVpnSiteLinkConnectionsResultResponse is the response envelope for operations that return a ListVpnSiteLinkConnectionsResult type.
type ListVpnSiteLinkConnectionsResultResponse = original.ListVpnSiteLinkConnectionsResultResponse

// Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink to get the next set of results.
type ListVpnSiteLinksResult = original.ListVpnSiteLinksResult

// ListVpnSiteLinksResultPager provides iteration over ListVpnSiteLinksResult pages.
type ListVpnSiteLinksResultPager = original.ListVpnSiteLinksResultPager

// ListVpnSiteLinksResultResponse is the response envelope for operations that return a ListVpnSiteLinksResult type.
type ListVpnSiteLinksResultResponse = original.ListVpnSiteLinksResultResponse

// Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the next set of results.
type ListVpnSitesResult = original.ListVpnSitesResult

// ListVpnSitesResultPager provides iteration over ListVpnSitesResult pages.
type ListVpnSitesResultPager = original.ListVpnSitesResultPager

// ListVpnSitesResultResponse is the response envelope for operations that return a ListVpnSitesResult type.
type ListVpnSitesResultResponse = original.ListVpnSitesResultResponse

// LoadBalancer resource.
type LoadBalancer = original.LoadBalancer

// Load balancer backend addresses.
type LoadBalancerBackendAddress = original.LoadBalancerBackendAddress

// Response for ListBackendAddressPool API service call.
type LoadBalancerBackendAddressPoolListResult = original.LoadBalancerBackendAddressPoolListResult

// LoadBalancerBackendAddressPoolListResultPager provides iteration over LoadBalancerBackendAddressPoolListResult pages.
type LoadBalancerBackendAddressPoolListResultPager = original.LoadBalancerBackendAddressPoolListResultPager

// LoadBalancerBackendAddressPoolListResultResponse is the response envelope for operations that return a LoadBalancerBackendAddressPoolListResult type.
type LoadBalancerBackendAddressPoolListResultResponse = original.LoadBalancerBackendAddressPoolListResultResponse

// LoadBalancerBackendAddressPoolsBeginCreateOrUpdateOptions contains the optional parameters for the LoadBalancerBackendAddressPools.BeginCreateOrUpdate
// method.
type LoadBalancerBackendAddressPoolsBeginCreateOrUpdateOptions = original.LoadBalancerBackendAddressPoolsBeginCreateOrUpdateOptions

// LoadBalancerBackendAddressPoolsBeginDeleteOptions contains the optional parameters for the LoadBalancerBackendAddressPools.BeginDelete method.
type LoadBalancerBackendAddressPoolsBeginDeleteOptions = original.LoadBalancerBackendAddressPoolsBeginDeleteOptions

// LoadBalancerBackendAddressPoolsClient contains the methods for the LoadBalancerBackendAddressPools group.
// Don't use this type directly, use NewLoadBalancerBackendAddressPoolsClient() instead.
type LoadBalancerBackendAddressPoolsClient = original.LoadBalancerBackendAddressPoolsClient

// LoadBalancerBackendAddressPoolsGetOptions contains the optional parameters for the LoadBalancerBackendAddressPools.Get method.
type LoadBalancerBackendAddressPoolsGetOptions = original.LoadBalancerBackendAddressPoolsGetOptions

// LoadBalancerBackendAddressPoolsListOptions contains the optional parameters for the LoadBalancerBackendAddressPools.List method.
type LoadBalancerBackendAddressPoolsListOptions = original.LoadBalancerBackendAddressPoolsListOptions

// Properties of the load balancer backend addresses.
type LoadBalancerBackendAddressPropertiesFormat = original.LoadBalancerBackendAddressPropertiesFormat

// Response for ListFrontendIPConfiguration API service call.
type LoadBalancerFrontendIPConfigurationListResult = original.LoadBalancerFrontendIPConfigurationListResult

// LoadBalancerFrontendIPConfigurationListResultPager provides iteration over LoadBalancerFrontendIPConfigurationListResult pages.
type LoadBalancerFrontendIPConfigurationListResultPager = original.LoadBalancerFrontendIPConfigurationListResultPager

// LoadBalancerFrontendIPConfigurationListResultResponse is the response envelope for operations that return a LoadBalancerFrontendIPConfigurationListResult
// type.
type LoadBalancerFrontendIPConfigurationListResultResponse = original.LoadBalancerFrontendIPConfigurationListResultResponse

// LoadBalancerFrontendIPConfigurationsClient contains the methods for the LoadBalancerFrontendIPConfigurations group.
// Don't use this type directly, use NewLoadBalancerFrontendIPConfigurationsClient() instead.
type LoadBalancerFrontendIPConfigurationsClient = original.LoadBalancerFrontendIPConfigurationsClient

// LoadBalancerFrontendIPConfigurationsGetOptions contains the optional parameters for the LoadBalancerFrontendIPConfigurations.Get method.
type LoadBalancerFrontendIPConfigurationsGetOptions = original.LoadBalancerFrontendIPConfigurationsGetOptions

// LoadBalancerFrontendIPConfigurationsListOptions contains the optional parameters for the LoadBalancerFrontendIPConfigurations.List method.
type LoadBalancerFrontendIPConfigurationsListOptions = original.LoadBalancerFrontendIPConfigurationsListOptions

// Response for ListLoadBalancers API service call.
type LoadBalancerListResult = original.LoadBalancerListResult

// LoadBalancerListResultPager provides iteration over LoadBalancerListResult pages.
type LoadBalancerListResultPager = original.LoadBalancerListResultPager

// LoadBalancerListResultResponse is the response envelope for operations that return a LoadBalancerListResult type.
type LoadBalancerListResultResponse = original.LoadBalancerListResultResponse

// Response for ListLoadBalancingRule API service call.
type LoadBalancerLoadBalancingRuleListResult = original.LoadBalancerLoadBalancingRuleListResult

// LoadBalancerLoadBalancingRuleListResultPager provides iteration over LoadBalancerLoadBalancingRuleListResult pages.
type LoadBalancerLoadBalancingRuleListResultPager = original.LoadBalancerLoadBalancingRuleListResultPager

// LoadBalancerLoadBalancingRuleListResultResponse is the response envelope for operations that return a LoadBalancerLoadBalancingRuleListResult type.
type LoadBalancerLoadBalancingRuleListResultResponse = original.LoadBalancerLoadBalancingRuleListResultResponse

// LoadBalancerLoadBalancingRulesClient contains the methods for the LoadBalancerLoadBalancingRules group.
// Don't use this type directly, use NewLoadBalancerLoadBalancingRulesClient() instead.
type LoadBalancerLoadBalancingRulesClient = original.LoadBalancerLoadBalancingRulesClient

// LoadBalancerLoadBalancingRulesGetOptions contains the optional parameters for the LoadBalancerLoadBalancingRules.Get method.
type LoadBalancerLoadBalancingRulesGetOptions = original.LoadBalancerLoadBalancingRulesGetOptions

// LoadBalancerLoadBalancingRulesListOptions contains the optional parameters for the LoadBalancerLoadBalancingRules.List method.
type LoadBalancerLoadBalancingRulesListOptions = original.LoadBalancerLoadBalancingRulesListOptions

// LoadBalancerNetworkInterfacesClient contains the methods for the LoadBalancerNetworkInterfaces group.
// Don't use this type directly, use NewLoadBalancerNetworkInterfacesClient() instead.
type LoadBalancerNetworkInterfacesClient = original.LoadBalancerNetworkInterfacesClient

// LoadBalancerNetworkInterfacesListOptions contains the optional parameters for the LoadBalancerNetworkInterfaces.List method.
type LoadBalancerNetworkInterfacesListOptions = original.LoadBalancerNetworkInterfacesListOptions

// Response for ListOutboundRule API service call.
type LoadBalancerOutboundRuleListResult = original.LoadBalancerOutboundRuleListResult

// LoadBalancerOutboundRuleListResultPager provides iteration over LoadBalancerOutboundRuleListResult pages.
type LoadBalancerOutboundRuleListResultPager = original.LoadBalancerOutboundRuleListResultPager

// LoadBalancerOutboundRuleListResultResponse is the response envelope for operations that return a LoadBalancerOutboundRuleListResult type.
type LoadBalancerOutboundRuleListResultResponse = original.LoadBalancerOutboundRuleListResultResponse

// LoadBalancerOutboundRulesClient contains the methods for the LoadBalancerOutboundRules group.
// Don't use this type directly, use NewLoadBalancerOutboundRulesClient() instead.
type LoadBalancerOutboundRulesClient = original.LoadBalancerOutboundRulesClient

// LoadBalancerOutboundRulesGetOptions contains the optional parameters for the LoadBalancerOutboundRules.Get method.
type LoadBalancerOutboundRulesGetOptions = original.LoadBalancerOutboundRulesGetOptions

// LoadBalancerOutboundRulesListOptions contains the optional parameters for the LoadBalancerOutboundRules.List method.
type LoadBalancerOutboundRulesListOptions = original.LoadBalancerOutboundRulesListOptions

// LoadBalancerPoller provides polling facilities until the operation completes
type LoadBalancerPoller = original.LoadBalancerPoller

// LoadBalancerPollerResponse is the response envelope for operations that asynchronously return a LoadBalancer type.
type LoadBalancerPollerResponse = original.LoadBalancerPollerResponse

// Response for ListProbe API service call.
type LoadBalancerProbeListResult = original.LoadBalancerProbeListResult

// LoadBalancerProbeListResultPager provides iteration over LoadBalancerProbeListResult pages.
type LoadBalancerProbeListResultPager = original.LoadBalancerProbeListResultPager

// LoadBalancerProbeListResultResponse is the response envelope for operations that return a LoadBalancerProbeListResult type.
type LoadBalancerProbeListResultResponse = original.LoadBalancerProbeListResultResponse

// LoadBalancerProbesClient contains the methods for the LoadBalancerProbes group.
// Don't use this type directly, use NewLoadBalancerProbesClient() instead.
type LoadBalancerProbesClient = original.LoadBalancerProbesClient

// LoadBalancerProbesGetOptions contains the optional parameters for the LoadBalancerProbes.Get method.
type LoadBalancerProbesGetOptions = original.LoadBalancerProbesGetOptions

// LoadBalancerProbesListOptions contains the optional parameters for the LoadBalancerProbes.List method.
type LoadBalancerProbesListOptions = original.LoadBalancerProbesListOptions

// Properties of the load balancer.
type LoadBalancerPropertiesFormat = original.LoadBalancerPropertiesFormat

// LoadBalancerResponse is the response envelope for operations that return a LoadBalancer type.
type LoadBalancerResponse = original.LoadBalancerResponse

// SKU of a load balancer.
type LoadBalancerSKU = original.LoadBalancerSKU

// LoadBalancersBeginCreateOrUpdateOptions contains the optional parameters for the LoadBalancers.BeginCreateOrUpdate method.
type LoadBalancersBeginCreateOrUpdateOptions = original.LoadBalancersBeginCreateOrUpdateOptions

// LoadBalancersBeginDeleteOptions contains the optional parameters for the LoadBalancers.BeginDelete method.
type LoadBalancersBeginDeleteOptions = original.LoadBalancersBeginDeleteOptions

// LoadBalancersClient contains the methods for the LoadBalancers group.
// Don't use this type directly, use NewLoadBalancersClient() instead.
type LoadBalancersClient = original.LoadBalancersClient

// LoadBalancersGetOptions contains the optional parameters for the LoadBalancers.Get method.
type LoadBalancersGetOptions = original.LoadBalancersGetOptions

// LoadBalancersListAllOptions contains the optional parameters for the LoadBalancers.ListAll method.
type LoadBalancersListAllOptions = original.LoadBalancersListAllOptions

// LoadBalancersListOptions contains the optional parameters for the LoadBalancers.List method.
type LoadBalancersListOptions = original.LoadBalancersListOptions

// LoadBalancersUpdateTagsOptions contains the optional parameters for the LoadBalancers.UpdateTags method.
type LoadBalancersUpdateTagsOptions = original.LoadBalancersUpdateTagsOptions

// A load balancing rule for a load balancer.
type LoadBalancingRule = original.LoadBalancingRule

// Properties of the load balancer.
type LoadBalancingRulePropertiesFormat = original.LoadBalancingRulePropertiesFormat

// LoadBalancingRuleResponse is the response envelope for operations that return a LoadBalancingRule type.
type LoadBalancingRuleResponse = original.LoadBalancingRuleResponse

// A common class for general resource information.
type LocalNetworkGateway = original.LocalNetworkGateway

// Response for ListLocalNetworkGateways API service call.
type LocalNetworkGatewayListResult = original.LocalNetworkGatewayListResult

// LocalNetworkGatewayListResultPager provides iteration over LocalNetworkGatewayListResult pages.
type LocalNetworkGatewayListResultPager = original.LocalNetworkGatewayListResultPager

// LocalNetworkGatewayListResultResponse is the response envelope for operations that return a LocalNetworkGatewayListResult type.
type LocalNetworkGatewayListResultResponse = original.LocalNetworkGatewayListResultResponse

// LocalNetworkGatewayPoller provides polling facilities until the operation completes
type LocalNetworkGatewayPoller = original.LocalNetworkGatewayPoller

// LocalNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a LocalNetworkGateway type.
type LocalNetworkGatewayPollerResponse = original.LocalNetworkGatewayPollerResponse

// LocalNetworkGateway properties.
type LocalNetworkGatewayPropertiesFormat = original.LocalNetworkGatewayPropertiesFormat

// LocalNetworkGatewayResponse is the response envelope for operations that return a LocalNetworkGateway type.
type LocalNetworkGatewayResponse = original.LocalNetworkGatewayResponse

// LocalNetworkGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the LocalNetworkGateways.BeginCreateOrUpdate method.
type LocalNetworkGatewaysBeginCreateOrUpdateOptions = original.LocalNetworkGatewaysBeginCreateOrUpdateOptions

// LocalNetworkGatewaysBeginDeleteOptions contains the optional parameters for the LocalNetworkGateways.BeginDelete method.
type LocalNetworkGatewaysBeginDeleteOptions = original.LocalNetworkGatewaysBeginDeleteOptions

// LocalNetworkGatewaysClient contains the methods for the LocalNetworkGateways group.
// Don't use this type directly, use NewLocalNetworkGatewaysClient() instead.
type LocalNetworkGatewaysClient = original.LocalNetworkGatewaysClient

// LocalNetworkGatewaysGetOptions contains the optional parameters for the LocalNetworkGateways.Get method.
type LocalNetworkGatewaysGetOptions = original.LocalNetworkGatewaysGetOptions

// LocalNetworkGatewaysListOptions contains the optional parameters for the LocalNetworkGateways.List method.
type LocalNetworkGatewaysListOptions = original.LocalNetworkGatewaysListOptions

// LocalNetworkGatewaysUpdateTagsOptions contains the optional parameters for the LocalNetworkGateways.UpdateTags method.
type LocalNetworkGatewaysUpdateTagsOptions = original.LocalNetworkGatewaysUpdateTagsOptions

// Description of logging specification.
type LogSpecification = original.LogSpecification

// Defines a managed rule group override setting.
type ManagedRuleGroupOverride = original.ManagedRuleGroupOverride

// Defines a managed rule group override setting.
type ManagedRuleOverride = original.ManagedRuleOverride

// Defines a managed rule set.
type ManagedRuleSet = original.ManagedRuleSet

// Allow to exclude some variable satisfy the condition for the WAF check.
type ManagedRulesDefinition = original.ManagedRulesDefinition

// Identity for the resource.
type ManagedServiceIDentity = original.ManagedServiceIDentity

// Define match conditions.
type MatchCondition = original.MatchCondition

// Define match variables.
type MatchVariable = original.MatchVariable

// Matched rule.
type MatchedRule = original.MatchedRule

// Description of metrics specification.
type MetricSpecification = original.MetricSpecification

// Nat Gateway resource.
type NatGateway = original.NatGateway

// Response for ListNatGateways API service call.
type NatGatewayListResult = original.NatGatewayListResult

// NatGatewayListResultPager provides iteration over NatGatewayListResult pages.
type NatGatewayListResultPager = original.NatGatewayListResultPager

// NatGatewayListResultResponse is the response envelope for operations that return a NatGatewayListResult type.
type NatGatewayListResultResponse = original.NatGatewayListResultResponse

// NatGatewayPoller provides polling facilities until the operation completes
type NatGatewayPoller = original.NatGatewayPoller

// NatGatewayPollerResponse is the response envelope for operations that asynchronously return a NatGateway type.
type NatGatewayPollerResponse = original.NatGatewayPollerResponse

// Nat Gateway properties.
type NatGatewayPropertiesFormat = original.NatGatewayPropertiesFormat

// NatGatewayResponse is the response envelope for operations that return a NatGateway type.
type NatGatewayResponse = original.NatGatewayResponse

// SKU of nat gateway.
type NatGatewaySKU = original.NatGatewaySKU

// NatGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the NatGateways.BeginCreateOrUpdate method.
type NatGatewaysBeginCreateOrUpdateOptions = original.NatGatewaysBeginCreateOrUpdateOptions

// NatGatewaysBeginDeleteOptions contains the optional parameters for the NatGateways.BeginDelete method.
type NatGatewaysBeginDeleteOptions = original.NatGatewaysBeginDeleteOptions

// NatGatewaysClient contains the methods for the NatGateways group.
// Don't use this type directly, use NewNatGatewaysClient() instead.
type NatGatewaysClient = original.NatGatewaysClient

// NatGatewaysGetOptions contains the optional parameters for the NatGateways.Get method.
type NatGatewaysGetOptions = original.NatGatewaysGetOptions

// NatGatewaysListAllOptions contains the optional parameters for the NatGateways.ListAll method.
type NatGatewaysListAllOptions = original.NatGatewaysListAllOptions

// NatGatewaysListOptions contains the optional parameters for the NatGateways.List method.
type NatGatewaysListOptions = original.NatGatewaysListOptions

// NatGatewaysUpdateTagsOptions contains the optional parameters for the NatGateways.UpdateTags method.
type NatGatewaysUpdateTagsOptions = original.NatGatewaysUpdateTagsOptions

// Rule of type nat.
type NatRule = original.NatRule

// Parameters to get network configuration diagnostic.
type NetworkConfigurationDiagnosticParameters = original.NetworkConfigurationDiagnosticParameters

// Parameters to compare with network configuration.
type NetworkConfigurationDiagnosticProfile = original.NetworkConfigurationDiagnosticProfile

// Results of network configuration diagnostic on the target resource.
type NetworkConfigurationDiagnosticResponse = original.NetworkConfigurationDiagnosticResponse

// NetworkConfigurationDiagnosticResponsePoller provides polling facilities until the operation completes
type NetworkConfigurationDiagnosticResponsePoller = original.NetworkConfigurationDiagnosticResponsePoller

// NetworkConfigurationDiagnosticResponsePollerResponse is the response envelope for operations that asynchronously return a NetworkConfigurationDiagnosticResponse
// type.
type NetworkConfigurationDiagnosticResponsePollerResponse = original.NetworkConfigurationDiagnosticResponsePollerResponse

// NetworkConfigurationDiagnosticResponseResponse is the response envelope for operations that return a NetworkConfigurationDiagnosticResponse type.
type NetworkConfigurationDiagnosticResponseResponse = original.NetworkConfigurationDiagnosticResponseResponse

// Network configuration diagnostic result corresponded to provided traffic query.
type NetworkConfigurationDiagnosticResult = original.NetworkConfigurationDiagnosticResult

// Network Intent Policy resource.
type NetworkIntentPolicy = original.NetworkIntentPolicy

// Details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.
type NetworkIntentPolicyConfiguration = original.NetworkIntentPolicyConfiguration

// A network interface in a resource group.
type NetworkInterface = original.NetworkInterface

// Network interface and its custom security rules.
type NetworkInterfaceAssociation = original.NetworkInterfaceAssociation

// DNS settings of a network interface.
type NetworkInterfaceDNSSettings = original.NetworkInterfaceDNSSettings

// IPConfiguration in a network interface.
type NetworkInterfaceIPConfiguration = original.NetworkInterfaceIPConfiguration

// Response for list ip configurations API service call.
type NetworkInterfaceIPConfigurationListResult = original.NetworkInterfaceIPConfigurationListResult

// NetworkInterfaceIPConfigurationListResultPager provides iteration over NetworkInterfaceIPConfigurationListResult pages.
type NetworkInterfaceIPConfigurationListResultPager = original.NetworkInterfaceIPConfigurationListResultPager

// NetworkInterfaceIPConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceIPConfigurationListResult type.
type NetworkInterfaceIPConfigurationListResultResponse = original.NetworkInterfaceIPConfigurationListResultResponse

// PrivateLinkConnection properties for the network interface.
type NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties = original.NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties

// Properties of IP configuration.
type NetworkInterfaceIPConfigurationPropertiesFormat = original.NetworkInterfaceIPConfigurationPropertiesFormat

// NetworkInterfaceIPConfigurationResponse is the response envelope for operations that return a NetworkInterfaceIPConfiguration type.
type NetworkInterfaceIPConfigurationResponse = original.NetworkInterfaceIPConfigurationResponse

// NetworkInterfaceIPConfigurationsClient contains the methods for the NetworkInterfaceIPConfigurations group.
// Don't use this type directly, use NewNetworkInterfaceIPConfigurationsClient() instead.
type NetworkInterfaceIPConfigurationsClient = original.NetworkInterfaceIPConfigurationsClient

// NetworkInterfaceIPConfigurationsGetOptions contains the optional parameters for the NetworkInterfaceIPConfigurations.Get method.
type NetworkInterfaceIPConfigurationsGetOptions = original.NetworkInterfaceIPConfigurationsGetOptions

// NetworkInterfaceIPConfigurationsListOptions contains the optional parameters for the NetworkInterfaceIPConfigurations.List method.
type NetworkInterfaceIPConfigurationsListOptions = original.NetworkInterfaceIPConfigurationsListOptions

// Response for the ListNetworkInterface API service call.
type NetworkInterfaceListResult = original.NetworkInterfaceListResult

// NetworkInterfaceListResultPager provides iteration over NetworkInterfaceListResult pages.
type NetworkInterfaceListResultPager = original.NetworkInterfaceListResultPager

// NetworkInterfaceListResultResponse is the response envelope for operations that return a NetworkInterfaceListResult type.
type NetworkInterfaceListResultResponse = original.NetworkInterfaceListResultResponse

// Response for list ip configurations API service call.
type NetworkInterfaceLoadBalancerListResult = original.NetworkInterfaceLoadBalancerListResult

// NetworkInterfaceLoadBalancerListResultPager provides iteration over NetworkInterfaceLoadBalancerListResult pages.
type NetworkInterfaceLoadBalancerListResultPager = original.NetworkInterfaceLoadBalancerListResultPager

// NetworkInterfaceLoadBalancerListResultResponse is the response envelope for operations that return a NetworkInterfaceLoadBalancerListResult type.
type NetworkInterfaceLoadBalancerListResultResponse = original.NetworkInterfaceLoadBalancerListResultResponse

// NetworkInterfaceLoadBalancersClient contains the methods for the NetworkInterfaceLoadBalancers group.
// Don't use this type directly, use NewNetworkInterfaceLoadBalancersClient() instead.
type NetworkInterfaceLoadBalancersClient = original.NetworkInterfaceLoadBalancersClient

// NetworkInterfaceLoadBalancersListOptions contains the optional parameters for the NetworkInterfaceLoadBalancers.List method.
type NetworkInterfaceLoadBalancersListOptions = original.NetworkInterfaceLoadBalancersListOptions

// NetworkInterfacePoller provides polling facilities until the operation completes
type NetworkInterfacePoller = original.NetworkInterfacePoller

// NetworkInterfacePollerResponse is the response envelope for operations that asynchronously return a NetworkInterface type.
type NetworkInterfacePollerResponse = original.NetworkInterfacePollerResponse

// NetworkInterface properties.
type NetworkInterfacePropertiesFormat = original.NetworkInterfacePropertiesFormat

// NetworkInterfaceResponse is the response envelope for operations that return a NetworkInterface type.
type NetworkInterfaceResponse = original.NetworkInterfaceResponse

// Tap configuration in a Network Interface.
type NetworkInterfaceTapConfiguration = original.NetworkInterfaceTapConfiguration

// Response for list tap configurations API service call.
type NetworkInterfaceTapConfigurationListResult = original.NetworkInterfaceTapConfigurationListResult

// NetworkInterfaceTapConfigurationListResultPager provides iteration over NetworkInterfaceTapConfigurationListResult pages.
type NetworkInterfaceTapConfigurationListResultPager = original.NetworkInterfaceTapConfigurationListResultPager

// NetworkInterfaceTapConfigurationListResultResponse is the response envelope for operations that return a NetworkInterfaceTapConfigurationListResult type.
type NetworkInterfaceTapConfigurationListResultResponse = original.NetworkInterfaceTapConfigurationListResultResponse

// NetworkInterfaceTapConfigurationPoller provides polling facilities until the operation completes
type NetworkInterfaceTapConfigurationPoller = original.NetworkInterfaceTapConfigurationPoller

// NetworkInterfaceTapConfigurationPollerResponse is the response envelope for operations that asynchronously return a NetworkInterfaceTapConfiguration
// type.
type NetworkInterfaceTapConfigurationPollerResponse = original.NetworkInterfaceTapConfigurationPollerResponse

// Properties of Virtual Network Tap configuration.
type NetworkInterfaceTapConfigurationPropertiesFormat = original.NetworkInterfaceTapConfigurationPropertiesFormat

// NetworkInterfaceTapConfigurationResponse is the response envelope for operations that return a NetworkInterfaceTapConfiguration type.
type NetworkInterfaceTapConfigurationResponse = original.NetworkInterfaceTapConfigurationResponse

// NetworkInterfaceTapConfigurationsBeginCreateOrUpdateOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.BeginCreateOrUpdate
// method.
type NetworkInterfaceTapConfigurationsBeginCreateOrUpdateOptions = original.NetworkInterfaceTapConfigurationsBeginCreateOrUpdateOptions

// NetworkInterfaceTapConfigurationsBeginDeleteOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.BeginDelete method.
type NetworkInterfaceTapConfigurationsBeginDeleteOptions = original.NetworkInterfaceTapConfigurationsBeginDeleteOptions

// NetworkInterfaceTapConfigurationsClient contains the methods for the NetworkInterfaceTapConfigurations group.
// Don't use this type directly, use NewNetworkInterfaceTapConfigurationsClient() instead.
type NetworkInterfaceTapConfigurationsClient = original.NetworkInterfaceTapConfigurationsClient

// NetworkInterfaceTapConfigurationsGetOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.Get method.
type NetworkInterfaceTapConfigurationsGetOptions = original.NetworkInterfaceTapConfigurationsGetOptions

// NetworkInterfaceTapConfigurationsListOptions contains the optional parameters for the NetworkInterfaceTapConfigurations.List method.
type NetworkInterfaceTapConfigurationsListOptions = original.NetworkInterfaceTapConfigurationsListOptions

// NetworkInterfacesBeginCreateOrUpdateOptions contains the optional parameters for the NetworkInterfaces.BeginCreateOrUpdate method.
type NetworkInterfacesBeginCreateOrUpdateOptions = original.NetworkInterfacesBeginCreateOrUpdateOptions

// NetworkInterfacesBeginDeleteOptions contains the optional parameters for the NetworkInterfaces.BeginDelete method.
type NetworkInterfacesBeginDeleteOptions = original.NetworkInterfacesBeginDeleteOptions

// NetworkInterfacesBeginGetEffectiveRouteTableOptions contains the optional parameters for the NetworkInterfaces.BeginGetEffectiveRouteTable method.
type NetworkInterfacesBeginGetEffectiveRouteTableOptions = original.NetworkInterfacesBeginGetEffectiveRouteTableOptions

// NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsOptions contains the optional parameters for the NetworkInterfaces.BeginListEffectiveNetworkSecurityGroups
// method.
type NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsOptions = original.NetworkInterfacesBeginListEffectiveNetworkSecurityGroupsOptions

// NetworkInterfacesClient contains the methods for the NetworkInterfaces group.
// Don't use this type directly, use NewNetworkInterfacesClient() instead.
type NetworkInterfacesClient = original.NetworkInterfacesClient

// NetworkInterfacesGetCloudServiceNetworkInterfaceOptions contains the optional parameters for the NetworkInterfaces.GetCloudServiceNetworkInterface method.
type NetworkInterfacesGetCloudServiceNetworkInterfaceOptions = original.NetworkInterfacesGetCloudServiceNetworkInterfaceOptions

// NetworkInterfacesGetOptions contains the optional parameters for the NetworkInterfaces.Get method.
type NetworkInterfacesGetOptions = original.NetworkInterfacesGetOptions

// NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions contains the optional parameters for the NetworkInterfaces.GetVirtualMachineScaleSetIPConfiguration
// method.
type NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions = original.NetworkInterfacesGetVirtualMachineScaleSetIPConfigurationOptions

// NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions contains the optional parameters for the NetworkInterfaces.GetVirtualMachineScaleSetNetworkInterface
// method.
type NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions = original.NetworkInterfacesGetVirtualMachineScaleSetNetworkInterfaceOptions

// NetworkInterfacesListAllOptions contains the optional parameters for the NetworkInterfaces.ListAll method.
type NetworkInterfacesListAllOptions = original.NetworkInterfacesListAllOptions

// NetworkInterfacesListCloudServiceNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListCloudServiceNetworkInterfaces
// method.
type NetworkInterfacesListCloudServiceNetworkInterfacesOptions = original.NetworkInterfacesListCloudServiceNetworkInterfacesOptions

// NetworkInterfacesListCloudServiceRoleInstanceNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListCloudServiceRoleInstanceNetworkInterfaces
// method.
type NetworkInterfacesListCloudServiceRoleInstanceNetworkInterfacesOptions = original.NetworkInterfacesListCloudServiceRoleInstanceNetworkInterfacesOptions

// NetworkInterfacesListOptions contains the optional parameters for the NetworkInterfaces.List method.
type NetworkInterfacesListOptions = original.NetworkInterfacesListOptions

// NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetIPConfigurations
// method.
type NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions = original.NetworkInterfacesListVirtualMachineScaleSetIPConfigurationsOptions

// NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetNetworkInterfaces
// method.
type NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions = original.NetworkInterfacesListVirtualMachineScaleSetNetworkInterfacesOptions

// NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions contains the optional parameters for the NetworkInterfaces.ListVirtualMachineScaleSetVMNetworkInterfaces
// method.
type NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions = original.NetworkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesOptions

// NetworkInterfacesUpdateTagsOptions contains the optional parameters for the NetworkInterfaces.UpdateTags method.
type NetworkInterfacesUpdateTagsOptions = original.NetworkInterfacesUpdateTagsOptions

// NetworkManagementClient contains the methods for the NetworkManagementClient group.
// Don't use this type directly, use NewNetworkManagementClient() instead.
type NetworkManagementClient = original.NetworkManagementClient

// NetworkManagementClientBeginDeleteBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.BeginDeleteBastionShareableLink
// method.
type NetworkManagementClientBeginDeleteBastionShareableLinkOptions = original.NetworkManagementClientBeginDeleteBastionShareableLinkOptions

// NetworkManagementClientBeginGeneratevirtualwanvpnserverconfigurationvpnprofileOptions contains the optional parameters for the NetworkManagementClient.BeginGeneratevirtualwanvpnserverconfigurationvpnprofile
// method.
type NetworkManagementClientBeginGeneratevirtualwanvpnserverconfigurationvpnprofileOptions = original.NetworkManagementClientBeginGeneratevirtualwanvpnserverconfigurationvpnprofileOptions

// NetworkManagementClientBeginGetActiveSessionsOptions contains the optional parameters for the NetworkManagementClient.BeginGetActiveSessions method.
type NetworkManagementClientBeginGetActiveSessionsOptions = original.NetworkManagementClientBeginGetActiveSessionsOptions

// NetworkManagementClientBeginPutBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.BeginPutBastionShareableLink
// method.
type NetworkManagementClientBeginPutBastionShareableLinkOptions = original.NetworkManagementClientBeginPutBastionShareableLinkOptions

// NetworkManagementClientCheckDNSNameAvailabilityOptions contains the optional parameters for the NetworkManagementClient.CheckDNSNameAvailability method.
type NetworkManagementClientCheckDNSNameAvailabilityOptions = original.NetworkManagementClientCheckDNSNameAvailabilityOptions

// NetworkManagementClientDisconnectActiveSessionsOptions contains the optional parameters for the NetworkManagementClient.DisconnectActiveSessions method.
type NetworkManagementClientDisconnectActiveSessionsOptions = original.NetworkManagementClientDisconnectActiveSessionsOptions

// NetworkManagementClientGetBastionShareableLinkOptions contains the optional parameters for the NetworkManagementClient.GetBastionShareableLink method.
type NetworkManagementClientGetBastionShareableLinkOptions = original.NetworkManagementClientGetBastionShareableLinkOptions

// NetworkManagementClientSupportedSecurityProvidersOptions contains the optional parameters for the NetworkManagementClient.SupportedSecurityProviders
// method.
type NetworkManagementClientSupportedSecurityProvidersOptions = original.NetworkManagementClientSupportedSecurityProvidersOptions

// Network profile resource.
type NetworkProfile = original.NetworkProfile

// Response for ListNetworkProfiles API service call.
type NetworkProfileListResult = original.NetworkProfileListResult

// NetworkProfileListResultPager provides iteration over NetworkProfileListResult pages.
type NetworkProfileListResultPager = original.NetworkProfileListResultPager

// NetworkProfileListResultResponse is the response envelope for operations that return a NetworkProfileListResult type.
type NetworkProfileListResultResponse = original.NetworkProfileListResultResponse

// Network profile properties.
type NetworkProfilePropertiesFormat = original.NetworkProfilePropertiesFormat

// NetworkProfileResponse is the response envelope for operations that return a NetworkProfile type.
type NetworkProfileResponse = original.NetworkProfileResponse

// NetworkProfilesBeginDeleteOptions contains the optional parameters for the NetworkProfiles.BeginDelete method.
type NetworkProfilesBeginDeleteOptions = original.NetworkProfilesBeginDeleteOptions

// NetworkProfilesClient contains the methods for the NetworkProfiles group.
// Don't use this type directly, use NewNetworkProfilesClient() instead.
type NetworkProfilesClient = original.NetworkProfilesClient

// NetworkProfilesCreateOrUpdateOptions contains the optional parameters for the NetworkProfiles.CreateOrUpdate method.
type NetworkProfilesCreateOrUpdateOptions = original.NetworkProfilesCreateOrUpdateOptions

// NetworkProfilesGetOptions contains the optional parameters for the NetworkProfiles.Get method.
type NetworkProfilesGetOptions = original.NetworkProfilesGetOptions

// NetworkProfilesListAllOptions contains the optional parameters for the NetworkProfiles.ListAll method.
type NetworkProfilesListAllOptions = original.NetworkProfilesListAllOptions

// NetworkProfilesListOptions contains the optional parameters for the NetworkProfiles.List method.
type NetworkProfilesListOptions = original.NetworkProfilesListOptions

// NetworkProfilesUpdateTagsOptions contains the optional parameters for the NetworkProfiles.UpdateTags method.
type NetworkProfilesUpdateTagsOptions = original.NetworkProfilesUpdateTagsOptions

// Rule of type network.
type NetworkRule = original.NetworkRule

// NetworkSecurityGroup resource.
type NetworkSecurityGroup = original.NetworkSecurityGroup

// Response for ListNetworkSecurityGroups API service call.
type NetworkSecurityGroupListResult = original.NetworkSecurityGroupListResult

// NetworkSecurityGroupListResultPager provides iteration over NetworkSecurityGroupListResult pages.
type NetworkSecurityGroupListResultPager = original.NetworkSecurityGroupListResultPager

// NetworkSecurityGroupListResultResponse is the response envelope for operations that return a NetworkSecurityGroupListResult type.
type NetworkSecurityGroupListResultResponse = original.NetworkSecurityGroupListResultResponse

// NetworkSecurityGroupPoller provides polling facilities until the operation completes
type NetworkSecurityGroupPoller = original.NetworkSecurityGroupPoller

// NetworkSecurityGroupPollerResponse is the response envelope for operations that asynchronously return a NetworkSecurityGroup type.
type NetworkSecurityGroupPollerResponse = original.NetworkSecurityGroupPollerResponse

// Network Security Group resource.
type NetworkSecurityGroupPropertiesFormat = original.NetworkSecurityGroupPropertiesFormat

// NetworkSecurityGroupResponse is the response envelope for operations that return a NetworkSecurityGroup type.
type NetworkSecurityGroupResponse = original.NetworkSecurityGroupResponse

// Network configuration diagnostic result corresponded provided traffic query.
type NetworkSecurityGroupResult = original.NetworkSecurityGroupResult

// NetworkSecurityGroupsBeginCreateOrUpdateOptions contains the optional parameters for the NetworkSecurityGroups.BeginCreateOrUpdate method.
type NetworkSecurityGroupsBeginCreateOrUpdateOptions = original.NetworkSecurityGroupsBeginCreateOrUpdateOptions

// NetworkSecurityGroupsBeginDeleteOptions contains the optional parameters for the NetworkSecurityGroups.BeginDelete method.
type NetworkSecurityGroupsBeginDeleteOptions = original.NetworkSecurityGroupsBeginDeleteOptions

// NetworkSecurityGroupsClient contains the methods for the NetworkSecurityGroups group.
// Don't use this type directly, use NewNetworkSecurityGroupsClient() instead.
type NetworkSecurityGroupsClient = original.NetworkSecurityGroupsClient

// NetworkSecurityGroupsGetOptions contains the optional parameters for the NetworkSecurityGroups.Get method.
type NetworkSecurityGroupsGetOptions = original.NetworkSecurityGroupsGetOptions

// NetworkSecurityGroupsListAllOptions contains the optional parameters for the NetworkSecurityGroups.ListAll method.
type NetworkSecurityGroupsListAllOptions = original.NetworkSecurityGroupsListAllOptions

// NetworkSecurityGroupsListOptions contains the optional parameters for the NetworkSecurityGroups.List method.
type NetworkSecurityGroupsListOptions = original.NetworkSecurityGroupsListOptions

// NetworkSecurityGroupsUpdateTagsOptions contains the optional parameters for the NetworkSecurityGroups.UpdateTags method.
type NetworkSecurityGroupsUpdateTagsOptions = original.NetworkSecurityGroupsUpdateTagsOptions

// Network security rules evaluation result.
type NetworkSecurityRulesEvaluationResult = original.NetworkSecurityRulesEvaluationResult

// NetworkVirtualAppliance Resource.
type NetworkVirtualAppliance = original.NetworkVirtualAppliance

// Response for ListNetworkVirtualAppliances API service call.
type NetworkVirtualApplianceListResult = original.NetworkVirtualApplianceListResult

// NetworkVirtualApplianceListResultPager provides iteration over NetworkVirtualApplianceListResult pages.
type NetworkVirtualApplianceListResultPager = original.NetworkVirtualApplianceListResultPager

// NetworkVirtualApplianceListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceListResult type.
type NetworkVirtualApplianceListResultResponse = original.NetworkVirtualApplianceListResultResponse

// NetworkVirtualAppliancePoller provides polling facilities until the operation completes
type NetworkVirtualAppliancePoller = original.NetworkVirtualAppliancePoller

// NetworkVirtualAppliancePollerResponse is the response envelope for operations that asynchronously return a NetworkVirtualAppliance type.
type NetworkVirtualAppliancePollerResponse = original.NetworkVirtualAppliancePollerResponse

// Network Virtual Appliance definition.
type NetworkVirtualAppliancePropertiesFormat = original.NetworkVirtualAppliancePropertiesFormat

// NetworkVirtualApplianceResponse is the response envelope for operations that return a NetworkVirtualAppliance type.
type NetworkVirtualApplianceResponse = original.NetworkVirtualApplianceResponse

// Definition of the NetworkVirtualApplianceSkus resource.
type NetworkVirtualApplianceSKU = original.NetworkVirtualApplianceSKU

// List of available Sku and instances.
type NetworkVirtualApplianceSKUInstances = original.NetworkVirtualApplianceSKUInstances

// Response for ListNetworkVirtualApplianceSkus API service call.
type NetworkVirtualApplianceSKUListResult = original.NetworkVirtualApplianceSKUListResult

// NetworkVirtualApplianceSKUListResultPager provides iteration over NetworkVirtualApplianceSKUListResult pages.
type NetworkVirtualApplianceSKUListResultPager = original.NetworkVirtualApplianceSKUListResultPager

// NetworkVirtualApplianceSKUListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSKUListResult type.
type NetworkVirtualApplianceSKUListResultResponse = original.NetworkVirtualApplianceSKUListResultResponse

// Properties specific to NetworkVirtualApplianceSkus.
type NetworkVirtualApplianceSKUPropertiesFormat = original.NetworkVirtualApplianceSKUPropertiesFormat

// NetworkVirtualApplianceSKUResponse is the response envelope for operations that return a NetworkVirtualApplianceSKU type.
type NetworkVirtualApplianceSKUResponse = original.NetworkVirtualApplianceSKUResponse

// Response for ListNetworkVirtualApplianceSites API service call.
type NetworkVirtualApplianceSiteListResult = original.NetworkVirtualApplianceSiteListResult

// NetworkVirtualApplianceSiteListResultPager provides iteration over NetworkVirtualApplianceSiteListResult pages.
type NetworkVirtualApplianceSiteListResultPager = original.NetworkVirtualApplianceSiteListResultPager

// NetworkVirtualApplianceSiteListResultResponse is the response envelope for operations that return a NetworkVirtualApplianceSiteListResult type.
type NetworkVirtualApplianceSiteListResultResponse = original.NetworkVirtualApplianceSiteListResultResponse

// NetworkVirtualAppliancesBeginCreateOrUpdateOptions contains the optional parameters for the NetworkVirtualAppliances.BeginCreateOrUpdate method.
type NetworkVirtualAppliancesBeginCreateOrUpdateOptions = original.NetworkVirtualAppliancesBeginCreateOrUpdateOptions

// NetworkVirtualAppliancesBeginDeleteOptions contains the optional parameters for the NetworkVirtualAppliances.BeginDelete method.
type NetworkVirtualAppliancesBeginDeleteOptions = original.NetworkVirtualAppliancesBeginDeleteOptions

// NetworkVirtualAppliancesClient contains the methods for the NetworkVirtualAppliances group.
// Don't use this type directly, use NewNetworkVirtualAppliancesClient() instead.
type NetworkVirtualAppliancesClient = original.NetworkVirtualAppliancesClient

// NetworkVirtualAppliancesGetOptions contains the optional parameters for the NetworkVirtualAppliances.Get method.
type NetworkVirtualAppliancesGetOptions = original.NetworkVirtualAppliancesGetOptions

// NetworkVirtualAppliancesListByResourceGroupOptions contains the optional parameters for the NetworkVirtualAppliances.ListByResourceGroup method.
type NetworkVirtualAppliancesListByResourceGroupOptions = original.NetworkVirtualAppliancesListByResourceGroupOptions

// NetworkVirtualAppliancesListOptions contains the optional parameters for the NetworkVirtualAppliances.List method.
type NetworkVirtualAppliancesListOptions = original.NetworkVirtualAppliancesListOptions

// NetworkVirtualAppliancesUpdateTagsOptions contains the optional parameters for the NetworkVirtualAppliances.UpdateTags method.
type NetworkVirtualAppliancesUpdateTagsOptions = original.NetworkVirtualAppliancesUpdateTagsOptions

// Network watcher in a resource group.
type NetworkWatcher = original.NetworkWatcher

// Response for ListNetworkWatchers API service call.
type NetworkWatcherListResult = original.NetworkWatcherListResult

// NetworkWatcherListResultResponse is the response envelope for operations that return a NetworkWatcherListResult type.
type NetworkWatcherListResultResponse = original.NetworkWatcherListResultResponse

// The network watcher properties.
type NetworkWatcherPropertiesFormat = original.NetworkWatcherPropertiesFormat

// NetworkWatcherResponse is the response envelope for operations that return a NetworkWatcher type.
type NetworkWatcherResponse = original.NetworkWatcherResponse

// NetworkWatchersBeginCheckConnectivityOptions contains the optional parameters for the NetworkWatchers.BeginCheckConnectivity method.
type NetworkWatchersBeginCheckConnectivityOptions = original.NetworkWatchersBeginCheckConnectivityOptions

// NetworkWatchersBeginDeleteOptions contains the optional parameters for the NetworkWatchers.BeginDelete method.
type NetworkWatchersBeginDeleteOptions = original.NetworkWatchersBeginDeleteOptions

// NetworkWatchersBeginGetAzureReachabilityReportOptions contains the optional parameters for the NetworkWatchers.BeginGetAzureReachabilityReport method.
type NetworkWatchersBeginGetAzureReachabilityReportOptions = original.NetworkWatchersBeginGetAzureReachabilityReportOptions

// NetworkWatchersBeginGetFlowLogStatusOptions contains the optional parameters for the NetworkWatchers.BeginGetFlowLogStatus method.
type NetworkWatchersBeginGetFlowLogStatusOptions = original.NetworkWatchersBeginGetFlowLogStatusOptions

// NetworkWatchersBeginGetNetworkConfigurationDiagnosticOptions contains the optional parameters for the NetworkWatchers.BeginGetNetworkConfigurationDiagnostic
// method.
type NetworkWatchersBeginGetNetworkConfigurationDiagnosticOptions = original.NetworkWatchersBeginGetNetworkConfigurationDiagnosticOptions

// NetworkWatchersBeginGetNextHopOptions contains the optional parameters for the NetworkWatchers.BeginGetNextHop method.
type NetworkWatchersBeginGetNextHopOptions = original.NetworkWatchersBeginGetNextHopOptions

// NetworkWatchersBeginGetTroubleshootingOptions contains the optional parameters for the NetworkWatchers.BeginGetTroubleshooting method.
type NetworkWatchersBeginGetTroubleshootingOptions = original.NetworkWatchersBeginGetTroubleshootingOptions

// NetworkWatchersBeginGetTroubleshootingResultOptions contains the optional parameters for the NetworkWatchers.BeginGetTroubleshootingResult method.
type NetworkWatchersBeginGetTroubleshootingResultOptions = original.NetworkWatchersBeginGetTroubleshootingResultOptions

// NetworkWatchersBeginGetVMSecurityRulesOptions contains the optional parameters for the NetworkWatchers.BeginGetVMSecurityRules method.
type NetworkWatchersBeginGetVMSecurityRulesOptions = original.NetworkWatchersBeginGetVMSecurityRulesOptions

// NetworkWatchersBeginListAvailableProvidersOptions contains the optional parameters for the NetworkWatchers.BeginListAvailableProviders method.
type NetworkWatchersBeginListAvailableProvidersOptions = original.NetworkWatchersBeginListAvailableProvidersOptions

// NetworkWatchersBeginSetFlowLogConfigurationOptions contains the optional parameters for the NetworkWatchers.BeginSetFlowLogConfiguration method.
type NetworkWatchersBeginSetFlowLogConfigurationOptions = original.NetworkWatchersBeginSetFlowLogConfigurationOptions

// NetworkWatchersBeginVerifyIPFlowOptions contains the optional parameters for the NetworkWatchers.BeginVerifyIPFlow method.
type NetworkWatchersBeginVerifyIPFlowOptions = original.NetworkWatchersBeginVerifyIPFlowOptions

// NetworkWatchersClient contains the methods for the NetworkWatchers group.
// Don't use this type directly, use NewNetworkWatchersClient() instead.
type NetworkWatchersClient = original.NetworkWatchersClient

// NetworkWatchersCreateOrUpdateOptions contains the optional parameters for the NetworkWatchers.CreateOrUpdate method.
type NetworkWatchersCreateOrUpdateOptions = original.NetworkWatchersCreateOrUpdateOptions

// NetworkWatchersGetOptions contains the optional parameters for the NetworkWatchers.Get method.
type NetworkWatchersGetOptions = original.NetworkWatchersGetOptions

// NetworkWatchersGetTopologyOptions contains the optional parameters for the NetworkWatchers.GetTopology method.
type NetworkWatchersGetTopologyOptions = original.NetworkWatchersGetTopologyOptions

// NetworkWatchersListAllOptions contains the optional parameters for the NetworkWatchers.ListAll method.
type NetworkWatchersListAllOptions = original.NetworkWatchersListAllOptions

// NetworkWatchersListOptions contains the optional parameters for the NetworkWatchers.List method.
type NetworkWatchersListOptions = original.NetworkWatchersListOptions

// NetworkWatchersUpdateTagsOptions contains the optional parameters for the NetworkWatchers.UpdateTags method.
type NetworkWatchersUpdateTagsOptions = original.NetworkWatchersUpdateTagsOptions

// Parameters that define the source and destination endpoint.
type NextHopParameters = original.NextHopParameters

// The information about next hop from the specified VM.
type NextHopResult = original.NextHopResult

// NextHopResultPoller provides polling facilities until the operation completes
type NextHopResultPoller = original.NextHopResultPoller

// NextHopResultPollerResponse is the response envelope for operations that asynchronously return a NextHopResult type.
type NextHopResultPollerResponse = original.NextHopResultPollerResponse

// NextHopResultResponse is the response envelope for operations that return a NextHopResult type.
type NextHopResultResponse = original.NextHopResultResponse

// Office365 breakout categories.
type O365BreakOutCategoryPolicies = original.O365BreakOutCategoryPolicies

// The Office365 breakout policy.
type O365PolicyProperties = original.O365PolicyProperties

// Network Virtual Appliance Sku Properties.
type Office365PolicyProperties = original.Office365PolicyProperties

// Network REST API operation definition.
type Operation = original.Operation

// Display metadata associated with the operation.
type OperationDisplay = original.OperationDisplay

// Result of the request to list Network operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult = original.OperationListResult

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager = original.OperationListResultPager

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse = original.OperationListResultResponse

// Description of operation properties format.
type OperationPropertiesFormat = original.OperationPropertiesFormat

// Specification of the service.
type OperationPropertiesFormatServiceSpecification = original.OperationPropertiesFormatServiceSpecification

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient = original.OperationsClient

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions = original.OperationsListOptions

// Outbound rule of the load balancer.
type OutboundRule = original.OutboundRule

// Outbound rule of the load balancer.
type OutboundRulePropertiesFormat = original.OutboundRulePropertiesFormat

// OutboundRuleResponse is the response envelope for operations that return a OutboundRule type.
type OutboundRuleResponse = original.OutboundRuleResponse

// Allow to exclude some variable satisfy the condition for the WAF check.
type OwaspCrsExclusionEntry = original.OwaspCrsExclusionEntry

// P2SConnectionConfiguration Resource.
type P2SConnectionConfiguration = original.P2SConnectionConfiguration

// Parameters for P2SConnectionConfiguration.
type P2SConnectionConfigurationProperties = original.P2SConnectionConfigurationProperties

// P2S Vpn connection detailed health written to sas url.
type P2SVpnConnectionHealth = original.P2SVpnConnectionHealth

// P2SVpnConnectionHealthPoller provides polling facilities until the operation completes
type P2SVpnConnectionHealthPoller = original.P2SVpnConnectionHealthPoller

// P2SVpnConnectionHealthPollerResponse is the response envelope for operations that asynchronously return a P2SVpnConnectionHealth type.
type P2SVpnConnectionHealthPollerResponse = original.P2SVpnConnectionHealthPollerResponse

// List of P2S Vpn connection health request.
type P2SVpnConnectionHealthRequest = original.P2SVpnConnectionHealthRequest

// P2SVpnConnectionHealthResponse is the response envelope for operations that return a P2SVpnConnectionHealth type.
type P2SVpnConnectionHealthResponse = original.P2SVpnConnectionHealthResponse

// List of p2s vpn connections to be disconnected.
type P2SVpnConnectionRequest = original.P2SVpnConnectionRequest

// P2SVpnGateway Resource.
type P2SVpnGateway = original.P2SVpnGateway

// P2SVpnGatewayPoller provides polling facilities until the operation completes
type P2SVpnGatewayPoller = original.P2SVpnGatewayPoller

// P2SVpnGatewayPollerResponse is the response envelope for operations that asynchronously return a P2SVpnGateway type.
type P2SVpnGatewayPollerResponse = original.P2SVpnGatewayPollerResponse

// Parameters for P2SVpnGateway.
type P2SVpnGatewayProperties = original.P2SVpnGatewayProperties

// P2SVpnGatewayResponse is the response envelope for operations that return a P2SVpnGateway type.
type P2SVpnGatewayResponse = original.P2SVpnGatewayResponse

// P2SVpnGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the P2SVpnGateways.BeginCreateOrUpdate method.
type P2SVpnGatewaysBeginCreateOrUpdateOptions = original.P2SVpnGatewaysBeginCreateOrUpdateOptions

// P2SVpnGatewaysBeginDeleteOptions contains the optional parameters for the P2SVpnGateways.BeginDelete method.
type P2SVpnGatewaysBeginDeleteOptions = original.P2SVpnGatewaysBeginDeleteOptions

// P2SVpnGatewaysBeginDisconnectP2SVpnConnectionsOptions contains the optional parameters for the P2SVpnGateways.BeginDisconnectP2SVpnConnections method.
type P2SVpnGatewaysBeginDisconnectP2SVpnConnectionsOptions = original.P2SVpnGatewaysBeginDisconnectP2SVpnConnectionsOptions

// P2SVpnGatewaysBeginGenerateVpnProfileOptions contains the optional parameters for the P2SVpnGateways.BeginGenerateVpnProfile method.
type P2SVpnGatewaysBeginGenerateVpnProfileOptions = original.P2SVpnGatewaysBeginGenerateVpnProfileOptions

// P2SVpnGatewaysBeginGetP2SVpnConnectionHealthDetailedOptions contains the optional parameters for the P2SVpnGateways.BeginGetP2SVpnConnectionHealthDetailed
// method.
type P2SVpnGatewaysBeginGetP2SVpnConnectionHealthDetailedOptions = original.P2SVpnGatewaysBeginGetP2SVpnConnectionHealthDetailedOptions

// P2SVpnGatewaysBeginGetP2SVpnConnectionHealthOptions contains the optional parameters for the P2SVpnGateways.BeginGetP2SVpnConnectionHealth method.
type P2SVpnGatewaysBeginGetP2SVpnConnectionHealthOptions = original.P2SVpnGatewaysBeginGetP2SVpnConnectionHealthOptions

// P2SVpnGatewaysBeginResetOptions contains the optional parameters for the P2SVpnGateways.BeginReset method.
type P2SVpnGatewaysBeginResetOptions = original.P2SVpnGatewaysBeginResetOptions

// P2SVpnGatewaysBeginUpdateTagsOptions contains the optional parameters for the P2SVpnGateways.BeginUpdateTags method.
type P2SVpnGatewaysBeginUpdateTagsOptions = original.P2SVpnGatewaysBeginUpdateTagsOptions

// P2SVpnGatewaysClient contains the methods for the P2SVpnGateways group.
// Don't use this type directly, use NewP2SVpnGatewaysClient() instead.
type P2SVpnGatewaysClient = original.P2SVpnGatewaysClient

// P2SVpnGatewaysGetOptions contains the optional parameters for the P2SVpnGateways.Get method.
type P2SVpnGatewaysGetOptions = original.P2SVpnGatewaysGetOptions

// P2SVpnGatewaysListByResourceGroupOptions contains the optional parameters for the P2SVpnGateways.ListByResourceGroup method.
type P2SVpnGatewaysListByResourceGroupOptions = original.P2SVpnGatewaysListByResourceGroupOptions

// P2SVpnGatewaysListOptions contains the optional parameters for the P2SVpnGateways.List method.
type P2SVpnGatewaysListOptions = original.P2SVpnGatewaysListOptions

// Vpn Client Parameters for package generation.
type P2SVpnProfileParameters = original.P2SVpnProfileParameters

// Parameters that define the create packet capture operation.
type PacketCapture = original.PacketCapture

// Filter that is applied to packet capture request. Multiple filters can be applied.
type PacketCaptureFilter = original.PacketCaptureFilter

// List of packet capture sessions.
type PacketCaptureListResult = original.PacketCaptureListResult

// PacketCaptureListResultResponse is the response envelope for operations that return a PacketCaptureListResult type.
type PacketCaptureListResultResponse = original.PacketCaptureListResultResponse

// Parameters that define the create packet capture operation.
type PacketCaptureParameters = original.PacketCaptureParameters

// Status of packet capture session.
type PacketCaptureQueryStatusResult = original.PacketCaptureQueryStatusResult

// PacketCaptureQueryStatusResultPoller provides polling facilities until the operation completes
type PacketCaptureQueryStatusResultPoller = original.PacketCaptureQueryStatusResultPoller

// PacketCaptureQueryStatusResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultPollerResponse = original.PacketCaptureQueryStatusResultPollerResponse

// PacketCaptureQueryStatusResultResponse is the response envelope for operations that return a PacketCaptureQueryStatusResult type.
type PacketCaptureQueryStatusResultResponse = original.PacketCaptureQueryStatusResultResponse

// Information about packet capture session.
type PacketCaptureResult = original.PacketCaptureResult

// PacketCaptureResultPoller provides polling facilities until the operation completes
type PacketCaptureResultPoller = original.PacketCaptureResultPoller

// PacketCaptureResultPollerResponse is the response envelope for operations that asynchronously return a PacketCaptureResult type.
type PacketCaptureResultPollerResponse = original.PacketCaptureResultPollerResponse

// The properties of a packet capture session.
type PacketCaptureResultProperties = original.PacketCaptureResultProperties

// PacketCaptureResultResponse is the response envelope for operations that return a PacketCaptureResult type.
type PacketCaptureResultResponse = original.PacketCaptureResultResponse

// The storage location for a packet capture session.
type PacketCaptureStorageLocation = original.PacketCaptureStorageLocation

// PacketCapturesBeginCreateOptions contains the optional parameters for the PacketCaptures.BeginCreate method.
type PacketCapturesBeginCreateOptions = original.PacketCapturesBeginCreateOptions

// PacketCapturesBeginDeleteOptions contains the optional parameters for the PacketCaptures.BeginDelete method.
type PacketCapturesBeginDeleteOptions = original.PacketCapturesBeginDeleteOptions

// PacketCapturesBeginGetStatusOptions contains the optional parameters for the PacketCaptures.BeginGetStatus method.
type PacketCapturesBeginGetStatusOptions = original.PacketCapturesBeginGetStatusOptions

// PacketCapturesBeginStopOptions contains the optional parameters for the PacketCaptures.BeginStop method.
type PacketCapturesBeginStopOptions = original.PacketCapturesBeginStopOptions

// PacketCapturesClient contains the methods for the PacketCaptures group.
// Don't use this type directly, use NewPacketCapturesClient() instead.
type PacketCapturesClient = original.PacketCapturesClient

// PacketCapturesGetOptions contains the optional parameters for the PacketCaptures.Get method.
type PacketCapturesGetOptions = original.PacketCapturesGetOptions

// PacketCapturesListOptions contains the optional parameters for the PacketCaptures.List method.
type PacketCapturesListOptions = original.PacketCapturesListOptions

// Route Filter Resource.
type PatchRouteFilter = original.PatchRouteFilter

// Route Filter Rule Resource.
type PatchRouteFilterRule = original.PatchRouteFilterRule

// Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type PeerExpressRouteCircuitConnection = original.PeerExpressRouteCircuitConnection

// Response for ListPeeredConnections API service call retrieves all global reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
type PeerExpressRouteCircuitConnectionListResult = original.PeerExpressRouteCircuitConnectionListResult

// PeerExpressRouteCircuitConnectionListResultPager provides iteration over PeerExpressRouteCircuitConnectionListResult pages.
type PeerExpressRouteCircuitConnectionListResultPager = original.PeerExpressRouteCircuitConnectionListResultPager

// PeerExpressRouteCircuitConnectionListResultResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnectionListResult
// type.
type PeerExpressRouteCircuitConnectionListResultResponse = original.PeerExpressRouteCircuitConnectionListResultResponse

// Properties of the peer express route circuit connection.
type PeerExpressRouteCircuitConnectionPropertiesFormat = original.PeerExpressRouteCircuitConnectionPropertiesFormat

// PeerExpressRouteCircuitConnectionResponse is the response envelope for operations that return a PeerExpressRouteCircuitConnection type.
type PeerExpressRouteCircuitConnectionResponse = original.PeerExpressRouteCircuitConnectionResponse

// PeerExpressRouteCircuitConnectionsClient contains the methods for the PeerExpressRouteCircuitConnections group.
// Don't use this type directly, use NewPeerExpressRouteCircuitConnectionsClient() instead.
type PeerExpressRouteCircuitConnectionsClient = original.PeerExpressRouteCircuitConnectionsClient

// PeerExpressRouteCircuitConnectionsGetOptions contains the optional parameters for the PeerExpressRouteCircuitConnections.Get method.
type PeerExpressRouteCircuitConnectionsGetOptions = original.PeerExpressRouteCircuitConnectionsGetOptions

// PeerExpressRouteCircuitConnectionsListOptions contains the optional parameters for the PeerExpressRouteCircuitConnections.List method.
type PeerExpressRouteCircuitConnectionsListOptions = original.PeerExpressRouteCircuitConnectionsListOptions

// Peer routing details.
type PeerRoute = original.PeerRoute

// List of virtual router peer routes.
type PeerRouteList = original.PeerRouteList

// PeerRouteListPoller provides polling facilities until the operation completes
type PeerRouteListPoller = original.PeerRouteListPoller

// PeerRouteListPollerResponse is the response envelope for operations that asynchronously return a PeerRouteList type.
type PeerRouteListPollerResponse = original.PeerRouteListPollerResponse

// PeerRouteListResponse is the response envelope for operations that return a PeerRouteList type.
type PeerRouteListResponse = original.PeerRouteListResponse

// Defines contents of a web application firewall global configuration.
type PolicySettings = original.PolicySettings

// Details of PrepareNetworkPolicies for Subnet.
type PrepareNetworkPoliciesRequest = original.PrepareNetworkPoliciesRequest

// PrivateDnsZoneConfig resource.
type PrivateDNSZoneConfig = original.PrivateDNSZoneConfig

// Private dns zone group resource.
type PrivateDNSZoneGroup = original.PrivateDNSZoneGroup

// Response for the ListPrivateDnsZoneGroups API service call.
type PrivateDNSZoneGroupListResult = original.PrivateDNSZoneGroupListResult

// PrivateDNSZoneGroupListResultPager provides iteration over PrivateDNSZoneGroupListResult pages.
type PrivateDNSZoneGroupListResultPager = original.PrivateDNSZoneGroupListResultPager

// PrivateDNSZoneGroupListResultResponse is the response envelope for operations that return a PrivateDNSZoneGroupListResult type.
type PrivateDNSZoneGroupListResultResponse = original.PrivateDNSZoneGroupListResultResponse

// PrivateDNSZoneGroupPoller provides polling facilities until the operation completes
type PrivateDNSZoneGroupPoller = original.PrivateDNSZoneGroupPoller

// PrivateDNSZoneGroupPollerResponse is the response envelope for operations that asynchronously return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupPollerResponse = original.PrivateDNSZoneGroupPollerResponse

// Properties of the private dns zone group.
type PrivateDNSZoneGroupPropertiesFormat = original.PrivateDNSZoneGroupPropertiesFormat

// PrivateDNSZoneGroupResponse is the response envelope for operations that return a PrivateDNSZoneGroup type.
type PrivateDNSZoneGroupResponse = original.PrivateDNSZoneGroupResponse

// PrivateDNSZoneGroupsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateDNSZoneGroups.BeginCreateOrUpdate method.
type PrivateDNSZoneGroupsBeginCreateOrUpdateOptions = original.PrivateDNSZoneGroupsBeginCreateOrUpdateOptions

// PrivateDNSZoneGroupsBeginDeleteOptions contains the optional parameters for the PrivateDNSZoneGroups.BeginDelete method.
type PrivateDNSZoneGroupsBeginDeleteOptions = original.PrivateDNSZoneGroupsBeginDeleteOptions

// PrivateDNSZoneGroupsClient contains the methods for the PrivateDNSZoneGroups group.
// Don't use this type directly, use NewPrivateDNSZoneGroupsClient() instead.
type PrivateDNSZoneGroupsClient = original.PrivateDNSZoneGroupsClient

// PrivateDNSZoneGroupsGetOptions contains the optional parameters for the PrivateDNSZoneGroups.Get method.
type PrivateDNSZoneGroupsGetOptions = original.PrivateDNSZoneGroupsGetOptions

// PrivateDNSZoneGroupsListOptions contains the optional parameters for the PrivateDNSZoneGroups.List method.
type PrivateDNSZoneGroupsListOptions = original.PrivateDNSZoneGroupsListOptions

// Properties of the private dns zone configuration resource.
type PrivateDNSZonePropertiesFormat = original.PrivateDNSZonePropertiesFormat

// Private endpoint resource.
type PrivateEndpoint = original.PrivateEndpoint

// PrivateEndpointConnection resource.
type PrivateEndpointConnection = original.PrivateEndpointConnection

// Response for the ListPrivateEndpointConnection API service call.
type PrivateEndpointConnectionListResult = original.PrivateEndpointConnectionListResult

// PrivateEndpointConnectionListResultPager provides iteration over PrivateEndpointConnectionListResult pages.
type PrivateEndpointConnectionListResultPager = original.PrivateEndpointConnectionListResultPager

// PrivateEndpointConnectionListResultResponse is the response envelope for operations that return a PrivateEndpointConnectionListResult type.
type PrivateEndpointConnectionListResultResponse = original.PrivateEndpointConnectionListResultResponse

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties = original.PrivateEndpointConnectionProperties

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse = original.PrivateEndpointConnectionResponse

// Response for the ListPrivateEndpoints API service call.
type PrivateEndpointListResult = original.PrivateEndpointListResult

// PrivateEndpointListResultPager provides iteration over PrivateEndpointListResult pages.
type PrivateEndpointListResultPager = original.PrivateEndpointListResultPager

// PrivateEndpointListResultResponse is the response envelope for operations that return a PrivateEndpointListResult type.
type PrivateEndpointListResultResponse = original.PrivateEndpointListResultResponse

// PrivateEndpointPoller provides polling facilities until the operation completes
type PrivateEndpointPoller = original.PrivateEndpointPoller

// PrivateEndpointPollerResponse is the response envelope for operations that asynchronously return a PrivateEndpoint type.
type PrivateEndpointPollerResponse = original.PrivateEndpointPollerResponse

// Properties of the private endpoint.
type PrivateEndpointProperties = original.PrivateEndpointProperties

// PrivateEndpointResponse is the response envelope for operations that return a PrivateEndpoint type.
type PrivateEndpointResponse = original.PrivateEndpointResponse

// PrivateEndpointsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpoints.BeginCreateOrUpdate method.
type PrivateEndpointsBeginCreateOrUpdateOptions = original.PrivateEndpointsBeginCreateOrUpdateOptions

// PrivateEndpointsBeginDeleteOptions contains the optional parameters for the PrivateEndpoints.BeginDelete method.
type PrivateEndpointsBeginDeleteOptions = original.PrivateEndpointsBeginDeleteOptions

// PrivateEndpointsClient contains the methods for the PrivateEndpoints group.
// Don't use this type directly, use NewPrivateEndpointsClient() instead.
type PrivateEndpointsClient = original.PrivateEndpointsClient

// PrivateEndpointsGetOptions contains the optional parameters for the PrivateEndpoints.Get method.
type PrivateEndpointsGetOptions = original.PrivateEndpointsGetOptions

// PrivateEndpointsListBySubscriptionOptions contains the optional parameters for the PrivateEndpoints.ListBySubscription method.
type PrivateEndpointsListBySubscriptionOptions = original.PrivateEndpointsListBySubscriptionOptions

// PrivateEndpointsListOptions contains the optional parameters for the PrivateEndpoints.List method.
type PrivateEndpointsListOptions = original.PrivateEndpointsListOptions

// Private link service resource.
type PrivateLinkService = original.PrivateLinkService

// PrivateLinkServiceConnection resource.
type PrivateLinkServiceConnection = original.PrivateLinkServiceConnection

// Properties of the PrivateLinkServiceConnection.
type PrivateLinkServiceConnectionProperties = original.PrivateLinkServiceConnectionProperties

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState = original.PrivateLinkServiceConnectionState

// The private link service ip configuration.
type PrivateLinkServiceIPConfiguration = original.PrivateLinkServiceIPConfiguration

// Properties of private link service IP configuration.
type PrivateLinkServiceIPConfigurationProperties = original.PrivateLinkServiceIPConfigurationProperties

// Response for the ListPrivateLinkService API service call.
type PrivateLinkServiceListResult = original.PrivateLinkServiceListResult

// PrivateLinkServiceListResultPager provides iteration over PrivateLinkServiceListResult pages.
type PrivateLinkServiceListResultPager = original.PrivateLinkServiceListResultPager

// PrivateLinkServiceListResultResponse is the response envelope for operations that return a PrivateLinkServiceListResult type.
type PrivateLinkServiceListResultResponse = original.PrivateLinkServiceListResultResponse

// PrivateLinkServicePoller provides polling facilities until the operation completes
type PrivateLinkServicePoller = original.PrivateLinkServicePoller

// PrivateLinkServicePollerResponse is the response envelope for operations that asynchronously return a PrivateLinkService type.
type PrivateLinkServicePollerResponse = original.PrivateLinkServicePollerResponse

// Properties of the private link service.
type PrivateLinkServiceProperties = original.PrivateLinkServiceProperties

// The auto-approval list of the private link service.
type PrivateLinkServicePropertiesAutoApproval = original.PrivateLinkServicePropertiesAutoApproval

// The visibility list of the private link service.
type PrivateLinkServicePropertiesVisibility = original.PrivateLinkServicePropertiesVisibility

// PrivateLinkServiceResponse is the response envelope for operations that return a PrivateLinkService type.
type PrivateLinkServiceResponse = original.PrivateLinkServiceResponse

// Response for the CheckPrivateLinkServiceVisibility API service call.
type PrivateLinkServiceVisibility = original.PrivateLinkServiceVisibility

// PrivateLinkServiceVisibilityPoller provides polling facilities until the operation completes
type PrivateLinkServiceVisibilityPoller = original.PrivateLinkServiceVisibilityPoller

// PrivateLinkServiceVisibilityPollerResponse is the response envelope for operations that asynchronously return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityPollerResponse = original.PrivateLinkServiceVisibilityPollerResponse

// PrivateLinkServiceVisibilityResponse is the response envelope for operations that return a PrivateLinkServiceVisibility type.
type PrivateLinkServiceVisibilityResponse = original.PrivateLinkServiceVisibilityResponse

// PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityByResourceGroupOptions contains the optional parameters for the PrivateLinkServices.BeginCheckPrivateLinkServiceVisibilityByResourceGroup
// method.
type PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityByResourceGroupOptions = original.PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityByResourceGroupOptions

// PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityOptions contains the optional parameters for the PrivateLinkServices.BeginCheckPrivateLinkServiceVisibility
// method.
type PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityOptions = original.PrivateLinkServicesBeginCheckPrivateLinkServiceVisibilityOptions

// PrivateLinkServicesBeginCreateOrUpdateOptions contains the optional parameters for the PrivateLinkServices.BeginCreateOrUpdate method.
type PrivateLinkServicesBeginCreateOrUpdateOptions = original.PrivateLinkServicesBeginCreateOrUpdateOptions

// PrivateLinkServicesBeginDeleteOptions contains the optional parameters for the PrivateLinkServices.BeginDelete method.
type PrivateLinkServicesBeginDeleteOptions = original.PrivateLinkServicesBeginDeleteOptions

// PrivateLinkServicesBeginDeletePrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.BeginDeletePrivateEndpointConnection
// method.
type PrivateLinkServicesBeginDeletePrivateEndpointConnectionOptions = original.PrivateLinkServicesBeginDeletePrivateEndpointConnectionOptions

// PrivateLinkServicesClient contains the methods for the PrivateLinkServices group.
// Don't use this type directly, use NewPrivateLinkServicesClient() instead.
type PrivateLinkServicesClient = original.PrivateLinkServicesClient

// PrivateLinkServicesGetOptions contains the optional parameters for the PrivateLinkServices.Get method.
type PrivateLinkServicesGetOptions = original.PrivateLinkServicesGetOptions

// PrivateLinkServicesGetPrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.GetPrivateEndpointConnection method.
type PrivateLinkServicesGetPrivateEndpointConnectionOptions = original.PrivateLinkServicesGetPrivateEndpointConnectionOptions

// PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions contains the optional parameters for the PrivateLinkServices.ListAutoApprovedPrivateLinkServicesByResourceGroup
// method.
type PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions = original.PrivateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupOptions

// PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions contains the optional parameters for the PrivateLinkServices.ListAutoApprovedPrivateLinkServices
// method.
type PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions = original.PrivateLinkServicesListAutoApprovedPrivateLinkServicesOptions

// PrivateLinkServicesListBySubscriptionOptions contains the optional parameters for the PrivateLinkServices.ListBySubscription method.
type PrivateLinkServicesListBySubscriptionOptions = original.PrivateLinkServicesListBySubscriptionOptions

// PrivateLinkServicesListOptions contains the optional parameters for the PrivateLinkServices.List method.
type PrivateLinkServicesListOptions = original.PrivateLinkServicesListOptions

// PrivateLinkServicesListPrivateEndpointConnectionsOptions contains the optional parameters for the PrivateLinkServices.ListPrivateEndpointConnections
// method.
type PrivateLinkServicesListPrivateEndpointConnectionsOptions = original.PrivateLinkServicesListPrivateEndpointConnectionsOptions

// PrivateLinkServicesUpdatePrivateEndpointConnectionOptions contains the optional parameters for the PrivateLinkServices.UpdatePrivateEndpointConnection
// method.
type PrivateLinkServicesUpdatePrivateEndpointConnectionOptions = original.PrivateLinkServicesUpdatePrivateEndpointConnectionOptions

// A load balancer probe.
type Probe = original.Probe

// Load balancer probe resource.
type ProbePropertiesFormat = original.ProbePropertiesFormat

// ProbeResponse is the response envelope for operations that return a Probe type.
type ProbeResponse = original.ProbeResponse

// The list of RouteTables to advertise the routes to.
type PropagatedRouteTable = original.PropagatedRouteTable

// Configuration of the protocol.
type ProtocolConfiguration = original.ProtocolConfiguration

// DDoS custom policy properties.
type ProtocolCustomSettingsFormat = original.ProtocolCustomSettingsFormat

// Public IP address resource.
type PublicIPAddress = original.PublicIPAddress

// Contains FQDN of the DNS record associated with the public IP address.
type PublicIPAddressDNSSettings = original.PublicIPAddressDNSSettings

// Response for ListPublicIpAddresses API service call.
type PublicIPAddressListResult = original.PublicIPAddressListResult

// PublicIPAddressListResultPager provides iteration over PublicIPAddressListResult pages.
type PublicIPAddressListResultPager = original.PublicIPAddressListResultPager

// PublicIPAddressListResultResponse is the response envelope for operations that return a PublicIPAddressListResult type.
type PublicIPAddressListResultResponse = original.PublicIPAddressListResultResponse

// PublicIPAddressPoller provides polling facilities until the operation completes
type PublicIPAddressPoller = original.PublicIPAddressPoller

// PublicIPAddressPollerResponse is the response envelope for operations that asynchronously return a PublicIPAddress type.
type PublicIPAddressPollerResponse = original.PublicIPAddressPollerResponse

// Public IP address properties.
type PublicIPAddressPropertiesFormat = original.PublicIPAddressPropertiesFormat

// PublicIPAddressResponse is the response envelope for operations that return a PublicIPAddress type.
type PublicIPAddressResponse = original.PublicIPAddressResponse

// SKU of a public IP address.
type PublicIPAddressSKU = original.PublicIPAddressSKU

// PublicIPAddressesBeginCreateOrUpdateOptions contains the optional parameters for the PublicIPAddresses.BeginCreateOrUpdate method.
type PublicIPAddressesBeginCreateOrUpdateOptions = original.PublicIPAddressesBeginCreateOrUpdateOptions

// PublicIPAddressesBeginDeleteOptions contains the optional parameters for the PublicIPAddresses.BeginDelete method.
type PublicIPAddressesBeginDeleteOptions = original.PublicIPAddressesBeginDeleteOptions

// PublicIPAddressesClient contains the methods for the PublicIPAddresses group.
// Don't use this type directly, use NewPublicIPAddressesClient() instead.
type PublicIPAddressesClient = original.PublicIPAddressesClient

// PublicIPAddressesGetCloudServicePublicIPAddressOptions contains the optional parameters for the PublicIPAddresses.GetCloudServicePublicIPAddress method.
type PublicIPAddressesGetCloudServicePublicIPAddressOptions = original.PublicIPAddressesGetCloudServicePublicIPAddressOptions

// PublicIPAddressesGetOptions contains the optional parameters for the PublicIPAddresses.Get method.
type PublicIPAddressesGetOptions = original.PublicIPAddressesGetOptions

// PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions contains the optional parameters for the PublicIPAddresses.GetVirtualMachineScaleSetPublicIPAddress
// method.
type PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions = original.PublicIPAddressesGetVirtualMachineScaleSetPublicIPAddressOptions

// PublicIPAddressesListAllOptions contains the optional parameters for the PublicIPAddresses.ListAll method.
type PublicIPAddressesListAllOptions = original.PublicIPAddressesListAllOptions

// PublicIPAddressesListCloudServicePublicIPAddressesOptions contains the optional parameters for the PublicIPAddresses.ListCloudServicePublicIPAddresses
// method.
type PublicIPAddressesListCloudServicePublicIPAddressesOptions = original.PublicIPAddressesListCloudServicePublicIPAddressesOptions

// PublicIPAddressesListCloudServiceRoleInstancePublicIPAddressesOptions contains the optional parameters for the PublicIPAddresses.ListCloudServiceRoleInstancePublicIPAddresses
// method.
type PublicIPAddressesListCloudServiceRoleInstancePublicIPAddressesOptions = original.PublicIPAddressesListCloudServiceRoleInstancePublicIPAddressesOptions

// PublicIPAddressesListOptions contains the optional parameters for the PublicIPAddresses.List method.
type PublicIPAddressesListOptions = original.PublicIPAddressesListOptions

// PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions contains the optional parameters for the PublicIPAddresses.ListVirtualMachineScaleSetPublicIPAddresses
// method.
type PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions = original.PublicIPAddressesListVirtualMachineScaleSetPublicIPAddressesOptions

// PublicIPAddressesListVirtualMachineScaleSetVMPublicIPaddressesOptions contains the optional parameters for the PublicIPAddresses.ListVirtualMachineScaleSetVMPublicIPaddresses
// method.
type PublicIPAddressesListVirtualMachineScaleSetVMPublicIPaddressesOptions = original.PublicIPAddressesListVirtualMachineScaleSetVMPublicIPaddressesOptions

// PublicIPAddressesUpdateTagsOptions contains the optional parameters for the PublicIPAddresses.UpdateTags method.
type PublicIPAddressesUpdateTagsOptions = original.PublicIPAddressesUpdateTagsOptions

// Public IP prefix resource.
type PublicIPPrefix = original.PublicIPPrefix

// Response for ListPublicIpPrefixes API service call.
type PublicIPPrefixListResult = original.PublicIPPrefixListResult

// PublicIPPrefixListResultPager provides iteration over PublicIPPrefixListResult pages.
type PublicIPPrefixListResultPager = original.PublicIPPrefixListResultPager

// PublicIPPrefixListResultResponse is the response envelope for operations that return a PublicIPPrefixListResult type.
type PublicIPPrefixListResultResponse = original.PublicIPPrefixListResultResponse

// PublicIPPrefixPoller provides polling facilities until the operation completes
type PublicIPPrefixPoller = original.PublicIPPrefixPoller

// PublicIPPrefixPollerResponse is the response envelope for operations that asynchronously return a PublicIPPrefix type.
type PublicIPPrefixPollerResponse = original.PublicIPPrefixPollerResponse

// Public IP prefix properties.
type PublicIPPrefixPropertiesFormat = original.PublicIPPrefixPropertiesFormat

// PublicIPPrefixResponse is the response envelope for operations that return a PublicIPPrefix type.
type PublicIPPrefixResponse = original.PublicIPPrefixResponse

// SKU of a public IP prefix.
type PublicIPPrefixSKU = original.PublicIPPrefixSKU

// PublicIPPrefixesBeginCreateOrUpdateOptions contains the optional parameters for the PublicIPPrefixes.BeginCreateOrUpdate method.
type PublicIPPrefixesBeginCreateOrUpdateOptions = original.PublicIPPrefixesBeginCreateOrUpdateOptions

// PublicIPPrefixesBeginDeleteOptions contains the optional parameters for the PublicIPPrefixes.BeginDelete method.
type PublicIPPrefixesBeginDeleteOptions = original.PublicIPPrefixesBeginDeleteOptions

// PublicIPPrefixesClient contains the methods for the PublicIPPrefixes group.
// Don't use this type directly, use NewPublicIPPrefixesClient() instead.
type PublicIPPrefixesClient = original.PublicIPPrefixesClient

// PublicIPPrefixesGetOptions contains the optional parameters for the PublicIPPrefixes.Get method.
type PublicIPPrefixesGetOptions = original.PublicIPPrefixesGetOptions

// PublicIPPrefixesListAllOptions contains the optional parameters for the PublicIPPrefixes.ListAll method.
type PublicIPPrefixesListAllOptions = original.PublicIPPrefixesListAllOptions

// PublicIPPrefixesListOptions contains the optional parameters for the PublicIPPrefixes.List method.
type PublicIPPrefixesListOptions = original.PublicIPPrefixesListOptions

// PublicIPPrefixesUpdateTagsOptions contains the optional parameters for the PublicIPPrefixes.UpdateTags method.
type PublicIPPrefixesUpdateTagsOptions = original.PublicIPPrefixesUpdateTagsOptions

// Qos Traffic Profiler IP Range properties.
type QosIPRange = original.QosIPRange

// Qos Traffic Profiler Port range properties.
type QosPortRange = original.QosPortRange

// Parameters that define the resource to query the troubleshooting result.
type QueryTroubleshootingParameters = original.QueryTroubleshootingParameters

// Radius Server Settings.
type RadiusServer = original.RadiusServer

// A collective group of information about the record set information.
type RecordSet = original.RecordSet

// Reference to a public IP address.
type ReferencedPublicIPAddress = original.ReferencedPublicIPAddress

// Common resource representation.
type Resource = original.Resource

// ResourceNavigationLink resource.
type ResourceNavigationLink = original.ResourceNavigationLink

// Properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat = original.ResourceNavigationLinkFormat

// ResourceNavigationLinksClient contains the methods for the ResourceNavigationLinks group.
// Don't use this type directly, use NewResourceNavigationLinksClient() instead.
type ResourceNavigationLinksClient = original.ResourceNavigationLinksClient

// ResourceNavigationLinksListOptions contains the optional parameters for the ResourceNavigationLinks.List method.
type ResourceNavigationLinksListOptions = original.ResourceNavigationLinksListOptions

// Response for ResourceNavigationLinks_List operation.
type ResourceNavigationLinksListResult = original.ResourceNavigationLinksListResult

// ResourceNavigationLinksListResultResponse is the response envelope for operations that return a ResourceNavigationLinksListResult type.
type ResourceNavigationLinksListResultResponse = original.ResourceNavigationLinksListResultResponse

// The base resource set for visibility and auto-approval.
type ResourceSet = original.ResourceSet

// Parameters that define the retention policy for flow log.
type RetentionPolicyParameters = original.RetentionPolicyParameters

// Route resource.
type Route = original.Route

// Route Filter Resource.
type RouteFilter = original.RouteFilter

// Response for the ListRouteFilters API service call.
type RouteFilterListResult = original.RouteFilterListResult

// RouteFilterListResultPager provides iteration over RouteFilterListResult pages.
type RouteFilterListResultPager = original.RouteFilterListResultPager

// RouteFilterListResultResponse is the response envelope for operations that return a RouteFilterListResult type.
type RouteFilterListResultResponse = original.RouteFilterListResultResponse

// RouteFilterPoller provides polling facilities until the operation completes
type RouteFilterPoller = original.RouteFilterPoller

// RouteFilterPollerResponse is the response envelope for operations that asynchronously return a RouteFilter type.
type RouteFilterPollerResponse = original.RouteFilterPollerResponse

// Route Filter Resource.
type RouteFilterPropertiesFormat = original.RouteFilterPropertiesFormat

// RouteFilterResponse is the response envelope for operations that return a RouteFilter type.
type RouteFilterResponse = original.RouteFilterResponse

// Route Filter Rule Resource.
type RouteFilterRule = original.RouteFilterRule

// Response for the ListRouteFilterRules API service call.
type RouteFilterRuleListResult = original.RouteFilterRuleListResult

// RouteFilterRuleListResultPager provides iteration over RouteFilterRuleListResult pages.
type RouteFilterRuleListResultPager = original.RouteFilterRuleListResultPager

// RouteFilterRuleListResultResponse is the response envelope for operations that return a RouteFilterRuleListResult type.
type RouteFilterRuleListResultResponse = original.RouteFilterRuleListResultResponse

// RouteFilterRulePoller provides polling facilities until the operation completes
type RouteFilterRulePoller = original.RouteFilterRulePoller

// RouteFilterRulePollerResponse is the response envelope for operations that asynchronously return a RouteFilterRule type.
type RouteFilterRulePollerResponse = original.RouteFilterRulePollerResponse

// Route Filter Rule Resource.
type RouteFilterRulePropertiesFormat = original.RouteFilterRulePropertiesFormat

// RouteFilterRuleResponse is the response envelope for operations that return a RouteFilterRule type.
type RouteFilterRuleResponse = original.RouteFilterRuleResponse

// RouteFilterRulesBeginCreateOrUpdateOptions contains the optional parameters for the RouteFilterRules.BeginCreateOrUpdate method.
type RouteFilterRulesBeginCreateOrUpdateOptions = original.RouteFilterRulesBeginCreateOrUpdateOptions

// RouteFilterRulesBeginDeleteOptions contains the optional parameters for the RouteFilterRules.BeginDelete method.
type RouteFilterRulesBeginDeleteOptions = original.RouteFilterRulesBeginDeleteOptions

// RouteFilterRulesClient contains the methods for the RouteFilterRules group.
// Don't use this type directly, use NewRouteFilterRulesClient() instead.
type RouteFilterRulesClient = original.RouteFilterRulesClient

// RouteFilterRulesGetOptions contains the optional parameters for the RouteFilterRules.Get method.
type RouteFilterRulesGetOptions = original.RouteFilterRulesGetOptions

// RouteFilterRulesListByRouteFilterOptions contains the optional parameters for the RouteFilterRules.ListByRouteFilter method.
type RouteFilterRulesListByRouteFilterOptions = original.RouteFilterRulesListByRouteFilterOptions

// RouteFiltersBeginCreateOrUpdateOptions contains the optional parameters for the RouteFilters.BeginCreateOrUpdate method.
type RouteFiltersBeginCreateOrUpdateOptions = original.RouteFiltersBeginCreateOrUpdateOptions

// RouteFiltersBeginDeleteOptions contains the optional parameters for the RouteFilters.BeginDelete method.
type RouteFiltersBeginDeleteOptions = original.RouteFiltersBeginDeleteOptions

// RouteFiltersClient contains the methods for the RouteFilters group.
// Don't use this type directly, use NewRouteFiltersClient() instead.
type RouteFiltersClient = original.RouteFiltersClient

// RouteFiltersGetOptions contains the optional parameters for the RouteFilters.Get method.
type RouteFiltersGetOptions = original.RouteFiltersGetOptions

// RouteFiltersListByResourceGroupOptions contains the optional parameters for the RouteFilters.ListByResourceGroup method.
type RouteFiltersListByResourceGroupOptions = original.RouteFiltersListByResourceGroupOptions

// RouteFiltersListOptions contains the optional parameters for the RouteFilters.List method.
type RouteFiltersListOptions = original.RouteFiltersListOptions

// RouteFiltersUpdateTagsOptions contains the optional parameters for the RouteFilters.UpdateTags method.
type RouteFiltersUpdateTagsOptions = original.RouteFiltersUpdateTagsOptions

// Response for the ListRoute API service call.
type RouteListResult = original.RouteListResult

// RouteListResultPager provides iteration over RouteListResult pages.
type RouteListResultPager = original.RouteListResultPager

// RouteListResultResponse is the response envelope for operations that return a RouteListResult type.
type RouteListResultResponse = original.RouteListResultResponse

// RoutePoller provides polling facilities until the operation completes
type RoutePoller = original.RoutePoller

// RoutePollerResponse is the response envelope for operations that asynchronously return a Route type.
type RoutePollerResponse = original.RoutePollerResponse

// Route resource.
type RoutePropertiesFormat = original.RoutePropertiesFormat

// RouteResponse is the response envelope for operations that return a Route type.
type RouteResponse = original.RouteResponse

// Route table resource.
type RouteTable = original.RouteTable

// Response for the ListRouteTable API service call.
type RouteTableListResult = original.RouteTableListResult

// RouteTableListResultPager provides iteration over RouteTableListResult pages.
type RouteTableListResultPager = original.RouteTableListResultPager

// RouteTableListResultResponse is the response envelope for operations that return a RouteTableListResult type.
type RouteTableListResultResponse = original.RouteTableListResultResponse

// RouteTablePoller provides polling facilities until the operation completes
type RouteTablePoller = original.RouteTablePoller

// RouteTablePollerResponse is the response envelope for operations that asynchronously return a RouteTable type.
type RouteTablePollerResponse = original.RouteTablePollerResponse

// Route Table resource.
type RouteTablePropertiesFormat = original.RouteTablePropertiesFormat

// RouteTableResponse is the response envelope for operations that return a RouteTable type.
type RouteTableResponse = original.RouteTableResponse

// RouteTablesBeginCreateOrUpdateOptions contains the optional parameters for the RouteTables.BeginCreateOrUpdate method.
type RouteTablesBeginCreateOrUpdateOptions = original.RouteTablesBeginCreateOrUpdateOptions

// RouteTablesBeginDeleteOptions contains the optional parameters for the RouteTables.BeginDelete method.
type RouteTablesBeginDeleteOptions = original.RouteTablesBeginDeleteOptions

// RouteTablesClient contains the methods for the RouteTables group.
// Don't use this type directly, use NewRouteTablesClient() instead.
type RouteTablesClient = original.RouteTablesClient

// RouteTablesGetOptions contains the optional parameters for the RouteTables.Get method.
type RouteTablesGetOptions = original.RouteTablesGetOptions

// RouteTablesListAllOptions contains the optional parameters for the RouteTables.ListAll method.
type RouteTablesListAllOptions = original.RouteTablesListAllOptions

// RouteTablesListOptions contains the optional parameters for the RouteTables.List method.
type RouteTablesListOptions = original.RouteTablesListOptions

// RouteTablesUpdateTagsOptions contains the optional parameters for the RouteTables.UpdateTags method.
type RouteTablesUpdateTagsOptions = original.RouteTablesUpdateTagsOptions

// RoutesBeginCreateOrUpdateOptions contains the optional parameters for the Routes.BeginCreateOrUpdate method.
type RoutesBeginCreateOrUpdateOptions = original.RoutesBeginCreateOrUpdateOptions

// RoutesBeginDeleteOptions contains the optional parameters for the Routes.BeginDelete method.
type RoutesBeginDeleteOptions = original.RoutesBeginDeleteOptions

// RoutesClient contains the methods for the Routes group.
// Don't use this type directly, use NewRoutesClient() instead.
type RoutesClient = original.RoutesClient

// RoutesGetOptions contains the optional parameters for the Routes.Get method.
type RoutesGetOptions = original.RoutesGetOptions

// RoutesListOptions contains the optional parameters for the Routes.List method.
type RoutesListOptions = original.RoutesListOptions

// Routing Configuration indicating the associated and propagated route tables for this connection.
type RoutingConfiguration = original.RoutingConfiguration

// Network interface and all its associated security rules.
type SecurityGroupNetworkInterface = original.SecurityGroupNetworkInterface

// Parameters that define the VM to check security groups for.
type SecurityGroupViewParameters = original.SecurityGroupViewParameters

// The information about security rules applied to the specified VM.
type SecurityGroupViewResult = original.SecurityGroupViewResult

// SecurityGroupViewResultPoller provides polling facilities until the operation completes
type SecurityGroupViewResultPoller = original.SecurityGroupViewResultPoller

// SecurityGroupViewResultPollerResponse is the response envelope for operations that asynchronously return a SecurityGroupViewResult type.
type SecurityGroupViewResultPollerResponse = original.SecurityGroupViewResultPollerResponse

// SecurityGroupViewResultResponse is the response envelope for operations that return a SecurityGroupViewResult type.
type SecurityGroupViewResultResponse = original.SecurityGroupViewResultResponse

// Security Partner Provider resource.
type SecurityPartnerProvider = original.SecurityPartnerProvider

// Response for ListSecurityPartnerProviders API service call.
type SecurityPartnerProviderListResult = original.SecurityPartnerProviderListResult

// SecurityPartnerProviderListResultPager provides iteration over SecurityPartnerProviderListResult pages.
type SecurityPartnerProviderListResultPager = original.SecurityPartnerProviderListResultPager

// SecurityPartnerProviderListResultResponse is the response envelope for operations that return a SecurityPartnerProviderListResult type.
type SecurityPartnerProviderListResultResponse = original.SecurityPartnerProviderListResultResponse

// SecurityPartnerProviderPoller provides polling facilities until the operation completes
type SecurityPartnerProviderPoller = original.SecurityPartnerProviderPoller

// SecurityPartnerProviderPollerResponse is the response envelope for operations that asynchronously return a SecurityPartnerProvider type.
type SecurityPartnerProviderPollerResponse = original.SecurityPartnerProviderPollerResponse

// Properties of the Security Partner Provider.
type SecurityPartnerProviderPropertiesFormat = original.SecurityPartnerProviderPropertiesFormat

// SecurityPartnerProviderResponse is the response envelope for operations that return a SecurityPartnerProvider type.
type SecurityPartnerProviderResponse = original.SecurityPartnerProviderResponse

// SecurityPartnerProvidersBeginCreateOrUpdateOptions contains the optional parameters for the SecurityPartnerProviders.BeginCreateOrUpdate method.
type SecurityPartnerProvidersBeginCreateOrUpdateOptions = original.SecurityPartnerProvidersBeginCreateOrUpdateOptions

// SecurityPartnerProvidersBeginDeleteOptions contains the optional parameters for the SecurityPartnerProviders.BeginDelete method.
type SecurityPartnerProvidersBeginDeleteOptions = original.SecurityPartnerProvidersBeginDeleteOptions

// SecurityPartnerProvidersClient contains the methods for the SecurityPartnerProviders group.
// Don't use this type directly, use NewSecurityPartnerProvidersClient() instead.
type SecurityPartnerProvidersClient = original.SecurityPartnerProvidersClient

// SecurityPartnerProvidersGetOptions contains the optional parameters for the SecurityPartnerProviders.Get method.
type SecurityPartnerProvidersGetOptions = original.SecurityPartnerProvidersGetOptions

// SecurityPartnerProvidersListByResourceGroupOptions contains the optional parameters for the SecurityPartnerProviders.ListByResourceGroup method.
type SecurityPartnerProvidersListByResourceGroupOptions = original.SecurityPartnerProvidersListByResourceGroupOptions

// SecurityPartnerProvidersListOptions contains the optional parameters for the SecurityPartnerProviders.List method.
type SecurityPartnerProvidersListOptions = original.SecurityPartnerProvidersListOptions

// SecurityPartnerProvidersUpdateTagsOptions contains the optional parameters for the SecurityPartnerProviders.UpdateTags method.
type SecurityPartnerProvidersUpdateTagsOptions = original.SecurityPartnerProvidersUpdateTagsOptions

// Network security rule.
type SecurityRule = original.SecurityRule

// All security rules associated with the network interface.
type SecurityRuleAssociations = original.SecurityRuleAssociations

// Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.
type SecurityRuleListResult = original.SecurityRuleListResult

// SecurityRuleListResultPager provides iteration over SecurityRuleListResult pages.
type SecurityRuleListResultPager = original.SecurityRuleListResultPager

// SecurityRuleListResultResponse is the response envelope for operations that return a SecurityRuleListResult type.
type SecurityRuleListResultResponse = original.SecurityRuleListResultResponse

// SecurityRulePoller provides polling facilities until the operation completes
type SecurityRulePoller = original.SecurityRulePoller

// SecurityRulePollerResponse is the response envelope for operations that asynchronously return a SecurityRule type.
type SecurityRulePollerResponse = original.SecurityRulePollerResponse

// Security rule resource.
type SecurityRulePropertiesFormat = original.SecurityRulePropertiesFormat

// SecurityRuleResponse is the response envelope for operations that return a SecurityRule type.
type SecurityRuleResponse = original.SecurityRuleResponse

// SecurityRulesBeginCreateOrUpdateOptions contains the optional parameters for the SecurityRules.BeginCreateOrUpdate method.
type SecurityRulesBeginCreateOrUpdateOptions = original.SecurityRulesBeginCreateOrUpdateOptions

// SecurityRulesBeginDeleteOptions contains the optional parameters for the SecurityRules.BeginDelete method.
type SecurityRulesBeginDeleteOptions = original.SecurityRulesBeginDeleteOptions

// SecurityRulesClient contains the methods for the SecurityRules group.
// Don't use this type directly, use NewSecurityRulesClient() instead.
type SecurityRulesClient = original.SecurityRulesClient

// SecurityRulesGetOptions contains the optional parameters for the SecurityRules.Get method.
type SecurityRulesGetOptions = original.SecurityRulesGetOptions

// SecurityRulesListOptions contains the optional parameters for the SecurityRules.List method.
type SecurityRulesListOptions = original.SecurityRulesListOptions

// ServiceAssociationLink resource.
type ServiceAssociationLink = original.ServiceAssociationLink

// Properties of ServiceAssociationLink.
type ServiceAssociationLinkPropertiesFormat = original.ServiceAssociationLinkPropertiesFormat

// ServiceAssociationLinksClient contains the methods for the ServiceAssociationLinks group.
// Don't use this type directly, use NewServiceAssociationLinksClient() instead.
type ServiceAssociationLinksClient = original.ServiceAssociationLinksClient

// ServiceAssociationLinksListOptions contains the optional parameters for the ServiceAssociationLinks.List method.
type ServiceAssociationLinksListOptions = original.ServiceAssociationLinksListOptions

// Response for ServiceAssociationLinks_List operation.
type ServiceAssociationLinksListResult = original.ServiceAssociationLinksListResult

// ServiceAssociationLinksListResultResponse is the response envelope for operations that return a ServiceAssociationLinksListResult type.
type ServiceAssociationLinksListResultResponse = original.ServiceAssociationLinksListResultResponse

// Properties of a service delegation.
type ServiceDelegationPropertiesFormat = original.ServiceDelegationPropertiesFormat

// ServiceEndpointPoliciesBeginCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointPolicies.BeginCreateOrUpdate method.
type ServiceEndpointPoliciesBeginCreateOrUpdateOptions = original.ServiceEndpointPoliciesBeginCreateOrUpdateOptions

// ServiceEndpointPoliciesBeginDeleteOptions contains the optional parameters for the ServiceEndpointPolicies.BeginDelete method.
type ServiceEndpointPoliciesBeginDeleteOptions = original.ServiceEndpointPoliciesBeginDeleteOptions

// ServiceEndpointPoliciesClient contains the methods for the ServiceEndpointPolicies group.
// Don't use this type directly, use NewServiceEndpointPoliciesClient() instead.
type ServiceEndpointPoliciesClient = original.ServiceEndpointPoliciesClient

// ServiceEndpointPoliciesGetOptions contains the optional parameters for the ServiceEndpointPolicies.Get method.
type ServiceEndpointPoliciesGetOptions = original.ServiceEndpointPoliciesGetOptions

// ServiceEndpointPoliciesListByResourceGroupOptions contains the optional parameters for the ServiceEndpointPolicies.ListByResourceGroup method.
type ServiceEndpointPoliciesListByResourceGroupOptions = original.ServiceEndpointPoliciesListByResourceGroupOptions

// ServiceEndpointPoliciesListOptions contains the optional parameters for the ServiceEndpointPolicies.List method.
type ServiceEndpointPoliciesListOptions = original.ServiceEndpointPoliciesListOptions

// ServiceEndpointPoliciesUpdateTagsOptions contains the optional parameters for the ServiceEndpointPolicies.UpdateTags method.
type ServiceEndpointPoliciesUpdateTagsOptions = original.ServiceEndpointPoliciesUpdateTagsOptions

// Service End point policy resource.
type ServiceEndpointPolicy = original.ServiceEndpointPolicy

// Service Endpoint policy definitions.
type ServiceEndpointPolicyDefinition = original.ServiceEndpointPolicyDefinition

// Response for ListServiceEndpointPolicyDefinition API service call. Retrieves all service endpoint policy definition that belongs to a service endpoint
// policy.
type ServiceEndpointPolicyDefinitionListResult = original.ServiceEndpointPolicyDefinitionListResult

// ServiceEndpointPolicyDefinitionListResultPager provides iteration over ServiceEndpointPolicyDefinitionListResult pages.
type ServiceEndpointPolicyDefinitionListResultPager = original.ServiceEndpointPolicyDefinitionListResultPager

// ServiceEndpointPolicyDefinitionListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinitionListResult type.
type ServiceEndpointPolicyDefinitionListResultResponse = original.ServiceEndpointPolicyDefinitionListResultResponse

// ServiceEndpointPolicyDefinitionPoller provides polling facilities until the operation completes
type ServiceEndpointPolicyDefinitionPoller = original.ServiceEndpointPolicyDefinitionPoller

// ServiceEndpointPolicyDefinitionPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionPollerResponse = original.ServiceEndpointPolicyDefinitionPollerResponse

// Service Endpoint policy definition resource.
type ServiceEndpointPolicyDefinitionPropertiesFormat = original.ServiceEndpointPolicyDefinitionPropertiesFormat

// ServiceEndpointPolicyDefinitionResponse is the response envelope for operations that return a ServiceEndpointPolicyDefinition type.
type ServiceEndpointPolicyDefinitionResponse = original.ServiceEndpointPolicyDefinitionResponse

// ServiceEndpointPolicyDefinitionsBeginCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.BeginCreateOrUpdate
// method.
type ServiceEndpointPolicyDefinitionsBeginCreateOrUpdateOptions = original.ServiceEndpointPolicyDefinitionsBeginCreateOrUpdateOptions

// ServiceEndpointPolicyDefinitionsBeginDeleteOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.BeginDelete method.
type ServiceEndpointPolicyDefinitionsBeginDeleteOptions = original.ServiceEndpointPolicyDefinitionsBeginDeleteOptions

// ServiceEndpointPolicyDefinitionsClient contains the methods for the ServiceEndpointPolicyDefinitions group.
// Don't use this type directly, use NewServiceEndpointPolicyDefinitionsClient() instead.
type ServiceEndpointPolicyDefinitionsClient = original.ServiceEndpointPolicyDefinitionsClient

// ServiceEndpointPolicyDefinitionsGetOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.Get method.
type ServiceEndpointPolicyDefinitionsGetOptions = original.ServiceEndpointPolicyDefinitionsGetOptions

// ServiceEndpointPolicyDefinitionsListByResourceGroupOptions contains the optional parameters for the ServiceEndpointPolicyDefinitions.ListByResourceGroup
// method.
type ServiceEndpointPolicyDefinitionsListByResourceGroupOptions = original.ServiceEndpointPolicyDefinitionsListByResourceGroupOptions

// Response for ListServiceEndpointPolicies API service call.
type ServiceEndpointPolicyListResult = original.ServiceEndpointPolicyListResult

// ServiceEndpointPolicyListResultPager provides iteration over ServiceEndpointPolicyListResult pages.
type ServiceEndpointPolicyListResultPager = original.ServiceEndpointPolicyListResultPager

// ServiceEndpointPolicyListResultResponse is the response envelope for operations that return a ServiceEndpointPolicyListResult type.
type ServiceEndpointPolicyListResultResponse = original.ServiceEndpointPolicyListResultResponse

// ServiceEndpointPolicyPoller provides polling facilities until the operation completes
type ServiceEndpointPolicyPoller = original.ServiceEndpointPolicyPoller

// ServiceEndpointPolicyPollerResponse is the response envelope for operations that asynchronously return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyPollerResponse = original.ServiceEndpointPolicyPollerResponse

// Service Endpoint Policy resource.
type ServiceEndpointPolicyPropertiesFormat = original.ServiceEndpointPolicyPropertiesFormat

// ServiceEndpointPolicyResponse is the response envelope for operations that return a ServiceEndpointPolicy type.
type ServiceEndpointPolicyResponse = original.ServiceEndpointPolicyResponse

// The service endpoint properties.
type ServiceEndpointPropertiesFormat = original.ServiceEndpointPropertiesFormat

// The service tag information.
type ServiceTagInformation = original.ServiceTagInformation

// Properties of the service tag information.
type ServiceTagInformationPropertiesFormat = original.ServiceTagInformationPropertiesFormat

// ServiceTagsClient contains the methods for the ServiceTags group.
// Don't use this type directly, use NewServiceTagsClient() instead.
type ServiceTagsClient = original.ServiceTagsClient

// ServiceTagsListOptions contains the optional parameters for the ServiceTags.List method.
type ServiceTagsListOptions = original.ServiceTagsListOptions

// Response for the ListServiceTags API service call.
type ServiceTagsListResult = original.ServiceTagsListResult

// ServiceTagsListResultResponse is the response envelope for operations that return a ServiceTagsListResult type.
type ServiceTagsListResultResponse = original.ServiceTagsListResultResponse

// List of session IDs.
type SessionIDs = original.SessionIDs

// List of all Static Routes.
type StaticRoute = original.StaticRoute

// StringArrayResponse is the response envelope for operations that return a []string type.
type StringArrayResponse = original.StringArrayResponse

// StringPoller provides polling facilities until the operation completes
type StringPoller = original.StringPoller

// StringPollerResponse is the response envelope for operations that asynchronously return a string type.
type StringPollerResponse = original.StringPollerResponse

// StringResponse is the response envelope for operations that return a string type.
type StringResponse = original.StringResponse

// Reference to another subresource.
type SubResource = original.SubResource

// Subnet in a virtual network resource.
type Subnet = original.Subnet

// Subnet and it's custom security rules.
type SubnetAssociation = original.SubnetAssociation

// Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
type SubnetListResult = original.SubnetListResult

// SubnetListResultPager provides iteration over SubnetListResult pages.
type SubnetListResultPager = original.SubnetListResultPager

// SubnetListResultResponse is the response envelope for operations that return a SubnetListResult type.
type SubnetListResultResponse = original.SubnetListResultResponse

// SubnetPoller provides polling facilities until the operation completes
type SubnetPoller = original.SubnetPoller

// SubnetPollerResponse is the response envelope for operations that asynchronously return a Subnet type.
type SubnetPollerResponse = original.SubnetPollerResponse

// Properties of the subnet.
type SubnetPropertiesFormat = original.SubnetPropertiesFormat

// SubnetResponse is the response envelope for operations that return a Subnet type.
type SubnetResponse = original.SubnetResponse

// SubnetsBeginCreateOrUpdateOptions contains the optional parameters for the Subnets.BeginCreateOrUpdate method.
type SubnetsBeginCreateOrUpdateOptions = original.SubnetsBeginCreateOrUpdateOptions

// SubnetsBeginDeleteOptions contains the optional parameters for the Subnets.BeginDelete method.
type SubnetsBeginDeleteOptions = original.SubnetsBeginDeleteOptions

// SubnetsBeginPrepareNetworkPoliciesOptions contains the optional parameters for the Subnets.BeginPrepareNetworkPolicies method.
type SubnetsBeginPrepareNetworkPoliciesOptions = original.SubnetsBeginPrepareNetworkPoliciesOptions

// SubnetsBeginUnprepareNetworkPoliciesOptions contains the optional parameters for the Subnets.BeginUnprepareNetworkPolicies method.
type SubnetsBeginUnprepareNetworkPoliciesOptions = original.SubnetsBeginUnprepareNetworkPoliciesOptions

// SubnetsClient contains the methods for the Subnets group.
// Don't use this type directly, use NewSubnetsClient() instead.
type SubnetsClient = original.SubnetsClient

// SubnetsGetOptions contains the optional parameters for the Subnets.Get method.
type SubnetsGetOptions = original.SubnetsGetOptions

// SubnetsListOptions contains the optional parameters for the Subnets.List method.
type SubnetsListOptions = original.SubnetsListOptions

// Tags object for patch operations.
type TagsObject = original.TagsObject

// Topology of the specified resource group.
type Topology = original.Topology

// Resources that have an association with the parent resource.
type TopologyAssociation = original.TopologyAssociation

// Parameters that define the representation of topology.
type TopologyParameters = original.TopologyParameters

// The network resource topology information for the given resource group.
type TopologyResource = original.TopologyResource

// TopologyResponse is the response envelope for operations that return a Topology type.
type TopologyResponse = original.TopologyResponse

// Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsConfigurationProperties = original.TrafficAnalyticsConfigurationProperties

// Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsProperties = original.TrafficAnalyticsProperties

// An traffic selector policy for a virtual network gateway connection.
type TrafficSelectorPolicy = original.TrafficSelectorPolicy

// Information gained from troubleshooting of specified resource.
type TroubleshootingDetails = original.TroubleshootingDetails

// Parameters that define the resource to troubleshoot.
type TroubleshootingParameters = original.TroubleshootingParameters

// Storage location provided for troubleshoot.
type TroubleshootingProperties = original.TroubleshootingProperties

// Recommended actions based on discovered issues.
type TroubleshootingRecommendedActions = original.TroubleshootingRecommendedActions

// Troubleshooting information gained from specified resource.
type TroubleshootingResult = original.TroubleshootingResult

// TroubleshootingResultPoller provides polling facilities until the operation completes
type TroubleshootingResultPoller = original.TroubleshootingResultPoller

// TroubleshootingResultPollerResponse is the response envelope for operations that asynchronously return a TroubleshootingResult type.
type TroubleshootingResultPollerResponse = original.TroubleshootingResultPollerResponse

// TroubleshootingResultResponse is the response envelope for operations that return a TroubleshootingResult type.
type TroubleshootingResultResponse = original.TroubleshootingResultResponse

// VirtualNetworkGatewayConnection properties.
type TunnelConnectionHealth = original.TunnelConnectionHealth

// Details of UnprepareNetworkPolicies for Subnet.
type UnprepareNetworkPoliciesRequest = original.UnprepareNetworkPoliciesRequest

// The network resource usage.
type Usage = original.Usage

// The usage names.
type UsageName = original.UsageName

// UsagesClient contains the methods for the Usages group.
// Don't use this type directly, use NewUsagesClient() instead.
type UsagesClient = original.UsagesClient

// UsagesListOptions contains the optional parameters for the Usages.List method.
type UsagesListOptions = original.UsagesListOptions

// The list usages operation response.
type UsagesListResult = original.UsagesListResult

// UsagesListResultPager provides iteration over UsagesListResult pages.
type UsagesListResultPager = original.UsagesListResultPager

// UsagesListResultResponse is the response envelope for operations that return a UsagesListResult type.
type UsagesListResultResponse = original.UsagesListResultResponse

// Describes a Virtual Machine.
type VM = original.VM

// Parameters that define the IP flow to be verified.
type VerificationIPFlowParameters = original.VerificationIPFlowParameters

// Results of IP flow verification on the target resource.
type VerificationIPFlowResult = original.VerificationIPFlowResult

// VerificationIPFlowResultPoller provides polling facilities until the operation completes
type VerificationIPFlowResultPoller = original.VerificationIPFlowResultPoller

// VerificationIPFlowResultPollerResponse is the response envelope for operations that asynchronously return a VerificationIPFlowResult type.
type VerificationIPFlowResultPollerResponse = original.VerificationIPFlowResultPollerResponse

// VerificationIPFlowResultResponse is the response envelope for operations that return a VerificationIPFlowResult type.
type VerificationIPFlowResultResponse = original.VerificationIPFlowResultResponse

// Network Virtual Appliance NIC properties.
type VirtualApplianceNicProperties = original.VirtualApplianceNicProperties

// Network Virtual Appliance Sku Properties.
type VirtualApplianceSKUProperties = original.VirtualApplianceSKUProperties

// VirtualApplianceSKUsClient contains the methods for the VirtualApplianceSKUs group.
// Don't use this type directly, use NewVirtualApplianceSKUsClient() instead.
type VirtualApplianceSKUsClient = original.VirtualApplianceSKUsClient

// VirtualApplianceSKUsGetOptions contains the optional parameters for the VirtualApplianceSKUs.Get method.
type VirtualApplianceSKUsGetOptions = original.VirtualApplianceSKUsGetOptions

// VirtualApplianceSKUsListOptions contains the optional parameters for the VirtualApplianceSKUs.List method.
type VirtualApplianceSKUsListOptions = original.VirtualApplianceSKUsListOptions

// Virtual Appliance Site resource.
type VirtualApplianceSite = original.VirtualApplianceSite

// VirtualApplianceSitePoller provides polling facilities until the operation completes
type VirtualApplianceSitePoller = original.VirtualApplianceSitePoller

// VirtualApplianceSitePollerResponse is the response envelope for operations that asynchronously return a VirtualApplianceSite type.
type VirtualApplianceSitePollerResponse = original.VirtualApplianceSitePollerResponse

// Properties of the rule group.
type VirtualApplianceSiteProperties = original.VirtualApplianceSiteProperties

// VirtualApplianceSiteResponse is the response envelope for operations that return a VirtualApplianceSite type.
type VirtualApplianceSiteResponse = original.VirtualApplianceSiteResponse

// VirtualApplianceSitesBeginCreateOrUpdateOptions contains the optional parameters for the VirtualApplianceSites.BeginCreateOrUpdate method.
type VirtualApplianceSitesBeginCreateOrUpdateOptions = original.VirtualApplianceSitesBeginCreateOrUpdateOptions

// VirtualApplianceSitesBeginDeleteOptions contains the optional parameters for the VirtualApplianceSites.BeginDelete method.
type VirtualApplianceSitesBeginDeleteOptions = original.VirtualApplianceSitesBeginDeleteOptions

// VirtualApplianceSitesClient contains the methods for the VirtualApplianceSites group.
// Don't use this type directly, use NewVirtualApplianceSitesClient() instead.
type VirtualApplianceSitesClient = original.VirtualApplianceSitesClient

// VirtualApplianceSitesGetOptions contains the optional parameters for the VirtualApplianceSites.Get method.
type VirtualApplianceSitesGetOptions = original.VirtualApplianceSitesGetOptions

// VirtualApplianceSitesListOptions contains the optional parameters for the VirtualApplianceSites.List method.
type VirtualApplianceSitesListOptions = original.VirtualApplianceSitesListOptions

// VirtualHub Resource.
type VirtualHub = original.VirtualHub

// VirtualHubBgpConnectionBeginCreateOrUpdateOptions contains the optional parameters for the VirtualHubBgpConnection.BeginCreateOrUpdate method.
type VirtualHubBgpConnectionBeginCreateOrUpdateOptions = original.VirtualHubBgpConnectionBeginCreateOrUpdateOptions

// VirtualHubBgpConnectionBeginDeleteOptions contains the optional parameters for the VirtualHubBgpConnection.BeginDelete method.
type VirtualHubBgpConnectionBeginDeleteOptions = original.VirtualHubBgpConnectionBeginDeleteOptions

// VirtualHubBgpConnectionClient contains the methods for the VirtualHubBgpConnection group.
// Don't use this type directly, use NewVirtualHubBgpConnectionClient() instead.
type VirtualHubBgpConnectionClient = original.VirtualHubBgpConnectionClient

// VirtualHubBgpConnectionGetOptions contains the optional parameters for the VirtualHubBgpConnection.Get method.
type VirtualHubBgpConnectionGetOptions = original.VirtualHubBgpConnectionGetOptions

// VirtualHubBgpConnectionsBeginListAdvertisedRoutesOptions contains the optional parameters for the VirtualHubBgpConnections.BeginListAdvertisedRoutes
// method.
type VirtualHubBgpConnectionsBeginListAdvertisedRoutesOptions = original.VirtualHubBgpConnectionsBeginListAdvertisedRoutesOptions

// VirtualHubBgpConnectionsBeginListLearnedRoutesOptions contains the optional parameters for the VirtualHubBgpConnections.BeginListLearnedRoutes method.
type VirtualHubBgpConnectionsBeginListLearnedRoutesOptions = original.VirtualHubBgpConnectionsBeginListLearnedRoutesOptions

// VirtualHubBgpConnectionsClient contains the methods for the VirtualHubBgpConnections group.
// Don't use this type directly, use NewVirtualHubBgpConnectionsClient() instead.
type VirtualHubBgpConnectionsClient = original.VirtualHubBgpConnectionsClient

// VirtualHubBgpConnectionsListOptions contains the optional parameters for the VirtualHubBgpConnections.List method.
type VirtualHubBgpConnectionsListOptions = original.VirtualHubBgpConnectionsListOptions

// The effective route configured on the virtual hub or specified resource.
type VirtualHubEffectiveRoute = original.VirtualHubEffectiveRoute

// EffectiveRoutes List.
type VirtualHubEffectiveRouteList = original.VirtualHubEffectiveRouteList

// Virtual Hub identifier.
type VirtualHubID = original.VirtualHubID

// VirtualHubIPConfigurationBeginCreateOrUpdateOptions contains the optional parameters for the VirtualHubIPConfiguration.BeginCreateOrUpdate method.
type VirtualHubIPConfigurationBeginCreateOrUpdateOptions = original.VirtualHubIPConfigurationBeginCreateOrUpdateOptions

// VirtualHubIPConfigurationBeginDeleteOptions contains the optional parameters for the VirtualHubIPConfiguration.BeginDelete method.
type VirtualHubIPConfigurationBeginDeleteOptions = original.VirtualHubIPConfigurationBeginDeleteOptions

// VirtualHubIPConfigurationClient contains the methods for the VirtualHubIPConfiguration group.
// Don't use this type directly, use NewVirtualHubIPConfigurationClient() instead.
type VirtualHubIPConfigurationClient = original.VirtualHubIPConfigurationClient

// VirtualHubIPConfigurationGetOptions contains the optional parameters for the VirtualHubIPConfiguration.Get method.
type VirtualHubIPConfigurationGetOptions = original.VirtualHubIPConfigurationGetOptions

// VirtualHubIPConfigurationListOptions contains the optional parameters for the VirtualHubIPConfiguration.List method.
type VirtualHubIPConfigurationListOptions = original.VirtualHubIPConfigurationListOptions

// VirtualHubPoller provides polling facilities until the operation completes
type VirtualHubPoller = original.VirtualHubPoller

// VirtualHubPollerResponse is the response envelope for operations that asynchronously return a VirtualHub type.
type VirtualHubPollerResponse = original.VirtualHubPollerResponse

// Parameters for VirtualHub.
type VirtualHubProperties = original.VirtualHubProperties

// VirtualHubResponse is the response envelope for operations that return a VirtualHub type.
type VirtualHubResponse = original.VirtualHubResponse

// VirtualHub route.
type VirtualHubRoute = original.VirtualHubRoute

// VirtualHub route table.
type VirtualHubRouteTable = original.VirtualHubRouteTable

// VirtualHubRouteTableV2 Resource.
type VirtualHubRouteTableV2 = original.VirtualHubRouteTableV2

// VirtualHubRouteTableV2Poller provides polling facilities until the operation completes
type VirtualHubRouteTableV2Poller = original.VirtualHubRouteTableV2Poller

// VirtualHubRouteTableV2PollerResponse is the response envelope for operations that asynchronously return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2PollerResponse = original.VirtualHubRouteTableV2PollerResponse

// Parameters for VirtualHubRouteTableV2.
type VirtualHubRouteTableV2Properties = original.VirtualHubRouteTableV2Properties

// VirtualHubRouteTableV2Response is the response envelope for operations that return a VirtualHubRouteTableV2 type.
type VirtualHubRouteTableV2Response = original.VirtualHubRouteTableV2Response

// VirtualHubRouteTableV2SBeginCreateOrUpdateOptions contains the optional parameters for the VirtualHubRouteTableV2S.BeginCreateOrUpdate method.
type VirtualHubRouteTableV2SBeginCreateOrUpdateOptions = original.VirtualHubRouteTableV2SBeginCreateOrUpdateOptions

// VirtualHubRouteTableV2SBeginDeleteOptions contains the optional parameters for the VirtualHubRouteTableV2S.BeginDelete method.
type VirtualHubRouteTableV2SBeginDeleteOptions = original.VirtualHubRouteTableV2SBeginDeleteOptions

// VirtualHubRouteTableV2SClient contains the methods for the VirtualHubRouteTableV2S group.
// Don't use this type directly, use NewVirtualHubRouteTableV2SClient() instead.
type VirtualHubRouteTableV2SClient = original.VirtualHubRouteTableV2SClient

// VirtualHubRouteTableV2SGetOptions contains the optional parameters for the VirtualHubRouteTableV2S.Get method.
type VirtualHubRouteTableV2SGetOptions = original.VirtualHubRouteTableV2SGetOptions

// VirtualHubRouteTableV2SListOptions contains the optional parameters for the VirtualHubRouteTableV2S.List method.
type VirtualHubRouteTableV2SListOptions = original.VirtualHubRouteTableV2SListOptions

// VirtualHubRouteTableV2 route.
type VirtualHubRouteV2 = original.VirtualHubRouteV2

// VirtualHubsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualHubs.BeginCreateOrUpdate method.
type VirtualHubsBeginCreateOrUpdateOptions = original.VirtualHubsBeginCreateOrUpdateOptions

// VirtualHubsBeginDeleteOptions contains the optional parameters for the VirtualHubs.BeginDelete method.
type VirtualHubsBeginDeleteOptions = original.VirtualHubsBeginDeleteOptions

// VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions contains the optional parameters for the VirtualHubs.BeginGetEffectiveVirtualHubRoutes method.
type VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions = original.VirtualHubsBeginGetEffectiveVirtualHubRoutesOptions

// VirtualHubsClient contains the methods for the VirtualHubs group.
// Don't use this type directly, use NewVirtualHubsClient() instead.
type VirtualHubsClient = original.VirtualHubsClient

// VirtualHubsGetOptions contains the optional parameters for the VirtualHubs.Get method.
type VirtualHubsGetOptions = original.VirtualHubsGetOptions

// VirtualHubsListByResourceGroupOptions contains the optional parameters for the VirtualHubs.ListByResourceGroup method.
type VirtualHubsListByResourceGroupOptions = original.VirtualHubsListByResourceGroupOptions

// VirtualHubsListOptions contains the optional parameters for the VirtualHubs.List method.
type VirtualHubsListOptions = original.VirtualHubsListOptions

// VirtualHubsUpdateTagsOptions contains the optional parameters for the VirtualHubs.UpdateTags method.
type VirtualHubsUpdateTagsOptions = original.VirtualHubsUpdateTagsOptions

// Virtual Network resource.
type VirtualNetwork = original.VirtualNetwork

// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
type VirtualNetworkBgpCommunities = original.VirtualNetworkBgpCommunities

// A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
type VirtualNetworkConnectionGatewayReference = original.VirtualNetworkConnectionGatewayReference

// A common class for general resource information.
type VirtualNetworkGateway = original.VirtualNetworkGateway

// A common class for general resource information.
type VirtualNetworkGatewayConnection = original.VirtualNetworkGatewayConnection

// A common class for general resource information.
type VirtualNetworkGatewayConnectionListEntity = original.VirtualNetworkGatewayConnectionListEntity

// VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionListEntityPropertiesFormat = original.VirtualNetworkGatewayConnectionListEntityPropertiesFormat

// Response for the ListVirtualNetworkGatewayConnections API service call.
type VirtualNetworkGatewayConnectionListResult = original.VirtualNetworkGatewayConnectionListResult

// VirtualNetworkGatewayConnectionListResultPager provides iteration over VirtualNetworkGatewayConnectionListResult pages.
type VirtualNetworkGatewayConnectionListResultPager = original.VirtualNetworkGatewayConnectionListResultPager

// VirtualNetworkGatewayConnectionListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayConnectionListResult type.
type VirtualNetworkGatewayConnectionListResultResponse = original.VirtualNetworkGatewayConnectionListResultResponse

// VirtualNetworkGatewayConnectionPoller provides polling facilities until the operation completes
type VirtualNetworkGatewayConnectionPoller = original.VirtualNetworkGatewayConnectionPoller

// VirtualNetworkGatewayConnectionPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionPollerResponse = original.VirtualNetworkGatewayConnectionPollerResponse

// VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionPropertiesFormat = original.VirtualNetworkGatewayConnectionPropertiesFormat

// VirtualNetworkGatewayConnectionResponse is the response envelope for operations that return a VirtualNetworkGatewayConnection type.
type VirtualNetworkGatewayConnectionResponse = original.VirtualNetworkGatewayConnectionResponse

// VirtualNetworkGatewayConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginCreateOrUpdate
// method.
type VirtualNetworkGatewayConnectionsBeginCreateOrUpdateOptions = original.VirtualNetworkGatewayConnectionsBeginCreateOrUpdateOptions

// VirtualNetworkGatewayConnectionsBeginDeleteOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginDelete method.
type VirtualNetworkGatewayConnectionsBeginDeleteOptions = original.VirtualNetworkGatewayConnectionsBeginDeleteOptions

// VirtualNetworkGatewayConnectionsBeginResetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginResetSharedKey
// method.
type VirtualNetworkGatewayConnectionsBeginResetSharedKeyOptions = original.VirtualNetworkGatewayConnectionsBeginResetSharedKeyOptions

// VirtualNetworkGatewayConnectionsBeginSetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginSetSharedKey
// method.
type VirtualNetworkGatewayConnectionsBeginSetSharedKeyOptions = original.VirtualNetworkGatewayConnectionsBeginSetSharedKeyOptions

// VirtualNetworkGatewayConnectionsBeginStartPacketCaptureOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginStartPacketCapture
// method.
type VirtualNetworkGatewayConnectionsBeginStartPacketCaptureOptions = original.VirtualNetworkGatewayConnectionsBeginStartPacketCaptureOptions

// VirtualNetworkGatewayConnectionsBeginStopPacketCaptureOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginStopPacketCapture
// method.
type VirtualNetworkGatewayConnectionsBeginStopPacketCaptureOptions = original.VirtualNetworkGatewayConnectionsBeginStopPacketCaptureOptions

// VirtualNetworkGatewayConnectionsBeginUpdateTagsOptions contains the optional parameters for the VirtualNetworkGatewayConnections.BeginUpdateTags method.
type VirtualNetworkGatewayConnectionsBeginUpdateTagsOptions = original.VirtualNetworkGatewayConnectionsBeginUpdateTagsOptions

// VirtualNetworkGatewayConnectionsClient contains the methods for the VirtualNetworkGatewayConnections group.
// Don't use this type directly, use NewVirtualNetworkGatewayConnectionsClient() instead.
type VirtualNetworkGatewayConnectionsClient = original.VirtualNetworkGatewayConnectionsClient

// VirtualNetworkGatewayConnectionsGetOptions contains the optional parameters for the VirtualNetworkGatewayConnections.Get method.
type VirtualNetworkGatewayConnectionsGetOptions = original.VirtualNetworkGatewayConnectionsGetOptions

// VirtualNetworkGatewayConnectionsGetSharedKeyOptions contains the optional parameters for the VirtualNetworkGatewayConnections.GetSharedKey method.
type VirtualNetworkGatewayConnectionsGetSharedKeyOptions = original.VirtualNetworkGatewayConnectionsGetSharedKeyOptions

// VirtualNetworkGatewayConnectionsListOptions contains the optional parameters for the VirtualNetworkGatewayConnections.List method.
type VirtualNetworkGatewayConnectionsListOptions = original.VirtualNetworkGatewayConnectionsListOptions

// IP configuration for virtual network gateway.
type VirtualNetworkGatewayIPConfiguration = original.VirtualNetworkGatewayIPConfiguration

// Properties of VirtualNetworkGatewayIPConfiguration.
type VirtualNetworkGatewayIPConfigurationPropertiesFormat = original.VirtualNetworkGatewayIPConfigurationPropertiesFormat

// Response for the VirtualNetworkGatewayListConnections API service call.
type VirtualNetworkGatewayListConnectionsResult = original.VirtualNetworkGatewayListConnectionsResult

// VirtualNetworkGatewayListConnectionsResultPager provides iteration over VirtualNetworkGatewayListConnectionsResult pages.
type VirtualNetworkGatewayListConnectionsResultPager = original.VirtualNetworkGatewayListConnectionsResultPager

// VirtualNetworkGatewayListConnectionsResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListConnectionsResult type.
type VirtualNetworkGatewayListConnectionsResultResponse = original.VirtualNetworkGatewayListConnectionsResultResponse

// Response for the ListVirtualNetworkGateways API service call.
type VirtualNetworkGatewayListResult = original.VirtualNetworkGatewayListResult

// VirtualNetworkGatewayListResultPager provides iteration over VirtualNetworkGatewayListResult pages.
type VirtualNetworkGatewayListResultPager = original.VirtualNetworkGatewayListResultPager

// VirtualNetworkGatewayListResultResponse is the response envelope for operations that return a VirtualNetworkGatewayListResult type.
type VirtualNetworkGatewayListResultResponse = original.VirtualNetworkGatewayListResultResponse

// VirtualNetworkGatewayPoller provides polling facilities until the operation completes
type VirtualNetworkGatewayPoller = original.VirtualNetworkGatewayPoller

// VirtualNetworkGatewayPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkGateway type.
type VirtualNetworkGatewayPollerResponse = original.VirtualNetworkGatewayPollerResponse

// VirtualNetworkGateway properties.
type VirtualNetworkGatewayPropertiesFormat = original.VirtualNetworkGatewayPropertiesFormat

// VirtualNetworkGatewayResponse is the response envelope for operations that return a VirtualNetworkGateway type.
type VirtualNetworkGatewayResponse = original.VirtualNetworkGatewayResponse

// VirtualNetworkGatewaySku details.
type VirtualNetworkGatewaySKU = original.VirtualNetworkGatewaySKU

// VirtualNetworkGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkGateways.BeginCreateOrUpdate method.
type VirtualNetworkGatewaysBeginCreateOrUpdateOptions = original.VirtualNetworkGatewaysBeginCreateOrUpdateOptions

// VirtualNetworkGatewaysBeginDeleteOptions contains the optional parameters for the VirtualNetworkGateways.BeginDelete method.
type VirtualNetworkGatewaysBeginDeleteOptions = original.VirtualNetworkGatewaysBeginDeleteOptions

// VirtualNetworkGatewaysBeginDisconnectVirtualNetworkGatewayVpnConnectionsOptions contains the optional parameters for the VirtualNetworkGateways.BeginDisconnectVirtualNetworkGatewayVpnConnections
// method.
type VirtualNetworkGatewaysBeginDisconnectVirtualNetworkGatewayVpnConnectionsOptions = original.VirtualNetworkGatewaysBeginDisconnectVirtualNetworkGatewayVpnConnectionsOptions

// VirtualNetworkGatewaysBeginGenerateVpnProfileOptions contains the optional parameters for the VirtualNetworkGateways.BeginGenerateVpnProfile method.
type VirtualNetworkGatewaysBeginGenerateVpnProfileOptions = original.VirtualNetworkGatewaysBeginGenerateVpnProfileOptions

// VirtualNetworkGatewaysBeginGeneratevpnclientpackageOptions contains the optional parameters for the VirtualNetworkGateways.BeginGeneratevpnclientpackage
// method.
type VirtualNetworkGatewaysBeginGeneratevpnclientpackageOptions = original.VirtualNetworkGatewaysBeginGeneratevpnclientpackageOptions

// VirtualNetworkGatewaysBeginGetAdvertisedRoutesOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetAdvertisedRoutes method.
type VirtualNetworkGatewaysBeginGetAdvertisedRoutesOptions = original.VirtualNetworkGatewaysBeginGetAdvertisedRoutesOptions

// VirtualNetworkGatewaysBeginGetBgpPeerStatusOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetBgpPeerStatus method.
type VirtualNetworkGatewaysBeginGetBgpPeerStatusOptions = original.VirtualNetworkGatewaysBeginGetBgpPeerStatusOptions

// VirtualNetworkGatewaysBeginGetLearnedRoutesOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetLearnedRoutes method.
type VirtualNetworkGatewaysBeginGetLearnedRoutesOptions = original.VirtualNetworkGatewaysBeginGetLearnedRoutesOptions

// VirtualNetworkGatewaysBeginGetVpnProfilePackageURLOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetVpnProfilePackageURL
// method.
type VirtualNetworkGatewaysBeginGetVpnProfilePackageURLOptions = original.VirtualNetworkGatewaysBeginGetVpnProfilePackageURLOptions

// VirtualNetworkGatewaysBeginGetVpnclientConnectionHealthOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetVpnclientConnectionHealth
// method.
type VirtualNetworkGatewaysBeginGetVpnclientConnectionHealthOptions = original.VirtualNetworkGatewaysBeginGetVpnclientConnectionHealthOptions

// VirtualNetworkGatewaysBeginGetVpnclientIPsecParametersOptions contains the optional parameters for the VirtualNetworkGateways.BeginGetVpnclientIPsecParameters
// method.
type VirtualNetworkGatewaysBeginGetVpnclientIPsecParametersOptions = original.VirtualNetworkGatewaysBeginGetVpnclientIPsecParametersOptions

// VirtualNetworkGatewaysBeginResetOptions contains the optional parameters for the VirtualNetworkGateways.BeginReset method.
type VirtualNetworkGatewaysBeginResetOptions = original.VirtualNetworkGatewaysBeginResetOptions

// VirtualNetworkGatewaysBeginResetVpnClientSharedKeyOptions contains the optional parameters for the VirtualNetworkGateways.BeginResetVpnClientSharedKey
// method.
type VirtualNetworkGatewaysBeginResetVpnClientSharedKeyOptions = original.VirtualNetworkGatewaysBeginResetVpnClientSharedKeyOptions

// VirtualNetworkGatewaysBeginSetVpnclientIPsecParametersOptions contains the optional parameters for the VirtualNetworkGateways.BeginSetVpnclientIPsecParameters
// method.
type VirtualNetworkGatewaysBeginSetVpnclientIPsecParametersOptions = original.VirtualNetworkGatewaysBeginSetVpnclientIPsecParametersOptions

// VirtualNetworkGatewaysBeginStartPacketCaptureOptions contains the optional parameters for the VirtualNetworkGateways.BeginStartPacketCapture method.
type VirtualNetworkGatewaysBeginStartPacketCaptureOptions = original.VirtualNetworkGatewaysBeginStartPacketCaptureOptions

// VirtualNetworkGatewaysBeginStopPacketCaptureOptions contains the optional parameters for the VirtualNetworkGateways.BeginStopPacketCapture method.
type VirtualNetworkGatewaysBeginStopPacketCaptureOptions = original.VirtualNetworkGatewaysBeginStopPacketCaptureOptions

// VirtualNetworkGatewaysBeginUpdateTagsOptions contains the optional parameters for the VirtualNetworkGateways.BeginUpdateTags method.
type VirtualNetworkGatewaysBeginUpdateTagsOptions = original.VirtualNetworkGatewaysBeginUpdateTagsOptions

// VirtualNetworkGatewaysClient contains the methods for the VirtualNetworkGateways group.
// Don't use this type directly, use NewVirtualNetworkGatewaysClient() instead.
type VirtualNetworkGatewaysClient = original.VirtualNetworkGatewaysClient

// VirtualNetworkGatewaysGetOptions contains the optional parameters for the VirtualNetworkGateways.Get method.
type VirtualNetworkGatewaysGetOptions = original.VirtualNetworkGatewaysGetOptions

// VirtualNetworkGatewaysListConnectionsOptions contains the optional parameters for the VirtualNetworkGateways.ListConnections method.
type VirtualNetworkGatewaysListConnectionsOptions = original.VirtualNetworkGatewaysListConnectionsOptions

// VirtualNetworkGatewaysListOptions contains the optional parameters for the VirtualNetworkGateways.List method.
type VirtualNetworkGatewaysListOptions = original.VirtualNetworkGatewaysListOptions

// VirtualNetworkGatewaysSupportedVpnDevicesOptions contains the optional parameters for the VirtualNetworkGateways.SupportedVpnDevices method.
type VirtualNetworkGatewaysSupportedVpnDevicesOptions = original.VirtualNetworkGatewaysSupportedVpnDevicesOptions

// VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptions contains the optional parameters for the VirtualNetworkGateways.VpnDeviceConfigurationScript
// method.
type VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptions = original.VirtualNetworkGatewaysVpnDeviceConfigurationScriptOptions

// Response for the ListVirtualNetworks API service call.
type VirtualNetworkListResult = original.VirtualNetworkListResult

// VirtualNetworkListResultPager provides iteration over VirtualNetworkListResult pages.
type VirtualNetworkListResultPager = original.VirtualNetworkListResultPager

// VirtualNetworkListResultResponse is the response envelope for operations that return a VirtualNetworkListResult type.
type VirtualNetworkListResultResponse = original.VirtualNetworkListResultResponse

// Response for the virtual networks GetUsage API service call.
type VirtualNetworkListUsageResult = original.VirtualNetworkListUsageResult

// VirtualNetworkListUsageResultPager provides iteration over VirtualNetworkListUsageResult pages.
type VirtualNetworkListUsageResultPager = original.VirtualNetworkListUsageResultPager

// VirtualNetworkListUsageResultResponse is the response envelope for operations that return a VirtualNetworkListUsageResult type.
type VirtualNetworkListUsageResultResponse = original.VirtualNetworkListUsageResultResponse

// Peerings in a virtual network resource.
type VirtualNetworkPeering = original.VirtualNetworkPeering

// Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.
type VirtualNetworkPeeringListResult = original.VirtualNetworkPeeringListResult

// VirtualNetworkPeeringListResultPager provides iteration over VirtualNetworkPeeringListResult pages.
type VirtualNetworkPeeringListResultPager = original.VirtualNetworkPeeringListResultPager

// VirtualNetworkPeeringListResultResponse is the response envelope for operations that return a VirtualNetworkPeeringListResult type.
type VirtualNetworkPeeringListResultResponse = original.VirtualNetworkPeeringListResultResponse

// VirtualNetworkPeeringPoller provides polling facilities until the operation completes
type VirtualNetworkPeeringPoller = original.VirtualNetworkPeeringPoller

// VirtualNetworkPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkPeering type.
type VirtualNetworkPeeringPollerResponse = original.VirtualNetworkPeeringPollerResponse

// Properties of the virtual network peering.
type VirtualNetworkPeeringPropertiesFormat = original.VirtualNetworkPeeringPropertiesFormat

// VirtualNetworkPeeringResponse is the response envelope for operations that return a VirtualNetworkPeering type.
type VirtualNetworkPeeringResponse = original.VirtualNetworkPeeringResponse

// VirtualNetworkPeeringsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkPeerings.BeginCreateOrUpdate method.
type VirtualNetworkPeeringsBeginCreateOrUpdateOptions = original.VirtualNetworkPeeringsBeginCreateOrUpdateOptions

// VirtualNetworkPeeringsBeginDeleteOptions contains the optional parameters for the VirtualNetworkPeerings.BeginDelete method.
type VirtualNetworkPeeringsBeginDeleteOptions = original.VirtualNetworkPeeringsBeginDeleteOptions

// VirtualNetworkPeeringsClient contains the methods for the VirtualNetworkPeerings group.
// Don't use this type directly, use NewVirtualNetworkPeeringsClient() instead.
type VirtualNetworkPeeringsClient = original.VirtualNetworkPeeringsClient

// VirtualNetworkPeeringsGetOptions contains the optional parameters for the VirtualNetworkPeerings.Get method.
type VirtualNetworkPeeringsGetOptions = original.VirtualNetworkPeeringsGetOptions

// VirtualNetworkPeeringsListOptions contains the optional parameters for the VirtualNetworkPeerings.List method.
type VirtualNetworkPeeringsListOptions = original.VirtualNetworkPeeringsListOptions

// VirtualNetworkPoller provides polling facilities until the operation completes
type VirtualNetworkPoller = original.VirtualNetworkPoller

// VirtualNetworkPollerResponse is the response envelope for operations that asynchronously return a VirtualNetwork type.
type VirtualNetworkPollerResponse = original.VirtualNetworkPollerResponse

// Properties of the virtual network.
type VirtualNetworkPropertiesFormat = original.VirtualNetworkPropertiesFormat

// VirtualNetworkResponse is the response envelope for operations that return a VirtualNetwork type.
type VirtualNetworkResponse = original.VirtualNetworkResponse

// Virtual Network Tap resource.
type VirtualNetworkTap = original.VirtualNetworkTap

// Response for ListVirtualNetworkTap API service call.
type VirtualNetworkTapListResult = original.VirtualNetworkTapListResult

// VirtualNetworkTapListResultPager provides iteration over VirtualNetworkTapListResult pages.
type VirtualNetworkTapListResultPager = original.VirtualNetworkTapListResultPager

// VirtualNetworkTapListResultResponse is the response envelope for operations that return a VirtualNetworkTapListResult type.
type VirtualNetworkTapListResultResponse = original.VirtualNetworkTapListResultResponse

// VirtualNetworkTapPoller provides polling facilities until the operation completes
type VirtualNetworkTapPoller = original.VirtualNetworkTapPoller

// VirtualNetworkTapPollerResponse is the response envelope for operations that asynchronously return a VirtualNetworkTap type.
type VirtualNetworkTapPollerResponse = original.VirtualNetworkTapPollerResponse

// Virtual Network Tap properties.
type VirtualNetworkTapPropertiesFormat = original.VirtualNetworkTapPropertiesFormat

// VirtualNetworkTapResponse is the response envelope for operations that return a VirtualNetworkTap type.
type VirtualNetworkTapResponse = original.VirtualNetworkTapResponse

// VirtualNetworkTapsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkTaps.BeginCreateOrUpdate method.
type VirtualNetworkTapsBeginCreateOrUpdateOptions = original.VirtualNetworkTapsBeginCreateOrUpdateOptions

// VirtualNetworkTapsBeginDeleteOptions contains the optional parameters for the VirtualNetworkTaps.BeginDelete method.
type VirtualNetworkTapsBeginDeleteOptions = original.VirtualNetworkTapsBeginDeleteOptions

// VirtualNetworkTapsClient contains the methods for the VirtualNetworkTaps group.
// Don't use this type directly, use NewVirtualNetworkTapsClient() instead.
type VirtualNetworkTapsClient = original.VirtualNetworkTapsClient

// VirtualNetworkTapsGetOptions contains the optional parameters for the VirtualNetworkTaps.Get method.
type VirtualNetworkTapsGetOptions = original.VirtualNetworkTapsGetOptions

// VirtualNetworkTapsListAllOptions contains the optional parameters for the VirtualNetworkTaps.ListAll method.
type VirtualNetworkTapsListAllOptions = original.VirtualNetworkTapsListAllOptions

// VirtualNetworkTapsListByResourceGroupOptions contains the optional parameters for the VirtualNetworkTaps.ListByResourceGroup method.
type VirtualNetworkTapsListByResourceGroupOptions = original.VirtualNetworkTapsListByResourceGroupOptions

// VirtualNetworkTapsUpdateTagsOptions contains the optional parameters for the VirtualNetworkTaps.UpdateTags method.
type VirtualNetworkTapsUpdateTagsOptions = original.VirtualNetworkTapsUpdateTagsOptions

// Usage details for subnet.
type VirtualNetworkUsage = original.VirtualNetworkUsage

// Usage strings container.
type VirtualNetworkUsageName = original.VirtualNetworkUsageName

// VirtualNetworksBeginCreateOrUpdateOptions contains the optional parameters for the VirtualNetworks.BeginCreateOrUpdate method.
type VirtualNetworksBeginCreateOrUpdateOptions = original.VirtualNetworksBeginCreateOrUpdateOptions

// VirtualNetworksBeginDeleteOptions contains the optional parameters for the VirtualNetworks.BeginDelete method.
type VirtualNetworksBeginDeleteOptions = original.VirtualNetworksBeginDeleteOptions

// VirtualNetworksCheckIPAddressAvailabilityOptions contains the optional parameters for the VirtualNetworks.CheckIPAddressAvailability method.
type VirtualNetworksCheckIPAddressAvailabilityOptions = original.VirtualNetworksCheckIPAddressAvailabilityOptions

// VirtualNetworksClient contains the methods for the VirtualNetworks group.
// Don't use this type directly, use NewVirtualNetworksClient() instead.
type VirtualNetworksClient = original.VirtualNetworksClient

// VirtualNetworksGetOptions contains the optional parameters for the VirtualNetworks.Get method.
type VirtualNetworksGetOptions = original.VirtualNetworksGetOptions

// VirtualNetworksListAllOptions contains the optional parameters for the VirtualNetworks.ListAll method.
type VirtualNetworksListAllOptions = original.VirtualNetworksListAllOptions

// VirtualNetworksListOptions contains the optional parameters for the VirtualNetworks.List method.
type VirtualNetworksListOptions = original.VirtualNetworksListOptions

// VirtualNetworksListUsageOptions contains the optional parameters for the VirtualNetworks.ListUsage method.
type VirtualNetworksListUsageOptions = original.VirtualNetworksListUsageOptions

// VirtualNetworksUpdateTagsOptions contains the optional parameters for the VirtualNetworks.UpdateTags method.
type VirtualNetworksUpdateTagsOptions = original.VirtualNetworksUpdateTagsOptions

// VirtualRouter Resource.
type VirtualRouter = original.VirtualRouter

// Response for ListVirtualRouters API service call.
type VirtualRouterListResult = original.VirtualRouterListResult

// VirtualRouterListResultPager provides iteration over VirtualRouterListResult pages.
type VirtualRouterListResultPager = original.VirtualRouterListResultPager

// VirtualRouterListResultResponse is the response envelope for operations that return a VirtualRouterListResult type.
type VirtualRouterListResultResponse = original.VirtualRouterListResultResponse

// Virtual Router Peering resource.
type VirtualRouterPeering = original.VirtualRouterPeering

// Response for ListVirtualRouterPeerings API service call.
type VirtualRouterPeeringListResult = original.VirtualRouterPeeringListResult

// VirtualRouterPeeringListResultPager provides iteration over VirtualRouterPeeringListResult pages.
type VirtualRouterPeeringListResultPager = original.VirtualRouterPeeringListResultPager

// VirtualRouterPeeringListResultResponse is the response envelope for operations that return a VirtualRouterPeeringListResult type.
type VirtualRouterPeeringListResultResponse = original.VirtualRouterPeeringListResultResponse

// VirtualRouterPeeringPoller provides polling facilities until the operation completes
type VirtualRouterPeeringPoller = original.VirtualRouterPeeringPoller

// VirtualRouterPeeringPollerResponse is the response envelope for operations that asynchronously return a VirtualRouterPeering type.
type VirtualRouterPeeringPollerResponse = original.VirtualRouterPeeringPollerResponse

// Properties of the rule group.
type VirtualRouterPeeringProperties = original.VirtualRouterPeeringProperties

// VirtualRouterPeeringResponse is the response envelope for operations that return a VirtualRouterPeering type.
type VirtualRouterPeeringResponse = original.VirtualRouterPeeringResponse

// VirtualRouterPeeringsBeginCreateOrUpdateOptions contains the optional parameters for the VirtualRouterPeerings.BeginCreateOrUpdate method.
type VirtualRouterPeeringsBeginCreateOrUpdateOptions = original.VirtualRouterPeeringsBeginCreateOrUpdateOptions

// VirtualRouterPeeringsBeginDeleteOptions contains the optional parameters for the VirtualRouterPeerings.BeginDelete method.
type VirtualRouterPeeringsBeginDeleteOptions = original.VirtualRouterPeeringsBeginDeleteOptions

// VirtualRouterPeeringsClient contains the methods for the VirtualRouterPeerings group.
// Don't use this type directly, use NewVirtualRouterPeeringsClient() instead.
type VirtualRouterPeeringsClient = original.VirtualRouterPeeringsClient

// VirtualRouterPeeringsGetOptions contains the optional parameters for the VirtualRouterPeerings.Get method.
type VirtualRouterPeeringsGetOptions = original.VirtualRouterPeeringsGetOptions

// VirtualRouterPeeringsListOptions contains the optional parameters for the VirtualRouterPeerings.List method.
type VirtualRouterPeeringsListOptions = original.VirtualRouterPeeringsListOptions

// VirtualRouterPoller provides polling facilities until the operation completes
type VirtualRouterPoller = original.VirtualRouterPoller

// VirtualRouterPollerResponse is the response envelope for operations that asynchronously return a VirtualRouter type.
type VirtualRouterPollerResponse = original.VirtualRouterPollerResponse

// Virtual Router definition.
type VirtualRouterPropertiesFormat = original.VirtualRouterPropertiesFormat

// VirtualRouterResponse is the response envelope for operations that return a VirtualRouter type.
type VirtualRouterResponse = original.VirtualRouterResponse

// VirtualRoutersBeginCreateOrUpdateOptions contains the optional parameters for the VirtualRouters.BeginCreateOrUpdate method.
type VirtualRoutersBeginCreateOrUpdateOptions = original.VirtualRoutersBeginCreateOrUpdateOptions

// VirtualRoutersBeginDeleteOptions contains the optional parameters for the VirtualRouters.BeginDelete method.
type VirtualRoutersBeginDeleteOptions = original.VirtualRoutersBeginDeleteOptions

// VirtualRoutersClient contains the methods for the VirtualRouters group.
// Don't use this type directly, use NewVirtualRoutersClient() instead.
type VirtualRoutersClient = original.VirtualRoutersClient

// VirtualRoutersGetOptions contains the optional parameters for the VirtualRouters.Get method.
type VirtualRoutersGetOptions = original.VirtualRoutersGetOptions

// VirtualRoutersListByResourceGroupOptions contains the optional parameters for the VirtualRouters.ListByResourceGroup method.
type VirtualRoutersListByResourceGroupOptions = original.VirtualRoutersListByResourceGroupOptions

// VirtualRoutersListOptions contains the optional parameters for the VirtualRouters.List method.
type VirtualRoutersListOptions = original.VirtualRoutersListOptions

// VirtualWAN Resource.
type VirtualWan = original.VirtualWan

// VirtualWanPoller provides polling facilities until the operation completes
type VirtualWanPoller = original.VirtualWanPoller

// VirtualWanPollerResponse is the response envelope for operations that asynchronously return a VirtualWan type.
type VirtualWanPollerResponse = original.VirtualWanPollerResponse

// Parameters for VirtualWAN.
type VirtualWanProperties = original.VirtualWanProperties

// VirtualWanResponse is the response envelope for operations that return a VirtualWan type.
type VirtualWanResponse = original.VirtualWanResponse

// Collection of SecurityProviders.
type VirtualWanSecurityProvider = original.VirtualWanSecurityProvider

// Collection of SecurityProviders.
type VirtualWanSecurityProviders = original.VirtualWanSecurityProviders

// VirtualWanSecurityProvidersResponse is the response envelope for operations that return a VirtualWanSecurityProviders type.
type VirtualWanSecurityProvidersResponse = original.VirtualWanSecurityProvidersResponse

// Virtual Wan Vpn profile parameters Vpn profile generation.
type VirtualWanVpnProfileParameters = original.VirtualWanVpnProfileParameters

// VirtualWansBeginCreateOrUpdateOptions contains the optional parameters for the VirtualWans.BeginCreateOrUpdate method.
type VirtualWansBeginCreateOrUpdateOptions = original.VirtualWansBeginCreateOrUpdateOptions

// VirtualWansBeginDeleteOptions contains the optional parameters for the VirtualWans.BeginDelete method.
type VirtualWansBeginDeleteOptions = original.VirtualWansBeginDeleteOptions

// VirtualWansClient contains the methods for the VirtualWans group.
// Don't use this type directly, use NewVirtualWansClient() instead.
type VirtualWansClient = original.VirtualWansClient

// VirtualWansGetOptions contains the optional parameters for the VirtualWans.Get method.
type VirtualWansGetOptions = original.VirtualWansGetOptions

// VirtualWansListByResourceGroupOptions contains the optional parameters for the VirtualWans.ListByResourceGroup method.
type VirtualWansListByResourceGroupOptions = original.VirtualWansListByResourceGroupOptions

// VirtualWansListOptions contains the optional parameters for the VirtualWans.List method.
type VirtualWansListOptions = original.VirtualWansListOptions

// VirtualWansUpdateTagsOptions contains the optional parameters for the VirtualWans.UpdateTags method.
type VirtualWansUpdateTagsOptions = original.VirtualWansUpdateTagsOptions

// List of routes that control routing from VirtualHub into a virtual network connection.
type VnetRoute = original.VnetRoute

// VpnClientConfiguration for P2S client.
type VpnClientConfiguration = original.VpnClientConfiguration

// VpnClientConnectionHealth properties.
type VpnClientConnectionHealth = original.VpnClientConnectionHealth

// VPN client connection health detail.
type VpnClientConnectionHealthDetail = original.VpnClientConnectionHealthDetail

// List of virtual network gateway vpn client connection health.
type VpnClientConnectionHealthDetailListResult = original.VpnClientConnectionHealthDetailListResult

// VpnClientConnectionHealthDetailListResultPoller provides polling facilities until the operation completes
type VpnClientConnectionHealthDetailListResultPoller = original.VpnClientConnectionHealthDetailListResultPoller

// VpnClientConnectionHealthDetailListResultPollerResponse is the response envelope for operations that asynchronously return a VpnClientConnectionHealthDetailListResult
// type.
type VpnClientConnectionHealthDetailListResultPollerResponse = original.VpnClientConnectionHealthDetailListResultPollerResponse

// VpnClientConnectionHealthDetailListResultResponse is the response envelope for operations that return a VpnClientConnectionHealthDetailListResult type.
type VpnClientConnectionHealthDetailListResultResponse = original.VpnClientConnectionHealthDetailListResultResponse

// An IPSec parameters for a virtual network gateway P2S connection.
type VpnClientIPsecParameters = original.VpnClientIPsecParameters

// VpnClientIPsecParametersPoller provides polling facilities until the operation completes
type VpnClientIPsecParametersPoller = original.VpnClientIPsecParametersPoller

// VpnClientIPsecParametersPollerResponse is the response envelope for operations that asynchronously return a VpnClientIPsecParameters type.
type VpnClientIPsecParametersPollerResponse = original.VpnClientIPsecParametersPollerResponse

// VpnClientIPsecParametersResponse is the response envelope for operations that return a VpnClientIPsecParameters type.
type VpnClientIPsecParametersResponse = original.VpnClientIPsecParametersResponse

// Vpn Client Parameters for package generation.
type VpnClientParameters = original.VpnClientParameters

// VPN client revoked certificate of virtual network gateway.
type VpnClientRevokedCertificate = original.VpnClientRevokedCertificate

// Properties of the revoked VPN client certificate of virtual network gateway.
type VpnClientRevokedCertificatePropertiesFormat = original.VpnClientRevokedCertificatePropertiesFormat

// VPN client root certificate of virtual network gateway.
type VpnClientRootCertificate = original.VpnClientRootCertificate

// Properties of SSL certificates of application gateway.
type VpnClientRootCertificatePropertiesFormat = original.VpnClientRootCertificatePropertiesFormat

// VpnConnection Resource.
type VpnConnection = original.VpnConnection

// Vpn Connection packet capture parameters supplied to start packet capture on gateway connection.
type VpnConnectionPacketCaptureStartParameters = original.VpnConnectionPacketCaptureStartParameters

// Vpn Connection packet capture parameters supplied to stop packet capture on gateway connection.
type VpnConnectionPacketCaptureStopParameters = original.VpnConnectionPacketCaptureStopParameters

// VpnConnectionPoller provides polling facilities until the operation completes
type VpnConnectionPoller = original.VpnConnectionPoller

// VpnConnectionPollerResponse is the response envelope for operations that asynchronously return a VpnConnection type.
type VpnConnectionPollerResponse = original.VpnConnectionPollerResponse

// Parameters for VpnConnection.
type VpnConnectionProperties = original.VpnConnectionProperties

// VpnConnectionResponse is the response envelope for operations that return a VpnConnection type.
type VpnConnectionResponse = original.VpnConnectionResponse

// VpnConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the VpnConnections.BeginCreateOrUpdate method.
type VpnConnectionsBeginCreateOrUpdateOptions = original.VpnConnectionsBeginCreateOrUpdateOptions

// VpnConnectionsBeginDeleteOptions contains the optional parameters for the VpnConnections.BeginDelete method.
type VpnConnectionsBeginDeleteOptions = original.VpnConnectionsBeginDeleteOptions

// VpnConnectionsBeginStartPacketCaptureOptions contains the optional parameters for the VpnConnections.BeginStartPacketCapture method.
type VpnConnectionsBeginStartPacketCaptureOptions = original.VpnConnectionsBeginStartPacketCaptureOptions

// VpnConnectionsBeginStopPacketCaptureOptions contains the optional parameters for the VpnConnections.BeginStopPacketCapture method.
type VpnConnectionsBeginStopPacketCaptureOptions = original.VpnConnectionsBeginStopPacketCaptureOptions

// VpnConnectionsClient contains the methods for the VpnConnections group.
// Don't use this type directly, use NewVpnConnectionsClient() instead.
type VpnConnectionsClient = original.VpnConnectionsClient

// VpnConnectionsGetOptions contains the optional parameters for the VpnConnections.Get method.
type VpnConnectionsGetOptions = original.VpnConnectionsGetOptions

// VpnConnectionsListByVpnGatewayOptions contains the optional parameters for the VpnConnections.ListByVpnGateway method.
type VpnConnectionsListByVpnGatewayOptions = original.VpnConnectionsListByVpnGatewayOptions

// Vpn device configuration script generation parameters.
type VpnDeviceScriptParameters = original.VpnDeviceScriptParameters

// VpnGateway Resource.
type VpnGateway = original.VpnGateway

// IP Configuration of a VPN Gateway Resource.
type VpnGatewayIPConfiguration = original.VpnGatewayIPConfiguration

// Start packet capture parameters.
type VpnGatewayPacketCaptureStartParameters = original.VpnGatewayPacketCaptureStartParameters

// Stop packet capture parameters.
type VpnGatewayPacketCaptureStopParameters = original.VpnGatewayPacketCaptureStopParameters

// VpnGatewayPoller provides polling facilities until the operation completes
type VpnGatewayPoller = original.VpnGatewayPoller

// VpnGatewayPollerResponse is the response envelope for operations that asynchronously return a VpnGateway type.
type VpnGatewayPollerResponse = original.VpnGatewayPollerResponse

// Parameters for VpnGateway.
type VpnGatewayProperties = original.VpnGatewayProperties

// VpnGatewayResponse is the response envelope for operations that return a VpnGateway type.
type VpnGatewayResponse = original.VpnGatewayResponse

// VpnGatewaysBeginCreateOrUpdateOptions contains the optional parameters for the VpnGateways.BeginCreateOrUpdate method.
type VpnGatewaysBeginCreateOrUpdateOptions = original.VpnGatewaysBeginCreateOrUpdateOptions

// VpnGatewaysBeginDeleteOptions contains the optional parameters for the VpnGateways.BeginDelete method.
type VpnGatewaysBeginDeleteOptions = original.VpnGatewaysBeginDeleteOptions

// VpnGatewaysBeginResetOptions contains the optional parameters for the VpnGateways.BeginReset method.
type VpnGatewaysBeginResetOptions = original.VpnGatewaysBeginResetOptions

// VpnGatewaysBeginStartPacketCaptureOptions contains the optional parameters for the VpnGateways.BeginStartPacketCapture method.
type VpnGatewaysBeginStartPacketCaptureOptions = original.VpnGatewaysBeginStartPacketCaptureOptions

// VpnGatewaysBeginStopPacketCaptureOptions contains the optional parameters for the VpnGateways.BeginStopPacketCapture method.
type VpnGatewaysBeginStopPacketCaptureOptions = original.VpnGatewaysBeginStopPacketCaptureOptions

// VpnGatewaysBeginUpdateTagsOptions contains the optional parameters for the VpnGateways.BeginUpdateTags method.
type VpnGatewaysBeginUpdateTagsOptions = original.VpnGatewaysBeginUpdateTagsOptions

// VpnGatewaysClient contains the methods for the VpnGateways group.
// Don't use this type directly, use NewVpnGatewaysClient() instead.
type VpnGatewaysClient = original.VpnGatewaysClient

// VpnGatewaysGetOptions contains the optional parameters for the VpnGateways.Get method.
type VpnGatewaysGetOptions = original.VpnGatewaysGetOptions

// VpnGatewaysListByResourceGroupOptions contains the optional parameters for the VpnGateways.ListByResourceGroup method.
type VpnGatewaysListByResourceGroupOptions = original.VpnGatewaysListByResourceGroupOptions

// VpnGatewaysListOptions contains the optional parameters for the VpnGateways.List method.
type VpnGatewaysListOptions = original.VpnGatewaysListOptions

// BGP settings details for a link.
type VpnLinkBgpSettings = original.VpnLinkBgpSettings

// VpnLinkConnectionsClient contains the methods for the VpnLinkConnections group.
// Don't use this type directly, use NewVpnLinkConnectionsClient() instead.
type VpnLinkConnectionsClient = original.VpnLinkConnectionsClient

// VpnLinkConnectionsListByVpnConnectionOptions contains the optional parameters for the VpnLinkConnections.ListByVpnConnection method.
type VpnLinkConnectionsListByVpnConnectionOptions = original.VpnLinkConnectionsListByVpnConnectionOptions

// List of properties of a link provider.
type VpnLinkProviderProperties = original.VpnLinkProviderProperties

// Start packet capture parameters on virtual network gateway.
type VpnPacketCaptureStartParameters = original.VpnPacketCaptureStartParameters

// Stop packet capture parameters.
type VpnPacketCaptureStopParameters = original.VpnPacketCaptureStopParameters

// Vpn Profile Response for package generation.
type VpnProfileResponse = original.VpnProfileResponse

// VpnProfileResponsePoller provides polling facilities until the operation completes
type VpnProfileResponsePoller = original.VpnProfileResponsePoller

// VpnProfileResponsePollerResponse is the response envelope for operations that asynchronously return a VpnProfileResponse type.
type VpnProfileResponsePollerResponse = original.VpnProfileResponsePollerResponse

// VpnProfileResponseResponse is the response envelope for operations that return a VpnProfileResponse type.
type VpnProfileResponseResponse = original.VpnProfileResponseResponse

// Properties of the Radius client root certificate of VpnServerConfiguration.
type VpnServerConfigRadiusClientRootCertificate = original.VpnServerConfigRadiusClientRootCertificate

// Properties of Radius Server root certificate of VpnServerConfiguration.
type VpnServerConfigRadiusServerRootCertificate = original.VpnServerConfigRadiusServerRootCertificate

// Properties of the revoked VPN client certificate of VpnServerConfiguration.
type VpnServerConfigVpnClientRevokedCertificate = original.VpnServerConfigVpnClientRevokedCertificate

// Properties of VPN client root certificate of VpnServerConfiguration.
type VpnServerConfigVpnClientRootCertificate = original.VpnServerConfigVpnClientRootCertificate

// VpnServerConfiguration Resource.
type VpnServerConfiguration = original.VpnServerConfiguration

// VpnServerConfigurationPoller provides polling facilities until the operation completes
type VpnServerConfigurationPoller = original.VpnServerConfigurationPoller

// VpnServerConfigurationPollerResponse is the response envelope for operations that asynchronously return a VpnServerConfiguration type.
type VpnServerConfigurationPollerResponse = original.VpnServerConfigurationPollerResponse

// Parameters for VpnServerConfiguration.
type VpnServerConfigurationProperties = original.VpnServerConfigurationProperties

// VpnServerConfigurationResponse is the response envelope for operations that return a VpnServerConfiguration type.
type VpnServerConfigurationResponse = original.VpnServerConfigurationResponse

// VpnServerConfigurationsAssociatedWithVirtualWanBeginListOptions contains the optional parameters for the VpnServerConfigurationsAssociatedWithVirtualWan.BeginList
// method.
type VpnServerConfigurationsAssociatedWithVirtualWanBeginListOptions = original.VpnServerConfigurationsAssociatedWithVirtualWanBeginListOptions

// VpnServerConfigurationsAssociatedWithVirtualWanClient contains the methods for the VpnServerConfigurationsAssociatedWithVirtualWan group.
// Don't use this type directly, use NewVpnServerConfigurationsAssociatedWithVirtualWanClient() instead.
type VpnServerConfigurationsAssociatedWithVirtualWanClient = original.VpnServerConfigurationsAssociatedWithVirtualWanClient

// VpnServerConfigurationsBeginCreateOrUpdateOptions contains the optional parameters for the VpnServerConfigurations.BeginCreateOrUpdate method.
type VpnServerConfigurationsBeginCreateOrUpdateOptions = original.VpnServerConfigurationsBeginCreateOrUpdateOptions

// VpnServerConfigurationsBeginDeleteOptions contains the optional parameters for the VpnServerConfigurations.BeginDelete method.
type VpnServerConfigurationsBeginDeleteOptions = original.VpnServerConfigurationsBeginDeleteOptions

// VpnServerConfigurationsClient contains the methods for the VpnServerConfigurations group.
// Don't use this type directly, use NewVpnServerConfigurationsClient() instead.
type VpnServerConfigurationsClient = original.VpnServerConfigurationsClient

// VpnServerConfigurationsGetOptions contains the optional parameters for the VpnServerConfigurations.Get method.
type VpnServerConfigurationsGetOptions = original.VpnServerConfigurationsGetOptions

// VpnServerConfigurationsListByResourceGroupOptions contains the optional parameters for the VpnServerConfigurations.ListByResourceGroup method.
type VpnServerConfigurationsListByResourceGroupOptions = original.VpnServerConfigurationsListByResourceGroupOptions

// VpnServerConfigurationsListOptions contains the optional parameters for the VpnServerConfigurations.List method.
type VpnServerConfigurationsListOptions = original.VpnServerConfigurationsListOptions

// VpnServerConfigurations list associated with VirtualWan Response.
type VpnServerConfigurationsResponse = original.VpnServerConfigurationsResponse

// VpnServerConfigurationsResponsePoller provides polling facilities until the operation completes
type VpnServerConfigurationsResponsePoller = original.VpnServerConfigurationsResponsePoller

// VpnServerConfigurationsResponsePollerResponse is the response envelope for operations that asynchronously return a VpnServerConfigurationsResponse type.
type VpnServerConfigurationsResponsePollerResponse = original.VpnServerConfigurationsResponsePollerResponse

// VpnServerConfigurationsResponseResponse is the response envelope for operations that return a VpnServerConfigurationsResponse type.
type VpnServerConfigurationsResponseResponse = original.VpnServerConfigurationsResponseResponse

// VpnServerConfigurationsUpdateTagsOptions contains the optional parameters for the VpnServerConfigurations.UpdateTags method.
type VpnServerConfigurationsUpdateTagsOptions = original.VpnServerConfigurationsUpdateTagsOptions

// VpnSite Resource.
type VpnSite = original.VpnSite

// VpnSite Resource.
type VpnSiteID = original.VpnSiteID

// VpnSiteLink Resource.
type VpnSiteLink = original.VpnSiteLink

// VpnSiteLinkConnection Resource.
type VpnSiteLinkConnection = original.VpnSiteLinkConnection

// Parameters for VpnConnection.
type VpnSiteLinkConnectionProperties = original.VpnSiteLinkConnectionProperties

// VpnSiteLinkConnectionResponse is the response envelope for operations that return a VpnSiteLinkConnection type.
type VpnSiteLinkConnectionResponse = original.VpnSiteLinkConnectionResponse

// VpnSiteLinkConnectionsClient contains the methods for the VpnSiteLinkConnections group.
// Don't use this type directly, use NewVpnSiteLinkConnectionsClient() instead.
type VpnSiteLinkConnectionsClient = original.VpnSiteLinkConnectionsClient

// VpnSiteLinkConnectionsGetOptions contains the optional parameters for the VpnSiteLinkConnections.Get method.
type VpnSiteLinkConnectionsGetOptions = original.VpnSiteLinkConnectionsGetOptions

// Parameters for VpnSite.
type VpnSiteLinkProperties = original.VpnSiteLinkProperties

// VpnSiteLinkResponse is the response envelope for operations that return a VpnSiteLink type.
type VpnSiteLinkResponse = original.VpnSiteLinkResponse

// VpnSiteLinksClient contains the methods for the VpnSiteLinks group.
// Don't use this type directly, use NewVpnSiteLinksClient() instead.
type VpnSiteLinksClient = original.VpnSiteLinksClient

// VpnSiteLinksGetOptions contains the optional parameters for the VpnSiteLinks.Get method.
type VpnSiteLinksGetOptions = original.VpnSiteLinksGetOptions

// VpnSiteLinksListByVpnSiteOptions contains the optional parameters for the VpnSiteLinks.ListByVpnSite method.
type VpnSiteLinksListByVpnSiteOptions = original.VpnSiteLinksListByVpnSiteOptions

// VpnSitePoller provides polling facilities until the operation completes
type VpnSitePoller = original.VpnSitePoller

// VpnSitePollerResponse is the response envelope for operations that asynchronously return a VpnSite type.
type VpnSitePollerResponse = original.VpnSitePollerResponse

// Parameters for VpnSite.
type VpnSiteProperties = original.VpnSiteProperties

// VpnSiteResponse is the response envelope for operations that return a VpnSite type.
type VpnSiteResponse = original.VpnSiteResponse

// VpnSitesBeginCreateOrUpdateOptions contains the optional parameters for the VpnSites.BeginCreateOrUpdate method.
type VpnSitesBeginCreateOrUpdateOptions = original.VpnSitesBeginCreateOrUpdateOptions

// VpnSitesBeginDeleteOptions contains the optional parameters for the VpnSites.BeginDelete method.
type VpnSitesBeginDeleteOptions = original.VpnSitesBeginDeleteOptions

// VpnSitesClient contains the methods for the VpnSites group.
// Don't use this type directly, use NewVpnSitesClient() instead.
type VpnSitesClient = original.VpnSitesClient

// VpnSitesConfigurationBeginDownloadOptions contains the optional parameters for the VpnSitesConfiguration.BeginDownload method.
type VpnSitesConfigurationBeginDownloadOptions = original.VpnSitesConfigurationBeginDownloadOptions

// VpnSitesConfigurationClient contains the methods for the VpnSitesConfiguration group.
// Don't use this type directly, use NewVpnSitesConfigurationClient() instead.
type VpnSitesConfigurationClient = original.VpnSitesConfigurationClient

// VpnSitesGetOptions contains the optional parameters for the VpnSites.Get method.
type VpnSitesGetOptions = original.VpnSitesGetOptions

// VpnSitesListByResourceGroupOptions contains the optional parameters for the VpnSites.ListByResourceGroup method.
type VpnSitesListByResourceGroupOptions = original.VpnSitesListByResourceGroupOptions

// VpnSitesListOptions contains the optional parameters for the VpnSites.List method.
type VpnSitesListOptions = original.VpnSitesListOptions

// VpnSitesUpdateTagsOptions contains the optional parameters for the VpnSites.UpdateTags method.
type VpnSitesUpdateTagsOptions = original.VpnSitesUpdateTagsOptions

// Defines contents of a web application rule.
type WebApplicationFirewallCustomRule = original.WebApplicationFirewallCustomRule

// WebApplicationFirewallPoliciesBeginDeleteOptions contains the optional parameters for the WebApplicationFirewallPolicies.BeginDelete method.
type WebApplicationFirewallPoliciesBeginDeleteOptions = original.WebApplicationFirewallPoliciesBeginDeleteOptions

// WebApplicationFirewallPoliciesClient contains the methods for the WebApplicationFirewallPolicies group.
// Don't use this type directly, use NewWebApplicationFirewallPoliciesClient() instead.
type WebApplicationFirewallPoliciesClient = original.WebApplicationFirewallPoliciesClient

// WebApplicationFirewallPoliciesCreateOrUpdateOptions contains the optional parameters for the WebApplicationFirewallPolicies.CreateOrUpdate method.
type WebApplicationFirewallPoliciesCreateOrUpdateOptions = original.WebApplicationFirewallPoliciesCreateOrUpdateOptions

// WebApplicationFirewallPoliciesGetOptions contains the optional parameters for the WebApplicationFirewallPolicies.Get method.
type WebApplicationFirewallPoliciesGetOptions = original.WebApplicationFirewallPoliciesGetOptions

// WebApplicationFirewallPoliciesListAllOptions contains the optional parameters for the WebApplicationFirewallPolicies.ListAll method.
type WebApplicationFirewallPoliciesListAllOptions = original.WebApplicationFirewallPoliciesListAllOptions

// WebApplicationFirewallPoliciesListOptions contains the optional parameters for the WebApplicationFirewallPolicies.List method.
type WebApplicationFirewallPoliciesListOptions = original.WebApplicationFirewallPoliciesListOptions

// Defines web application firewall policy.
type WebApplicationFirewallPolicy = original.WebApplicationFirewallPolicy

// Result of the request to list WebApplicationFirewallPolicies. It contains a list of WebApplicationFirewallPolicy objects and a URL link to get the next
// set of results.
type WebApplicationFirewallPolicyListResult = original.WebApplicationFirewallPolicyListResult

// WebApplicationFirewallPolicyListResultPager provides iteration over WebApplicationFirewallPolicyListResult pages.
type WebApplicationFirewallPolicyListResultPager = original.WebApplicationFirewallPolicyListResultPager

// WebApplicationFirewallPolicyListResultResponse is the response envelope for operations that return a WebApplicationFirewallPolicyListResult type.
type WebApplicationFirewallPolicyListResultResponse = original.WebApplicationFirewallPolicyListResultResponse

// Defines web application firewall policy properties.
type WebApplicationFirewallPolicyPropertiesFormat = original.WebApplicationFirewallPolicyPropertiesFormat

// WebApplicationFirewallPolicyResponse is the response envelope for operations that return a WebApplicationFirewallPolicy type.
type WebApplicationFirewallPolicyResponse = original.WebApplicationFirewallPolicyResponse

// WebCategoriesClient contains the methods for the WebCategories group.
// Don't use this type directly, use NewWebCategoriesClient() instead.
type WebCategoriesClient = original.WebCategoriesClient

// WebCategoriesGetOptions contains the optional parameters for the WebCategories.Get method.
type WebCategoriesGetOptions = original.WebCategoriesGetOptions

// WebCategoriesListBySubscriptionOptions contains the optional parameters for the WebCategories.ListBySubscription method.
type WebCategoriesListBySubscriptionOptions = original.WebCategoriesListBySubscriptionOptions

// NewApplicationGatewayPrivateEndpointConnectionsClient creates a new instance of ApplicationGatewayPrivateEndpointConnectionsClient with the specified values.
func NewApplicationGatewayPrivateEndpointConnectionsClient(con *armcore.Connection, subscriptionID string) ApplicationGatewayPrivateEndpointConnectionsClient {
	return original.NewApplicationGatewayPrivateEndpointConnectionsClient(con, subscriptionID)
}

// NewApplicationGatewayPrivateLinkResourcesClient creates a new instance of ApplicationGatewayPrivateLinkResourcesClient with the specified values.
func NewApplicationGatewayPrivateLinkResourcesClient(con *armcore.Connection, subscriptionID string) ApplicationGatewayPrivateLinkResourcesClient {
	return original.NewApplicationGatewayPrivateLinkResourcesClient(con, subscriptionID)
}

// NewApplicationGatewaysClient creates a new instance of ApplicationGatewaysClient with the specified values.
func NewApplicationGatewaysClient(con *armcore.Connection, subscriptionID string) ApplicationGatewaysClient {
	return original.NewApplicationGatewaysClient(con, subscriptionID)
}

// NewApplicationSecurityGroupsClient creates a new instance of ApplicationSecurityGroupsClient with the specified values.
func NewApplicationSecurityGroupsClient(con *armcore.Connection, subscriptionID string) ApplicationSecurityGroupsClient {
	return original.NewApplicationSecurityGroupsClient(con, subscriptionID)
}

// NewAvailableDelegationsClient creates a new instance of AvailableDelegationsClient with the specified values.
func NewAvailableDelegationsClient(con *armcore.Connection, subscriptionID string) AvailableDelegationsClient {
	return original.NewAvailableDelegationsClient(con, subscriptionID)
}

// NewAvailableEndpointServicesClient creates a new instance of AvailableEndpointServicesClient with the specified values.
func NewAvailableEndpointServicesClient(con *armcore.Connection, subscriptionID string) AvailableEndpointServicesClient {
	return original.NewAvailableEndpointServicesClient(con, subscriptionID)
}

// NewAvailablePrivateEndpointTypesClient creates a new instance of AvailablePrivateEndpointTypesClient with the specified values.
func NewAvailablePrivateEndpointTypesClient(con *armcore.Connection, subscriptionID string) AvailablePrivateEndpointTypesClient {
	return original.NewAvailablePrivateEndpointTypesClient(con, subscriptionID)
}

// NewAvailableResourceGroupDelegationsClient creates a new instance of AvailableResourceGroupDelegationsClient with the specified values.
func NewAvailableResourceGroupDelegationsClient(con *armcore.Connection, subscriptionID string) AvailableResourceGroupDelegationsClient {
	return original.NewAvailableResourceGroupDelegationsClient(con, subscriptionID)
}

// NewAvailableServiceAliasesClient creates a new instance of AvailableServiceAliasesClient with the specified values.
func NewAvailableServiceAliasesClient(con *armcore.Connection, subscriptionID string) AvailableServiceAliasesClient {
	return original.NewAvailableServiceAliasesClient(con, subscriptionID)
}

// NewAzureFirewallFqdnTagsClient creates a new instance of AzureFirewallFqdnTagsClient with the specified values.
func NewAzureFirewallFqdnTagsClient(con *armcore.Connection, subscriptionID string) AzureFirewallFqdnTagsClient {
	return original.NewAzureFirewallFqdnTagsClient(con, subscriptionID)
}

// NewAzureFirewallsClient creates a new instance of AzureFirewallsClient with the specified values.
func NewAzureFirewallsClient(con *armcore.Connection, subscriptionID string) AzureFirewallsClient {
	return original.NewAzureFirewallsClient(con, subscriptionID)
}

// NewBastionHostsClient creates a new instance of BastionHostsClient with the specified values.
func NewBastionHostsClient(con *armcore.Connection, subscriptionID string) BastionHostsClient {
	return original.NewBastionHostsClient(con, subscriptionID)
}

// NewBgpServiceCommunitiesClient creates a new instance of BgpServiceCommunitiesClient with the specified values.
func NewBgpServiceCommunitiesClient(con *armcore.Connection, subscriptionID string) BgpServiceCommunitiesClient {
	return original.NewBgpServiceCommunitiesClient(con, subscriptionID)
}

// NewConnectionMonitorsClient creates a new instance of ConnectionMonitorsClient with the specified values.
func NewConnectionMonitorsClient(con *armcore.Connection, subscriptionID string) ConnectionMonitorsClient {
	return original.NewConnectionMonitorsClient(con, subscriptionID)
}

// NewCustomIPPrefixesClient creates a new instance of CustomIPPrefixesClient with the specified values.
func NewCustomIPPrefixesClient(con *armcore.Connection, subscriptionID string) CustomIPPrefixesClient {
	return original.NewCustomIPPrefixesClient(con, subscriptionID)
}

// NewDdosCustomPoliciesClient creates a new instance of DdosCustomPoliciesClient with the specified values.
func NewDdosCustomPoliciesClient(con *armcore.Connection, subscriptionID string) DdosCustomPoliciesClient {
	return original.NewDdosCustomPoliciesClient(con, subscriptionID)
}

// NewDdosProtectionPlansClient creates a new instance of DdosProtectionPlansClient with the specified values.
func NewDdosProtectionPlansClient(con *armcore.Connection, subscriptionID string) DdosProtectionPlansClient {
	return original.NewDdosProtectionPlansClient(con, subscriptionID)
}

// NewDefaultSecurityRulesClient creates a new instance of DefaultSecurityRulesClient with the specified values.
func NewDefaultSecurityRulesClient(con *armcore.Connection, subscriptionID string) DefaultSecurityRulesClient {
	return original.NewDefaultSecurityRulesClient(con, subscriptionID)
}

// NewDscpConfigurationClient creates a new instance of DscpConfigurationClient with the specified values.
func NewDscpConfigurationClient(con *armcore.Connection, subscriptionID string) DscpConfigurationClient {
	return original.NewDscpConfigurationClient(con, subscriptionID)
}

// NewExpressRouteCircuitAuthorizationsClient creates a new instance of ExpressRouteCircuitAuthorizationsClient with the specified values.
func NewExpressRouteCircuitAuthorizationsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCircuitAuthorizationsClient {
	return original.NewExpressRouteCircuitAuthorizationsClient(con, subscriptionID)
}

// NewExpressRouteCircuitConnectionsClient creates a new instance of ExpressRouteCircuitConnectionsClient with the specified values.
func NewExpressRouteCircuitConnectionsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCircuitConnectionsClient {
	return original.NewExpressRouteCircuitConnectionsClient(con, subscriptionID)
}

// NewExpressRouteCircuitPeeringsClient creates a new instance of ExpressRouteCircuitPeeringsClient with the specified values.
func NewExpressRouteCircuitPeeringsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCircuitPeeringsClient {
	return original.NewExpressRouteCircuitPeeringsClient(con, subscriptionID)
}

// NewExpressRouteCircuitsClient creates a new instance of ExpressRouteCircuitsClient with the specified values.
func NewExpressRouteCircuitsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCircuitsClient {
	return original.NewExpressRouteCircuitsClient(con, subscriptionID)
}

// NewExpressRouteConnectionsClient creates a new instance of ExpressRouteConnectionsClient with the specified values.
func NewExpressRouteConnectionsClient(con *armcore.Connection, subscriptionID string) ExpressRouteConnectionsClient {
	return original.NewExpressRouteConnectionsClient(con, subscriptionID)
}

// NewExpressRouteCrossConnectionPeeringsClient creates a new instance of ExpressRouteCrossConnectionPeeringsClient with the specified values.
func NewExpressRouteCrossConnectionPeeringsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCrossConnectionPeeringsClient {
	return original.NewExpressRouteCrossConnectionPeeringsClient(con, subscriptionID)
}

// NewExpressRouteCrossConnectionsClient creates a new instance of ExpressRouteCrossConnectionsClient with the specified values.
func NewExpressRouteCrossConnectionsClient(con *armcore.Connection, subscriptionID string) ExpressRouteCrossConnectionsClient {
	return original.NewExpressRouteCrossConnectionsClient(con, subscriptionID)
}

// NewExpressRouteGatewaysClient creates a new instance of ExpressRouteGatewaysClient with the specified values.
func NewExpressRouteGatewaysClient(con *armcore.Connection, subscriptionID string) ExpressRouteGatewaysClient {
	return original.NewExpressRouteGatewaysClient(con, subscriptionID)
}

// NewExpressRouteLinksClient creates a new instance of ExpressRouteLinksClient with the specified values.
func NewExpressRouteLinksClient(con *armcore.Connection, subscriptionID string) ExpressRouteLinksClient {
	return original.NewExpressRouteLinksClient(con, subscriptionID)
}

// NewExpressRoutePortsClient creates a new instance of ExpressRoutePortsClient with the specified values.
func NewExpressRoutePortsClient(con *armcore.Connection, subscriptionID string) ExpressRoutePortsClient {
	return original.NewExpressRoutePortsClient(con, subscriptionID)
}

// NewExpressRoutePortsLocationsClient creates a new instance of ExpressRoutePortsLocationsClient with the specified values.
func NewExpressRoutePortsLocationsClient(con *armcore.Connection, subscriptionID string) ExpressRoutePortsLocationsClient {
	return original.NewExpressRoutePortsLocationsClient(con, subscriptionID)
}

// NewExpressRouteServiceProvidersClient creates a new instance of ExpressRouteServiceProvidersClient with the specified values.
func NewExpressRouteServiceProvidersClient(con *armcore.Connection, subscriptionID string) ExpressRouteServiceProvidersClient {
	return original.NewExpressRouteServiceProvidersClient(con, subscriptionID)
}

// NewFirewallPoliciesClient creates a new instance of FirewallPoliciesClient with the specified values.
func NewFirewallPoliciesClient(con *armcore.Connection, subscriptionID string) FirewallPoliciesClient {
	return original.NewFirewallPoliciesClient(con, subscriptionID)
}

// NewFirewallPolicyRuleCollectionGroupsClient creates a new instance of FirewallPolicyRuleCollectionGroupsClient with the specified values.
func NewFirewallPolicyRuleCollectionGroupsClient(con *armcore.Connection, subscriptionID string) FirewallPolicyRuleCollectionGroupsClient {
	return original.NewFirewallPolicyRuleCollectionGroupsClient(con, subscriptionID)
}

// NewFlowLogsClient creates a new instance of FlowLogsClient with the specified values.
func NewFlowLogsClient(con *armcore.Connection, subscriptionID string) FlowLogsClient {
	return original.NewFlowLogsClient(con, subscriptionID)
}

// NewHubRouteTablesClient creates a new instance of HubRouteTablesClient with the specified values.
func NewHubRouteTablesClient(con *armcore.Connection, subscriptionID string) HubRouteTablesClient {
	return original.NewHubRouteTablesClient(con, subscriptionID)
}

// NewHubVirtualNetworkConnectionsClient creates a new instance of HubVirtualNetworkConnectionsClient with the specified values.
func NewHubVirtualNetworkConnectionsClient(con *armcore.Connection, subscriptionID string) HubVirtualNetworkConnectionsClient {
	return original.NewHubVirtualNetworkConnectionsClient(con, subscriptionID)
}

// NewIPAllocationsClient creates a new instance of IPAllocationsClient with the specified values.
func NewIPAllocationsClient(con *armcore.Connection, subscriptionID string) IPAllocationsClient {
	return original.NewIPAllocationsClient(con, subscriptionID)
}

// NewIPGroupsClient creates a new instance of IPGroupsClient with the specified values.
func NewIPGroupsClient(con *armcore.Connection, subscriptionID string) IPGroupsClient {
	return original.NewIPGroupsClient(con, subscriptionID)
}

// NewInboundNatRulesClient creates a new instance of InboundNatRulesClient with the specified values.
func NewInboundNatRulesClient(con *armcore.Connection, subscriptionID string) InboundNatRulesClient {
	return original.NewInboundNatRulesClient(con, subscriptionID)
}

// NewInboundSecurityRuleClient creates a new instance of InboundSecurityRuleClient with the specified values.
func NewInboundSecurityRuleClient(con *armcore.Connection, subscriptionID string) InboundSecurityRuleClient {
	return original.NewInboundSecurityRuleClient(con, subscriptionID)
}

// NewLoadBalancerBackendAddressPoolsClient creates a new instance of LoadBalancerBackendAddressPoolsClient with the specified values.
func NewLoadBalancerBackendAddressPoolsClient(con *armcore.Connection, subscriptionID string) LoadBalancerBackendAddressPoolsClient {
	return original.NewLoadBalancerBackendAddressPoolsClient(con, subscriptionID)
}

// NewLoadBalancerFrontendIPConfigurationsClient creates a new instance of LoadBalancerFrontendIPConfigurationsClient with the specified values.
func NewLoadBalancerFrontendIPConfigurationsClient(con *armcore.Connection, subscriptionID string) LoadBalancerFrontendIPConfigurationsClient {
	return original.NewLoadBalancerFrontendIPConfigurationsClient(con, subscriptionID)
}

// NewLoadBalancerLoadBalancingRulesClient creates a new instance of LoadBalancerLoadBalancingRulesClient with the specified values.
func NewLoadBalancerLoadBalancingRulesClient(con *armcore.Connection, subscriptionID string) LoadBalancerLoadBalancingRulesClient {
	return original.NewLoadBalancerLoadBalancingRulesClient(con, subscriptionID)
}

// NewLoadBalancerNetworkInterfacesClient creates a new instance of LoadBalancerNetworkInterfacesClient with the specified values.
func NewLoadBalancerNetworkInterfacesClient(con *armcore.Connection, subscriptionID string) LoadBalancerNetworkInterfacesClient {
	return original.NewLoadBalancerNetworkInterfacesClient(con, subscriptionID)
}

// NewLoadBalancerOutboundRulesClient creates a new instance of LoadBalancerOutboundRulesClient with the specified values.
func NewLoadBalancerOutboundRulesClient(con *armcore.Connection, subscriptionID string) LoadBalancerOutboundRulesClient {
	return original.NewLoadBalancerOutboundRulesClient(con, subscriptionID)
}

// NewLoadBalancerProbesClient creates a new instance of LoadBalancerProbesClient with the specified values.
func NewLoadBalancerProbesClient(con *armcore.Connection, subscriptionID string) LoadBalancerProbesClient {
	return original.NewLoadBalancerProbesClient(con, subscriptionID)
}

// NewLoadBalancersClient creates a new instance of LoadBalancersClient with the specified values.
func NewLoadBalancersClient(con *armcore.Connection, subscriptionID string) LoadBalancersClient {
	return original.NewLoadBalancersClient(con, subscriptionID)
}

// NewLocalNetworkGatewaysClient creates a new instance of LocalNetworkGatewaysClient with the specified values.
func NewLocalNetworkGatewaysClient(con *armcore.Connection, subscriptionID string) LocalNetworkGatewaysClient {
	return original.NewLocalNetworkGatewaysClient(con, subscriptionID)
}

// NewNatGatewaysClient creates a new instance of NatGatewaysClient with the specified values.
func NewNatGatewaysClient(con *armcore.Connection, subscriptionID string) NatGatewaysClient {
	return original.NewNatGatewaysClient(con, subscriptionID)
}

// NewNetworkInterfaceIPConfigurationsClient creates a new instance of NetworkInterfaceIPConfigurationsClient with the specified values.
func NewNetworkInterfaceIPConfigurationsClient(con *armcore.Connection, subscriptionID string) NetworkInterfaceIPConfigurationsClient {
	return original.NewNetworkInterfaceIPConfigurationsClient(con, subscriptionID)
}

// NewNetworkInterfaceLoadBalancersClient creates a new instance of NetworkInterfaceLoadBalancersClient with the specified values.
func NewNetworkInterfaceLoadBalancersClient(con *armcore.Connection, subscriptionID string) NetworkInterfaceLoadBalancersClient {
	return original.NewNetworkInterfaceLoadBalancersClient(con, subscriptionID)
}

// NewNetworkInterfaceTapConfigurationsClient creates a new instance of NetworkInterfaceTapConfigurationsClient with the specified values.
func NewNetworkInterfaceTapConfigurationsClient(con *armcore.Connection, subscriptionID string) NetworkInterfaceTapConfigurationsClient {
	return original.NewNetworkInterfaceTapConfigurationsClient(con, subscriptionID)
}

// NewNetworkInterfacesClient creates a new instance of NetworkInterfacesClient with the specified values.
func NewNetworkInterfacesClient(con *armcore.Connection, subscriptionID string) NetworkInterfacesClient {
	return original.NewNetworkInterfacesClient(con, subscriptionID)
}

// NewNetworkManagementClient creates a new instance of NetworkManagementClient with the specified values.
func NewNetworkManagementClient(con *armcore.Connection, subscriptionID string) NetworkManagementClient {
	return original.NewNetworkManagementClient(con, subscriptionID)
}

// NewNetworkProfilesClient creates a new instance of NetworkProfilesClient with the specified values.
func NewNetworkProfilesClient(con *armcore.Connection, subscriptionID string) NetworkProfilesClient {
	return original.NewNetworkProfilesClient(con, subscriptionID)
}

// NewNetworkSecurityGroupsClient creates a new instance of NetworkSecurityGroupsClient with the specified values.
func NewNetworkSecurityGroupsClient(con *armcore.Connection, subscriptionID string) NetworkSecurityGroupsClient {
	return original.NewNetworkSecurityGroupsClient(con, subscriptionID)
}

// NewNetworkVirtualAppliancesClient creates a new instance of NetworkVirtualAppliancesClient with the specified values.
func NewNetworkVirtualAppliancesClient(con *armcore.Connection, subscriptionID string) NetworkVirtualAppliancesClient {
	return original.NewNetworkVirtualAppliancesClient(con, subscriptionID)
}

// NewNetworkWatchersClient creates a new instance of NetworkWatchersClient with the specified values.
func NewNetworkWatchersClient(con *armcore.Connection, subscriptionID string) NetworkWatchersClient {
	return original.NewNetworkWatchersClient(con, subscriptionID)
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(con *armcore.Connection) OperationsClient {
	return original.NewOperationsClient(con)
}

// NewP2SVpnGatewaysClient creates a new instance of P2SVpnGatewaysClient with the specified values.
func NewP2SVpnGatewaysClient(con *armcore.Connection, subscriptionID string) P2SVpnGatewaysClient {
	return original.NewP2SVpnGatewaysClient(con, subscriptionID)
}

// NewPacketCapturesClient creates a new instance of PacketCapturesClient with the specified values.
func NewPacketCapturesClient(con *armcore.Connection, subscriptionID string) PacketCapturesClient {
	return original.NewPacketCapturesClient(con, subscriptionID)
}

// NewPeerExpressRouteCircuitConnectionsClient creates a new instance of PeerExpressRouteCircuitConnectionsClient with the specified values.
func NewPeerExpressRouteCircuitConnectionsClient(con *armcore.Connection, subscriptionID string) PeerExpressRouteCircuitConnectionsClient {
	return original.NewPeerExpressRouteCircuitConnectionsClient(con, subscriptionID)
}

// NewPrivateDNSZoneGroupsClient creates a new instance of PrivateDNSZoneGroupsClient with the specified values.
func NewPrivateDNSZoneGroupsClient(con *armcore.Connection, subscriptionID string) PrivateDNSZoneGroupsClient {
	return original.NewPrivateDNSZoneGroupsClient(con, subscriptionID)
}

// NewPrivateEndpointsClient creates a new instance of PrivateEndpointsClient with the specified values.
func NewPrivateEndpointsClient(con *armcore.Connection, subscriptionID string) PrivateEndpointsClient {
	return original.NewPrivateEndpointsClient(con, subscriptionID)
}

// NewPrivateLinkServicesClient creates a new instance of PrivateLinkServicesClient with the specified values.
func NewPrivateLinkServicesClient(con *armcore.Connection, subscriptionID string) PrivateLinkServicesClient {
	return original.NewPrivateLinkServicesClient(con, subscriptionID)
}

// NewPublicIPAddressesClient creates a new instance of PublicIPAddressesClient with the specified values.
func NewPublicIPAddressesClient(con *armcore.Connection, subscriptionID string) PublicIPAddressesClient {
	return original.NewPublicIPAddressesClient(con, subscriptionID)
}

// NewPublicIPPrefixesClient creates a new instance of PublicIPPrefixesClient with the specified values.
func NewPublicIPPrefixesClient(con *armcore.Connection, subscriptionID string) PublicIPPrefixesClient {
	return original.NewPublicIPPrefixesClient(con, subscriptionID)
}

// NewResourceNavigationLinksClient creates a new instance of ResourceNavigationLinksClient with the specified values.
func NewResourceNavigationLinksClient(con *armcore.Connection, subscriptionID string) ResourceNavigationLinksClient {
	return original.NewResourceNavigationLinksClient(con, subscriptionID)
}

// NewRouteFilterRulesClient creates a new instance of RouteFilterRulesClient with the specified values.
func NewRouteFilterRulesClient(con *armcore.Connection, subscriptionID string) RouteFilterRulesClient {
	return original.NewRouteFilterRulesClient(con, subscriptionID)
}

// NewRouteFiltersClient creates a new instance of RouteFiltersClient with the specified values.
func NewRouteFiltersClient(con *armcore.Connection, subscriptionID string) RouteFiltersClient {
	return original.NewRouteFiltersClient(con, subscriptionID)
}

// NewRouteTablesClient creates a new instance of RouteTablesClient with the specified values.
func NewRouteTablesClient(con *armcore.Connection, subscriptionID string) RouteTablesClient {
	return original.NewRouteTablesClient(con, subscriptionID)
}

// NewRoutesClient creates a new instance of RoutesClient with the specified values.
func NewRoutesClient(con *armcore.Connection, subscriptionID string) RoutesClient {
	return original.NewRoutesClient(con, subscriptionID)
}

// NewSecurityPartnerProvidersClient creates a new instance of SecurityPartnerProvidersClient with the specified values.
func NewSecurityPartnerProvidersClient(con *armcore.Connection, subscriptionID string) SecurityPartnerProvidersClient {
	return original.NewSecurityPartnerProvidersClient(con, subscriptionID)
}

// NewSecurityRulesClient creates a new instance of SecurityRulesClient with the specified values.
func NewSecurityRulesClient(con *armcore.Connection, subscriptionID string) SecurityRulesClient {
	return original.NewSecurityRulesClient(con, subscriptionID)
}

// NewServiceAssociationLinksClient creates a new instance of ServiceAssociationLinksClient with the specified values.
func NewServiceAssociationLinksClient(con *armcore.Connection, subscriptionID string) ServiceAssociationLinksClient {
	return original.NewServiceAssociationLinksClient(con, subscriptionID)
}

// NewServiceEndpointPoliciesClient creates a new instance of ServiceEndpointPoliciesClient with the specified values.
func NewServiceEndpointPoliciesClient(con *armcore.Connection, subscriptionID string) ServiceEndpointPoliciesClient {
	return original.NewServiceEndpointPoliciesClient(con, subscriptionID)
}

// NewServiceEndpointPolicyDefinitionsClient creates a new instance of ServiceEndpointPolicyDefinitionsClient with the specified values.
func NewServiceEndpointPolicyDefinitionsClient(con *armcore.Connection, subscriptionID string) ServiceEndpointPolicyDefinitionsClient {
	return original.NewServiceEndpointPolicyDefinitionsClient(con, subscriptionID)
}

// NewServiceTagsClient creates a new instance of ServiceTagsClient with the specified values.
func NewServiceTagsClient(con *armcore.Connection, subscriptionID string) ServiceTagsClient {
	return original.NewServiceTagsClient(con, subscriptionID)
}

// NewSubnetsClient creates a new instance of SubnetsClient with the specified values.
func NewSubnetsClient(con *armcore.Connection, subscriptionID string) SubnetsClient {
	return original.NewSubnetsClient(con, subscriptionID)
}

// NewUsagesClient creates a new instance of UsagesClient with the specified values.
func NewUsagesClient(con *armcore.Connection, subscriptionID string) UsagesClient {
	return original.NewUsagesClient(con, subscriptionID)
}

// NewVirtualApplianceSKUsClient creates a new instance of VirtualApplianceSKUsClient with the specified values.
func NewVirtualApplianceSKUsClient(con *armcore.Connection, subscriptionID string) VirtualApplianceSKUsClient {
	return original.NewVirtualApplianceSKUsClient(con, subscriptionID)
}

// NewVirtualApplianceSitesClient creates a new instance of VirtualApplianceSitesClient with the specified values.
func NewVirtualApplianceSitesClient(con *armcore.Connection, subscriptionID string) VirtualApplianceSitesClient {
	return original.NewVirtualApplianceSitesClient(con, subscriptionID)
}

// NewVirtualHubBgpConnectionClient creates a new instance of VirtualHubBgpConnectionClient with the specified values.
func NewVirtualHubBgpConnectionClient(con *armcore.Connection, subscriptionID string) VirtualHubBgpConnectionClient {
	return original.NewVirtualHubBgpConnectionClient(con, subscriptionID)
}

// NewVirtualHubBgpConnectionsClient creates a new instance of VirtualHubBgpConnectionsClient with the specified values.
func NewVirtualHubBgpConnectionsClient(con *armcore.Connection, subscriptionID string) VirtualHubBgpConnectionsClient {
	return original.NewVirtualHubBgpConnectionsClient(con, subscriptionID)
}

// NewVirtualHubIPConfigurationClient creates a new instance of VirtualHubIPConfigurationClient with the specified values.
func NewVirtualHubIPConfigurationClient(con *armcore.Connection, subscriptionID string) VirtualHubIPConfigurationClient {
	return original.NewVirtualHubIPConfigurationClient(con, subscriptionID)
}

// NewVirtualHubRouteTableV2SClient creates a new instance of VirtualHubRouteTableV2SClient with the specified values.
func NewVirtualHubRouteTableV2SClient(con *armcore.Connection, subscriptionID string) VirtualHubRouteTableV2SClient {
	return original.NewVirtualHubRouteTableV2SClient(con, subscriptionID)
}

// NewVirtualHubsClient creates a new instance of VirtualHubsClient with the specified values.
func NewVirtualHubsClient(con *armcore.Connection, subscriptionID string) VirtualHubsClient {
	return original.NewVirtualHubsClient(con, subscriptionID)
}

// NewVirtualNetworkGatewayConnectionsClient creates a new instance of VirtualNetworkGatewayConnectionsClient with the specified values.
func NewVirtualNetworkGatewayConnectionsClient(con *armcore.Connection, subscriptionID string) VirtualNetworkGatewayConnectionsClient {
	return original.NewVirtualNetworkGatewayConnectionsClient(con, subscriptionID)
}

// NewVirtualNetworkGatewaysClient creates a new instance of VirtualNetworkGatewaysClient with the specified values.
func NewVirtualNetworkGatewaysClient(con *armcore.Connection, subscriptionID string) VirtualNetworkGatewaysClient {
	return original.NewVirtualNetworkGatewaysClient(con, subscriptionID)
}

// NewVirtualNetworkPeeringsClient creates a new instance of VirtualNetworkPeeringsClient with the specified values.
func NewVirtualNetworkPeeringsClient(con *armcore.Connection, subscriptionID string) VirtualNetworkPeeringsClient {
	return original.NewVirtualNetworkPeeringsClient(con, subscriptionID)
}

// NewVirtualNetworkTapsClient creates a new instance of VirtualNetworkTapsClient with the specified values.
func NewVirtualNetworkTapsClient(con *armcore.Connection, subscriptionID string) VirtualNetworkTapsClient {
	return original.NewVirtualNetworkTapsClient(con, subscriptionID)
}

// NewVirtualNetworksClient creates a new instance of VirtualNetworksClient with the specified values.
func NewVirtualNetworksClient(con *armcore.Connection, subscriptionID string) VirtualNetworksClient {
	return original.NewVirtualNetworksClient(con, subscriptionID)
}

// NewVirtualRouterPeeringsClient creates a new instance of VirtualRouterPeeringsClient with the specified values.
func NewVirtualRouterPeeringsClient(con *armcore.Connection, subscriptionID string) VirtualRouterPeeringsClient {
	return original.NewVirtualRouterPeeringsClient(con, subscriptionID)
}

// NewVirtualRoutersClient creates a new instance of VirtualRoutersClient with the specified values.
func NewVirtualRoutersClient(con *armcore.Connection, subscriptionID string) VirtualRoutersClient {
	return original.NewVirtualRoutersClient(con, subscriptionID)
}

// NewVirtualWansClient creates a new instance of VirtualWansClient with the specified values.
func NewVirtualWansClient(con *armcore.Connection, subscriptionID string) VirtualWansClient {
	return original.NewVirtualWansClient(con, subscriptionID)
}

// NewVpnConnectionsClient creates a new instance of VpnConnectionsClient with the specified values.
func NewVpnConnectionsClient(con *armcore.Connection, subscriptionID string) VpnConnectionsClient {
	return original.NewVpnConnectionsClient(con, subscriptionID)
}

// NewVpnGatewaysClient creates a new instance of VpnGatewaysClient with the specified values.
func NewVpnGatewaysClient(con *armcore.Connection, subscriptionID string) VpnGatewaysClient {
	return original.NewVpnGatewaysClient(con, subscriptionID)
}

// NewVpnLinkConnectionsClient creates a new instance of VpnLinkConnectionsClient with the specified values.
func NewVpnLinkConnectionsClient(con *armcore.Connection, subscriptionID string) VpnLinkConnectionsClient {
	return original.NewVpnLinkConnectionsClient(con, subscriptionID)
}

// NewVpnServerConfigurationsAssociatedWithVirtualWanClient creates a new instance of VpnServerConfigurationsAssociatedWithVirtualWanClient with the specified values.
func NewVpnServerConfigurationsAssociatedWithVirtualWanClient(con *armcore.Connection, subscriptionID string) VpnServerConfigurationsAssociatedWithVirtualWanClient {
	return original.NewVpnServerConfigurationsAssociatedWithVirtualWanClient(con, subscriptionID)
}

// NewVpnServerConfigurationsClient creates a new instance of VpnServerConfigurationsClient with the specified values.
func NewVpnServerConfigurationsClient(con *armcore.Connection, subscriptionID string) VpnServerConfigurationsClient {
	return original.NewVpnServerConfigurationsClient(con, subscriptionID)
}

// NewVpnSiteLinkConnectionsClient creates a new instance of VpnSiteLinkConnectionsClient with the specified values.
func NewVpnSiteLinkConnectionsClient(con *armcore.Connection, subscriptionID string) VpnSiteLinkConnectionsClient {
	return original.NewVpnSiteLinkConnectionsClient(con, subscriptionID)
}

// NewVpnSiteLinksClient creates a new instance of VpnSiteLinksClient with the specified values.
func NewVpnSiteLinksClient(con *armcore.Connection, subscriptionID string) VpnSiteLinksClient {
	return original.NewVpnSiteLinksClient(con, subscriptionID)
}

// NewVpnSitesClient creates a new instance of VpnSitesClient with the specified values.
func NewVpnSitesClient(con *armcore.Connection, subscriptionID string) VpnSitesClient {
	return original.NewVpnSitesClient(con, subscriptionID)
}

// NewVpnSitesConfigurationClient creates a new instance of VpnSitesConfigurationClient with the specified values.
func NewVpnSitesConfigurationClient(con *armcore.Connection, subscriptionID string) VpnSitesConfigurationClient {
	return original.NewVpnSitesConfigurationClient(con, subscriptionID)
}

// NewWebApplicationFirewallPoliciesClient creates a new instance of WebApplicationFirewallPoliciesClient with the specified values.
func NewWebApplicationFirewallPoliciesClient(con *armcore.Connection, subscriptionID string) WebApplicationFirewallPoliciesClient {
	return original.NewWebApplicationFirewallPoliciesClient(con, subscriptionID)
}

// NewWebCategoriesClient creates a new instance of WebCategoriesClient with the specified values.
func NewWebCategoriesClient(con *armcore.Connection, subscriptionID string) WebCategoriesClient {
	return original.NewWebCategoriesClient(con, subscriptionID)
}
func PossibleAccessValues() []Access {
	return original.PossibleAccessValues()
}
func PossibleApplicationGatewayBackendHealthServerHealthValues() []ApplicationGatewayBackendHealthServerHealth {
	return original.PossibleApplicationGatewayBackendHealthServerHealthValues()
}
func PossibleApplicationGatewayCookieBasedAffinityValues() []ApplicationGatewayCookieBasedAffinity {
	return original.PossibleApplicationGatewayCookieBasedAffinityValues()
}
func PossibleApplicationGatewayCustomErrorStatusCodeValues() []ApplicationGatewayCustomErrorStatusCode {
	return original.PossibleApplicationGatewayCustomErrorStatusCodeValues()
}
func PossibleApplicationGatewayFirewallModeValues() []ApplicationGatewayFirewallMode {
	return original.PossibleApplicationGatewayFirewallModeValues()
}
func PossibleApplicationGatewayOperationalStateValues() []ApplicationGatewayOperationalState {
	return original.PossibleApplicationGatewayOperationalStateValues()
}
func PossibleApplicationGatewayProtocolValues() []ApplicationGatewayProtocol {
	return original.PossibleApplicationGatewayProtocolValues()
}
func PossibleApplicationGatewayRedirectTypeValues() []ApplicationGatewayRedirectType {
	return original.PossibleApplicationGatewayRedirectTypeValues()
}
func PossibleApplicationGatewayRequestRoutingRuleTypeValues() []ApplicationGatewayRequestRoutingRuleType {
	return original.PossibleApplicationGatewayRequestRoutingRuleTypeValues()
}
func PossibleApplicationGatewaySKUNameValues() []ApplicationGatewaySKUName {
	return original.PossibleApplicationGatewaySKUNameValues()
}
func PossibleApplicationGatewaySslCipherSuiteValues() []ApplicationGatewaySslCipherSuite {
	return original.PossibleApplicationGatewaySslCipherSuiteValues()
}
func PossibleApplicationGatewaySslPolicyNameValues() []ApplicationGatewaySslPolicyName {
	return original.PossibleApplicationGatewaySslPolicyNameValues()
}
func PossibleApplicationGatewaySslPolicyTypeValues() []ApplicationGatewaySslPolicyType {
	return original.PossibleApplicationGatewaySslPolicyTypeValues()
}
func PossibleApplicationGatewaySslProtocolValues() []ApplicationGatewaySslProtocol {
	return original.PossibleApplicationGatewaySslProtocolValues()
}
func PossibleApplicationGatewayTierValues() []ApplicationGatewayTier {
	return original.PossibleApplicationGatewayTierValues()
}
func PossibleAssociationTypeValues() []AssociationType {
	return original.PossibleAssociationTypeValues()
}
func PossibleAuthenticationMethodValues() []AuthenticationMethod {
	return original.PossibleAuthenticationMethodValues()
}
func PossibleAuthorizationUseStatusValues() []AuthorizationUseStatus {
	return original.PossibleAuthorizationUseStatusValues()
}
func PossibleAzureFirewallApplicationRuleProtocolTypeValues() []AzureFirewallApplicationRuleProtocolType {
	return original.PossibleAzureFirewallApplicationRuleProtocolTypeValues()
}
func PossibleAzureFirewallNatRCActionTypeValues() []AzureFirewallNatRCActionType {
	return original.PossibleAzureFirewallNatRCActionTypeValues()
}
func PossibleAzureFirewallNetworkRuleProtocolValues() []AzureFirewallNetworkRuleProtocol {
	return original.PossibleAzureFirewallNetworkRuleProtocolValues()
}
func PossibleAzureFirewallRCActionTypeValues() []AzureFirewallRCActionType {
	return original.PossibleAzureFirewallRCActionTypeValues()
}
func PossibleAzureFirewallSKUNameValues() []AzureFirewallSKUName {
	return original.PossibleAzureFirewallSKUNameValues()
}
func PossibleAzureFirewallSKUTierValues() []AzureFirewallSKUTier {
	return original.PossibleAzureFirewallSKUTierValues()
}
func PossibleAzureFirewallThreatIntelModeValues() []AzureFirewallThreatIntelMode {
	return original.PossibleAzureFirewallThreatIntelModeValues()
}
func PossibleBastionConnectProtocolValues() []BastionConnectProtocol {
	return original.PossibleBastionConnectProtocolValues()
}
func PossibleBgpPeerStateValues() []BgpPeerState {
	return original.PossibleBgpPeerStateValues()
}
func PossibleCircuitConnectionStatusValues() []CircuitConnectionStatus {
	return original.PossibleCircuitConnectionStatusValues()
}
func PossibleCommissionedStateValues() []CommissionedState {
	return original.PossibleCommissionedStateValues()
}
func PossibleConnectionMonitorEndpointFilterItemTypeValues() []ConnectionMonitorEndpointFilterItemType {
	return original.PossibleConnectionMonitorEndpointFilterItemTypeValues()
}
func PossibleConnectionMonitorEndpointFilterTypeValues() []ConnectionMonitorEndpointFilterType {
	return original.PossibleConnectionMonitorEndpointFilterTypeValues()
}
func PossibleConnectionMonitorSourceStatusValues() []ConnectionMonitorSourceStatus {
	return original.PossibleConnectionMonitorSourceStatusValues()
}
func PossibleConnectionMonitorTestConfigurationProtocolValues() []ConnectionMonitorTestConfigurationProtocol {
	return original.PossibleConnectionMonitorTestConfigurationProtocolValues()
}
func PossibleConnectionMonitorTypeValues() []ConnectionMonitorType {
	return original.PossibleConnectionMonitorTypeValues()
}
func PossibleConnectionStateValues() []ConnectionState {
	return original.PossibleConnectionStateValues()
}
func PossibleConnectionStatusValues() []ConnectionStatus {
	return original.PossibleConnectionStatusValues()
}
func PossibleCoverageLevelValues() []CoverageLevel {
	return original.PossibleCoverageLevelValues()
}
func PossibleDdosCustomPolicyProtocolValues() []DdosCustomPolicyProtocol {
	return original.PossibleDdosCustomPolicyProtocolValues()
}
func PossibleDdosCustomPolicyTriggerSensitivityOverrideValues() []DdosCustomPolicyTriggerSensitivityOverride {
	return original.PossibleDdosCustomPolicyTriggerSensitivityOverrideValues()
}
func PossibleDdosSettingsProtectionCoverageValues() []DdosSettingsProtectionCoverage {
	return original.PossibleDdosSettingsProtectionCoverageValues()
}
func PossibleDestinationPortBehaviorValues() []DestinationPortBehavior {
	return original.PossibleDestinationPortBehaviorValues()
}
func PossibleDhGroupValues() []DhGroup {
	return original.PossibleDhGroupValues()
}
func PossibleDirectionValues() []Direction {
	return original.PossibleDirectionValues()
}
func PossibleEffectiveRouteSourceValues() []EffectiveRouteSource {
	return original.PossibleEffectiveRouteSourceValues()
}
func PossibleEffectiveRouteStateValues() []EffectiveRouteState {
	return original.PossibleEffectiveRouteStateValues()
}
func PossibleEffectiveSecurityRuleProtocolValues() []EffectiveSecurityRuleProtocol {
	return original.PossibleEffectiveSecurityRuleProtocolValues()
}
func PossibleEndpointTypeValues() []EndpointType {
	return original.PossibleEndpointTypeValues()
}
func PossibleEvaluationStateValues() []EvaluationState {
	return original.PossibleEvaluationStateValues()
}
func PossibleExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValues() []ExpressRouteCircuitPeeringAdvertisedPublicPrefixState {
	return original.PossibleExpressRouteCircuitPeeringAdvertisedPublicPrefixStateValues()
}
func PossibleExpressRouteCircuitPeeringStateValues() []ExpressRouteCircuitPeeringState {
	return original.PossibleExpressRouteCircuitPeeringStateValues()
}
func PossibleExpressRouteCircuitSKUFamilyValues() []ExpressRouteCircuitSKUFamily {
	return original.PossibleExpressRouteCircuitSKUFamilyValues()
}
func PossibleExpressRouteCircuitSKUTierValues() []ExpressRouteCircuitSKUTier {
	return original.PossibleExpressRouteCircuitSKUTierValues()
}
func PossibleExpressRouteLinkAdminStateValues() []ExpressRouteLinkAdminState {
	return original.PossibleExpressRouteLinkAdminStateValues()
}
func PossibleExpressRouteLinkConnectorTypeValues() []ExpressRouteLinkConnectorType {
	return original.PossibleExpressRouteLinkConnectorTypeValues()
}
func PossibleExpressRouteLinkMacSecCipherValues() []ExpressRouteLinkMacSecCipher {
	return original.PossibleExpressRouteLinkMacSecCipherValues()
}
func PossibleExpressRouteLinkMacSecSciStateValues() []ExpressRouteLinkMacSecSciState {
	return original.PossibleExpressRouteLinkMacSecSciStateValues()
}
func PossibleExpressRoutePeeringStateValues() []ExpressRoutePeeringState {
	return original.PossibleExpressRoutePeeringStateValues()
}
func PossibleExpressRoutePeeringTypeValues() []ExpressRoutePeeringType {
	return original.PossibleExpressRoutePeeringTypeValues()
}
func PossibleExpressRoutePortsEncapsulationValues() []ExpressRoutePortsEncapsulation {
	return original.PossibleExpressRoutePortsEncapsulationValues()
}
func PossibleExtendedLocationTypesValues() []ExtendedLocationTypes {
	return original.PossibleExtendedLocationTypesValues()
}
func PossibleFirewallPolicyFilterRuleCollectionActionTypeValues() []FirewallPolicyFilterRuleCollectionActionType {
	return original.PossibleFirewallPolicyFilterRuleCollectionActionTypeValues()
}
func PossibleFirewallPolicyIntrusionDetectionProtocolValues() []FirewallPolicyIntrusionDetectionProtocol {
	return original.PossibleFirewallPolicyIntrusionDetectionProtocolValues()
}
func PossibleFirewallPolicyIntrusionDetectionStateTypeValues() []FirewallPolicyIntrusionDetectionStateType {
	return original.PossibleFirewallPolicyIntrusionDetectionStateTypeValues()
}
func PossibleFirewallPolicyNatRuleCollectionActionTypeValues() []FirewallPolicyNatRuleCollectionActionType {
	return original.PossibleFirewallPolicyNatRuleCollectionActionTypeValues()
}
func PossibleFirewallPolicyRuleApplicationProtocolTypeValues() []FirewallPolicyRuleApplicationProtocolType {
	return original.PossibleFirewallPolicyRuleApplicationProtocolTypeValues()
}
func PossibleFirewallPolicyRuleCollectionTypeValues() []FirewallPolicyRuleCollectionType {
	return original.PossibleFirewallPolicyRuleCollectionTypeValues()
}
func PossibleFirewallPolicyRuleNetworkProtocolValues() []FirewallPolicyRuleNetworkProtocol {
	return original.PossibleFirewallPolicyRuleNetworkProtocolValues()
}
func PossibleFirewallPolicyRuleTypeValues() []FirewallPolicyRuleType {
	return original.PossibleFirewallPolicyRuleTypeValues()
}
func PossibleFirewallPolicySKUTierValues() []FirewallPolicySKUTier {
	return original.PossibleFirewallPolicySKUTierValues()
}
func PossibleFlowLogFormatTypeValues() []FlowLogFormatType {
	return original.PossibleFlowLogFormatTypeValues()
}
func PossibleHTTPConfigurationMethodValues() []HTTPConfigurationMethod {
	return original.PossibleHTTPConfigurationMethodValues()
}
func PossibleHTTPMethodValues() []HTTPMethod {
	return original.PossibleHTTPMethodValues()
}
func PossibleHubBgpConnectionStatusValues() []HubBgpConnectionStatus {
	return original.PossibleHubBgpConnectionStatusValues()
}
func PossibleHubVirtualNetworkConnectionStatusValues() []HubVirtualNetworkConnectionStatus {
	return original.PossibleHubVirtualNetworkConnectionStatusValues()
}
func PossibleIPAllocationMethodValues() []IPAllocationMethod {
	return original.PossibleIPAllocationMethodValues()
}
func PossibleIPAllocationTypeValues() []IPAllocationType {
	return original.PossibleIPAllocationTypeValues()
}
func PossibleIPFlowProtocolValues() []IPFlowProtocol {
	return original.PossibleIPFlowProtocolValues()
}
func PossibleIPVersionValues() []IPVersion {
	return original.PossibleIPVersionValues()
}
func PossibleIPsecEncryptionValues() []IPsecEncryption {
	return original.PossibleIPsecEncryptionValues()
}
func PossibleIPsecIntegrityValues() []IPsecIntegrity {
	return original.PossibleIPsecIntegrityValues()
}
func PossibleIkeEncryptionValues() []IkeEncryption {
	return original.PossibleIkeEncryptionValues()
}
func PossibleIkeIntegrityValues() []IkeIntegrity {
	return original.PossibleIkeIntegrityValues()
}
func PossibleInboundSecurityRulesProtocolValues() []InboundSecurityRulesProtocol {
	return original.PossibleInboundSecurityRulesProtocolValues()
}
func PossibleIssueTypeValues() []IssueType {
	return original.PossibleIssueTypeValues()
}
func PossibleLoadBalancerOutboundRuleProtocolValues() []LoadBalancerOutboundRuleProtocol {
	return original.PossibleLoadBalancerOutboundRuleProtocolValues()
}
func PossibleLoadBalancerSKUNameValues() []LoadBalancerSKUName {
	return original.PossibleLoadBalancerSKUNameValues()
}
func PossibleLoadBalancerSKUTierValues() []LoadBalancerSKUTier {
	return original.PossibleLoadBalancerSKUTierValues()
}
func PossibleLoadDistributionValues() []LoadDistribution {
	return original.PossibleLoadDistributionValues()
}
func PossibleManagedRuleEnabledStateValues() []ManagedRuleEnabledState {
	return original.PossibleManagedRuleEnabledStateValues()
}
func PossibleNatGatewaySKUNameValues() []NatGatewaySKUName {
	return original.PossibleNatGatewaySKUNameValues()
}
func PossibleNetworkOperationStatusValues() []NetworkOperationStatus {
	return original.PossibleNetworkOperationStatusValues()
}
func PossibleNextHopTypeValues() []NextHopType {
	return original.PossibleNextHopTypeValues()
}
func PossibleOfficeTrafficCategoryValues() []OfficeTrafficCategory {
	return original.PossibleOfficeTrafficCategoryValues()
}
func PossibleOriginValues() []Origin {
	return original.PossibleOriginValues()
}
func PossibleOutputTypeValues() []OutputType {
	return original.PossibleOutputTypeValues()
}
func PossibleOwaspCrsExclusionEntryMatchVariableValues() []OwaspCrsExclusionEntryMatchVariable {
	return original.PossibleOwaspCrsExclusionEntryMatchVariableValues()
}
func PossibleOwaspCrsExclusionEntrySelectorMatchOperatorValues() []OwaspCrsExclusionEntrySelectorMatchOperator {
	return original.PossibleOwaspCrsExclusionEntrySelectorMatchOperatorValues()
}
func PossiblePcErrorValues() []PcError {
	return original.PossiblePcErrorValues()
}
func PossiblePcProtocolValues() []PcProtocol {
	return original.PossiblePcProtocolValues()
}
func PossiblePcStatusValues() []PcStatus {
	return original.PossiblePcStatusValues()
}
func PossiblePfsGroupValues() []PfsGroup {
	return original.PossiblePfsGroupValues()
}
func PossiblePreferredIPVersionValues() []PreferredIPVersion {
	return original.PossiblePreferredIPVersionValues()
}
func PossibleProbeProtocolValues() []ProbeProtocol {
	return original.PossibleProbeProtocolValues()
}
func PossibleProcessorArchitectureValues() []ProcessorArchitecture {
	return original.PossibleProcessorArchitectureValues()
}
func PossibleProtocolTypeValues() []ProtocolType {
	return original.PossibleProtocolTypeValues()
}
func PossibleProtocolValues() []Protocol {
	return original.PossibleProtocolValues()
}
func PossibleProvisioningStateValues() []ProvisioningState {
	return original.PossibleProvisioningStateValues()
}
func PossiblePublicIPAddressSKUNameValues() []PublicIPAddressSKUName {
	return original.PossiblePublicIPAddressSKUNameValues()
}
func PossiblePublicIPAddressSKUTierValues() []PublicIPAddressSKUTier {
	return original.PossiblePublicIPAddressSKUTierValues()
}
func PossiblePublicIPPrefixSKUNameValues() []PublicIPPrefixSKUName {
	return original.PossiblePublicIPPrefixSKUNameValues()
}
func PossiblePublicIPPrefixSKUTierValues() []PublicIPPrefixSKUTier {
	return original.PossiblePublicIPPrefixSKUTierValues()
}
func PossibleResourceIDentityTypeValues() []ResourceIDentityType {
	return original.PossibleResourceIDentityTypeValues()
}
func PossibleRouteFilterRuleTypeValues() []RouteFilterRuleType {
	return original.PossibleRouteFilterRuleTypeValues()
}
func PossibleRouteNextHopTypeValues() []RouteNextHopType {
	return original.PossibleRouteNextHopTypeValues()
}
func PossibleRoutingStateValues() []RoutingState {
	return original.PossibleRoutingStateValues()
}
func PossibleSecurityPartnerProviderConnectionStatusValues() []SecurityPartnerProviderConnectionStatus {
	return original.PossibleSecurityPartnerProviderConnectionStatusValues()
}
func PossibleSecurityProviderNameValues() []SecurityProviderName {
	return original.PossibleSecurityProviderNameValues()
}
func PossibleSecurityRuleAccessValues() []SecurityRuleAccess {
	return original.PossibleSecurityRuleAccessValues()
}
func PossibleSecurityRuleDirectionValues() []SecurityRuleDirection {
	return original.PossibleSecurityRuleDirectionValues()
}
func PossibleSecurityRuleProtocolValues() []SecurityRuleProtocol {
	return original.PossibleSecurityRuleProtocolValues()
}
func PossibleServiceProviderProvisioningStateValues() []ServiceProviderProvisioningState {
	return original.PossibleServiceProviderProvisioningStateValues()
}
func PossibleSeverityValues() []Severity {
	return original.PossibleSeverityValues()
}
func PossibleTransportProtocolValues() []TransportProtocol {
	return original.PossibleTransportProtocolValues()
}
func PossibleTunnelConnectionStatusValues() []TunnelConnectionStatus {
	return original.PossibleTunnelConnectionStatusValues()
}
func PossibleUsageUnitValues() []UsageUnit {
	return original.PossibleUsageUnitValues()
}
func PossibleVerbosityLevelValues() []VerbosityLevel {
	return original.PossibleVerbosityLevelValues()
}
func PossibleVirtualNetworkGatewayConnectionModeValues() []VirtualNetworkGatewayConnectionMode {
	return original.PossibleVirtualNetworkGatewayConnectionModeValues()
}
func PossibleVirtualNetworkGatewayConnectionProtocolValues() []VirtualNetworkGatewayConnectionProtocol {
	return original.PossibleVirtualNetworkGatewayConnectionProtocolValues()
}
func PossibleVirtualNetworkGatewayConnectionStatusValues() []VirtualNetworkGatewayConnectionStatus {
	return original.PossibleVirtualNetworkGatewayConnectionStatusValues()
}
func PossibleVirtualNetworkGatewayConnectionTypeValues() []VirtualNetworkGatewayConnectionType {
	return original.PossibleVirtualNetworkGatewayConnectionTypeValues()
}
func PossibleVirtualNetworkGatewaySKUNameValues() []VirtualNetworkGatewaySKUName {
	return original.PossibleVirtualNetworkGatewaySKUNameValues()
}
func PossibleVirtualNetworkGatewaySKUTierValues() []VirtualNetworkGatewaySKUTier {
	return original.PossibleVirtualNetworkGatewaySKUTierValues()
}
func PossibleVirtualNetworkGatewayTypeValues() []VirtualNetworkGatewayType {
	return original.PossibleVirtualNetworkGatewayTypeValues()
}
func PossibleVirtualNetworkPeeringStateValues() []VirtualNetworkPeeringState {
	return original.PossibleVirtualNetworkPeeringStateValues()
}
func PossibleVirtualWanSecurityProviderTypeValues() []VirtualWanSecurityProviderType {
	return original.PossibleVirtualWanSecurityProviderTypeValues()
}
func PossibleVpnAuthenticationTypeValues() []VpnAuthenticationType {
	return original.PossibleVpnAuthenticationTypeValues()
}
func PossibleVpnClientProtocolValues() []VpnClientProtocol {
	return original.PossibleVpnClientProtocolValues()
}
func PossibleVpnConnectionStatusValues() []VpnConnectionStatus {
	return original.PossibleVpnConnectionStatusValues()
}
func PossibleVpnGatewayGenerationValues() []VpnGatewayGeneration {
	return original.PossibleVpnGatewayGenerationValues()
}
func PossibleVpnGatewayTunnelingProtocolValues() []VpnGatewayTunnelingProtocol {
	return original.PossibleVpnGatewayTunnelingProtocolValues()
}
func PossibleVpnTypeValues() []VpnType {
	return original.PossibleVpnTypeValues()
}
func PossibleWebApplicationFirewallActionValues() []WebApplicationFirewallAction {
	return original.PossibleWebApplicationFirewallActionValues()
}
func PossibleWebApplicationFirewallEnabledStateValues() []WebApplicationFirewallEnabledState {
	return original.PossibleWebApplicationFirewallEnabledStateValues()
}
func PossibleWebApplicationFirewallMatchVariableValues() []WebApplicationFirewallMatchVariable {
	return original.PossibleWebApplicationFirewallMatchVariableValues()
}
func PossibleWebApplicationFirewallModeValues() []WebApplicationFirewallMode {
	return original.PossibleWebApplicationFirewallModeValues()
}
func PossibleWebApplicationFirewallOperatorValues() []WebApplicationFirewallOperator {
	return original.PossibleWebApplicationFirewallOperatorValues()
}
func PossibleWebApplicationFirewallPolicyResourceStateValues() []WebApplicationFirewallPolicyResourceState {
	return original.PossibleWebApplicationFirewallPolicyResourceStateValues()
}
func PossibleWebApplicationFirewallRuleTypeValues() []WebApplicationFirewallRuleType {
	return original.PossibleWebApplicationFirewallRuleTypeValues()
}
func PossibleWebApplicationFirewallTransformValues() []WebApplicationFirewallTransform {
	return original.PossibleWebApplicationFirewallTransformValues()
}
