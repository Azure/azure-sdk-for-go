// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// This code was generated by a tool.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	original "github.com/Azure/azure-sdk-for-go/sdk/arm/resources/2020-06-01/armresources"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
)

// AliasPathAttributes - The attributes of the token that the alias path is referring to.
type AliasPathAttributes = original.AliasPathAttributes

const ( // AliasPathAttributesModifiable - The token that the alias path is referring to is modifiable by policies with 'modify' effect.
	AliasPathAttributesModifiable = original.AliasPathAttributesModifiable // AliasPathAttributesNone - The token that the alias path is referring to has no attributes.
	AliasPathAttributesNone       = original.AliasPathAttributesNone
)

// AliasPathTokenType - The type of the token that the alias path is referring to.
type AliasPathTokenType = original.AliasPathTokenType

const ( // AliasPathTokenTypeAny - The token type can be anything.
	AliasPathTokenTypeAny          = original.AliasPathTokenTypeAny          // AliasPathTokenTypeArray - The token type is array.
	AliasPathTokenTypeArray        = original.AliasPathTokenTypeArray        // AliasPathTokenTypeBoolean - The token type is boolean.
	AliasPathTokenTypeBoolean      = original.AliasPathTokenTypeBoolean      // AliasPathTokenTypeInteger - The token type is integer.
	AliasPathTokenTypeInteger      = original.AliasPathTokenTypeInteger      // AliasPathTokenTypeNotSpecified - The token type is not specified.
	AliasPathTokenTypeNotSpecified = original.AliasPathTokenTypeNotSpecified // AliasPathTokenTypeNumber - The token type is number.
	AliasPathTokenTypeNumber       = original.AliasPathTokenTypeNumber       // AliasPathTokenTypeObject - The token type is object.
	AliasPathTokenTypeObject       = original.AliasPathTokenTypeObject       // AliasPathTokenTypeString - The token type is string.
	AliasPathTokenTypeString       = original.AliasPathTokenTypeString
)

// AliasPatternType - The type of alias pattern
type AliasPatternType = original.AliasPatternType

const ( // AliasPatternTypeNotSpecified - NotSpecified is not allowed.
	AliasPatternTypeNotSpecified = original.AliasPatternTypeNotSpecified // AliasPatternTypeExtract - Extract is the only allowed value.
	AliasPatternTypeExtract      = original.AliasPatternTypeExtract
)

// AliasType - The type of the alias.
type AliasType = original.AliasType

const ( // AliasTypeNotSpecified - Alias type is unknown (same as not providing alias type).
	AliasTypeNotSpecified = original.AliasTypeNotSpecified // AliasTypePlainText - Alias value is not secret.
	AliasTypePlainText    = original.AliasTypePlainText    // AliasTypeMask - Alias value is secret.
	AliasTypeMask         = original.AliasTypeMask
)

// ChangeType - Type of change that will be made to the resource when the deployment is executed.
type ChangeType = original.ChangeType

const ( // ChangeTypeCreate - The resource does not exist in the current state but is present in the desired state. The resource will be created when the deployment
	// is executed.
	ChangeTypeCreate = original.ChangeTypeCreate // ChangeTypeDelete - The resource exists in the current state and is missing from the desired state. The resource will be deleted when the deployment is
	// executed.
	ChangeTypeDelete = original.ChangeTypeDelete // ChangeTypeIgnore - The resource exists in the current state and is missing from the desired state. The resource will not be deployed or modified when
	// the deployment is executed.
	ChangeTypeIgnore = original.ChangeTypeIgnore // ChangeTypeDeploy - The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties
	// of the resource may or may not change.
	ChangeTypeDeploy = original.ChangeTypeDeploy // ChangeTypeNoChange - The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties
	// of the resource will not change.
	ChangeTypeNoChange = original.ChangeTypeNoChange // ChangeTypeModify - The resource exists in the current state and the desired state and will be redeployed when the deployment is executed. The properties
	// of the resource will change.
	ChangeTypeModify = original.ChangeTypeModify
)

// DeploymentMode - The mode that is used to deploy resources. This value can be either Incremental or Complete. In Incremental mode, resources are deployed
// without deleting existing resources that are not included in
// the template. In Complete mode, resources are deployed and existing resources in the resource group that are not included in the template are deleted.
// Be careful when using Complete mode as you may
// unintentionally delete resources.
type DeploymentMode = original.DeploymentMode

const (
	DeploymentModeIncremental = original.DeploymentModeIncremental
	DeploymentModeComplete    = original.DeploymentModeComplete
)

// ExpressionEvaluationOptionsScopeType - The scope to be used for evaluation of parameters, variables and functions in a nested template.
type ExpressionEvaluationOptionsScopeType = original.ExpressionEvaluationOptionsScopeType

const (
	ExpressionEvaluationOptionsScopeTypeInner        = original.ExpressionEvaluationOptionsScopeTypeInner
	ExpressionEvaluationOptionsScopeTypeNotSpecified = original.ExpressionEvaluationOptionsScopeTypeNotSpecified
	ExpressionEvaluationOptionsScopeTypeOuter        = original.ExpressionEvaluationOptionsScopeTypeOuter
)

// OnErrorDeploymentType - The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
type OnErrorDeploymentType = original.OnErrorDeploymentType

const (
	OnErrorDeploymentTypeLastSuccessful     = original.OnErrorDeploymentTypeLastSuccessful
	OnErrorDeploymentTypeSpecificDeployment = original.OnErrorDeploymentTypeSpecificDeployment
)

// PropertyChangeType - The type of property change.
type PropertyChangeType = original.PropertyChangeType

const ( // PropertyChangeTypeCreate - The property does not exist in the current state but is present in the desired state. The property will be created when the
	// deployment is executed.
	PropertyChangeTypeCreate = original.PropertyChangeTypeCreate // PropertyChangeTypeDelete - The property exists in the current state and is missing from the desired state. It will be deleted when the deployment is
	// executed.
	PropertyChangeTypeDelete = original.PropertyChangeTypeDelete // PropertyChangeTypeModify - The property exists in both current and desired state and is different. The value of the property will change when the deployment
	// is executed.
	PropertyChangeTypeModify = original.PropertyChangeTypeModify // PropertyChangeTypeArray - The property is an array and contains nested changes.
	PropertyChangeTypeArray  = original.PropertyChangeTypeArray
)

// ProvisioningOperation - The name of the current provisioning operation.
type ProvisioningOperation = original.ProvisioningOperation

const ( // ProvisioningOperationNotSpecified - The provisioning operation is not specified.
	ProvisioningOperationNotSpecified               = original.ProvisioningOperationNotSpecified               // ProvisioningOperationCreate - The provisioning operation is create.
	ProvisioningOperationCreate                     = original.ProvisioningOperationCreate                     // ProvisioningOperationDelete - The provisioning operation is delete.
	ProvisioningOperationDelete                     = original.ProvisioningOperationDelete                     // ProvisioningOperationWaiting - The provisioning operation is waiting.
	ProvisioningOperationWaiting                    = original.ProvisioningOperationWaiting                    // ProvisioningOperationAzureAsyncOperationWaiting - The provisioning operation is waiting Azure async operation.
	ProvisioningOperationAzureAsyncOperationWaiting = original.ProvisioningOperationAzureAsyncOperationWaiting // ProvisioningOperationResourceCacheWaiting - The provisioning operation is waiting for resource cache.
	ProvisioningOperationResourceCacheWaiting       = original.ProvisioningOperationResourceCacheWaiting       // ProvisioningOperationAction - The provisioning operation is action.
	ProvisioningOperationAction                     = original.ProvisioningOperationAction                     // ProvisioningOperationRead - The provisioning operation is read.
	ProvisioningOperationRead                       = original.ProvisioningOperationRead                       // ProvisioningOperationEvaluateDeploymentOutput - The provisioning operation is evaluate output.
	ProvisioningOperationEvaluateDeploymentOutput   = original.ProvisioningOperationEvaluateDeploymentOutput   // ProvisioningOperationDeploymentCleanup - The provisioning operation is cleanup. This operation is part of the 'complete' mode deployment.
	ProvisioningOperationDeploymentCleanup          = original.ProvisioningOperationDeploymentCleanup
)

// ProvisioningState - Denotes the state of provisioning.
type ProvisioningState = original.ProvisioningState

const (
	ProvisioningStateAccepted     = original.ProvisioningStateAccepted
	ProvisioningStateCanceled     = original.ProvisioningStateCanceled
	ProvisioningStateCreated      = original.ProvisioningStateCreated
	ProvisioningStateCreating     = original.ProvisioningStateCreating
	ProvisioningStateDeleted      = original.ProvisioningStateDeleted
	ProvisioningStateDeleting     = original.ProvisioningStateDeleting
	ProvisioningStateFailed       = original.ProvisioningStateFailed
	ProvisioningStateNotSpecified = original.ProvisioningStateNotSpecified
	ProvisioningStateReady        = original.ProvisioningStateReady
	ProvisioningStateRunning      = original.ProvisioningStateRunning
	ProvisioningStateSucceeded    = original.ProvisioningStateSucceeded
	ProvisioningStateUpdating     = original.ProvisioningStateUpdating
)

// ResourceIDentityType - The identity type.
type ResourceIDentityType = original.ResourceIDentityType

const (
	ResourceIDentityTypeSystemAssigned             = original.ResourceIDentityTypeSystemAssigned
	ResourceIDentityTypeUserAssigned               = original.ResourceIDentityTypeUserAssigned
	ResourceIDentityTypeSystemAssignedUserAssigned = original.ResourceIDentityTypeSystemAssignedUserAssigned
	ResourceIDentityTypeNone                       = original.ResourceIDentityTypeNone
)

// TagsPatchOperation - The operation type for the patch API.
type TagsPatchOperation = original.TagsPatchOperation

const ( // TagsPatchOperationDelete - The 'delete' option allows selectively deleting tags based on given names or name/value pairs.
	TagsPatchOperationDelete  = original.TagsPatchOperationDelete // TagsPatchOperationMerge - The 'merge' option allows adding tags with new names and updating the values of tags with existing names.
	TagsPatchOperationMerge   = original.TagsPatchOperationMerge  // TagsPatchOperationReplace - The 'replace' option replaces the entire set of existing tags with a new set.
	TagsPatchOperationReplace = original.TagsPatchOperationReplace
)

// WhatIfResultFormat - The format of the What-If results
type WhatIfResultFormat = original.WhatIfResultFormat

const (
	WhatIfResultFormatResourceIDOnly       = original.WhatIfResultFormatResourceIDOnly
	WhatIfResultFormatFullResourcePayloads = original.WhatIfResultFormatFullResourcePayloads
)

type APIProfile = original.APIProfile

// The alias type.
type Alias = original.Alias

// The type of the paths for alias.
type AliasPath = original.AliasPath
type AliasPathMetadata = original.AliasPathMetadata

// The type of the pattern for an alias path.
type AliasPattern = original.AliasPattern

// Deployment dependency information.
type BasicDependency = original.BasicDependency

// BooleanResponse contains a boolean response.
type BooleanResponse = original.BooleanResponse

// An error response for a resource management request.
type CloudError = original.CloudError

// The debug setting.
type DebugSetting = original.DebugSetting

// Deployment dependency information.
type Dependency = original.Dependency

// Deployment operation parameters.
type Deployment = original.Deployment

// The deployment export result.
type DeploymentExportResult = original.DeploymentExportResult

// DeploymentExportResultResponse is the response envelope for operations that return a DeploymentExportResult type.
type DeploymentExportResultResponse = original.DeploymentExportResultResponse

// Deployment information.
type DeploymentExtended = original.DeploymentExtended

// Deployment filter.
type DeploymentExtendedFilter = original.DeploymentExtendedFilter

// DeploymentExtendedPoller provides polling facilities until the operation completes
type DeploymentExtendedPoller = original.DeploymentExtendedPoller

// DeploymentExtendedPollerResponse is the response envelope for operations that asynchronously return a DeploymentExtended type.
type DeploymentExtendedPollerResponse = original.DeploymentExtendedPollerResponse

// DeploymentExtendedResponse is the response envelope for operations that return a DeploymentExtended type.
type DeploymentExtendedResponse = original.DeploymentExtendedResponse

// List of deployments.
type DeploymentListResult = original.DeploymentListResult

// DeploymentListResultPager provides iteration over DeploymentListResult pages.
type DeploymentListResultPager = original.DeploymentListResultPager

// DeploymentListResultResponse is the response envelope for operations that return a DeploymentListResult type.
type DeploymentListResultResponse = original.DeploymentListResultResponse

// Deployment operation information.
type DeploymentOperation = original.DeploymentOperation

// Deployment operation properties.
type DeploymentOperationProperties = original.DeploymentOperationProperties

// DeploymentOperationResponse is the response envelope for operations that return a DeploymentOperation type.
type DeploymentOperationResponse = original.DeploymentOperationResponse

// DeploymentOperationsClient contains the methods for the DeploymentOperations group.
// Don't use this type directly, use NewDeploymentOperationsClient() instead.
type DeploymentOperationsClient = original.DeploymentOperationsClient

// DeploymentOperationsGetAtManagementGroupScopeOptions contains the optional parameters for the DeploymentOperations.GetAtManagementGroupScope method.
type DeploymentOperationsGetAtManagementGroupScopeOptions = original.DeploymentOperationsGetAtManagementGroupScopeOptions

// DeploymentOperationsGetAtScopeOptions contains the optional parameters for the DeploymentOperations.GetAtScope method.
type DeploymentOperationsGetAtScopeOptions = original.DeploymentOperationsGetAtScopeOptions

// DeploymentOperationsGetAtSubscriptionScopeOptions contains the optional parameters for the DeploymentOperations.GetAtSubscriptionScope method.
type DeploymentOperationsGetAtSubscriptionScopeOptions = original.DeploymentOperationsGetAtSubscriptionScopeOptions

// DeploymentOperationsGetAtTenantScopeOptions contains the optional parameters for the DeploymentOperations.GetAtTenantScope method.
type DeploymentOperationsGetAtTenantScopeOptions = original.DeploymentOperationsGetAtTenantScopeOptions

// DeploymentOperationsGetOptions contains the optional parameters for the DeploymentOperations.Get method.
type DeploymentOperationsGetOptions = original.DeploymentOperationsGetOptions

// DeploymentOperationsListAtManagementGroupScopeOptions contains the optional parameters for the DeploymentOperations.ListAtManagementGroupScope method.
type DeploymentOperationsListAtManagementGroupScopeOptions = original.DeploymentOperationsListAtManagementGroupScopeOptions

// DeploymentOperationsListAtScopeOptions contains the optional parameters for the DeploymentOperations.ListAtScope method.
type DeploymentOperationsListAtScopeOptions = original.DeploymentOperationsListAtScopeOptions

// DeploymentOperationsListAtSubscriptionScopeOptions contains the optional parameters for the DeploymentOperations.ListAtSubscriptionScope method.
type DeploymentOperationsListAtSubscriptionScopeOptions = original.DeploymentOperationsListAtSubscriptionScopeOptions

// DeploymentOperationsListAtTenantScopeOptions contains the optional parameters for the DeploymentOperations.ListAtTenantScope method.
type DeploymentOperationsListAtTenantScopeOptions = original.DeploymentOperationsListAtTenantScopeOptions

// DeploymentOperationsListOptions contains the optional parameters for the DeploymentOperations.List method.
type DeploymentOperationsListOptions = original.DeploymentOperationsListOptions

// List of deployment operations.
type DeploymentOperationsListResult = original.DeploymentOperationsListResult

// DeploymentOperationsListResultPager provides iteration over DeploymentOperationsListResult pages.
type DeploymentOperationsListResultPager = original.DeploymentOperationsListResultPager

// DeploymentOperationsListResultResponse is the response envelope for operations that return a DeploymentOperationsListResult type.
type DeploymentOperationsListResultResponse = original.DeploymentOperationsListResultResponse

// Deployment properties.
type DeploymentProperties = original.DeploymentProperties

// Deployment properties with additional details.
type DeploymentPropertiesExtended = original.DeploymentPropertiesExtended

// Information from validate template deployment response.
type DeploymentValidateResult = original.DeploymentValidateResult

// DeploymentValidateResultPoller provides polling facilities until the operation completes
type DeploymentValidateResultPoller = original.DeploymentValidateResultPoller

// DeploymentValidateResultPollerResponse is the response envelope for operations that asynchronously return a DeploymentValidateResult type.
type DeploymentValidateResultPollerResponse = original.DeploymentValidateResultPollerResponse

// DeploymentValidateResultResponse is the response envelope for operations that return a DeploymentValidateResult type.
type DeploymentValidateResultResponse = original.DeploymentValidateResultResponse

// Deployment What-if operation parameters.
type DeploymentWhatIf = original.DeploymentWhatIf

// Deployment What-if properties.
type DeploymentWhatIfProperties = original.DeploymentWhatIfProperties

// Deployment What-If operation settings.
type DeploymentWhatIfSettings = original.DeploymentWhatIfSettings

// DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtManagementGroupScope
// method.
type DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions = original.DeploymentsBeginCreateOrUpdateAtManagementGroupScopeOptions

// DeploymentsBeginCreateOrUpdateAtScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtScope method.
type DeploymentsBeginCreateOrUpdateAtScopeOptions = original.DeploymentsBeginCreateOrUpdateAtScopeOptions

// DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtSubscriptionScope
// method.
type DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions = original.DeploymentsBeginCreateOrUpdateAtSubscriptionScopeOptions

// DeploymentsBeginCreateOrUpdateAtTenantScopeOptions contains the optional parameters for the Deployments.BeginCreateOrUpdateAtTenantScope method.
type DeploymentsBeginCreateOrUpdateAtTenantScopeOptions = original.DeploymentsBeginCreateOrUpdateAtTenantScopeOptions

// DeploymentsBeginCreateOrUpdateOptions contains the optional parameters for the Deployments.BeginCreateOrUpdate method.
type DeploymentsBeginCreateOrUpdateOptions = original.DeploymentsBeginCreateOrUpdateOptions

// DeploymentsBeginDeleteAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtManagementGroupScope method.
type DeploymentsBeginDeleteAtManagementGroupScopeOptions = original.DeploymentsBeginDeleteAtManagementGroupScopeOptions

// DeploymentsBeginDeleteAtScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtScope method.
type DeploymentsBeginDeleteAtScopeOptions = original.DeploymentsBeginDeleteAtScopeOptions

// DeploymentsBeginDeleteAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtSubscriptionScope method.
type DeploymentsBeginDeleteAtSubscriptionScopeOptions = original.DeploymentsBeginDeleteAtSubscriptionScopeOptions

// DeploymentsBeginDeleteAtTenantScopeOptions contains the optional parameters for the Deployments.BeginDeleteAtTenantScope method.
type DeploymentsBeginDeleteAtTenantScopeOptions = original.DeploymentsBeginDeleteAtTenantScopeOptions

// DeploymentsBeginDeleteOptions contains the optional parameters for the Deployments.BeginDelete method.
type DeploymentsBeginDeleteOptions = original.DeploymentsBeginDeleteOptions

// DeploymentsBeginValidateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginValidateAtManagementGroupScope method.
type DeploymentsBeginValidateAtManagementGroupScopeOptions = original.DeploymentsBeginValidateAtManagementGroupScopeOptions

// DeploymentsBeginValidateAtScopeOptions contains the optional parameters for the Deployments.BeginValidateAtScope method.
type DeploymentsBeginValidateAtScopeOptions = original.DeploymentsBeginValidateAtScopeOptions

// DeploymentsBeginValidateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginValidateAtSubscriptionScope method.
type DeploymentsBeginValidateAtSubscriptionScopeOptions = original.DeploymentsBeginValidateAtSubscriptionScopeOptions

// DeploymentsBeginValidateAtTenantScopeOptions contains the optional parameters for the Deployments.BeginValidateAtTenantScope method.
type DeploymentsBeginValidateAtTenantScopeOptions = original.DeploymentsBeginValidateAtTenantScopeOptions

// DeploymentsBeginValidateOptions contains the optional parameters for the Deployments.BeginValidate method.
type DeploymentsBeginValidateOptions = original.DeploymentsBeginValidateOptions

// DeploymentsBeginWhatIfAtManagementGroupScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtManagementGroupScope method.
type DeploymentsBeginWhatIfAtManagementGroupScopeOptions = original.DeploymentsBeginWhatIfAtManagementGroupScopeOptions

// DeploymentsBeginWhatIfAtSubscriptionScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtSubscriptionScope method.
type DeploymentsBeginWhatIfAtSubscriptionScopeOptions = original.DeploymentsBeginWhatIfAtSubscriptionScopeOptions

// DeploymentsBeginWhatIfAtTenantScopeOptions contains the optional parameters for the Deployments.BeginWhatIfAtTenantScope method.
type DeploymentsBeginWhatIfAtTenantScopeOptions = original.DeploymentsBeginWhatIfAtTenantScopeOptions

// DeploymentsBeginWhatIfOptions contains the optional parameters for the Deployments.BeginWhatIf method.
type DeploymentsBeginWhatIfOptions = original.DeploymentsBeginWhatIfOptions

// DeploymentsCalculateTemplateHashOptions contains the optional parameters for the Deployments.CalculateTemplateHash method.
type DeploymentsCalculateTemplateHashOptions = original.DeploymentsCalculateTemplateHashOptions

// DeploymentsCancelAtManagementGroupScopeOptions contains the optional parameters for the Deployments.CancelAtManagementGroupScope method.
type DeploymentsCancelAtManagementGroupScopeOptions = original.DeploymentsCancelAtManagementGroupScopeOptions

// DeploymentsCancelAtScopeOptions contains the optional parameters for the Deployments.CancelAtScope method.
type DeploymentsCancelAtScopeOptions = original.DeploymentsCancelAtScopeOptions

// DeploymentsCancelAtSubscriptionScopeOptions contains the optional parameters for the Deployments.CancelAtSubscriptionScope method.
type DeploymentsCancelAtSubscriptionScopeOptions = original.DeploymentsCancelAtSubscriptionScopeOptions

// DeploymentsCancelAtTenantScopeOptions contains the optional parameters for the Deployments.CancelAtTenantScope method.
type DeploymentsCancelAtTenantScopeOptions = original.DeploymentsCancelAtTenantScopeOptions

// DeploymentsCancelOptions contains the optional parameters for the Deployments.Cancel method.
type DeploymentsCancelOptions = original.DeploymentsCancelOptions

// DeploymentsCheckExistenceAtManagementGroupScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtManagementGroupScope method.
type DeploymentsCheckExistenceAtManagementGroupScopeOptions = original.DeploymentsCheckExistenceAtManagementGroupScopeOptions

// DeploymentsCheckExistenceAtScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtScope method.
type DeploymentsCheckExistenceAtScopeOptions = original.DeploymentsCheckExistenceAtScopeOptions

// DeploymentsCheckExistenceAtSubscriptionScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtSubscriptionScope method.
type DeploymentsCheckExistenceAtSubscriptionScopeOptions = original.DeploymentsCheckExistenceAtSubscriptionScopeOptions

// DeploymentsCheckExistenceAtTenantScopeOptions contains the optional parameters for the Deployments.CheckExistenceAtTenantScope method.
type DeploymentsCheckExistenceAtTenantScopeOptions = original.DeploymentsCheckExistenceAtTenantScopeOptions

// DeploymentsCheckExistenceOptions contains the optional parameters for the Deployments.CheckExistence method.
type DeploymentsCheckExistenceOptions = original.DeploymentsCheckExistenceOptions

// DeploymentsClient contains the methods for the Deployments group.
// Don't use this type directly, use NewDeploymentsClient() instead.
type DeploymentsClient = original.DeploymentsClient

// DeploymentsExportTemplateAtManagementGroupScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtManagementGroupScope method.
type DeploymentsExportTemplateAtManagementGroupScopeOptions = original.DeploymentsExportTemplateAtManagementGroupScopeOptions

// DeploymentsExportTemplateAtScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtScope method.
type DeploymentsExportTemplateAtScopeOptions = original.DeploymentsExportTemplateAtScopeOptions

// DeploymentsExportTemplateAtSubscriptionScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtSubscriptionScope method.
type DeploymentsExportTemplateAtSubscriptionScopeOptions = original.DeploymentsExportTemplateAtSubscriptionScopeOptions

// DeploymentsExportTemplateAtTenantScopeOptions contains the optional parameters for the Deployments.ExportTemplateAtTenantScope method.
type DeploymentsExportTemplateAtTenantScopeOptions = original.DeploymentsExportTemplateAtTenantScopeOptions

// DeploymentsExportTemplateOptions contains the optional parameters for the Deployments.ExportTemplate method.
type DeploymentsExportTemplateOptions = original.DeploymentsExportTemplateOptions

// DeploymentsGetAtManagementGroupScopeOptions contains the optional parameters for the Deployments.GetAtManagementGroupScope method.
type DeploymentsGetAtManagementGroupScopeOptions = original.DeploymentsGetAtManagementGroupScopeOptions

// DeploymentsGetAtScopeOptions contains the optional parameters for the Deployments.GetAtScope method.
type DeploymentsGetAtScopeOptions = original.DeploymentsGetAtScopeOptions

// DeploymentsGetAtSubscriptionScopeOptions contains the optional parameters for the Deployments.GetAtSubscriptionScope method.
type DeploymentsGetAtSubscriptionScopeOptions = original.DeploymentsGetAtSubscriptionScopeOptions

// DeploymentsGetAtTenantScopeOptions contains the optional parameters for the Deployments.GetAtTenantScope method.
type DeploymentsGetAtTenantScopeOptions = original.DeploymentsGetAtTenantScopeOptions

// DeploymentsGetOptions contains the optional parameters for the Deployments.Get method.
type DeploymentsGetOptions = original.DeploymentsGetOptions

// DeploymentsListAtManagementGroupScopeOptions contains the optional parameters for the Deployments.ListAtManagementGroupScope method.
type DeploymentsListAtManagementGroupScopeOptions = original.DeploymentsListAtManagementGroupScopeOptions

// DeploymentsListAtScopeOptions contains the optional parameters for the Deployments.ListAtScope method.
type DeploymentsListAtScopeOptions = original.DeploymentsListAtScopeOptions

// DeploymentsListAtSubscriptionScopeOptions contains the optional parameters for the Deployments.ListAtSubscriptionScope method.
type DeploymentsListAtSubscriptionScopeOptions = original.DeploymentsListAtSubscriptionScopeOptions

// DeploymentsListAtTenantScopeOptions contains the optional parameters for the Deployments.ListAtTenantScope method.
type DeploymentsListAtTenantScopeOptions = original.DeploymentsListAtTenantScopeOptions

// DeploymentsListByResourceGroupOptions contains the optional parameters for the Deployments.ListByResourceGroup method.
type DeploymentsListByResourceGroupOptions = original.DeploymentsListByResourceGroupOptions

// The resource management error additional info.
type ErrorAdditionalInfo = original.ErrorAdditionalInfo

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response
// format.)
type ErrorResponse = original.ErrorResponse

// Export resource group template request parameters.
type ExportTemplateRequest = original.ExportTemplateRequest

// Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
type ExpressionEvaluationOptions = original.ExpressionEvaluationOptions

// Resource information.
type GenericResource = original.GenericResource

// Resource information.
type GenericResourceExpanded = original.GenericResourceExpanded

// Resource filter.
type GenericResourceFilter = original.GenericResourceFilter

// GenericResourcePoller provides polling facilities until the operation completes
type GenericResourcePoller = original.GenericResourcePoller

// GenericResourcePollerResponse is the response envelope for operations that asynchronously return a GenericResource type.
type GenericResourcePollerResponse = original.GenericResourcePollerResponse

// GenericResourceResponse is the response envelope for operations that return a GenericResource type.
type GenericResourceResponse = original.GenericResourceResponse

// HTTP message.
type HTTPMessage = original.HTTPMessage

// HTTPPoller provides polling facilities until the operation completes
type HTTPPoller = original.HTTPPoller

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse = original.HTTPPollerResponse

// Identity for the resource.
type IDentity = original.IDentity
type IDentityUserAssignedIdentitiesValue = original.IDentityUserAssignedIdentitiesValue

// Deployment on error behavior.
type OnErrorDeployment = original.OnErrorDeployment

// Deployment on error behavior with additional details.
type OnErrorDeploymentExtended = original.OnErrorDeploymentExtended

// Microsoft.Resources operation
type Operation = original.Operation

// The object that represents the operation.
type OperationDisplay = original.OperationDisplay

// Result of the request to list Microsoft.Resources operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult = original.OperationListResult

// OperationListResultPager provides iteration over OperationListResult pages.
type OperationListResultPager = original.OperationListResultPager

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse = original.OperationListResultResponse

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient = original.OperationsClient

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions = original.OperationsListOptions

// Entity representing the reference to the deployment parameters.
type ParametersLink = original.ParametersLink

// Plan for the resource.
type Plan = original.Plan

// Resource provider information.
type Provider = original.Provider

// List of resource providers.
type ProviderListResult = original.ProviderListResult

// ProviderListResultPager provides iteration over ProviderListResult pages.
type ProviderListResultPager = original.ProviderListResultPager

// ProviderListResultResponse is the response envelope for operations that return a ProviderListResult type.
type ProviderListResultResponse = original.ProviderListResultResponse

// Resource type managed by the resource provider.
type ProviderResourceType = original.ProviderResourceType

// ProviderResponse is the response envelope for operations that return a Provider type.
type ProviderResponse = original.ProviderResponse

// ProvidersClient contains the methods for the Providers group.
// Don't use this type directly, use NewProvidersClient() instead.
type ProvidersClient = original.ProvidersClient

// ProvidersGetAtTenantScopeOptions contains the optional parameters for the Providers.GetAtTenantScope method.
type ProvidersGetAtTenantScopeOptions = original.ProvidersGetAtTenantScopeOptions

// ProvidersGetOptions contains the optional parameters for the Providers.Get method.
type ProvidersGetOptions = original.ProvidersGetOptions

// ProvidersListAtTenantScopeOptions contains the optional parameters for the Providers.ListAtTenantScope method.
type ProvidersListAtTenantScopeOptions = original.ProvidersListAtTenantScopeOptions

// ProvidersListOptions contains the optional parameters for the Providers.List method.
type ProvidersListOptions = original.ProvidersListOptions

// ProvidersRegisterAtManagementGroupScopeOptions contains the optional parameters for the Providers.RegisterAtManagementGroupScope method.
type ProvidersRegisterAtManagementGroupScopeOptions = original.ProvidersRegisterAtManagementGroupScopeOptions

// ProvidersRegisterOptions contains the optional parameters for the Providers.Register method.
type ProvidersRegisterOptions = original.ProvidersRegisterOptions

// ProvidersUnregisterOptions contains the optional parameters for the Providers.Unregister method.
type ProvidersUnregisterOptions = original.ProvidersUnregisterOptions

// Specified resource.
type Resource = original.Resource

// Resource group information.
type ResourceGroup = original.ResourceGroup

// Resource group export result.
type ResourceGroupExportResult = original.ResourceGroupExportResult

// ResourceGroupExportResultPoller provides polling facilities until the operation completes
type ResourceGroupExportResultPoller = original.ResourceGroupExportResultPoller

// ResourceGroupExportResultPollerResponse is the response envelope for operations that asynchronously return a ResourceGroupExportResult type.
type ResourceGroupExportResultPollerResponse = original.ResourceGroupExportResultPollerResponse

// ResourceGroupExportResultResponse is the response envelope for operations that return a ResourceGroupExportResult type.
type ResourceGroupExportResultResponse = original.ResourceGroupExportResultResponse

// Resource group filter.
type ResourceGroupFilter = original.ResourceGroupFilter

// List of resource groups.
type ResourceGroupListResult = original.ResourceGroupListResult

// ResourceGroupListResultPager provides iteration over ResourceGroupListResult pages.
type ResourceGroupListResultPager = original.ResourceGroupListResultPager

// ResourceGroupListResultResponse is the response envelope for operations that return a ResourceGroupListResult type.
type ResourceGroupListResultResponse = original.ResourceGroupListResultResponse

// Resource group information.
type ResourceGroupPatchable = original.ResourceGroupPatchable

// The resource group properties.
type ResourceGroupProperties = original.ResourceGroupProperties

// ResourceGroupResponse is the response envelope for operations that return a ResourceGroup type.
type ResourceGroupResponse = original.ResourceGroupResponse

// ResourceGroupsBeginDeleteOptions contains the optional parameters for the ResourceGroups.BeginDelete method.
type ResourceGroupsBeginDeleteOptions = original.ResourceGroupsBeginDeleteOptions

// ResourceGroupsBeginExportTemplateOptions contains the optional parameters for the ResourceGroups.BeginExportTemplate method.
type ResourceGroupsBeginExportTemplateOptions = original.ResourceGroupsBeginExportTemplateOptions

// ResourceGroupsCheckExistenceOptions contains the optional parameters for the ResourceGroups.CheckExistence method.
type ResourceGroupsCheckExistenceOptions = original.ResourceGroupsCheckExistenceOptions

// ResourceGroupsClient contains the methods for the ResourceGroups group.
// Don't use this type directly, use NewResourceGroupsClient() instead.
type ResourceGroupsClient = original.ResourceGroupsClient

// ResourceGroupsCreateOrUpdateOptions contains the optional parameters for the ResourceGroups.CreateOrUpdate method.
type ResourceGroupsCreateOrUpdateOptions = original.ResourceGroupsCreateOrUpdateOptions

// ResourceGroupsGetOptions contains the optional parameters for the ResourceGroups.Get method.
type ResourceGroupsGetOptions = original.ResourceGroupsGetOptions

// ResourceGroupsListOptions contains the optional parameters for the ResourceGroups.List method.
type ResourceGroupsListOptions = original.ResourceGroupsListOptions

// ResourceGroupsUpdateOptions contains the optional parameters for the ResourceGroups.Update method.
type ResourceGroupsUpdateOptions = original.ResourceGroupsUpdateOptions

// List of resource groups.
type ResourceListResult = original.ResourceListResult

// ResourceListResultPager provides iteration over ResourceListResult pages.
type ResourceListResultPager = original.ResourceListResultPager

// ResourceListResultResponse is the response envelope for operations that return a ResourceListResult type.
type ResourceListResultResponse = original.ResourceListResultResponse

// Resource provider operation's display properties.
type ResourceProviderOperationDisplayProperties = original.ResourceProviderOperationDisplayProperties

// The resource Id model.
type ResourceReference = original.ResourceReference

// ResourcesBeginCreateOrUpdateByIDOptions contains the optional parameters for the Resources.BeginCreateOrUpdateByID method.
type ResourcesBeginCreateOrUpdateByIDOptions = original.ResourcesBeginCreateOrUpdateByIDOptions

// ResourcesBeginCreateOrUpdateOptions contains the optional parameters for the Resources.BeginCreateOrUpdate method.
type ResourcesBeginCreateOrUpdateOptions = original.ResourcesBeginCreateOrUpdateOptions

// ResourcesBeginDeleteByIDOptions contains the optional parameters for the Resources.BeginDeleteByID method.
type ResourcesBeginDeleteByIDOptions = original.ResourcesBeginDeleteByIDOptions

// ResourcesBeginDeleteOptions contains the optional parameters for the Resources.BeginDelete method.
type ResourcesBeginDeleteOptions = original.ResourcesBeginDeleteOptions

// ResourcesBeginMoveResourcesOptions contains the optional parameters for the Resources.BeginMoveResources method.
type ResourcesBeginMoveResourcesOptions = original.ResourcesBeginMoveResourcesOptions

// ResourcesBeginUpdateByIDOptions contains the optional parameters for the Resources.BeginUpdateByID method.
type ResourcesBeginUpdateByIDOptions = original.ResourcesBeginUpdateByIDOptions

// ResourcesBeginUpdateOptions contains the optional parameters for the Resources.BeginUpdate method.
type ResourcesBeginUpdateOptions = original.ResourcesBeginUpdateOptions

// ResourcesBeginValidateMoveResourcesOptions contains the optional parameters for the Resources.BeginValidateMoveResources method.
type ResourcesBeginValidateMoveResourcesOptions = original.ResourcesBeginValidateMoveResourcesOptions

// ResourcesCheckExistenceByIDOptions contains the optional parameters for the Resources.CheckExistenceByID method.
type ResourcesCheckExistenceByIDOptions = original.ResourcesCheckExistenceByIDOptions

// ResourcesCheckExistenceOptions contains the optional parameters for the Resources.CheckExistence method.
type ResourcesCheckExistenceOptions = original.ResourcesCheckExistenceOptions

// ResourcesClient contains the methods for the Resources group.
// Don't use this type directly, use NewResourcesClient() instead.
type ResourcesClient = original.ResourcesClient

// ResourcesGetByIDOptions contains the optional parameters for the Resources.GetByID method.
type ResourcesGetByIDOptions = original.ResourcesGetByIDOptions

// ResourcesGetOptions contains the optional parameters for the Resources.Get method.
type ResourcesGetOptions = original.ResourcesGetOptions

// ResourcesListByResourceGroupOptions contains the optional parameters for the Resources.ListByResourceGroup method.
type ResourcesListByResourceGroupOptions = original.ResourcesListByResourceGroupOptions

// ResourcesListOptions contains the optional parameters for the Resources.List method.
type ResourcesListOptions = original.ResourcesListOptions

// Parameters of move resources.
type ResourcesMoveInfo = original.ResourcesMoveInfo

// SKU for the resource.
type SKU = original.SKU

// Deployment operation parameters.
type ScopedDeployment = original.ScopedDeployment

// Deployment What-if operation parameters.
type ScopedDeploymentWhatIf = original.ScopedDeploymentWhatIf

// Operation status message object.
type StatusMessage = original.StatusMessage

// Sub-resource.
type SubResource = original.SubResource

// Tag count.
type TagCount = original.TagCount

// Tag details.
type TagDetails = original.TagDetails

// TagDetailsResponse is the response envelope for operations that return a TagDetails type.
type TagDetailsResponse = original.TagDetailsResponse

// Tag information.
type TagValue = original.TagValue

// TagValueResponse is the response envelope for operations that return a TagValue type.
type TagValueResponse = original.TagValueResponse

// A dictionary of name and value pairs.
type Tags = original.Tags

// TagsClient contains the methods for the Tags group.
// Don't use this type directly, use NewTagsClient() instead.
type TagsClient = original.TagsClient

// TagsCreateOrUpdateAtScopeOptions contains the optional parameters for the Tags.CreateOrUpdateAtScope method.
type TagsCreateOrUpdateAtScopeOptions = original.TagsCreateOrUpdateAtScopeOptions

// TagsCreateOrUpdateOptions contains the optional parameters for the Tags.CreateOrUpdate method.
type TagsCreateOrUpdateOptions = original.TagsCreateOrUpdateOptions

// TagsCreateOrUpdateValueOptions contains the optional parameters for the Tags.CreateOrUpdateValue method.
type TagsCreateOrUpdateValueOptions = original.TagsCreateOrUpdateValueOptions

// TagsDeleteAtScopeOptions contains the optional parameters for the Tags.DeleteAtScope method.
type TagsDeleteAtScopeOptions = original.TagsDeleteAtScopeOptions

// TagsDeleteOptions contains the optional parameters for the Tags.Delete method.
type TagsDeleteOptions = original.TagsDeleteOptions

// TagsDeleteValueOptions contains the optional parameters for the Tags.DeleteValue method.
type TagsDeleteValueOptions = original.TagsDeleteValueOptions

// TagsGetAtScopeOptions contains the optional parameters for the Tags.GetAtScope method.
type TagsGetAtScopeOptions = original.TagsGetAtScopeOptions

// TagsListOptions contains the optional parameters for the Tags.List method.
type TagsListOptions = original.TagsListOptions

// List of subscription tags.
type TagsListResult = original.TagsListResult

// TagsListResultPager provides iteration over TagsListResult pages.
type TagsListResultPager = original.TagsListResultPager

// TagsListResultResponse is the response envelope for operations that return a TagsListResult type.
type TagsListResultResponse = original.TagsListResultResponse

// Wrapper resource for tags patch API request only.
type TagsPatchResource = original.TagsPatchResource

// Wrapper resource for tags API requests and responses.
type TagsResource = original.TagsResource

// TagsResourceResponse is the response envelope for operations that return a TagsResource type.
type TagsResourceResponse = original.TagsResourceResponse

// TagsUpdateAtScopeOptions contains the optional parameters for the Tags.UpdateAtScope method.
type TagsUpdateAtScopeOptions = original.TagsUpdateAtScopeOptions

// Target resource.
type TargetResource = original.TargetResource

// Result of the request to calculate template hash. It contains a string of minified template and its hash.
type TemplateHashResult = original.TemplateHashResult

// TemplateHashResultResponse is the response envelope for operations that return a TemplateHashResult type.
type TemplateHashResultResponse = original.TemplateHashResultResponse

// Entity representing the reference to the template.
type TemplateLink = original.TemplateLink

// Information about a single resource change predicted by What-If operation.
type WhatIfChange = original.WhatIfChange

// Deployment operation properties.
type WhatIfOperationProperties = original.WhatIfOperationProperties

// Result of the What-If operation. Contains a list of predicted changes and a URL link to get to the next set of results.
type WhatIfOperationResult = original.WhatIfOperationResult

// WhatIfOperationResultPoller provides polling facilities until the operation completes
type WhatIfOperationResultPoller = original.WhatIfOperationResultPoller

// WhatIfOperationResultPollerResponse is the response envelope for operations that asynchronously return a WhatIfOperationResult type.
type WhatIfOperationResultPollerResponse = original.WhatIfOperationResultPollerResponse

// WhatIfOperationResultResponse is the response envelope for operations that return a WhatIfOperationResult type.
type WhatIfOperationResultResponse = original.WhatIfOperationResultResponse

// The predicted change to the resource property.
type WhatIfPropertyChange = original.WhatIfPropertyChange

// NewDeploymentOperationsClient creates a new instance of DeploymentOperationsClient with the specified values.
func NewDeploymentOperationsClient(con *armcore.Connection, subscriptionID string) DeploymentOperationsClient {
	return original.NewDeploymentOperationsClient(con, subscriptionID)
}

// NewDeploymentsClient creates a new instance of DeploymentsClient with the specified values.
func NewDeploymentsClient(con *armcore.Connection, subscriptionID string) DeploymentsClient {
	return original.NewDeploymentsClient(con, subscriptionID)
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(con *armcore.Connection) OperationsClient {
	return original.NewOperationsClient(con)
}

// NewProvidersClient creates a new instance of ProvidersClient with the specified values.
func NewProvidersClient(con *armcore.Connection, subscriptionID string) ProvidersClient {
	return original.NewProvidersClient(con, subscriptionID)
}

// NewResourceGroupsClient creates a new instance of ResourceGroupsClient with the specified values.
func NewResourceGroupsClient(con *armcore.Connection, subscriptionID string) ResourceGroupsClient {
	return original.NewResourceGroupsClient(con, subscriptionID)
}

// NewResourcesClient creates a new instance of ResourcesClient with the specified values.
func NewResourcesClient(con *armcore.Connection, subscriptionID string) ResourcesClient {
	return original.NewResourcesClient(con, subscriptionID)
}

// NewTagsClient creates a new instance of TagsClient with the specified values.
func NewTagsClient(con *armcore.Connection, subscriptionID string) TagsClient {
	return original.NewTagsClient(con, subscriptionID)
}
func PossibleAliasPathAttributesValues() []AliasPathAttributes {
	return original.PossibleAliasPathAttributesValues()
}
func PossibleAliasPathTokenTypeValues() []AliasPathTokenType {
	return original.PossibleAliasPathTokenTypeValues()
}
func PossibleAliasPatternTypeValues() []AliasPatternType {
	return original.PossibleAliasPatternTypeValues()
}
func PossibleAliasTypeValues() []AliasType {
	return original.PossibleAliasTypeValues()
}
func PossibleChangeTypeValues() []ChangeType {
	return original.PossibleChangeTypeValues()
}
func PossibleDeploymentModeValues() []DeploymentMode {
	return original.PossibleDeploymentModeValues()
}
func PossibleExpressionEvaluationOptionsScopeTypeValues() []ExpressionEvaluationOptionsScopeType {
	return original.PossibleExpressionEvaluationOptionsScopeTypeValues()
}
func PossibleOnErrorDeploymentTypeValues() []OnErrorDeploymentType {
	return original.PossibleOnErrorDeploymentTypeValues()
}
func PossiblePropertyChangeTypeValues() []PropertyChangeType {
	return original.PossiblePropertyChangeTypeValues()
}
func PossibleProvisioningOperationValues() []ProvisioningOperation {
	return original.PossibleProvisioningOperationValues()
}
func PossibleProvisioningStateValues() []ProvisioningState {
	return original.PossibleProvisioningStateValues()
}
func PossibleResourceIDentityTypeValues() []ResourceIDentityType {
	return original.PossibleResourceIDentityTypeValues()
}
func PossibleTagsPatchOperationValues() []TagsPatchOperation {
	return original.PossibleTagsPatchOperationValues()
}
func PossibleWhatIfResultFormatValues() []WhatIfResultFormat {
	return original.PossibleWhatIfResultFormatValues()
}
