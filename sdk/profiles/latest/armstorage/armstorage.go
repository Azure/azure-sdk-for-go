// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// This code was generated by a tool.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorage

import (
	original "github.com/Azure/azure-sdk-for-go/sdk/arm/storage/2019-06-01/armstorage"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
)

// AccessTier - Required for storage accounts where kind = BlobStorage. The access tier used for billing.
type AccessTier = original.AccessTier

const (
	AccessTierHot  = original.AccessTierHot
	AccessTierCool = original.AccessTierCool
)

// AccountStatus - Gets the status indicating whether the primary location of the storage account is available or unavailable.
type AccountStatus = original.AccountStatus

const (
	AccountStatusAvailable   = original.AccountStatusAvailable
	AccountStatusUnavailable = original.AccountStatusUnavailable
)

// BlobRestoreProgressStatus - The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete:
// Indicates that blob restore has been completed successfully. - Failed:
// Indicates that blob restore is failed.
type BlobRestoreProgressStatus = original.BlobRestoreProgressStatus

const (
	BlobRestoreProgressStatusComplete   = original.BlobRestoreProgressStatusComplete
	BlobRestoreProgressStatusFailed     = original.BlobRestoreProgressStatusFailed
	BlobRestoreProgressStatusInProgress = original.BlobRestoreProgressStatusInProgress
)

// Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
// (For example, "Logging, Metrics"), or None to bypass none
// of those traffics.
type Bypass = original.Bypass

const (
	BypassAzureServices = original.BypassAzureServices
	BypassLogging       = original.BypassLogging
	BypassMetrics       = original.BypassMetrics
	BypassNone          = original.BypassNone
)

type CorsRuleAllowedMethodsItem = original.CorsRuleAllowedMethodsItem

const (
	CorsRuleAllowedMethodsItemDelete  = original.CorsRuleAllowedMethodsItemDelete
	CorsRuleAllowedMethodsItemGet     = original.CorsRuleAllowedMethodsItemGet
	CorsRuleAllowedMethodsItemHead    = original.CorsRuleAllowedMethodsItemHead
	CorsRuleAllowedMethodsItemMerge   = original.CorsRuleAllowedMethodsItemMerge
	CorsRuleAllowedMethodsItemOptions = original.CorsRuleAllowedMethodsItemOptions
	CorsRuleAllowedMethodsItemPost    = original.CorsRuleAllowedMethodsItemPost
	CorsRuleAllowedMethodsItemPut     = original.CorsRuleAllowedMethodsItemPut
)

// DefaultAction - Specifies the default action of allow or deny when no other rules match.
type DefaultAction = original.DefaultAction

const (
	DefaultActionAllow = original.DefaultActionAllow
	DefaultActionDeny  = original.DefaultActionDeny
)

// DirectoryServiceOptions - Indicates the directory service used.
type DirectoryServiceOptions = original.DirectoryServiceOptions

const (
	DirectoryServiceOptionsAadds = original.DirectoryServiceOptionsAadds
	DirectoryServiceOptionsAd    = original.DirectoryServiceOptionsAd
	DirectoryServiceOptionsNone  = original.DirectoryServiceOptionsNone
)

// EnabledProtocols - The authentication protocol that is used for the file share. Can only be specified when creating a share.
type EnabledProtocols = original.EnabledProtocols

const (
	EnabledProtocolsNfs = original.EnabledProtocolsNfs
	EnabledProtocolsSmb = original.EnabledProtocolsSmb
)

// EncryptionScopeSource - The provider for the encryption scope. Possible values (case-insensitive): Microsoft.Storage, Microsoft.KeyVault.
type EncryptionScopeSource = original.EncryptionScopeSource

const (
	EncryptionScopeSourceMicrosoftKeyVault = original.EncryptionScopeSourceMicrosoftKeyVault
	EncryptionScopeSourceMicrosoftStorage  = original.EncryptionScopeSourceMicrosoftStorage
)

// EncryptionScopeState - The state of the encryption scope. Possible values (case-insensitive): Enabled, Disabled.
type EncryptionScopeState = original.EncryptionScopeState

const (
	EncryptionScopeStateDisabled = original.EncryptionScopeStateDisabled
	EncryptionScopeStateEnabled  = original.EncryptionScopeStateEnabled
)

// GeoReplicationStatus - The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational.
// - Bootstrap: Indicates initial synchronization from the primary
// location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary
// location is temporarily unavailable.
type GeoReplicationStatus = original.GeoReplicationStatus

const (
	GeoReplicationStatusBootstrap   = original.GeoReplicationStatusBootstrap
	GeoReplicationStatusLive        = original.GeoReplicationStatusLive
	GeoReplicationStatusUnavailable = original.GeoReplicationStatusUnavailable
)

// HTTPProtocol - The protocol permitted for a request made with the account SAS.
type HTTPProtocol = original.HTTPProtocol

const (
	HTTPProtocolHTTPsHttp = original.HTTPProtocolHTTPsHttp
	HTTPProtocolHTTPs     = original.HTTPProtocolHTTPs
)

// ImmutabilityPolicyState - The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
type ImmutabilityPolicyState = original.ImmutabilityPolicyState

const (
	ImmutabilityPolicyStateLocked   = original.ImmutabilityPolicyStateLocked
	ImmutabilityPolicyStateUnlocked = original.ImmutabilityPolicyStateUnlocked
)

// ImmutabilityPolicyUpdateType - The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
type ImmutabilityPolicyUpdateType = original.ImmutabilityPolicyUpdateType

const (
	ImmutabilityPolicyUpdateTypeExtend = original.ImmutabilityPolicyUpdateTypeExtend
	ImmutabilityPolicyUpdateTypeLock   = original.ImmutabilityPolicyUpdateTypeLock
	ImmutabilityPolicyUpdateTypePut    = original.ImmutabilityPolicyUpdateTypePut
)

// KeyPermission - Permissions for the key -- read-only or full permissions.
type KeyPermission = original.KeyPermission

const (
	KeyPermissionRead = original.KeyPermissionRead
	KeyPermissionFull = original.KeyPermissionFull
)

// KeySource - The encryption keySource (provider). Possible values (case-insensitive): Microsoft.Storage, Microsoft.Keyvault
type KeySource = original.KeySource

const (
	KeySourceMicrosoftKeyvault = original.KeySourceMicrosoftKeyvault
	KeySourceMicrosoftStorage  = original.KeySourceMicrosoftStorage
)

// KeyType - Encryption key type to be used for the encryption service. 'Account' key type implies that an account-scoped encryption key will be used. 'Service'
// key type implies that a default service key is used.
type KeyType = original.KeyType

const (
	KeyTypeAccount = original.KeyTypeAccount
	KeyTypeService = original.KeyTypeService
)

// Kind - Indicates the type of storage account.
type Kind = original.Kind

const (
	KindBlobStorage      = original.KindBlobStorage
	KindBlockBlobStorage = original.KindBlockBlobStorage
	KindFileStorage      = original.KindFileStorage
	KindStorage          = original.KindStorage
	KindStorageV2        = original.KindStorageV2
)

// LargeFileSharesState - Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
type LargeFileSharesState = original.LargeFileSharesState

const (
	LargeFileSharesStateDisabled = original.LargeFileSharesStateDisabled
	LargeFileSharesStateEnabled  = original.LargeFileSharesStateEnabled
)

// LeaseContainerRequestAction - Specifies the lease action. Can be one of the available actions.
type LeaseContainerRequestAction = original.LeaseContainerRequestAction

const (
	LeaseContainerRequestActionAcquire = original.LeaseContainerRequestActionAcquire
	LeaseContainerRequestActionBreak   = original.LeaseContainerRequestActionBreak
	LeaseContainerRequestActionChange  = original.LeaseContainerRequestActionChange
	LeaseContainerRequestActionRelease = original.LeaseContainerRequestActionRelease
	LeaseContainerRequestActionRenew   = original.LeaseContainerRequestActionRenew
)

// LeaseDuration - Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
type LeaseDuration = original.LeaseDuration

const (
	LeaseDurationFixed    = original.LeaseDurationFixed
	LeaseDurationInfinite = original.LeaseDurationInfinite
)

// LeaseState - Lease state of the container.
type LeaseState = original.LeaseState

const (
	LeaseStateAvailable = original.LeaseStateAvailable
	LeaseStateBreaking  = original.LeaseStateBreaking
	LeaseStateBroken    = original.LeaseStateBroken
	LeaseStateExpired   = original.LeaseStateExpired
	LeaseStateLeased    = original.LeaseStateLeased
)

// LeaseStatus - The lease status of the container.
type LeaseStatus = original.LeaseStatus

const (
	LeaseStatusLocked   = original.LeaseStatusLocked
	LeaseStatusUnlocked = original.LeaseStatusUnlocked
)

type ListContainersInclude = original.ListContainersInclude

const ListContainersIncludeDeleted = original.ListContainersIncludeDeleted

type ManagementPolicyName = original.ManagementPolicyName

const ManagementPolicyNameDefault = original.ManagementPolicyNameDefault

// MinimumTLSVersion - Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
type MinimumTLSVersion = original.MinimumTLSVersion

const (
	MinimumTLSVersionTLS10 = original.MinimumTLSVersionTLS10
	MinimumTLSVersionTLS11 = original.MinimumTLSVersionTLS11
	MinimumTLSVersionTLS12 = original.MinimumTLSVersionTLS12
)

// Permissions - The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update
// (u) and Process (p).
type Permissions = original.Permissions

const (
	PermissionsA = original.PermissionsA
	PermissionsC = original.PermissionsC
	PermissionsD = original.PermissionsD
	PermissionsL = original.PermissionsL
	PermissionsP = original.PermissionsP
	PermissionsR = original.PermissionsR
	PermissionsU = original.PermissionsU
	PermissionsW = original.PermissionsW
)

// PrivateEndpointConnectionProvisioningState - The current provisioning state.
type PrivateEndpointConnectionProvisioningState = original.PrivateEndpointConnectionProvisioningState

const (
	PrivateEndpointConnectionProvisioningStateCreating  = original.PrivateEndpointConnectionProvisioningStateCreating
	PrivateEndpointConnectionProvisioningStateDeleting  = original.PrivateEndpointConnectionProvisioningStateDeleting
	PrivateEndpointConnectionProvisioningStateFailed    = original.PrivateEndpointConnectionProvisioningStateFailed
	PrivateEndpointConnectionProvisioningStateSucceeded = original.PrivateEndpointConnectionProvisioningStateSucceeded
)

// PrivateEndpointServiceConnectionStatus - The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus = original.PrivateEndpointServiceConnectionStatus

const (
	PrivateEndpointServiceConnectionStatusApproved = original.PrivateEndpointServiceConnectionStatusApproved
	PrivateEndpointServiceConnectionStatusPending  = original.PrivateEndpointServiceConnectionStatusPending
	PrivateEndpointServiceConnectionStatusRejected = original.PrivateEndpointServiceConnectionStatusRejected
)

// ProvisioningState - Gets the status of the storage account at the time the operation was called.
type ProvisioningState = original.ProvisioningState

const (
	ProvisioningStateCreating     = original.ProvisioningStateCreating
	ProvisioningStateResolvingDNS = original.ProvisioningStateResolvingDNS
	ProvisioningStateSucceeded    = original.ProvisioningStateSucceeded
)

// PublicAccess - Specifies whether data in the container may be accessed publicly and the level of access.
type PublicAccess = original.PublicAccess

const (
	PublicAccessContainer = original.PublicAccessContainer
	PublicAccessBlob      = original.PublicAccessBlob
	PublicAccessNone      = original.PublicAccessNone
)

// Reason - Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
type Reason = original.Reason

const (
	ReasonAccountNameInvalid = original.ReasonAccountNameInvalid
	ReasonAlreadyExists      = original.ReasonAlreadyExists
)

// ReasonCode - The reason for the restriction. As of now this can be "QuotaId" or "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas
// parameter as the subscription does not belong to that
// quota. The "NotAvailableForSubscription" is related to capacity at DC.
type ReasonCode = original.ReasonCode

const (
	ReasonCodeNotAvailableForSubscription = original.ReasonCodeNotAvailableForSubscription
	ReasonCodeQuotaID                     = original.ReasonCodeQuotaID
)

// RootSquashType - The property is for NFS share only. The default is NoRootSquash.
type RootSquashType = original.RootSquashType

const (
	RootSquashTypeAllSquash    = original.RootSquashTypeAllSquash
	RootSquashTypeNoRootSquash = original.RootSquashTypeNoRootSquash
	RootSquashTypeRootSquash   = original.RootSquashTypeRootSquash
)

// RoutingChoice - Routing Choice defines the kind of network routing opted by the user.
type RoutingChoice = original.RoutingChoice

const (
	RoutingChoiceInternetRouting  = original.RoutingChoiceInternetRouting
	RoutingChoiceMicrosoftRouting = original.RoutingChoiceMicrosoftRouting
)

// RuleType - The valid value is Lifecycle
type RuleType = original.RuleType

const RuleTypeLifecycle = original.RuleTypeLifecycle

// SKUName - The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
type SKUName = original.SKUName

const (
	SKUNamePremiumLrs     = original.SKUNamePremiumLrs
	SKUNamePremiumZrs     = original.SKUNamePremiumZrs
	SKUNameStandardGrs    = original.SKUNameStandardGrs
	SKUNameStandardGzrs   = original.SKUNameStandardGzrs
	SKUNameStandardLrs    = original.SKUNameStandardLrs
	SKUNameStandardRagrs  = original.SKUNameStandardRagrs
	SKUNameStandardRagzrs = original.SKUNameStandardRagzrs
	SKUNameStandardZrs    = original.SKUNameStandardZrs
)

// SKUTier - The SKU tier. This is based on the SKU name.
type SKUTier = original.SKUTier

const (
	SKUTierStandard = original.SKUTierStandard
	SKUTierPremium  = original.SKUTierPremium
)

// Services - The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
type Services = original.Services

const (
	ServicesB = original.ServicesB
	ServicesF = original.ServicesF
	ServicesQ = original.ServicesQ
	ServicesT = original.ServicesT
)

// ShareAccessTier - Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account
// can choose Premium.
type ShareAccessTier = original.ShareAccessTier

const (
	ShareAccessTierCool                 = original.ShareAccessTierCool
	ShareAccessTierHot                  = original.ShareAccessTierHot
	ShareAccessTierPremium              = original.ShareAccessTierPremium
	ShareAccessTierTransactionOptimized = original.ShareAccessTierTransactionOptimized
)

// SignedResource - The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
type SignedResource = original.SignedResource

const (
	SignedResourceB = original.SignedResourceB
	SignedResourceC = original.SignedResourceC
	SignedResourceF = original.SignedResourceF
	SignedResourceS = original.SignedResourceS
)

// SignedResourceTypes - The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access
// to container-level APIs; Object (o): Access to object-level APIs
// for blobs, queue messages, table entities, and files.
type SignedResourceTypes = original.SignedResourceTypes

const (
	SignedResourceTypesC = original.SignedResourceTypesC
	SignedResourceTypesO = original.SignedResourceTypesO
	SignedResourceTypesS = original.SignedResourceTypesS
)

// State - Gets the state of virtual network rule.
type State = original.State

const (
	StateProvisioning         = original.StateProvisioning
	StateDeprovisioning       = original.StateDeprovisioning
	StateSucceeded            = original.StateSucceeded
	StateFailed               = original.StateFailed
	StateNetworkSourceDeleted = original.StateNetworkSourceDeleted
)

type StorageAccountExpand = original.StorageAccountExpand

const (
	StorageAccountExpandGeoReplicationStats = original.StorageAccountExpandGeoReplicationStats
	StorageAccountExpandBlobRestoreStatus   = original.StorageAccountExpandBlobRestoreStatus
)

// UsageUnit - Gets the unit of measurement.
type UsageUnit = original.UsageUnit

const (
	UsageUnitCount           = original.UsageUnitCount
	UsageUnitBytes           = original.UsageUnitBytes
	UsageUnitSeconds         = original.UsageUnitSeconds
	UsageUnitPercent         = original.UsageUnitPercent
	UsageUnitCountsPerSecond = original.UsageUnitCountsPerSecond
	UsageUnitBytesPerSecond  = original.UsageUnitBytesPerSecond
)

// The parameters to list SAS credentials of a storage account.
type AccountSasParameters = original.AccountSasParameters

// Settings properties for Active Directory (AD).
type ActiveDirectoryProperties = original.ActiveDirectoryProperties

// The resource model definition for an Azure Resource Manager resource with an etag.
type AzureEntityResource = original.AzureEntityResource

// Settings for Azure Files identity based authentication.
type AzureFilesIDentityBasedAuthentication = original.AzureFilesIDentityBasedAuthentication

// Properties of the blob container, including Id, resource name, resource type, Etag.
type BlobContainer = original.BlobContainer

// BlobContainerResponse is the response envelope for operations that return a BlobContainer type.
type BlobContainerResponse = original.BlobContainerResponse

// BlobContainersClearLegalHoldOptions contains the optional parameters for the BlobContainers.ClearLegalHold method.
type BlobContainersClearLegalHoldOptions = original.BlobContainersClearLegalHoldOptions

// BlobContainersClient contains the methods for the BlobContainers group.
// Don't use this type directly, use NewBlobContainersClient() instead.
type BlobContainersClient = original.BlobContainersClient

// BlobContainersCreateOptions contains the optional parameters for the BlobContainers.Create method.
type BlobContainersCreateOptions = original.BlobContainersCreateOptions

// BlobContainersCreateOrUpdateImmutabilityPolicyOptions contains the optional parameters for the BlobContainers.CreateOrUpdateImmutabilityPolicy method.
type BlobContainersCreateOrUpdateImmutabilityPolicyOptions = original.BlobContainersCreateOrUpdateImmutabilityPolicyOptions

// BlobContainersDeleteImmutabilityPolicyOptions contains the optional parameters for the BlobContainers.DeleteImmutabilityPolicy method.
type BlobContainersDeleteImmutabilityPolicyOptions = original.BlobContainersDeleteImmutabilityPolicyOptions

// BlobContainersDeleteOptions contains the optional parameters for the BlobContainers.Delete method.
type BlobContainersDeleteOptions = original.BlobContainersDeleteOptions

// BlobContainersExtendImmutabilityPolicyOptions contains the optional parameters for the BlobContainers.ExtendImmutabilityPolicy method.
type BlobContainersExtendImmutabilityPolicyOptions = original.BlobContainersExtendImmutabilityPolicyOptions

// BlobContainersGetImmutabilityPolicyOptions contains the optional parameters for the BlobContainers.GetImmutabilityPolicy method.
type BlobContainersGetImmutabilityPolicyOptions = original.BlobContainersGetImmutabilityPolicyOptions

// BlobContainersGetOptions contains the optional parameters for the BlobContainers.Get method.
type BlobContainersGetOptions = original.BlobContainersGetOptions

// BlobContainersLeaseOptions contains the optional parameters for the BlobContainers.Lease method.
type BlobContainersLeaseOptions = original.BlobContainersLeaseOptions

// BlobContainersListOptions contains the optional parameters for the BlobContainers.List method.
type BlobContainersListOptions = original.BlobContainersListOptions

// BlobContainersLockImmutabilityPolicyOptions contains the optional parameters for the BlobContainers.LockImmutabilityPolicy method.
type BlobContainersLockImmutabilityPolicyOptions = original.BlobContainersLockImmutabilityPolicyOptions

// BlobContainersSetLegalHoldOptions contains the optional parameters for the BlobContainers.SetLegalHold method.
type BlobContainersSetLegalHoldOptions = original.BlobContainersSetLegalHoldOptions

// BlobContainersUpdateOptions contains the optional parameters for the BlobContainers.Update method.
type BlobContainersUpdateOptions = original.BlobContainersUpdateOptions

// Blob restore parameters
type BlobRestoreParameters = original.BlobRestoreParameters

// Blob range
type BlobRestoreRange = original.BlobRestoreRange

// Blob restore status.
type BlobRestoreStatus = original.BlobRestoreStatus

// BlobRestoreStatusPoller provides polling facilities until the operation completes
type BlobRestoreStatusPoller = original.BlobRestoreStatusPoller

// BlobRestoreStatusPollerResponse is the response envelope for operations that asynchronously return a BlobRestoreStatus type.
type BlobRestoreStatusPollerResponse = original.BlobRestoreStatusPollerResponse

// BlobRestoreStatusResponse is the response envelope for operations that return a BlobRestoreStatus type.
type BlobRestoreStatusResponse = original.BlobRestoreStatusResponse
type BlobServiceItems = original.BlobServiceItems

// BlobServiceItemsResponse is the response envelope for operations that return a BlobServiceItems type.
type BlobServiceItemsResponse = original.BlobServiceItemsResponse

// The properties of a storage account’s Blob service.
type BlobServiceProperties = original.BlobServiceProperties

// The properties of a storage account’s Blob service.
type BlobServicePropertiesAutoGenerated = original.BlobServicePropertiesAutoGenerated

// BlobServicePropertiesResponse is the response envelope for operations that return a BlobServiceProperties type.
type BlobServicePropertiesResponse = original.BlobServicePropertiesResponse

// BlobServicesClient contains the methods for the BlobServices group.
// Don't use this type directly, use NewBlobServicesClient() instead.
type BlobServicesClient = original.BlobServicesClient

// BlobServicesGetServicePropertiesOptions contains the optional parameters for the BlobServices.GetServiceProperties method.
type BlobServicesGetServicePropertiesOptions = original.BlobServicesGetServicePropertiesOptions

// BlobServicesListOptions contains the optional parameters for the BlobServices.List method.
type BlobServicesListOptions = original.BlobServicesListOptions

// BlobServicesSetServicePropertiesOptions contains the optional parameters for the BlobServices.SetServiceProperties method.
type BlobServicesSetServicePropertiesOptions = original.BlobServicesSetServicePropertiesOptions

// The blob service properties for change feed events.
type ChangeFeed = original.ChangeFeed

// The CheckNameAvailability operation response.
type CheckNameAvailabilityResult = original.CheckNameAvailabilityResult

// CheckNameAvailabilityResultResponse is the response envelope for operations that return a CheckNameAvailabilityResult type.
type CheckNameAvailabilityResultResponse = original.CheckNameAvailabilityResultResponse

// An error response from the Storage service.
type CloudError = original.CloudError

// An error response from the Storage service.
type CloudErrorBody = original.CloudErrorBody

// The properties of a container.
type ContainerProperties = original.ContainerProperties

// Specifies a CORS rule for the Blob service.
type CorsRule = original.CorsRule

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRules = original.CorsRules

// The custom domain assigned to this storage account. This can be set via Update.
type CustomDomain = original.CustomDomain

// Object to define the number of days after creation.
type DateAfterCreation = original.DateAfterCreation

// Object to define the number of days after last modification.
type DateAfterModification = original.DateAfterModification

// The service properties for soft delete.
type DeleteRetentionPolicy = original.DeleteRetentionPolicy

// The deleted share to be restored.
type DeletedShare = original.DeletedShare

// Dimension of blobs, possibly be blob type or access tier.
type Dimension = original.Dimension

// The encryption settings on the storage account.
type Encryption = original.Encryption

// The Encryption Scope resource.
type EncryptionScope = original.EncryptionScope

// The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
type EncryptionScopeKeyVaultProperties = original.EncryptionScopeKeyVaultProperties

// List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes.
type EncryptionScopeListResult = original.EncryptionScopeListResult

// EncryptionScopeListResultPager provides iteration over EncryptionScopeListResult pages.
type EncryptionScopeListResultPager = original.EncryptionScopeListResultPager

// EncryptionScopeListResultResponse is the response envelope for operations that return a EncryptionScopeListResult type.
type EncryptionScopeListResultResponse = original.EncryptionScopeListResultResponse

// Properties of the encryption scope.
type EncryptionScopeProperties = original.EncryptionScopeProperties

// EncryptionScopeResponse is the response envelope for operations that return a EncryptionScope type.
type EncryptionScopeResponse = original.EncryptionScopeResponse

// EncryptionScopesClient contains the methods for the EncryptionScopes group.
// Don't use this type directly, use NewEncryptionScopesClient() instead.
type EncryptionScopesClient = original.EncryptionScopesClient

// EncryptionScopesGetOptions contains the optional parameters for the EncryptionScopes.Get method.
type EncryptionScopesGetOptions = original.EncryptionScopesGetOptions

// EncryptionScopesListOptions contains the optional parameters for the EncryptionScopes.List method.
type EncryptionScopesListOptions = original.EncryptionScopesListOptions

// EncryptionScopesPatchOptions contains the optional parameters for the EncryptionScopes.Patch method.
type EncryptionScopesPatchOptions = original.EncryptionScopesPatchOptions

// EncryptionScopesPutOptions contains the optional parameters for the EncryptionScopes.Put method.
type EncryptionScopesPutOptions = original.EncryptionScopesPutOptions

// A service that allows server-side encryption to be used.
type EncryptionService = original.EncryptionService

// A list of services that support encryption.
type EncryptionServices = original.EncryptionServices

// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.
type Endpoints = original.Endpoints

// An error response from the storage resource provider.
type ErrorResponse = original.ErrorResponse
type FileServiceItems = original.FileServiceItems

// FileServiceItemsResponse is the response envelope for operations that return a FileServiceItems type.
type FileServiceItemsResponse = original.FileServiceItemsResponse

// The properties of File services in storage account.
type FileServiceProperties = original.FileServiceProperties

// The properties of File services in storage account.
type FileServicePropertiesAutoGenerated = original.FileServicePropertiesAutoGenerated

// FileServicePropertiesResponse is the response envelope for operations that return a FileServiceProperties type.
type FileServicePropertiesResponse = original.FileServicePropertiesResponse

// FileServicesClient contains the methods for the FileServices group.
// Don't use this type directly, use NewFileServicesClient() instead.
type FileServicesClient = original.FileServicesClient

// FileServicesGetServicePropertiesOptions contains the optional parameters for the FileServices.GetServiceProperties method.
type FileServicesGetServicePropertiesOptions = original.FileServicesGetServicePropertiesOptions

// FileServicesListOptions contains the optional parameters for the FileServices.List method.
type FileServicesListOptions = original.FileServicesListOptions

// FileServicesSetServicePropertiesOptions contains the optional parameters for the FileServices.SetServiceProperties method.
type FileServicesSetServicePropertiesOptions = original.FileServicesSetServicePropertiesOptions

// Properties of the file share, including Id, resource name, resource type, Etag.
type FileShare = original.FileShare

// The file share properties be listed out.
type FileShareItem = original.FileShareItem

// Response schema. Contains list of shares returned, and if paging is requested or required, a URL to next page of shares.
type FileShareItems = original.FileShareItems

// FileShareItemsPager provides iteration over FileShareItems pages.
type FileShareItemsPager = original.FileShareItemsPager

// FileShareItemsResponse is the response envelope for operations that return a FileShareItems type.
type FileShareItemsResponse = original.FileShareItemsResponse

// The properties of the file share.
type FileShareProperties = original.FileShareProperties

// FileShareResponse is the response envelope for operations that return a FileShare type.
type FileShareResponse = original.FileShareResponse

// FileSharesClient contains the methods for the FileShares group.
// Don't use this type directly, use NewFileSharesClient() instead.
type FileSharesClient = original.FileSharesClient

// FileSharesCreateOptions contains the optional parameters for the FileShares.Create method.
type FileSharesCreateOptions = original.FileSharesCreateOptions

// FileSharesDeleteOptions contains the optional parameters for the FileShares.Delete method.
type FileSharesDeleteOptions = original.FileSharesDeleteOptions

// FileSharesGetOptions contains the optional parameters for the FileShares.Get method.
type FileSharesGetOptions = original.FileSharesGetOptions

// FileSharesListOptions contains the optional parameters for the FileShares.List method.
type FileSharesListOptions = original.FileSharesListOptions

// FileSharesRestoreOptions contains the optional parameters for the FileShares.Restore method.
type FileSharesRestoreOptions = original.FileSharesRestoreOptions

// FileSharesUpdateOptions contains the optional parameters for the FileShares.Update method.
type FileSharesUpdateOptions = original.FileSharesUpdateOptions

// Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is
// enabled for the storage account.
type GeoReplicationStats = original.GeoReplicationStats

// HTTPPoller provides polling facilities until the operation completes
type HTTPPoller = original.HTTPPoller

// HTTPPollerResponse contains the asynchronous HTTP response from the call to the service endpoint.
type HTTPPollerResponse = original.HTTPPollerResponse

// Identity for the resource.
type IDentity = original.IDentity

// IP rule with specific IP or IP range in CIDR format.
type IPRule = original.IPRule

// The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.
type ImmutabilityPolicy = original.ImmutabilityPolicy

// The properties of an ImmutabilityPolicy of a blob container.
type ImmutabilityPolicyProperties = original.ImmutabilityPolicyProperties

// The properties of an ImmutabilityPolicy of a blob container.
type ImmutabilityPolicyProperty = original.ImmutabilityPolicyProperty

// ImmutabilityPolicyResponse is the response envelope for operations that return a ImmutabilityPolicy type.
type ImmutabilityPolicyResponse = original.ImmutabilityPolicyResponse

// Properties of key vault.
type KeyVaultProperties = original.KeyVaultProperties

// Lease Container request schema.
type LeaseContainerRequest = original.LeaseContainerRequest

// Lease Container response schema.
type LeaseContainerResponse = original.LeaseContainerResponse

// LeaseContainerResponseResponse is the response envelope for operations that return a LeaseContainerResponse type.
type LeaseContainerResponseResponse = original.LeaseContainerResponseResponse

// The LegalHold property of a blob container.
type LegalHold = original.LegalHold

// The LegalHold property of a blob container.
type LegalHoldProperties = original.LegalHoldProperties

// LegalHoldResponse is the response envelope for operations that return a LegalHold type.
type LegalHoldResponse = original.LegalHoldResponse

// The List SAS credentials operation response.
type ListAccountSasResponse = original.ListAccountSasResponse

// ListAccountSasResponseResponse is the response envelope for operations that return a ListAccountSasResponse type.
type ListAccountSasResponseResponse = original.ListAccountSasResponseResponse

// The blob container properties be listed out.
type ListContainerItem = original.ListContainerItem

// Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers.
type ListContainerItems = original.ListContainerItems

// ListContainerItemsPager provides iteration over ListContainerItems pages.
type ListContainerItemsPager = original.ListContainerItemsPager

// ListContainerItemsResponse is the response envelope for operations that return a ListContainerItems type.
type ListContainerItemsResponse = original.ListContainerItemsResponse
type ListQueue = original.ListQueue
type ListQueueProperties = original.ListQueueProperties

// Response schema. Contains list of queues returned
type ListQueueResource = original.ListQueueResource

// ListQueueResourcePager provides iteration over ListQueueResource pages.
type ListQueueResourcePager = original.ListQueueResourcePager

// ListQueueResourceResponse is the response envelope for operations that return a ListQueueResource type.
type ListQueueResourceResponse = original.ListQueueResourceResponse
type ListQueueServices = original.ListQueueServices

// ListQueueServicesResponse is the response envelope for operations that return a ListQueueServices type.
type ListQueueServicesResponse = original.ListQueueServicesResponse

// The List service SAS credentials operation response.
type ListServiceSasResponse = original.ListServiceSasResponse

// ListServiceSasResponseResponse is the response envelope for operations that return a ListServiceSasResponse type.
type ListServiceSasResponseResponse = original.ListServiceSasResponseResponse

// Response schema. Contains list of tables returned
type ListTableResource = original.ListTableResource

// ListTableResourcePager provides iteration over ListTableResource pages.
type ListTableResourcePager = original.ListTableResourcePager

// ListTableResourceResponse is the response envelope for operations that return a ListTableResource type.
type ListTableResourceResponse = original.ListTableResourceResponse
type ListTableServices = original.ListTableServices

// ListTableServicesResponse is the response envelope for operations that return a ListTableServices type.
type ListTableServicesResponse = original.ListTableServicesResponse

// ManagementPoliciesClient contains the methods for the ManagementPolicies group.
// Don't use this type directly, use NewManagementPoliciesClient() instead.
type ManagementPoliciesClient = original.ManagementPoliciesClient

// ManagementPoliciesCreateOrUpdateOptions contains the optional parameters for the ManagementPolicies.CreateOrUpdate method.
type ManagementPoliciesCreateOrUpdateOptions = original.ManagementPoliciesCreateOrUpdateOptions

// ManagementPoliciesDeleteOptions contains the optional parameters for the ManagementPolicies.Delete method.
type ManagementPoliciesDeleteOptions = original.ManagementPoliciesDeleteOptions

// ManagementPoliciesGetOptions contains the optional parameters for the ManagementPolicies.Get method.
type ManagementPoliciesGetOptions = original.ManagementPoliciesGetOptions

// The Get Storage Account ManagementPolicies operation response.
type ManagementPolicy = original.ManagementPolicy

// Actions are applied to the filtered blobs when the execution condition is met.
type ManagementPolicyAction = original.ManagementPolicyAction

// Management policy action for base blob.
type ManagementPolicyBaseBlob = original.ManagementPolicyBaseBlob

// An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.
type ManagementPolicyDefinition = original.ManagementPolicyDefinition

// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.
type ManagementPolicyFilter = original.ManagementPolicyFilter

// The Storage Account ManagementPolicy properties.
type ManagementPolicyProperties = original.ManagementPolicyProperties

// ManagementPolicyResponse is the response envelope for operations that return a ManagementPolicy type.
type ManagementPolicyResponse = original.ManagementPolicyResponse

// An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
type ManagementPolicyRule = original.ManagementPolicyRule

// The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
type ManagementPolicySchema = original.ManagementPolicySchema

// Management policy action for snapshot.
type ManagementPolicySnapShot = original.ManagementPolicySnapShot

// Metric specification of operation.
type MetricSpecification = original.MetricSpecification

// Network rule set
type NetworkRuleSet = original.NetworkRuleSet

// List storage account object replication policies.
type ObjectReplicationPolicies = original.ObjectReplicationPolicies

// ObjectReplicationPoliciesClient contains the methods for the ObjectReplicationPolicies group.
// Don't use this type directly, use NewObjectReplicationPoliciesClient() instead.
type ObjectReplicationPoliciesClient = original.ObjectReplicationPoliciesClient

// ObjectReplicationPoliciesCreateOrUpdateOptions contains the optional parameters for the ObjectReplicationPolicies.CreateOrUpdate method.
type ObjectReplicationPoliciesCreateOrUpdateOptions = original.ObjectReplicationPoliciesCreateOrUpdateOptions

// ObjectReplicationPoliciesDeleteOptions contains the optional parameters for the ObjectReplicationPolicies.Delete method.
type ObjectReplicationPoliciesDeleteOptions = original.ObjectReplicationPoliciesDeleteOptions

// ObjectReplicationPoliciesGetOptions contains the optional parameters for the ObjectReplicationPolicies.Get method.
type ObjectReplicationPoliciesGetOptions = original.ObjectReplicationPoliciesGetOptions

// ObjectReplicationPoliciesListOptions contains the optional parameters for the ObjectReplicationPolicies.List method.
type ObjectReplicationPoliciesListOptions = original.ObjectReplicationPoliciesListOptions

// ObjectReplicationPoliciesResponse is the response envelope for operations that return a ObjectReplicationPolicies type.
type ObjectReplicationPoliciesResponse = original.ObjectReplicationPoliciesResponse

// The replication policy between two storage accounts. Multiple rules can be defined in one policy.
type ObjectReplicationPolicy = original.ObjectReplicationPolicy

// Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are
// defined, a logical AND is performed on all
// filters.
type ObjectReplicationPolicyFilter = original.ObjectReplicationPolicyFilter

// The Storage Account ObjectReplicationPolicy properties.
type ObjectReplicationPolicyProperties = original.ObjectReplicationPolicyProperties

// ObjectReplicationPolicyResponse is the response envelope for operations that return a ObjectReplicationPolicy type.
type ObjectReplicationPolicyResponse = original.ObjectReplicationPolicyResponse

// The replication policy rule between two containers.
type ObjectReplicationPolicyRule = original.ObjectReplicationPolicyRule

// Storage REST API operation definition.
type Operation = original.Operation

// Display metadata associated with the operation.
type OperationDisplay = original.OperationDisplay

// Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult = original.OperationListResult

// OperationListResultResponse is the response envelope for operations that return a OperationListResult type.
type OperationListResultResponse = original.OperationListResultResponse

// Properties of operation, include metric specifications.
type OperationProperties = original.OperationProperties

// OperationsClient contains the methods for the Operations group.
// Don't use this type directly, use NewOperationsClient() instead.
type OperationsClient = original.OperationsClient

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions = original.OperationsListOptions

// The Private Endpoint resource.
type PrivateEndpoint = original.PrivateEndpoint

// The Private Endpoint Connection resource.
type PrivateEndpointConnection = original.PrivateEndpointConnection

// List of private endpoint connection associated with the specified storage account
type PrivateEndpointConnectionListResult = original.PrivateEndpointConnectionListResult

// PrivateEndpointConnectionListResultResponse is the response envelope for operations that return a PrivateEndpointConnectionListResult type.
type PrivateEndpointConnectionListResultResponse = original.PrivateEndpointConnectionListResultResponse

// Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties = original.PrivateEndpointConnectionProperties

// PrivateEndpointConnectionResponse is the response envelope for operations that return a PrivateEndpointConnection type.
type PrivateEndpointConnectionResponse = original.PrivateEndpointConnectionResponse

// PrivateEndpointConnectionsClient contains the methods for the PrivateEndpointConnections group.
// Don't use this type directly, use NewPrivateEndpointConnectionsClient() instead.
type PrivateEndpointConnectionsClient = original.PrivateEndpointConnectionsClient

// PrivateEndpointConnectionsDeleteOptions contains the optional parameters for the PrivateEndpointConnections.Delete method.
type PrivateEndpointConnectionsDeleteOptions = original.PrivateEndpointConnectionsDeleteOptions

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions = original.PrivateEndpointConnectionsGetOptions

// PrivateEndpointConnectionsListOptions contains the optional parameters for the PrivateEndpointConnections.List method.
type PrivateEndpointConnectionsListOptions = original.PrivateEndpointConnectionsListOptions

// PrivateEndpointConnectionsPutOptions contains the optional parameters for the PrivateEndpointConnections.Put method.
type PrivateEndpointConnectionsPutOptions = original.PrivateEndpointConnectionsPutOptions

// A private link resource
type PrivateLinkResource = original.PrivateLinkResource

// A list of private link resources
type PrivateLinkResourceListResult = original.PrivateLinkResourceListResult

// PrivateLinkResourceListResultResponse is the response envelope for operations that return a PrivateLinkResourceListResult type.
type PrivateLinkResourceListResultResponse = original.PrivateLinkResourceListResultResponse

// Properties of a private link resource.
type PrivateLinkResourceProperties = original.PrivateLinkResourceProperties

// PrivateLinkResourcesClient contains the methods for the PrivateLinkResources group.
// Don't use this type directly, use NewPrivateLinkResourcesClient() instead.
type PrivateLinkResourcesClient = original.PrivateLinkResourcesClient

// PrivateLinkResourcesListByStorageAccountOptions contains the optional parameters for the PrivateLinkResources.ListByStorageAccount method.
type PrivateLinkResourcesListByStorageAccountOptions = original.PrivateLinkResourcesListByStorageAccountOptions

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState = original.PrivateLinkServiceConnectionState

// QueueClient contains the methods for the Queue group.
// Don't use this type directly, use NewQueueClient() instead.
type QueueClient = original.QueueClient

// QueueCreateOptions contains the optional parameters for the Queue.Create method.
type QueueCreateOptions = original.QueueCreateOptions

// QueueDeleteOptions contains the optional parameters for the Queue.Delete method.
type QueueDeleteOptions = original.QueueDeleteOptions

// QueueGetOptions contains the optional parameters for the Queue.Get method.
type QueueGetOptions = original.QueueGetOptions

// QueueListOptions contains the optional parameters for the Queue.List method.
type QueueListOptions = original.QueueListOptions
type QueueProperties = original.QueueProperties

// The properties of a storage account’s Queue service.
type QueueServiceProperties = original.QueueServiceProperties

// The properties of a storage account’s Queue service.
type QueueServicePropertiesAutoGenerated = original.QueueServicePropertiesAutoGenerated

// QueueServicePropertiesResponse is the response envelope for operations that return a QueueServiceProperties type.
type QueueServicePropertiesResponse = original.QueueServicePropertiesResponse

// QueueServicesClient contains the methods for the QueueServices group.
// Don't use this type directly, use NewQueueServicesClient() instead.
type QueueServicesClient = original.QueueServicesClient

// QueueServicesGetServicePropertiesOptions contains the optional parameters for the QueueServices.GetServiceProperties method.
type QueueServicesGetServicePropertiesOptions = original.QueueServicesGetServicePropertiesOptions

// QueueServicesListOptions contains the optional parameters for the QueueServices.List method.
type QueueServicesListOptions = original.QueueServicesListOptions

// QueueServicesSetServicePropertiesOptions contains the optional parameters for the QueueServices.SetServiceProperties method.
type QueueServicesSetServicePropertiesOptions = original.QueueServicesSetServicePropertiesOptions

// QueueUpdateOptions contains the optional parameters for the Queue.Update method.
type QueueUpdateOptions = original.QueueUpdateOptions

// Common fields that are returned in the response for all Azure Resource Manager resources
type Resource = original.Resource

// The blob service properties for blob restore policy
type RestorePolicyProperties = original.RestorePolicyProperties

// The restriction because of which SKU cannot be used.
type Restriction = original.Restriction

// Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft
// routing
type RoutingPreference = original.RoutingPreference

// The SKU of the storage account.
type SKU = original.SKU

// The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
type SKUCapability = original.SKUCapability

// Storage SKU and its properties
type SKUInformation = original.SKUInformation

// SKUsClient contains the methods for the SKUs group.
// Don't use this type directly, use NewSKUsClient() instead.
type SKUsClient = original.SKUsClient

// SKUsListOptions contains the optional parameters for the SKUs.List method.
type SKUsListOptions = original.SKUsListOptions

// The parameters to list service SAS credentials of a specific resource.
type ServiceSasParameters = original.ServiceSasParameters

// One property of operation, include metric specifications.
type ServiceSpecification = original.ServiceSpecification

// The storage account.
type StorageAccount = original.StorageAccount

// The parameters used to check the availability of the storage account name.
type StorageAccountCheckNameAvailabilityParameters = original.StorageAccountCheckNameAvailabilityParameters

// The parameters used when creating a storage account.
type StorageAccountCreateParameters = original.StorageAccountCreateParameters

// The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint.
type StorageAccountInternetEndpoints = original.StorageAccountInternetEndpoints

// An access key for the storage account.
type StorageAccountKey = original.StorageAccountKey

// The response from the ListKeys operation.
type StorageAccountListKeysResult = original.StorageAccountListKeysResult

// StorageAccountListKeysResultResponse is the response envelope for operations that return a StorageAccountListKeysResult type.
type StorageAccountListKeysResultResponse = original.StorageAccountListKeysResultResponse

// The response from the List Storage Accounts operation.
type StorageAccountListResult = original.StorageAccountListResult

// StorageAccountListResultPager provides iteration over StorageAccountListResult pages.
type StorageAccountListResultPager = original.StorageAccountListResultPager

// StorageAccountListResultResponse is the response envelope for operations that return a StorageAccountListResult type.
type StorageAccountListResultResponse = original.StorageAccountListResultResponse

// The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint.
type StorageAccountMicrosoftEndpoints = original.StorageAccountMicrosoftEndpoints

// StorageAccountPoller provides polling facilities until the operation completes
type StorageAccountPoller = original.StorageAccountPoller

// StorageAccountPollerResponse is the response envelope for operations that asynchronously return a StorageAccount type.
type StorageAccountPollerResponse = original.StorageAccountPollerResponse

// Properties of the storage account.
type StorageAccountProperties = original.StorageAccountProperties

// The parameters used to create the storage account.
type StorageAccountPropertiesCreateParameters = original.StorageAccountPropertiesCreateParameters

// The parameters used when updating a storage account.
type StorageAccountPropertiesUpdateParameters = original.StorageAccountPropertiesUpdateParameters

// The parameters used to regenerate the storage account key.
type StorageAccountRegenerateKeyParameters = original.StorageAccountRegenerateKeyParameters

// StorageAccountResponse is the response envelope for operations that return a StorageAccount type.
type StorageAccountResponse = original.StorageAccountResponse

// The parameters that can be provided when updating the storage account properties.
type StorageAccountUpdateParameters = original.StorageAccountUpdateParameters

// StorageAccountsBeginCreateOptions contains the optional parameters for the StorageAccounts.BeginCreate method.
type StorageAccountsBeginCreateOptions = original.StorageAccountsBeginCreateOptions

// StorageAccountsBeginFailoverOptions contains the optional parameters for the StorageAccounts.BeginFailover method.
type StorageAccountsBeginFailoverOptions = original.StorageAccountsBeginFailoverOptions

// StorageAccountsBeginRestoreBlobRangesOptions contains the optional parameters for the StorageAccounts.BeginRestoreBlobRanges method.
type StorageAccountsBeginRestoreBlobRangesOptions = original.StorageAccountsBeginRestoreBlobRangesOptions

// StorageAccountsCheckNameAvailabilityOptions contains the optional parameters for the StorageAccounts.CheckNameAvailability method.
type StorageAccountsCheckNameAvailabilityOptions = original.StorageAccountsCheckNameAvailabilityOptions

// StorageAccountsClient contains the methods for the StorageAccounts group.
// Don't use this type directly, use NewStorageAccountsClient() instead.
type StorageAccountsClient = original.StorageAccountsClient

// StorageAccountsDeleteOptions contains the optional parameters for the StorageAccounts.Delete method.
type StorageAccountsDeleteOptions = original.StorageAccountsDeleteOptions

// StorageAccountsGetPropertiesOptions contains the optional parameters for the StorageAccounts.GetProperties method.
type StorageAccountsGetPropertiesOptions = original.StorageAccountsGetPropertiesOptions

// StorageAccountsListAccountSasOptions contains the optional parameters for the StorageAccounts.ListAccountSas method.
type StorageAccountsListAccountSasOptions = original.StorageAccountsListAccountSasOptions

// StorageAccountsListByResourceGroupOptions contains the optional parameters for the StorageAccounts.ListByResourceGroup method.
type StorageAccountsListByResourceGroupOptions = original.StorageAccountsListByResourceGroupOptions

// StorageAccountsListKeysOptions contains the optional parameters for the StorageAccounts.ListKeys method.
type StorageAccountsListKeysOptions = original.StorageAccountsListKeysOptions

// StorageAccountsListOptions contains the optional parameters for the StorageAccounts.List method.
type StorageAccountsListOptions = original.StorageAccountsListOptions

// StorageAccountsListServiceSasOptions contains the optional parameters for the StorageAccounts.ListServiceSas method.
type StorageAccountsListServiceSasOptions = original.StorageAccountsListServiceSasOptions

// StorageAccountsRegenerateKeyOptions contains the optional parameters for the StorageAccounts.RegenerateKey method.
type StorageAccountsRegenerateKeyOptions = original.StorageAccountsRegenerateKeyOptions

// StorageAccountsRevokeUserDelegationKeysOptions contains the optional parameters for the StorageAccounts.RevokeUserDelegationKeys method.
type StorageAccountsRevokeUserDelegationKeysOptions = original.StorageAccountsRevokeUserDelegationKeysOptions

// StorageAccountsUpdateOptions contains the optional parameters for the StorageAccounts.Update method.
type StorageAccountsUpdateOptions = original.StorageAccountsUpdateOptions
type StorageQueue = original.StorageQueue

// StorageQueueResponse is the response envelope for operations that return a StorageQueue type.
type StorageQueueResponse = original.StorageQueueResponse

// The response from the List Storage SKUs operation.
type StorageSKUListResult = original.StorageSKUListResult

// StorageSKUListResultResponse is the response envelope for operations that return a StorageSKUListResult type.
type StorageSKUListResultResponse = original.StorageSKUListResultResponse

// Properties of the table, including Id, resource name, resource type.
type Table = original.Table

// TableClient contains the methods for the Table group.
// Don't use this type directly, use NewTableClient() instead.
type TableClient = original.TableClient

// TableCreateOptions contains the optional parameters for the Table.Create method.
type TableCreateOptions = original.TableCreateOptions

// TableDeleteOptions contains the optional parameters for the Table.Delete method.
type TableDeleteOptions = original.TableDeleteOptions

// TableGetOptions contains the optional parameters for the Table.Get method.
type TableGetOptions = original.TableGetOptions

// TableListOptions contains the optional parameters for the Table.List method.
type TableListOptions = original.TableListOptions
type TableProperties = original.TableProperties

// TableResponse is the response envelope for operations that return a Table type.
type TableResponse = original.TableResponse

// The properties of a storage account’s Table service.
type TableServiceProperties = original.TableServiceProperties

// The properties of a storage account’s Table service.
type TableServicePropertiesAutoGenerated = original.TableServicePropertiesAutoGenerated

// TableServicePropertiesResponse is the response envelope for operations that return a TableServiceProperties type.
type TableServicePropertiesResponse = original.TableServicePropertiesResponse

// TableServicesClient contains the methods for the TableServices group.
// Don't use this type directly, use NewTableServicesClient() instead.
type TableServicesClient = original.TableServicesClient

// TableServicesGetServicePropertiesOptions contains the optional parameters for the TableServices.GetServiceProperties method.
type TableServicesGetServicePropertiesOptions = original.TableServicesGetServicePropertiesOptions

// TableServicesListOptions contains the optional parameters for the TableServices.List method.
type TableServicesListOptions = original.TableServicesListOptions

// TableServicesSetServicePropertiesOptions contains the optional parameters for the TableServices.SetServiceProperties method.
type TableServicesSetServicePropertiesOptions = original.TableServicesSetServicePropertiesOptions

// TableUpdateOptions contains the optional parameters for the Table.Update method.
type TableUpdateOptions = original.TableUpdateOptions

// Blob index tag based filtering for blob objects
type TagFilter = original.TagFilter

// A tag of the LegalHold of a blob container.
type TagProperty = original.TagProperty

// The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource = original.TrackedResource

// An update history of the ImmutabilityPolicy of a blob container.
type UpdateHistoryProperty = original.UpdateHistoryProperty

// Describes Storage Resource Usage.
type Usage = original.Usage

// The response from the List Usages operation.
type UsageListResult = original.UsageListResult

// UsageListResultResponse is the response envelope for operations that return a UsageListResult type.
type UsageListResultResponse = original.UsageListResultResponse

// The usage names that can be used; currently limited to StorageAccount.
type UsageName = original.UsageName

// UsagesClient contains the methods for the Usages group.
// Don't use this type directly, use NewUsagesClient() instead.
type UsagesClient = original.UsagesClient

// UsagesListByLocationOptions contains the optional parameters for the Usages.ListByLocation method.
type UsagesListByLocationOptions = original.UsagesListByLocationOptions

// Virtual Network rule.
type VirtualNetworkRule = original.VirtualNetworkRule

// NewBlobContainersClient creates a new instance of BlobContainersClient with the specified values.
func NewBlobContainersClient(con *armcore.Connection, subscriptionID string) BlobContainersClient {
	return original.NewBlobContainersClient(con, subscriptionID)
}

// NewBlobServicesClient creates a new instance of BlobServicesClient with the specified values.
func NewBlobServicesClient(con *armcore.Connection, subscriptionID string) BlobServicesClient {
	return original.NewBlobServicesClient(con, subscriptionID)
}

// NewEncryptionScopesClient creates a new instance of EncryptionScopesClient with the specified values.
func NewEncryptionScopesClient(con *armcore.Connection, subscriptionID string) EncryptionScopesClient {
	return original.NewEncryptionScopesClient(con, subscriptionID)
}

// NewFileServicesClient creates a new instance of FileServicesClient with the specified values.
func NewFileServicesClient(con *armcore.Connection, subscriptionID string) FileServicesClient {
	return original.NewFileServicesClient(con, subscriptionID)
}

// NewFileSharesClient creates a new instance of FileSharesClient with the specified values.
func NewFileSharesClient(con *armcore.Connection, subscriptionID string) FileSharesClient {
	return original.NewFileSharesClient(con, subscriptionID)
}

// NewManagementPoliciesClient creates a new instance of ManagementPoliciesClient with the specified values.
func NewManagementPoliciesClient(con *armcore.Connection, subscriptionID string) ManagementPoliciesClient {
	return original.NewManagementPoliciesClient(con, subscriptionID)
}

// NewObjectReplicationPoliciesClient creates a new instance of ObjectReplicationPoliciesClient with the specified values.
func NewObjectReplicationPoliciesClient(con *armcore.Connection, subscriptionID string) ObjectReplicationPoliciesClient {
	return original.NewObjectReplicationPoliciesClient(con, subscriptionID)
}

// NewOperationsClient creates a new instance of OperationsClient with the specified values.
func NewOperationsClient(con *armcore.Connection) OperationsClient {
	return original.NewOperationsClient(con)
}

// NewPrivateEndpointConnectionsClient creates a new instance of PrivateEndpointConnectionsClient with the specified values.
func NewPrivateEndpointConnectionsClient(con *armcore.Connection, subscriptionID string) PrivateEndpointConnectionsClient {
	return original.NewPrivateEndpointConnectionsClient(con, subscriptionID)
}

// NewPrivateLinkResourcesClient creates a new instance of PrivateLinkResourcesClient with the specified values.
func NewPrivateLinkResourcesClient(con *armcore.Connection, subscriptionID string) PrivateLinkResourcesClient {
	return original.NewPrivateLinkResourcesClient(con, subscriptionID)
}

// NewQueueClient creates a new instance of QueueClient with the specified values.
func NewQueueClient(con *armcore.Connection, subscriptionID string) QueueClient {
	return original.NewQueueClient(con, subscriptionID)
}

// NewQueueServicesClient creates a new instance of QueueServicesClient with the specified values.
func NewQueueServicesClient(con *armcore.Connection, subscriptionID string) QueueServicesClient {
	return original.NewQueueServicesClient(con, subscriptionID)
}

// NewSKUsClient creates a new instance of SKUsClient with the specified values.
func NewSKUsClient(con *armcore.Connection, subscriptionID string) SKUsClient {
	return original.NewSKUsClient(con, subscriptionID)
}

// NewStorageAccountsClient creates a new instance of StorageAccountsClient with the specified values.
func NewStorageAccountsClient(con *armcore.Connection, subscriptionID string) StorageAccountsClient {
	return original.NewStorageAccountsClient(con, subscriptionID)
}

// NewTableClient creates a new instance of TableClient with the specified values.
func NewTableClient(con *armcore.Connection, subscriptionID string) TableClient {
	return original.NewTableClient(con, subscriptionID)
}

// NewTableServicesClient creates a new instance of TableServicesClient with the specified values.
func NewTableServicesClient(con *armcore.Connection, subscriptionID string) TableServicesClient {
	return original.NewTableServicesClient(con, subscriptionID)
}

// NewUsagesClient creates a new instance of UsagesClient with the specified values.
func NewUsagesClient(con *armcore.Connection, subscriptionID string) UsagesClient {
	return original.NewUsagesClient(con, subscriptionID)
}
func PossibleAccessTierValues() []AccessTier {
	return original.PossibleAccessTierValues()
}
func PossibleAccountStatusValues() []AccountStatus {
	return original.PossibleAccountStatusValues()
}
func PossibleBlobRestoreProgressStatusValues() []BlobRestoreProgressStatus {
	return original.PossibleBlobRestoreProgressStatusValues()
}
func PossibleBypassValues() []Bypass {
	return original.PossibleBypassValues()
}
func PossibleCorsRuleAllowedMethodsItemValues() []CorsRuleAllowedMethodsItem {
	return original.PossibleCorsRuleAllowedMethodsItemValues()
}
func PossibleDefaultActionValues() []DefaultAction {
	return original.PossibleDefaultActionValues()
}
func PossibleDirectoryServiceOptionsValues() []DirectoryServiceOptions {
	return original.PossibleDirectoryServiceOptionsValues()
}
func PossibleEnabledProtocolsValues() []EnabledProtocols {
	return original.PossibleEnabledProtocolsValues()
}
func PossibleEncryptionScopeSourceValues() []EncryptionScopeSource {
	return original.PossibleEncryptionScopeSourceValues()
}
func PossibleEncryptionScopeStateValues() []EncryptionScopeState {
	return original.PossibleEncryptionScopeStateValues()
}
func PossibleGeoReplicationStatusValues() []GeoReplicationStatus {
	return original.PossibleGeoReplicationStatusValues()
}
func PossibleHTTPProtocolValues() []HTTPProtocol {
	return original.PossibleHTTPProtocolValues()
}
func PossibleImmutabilityPolicyStateValues() []ImmutabilityPolicyState {
	return original.PossibleImmutabilityPolicyStateValues()
}
func PossibleImmutabilityPolicyUpdateTypeValues() []ImmutabilityPolicyUpdateType {
	return original.PossibleImmutabilityPolicyUpdateTypeValues()
}
func PossibleKeyPermissionValues() []KeyPermission {
	return original.PossibleKeyPermissionValues()
}
func PossibleKeySourceValues() []KeySource {
	return original.PossibleKeySourceValues()
}
func PossibleKeyTypeValues() []KeyType {
	return original.PossibleKeyTypeValues()
}
func PossibleKindValues() []Kind {
	return original.PossibleKindValues()
}
func PossibleLargeFileSharesStateValues() []LargeFileSharesState {
	return original.PossibleLargeFileSharesStateValues()
}
func PossibleLeaseContainerRequestActionValues() []LeaseContainerRequestAction {
	return original.PossibleLeaseContainerRequestActionValues()
}
func PossibleLeaseDurationValues() []LeaseDuration {
	return original.PossibleLeaseDurationValues()
}
func PossibleLeaseStateValues() []LeaseState {
	return original.PossibleLeaseStateValues()
}
func PossibleLeaseStatusValues() []LeaseStatus {
	return original.PossibleLeaseStatusValues()
}
func PossibleListContainersIncludeValues() []ListContainersInclude {
	return original.PossibleListContainersIncludeValues()
}
func PossibleManagementPolicyNameValues() []ManagementPolicyName {
	return original.PossibleManagementPolicyNameValues()
}
func PossibleMinimumTLSVersionValues() []MinimumTLSVersion {
	return original.PossibleMinimumTLSVersionValues()
}
func PossiblePermissionsValues() []Permissions {
	return original.PossiblePermissionsValues()
}
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return original.PossiblePrivateEndpointConnectionProvisioningStateValues()
}
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return original.PossiblePrivateEndpointServiceConnectionStatusValues()
}
func PossibleProvisioningStateValues() []ProvisioningState {
	return original.PossibleProvisioningStateValues()
}
func PossiblePublicAccessValues() []PublicAccess {
	return original.PossiblePublicAccessValues()
}
func PossibleReasonCodeValues() []ReasonCode {
	return original.PossibleReasonCodeValues()
}
func PossibleReasonValues() []Reason {
	return original.PossibleReasonValues()
}
func PossibleRootSquashTypeValues() []RootSquashType {
	return original.PossibleRootSquashTypeValues()
}
func PossibleRoutingChoiceValues() []RoutingChoice {
	return original.PossibleRoutingChoiceValues()
}
func PossibleRuleTypeValues() []RuleType {
	return original.PossibleRuleTypeValues()
}
func PossibleSKUNameValues() []SKUName {
	return original.PossibleSKUNameValues()
}
func PossibleSKUTierValues() []SKUTier {
	return original.PossibleSKUTierValues()
}
func PossibleServicesValues() []Services {
	return original.PossibleServicesValues()
}
func PossibleShareAccessTierValues() []ShareAccessTier {
	return original.PossibleShareAccessTierValues()
}
func PossibleSignedResourceTypesValues() []SignedResourceTypes {
	return original.PossibleSignedResourceTypesValues()
}
func PossibleSignedResourceValues() []SignedResource {
	return original.PossibleSignedResourceValues()
}
func PossibleStateValues() []State {
	return original.PossibleStateValues()
}
func PossibleStorageAccountExpandValues() []StorageAccountExpand {
	return original.PossibleStorageAccountExpandValues()
}
func PossibleUsageUnitValues() []UsageUnit {
	return original.PossibleUsageUnitValues()
}
