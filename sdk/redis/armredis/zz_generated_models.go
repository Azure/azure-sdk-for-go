//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredis

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// CheckNameAvailabilityParameters - Parameters body to pass for resource name availability check.
type CheckNameAvailabilityParameters struct {
	// REQUIRED; Resource name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Resource type. The only legal value of this property for checking redis cache name availability is 'Microsoft.Cache/redis'.
	Type *string `json:"type,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ExportRDBParameters - Parameters for Redis export operation.
type ExportRDBParameters struct {
	// REQUIRED; Container name to export to.
	Container *string `json:"container,omitempty"`

	// REQUIRED; Prefix to use for exported files.
	Prefix *string `json:"prefix,omitempty"`

	// File format.
	Format *string `json:"format,omitempty"`
}

// FirewallRulesCreateOrUpdateOptions contains the optional parameters for the FirewallRules.CreateOrUpdate method.
type FirewallRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesDeleteOptions contains the optional parameters for the FirewallRules.Delete method.
type FirewallRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesGetOptions contains the optional parameters for the FirewallRules.Get method.
type FirewallRulesGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesListOptions contains the optional parameters for the FirewallRules.List method.
type FirewallRulesListOptions struct {
	// placeholder for future optional parameters
}

// ImportRDBParameters - Parameters for Redis import operation.
type ImportRDBParameters struct {
	// REQUIRED; files to import.
	Files []*string `json:"files,omitempty"`

	// File format.
	Format *string `json:"format,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ImportRDBParameters.
func (i ImportRDBParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "files", i.Files)
	populate(objectMap, "format", i.Format)
	return json.Marshal(objectMap)
}

// LinkedServerBeginCreateOptions contains the optional parameters for the LinkedServer.BeginCreate method.
type LinkedServerBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerDeleteOptions contains the optional parameters for the LinkedServer.Delete method.
type LinkedServerDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerGetOptions contains the optional parameters for the LinkedServer.Get method.
type LinkedServerGetOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerListOptions contains the optional parameters for the LinkedServer.List method.
type LinkedServerListOptions struct {
	// placeholder for future optional parameters
}

// NotificationListResponse - The response of listUpgradeNotifications.
type NotificationListResponse struct {
	// List of all notifications.
	Value []*UpgradeNotification `json:"value,omitempty"`

	// READ-ONLY; Link for next set of notifications.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationListResponse.
func (n NotificationListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// Operation - REST API operation
type Operation struct {
	// The object that describes the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - The object that describes the operation.
type OperationDisplay struct {
	// Friendly name of the operation
	Description *string `json:"description,omitempty"`

	// Operation type: read, write, delete, listKeys/action, etc.
	Operation *string `json:"operation,omitempty"`

	// Friendly name of the resource provider
	Provider *string `json:"provider,omitempty"`

	// Resource type on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results.
type OperationListResult struct {
	// List of operations supported by the resource provider.
	Value []*Operation `json:"value,omitempty"`

	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesCreateOrUpdateOptions contains the optional parameters for the PatchSchedules.CreateOrUpdate method.
type PatchSchedulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesDeleteOptions contains the optional parameters for the PatchSchedules.Delete method.
type PatchSchedulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesGetOptions contains the optional parameters for the PatchSchedules.Get method.
type PatchSchedulesGetOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesListByRedisResourceOptions contains the optional parameters for the PatchSchedules.ListByRedisResource method.
type PatchSchedulesListByRedisResourceOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpoint - The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string `json:"id,omitempty" azure:"ro"`
}

// PrivateEndpointConnection - The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	Resource
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnection.
func (p PrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := p.Resource.marshalInternal()
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionListResult - List of private endpoint connection associated with the specified storage account
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionsBeginPutOptions contains the optional parameters for the PrivateEndpointConnections.BeginPut method.
type PrivateEndpointConnectionsBeginPutOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsDeleteOptions contains the optional parameters for the PrivateEndpointConnections.Delete method.
type PrivateEndpointConnectionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListOptions contains the optional parameters for the PrivateEndpointConnections.List method.
type PrivateEndpointConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	Resource
	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResource.
func (p PrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := p.Resource.marshalInternal()
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource Private link DNS zone name.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty"`

	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesListByRedisCacheOptions contains the optional parameters for the PrivateLinkResources.ListByRedisCache method.
type PrivateLinkResourcesListByRedisCacheOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus `json:"status,omitempty"`
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal() map[string]interface{} {
	objectMap := p.Resource.marshalInternal()
	return objectMap
}

// RedisAccessKeys - Redis cache access keys.
type RedisAccessKeys struct {
	// READ-ONLY; The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey *string `json:"primaryKey,omitempty" azure:"ro"`

	// READ-ONLY; The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey *string `json:"secondaryKey,omitempty" azure:"ro"`
}

// RedisBeginCreateOptions contains the optional parameters for the Redis.BeginCreate method.
type RedisBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// RedisBeginDeleteOptions contains the optional parameters for the Redis.BeginDelete method.
type RedisBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// RedisBeginExportDataOptions contains the optional parameters for the Redis.BeginExportData method.
type RedisBeginExportDataOptions struct {
	// placeholder for future optional parameters
}

// RedisBeginImportDataOptions contains the optional parameters for the Redis.BeginImportData method.
type RedisBeginImportDataOptions struct {
	// placeholder for future optional parameters
}

// RedisCheckNameAvailabilityOptions contains the optional parameters for the Redis.CheckNameAvailability method.
type RedisCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// RedisCommonProperties - Create/Update/Get common properties of the redis cache.
type RedisCommonProperties struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSSLPort *bool `json:"enableNonSslPort,omitempty"`

	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTLSVersion *TLSVersion `json:"minimumTlsVersion,omitempty"`

	// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled',
	// private endpoints are the exclusive access method.
	// Default value is 'Enabled'
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration map[string]*string `json:"redisConfiguration,omitempty"`

	// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerMaster *int32 `json:"replicasPerMaster,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int32 `json:"replicasPerPrimary,omitempty"`

	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int32 `json:"shardCount,omitempty"`

	// A dictionary of tenant settings
	TenantSettings map[string]*string `json:"tenantSettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCommonProperties.
func (r RedisCommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r RedisCommonProperties) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enableNonSslPort", r.EnableNonSSLPort)
	populate(objectMap, "minimumTlsVersion", r.MinimumTLSVersion)
	populate(objectMap, "publicNetworkAccess", r.PublicNetworkAccess)
	populate(objectMap, "redisConfiguration", r.RedisConfiguration)
	populate(objectMap, "redisVersion", r.RedisVersion)
	populate(objectMap, "replicasPerMaster", r.ReplicasPerMaster)
	populate(objectMap, "replicasPerPrimary", r.ReplicasPerPrimary)
	populate(objectMap, "shardCount", r.ShardCount)
	populate(objectMap, "tenantSettings", r.TenantSettings)
	return objectMap
}

// RedisCreateParameters - Parameters supplied to the Create Redis operation.
type RedisCreateParameters struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Redis cache properties.
	Properties *RedisCreateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCreateParameters.
func (r RedisCreateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// RedisCreateProperties - Properties supplied to Create Redis operation.
type RedisCreateProperties struct {
	RedisCommonProperties
	// REQUIRED; The SKU of the Redis cache to deploy.
	SKU *SKU `json:"sku,omitempty"`

	// Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
	StaticIP *string `json:"staticIP,omitempty"`

	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetID *string `json:"subnetId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisCreateProperties.
func (r RedisCreateProperties) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r RedisCreateProperties) marshalInternal() map[string]interface{} {
	objectMap := r.RedisCommonProperties.marshalInternal()
	populate(objectMap, "sku", r.SKU)
	populate(objectMap, "staticIP", r.StaticIP)
	populate(objectMap, "subnetId", r.SubnetID)
	return objectMap
}

// RedisFirewallRule - A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect
type RedisFirewallRule struct {
	ProxyResource
	// REQUIRED; redis cache firewall rule properties
	Properties *RedisFirewallRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisFirewallRule.
func (r RedisFirewallRule) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r RedisFirewallRule) marshalInternal() map[string]interface{} {
	objectMap := r.ProxyResource.marshalInternal()
	populate(objectMap, "properties", r.Properties)
	return objectMap
}

// RedisFirewallRuleCreateParameters - Parameters required for creating a firewall rule on redis cache. (Note, you can just use the FirewallRule type instead
// now.)
type RedisFirewallRuleCreateParameters struct {
	RedisFirewallRule
}

// RedisFirewallRuleListResult - The response of list firewall rules Redis operation.
type RedisFirewallRuleListResult struct {
	// Results of the list firewall rules operation.
	Value []*RedisFirewallRule `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisFirewallRuleListResult.
func (r RedisFirewallRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RedisFirewallRuleProperties - Specifies a range of IP addresses permitted to connect to the cache
type RedisFirewallRuleProperties struct {
	// REQUIRED; highest IP address included in the range
	EndIP *string `json:"endIP,omitempty"`

	// REQUIRED; lowest IP address included in the range
	StartIP *string `json:"startIP,omitempty"`
}

// RedisForceRebootOptions contains the optional parameters for the Redis.ForceReboot method.
type RedisForceRebootOptions struct {
	// placeholder for future optional parameters
}

// RedisForceRebootResponse - Response to force reboot for Redis cache.
type RedisForceRebootResponse struct {
	// READ-ONLY; Status message
	Message *string `json:"message,omitempty" azure:"ro"`
}

// RedisGetOptions contains the optional parameters for the Redis.Get method.
type RedisGetOptions struct {
	// placeholder for future optional parameters
}

// RedisInstanceDetails - Details of single instance of redis.
type RedisInstanceDetails struct {
	// READ-ONLY; Specifies whether the instance is a primary node.
	IsMaster *bool `json:"isMaster,omitempty" azure:"ro"`

	// READ-ONLY; Specifies whether the instance is a primary node.
	IsPrimary *bool `json:"isPrimary,omitempty" azure:"ro"`

	// READ-ONLY; If enableNonSslPort is true, provides Redis instance Non-SSL port.
	NonSSLPort *int32 `json:"nonSslPort,omitempty" azure:"ro"`

	// READ-ONLY; Redis instance SSL port.
	SSLPort *int32 `json:"sslPort,omitempty" azure:"ro"`

	// READ-ONLY; If clustering is enabled, the Shard ID of Redis Instance
	ShardID *int32 `json:"shardId,omitempty" azure:"ro"`

	// READ-ONLY; If the Cache uses availability zones, specifies availability zone where this instance is located.
	Zone *string `json:"zone,omitempty" azure:"ro"`
}

// RedisLinkedServer - Linked server Id
type RedisLinkedServer struct {
	// READ-ONLY; Linked server Id.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// RedisLinkedServerCreateParameters - Parameter required for creating a linked server to redis cache.
type RedisLinkedServerCreateParameters struct {
	// REQUIRED; Properties required to create a linked server.
	Properties *RedisLinkedServerCreateProperties `json:"properties,omitempty"`
}

// RedisLinkedServerCreateProperties - Create properties for a linked server
type RedisLinkedServerCreateProperties struct {
	// REQUIRED; Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheID *string `json:"linkedRedisCacheId,omitempty"`

	// REQUIRED; Location of the linked redis cache.
	LinkedRedisCacheLocation *string `json:"linkedRedisCacheLocation,omitempty"`

	// REQUIRED; Role of the linked server.
	ServerRole *ReplicationRole `json:"serverRole,omitempty"`
}

// RedisLinkedServerProperties - Properties of a linked server to be returned in get/put response
type RedisLinkedServerProperties struct {
	RedisLinkedServerCreateProperties
	// READ-ONLY; Terminal state of the link between primary and secondary redis cache.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// RedisLinkedServerWithProperties - Response to put/get linked server (with properties) for Redis cache.
type RedisLinkedServerWithProperties struct {
	ProxyResource
	// Properties of the linked server.
	Properties *RedisLinkedServerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisLinkedServerWithProperties.
func (r RedisLinkedServerWithProperties) MarshalJSON() ([]byte, error) {
	objectMap := r.ProxyResource.marshalInternal()
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RedisLinkedServerWithPropertiesList - List of linked servers (with properties) of a Redis cache.
type RedisLinkedServerWithPropertiesList struct {
	// List of linked servers (with properties) of a Redis cache.
	Value []*RedisLinkedServerWithProperties `json:"value,omitempty"`

	// READ-ONLY; Link for next set.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisLinkedServerWithPropertiesList.
func (r RedisLinkedServerWithPropertiesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RedisListByResourceGroupOptions contains the optional parameters for the Redis.ListByResourceGroup method.
type RedisListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// RedisListBySubscriptionOptions contains the optional parameters for the Redis.ListBySubscription method.
type RedisListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// RedisListKeysOptions contains the optional parameters for the Redis.ListKeys method.
type RedisListKeysOptions struct {
	// placeholder for future optional parameters
}

// RedisListResult - The response of list Redis operation.
type RedisListResult struct {
	// List of Redis cache instances.
	Value []*RedisResource `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisListResult.
func (r RedisListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RedisListUpgradeNotificationsOptions contains the optional parameters for the Redis.ListUpgradeNotifications method.
type RedisListUpgradeNotificationsOptions struct {
	// placeholder for future optional parameters
}

// RedisPatchSchedule - Response to put/get patch schedules for Redis cache.
type RedisPatchSchedule struct {
	ProxyResource
	// REQUIRED; List of patch schedules for a Redis cache.
	Properties *ScheduleEntries `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisPatchSchedule.
func (r RedisPatchSchedule) MarshalJSON() ([]byte, error) {
	objectMap := r.ProxyResource.marshalInternal()
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RedisPatchScheduleListResult - The response of list patch schedules Redis operation.
type RedisPatchScheduleListResult struct {
	// Results of the list patch schedules operation.
	Value []*RedisPatchSchedule `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisPatchScheduleListResult.
func (r RedisPatchScheduleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RedisProperties - Properties of the redis cache.
type RedisProperties struct {
	RedisCreateProperties
	// READ-ONLY; The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
	AccessKeys *RedisAccessKeys `json:"accessKeys,omitempty" azure:"ro"`

	// READ-ONLY; Redis host name.
	HostName *string `json:"hostName,omitempty" azure:"ro"`

	// READ-ONLY; List of the Redis instances associated with the cache
	Instances []*RedisInstanceDetails `json:"instances,omitempty" azure:"ro"`

	// READ-ONLY; List of the linked servers associated with the cache
	LinkedServers []*RedisLinkedServer `json:"linkedServers,omitempty" azure:"ro"`

	// READ-ONLY; Redis non-SSL port.
	Port *int32 `json:"port,omitempty" azure:"ro"`

	// READ-ONLY; List of private endpoint connection associated with the specified redis cache
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; Redis instance provisioning status.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Redis SSL port.
	SSLPort *int32 `json:"sslPort,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisProperties.
func (r RedisProperties) MarshalJSON() ([]byte, error) {
	objectMap := r.RedisCreateProperties.marshalInternal()
	populate(objectMap, "accessKeys", r.AccessKeys)
	populate(objectMap, "hostName", r.HostName)
	populate(objectMap, "instances", r.Instances)
	populate(objectMap, "linkedServers", r.LinkedServers)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "privateEndpointConnections", r.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "sslPort", r.SSLPort)
	return json.Marshal(objectMap)
}

// RedisRebootParameters - Specifies which Redis node(s) to reboot.
type RedisRebootParameters struct {
	// A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.
	Ports []*int32 `json:"ports,omitempty"`

	// Which Redis node(s) to reboot. Depending on this value data loss is possible.
	RebootType *RebootType `json:"rebootType,omitempty"`

	// If clustering is enabled, the ID of the shard to be rebooted.
	ShardID *int32 `json:"shardId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisRebootParameters.
func (r RedisRebootParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ports", r.Ports)
	populate(objectMap, "rebootType", r.RebootType)
	populate(objectMap, "shardId", r.ShardID)
	return json.Marshal(objectMap)
}

// RedisRegenerateKeyOptions contains the optional parameters for the Redis.RegenerateKey method.
type RedisRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// RedisRegenerateKeyParameters - Specifies which Redis access keys to reset.
type RedisRegenerateKeyParameters struct {
	// REQUIRED; The Redis access key to regenerate.
	KeyType *RedisKeyType `json:"keyType,omitempty"`
}

// RedisResource - A single Redis item in List or Get Operation.
type RedisResource struct {
	TrackedResource
	// REQUIRED; Redis cache properties.
	Properties *RedisProperties `json:"properties,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisResource.
func (r RedisResource) MarshalJSON() ([]byte, error) {
	objectMap := r.TrackedResource.marshalInternal()
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// RedisUpdateOptions contains the optional parameters for the Redis.Update method.
type RedisUpdateOptions struct {
	// placeholder for future optional parameters
}

// RedisUpdateParameters - Parameters supplied to the Update Redis operation.
type RedisUpdateParameters struct {
	// Redis cache properties.
	Properties *RedisUpdateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisUpdateParameters.
func (r RedisUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// RedisUpdateProperties - Patchable properties of the redis cache.
type RedisUpdateProperties struct {
	RedisCommonProperties
	// The SKU of the Redis cache to deploy.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RedisUpdateProperties.
func (r RedisUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := r.RedisCommonProperties.marshalInternal()
	populate(objectMap, "sku", r.SKU)
	return json.Marshal(objectMap)
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := r.marshalInternal()
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal() map[string]interface{} {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
	return objectMap
}

// SKU parameters supplied to the create Redis operation.
type SKU struct {
	// REQUIRED; The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3,
	// 4).
	Capacity *int32 `json:"capacity,omitempty"`

	// REQUIRED; The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family *SKUFamily `json:"family,omitempty"`

	// REQUIRED; The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name *SKUName `json:"name,omitempty"`
}

// ScheduleEntries - List of patch schedules for a Redis cache.
type ScheduleEntries struct {
	// REQUIRED; List of patch schedules for a Redis cache.
	ScheduleEntries []*ScheduleEntry `json:"scheduleEntries,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleEntries.
func (s ScheduleEntries) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "scheduleEntries", s.ScheduleEntries)
	return json.Marshal(objectMap)
}

// ScheduleEntry - Patch schedule entry for a Premium Redis Cache.
type ScheduleEntry struct {
	// REQUIRED; Day of the week when a cache can be patched.
	DayOfWeek *DayOfWeek `json:"dayOfWeek,omitempty"`

	// REQUIRED; Start hour after which cache patching can start.
	StartHourUTC *int32 `json:"startHourUtc,omitempty"`

	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := t.marshalInternal()
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal() map[string]interface{} {
	objectMap := t.Resource.marshalInternal()
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
	return objectMap
}

// UpgradeNotification - Properties of upgrade notification.
type UpgradeNotification struct {
	// READ-ONLY; Name of upgrade notification.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp when upgrade notification occurred.
	Timestamp *time.Time `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; Details about this upgrade notification
	UpsellNotification map[string]*string `json:"upsellNotification,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UpgradeNotification.
func (u UpgradeNotification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", u.Name)
	populate(objectMap, "timestamp", (*timeRFC3339)(u.Timestamp))
	populate(objectMap, "upsellNotification", u.UpsellNotification)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpgradeNotification.
func (u *UpgradeNotification) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, &u.Name)
			delete(rawMsg, key)
		case "timestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.Timestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "upsellNotification":
			err = unpopulate(val, &u.UpsellNotification)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
