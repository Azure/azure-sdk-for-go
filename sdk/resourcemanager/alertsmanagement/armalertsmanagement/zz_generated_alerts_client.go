//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// AlertsClient contains the methods for the Alerts group.
// Don't use this type directly, use NewAlertsClient() instead.
type AlertsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewAlertsClient creates a new instance of AlertsClient with the specified values.
func NewAlertsClient(con *arm.Connection, subscriptionID string) *AlertsClient {
	return &AlertsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// ChangeState - Change the state of an alert.
// If the operation fails it returns the *ErrorResponseAutoGenerated error type.
func (client *AlertsClient) ChangeState(ctx context.Context, alertID string, newState AlertState, options *AlertsChangeStateOptions) (AlertsChangeStateResponse, error) {
	req, err := client.changeStateCreateRequest(ctx, alertID, newState, options)
	if err != nil {
		return AlertsChangeStateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsChangeStateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsChangeStateResponse{}, client.changeStateHandleError(resp)
	}
	return client.changeStateHandleResponse(resp)
}

// changeStateCreateRequest creates the ChangeState request.
func (client *AlertsClient) changeStateCreateRequest(ctx context.Context, alertID string, newState AlertState, options *AlertsChangeStateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if alertID == "" {
		return nil, errors.New("parameter alertID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertId}", url.PathEscape(alertID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	reqQP.Set("newState", string(newState))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// changeStateHandleResponse handles the ChangeState response.
func (client *AlertsClient) changeStateHandleResponse(resp *http.Response) (AlertsChangeStateResponse, error) {
	result := AlertsChangeStateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsChangeStateResponse{}, err
	}
	return result, nil
}

// changeStateHandleError handles the ChangeState error response.
func (client *AlertsClient) changeStateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAll - List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted
// on the basis specific fields, with the default being
// lastModifiedDateTime.
// If the operation fails it returns the *ErrorResponseAutoGenerated error type.
func (client *AlertsClient) GetAll(options *AlertsGetAllOptions) *AlertsGetAllPager {
	return &AlertsGetAllPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getAllCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AlertsGetAllResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertsList.NextLink)
		},
	}
}

// getAllCreateRequest creates the GetAll request.
func (client *AlertsClient) getAllCreateRequest(ctx context.Context, options *AlertsGetAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.TargetResource != nil {
		reqQP.Set("targetResource", *options.TargetResource)
	}
	if options != nil && options.TargetResourceType != nil {
		reqQP.Set("targetResourceType", *options.TargetResourceType)
	}
	if options != nil && options.TargetResourceGroup != nil {
		reqQP.Set("targetResourceGroup", *options.TargetResourceGroup)
	}
	if options != nil && options.MonitorService != nil {
		reqQP.Set("monitorService", string(*options.MonitorService))
	}
	if options != nil && options.MonitorCondition != nil {
		reqQP.Set("monitorCondition", string(*options.MonitorCondition))
	}
	if options != nil && options.Severity != nil {
		reqQP.Set("severity", string(*options.Severity))
	}
	if options != nil && options.AlertState != nil {
		reqQP.Set("alertState", string(*options.AlertState))
	}
	if options != nil && options.AlertRule != nil {
		reqQP.Set("alertRule", *options.AlertRule)
	}
	if options != nil && options.SmartGroupID != nil {
		reqQP.Set("smartGroupId", *options.SmartGroupID)
	}
	if options != nil && options.IncludeContext != nil {
		reqQP.Set("includeContext", strconv.FormatBool(*options.IncludeContext))
	}
	if options != nil && options.IncludeEgressConfig != nil {
		reqQP.Set("includeEgressConfig", strconv.FormatBool(*options.IncludeEgressConfig))
	}
	if options != nil && options.PageCount != nil {
		reqQP.Set("pageCount", strconv.FormatInt(int64(*options.PageCount), 10))
	}
	if options != nil && options.SortBy != nil {
		reqQP.Set("sortBy", string(*options.SortBy))
	}
	if options != nil && options.SortOrder != nil {
		reqQP.Set("sortOrder", string(*options.SortOrder))
	}
	if options != nil && options.Select != nil {
		reqQP.Set("select", *options.Select)
	}
	if options != nil && options.TimeRange != nil {
		reqQP.Set("timeRange", string(*options.TimeRange))
	}
	if options != nil && options.CustomTimeRange != nil {
		reqQP.Set("customTimeRange", *options.CustomTimeRange)
	}
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAllHandleResponse handles the GetAll response.
func (client *AlertsClient) getAllHandleResponse(resp *http.Response) (AlertsGetAllResponse, error) {
	result := AlertsGetAllResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertsList); err != nil {
		return AlertsGetAllResponse{}, err
	}
	return result, nil
}

// getAllHandleError handles the GetAll error response.
func (client *AlertsClient) getAllHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByID - Get information related to a specific alert
// If the operation fails it returns the *ErrorResponseAutoGenerated error type.
func (client *AlertsClient) GetByID(ctx context.Context, alertID string, options *AlertsGetByIDOptions) (AlertsGetByIDResponse, error) {
	req, err := client.getByIDCreateRequest(ctx, alertID, options)
	if err != nil {
		return AlertsGetByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsGetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsGetByIDResponse{}, client.getByIDHandleError(resp)
	}
	return client.getByIDHandleResponse(resp)
}

// getByIDCreateRequest creates the GetByID request.
func (client *AlertsClient) getByIDCreateRequest(ctx context.Context, alertID string, options *AlertsGetByIDOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if alertID == "" {
		return nil, errors.New("parameter alertID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertId}", url.PathEscape(alertID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByIDHandleResponse handles the GetByID response.
func (client *AlertsClient) getByIDHandleResponse(resp *http.Response) (AlertsGetByIDResponse, error) {
	result := AlertsGetByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsGetByIDResponse{}, err
	}
	return result, nil
}

// getByIDHandleError handles the GetByID error response.
func (client *AlertsClient) getByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetHistory - Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
// If the operation fails it returns the *ErrorResponseAutoGenerated error type.
func (client *AlertsClient) GetHistory(ctx context.Context, alertID string, options *AlertsGetHistoryOptions) (AlertsGetHistoryResponse, error) {
	req, err := client.getHistoryCreateRequest(ctx, alertID, options)
	if err != nil {
		return AlertsGetHistoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsGetHistoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsGetHistoryResponse{}, client.getHistoryHandleError(resp)
	}
	return client.getHistoryHandleResponse(resp)
}

// getHistoryCreateRequest creates the GetHistory request.
func (client *AlertsClient) getHistoryCreateRequest(ctx context.Context, alertID string, options *AlertsGetHistoryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if alertID == "" {
		return nil, errors.New("parameter alertID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertId}", url.PathEscape(alertID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHistoryHandleResponse handles the GetHistory response.
func (client *AlertsClient) getHistoryHandleResponse(resp *http.Response) (AlertsGetHistoryResponse, error) {
	result := AlertsGetHistoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertModification); err != nil {
		return AlertsGetHistoryResponse{}, err
	}
	return result, nil
}

// getHistoryHandleError handles the GetHistory error response.
func (client *AlertsClient) getHistoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetSummary - Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
// If the operation fails it returns the *ErrorResponseAutoGenerated error type.
func (client *AlertsClient) GetSummary(ctx context.Context, groupby AlertsSummaryGroupByFields, options *AlertsGetSummaryOptions) (AlertsGetSummaryResponse, error) {
	req, err := client.getSummaryCreateRequest(ctx, groupby, options)
	if err != nil {
		return AlertsGetSummaryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsGetSummaryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsGetSummaryResponse{}, client.getSummaryHandleError(resp)
	}
	return client.getSummaryHandleResponse(resp)
}

// getSummaryCreateRequest creates the GetSummary request.
func (client *AlertsClient) getSummaryCreateRequest(ctx context.Context, groupby AlertsSummaryGroupByFields, options *AlertsGetSummaryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("groupby", string(groupby))
	if options != nil && options.IncludeSmartGroupsCount != nil {
		reqQP.Set("includeSmartGroupsCount", strconv.FormatBool(*options.IncludeSmartGroupsCount))
	}
	if options != nil && options.TargetResource != nil {
		reqQP.Set("targetResource", *options.TargetResource)
	}
	if options != nil && options.TargetResourceType != nil {
		reqQP.Set("targetResourceType", *options.TargetResourceType)
	}
	if options != nil && options.TargetResourceGroup != nil {
		reqQP.Set("targetResourceGroup", *options.TargetResourceGroup)
	}
	if options != nil && options.MonitorService != nil {
		reqQP.Set("monitorService", string(*options.MonitorService))
	}
	if options != nil && options.MonitorCondition != nil {
		reqQP.Set("monitorCondition", string(*options.MonitorCondition))
	}
	if options != nil && options.Severity != nil {
		reqQP.Set("severity", string(*options.Severity))
	}
	if options != nil && options.AlertState != nil {
		reqQP.Set("alertState", string(*options.AlertState))
	}
	if options != nil && options.AlertRule != nil {
		reqQP.Set("alertRule", *options.AlertRule)
	}
	if options != nil && options.TimeRange != nil {
		reqQP.Set("timeRange", string(*options.TimeRange))
	}
	if options != nil && options.CustomTimeRange != nil {
		reqQP.Set("customTimeRange", *options.CustomTimeRange)
	}
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSummaryHandleResponse handles the GetSummary response.
func (client *AlertsClient) getSummaryHandleResponse(resp *http.Response) (AlertsGetSummaryResponse, error) {
	result := AlertsGetSummaryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertsSummary); err != nil {
		return AlertsGetSummaryResponse{}, err
	}
	return result, nil
}

// getSummaryHandleError handles the GetSummary error response.
func (client *AlertsClient) getSummaryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// MetaData - List alerts meta data information based on value of identifier parameter.
// If the operation fails it returns a generic error.
func (client *AlertsClient) MetaData(ctx context.Context, identifier Identifier, options *AlertsMetaDataOptions) (AlertsMetaDataResponse, error) {
	req, err := client.metaDataCreateRequest(ctx, identifier, options)
	if err != nil {
		return AlertsMetaDataResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsMetaDataResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsMetaDataResponse{}, client.metaDataHandleError(resp)
	}
	return client.metaDataHandleResponse(resp)
}

// metaDataCreateRequest creates the MetaData request.
func (client *AlertsClient) metaDataCreateRequest(ctx context.Context, identifier Identifier, options *AlertsMetaDataOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.AlertsManagement/alertsMetaData"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	reqQP.Set("identifier", string(identifier))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// metaDataHandleResponse handles the MetaData response.
func (client *AlertsClient) metaDataHandleResponse(resp *http.Response) (AlertsMetaDataResponse, error) {
	result := AlertsMetaDataResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertsMetaData); err != nil {
		return AlertsMetaDataResponse{}, err
	}
	return result, nil
}

// metaDataHandleError handles the MetaData error response.
func (client *AlertsClient) metaDataHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
