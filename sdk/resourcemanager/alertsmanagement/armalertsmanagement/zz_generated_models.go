//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// ActionClassification provides polymorphic access to related types.
// Call the interface's GetAction() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Action, *AddActionGroups, *RemoveAllActionGroups
type ActionClassification interface {
	// GetAction returns the Action content of the underlying type.
	GetAction() *Action
}

// Action to be applied.
type Action struct {
	// REQUIRED; Action that should be applied.
	ActionType *ActionType `json:"actionType,omitempty"`
}

// GetAction implements the ActionClassification interface for type Action.
func (a *Action) GetAction() *Action { return a }

// AddActionGroups - Add action groups to alert processing rule.
type AddActionGroups struct {
	// REQUIRED; List of action group Ids to add to alert processing rule.
	ActionGroupIDs []*string `json:"actionGroupIds,omitempty"`

	// REQUIRED; Action that should be applied.
	ActionType *ActionType `json:"actionType,omitempty"`
}

// GetAction implements the ActionClassification interface for type AddActionGroups.
func (a *AddActionGroups) GetAction() *Action {
	return &Action{
		ActionType: a.ActionType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AddActionGroups.
func (a AddActionGroups) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionGroupIds", a.ActionGroupIDs)
	objectMap["actionType"] = ActionTypeAddActionGroups
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddActionGroups.
func (a *AddActionGroups) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionGroupIds":
			err = unpopulate(val, &a.ActionGroupIDs)
			delete(rawMsg, key)
		case "actionType":
			err = unpopulate(val, &a.ActionType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Alert - An alert created in alert management service.
type Alert struct {
	// Alert property bag
	Properties *AlertProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AlertModification - Alert Modification details
type AlertModification struct {
	// Properties of the alert modification item.
	Properties *AlertModificationProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AlertModificationItem - Alert modification item.
type AlertModificationItem struct {
	// Modification comments
	Comments *string `json:"comments,omitempty"`

	// Description of the modification
	Description *string `json:"description,omitempty"`

	// Reason for the modification
	ModificationEvent *AlertModificationEvent `json:"modificationEvent,omitempty"`

	// Modified date and time
	ModifiedAt *string `json:"modifiedAt,omitempty"`

	// Modified user details (Principal client name)
	ModifiedBy *string `json:"modifiedBy,omitempty"`

	// New value
	NewValue *string `json:"newValue,omitempty"`

	// Old value
	OldValue *string `json:"oldValue,omitempty"`
}

// AlertModificationProperties - Properties of the alert modification item.
type AlertModificationProperties struct {
	// Modification details
	Modifications []*AlertModificationItem `json:"modifications,omitempty"`

	// READ-ONLY; Unique Id of the alert for which the history is being retrieved
	AlertID *string `json:"alertId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertModificationProperties.
func (a AlertModificationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertId", a.AlertID)
	populate(objectMap, "modifications", a.Modifications)
	return json.Marshal(objectMap)
}

// AlertProcessingRule - Alert processing rule object containing target scopes, conditions and scheduling logic.
type AlertProcessingRule struct {
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Alert processing rule properties.
	Properties *AlertProcessingRuleProperties `json:"properties,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Alert processing rule system data.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertProcessingRule.
func (a AlertProcessingRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// AlertProcessingRuleProperties - Alert processing rule properties defining scopes, conditions and scheduling logic for alert
// processing rule.
type AlertProcessingRuleProperties struct {
	// REQUIRED; Actions to be applied.
	Actions []ActionClassification `json:"actions,omitempty"`

	// REQUIRED; Scopes on which alert processing rule will apply.
	Scopes []*string `json:"scopes,omitempty"`

	// Conditions on which alerts will be filtered.
	Conditions []*Condition `json:"conditions,omitempty"`

	// Description of alert processing rule.
	Description *string `json:"description,omitempty"`

	// Indicates if the given alert processing rule is enabled or disabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Scheduling for alert processing rule.
	Schedule *Schedule `json:"schedule,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertProcessingRuleProperties.
func (a AlertProcessingRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", a.Actions)
	populate(objectMap, "conditions", a.Conditions)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "enabled", a.Enabled)
	populate(objectMap, "schedule", a.Schedule)
	populate(objectMap, "scopes", a.Scopes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AlertProcessingRuleProperties.
func (a *AlertProcessingRuleProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			a.Actions, err = unmarshalActionClassificationArray(val)
			delete(rawMsg, key)
		case "conditions":
			err = unpopulate(val, &a.Conditions)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &a.Enabled)
			delete(rawMsg, key)
		case "schedule":
			err = unpopulate(val, &a.Schedule)
			delete(rawMsg, key)
		case "scopes":
			err = unpopulate(val, &a.Scopes)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AlertProcessingRulesClientCreateOrUpdateOptions contains the optional parameters for the AlertProcessingRulesClient.CreateOrUpdate
// method.
type AlertProcessingRulesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesClientDeleteOptions contains the optional parameters for the AlertProcessingRulesClient.Delete method.
type AlertProcessingRulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesClientGetByNameOptions contains the optional parameters for the AlertProcessingRulesClient.GetByName
// method.
type AlertProcessingRulesClientGetByNameOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesClientListByResourceGroupOptions contains the optional parameters for the AlertProcessingRulesClient.ListByResourceGroup
// method.
type AlertProcessingRulesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesClientListBySubscriptionOptions contains the optional parameters for the AlertProcessingRulesClient.ListBySubscription
// method.
type AlertProcessingRulesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesClientUpdateOptions contains the optional parameters for the AlertProcessingRulesClient.Update method.
type AlertProcessingRulesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AlertProcessingRulesList - List of alert processing rules.
type AlertProcessingRulesList struct {
	// URL to fetch the next set of alert processing rules.
	NextLink *string `json:"nextLink,omitempty"`

	// List of alert processing rules.
	Value []*AlertProcessingRule `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertProcessingRulesList.
func (a AlertProcessingRulesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AlertProperties - Alert property bag
type AlertProperties struct {
	// This object contains consistent fields across different monitor services.
	Essentials *Essentials `json:"essentials,omitempty"`

	// READ-ONLY; Any object
	Context map[string]interface{} `json:"context,omitempty" azure:"ro"`

	// READ-ONLY; Any object
	EgressConfig map[string]interface{} `json:"egressConfig,omitempty" azure:"ro"`
}

// AlertsClientChangeStateOptions contains the optional parameters for the AlertsClient.ChangeState method.
type AlertsClientChangeStateOptions struct {
	// placeholder for future optional parameters
}

// AlertsClientGetAllOptions contains the optional parameters for the AlertsClient.GetAll method.
type AlertsClientGetAllOptions struct {
	// Filter by specific alert rule. Default value is to select all.
	AlertRule *string
	// Filter by state of the alert instance. Default value is to select all.
	AlertState *AlertState
	// Filter by custom time range in the format / where time is in (ISO-8601 format)'. Permissible values is within 30 days from
	// query time. Either timeRange or customTimeRange could be used but not both.
	// Default is none.
	CustomTimeRange *string
	// Include context which has contextual data specific to the monitor service. Default value is false'
	IncludeContext *bool
	// Include egress config which would be used for displaying the content in portal. Default value is 'false'.
	IncludeEgressConfig *bool
	// Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
	MonitorCondition *MonitorCondition
	// Filter by monitor service which generates the alert instance. Default value is select all.
	MonitorService *MonitorService
	// Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"
	// filter is selected, maximum value allowed is 25. Default value is 25.
	PageCount *int64
	// This filter allows to selection of the fields(comma separated) which would be part of the essential section. This would
	// allow to project only the required fields rather than getting entire content.
	// Default is to fetch all the fields in the essentials section.
	Select *string
	// Filter by severity. Default value is select all.
	Severity *Severity
	// Filter the alerts list by the Smart Group Id. Default value is none.
	SmartGroupID *string
	// Sort the query results by input field, Default value is 'lastModifiedDateTime'.
	SortBy *AlertsSortByFields
	// Sort the query results order in either ascending or descending. Default value is 'desc' for time fields and 'asc' for others.
	SortOrder *SortOrder
	// Filter by target resource( which is full ARM ID) Default value is select all.
	TargetResource *string
	// Filter by target resource group name. Default value is select all.
	TargetResourceGroup *string
	// Filter by target resource type. Default value is select all.
	TargetResourceType *string
	// Filter by time range by below listed values. Default value is 1 day.
	TimeRange *TimeRange
}

// AlertsClientGetByIDOptions contains the optional parameters for the AlertsClient.GetByID method.
type AlertsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AlertsClientGetHistoryOptions contains the optional parameters for the AlertsClient.GetHistory method.
type AlertsClientGetHistoryOptions struct {
	// placeholder for future optional parameters
}

// AlertsClientGetSummaryOptions contains the optional parameters for the AlertsClient.GetSummary method.
type AlertsClientGetSummaryOptions struct {
	// Filter by specific alert rule. Default value is to select all.
	AlertRule *string
	// Filter by state of the alert instance. Default value is to select all.
	AlertState *AlertState
	// Filter by custom time range in the format / where time is in (ISO-8601 format)'. Permissible values is within 30 days from
	// query time. Either timeRange or customTimeRange could be used but not both.
	// Default is none.
	CustomTimeRange *string
	// Include count of the SmartGroups as part of the summary. Default value is 'false'.
	IncludeSmartGroupsCount *bool
	// Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
	MonitorCondition *MonitorCondition
	// Filter by monitor service which generates the alert instance. Default value is select all.
	MonitorService *MonitorService
	// Filter by severity. Default value is select all.
	Severity *Severity
	// Filter by target resource( which is full ARM ID) Default value is select all.
	TargetResource *string
	// Filter by target resource group name. Default value is select all.
	TargetResourceGroup *string
	// Filter by target resource type. Default value is select all.
	TargetResourceType *string
	// Filter by time range by below listed values. Default value is 1 day.
	TimeRange *TimeRange
}

// AlertsClientMetaDataOptions contains the optional parameters for the AlertsClient.MetaData method.
type AlertsClientMetaDataOptions struct {
	// placeholder for future optional parameters
}

// AlertsList - List the alerts.
type AlertsList struct {
	// URL to fetch the next set of alerts.
	NextLink *string `json:"nextLink,omitempty"`

	// List of alerts
	Value []*Alert `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertsList.
func (a AlertsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AlertsMetaData - alert meta data information.
type AlertsMetaData struct {
	// alert meta data property bag
	Properties AlertsMetaDataPropertiesClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertsMetaData.
func (a AlertsMetaData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AlertsMetaData.
func (a *AlertsMetaData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			a.Properties, err = unmarshalAlertsMetaDataPropertiesClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AlertsMetaDataPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetAlertsMetaDataProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AlertsMetaDataProperties, *MonitorServiceList
type AlertsMetaDataPropertiesClassification interface {
	// GetAlertsMetaDataProperties returns the AlertsMetaDataProperties content of the underlying type.
	GetAlertsMetaDataProperties() *AlertsMetaDataProperties
}

// AlertsMetaDataProperties - alert meta data property bag
type AlertsMetaDataProperties struct {
	// REQUIRED; Identification of the information to be retrieved by API call
	MetadataIdentifier *MetadataIdentifier `json:"metadataIdentifier,omitempty"`
}

// GetAlertsMetaDataProperties implements the AlertsMetaDataPropertiesClassification interface for type AlertsMetaDataProperties.
func (a *AlertsMetaDataProperties) GetAlertsMetaDataProperties() *AlertsMetaDataProperties { return a }

// AlertsSummary - Summary of alerts based on the input filters and 'groupby' parameters.
type AlertsSummary struct {
	// Group the result set.
	Properties *AlertsSummaryGroup `json:"properties,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AlertsSummaryGroup - Group the result set.
type AlertsSummaryGroup struct {
	// Name of the field aggregated
	Groupedby *string `json:"groupedby,omitempty"`

	// Total count of the smart groups.
	SmartGroupsCount *int64 `json:"smartGroupsCount,omitempty"`

	// Total count of the result set.
	Total *int64 `json:"total,omitempty"`

	// List of the items
	Values []*AlertsSummaryGroupItem `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertsSummaryGroup.
func (a AlertsSummaryGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupedby", a.Groupedby)
	populate(objectMap, "smartGroupsCount", a.SmartGroupsCount)
	populate(objectMap, "total", a.Total)
	populate(objectMap, "values", a.Values)
	return json.Marshal(objectMap)
}

// AlertsSummaryGroupItem - Alerts summary group item
type AlertsSummaryGroupItem struct {
	// Count of the aggregated field
	Count *int64 `json:"count,omitempty"`

	// Name of the field aggregated
	Groupedby *string `json:"groupedby,omitempty"`

	// Value of the aggregated field
	Name *string `json:"name,omitempty"`

	// List of the items
	Values []*AlertsSummaryGroupItem `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertsSummaryGroupItem.
func (a AlertsSummaryGroupItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "count", a.Count)
	populate(objectMap, "groupedby", a.Groupedby)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "values", a.Values)
	return json.Marshal(objectMap)
}

// Condition to trigger an alert processing rule.
type Condition struct {
	// Field for a given condition.
	Field *Field `json:"field,omitempty"`

	// Operator for a given condition.
	Operator *Operator `json:"operator,omitempty"`

	// List of values to match for a given condition.
	Values []*string `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Condition.
func (c Condition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "field", c.Field)
	populate(objectMap, "operator", c.Operator)
	populate(objectMap, "values", c.Values)
	return json.Marshal(objectMap)
}

// DailyRecurrence - Daily recurrence object.
type DailyRecurrence struct {
	// REQUIRED; Specifies when the recurrence should be applied.
	RecurrenceType *RecurrenceType `json:"recurrenceType,omitempty"`

	// End time for recurrence.
	EndTime *string `json:"endTime,omitempty"`

	// Start time for recurrence.
	StartTime *string `json:"startTime,omitempty"`
}

// GetRecurrence implements the RecurrenceClassification interface for type DailyRecurrence.
func (d *DailyRecurrence) GetRecurrence() *Recurrence {
	return &Recurrence{
		RecurrenceType: d.RecurrenceType,
		StartTime:      d.StartTime,
		EndTime:        d.EndTime,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DailyRecurrence.
func (d DailyRecurrence) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", d.EndTime)
	objectMap["recurrenceType"] = RecurrenceTypeDaily
	populate(objectMap, "startTime", d.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DailyRecurrence.
func (d *DailyRecurrence) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulate(val, &d.EndTime)
			delete(rawMsg, key)
		case "recurrenceType":
			err = unpopulate(val, &d.RecurrenceType)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulate(val, &d.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ErrorResponse - An error response from the service.
type ErrorResponse struct {
	// Details of error response.
	Error *ErrorResponseBody `json:"error,omitempty"`
}

// ErrorResponseAutoGenerated - An error response from the service.
type ErrorResponseAutoGenerated struct {
	// Details of error response.
	Error *ErrorResponseBodyAutoGenerated `json:"error,omitempty"`
}

// ErrorResponseAutoGenerated2 - An error response from the service.
type ErrorResponseAutoGenerated2 struct {
	// Details of error response.
	Error *ErrorResponseBodyAutoGenerated2 `json:"error,omitempty"`
}

// ErrorResponseBody - Details of error response.
type ErrorResponseBody struct {
	// Error code, intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*ErrorResponseBody `json:"details,omitempty"`

	// Description of the error, intended for display in user interface.
	Message *string `json:"message,omitempty"`

	// Target of the particular error, for example name of the property.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponseBody.
func (e ErrorResponseBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponseBodyAutoGenerated - Details of error response.
type ErrorResponseBodyAutoGenerated struct {
	// Error code, intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*ErrorResponseBodyAutoGenerated `json:"details,omitempty"`

	// Description of the error, intended for display in user interface.
	Message *string `json:"message,omitempty"`

	// Target of the particular error, for example name of the property.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponseBodyAutoGenerated.
func (e ErrorResponseBodyAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponseBodyAutoGenerated2 - Details of error response.
type ErrorResponseBodyAutoGenerated2 struct {
	// Error code, intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*ErrorResponseBodyAutoGenerated2 `json:"details,omitempty"`

	// Description of the error, intended for display in user interface.
	Message *string `json:"message,omitempty"`

	// Target of the particular error, for example name of the property.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponseBodyAutoGenerated2.
func (e ErrorResponseBodyAutoGenerated2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// Essentials - This object contains consistent fields across different monitor services.
type Essentials struct {
	// Target ARM resource, on which alert got created.
	TargetResource *string `json:"targetResource,omitempty"`

	// Resource group of target ARM resource, on which alert got created.
	TargetResourceGroup *string `json:"targetResourceGroup,omitempty"`

	// Name of the target ARM resource name, on which alert got created.
	TargetResourceName *string `json:"targetResourceName,omitempty"`

	// Resource type of target ARM resource, on which alert got created.
	TargetResourceType *string `json:"targetResourceType,omitempty"`

	// READ-ONLY; Rule(monitor) which fired alert instance. Depending on the monitor service, this would be ARM id or name of
	// the rule.
	AlertRule *string `json:"alertRule,omitempty" azure:"ro"`

	// READ-ONLY; Alert object state, which can be modified by the user.
	AlertState *AlertState `json:"alertState,omitempty" azure:"ro"`

	// READ-ONLY; Last modification time(ISO-8601 format) of alert instance.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty" azure:"ro"`

	// READ-ONLY; User who last modified the alert, in case of monitor service updates user would be 'system', otherwise name
	// of the user.
	LastModifiedUserName *string `json:"lastModifiedUserName,omitempty" azure:"ro"`

	// READ-ONLY; Condition of the rule at the monitor service. It represents whether the underlying conditions have crossed the
	// defined alert rule thresholds.
	MonitorCondition *MonitorCondition `json:"monitorCondition,omitempty" azure:"ro"`

	// READ-ONLY; Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert
	// instance because the rule condition is no longer met.
	MonitorConditionResolvedDateTime *time.Time `json:"monitorConditionResolvedDateTime,omitempty" azure:"ro"`

	// READ-ONLY; Monitor service on which the rule(monitor) is set.
	MonitorService *MonitorService `json:"monitorService,omitempty" azure:"ro"`

	// READ-ONLY; Severity of alert Sev0 being highest and Sev4 being lowest.
	Severity *Severity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; The type of signal the alert is based on, which could be metrics, logs or activity logs.
	SignalType *SignalType `json:"signalType,omitempty" azure:"ro"`

	// READ-ONLY; Unique Id of the smart group
	SmartGroupID *string `json:"smartGroupId,omitempty" azure:"ro"`

	// READ-ONLY; Verbose reason describing the reason why this alert instance is added to a smart group
	SmartGroupingReason *string `json:"smartGroupingReason,omitempty" azure:"ro"`

	// READ-ONLY; Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor
	// service, in case of Nagios, Zabbix, SCOM etc.
	SourceCreatedID *string `json:"sourceCreatedId,omitempty" azure:"ro"`

	// READ-ONLY; Creation time(ISO-8601 format) of alert instance.
	StartDateTime *time.Time `json:"startDateTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Essentials.
func (e Essentials) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertRule", e.AlertRule)
	populate(objectMap, "alertState", e.AlertState)
	populateTimeRFC3339(objectMap, "lastModifiedDateTime", e.LastModifiedDateTime)
	populate(objectMap, "lastModifiedUserName", e.LastModifiedUserName)
	populate(objectMap, "monitorCondition", e.MonitorCondition)
	populateTimeRFC3339(objectMap, "monitorConditionResolvedDateTime", e.MonitorConditionResolvedDateTime)
	populate(objectMap, "monitorService", e.MonitorService)
	populate(objectMap, "severity", e.Severity)
	populate(objectMap, "signalType", e.SignalType)
	populate(objectMap, "smartGroupId", e.SmartGroupID)
	populate(objectMap, "smartGroupingReason", e.SmartGroupingReason)
	populate(objectMap, "sourceCreatedId", e.SourceCreatedID)
	populateTimeRFC3339(objectMap, "startDateTime", e.StartDateTime)
	populate(objectMap, "targetResource", e.TargetResource)
	populate(objectMap, "targetResourceGroup", e.TargetResourceGroup)
	populate(objectMap, "targetResourceName", e.TargetResourceName)
	populate(objectMap, "targetResourceType", e.TargetResourceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Essentials.
func (e *Essentials) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "alertRule":
			err = unpopulate(val, &e.AlertRule)
			delete(rawMsg, key)
		case "alertState":
			err = unpopulate(val, &e.AlertState)
			delete(rawMsg, key)
		case "lastModifiedDateTime":
			err = unpopulateTimeRFC3339(val, &e.LastModifiedDateTime)
			delete(rawMsg, key)
		case "lastModifiedUserName":
			err = unpopulate(val, &e.LastModifiedUserName)
			delete(rawMsg, key)
		case "monitorCondition":
			err = unpopulate(val, &e.MonitorCondition)
			delete(rawMsg, key)
		case "monitorConditionResolvedDateTime":
			err = unpopulateTimeRFC3339(val, &e.MonitorConditionResolvedDateTime)
			delete(rawMsg, key)
		case "monitorService":
			err = unpopulate(val, &e.MonitorService)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, &e.Severity)
			delete(rawMsg, key)
		case "signalType":
			err = unpopulate(val, &e.SignalType)
			delete(rawMsg, key)
		case "smartGroupId":
			err = unpopulate(val, &e.SmartGroupID)
			delete(rawMsg, key)
		case "smartGroupingReason":
			err = unpopulate(val, &e.SmartGroupingReason)
			delete(rawMsg, key)
		case "sourceCreatedId":
			err = unpopulate(val, &e.SourceCreatedID)
			delete(rawMsg, key)
		case "startDateTime":
			err = unpopulateTimeRFC3339(val, &e.StartDateTime)
			delete(rawMsg, key)
		case "targetResource":
			err = unpopulate(val, &e.TargetResource)
			delete(rawMsg, key)
		case "targetResourceGroup":
			err = unpopulate(val, &e.TargetResourceGroup)
			delete(rawMsg, key)
		case "targetResourceName":
			err = unpopulate(val, &e.TargetResourceName)
			delete(rawMsg, key)
		case "targetResourceType":
			err = unpopulate(val, &e.TargetResourceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ManagedResource - An azure managed resource object.
type ManagedResource struct {
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedResource.
func (m ManagedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MonitorServiceDetails - Details of a monitor service
type MonitorServiceDetails struct {
	// Monitor service display name
	DisplayName *string `json:"displayName,omitempty"`

	// Monitor service name
	Name *string `json:"name,omitempty"`
}

// MonitorServiceList - Monitor service details
type MonitorServiceList struct {
	// REQUIRED; Array of operations
	Data []*MonitorServiceDetails `json:"data,omitempty"`

	// REQUIRED; Identification of the information to be retrieved by API call
	MetadataIdentifier *MetadataIdentifier `json:"metadataIdentifier,omitempty"`
}

// GetAlertsMetaDataProperties implements the AlertsMetaDataPropertiesClassification interface for type MonitorServiceList.
func (m *MonitorServiceList) GetAlertsMetaDataProperties() *AlertsMetaDataProperties {
	return &AlertsMetaDataProperties{
		MetadataIdentifier: m.MetadataIdentifier,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MonitorServiceList.
func (m MonitorServiceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", m.Data)
	objectMap["metadataIdentifier"] = MetadataIdentifierMonitorServiceList
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MonitorServiceList.
func (m *MonitorServiceList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "data":
			err = unpopulate(val, &m.Data)
			delete(rawMsg, key)
		case "metadataIdentifier":
			err = unpopulate(val, &m.MetadataIdentifier)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MonthlyRecurrence - Monthly recurrence object.
type MonthlyRecurrence struct {
	// REQUIRED; Specifies the values for monthly recurrence pattern.
	DaysOfMonth []*int32 `json:"daysOfMonth,omitempty"`

	// REQUIRED; Specifies when the recurrence should be applied.
	RecurrenceType *RecurrenceType `json:"recurrenceType,omitempty"`

	// End time for recurrence.
	EndTime *string `json:"endTime,omitempty"`

	// Start time for recurrence.
	StartTime *string `json:"startTime,omitempty"`
}

// GetRecurrence implements the RecurrenceClassification interface for type MonthlyRecurrence.
func (m *MonthlyRecurrence) GetRecurrence() *Recurrence {
	return &Recurrence{
		RecurrenceType: m.RecurrenceType,
		StartTime:      m.StartTime,
		EndTime:        m.EndTime,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MonthlyRecurrence.
func (m MonthlyRecurrence) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "daysOfMonth", m.DaysOfMonth)
	populate(objectMap, "endTime", m.EndTime)
	objectMap["recurrenceType"] = RecurrenceTypeMonthly
	populate(objectMap, "startTime", m.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MonthlyRecurrence.
func (m *MonthlyRecurrence) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "daysOfMonth":
			err = unpopulate(val, &m.DaysOfMonth)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulate(val, &m.EndTime)
			delete(rawMsg, key)
		case "recurrenceType":
			err = unpopulate(val, &m.RecurrenceType)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulate(val, &m.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Operation provided by provider
type Operation struct {
	// Properties of the operation
	Display *OperationDisplay `json:"display,omitempty"`

	// Name of the operation
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - Properties of the operation
type OperationDisplay struct {
	// Description of the operation
	Description *string `json:"description,omitempty"`

	// Operation name
	Operation *string `json:"operation,omitempty"`

	// Provider name
	Provider *string `json:"provider,omitempty"`

	// Resource name
	Resource *string `json:"resource,omitempty"`
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OperationsList - Lists the operations available in the AlertsManagement RP.
type OperationsList struct {
	// REQUIRED; Array of operations
	Value []*Operation `json:"value,omitempty"`

	// URL to fetch the next set of alerts.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationsList.
func (o OperationsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// PatchObject - Data contract for patch.
type PatchObject struct {
	// Properties supported by patch operation.
	Properties *PatchProperties `json:"properties,omitempty"`

	// Tags to be updated.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PatchObject.
func (p PatchObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PatchProperties - Alert processing rule properties supported by patch.
type PatchProperties struct {
	// Indicates if the given alert processing rule is enabled or disabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// RecurrenceClassification provides polymorphic access to related types.
// Call the interface's GetRecurrence() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DailyRecurrence, *MonthlyRecurrence, *Recurrence, *WeeklyRecurrence
type RecurrenceClassification interface {
	// GetRecurrence returns the Recurrence content of the underlying type.
	GetRecurrence() *Recurrence
}

// Recurrence object.
type Recurrence struct {
	// REQUIRED; Specifies when the recurrence should be applied.
	RecurrenceType *RecurrenceType `json:"recurrenceType,omitempty"`

	// End time for recurrence.
	EndTime *string `json:"endTime,omitempty"`

	// Start time for recurrence.
	StartTime *string `json:"startTime,omitempty"`
}

// GetRecurrence implements the RecurrenceClassification interface for type Recurrence.
func (r *Recurrence) GetRecurrence() *Recurrence { return r }

// RemoveAllActionGroups - Indicates if all action groups should be removed.
type RemoveAllActionGroups struct {
	// REQUIRED; Action that should be applied.
	ActionType *ActionType `json:"actionType,omitempty"`
}

// GetAction implements the ActionClassification interface for type RemoveAllActionGroups.
func (r *RemoveAllActionGroups) GetAction() *Action {
	return &Action{
		ActionType: r.ActionType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type RemoveAllActionGroups.
func (r RemoveAllActionGroups) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["actionType"] = ActionTypeRemoveAllActionGroups
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RemoveAllActionGroups.
func (r *RemoveAllActionGroups) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, &r.ActionType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Resource - An azure resource object
type Resource struct {
	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Schedule - Scheduling configuration for a given alert processing rule.
type Schedule struct {
	// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveFrom *string `json:"effectiveFrom,omitempty"`

	// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
	EffectiveUntil *string `json:"effectiveUntil,omitempty"`

	// List of recurrences.
	Recurrences []RecurrenceClassification `json:"recurrences,omitempty"`

	// Scheduling time zone.
	TimeZone *string `json:"timeZone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Schedule.
func (s Schedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "effectiveFrom", s.EffectiveFrom)
	populate(objectMap, "effectiveUntil", s.EffectiveUntil)
	populate(objectMap, "recurrences", s.Recurrences)
	populate(objectMap, "timeZone", s.TimeZone)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Schedule.
func (s *Schedule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "effectiveFrom":
			err = unpopulate(val, &s.EffectiveFrom)
			delete(rawMsg, key)
		case "effectiveUntil":
			err = unpopulate(val, &s.EffectiveUntil)
			delete(rawMsg, key)
		case "recurrences":
			s.Recurrences, err = unmarshalRecurrenceClassificationArray(val)
			delete(rawMsg, key)
		case "timeZone":
			err = unpopulate(val, &s.TimeZone)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SmartGroup - Set of related alerts grouped together smartly by AMS.
type SmartGroup struct {
	// Properties of smart group.
	Properties *SmartGroupProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SmartGroupAggregatedProperty - Aggregated property of each type
type SmartGroupAggregatedProperty struct {
	// Total number of items of type.
	Count *int64 `json:"count,omitempty"`

	// Name of the type.
	Name *string `json:"name,omitempty"`
}

// SmartGroupModification - Alert Modification details
type SmartGroupModification struct {
	// Properties of the smartGroup modification item.
	Properties *SmartGroupModificationProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SmartGroupModificationItem - smartGroup modification item.
type SmartGroupModificationItem struct {
	// Modification comments
	Comments *string `json:"comments,omitempty"`

	// Description of the modification
	Description *string `json:"description,omitempty"`

	// Reason for the modification
	ModificationEvent *SmartGroupModificationEvent `json:"modificationEvent,omitempty"`

	// Modified date and time
	ModifiedAt *string `json:"modifiedAt,omitempty"`

	// Modified user details (Principal client name)
	ModifiedBy *string `json:"modifiedBy,omitempty"`

	// New value
	NewValue *string `json:"newValue,omitempty"`

	// Old value
	OldValue *string `json:"oldValue,omitempty"`
}

// SmartGroupModificationProperties - Properties of the smartGroup modification item.
type SmartGroupModificationProperties struct {
	// Modification details
	Modifications []*SmartGroupModificationItem `json:"modifications,omitempty"`

	// URL to fetch the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// READ-ONLY; Unique Id of the smartGroup for which the history is being retrieved
	SmartGroupID *string `json:"smartGroupId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SmartGroupModificationProperties.
func (s SmartGroupModificationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "modifications", s.Modifications)
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "smartGroupId", s.SmartGroupID)
	return json.Marshal(objectMap)
}

// SmartGroupProperties - Properties of smart group.
type SmartGroupProperties struct {
	// Summary of alertSeverities in the smart group
	AlertSeverities []*SmartGroupAggregatedProperty `json:"alertSeverities,omitempty"`

	// Summary of alertStates in the smart group
	AlertStates []*SmartGroupAggregatedProperty `json:"alertStates,omitempty"`

	// Total number of alerts in smart group
	AlertsCount *int64 `json:"alertsCount,omitempty"`

	// Summary of monitorConditions in the smart group
	MonitorConditions []*SmartGroupAggregatedProperty `json:"monitorConditions,omitempty"`

	// Summary of monitorServices in the smart group
	MonitorServices []*SmartGroupAggregatedProperty `json:"monitorServices,omitempty"`

	// The URI to fetch the next page of alerts. Call ListNext() with this URI to fetch the next page alerts.
	NextLink *string `json:"nextLink,omitempty"`

	// Summary of target resource groups in the smart group
	ResourceGroups []*SmartGroupAggregatedProperty `json:"resourceGroups,omitempty"`

	// Summary of target resource types in the smart group
	ResourceTypes []*SmartGroupAggregatedProperty `json:"resourceTypes,omitempty"`

	// Summary of target resources in the smart group
	Resources []*SmartGroupAggregatedProperty `json:"resources,omitempty"`

	// READ-ONLY; Last updated time of smart group. Date-Time in ISO-8601 format.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty" azure:"ro"`

	// READ-ONLY; Last modified by user name.
	LastModifiedUserName *string `json:"lastModifiedUserName,omitempty" azure:"ro"`

	// READ-ONLY; Severity of smart group is the highest(Sev0 >… > Sev4) severity of all the alerts in the group.
	Severity *Severity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; Smart group state
	SmartGroupState *State `json:"smartGroupState,omitempty" azure:"ro"`

	// READ-ONLY; Creation time of smart group. Date-Time in ISO-8601 format.
	StartDateTime *time.Time `json:"startDateTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SmartGroupProperties.
func (s SmartGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertSeverities", s.AlertSeverities)
	populate(objectMap, "alertStates", s.AlertStates)
	populate(objectMap, "alertsCount", s.AlertsCount)
	populateTimeRFC3339(objectMap, "lastModifiedDateTime", s.LastModifiedDateTime)
	populate(objectMap, "lastModifiedUserName", s.LastModifiedUserName)
	populate(objectMap, "monitorConditions", s.MonitorConditions)
	populate(objectMap, "monitorServices", s.MonitorServices)
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "resourceGroups", s.ResourceGroups)
	populate(objectMap, "resourceTypes", s.ResourceTypes)
	populate(objectMap, "resources", s.Resources)
	populate(objectMap, "severity", s.Severity)
	populate(objectMap, "smartGroupState", s.SmartGroupState)
	populateTimeRFC3339(objectMap, "startDateTime", s.StartDateTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SmartGroupProperties.
func (s *SmartGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "alertSeverities":
			err = unpopulate(val, &s.AlertSeverities)
			delete(rawMsg, key)
		case "alertStates":
			err = unpopulate(val, &s.AlertStates)
			delete(rawMsg, key)
		case "alertsCount":
			err = unpopulate(val, &s.AlertsCount)
			delete(rawMsg, key)
		case "lastModifiedDateTime":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedDateTime)
			delete(rawMsg, key)
		case "lastModifiedUserName":
			err = unpopulate(val, &s.LastModifiedUserName)
			delete(rawMsg, key)
		case "monitorConditions":
			err = unpopulate(val, &s.MonitorConditions)
			delete(rawMsg, key)
		case "monitorServices":
			err = unpopulate(val, &s.MonitorServices)
			delete(rawMsg, key)
		case "nextLink":
			err = unpopulate(val, &s.NextLink)
			delete(rawMsg, key)
		case "resourceGroups":
			err = unpopulate(val, &s.ResourceGroups)
			delete(rawMsg, key)
		case "resourceTypes":
			err = unpopulate(val, &s.ResourceTypes)
			delete(rawMsg, key)
		case "resources":
			err = unpopulate(val, &s.Resources)
			delete(rawMsg, key)
		case "severity":
			err = unpopulate(val, &s.Severity)
			delete(rawMsg, key)
		case "smartGroupState":
			err = unpopulate(val, &s.SmartGroupState)
			delete(rawMsg, key)
		case "startDateTime":
			err = unpopulateTimeRFC3339(val, &s.StartDateTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SmartGroupsClientChangeStateOptions contains the optional parameters for the SmartGroupsClient.ChangeState method.
type SmartGroupsClientChangeStateOptions struct {
	// placeholder for future optional parameters
}

// SmartGroupsClientGetAllOptions contains the optional parameters for the SmartGroupsClient.GetAll method.
type SmartGroupsClientGetAllOptions struct {
	// Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
	MonitorCondition *MonitorCondition
	// Filter by monitor service which generates the alert instance. Default value is select all.
	MonitorService *MonitorService
	// Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"
	// filter is selected, maximum value allowed is 25. Default value is 25.
	PageCount *int64
	// Filter by severity. Default value is select all.
	Severity *Severity
	// Filter by state of the smart group. Default value is to select all.
	SmartGroupState *AlertState
	// Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
	SortBy *SmartGroupsSortByFields
	// Sort the query results order in either ascending or descending. Default value is 'desc' for time fields and 'asc' for others.
	SortOrder *SortOrder
	// Filter by target resource( which is full ARM ID) Default value is select all.
	TargetResource *string
	// Filter by target resource group name. Default value is select all.
	TargetResourceGroup *string
	// Filter by target resource type. Default value is select all.
	TargetResourceType *string
	// Filter by time range by below listed values. Default value is 1 day.
	TimeRange *TimeRange
}

// SmartGroupsClientGetByIDOptions contains the optional parameters for the SmartGroupsClient.GetByID method.
type SmartGroupsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// SmartGroupsClientGetHistoryOptions contains the optional parameters for the SmartGroupsClient.GetHistory method.
type SmartGroupsClientGetHistoryOptions struct {
	// placeholder for future optional parameters
}

// SmartGroupsList - List the alerts.
type SmartGroupsList struct {
	// URL to fetch the next set of alerts.
	NextLink *string `json:"nextLink,omitempty"`

	// List of alerts
	Value []*SmartGroup `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SmartGroupsList.
func (s SmartGroupsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WeeklyRecurrence - Weekly recurrence object.
type WeeklyRecurrence struct {
	// REQUIRED; Specifies the values for weekly recurrence pattern.
	DaysOfWeek []*DaysOfWeek `json:"daysOfWeek,omitempty"`

	// REQUIRED; Specifies when the recurrence should be applied.
	RecurrenceType *RecurrenceType `json:"recurrenceType,omitempty"`

	// End time for recurrence.
	EndTime *string `json:"endTime,omitempty"`

	// Start time for recurrence.
	StartTime *string `json:"startTime,omitempty"`
}

// GetRecurrence implements the RecurrenceClassification interface for type WeeklyRecurrence.
func (w *WeeklyRecurrence) GetRecurrence() *Recurrence {
	return &Recurrence{
		RecurrenceType: w.RecurrenceType,
		StartTime:      w.StartTime,
		EndTime:        w.EndTime,
	}
}

// MarshalJSON implements the json.Marshaller interface for type WeeklyRecurrence.
func (w WeeklyRecurrence) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "daysOfWeek", w.DaysOfWeek)
	populate(objectMap, "endTime", w.EndTime)
	objectMap["recurrenceType"] = RecurrenceTypeWeekly
	populate(objectMap, "startTime", w.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WeeklyRecurrence.
func (w *WeeklyRecurrence) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "daysOfWeek":
			err = unpopulate(val, &w.DaysOfWeek)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulate(val, &w.EndTime)
			delete(rawMsg, key)
		case "recurrenceType":
			err = unpopulate(val, &w.RecurrenceType)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulate(val, &w.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
