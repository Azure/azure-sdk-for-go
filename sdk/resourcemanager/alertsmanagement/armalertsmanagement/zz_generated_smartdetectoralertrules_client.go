//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SmartDetectorAlertRulesClient contains the methods for the SmartDetectorAlertRules group.
// Don't use this type directly, use NewSmartDetectorAlertRulesClient() instead.
type SmartDetectorAlertRulesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSmartDetectorAlertRulesClient creates a new instance of SmartDetectorAlertRulesClient with the specified values.
func NewSmartDetectorAlertRulesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *SmartDetectorAlertRulesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SmartDetectorAlertRulesClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Create or update a Smart Detector alert rule.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, alertRuleName string, parameters AlertRule, options *SmartDetectorAlertRulesCreateOrUpdateOptions) (SmartDetectorAlertRulesCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, alertRuleName, parameters, options)
	if err != nil {
		return SmartDetectorAlertRulesCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartDetectorAlertRulesCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return SmartDetectorAlertRulesCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SmartDetectorAlertRulesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, alertRuleName string, parameters AlertRule, options *SmartDetectorAlertRulesCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if alertRuleName == "" {
		return nil, errors.New("parameter alertRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertRuleName}", url.PathEscape(alertRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SmartDetectorAlertRulesClient) createOrUpdateHandleResponse(resp *http.Response) (SmartDetectorAlertRulesCreateOrUpdateResponse, error) {
	result := SmartDetectorAlertRulesCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertRule); err != nil {
		return SmartDetectorAlertRulesCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *SmartDetectorAlertRulesClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete an existing Smart Detector alert rule.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) Delete(ctx context.Context, resourceGroupName string, alertRuleName string, options *SmartDetectorAlertRulesDeleteOptions) (SmartDetectorAlertRulesDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, alertRuleName, options)
	if err != nil {
		return SmartDetectorAlertRulesDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartDetectorAlertRulesDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SmartDetectorAlertRulesDeleteResponse{}, client.deleteHandleError(resp)
	}
	return SmartDetectorAlertRulesDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SmartDetectorAlertRulesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, alertRuleName string, options *SmartDetectorAlertRulesDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if alertRuleName == "" {
		return nil, errors.New("parameter alertRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertRuleName}", url.PathEscape(alertRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *SmartDetectorAlertRulesClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get a specific Smart Detector alert rule.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) Get(ctx context.Context, resourceGroupName string, alertRuleName string, options *SmartDetectorAlertRulesGetOptions) (SmartDetectorAlertRulesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, alertRuleName, options)
	if err != nil {
		return SmartDetectorAlertRulesGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartDetectorAlertRulesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SmartDetectorAlertRulesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SmartDetectorAlertRulesClient) getCreateRequest(ctx context.Context, resourceGroupName string, alertRuleName string, options *SmartDetectorAlertRulesGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if alertRuleName == "" {
		return nil, errors.New("parameter alertRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertRuleName}", url.PathEscape(alertRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	if options != nil && options.ExpandDetector != nil {
		reqQP.Set("expandDetector", strconv.FormatBool(*options.ExpandDetector))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SmartDetectorAlertRulesClient) getHandleResponse(resp *http.Response) (SmartDetectorAlertRulesGetResponse, error) {
	result := SmartDetectorAlertRulesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertRule); err != nil {
		return SmartDetectorAlertRulesGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SmartDetectorAlertRulesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List all the existing Smart Detector alert rules within the subscription.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) List(options *SmartDetectorAlertRulesListOptions) *SmartDetectorAlertRulesListPager {
	return &SmartDetectorAlertRulesListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SmartDetectorAlertRulesListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertRulesList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SmartDetectorAlertRulesClient) listCreateRequest(ctx context.Context, options *SmartDetectorAlertRulesListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	if options != nil && options.ExpandDetector != nil {
		reqQP.Set("expandDetector", strconv.FormatBool(*options.ExpandDetector))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SmartDetectorAlertRulesClient) listHandleResponse(resp *http.Response) (SmartDetectorAlertRulesListResponse, error) {
	result := SmartDetectorAlertRulesListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertRulesList); err != nil {
		return SmartDetectorAlertRulesListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SmartDetectorAlertRulesClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - List all the existing Smart Detector alert rules within the subscription and resource group.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) ListByResourceGroup(resourceGroupName string, options *SmartDetectorAlertRulesListByResourceGroupOptions) *SmartDetectorAlertRulesListByResourceGroupPager {
	return &SmartDetectorAlertRulesListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp SmartDetectorAlertRulesListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertRulesList.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SmartDetectorAlertRulesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *SmartDetectorAlertRulesListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	if options != nil && options.ExpandDetector != nil {
		reqQP.Set("expandDetector", strconv.FormatBool(*options.ExpandDetector))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SmartDetectorAlertRulesClient) listByResourceGroupHandleResponse(resp *http.Response) (SmartDetectorAlertRulesListByResourceGroupResponse, error) {
	result := SmartDetectorAlertRulesListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertRulesList); err != nil {
		return SmartDetectorAlertRulesListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *SmartDetectorAlertRulesClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Patch - Patch a specific Smart Detector alert rule.
// If the operation fails it returns the *SmartDetectorErrorResponse error type.
func (client *SmartDetectorAlertRulesClient) Patch(ctx context.Context, resourceGroupName string, alertRuleName string, parameters AlertRulePatchObject, options *SmartDetectorAlertRulesPatchOptions) (SmartDetectorAlertRulesPatchResponse, error) {
	req, err := client.patchCreateRequest(ctx, resourceGroupName, alertRuleName, parameters, options)
	if err != nil {
		return SmartDetectorAlertRulesPatchResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartDetectorAlertRulesPatchResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SmartDetectorAlertRulesPatchResponse{}, client.patchHandleError(resp)
	}
	return client.patchHandleResponse(resp)
}

// patchCreateRequest creates the Patch request.
func (client *SmartDetectorAlertRulesClient) patchCreateRequest(ctx context.Context, resourceGroupName string, alertRuleName string, parameters AlertRulePatchObject, options *SmartDetectorAlertRulesPatchOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if alertRuleName == "" {
		return nil, errors.New("parameter alertRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertRuleName}", url.PathEscape(alertRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// patchHandleResponse handles the Patch response.
func (client *SmartDetectorAlertRulesClient) patchHandleResponse(resp *http.Response) (SmartDetectorAlertRulesPatchResponse, error) {
	result := SmartDetectorAlertRulesPatchResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertRule); err != nil {
		return SmartDetectorAlertRulesPatchResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// patchHandleError handles the Patch error response.
func (client *SmartDetectorAlertRulesClient) patchHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := SmartDetectorErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
