//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armalertsmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SmartGroupsClient contains the methods for the SmartGroups group.
// Don't use this type directly, use NewSmartGroupsClient() instead.
type SmartGroupsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSmartGroupsClient creates a new instance of SmartGroupsClient with the specified values.
func NewSmartGroupsClient(con *arm.Connection, subscriptionID string) *SmartGroupsClient {
	return &SmartGroupsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// ChangeState - Change the state of a Smart Group.
// If the operation fails it returns the *ErrorResponseAutoGenerated2 error type.
func (client *SmartGroupsClient) ChangeState(ctx context.Context, smartGroupID string, newState AlertState, options *SmartGroupsChangeStateOptions) (SmartGroupsChangeStateResponse, error) {
	req, err := client.changeStateCreateRequest(ctx, smartGroupID, newState, options)
	if err != nil {
		return SmartGroupsChangeStateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartGroupsChangeStateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SmartGroupsChangeStateResponse{}, client.changeStateHandleError(resp)
	}
	return client.changeStateHandleResponse(resp)
}

// changeStateCreateRequest creates the ChangeState request.
func (client *SmartGroupsClient) changeStateCreateRequest(ctx context.Context, smartGroupID string, newState AlertState, options *SmartGroupsChangeStateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if smartGroupID == "" {
		return nil, errors.New("parameter smartGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smartGroupId}", url.PathEscape(smartGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	reqQP.Set("newState", string(newState))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// changeStateHandleResponse handles the ChangeState response.
func (client *SmartGroupsClient) changeStateHandleResponse(resp *http.Response) (SmartGroupsChangeStateResponse, error) {
	result := SmartGroupsChangeStateResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmartGroup); err != nil {
		return SmartGroupsChangeStateResponse{}, err
	}
	return result, nil
}

// changeStateHandleError handles the ChangeState error response.
func (client *SmartGroupsClient) changeStateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated2{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAll - List all the Smart Groups within a specified subscription.
// If the operation fails it returns the *ErrorResponseAutoGenerated2 error type.
func (client *SmartGroupsClient) GetAll(options *SmartGroupsGetAllOptions) *SmartGroupsGetAllPager {
	return &SmartGroupsGetAllPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getAllCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SmartGroupsGetAllResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SmartGroupsList.NextLink)
		},
	}
}

// getAllCreateRequest creates the GetAll request.
func (client *SmartGroupsClient) getAllCreateRequest(ctx context.Context, options *SmartGroupsGetAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.TargetResource != nil {
		reqQP.Set("targetResource", *options.TargetResource)
	}
	if options != nil && options.TargetResourceGroup != nil {
		reqQP.Set("targetResourceGroup", *options.TargetResourceGroup)
	}
	if options != nil && options.TargetResourceType != nil {
		reqQP.Set("targetResourceType", *options.TargetResourceType)
	}
	if options != nil && options.MonitorService != nil {
		reqQP.Set("monitorService", string(*options.MonitorService))
	}
	if options != nil && options.MonitorCondition != nil {
		reqQP.Set("monitorCondition", string(*options.MonitorCondition))
	}
	if options != nil && options.Severity != nil {
		reqQP.Set("severity", string(*options.Severity))
	}
	if options != nil && options.SmartGroupState != nil {
		reqQP.Set("smartGroupState", string(*options.SmartGroupState))
	}
	if options != nil && options.TimeRange != nil {
		reqQP.Set("timeRange", string(*options.TimeRange))
	}
	if options != nil && options.PageCount != nil {
		reqQP.Set("pageCount", strconv.FormatInt(int64(*options.PageCount), 10))
	}
	if options != nil && options.SortBy != nil {
		reqQP.Set("sortBy", string(*options.SortBy))
	}
	if options != nil && options.SortOrder != nil {
		reqQP.Set("sortOrder", string(*options.SortOrder))
	}
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAllHandleResponse handles the GetAll response.
func (client *SmartGroupsClient) getAllHandleResponse(resp *http.Response) (SmartGroupsGetAllResponse, error) {
	result := SmartGroupsGetAllResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmartGroupsList); err != nil {
		return SmartGroupsGetAllResponse{}, err
	}
	return result, nil
}

// getAllHandleError handles the GetAll error response.
func (client *SmartGroupsClient) getAllHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated2{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByID - Get information related to a specific Smart Group.
// If the operation fails it returns the *ErrorResponseAutoGenerated2 error type.
func (client *SmartGroupsClient) GetByID(ctx context.Context, smartGroupID string, options *SmartGroupsGetByIDOptions) (SmartGroupsGetByIDResponse, error) {
	req, err := client.getByIDCreateRequest(ctx, smartGroupID, options)
	if err != nil {
		return SmartGroupsGetByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartGroupsGetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SmartGroupsGetByIDResponse{}, client.getByIDHandleError(resp)
	}
	return client.getByIDHandleResponse(resp)
}

// getByIDCreateRequest creates the GetByID request.
func (client *SmartGroupsClient) getByIDCreateRequest(ctx context.Context, smartGroupID string, options *SmartGroupsGetByIDOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if smartGroupID == "" {
		return nil, errors.New("parameter smartGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smartGroupId}", url.PathEscape(smartGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByIDHandleResponse handles the GetByID response.
func (client *SmartGroupsClient) getByIDHandleResponse(resp *http.Response) (SmartGroupsGetByIDResponse, error) {
	result := SmartGroupsGetByIDResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmartGroup); err != nil {
		return SmartGroupsGetByIDResponse{}, err
	}
	return result, nil
}

// getByIDHandleError handles the GetByID error response.
func (client *SmartGroupsClient) getByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated2{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetHistory - Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
// If the operation fails it returns the *ErrorResponseAutoGenerated2 error type.
func (client *SmartGroupsClient) GetHistory(ctx context.Context, smartGroupID string, options *SmartGroupsGetHistoryOptions) (SmartGroupsGetHistoryResponse, error) {
	req, err := client.getHistoryCreateRequest(ctx, smartGroupID, options)
	if err != nil {
		return SmartGroupsGetHistoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SmartGroupsGetHistoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SmartGroupsGetHistoryResponse{}, client.getHistoryHandleError(resp)
	}
	return client.getHistoryHandleResponse(resp)
}

// getHistoryCreateRequest creates the GetHistory request.
func (client *SmartGroupsClient) getHistoryCreateRequest(ctx context.Context, smartGroupID string, options *SmartGroupsGetHistoryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if smartGroupID == "" {
		return nil, errors.New("parameter smartGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{smartGroupId}", url.PathEscape(smartGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-05-05-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHistoryHandleResponse handles the GetHistory response.
func (client *SmartGroupsClient) getHistoryHandleResponse(resp *http.Response) (SmartGroupsGetHistoryResponse, error) {
	result := SmartGroupsGetHistoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SmartGroupModification); err != nil {
		return SmartGroupsGetHistoryResponse{}, err
	}
	return result, nil
}

// getHistoryHandleError handles the GetHistory error response.
func (client *SmartGroupsClient) getHistoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseAutoGenerated2{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
