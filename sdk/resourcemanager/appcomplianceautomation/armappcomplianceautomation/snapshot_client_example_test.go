//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armappcomplianceautomation_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appcomplianceautomation/armappcomplianceautomation"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/82ea406b73d671269217053d7ef336450d860345/specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Snapshot_Get.json
func ExampleSnapshotClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armappcomplianceautomation.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewSnapshotClient().Get(ctx, "testReportName", "testSnapshot", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.SnapshotResource = armappcomplianceautomation.SnapshotResource{
	// 	Name: to.Ptr("testSnapshot"),
	// 	Type: to.Ptr("Microsfot.AppComplianceAutomation/reports/snapshots"),
	// 	ID: to.Ptr("/provider/Microsfot.AppComplianceAutomation/reports/testReportName/snapshots/testSnapshot"),
	// 	SystemData: &armappcomplianceautomation.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-14T22:34:55.449Z"); return t}()),
	// 		CreatedBy: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		CreatedByType: to.Ptr(armappcomplianceautomation.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-14T22:34:55.449Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		LastModifiedByType: to.Ptr(armappcomplianceautomation.CreatedByTypeUser),
	// 	},
	// 	Properties: &armappcomplianceautomation.SnapshotProperties{
	// 		ComplianceResults: []*armappcomplianceautomation.ComplianceResult{
	// 			{
	// 				Categories: []*armappcomplianceautomation.Category{
	// 					{
	// 						CategoryName: to.Ptr("Operational Security"),
	// 						CategoryStatus: to.Ptr(armappcomplianceautomation.CategoryStatusHealthy),
	// 						CategoryType: to.Ptr(armappcomplianceautomation.CategoryTypePartiallyAutomated),
	// 						ControlFamilies: []*armappcomplianceautomation.ControlFamily{
	// 							{
	// 								Controls: []*armappcomplianceautomation.Control{
	// 									{
	// 										Assessments: []*armappcomplianceautomation.Assessment{
	// 											{
	// 												Name: to.Ptr("AssessmentName"),
	// 												Description: to.Ptr("Assessment Description"),
	// 												IsPass: to.Ptr(armappcomplianceautomation.IsPassTrue),
	// 												PolicyID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 												Remediation: to.Ptr("Remediation"),
	// 												ResourceList: []*armappcomplianceautomation.AssessmentResource{
	// 													{
	// 														Reason: to.Ptr("N/A"),
	// 														ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
	// 														ResourceStatus: to.Ptr(armappcomplianceautomation.ResourceStatusHealthy),
	// 														StatusChangeDate: to.Ptr("2022-03-04"),
	// 												}},
	// 												Severity: to.Ptr(armappcomplianceautomation.AssessmentSeverityHigh),
	// 										}},
	// 										ControlDescription: to.Ptr("Provide demonstrable evidence that all member of the incident response team have completed annual training or a table top exercise"),
	// 										ControlDescriptionHyperLink: to.Ptr("https://doc.microsoft.com"),
	// 										ControlFullName: to.Ptr("Provide demonstrable evidence that all member of the incident response team have completed annual training or a table top exercise"),
	// 										ControlID: to.Ptr("Operational Security#75"),
	// 										ControlShortName: to.Ptr("Provide demonstrable evidence that all member of the incident response team have completed annual training or a table top exercise"),
	// 										ControlStatus: to.Ptr(armappcomplianceautomation.ControlStatusPassed),
	// 										ControlType: to.Ptr(armappcomplianceautomation.ControlTypeManual),
	// 								}},
	// 								FamilyName: to.Ptr("Incident Response"),
	// 								FamilyStatus: to.Ptr(armappcomplianceautomation.ControlFamilyStatusHealthy),
	// 								FamilyType: to.Ptr(armappcomplianceautomation.ControlFamilyTypePartiallyAutomated),
	// 						}},
	// 				}},
	// 				ComplianceName: to.Ptr("M365"),
	// 		}},
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-04T15:33:59.160Z"); return t}()),
	// 		ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 		ProvisioningState: to.Ptr(armappcomplianceautomation.ProvisioningStateSucceeded),
	// 		ReportProperties: &armappcomplianceautomation.ReportProperties{
	// 			ComplianceStatus: &armappcomplianceautomation.ReportComplianceStatus{
	// 				M365: &armappcomplianceautomation.OverviewStatus{
	// 					FailedCount: to.Ptr[int32](0),
	// 					ManualCount: to.Ptr[int32](0),
	// 					PassedCount: to.Ptr[int32](0),
	// 				},
	// 			},
	// 			ID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 			LastTriggerTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-04T15:33:59.160Z"); return t}()),
	// 			NextTriggerTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-04T15:33:59.160Z"); return t}()),
	// 			OfferGUID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 			ProvisioningState: to.Ptr(armappcomplianceautomation.ProvisioningStateSucceeded),
	// 			ReportName: to.Ptr("testReportName"),
	// 			Resources: []*armappcomplianceautomation.ResourceMetadata{
	// 				{
	// 					ResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/Microsoft.SignalRService/SignalR/mySignalRService"),
	// 					Tags: map[string]*string{
	// 						"key1": to.Ptr("value1"),
	// 					},
	// 			}},
	// 			Status: to.Ptr(armappcomplianceautomation.ReportStatusActive),
	// 			Subscriptions: []*string{
	// 				to.Ptr("00000000-0000-0000-0000-000000000000")},
	// 				TenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 				TimeZone: to.Ptr("GMT Standard Time"),
	// 				TriggerTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-03-04T15:33:59.160Z"); return t}()),
	// 			},
	// 			ReportSystemData: &armappcomplianceautomation.SystemData{
	// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-14T22:34:55.449Z"); return t}()),
	// 				CreatedBy: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 				CreatedByType: to.Ptr(armappcomplianceautomation.CreatedByTypeUser),
	// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-05-14T22:34:55.449Z"); return t}()),
	// 				LastModifiedBy: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 				LastModifiedByType: to.Ptr(armappcomplianceautomation.CreatedByTypeUser),
	// 			},
	// 			SnapshotName: to.Ptr("testSnapshot"),
	// 		},
	// 	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/82ea406b73d671269217053d7ef336450d860345/specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Snapshot_ComplianceDetailedPdfReport_Download.json
func ExampleSnapshotClient_BeginDownload_snapshotDownloadComplianceDetailedPdfReport() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armappcomplianceautomation.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSnapshotClient().BeginDownload(ctx, "testReportName", "testSnapshotName", armappcomplianceautomation.SnapshotDownloadRequest{
		DownloadType:          to.Ptr(armappcomplianceautomation.DownloadTypeComplianceDetailedPDFReport),
		OfferGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
		ReportCreatorTenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DownloadResponse = armappcomplianceautomation.DownloadResponse{
	// 	ComplianceDetailedPDFReport: &armappcomplianceautomation.DownloadResponseComplianceDetailedPDFReport{
	// 		SasURI: to.Ptr("this is a uri"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/82ea406b73d671269217053d7ef336450d860345/specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Snapshot_CompliancePdfReport_Download.json
func ExampleSnapshotClient_BeginDownload_snapshotDownloadCompliancePdfReport() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armappcomplianceautomation.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSnapshotClient().BeginDownload(ctx, "testReportName", "testSnapshotName", armappcomplianceautomation.SnapshotDownloadRequest{
		DownloadType:          to.Ptr(armappcomplianceautomation.DownloadTypeCompliancePDFReport),
		OfferGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
		ReportCreatorTenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DownloadResponse = armappcomplianceautomation.DownloadResponse{
	// 	CompliancePDFReport: &armappcomplianceautomation.DownloadResponseCompliancePDFReport{
	// 		SasURI: to.Ptr("this is uri of report"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/82ea406b73d671269217053d7ef336450d860345/specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Snapshot_ComplianceReport_Download.json
func ExampleSnapshotClient_BeginDownload_snapshotDownloadComplianceReport() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armappcomplianceautomation.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSnapshotClient().BeginDownload(ctx, "testReportName", "testSnapshotName", armappcomplianceautomation.SnapshotDownloadRequest{
		DownloadType:          to.Ptr(armappcomplianceautomation.DownloadTypeComplianceReport),
		OfferGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
		ReportCreatorTenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DownloadResponse = armappcomplianceautomation.DownloadResponse{
	// 	ComplianceReport: []*armappcomplianceautomation.ComplianceReportItem{
	// 		{
	// 			CategoryName: to.Ptr("Data Security & Privacy"),
	// 			ComplianceState: to.Ptr(armappcomplianceautomation.ComplianceStateHealthy),
	// 			ControlID: to.Ptr("1"),
	// 			ControlName: to.Ptr("Validate that TLS Configuration meets or exceeds the TLS Profile Configuration Requirements"),
	// 			ControlType: to.Ptr(armappcomplianceautomation.ControlTypeFullyAutomated),
	// 			PolicyDescription: to.Ptr("policy description"),
	// 			PolicyDisplayName: to.Ptr("policy name"),
	// 			PolicyID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 			ResourceGroup: to.Ptr("testGroup"),
	// 			ResourceID: to.Ptr("testResourceId"),
	// 			ResourceType: to.Ptr("storageaccounts"),
	// 			StatusChangeDate: to.Ptr("2021-09-01T17:26:57.4971616Z"),
	// 			SubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 	}},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/82ea406b73d671269217053d7ef336450d860345/specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2022-11-16-preview/examples/Snapshot_ResourceList_Download.json
func ExampleSnapshotClient_BeginDownload_snapshotDownloadResourceList() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armappcomplianceautomation.NewClientFactory(cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewSnapshotClient().BeginDownload(ctx, "testReportName", "testSnapshotName", armappcomplianceautomation.SnapshotDownloadRequest{
		DownloadType:          to.Ptr(armappcomplianceautomation.DownloadTypeResourceList),
		OfferGUID:             to.Ptr("00000000-0000-0000-0000-000000000000"),
		ReportCreatorTenantID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.DownloadResponse = armappcomplianceautomation.DownloadResponse{
	// 	ResourceList: []*armappcomplianceautomation.ResourceItem{
	// 		{
	// 			ResourceGroup: to.Ptr("myResourceGroup"),
	// 			ResourceID: to.Ptr("mySignalRService"),
	// 			ResourceType: to.Ptr("SignalR"),
	// 			SubscriptionID: to.Ptr("00000000-0000-0000-0000-000000000000"),
	// 	}},
	// }
}
