//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappconfiguration

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// ConfigurationStoresListByResourceGroupPager provides operations for iterating over paged responses.
type ConfigurationStoresListByResourceGroupPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ConfigurationStoresListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ConfigurationStoresListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationStoreListResult.NextLink == nil || len(*p.current.ConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ConfigurationStoresListByResourceGroupResponse page.
func (p *ConfigurationStoresListByResourceGroupPager) PageResponse() ConfigurationStoresListByResourceGroupResponse {
	return p.current
}

// ConfigurationStoresListKeysPager provides operations for iterating over paged responses.
type ConfigurationStoresListKeysPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresListKeysResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresListKeysResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ConfigurationStoresListKeysPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ConfigurationStoresListKeysPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKeyListResult.NextLink == nil || len(*p.current.APIKeyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listKeysHandleError(resp)
		return false
	}
	result, err := p.client.listKeysHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ConfigurationStoresListKeysResponse page.
func (p *ConfigurationStoresListKeysPager) PageResponse() ConfigurationStoresListKeysResponse {
	return p.current
}

// ConfigurationStoresListPager provides operations for iterating over paged responses.
type ConfigurationStoresListPager struct {
	client    *ConfigurationStoresClient
	current   ConfigurationStoresListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ConfigurationStoresListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ConfigurationStoresListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ConfigurationStoresListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ConfigurationStoreListResult.NextLink == nil || len(*p.current.ConfigurationStoreListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ConfigurationStoresListResponse page.
func (p *ConfigurationStoresListPager) PageResponse() ConfigurationStoresListResponse {
	return p.current
}

// KeyValuesListByConfigurationStorePager provides operations for iterating over paged responses.
type KeyValuesListByConfigurationStorePager struct {
	client    *KeyValuesClient
	current   KeyValuesListByConfigurationStoreResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KeyValuesListByConfigurationStoreResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *KeyValuesListByConfigurationStorePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *KeyValuesListByConfigurationStorePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KeyValueListResult.NextLink == nil || len(*p.current.KeyValueListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByConfigurationStoreHandleError(resp)
		return false
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current KeyValuesListByConfigurationStoreResponse page.
func (p *KeyValuesListByConfigurationStorePager) PageResponse() KeyValuesListByConfigurationStoreResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationDefinitionListResult.NextLink == nil || len(*p.current.OperationDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// PrivateEndpointConnectionsListByConfigurationStorePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsListByConfigurationStorePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsListByConfigurationStoreResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsListByConfigurationStoreResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsListByConfigurationStorePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsListByConfigurationStorePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByConfigurationStoreHandleError(resp)
		return false
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsListByConfigurationStoreResponse page.
func (p *PrivateEndpointConnectionsListByConfigurationStorePager) PageResponse() PrivateEndpointConnectionsListByConfigurationStoreResponse {
	return p.current
}

// PrivateLinkResourcesListByConfigurationStorePager provides operations for iterating over paged responses.
type PrivateLinkResourcesListByConfigurationStorePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesListByConfigurationStoreResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesListByConfigurationStoreResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkResourcesListByConfigurationStorePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkResourcesListByConfigurationStorePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourceListResult.NextLink == nil || len(*p.current.PrivateLinkResourceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByConfigurationStoreHandleError(resp)
		return false
	}
	result, err := p.client.listByConfigurationStoreHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkResourcesListByConfigurationStoreResponse page.
func (p *PrivateLinkResourcesListByConfigurationStorePager) PageResponse() PrivateLinkResourcesListByConfigurationStoreResponse {
	return p.current
}
