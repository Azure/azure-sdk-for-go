//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armapplicationinsights_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/applicationinsights/armapplicationinsights"
)

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json
func ExampleMyWorkbooksClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		armapplicationinsights.CategoryType("workbook"),
		&armapplicationinsights.MyWorkbooksClientListByResourceGroupOptions{Tags: []string{},
			SourceID:        nil,
			CanFetchContent: nil,
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbooksList.json
func ExampleMyWorkbooksClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	pager := client.ListBySubscription(armapplicationinsights.CategoryType("workbook"),
		&armapplicationinsights.MyWorkbooksClientListBySubscriptionOptions{Tags: []string{},
			CanFetchContent: nil,
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookGet.json
func ExampleMyWorkbooksClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MyWorkbooksClientGetResult)
}

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookDelete.json
func ExampleMyWorkbooksClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookAdd.json
func ExampleMyWorkbooksClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armapplicationinsights.MyWorkbook{
			Name:     to.StringPtr("<name>"),
			ID:       to.StringPtr("<id>"),
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"0": to.StringPtr("TagSample01"),
				"1": to.StringPtr("TagSample02"),
			},
			Kind: armapplicationinsights.Kind("user").ToPtr(),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.StringPtr("<category>"),
				DisplayName:    to.StringPtr("<display-name>"),
				SerializedData: to.StringPtr("<serialized-data>"),
				SourceID:       to.StringPtr("<source-id>"),
			},
		},
		&armapplicationinsights.MyWorkbooksClientCreateOrUpdateOptions{SourceID: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MyWorkbooksClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/applicationinsights/resource-manager/Microsoft.Insights/stable/2021-03-08/examples/MyWorkbookUpdate.json
func ExampleMyWorkbooksClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armapplicationinsights.NewMyWorkbooksClient("<subscription-id>", cred, nil)
	_, err = client.Update(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armapplicationinsights.MyWorkbook{
			Name:     to.StringPtr("<name>"),
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"0": to.StringPtr("TagSample01"),
				"1": to.StringPtr("TagSample02"),
			},
			Kind: armapplicationinsights.Kind("user").ToPtr(),
			Properties: &armapplicationinsights.MyWorkbookProperties{
				Category:       to.StringPtr("<category>"),
				DisplayName:    to.StringPtr("<display-name>"),
				SerializedData: to.StringPtr("<serialized-data>"),
				SourceID:       to.StringPtr("<source-id>"),
				Version:        to.StringPtr("<version>"),
			},
		},
		&armapplicationinsights.MyWorkbooksClientUpdateOptions{SourceID: nil})
	if err != nil {
		log.Fatal(err)
	}
}
