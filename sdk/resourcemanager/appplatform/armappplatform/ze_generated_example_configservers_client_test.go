//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appplatform/armappplatform"
)

// x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Get.json
func ExampleConfigServersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappplatform.NewConfigServersClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<service-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ConfigServersClientGetResult)
}

// x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePut.json
func ExampleConfigServersClient_BeginUpdatePut() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappplatform.NewConfigServersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdatePut(ctx,
		"<resource-group-name>",
		"<service-name>",
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.StringPtr("<label>"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("<uri>"),
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ConfigServersClientUpdatePutResult)
}

// x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_UpdatePatch.json
func ExampleConfigServersClient_BeginUpdatePatch() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappplatform.NewConfigServersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdatePatch(ctx,
		"<resource-group-name>",
		"<service-name>",
		armappplatform.ConfigServerResource{
			Properties: &armappplatform.ConfigServerProperties{
				ConfigServer: &armappplatform.ConfigServerSettings{
					GitProperty: &armappplatform.ConfigServerGitProperty{
						Label: to.StringPtr("<label>"),
						SearchPaths: []*string{
							to.StringPtr("/")},
						URI: to.StringPtr("<uri>"),
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ConfigServersClientUpdatePatchResult)
}

// x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2022-01-01-preview/examples/ConfigServers_Validate.json
func ExampleConfigServersClient_BeginValidate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappplatform.NewConfigServersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginValidate(ctx,
		"<resource-group-name>",
		"<service-name>",
		armappplatform.ConfigServerSettings{
			GitProperty: &armappplatform.ConfigServerGitProperty{
				Label: to.StringPtr("<label>"),
				SearchPaths: []*string{
					to.StringPtr("/")},
				URI: to.StringPtr("<uri>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ConfigServersClientValidateResult)
}
