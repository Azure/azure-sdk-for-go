//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

const (
	module  = "armappplatform"
	version = "v0.1.0"
)

// AppResourceProvisioningState - Provisioning state of the App
type AppResourceProvisioningState string

const (
	AppResourceProvisioningStateCreating  AppResourceProvisioningState = "Creating"
	AppResourceProvisioningStateFailed    AppResourceProvisioningState = "Failed"
	AppResourceProvisioningStateSucceeded AppResourceProvisioningState = "Succeeded"
	AppResourceProvisioningStateUpdating  AppResourceProvisioningState = "Updating"
)

// PossibleAppResourceProvisioningStateValues returns the possible values for the AppResourceProvisioningState const type.
func PossibleAppResourceProvisioningStateValues() []AppResourceProvisioningState {
	return []AppResourceProvisioningState{
		AppResourceProvisioningStateCreating,
		AppResourceProvisioningStateFailed,
		AppResourceProvisioningStateSucceeded,
		AppResourceProvisioningStateUpdating,
	}
}

// ToPtr returns a *AppResourceProvisioningState pointing to the current value.
func (c AppResourceProvisioningState) ToPtr() *AppResourceProvisioningState {
	return &c
}

// ConfigServerState - State of the config server.
type ConfigServerState string

const (
	ConfigServerStateDeleted      ConfigServerState = "Deleted"
	ConfigServerStateFailed       ConfigServerState = "Failed"
	ConfigServerStateNotAvailable ConfigServerState = "NotAvailable"
	ConfigServerStateSucceeded    ConfigServerState = "Succeeded"
	ConfigServerStateUpdating     ConfigServerState = "Updating"
)

// PossibleConfigServerStateValues returns the possible values for the ConfigServerState const type.
func PossibleConfigServerStateValues() []ConfigServerState {
	return []ConfigServerState{
		ConfigServerStateDeleted,
		ConfigServerStateFailed,
		ConfigServerStateNotAvailable,
		ConfigServerStateSucceeded,
		ConfigServerStateUpdating,
	}
}

// ToPtr returns a *ConfigServerState pointing to the current value.
func (c ConfigServerState) ToPtr() *ConfigServerState {
	return &c
}

// DeploymentResourceProvisioningState - Provisioning state of the Deployment
type DeploymentResourceProvisioningState string

const (
	DeploymentResourceProvisioningStateCreating  DeploymentResourceProvisioningState = "Creating"
	DeploymentResourceProvisioningStateFailed    DeploymentResourceProvisioningState = "Failed"
	DeploymentResourceProvisioningStateSucceeded DeploymentResourceProvisioningState = "Succeeded"
	DeploymentResourceProvisioningStateUpdating  DeploymentResourceProvisioningState = "Updating"
)

// PossibleDeploymentResourceProvisioningStateValues returns the possible values for the DeploymentResourceProvisioningState const type.
func PossibleDeploymentResourceProvisioningStateValues() []DeploymentResourceProvisioningState {
	return []DeploymentResourceProvisioningState{
		DeploymentResourceProvisioningStateCreating,
		DeploymentResourceProvisioningStateFailed,
		DeploymentResourceProvisioningStateSucceeded,
		DeploymentResourceProvisioningStateUpdating,
	}
}

// ToPtr returns a *DeploymentResourceProvisioningState pointing to the current value.
func (c DeploymentResourceProvisioningState) ToPtr() *DeploymentResourceProvisioningState {
	return &c
}

// DeploymentResourceStatus - Status of the Deployment
type DeploymentResourceStatus string

const (
	DeploymentResourceStatusAllocating DeploymentResourceStatus = "Allocating"
	DeploymentResourceStatusCompiling  DeploymentResourceStatus = "Compiling"
	DeploymentResourceStatusFailed     DeploymentResourceStatus = "Failed"
	DeploymentResourceStatusRunning    DeploymentResourceStatus = "Running"
	DeploymentResourceStatusStopped    DeploymentResourceStatus = "Stopped"
	DeploymentResourceStatusUnknown    DeploymentResourceStatus = "Unknown"
	DeploymentResourceStatusUpgrading  DeploymentResourceStatus = "Upgrading"
)

// PossibleDeploymentResourceStatusValues returns the possible values for the DeploymentResourceStatus const type.
func PossibleDeploymentResourceStatusValues() []DeploymentResourceStatus {
	return []DeploymentResourceStatus{
		DeploymentResourceStatusAllocating,
		DeploymentResourceStatusCompiling,
		DeploymentResourceStatusFailed,
		DeploymentResourceStatusRunning,
		DeploymentResourceStatusStopped,
		DeploymentResourceStatusUnknown,
		DeploymentResourceStatusUpgrading,
	}
}

// ToPtr returns a *DeploymentResourceStatus pointing to the current value.
func (c DeploymentResourceStatus) ToPtr() *DeploymentResourceStatus {
	return &c
}

// ManagedIdentityType - Type of the managed identity
type ManagedIdentityType string

const (
	ManagedIdentityTypeNone                       ManagedIdentityType = "None"
	ManagedIdentityTypeSystemAssigned             ManagedIdentityType = "SystemAssigned"
	ManagedIdentityTypeSystemAssignedUserAssigned ManagedIdentityType = "SystemAssigned,UserAssigned"
	ManagedIdentityTypeUserAssigned               ManagedIdentityType = "UserAssigned"
)

// PossibleManagedIdentityTypeValues returns the possible values for the ManagedIdentityType const type.
func PossibleManagedIdentityTypeValues() []ManagedIdentityType {
	return []ManagedIdentityType{
		ManagedIdentityTypeNone,
		ManagedIdentityTypeSystemAssigned,
		ManagedIdentityTypeSystemAssignedUserAssigned,
		ManagedIdentityTypeUserAssigned,
	}
}

// ToPtr returns a *ManagedIdentityType pointing to the current value.
func (c ManagedIdentityType) ToPtr() *ManagedIdentityType {
	return &c
}

// MonitoringSettingState - State of the Monitoring Setting.
type MonitoringSettingState string

const (
	MonitoringSettingStateFailed       MonitoringSettingState = "Failed"
	MonitoringSettingStateNotAvailable MonitoringSettingState = "NotAvailable"
	MonitoringSettingStateSucceeded    MonitoringSettingState = "Succeeded"
	MonitoringSettingStateUpdating     MonitoringSettingState = "Updating"
)

// PossibleMonitoringSettingStateValues returns the possible values for the MonitoringSettingState const type.
func PossibleMonitoringSettingStateValues() []MonitoringSettingState {
	return []MonitoringSettingState{
		MonitoringSettingStateFailed,
		MonitoringSettingStateNotAvailable,
		MonitoringSettingStateSucceeded,
		MonitoringSettingStateUpdating,
	}
}

// ToPtr returns a *MonitoringSettingState pointing to the current value.
func (c MonitoringSettingState) ToPtr() *MonitoringSettingState {
	return &c
}

// ProvisioningState - Provisioning state of the Service
type ProvisioningState string

const (
	ProvisioningStateCreating   ProvisioningState = "Creating"
	ProvisioningStateDeleted    ProvisioningState = "Deleted"
	ProvisioningStateDeleting   ProvisioningState = "Deleting"
	ProvisioningStateFailed     ProvisioningState = "Failed"
	ProvisioningStateMoveFailed ProvisioningState = "MoveFailed"
	ProvisioningStateMoved      ProvisioningState = "Moved"
	ProvisioningStateMoving     ProvisioningState = "Moving"
	ProvisioningStateSucceeded  ProvisioningState = "Succeeded"
	ProvisioningStateUpdating   ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCreating,
		ProvisioningStateDeleted,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateMoveFailed,
		ProvisioningStateMoved,
		ProvisioningStateMoving,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// ToPtr returns a *ProvisioningState pointing to the current value.
func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// ResourceSKURestrictionsReasonCode - Gets the reason for restriction. Possible values include: 'QuotaId', 'NotAvailableForSubscription'
type ResourceSKURestrictionsReasonCode string

const (
	ResourceSKURestrictionsReasonCodeNotAvailableForSubscription ResourceSKURestrictionsReasonCode = "NotAvailableForSubscription"
	ResourceSKURestrictionsReasonCodeQuotaID                     ResourceSKURestrictionsReasonCode = "QuotaId"
)

// PossibleResourceSKURestrictionsReasonCodeValues returns the possible values for the ResourceSKURestrictionsReasonCode const type.
func PossibleResourceSKURestrictionsReasonCodeValues() []ResourceSKURestrictionsReasonCode {
	return []ResourceSKURestrictionsReasonCode{
		ResourceSKURestrictionsReasonCodeNotAvailableForSubscription,
		ResourceSKURestrictionsReasonCodeQuotaID,
	}
}

// ToPtr returns a *ResourceSKURestrictionsReasonCode pointing to the current value.
func (c ResourceSKURestrictionsReasonCode) ToPtr() *ResourceSKURestrictionsReasonCode {
	return &c
}

// ResourceSKURestrictionsType - Gets the type of restrictions. Possible values include: 'Location', 'Zone'
type ResourceSKURestrictionsType string

const (
	ResourceSKURestrictionsTypeLocation ResourceSKURestrictionsType = "Location"
	ResourceSKURestrictionsTypeZone     ResourceSKURestrictionsType = "Zone"
)

// PossibleResourceSKURestrictionsTypeValues returns the possible values for the ResourceSKURestrictionsType const type.
func PossibleResourceSKURestrictionsTypeValues() []ResourceSKURestrictionsType {
	return []ResourceSKURestrictionsType{
		ResourceSKURestrictionsTypeLocation,
		ResourceSKURestrictionsTypeZone,
	}
}

// ToPtr returns a *ResourceSKURestrictionsType pointing to the current value.
func (c ResourceSKURestrictionsType) ToPtr() *ResourceSKURestrictionsType {
	return &c
}

// RuntimeVersion - Runtime version
type RuntimeVersion string

const (
	RuntimeVersionJava11    RuntimeVersion = "Java_11"
	RuntimeVersionJava8     RuntimeVersion = "Java_8"
	RuntimeVersionNetCore31 RuntimeVersion = "NetCore_31"
)

// PossibleRuntimeVersionValues returns the possible values for the RuntimeVersion const type.
func PossibleRuntimeVersionValues() []RuntimeVersion {
	return []RuntimeVersion{
		RuntimeVersionJava11,
		RuntimeVersionJava8,
		RuntimeVersionNetCore31,
	}
}

// ToPtr returns a *RuntimeVersion pointing to the current value.
func (c RuntimeVersion) ToPtr() *RuntimeVersion {
	return &c
}

// SKUScaleType - Gets or sets the type of the scale.
type SKUScaleType string

const (
	SKUScaleTypeAutomatic SKUScaleType = "Automatic"
	SKUScaleTypeManual    SKUScaleType = "Manual"
	SKUScaleTypeNone      SKUScaleType = "None"
)

// PossibleSKUScaleTypeValues returns the possible values for the SKUScaleType const type.
func PossibleSKUScaleTypeValues() []SKUScaleType {
	return []SKUScaleType{
		SKUScaleTypeAutomatic,
		SKUScaleTypeManual,
		SKUScaleTypeNone,
	}
}

// ToPtr returns a *SKUScaleType pointing to the current value.
func (c SKUScaleType) ToPtr() *SKUScaleType {
	return &c
}

// SupportedRuntimePlatform - The platform of this runtime version (possible values: "Java" or ".NET").
type SupportedRuntimePlatform string

const (
	SupportedRuntimePlatformJava    SupportedRuntimePlatform = "Java"
	SupportedRuntimePlatformNETCore SupportedRuntimePlatform = ".NET Core"
)

// PossibleSupportedRuntimePlatformValues returns the possible values for the SupportedRuntimePlatform const type.
func PossibleSupportedRuntimePlatformValues() []SupportedRuntimePlatform {
	return []SupportedRuntimePlatform{
		SupportedRuntimePlatformJava,
		SupportedRuntimePlatformNETCore,
	}
}

// ToPtr returns a *SupportedRuntimePlatform pointing to the current value.
func (c SupportedRuntimePlatform) ToPtr() *SupportedRuntimePlatform {
	return &c
}

// SupportedRuntimeValue - The raw value which could be passed to deployment CRUD operations.
type SupportedRuntimeValue string

const (
	SupportedRuntimeValueJava11    SupportedRuntimeValue = "Java_11"
	SupportedRuntimeValueJava8     SupportedRuntimeValue = "Java_8"
	SupportedRuntimeValueNetCore31 SupportedRuntimeValue = "NetCore_31"
)

// PossibleSupportedRuntimeValueValues returns the possible values for the SupportedRuntimeValue const type.
func PossibleSupportedRuntimeValueValues() []SupportedRuntimeValue {
	return []SupportedRuntimeValue{
		SupportedRuntimeValueJava11,
		SupportedRuntimeValueJava8,
		SupportedRuntimeValueNetCore31,
	}
}

// ToPtr returns a *SupportedRuntimeValue pointing to the current value.
func (c SupportedRuntimeValue) ToPtr() *SupportedRuntimeValue {
	return &c
}

// TestKeyType - Type of the test key
type TestKeyType string

const (
	TestKeyTypePrimary   TestKeyType = "Primary"
	TestKeyTypeSecondary TestKeyType = "Secondary"
)

// PossibleTestKeyTypeValues returns the possible values for the TestKeyType const type.
func PossibleTestKeyTypeValues() []TestKeyType {
	return []TestKeyType{
		TestKeyTypePrimary,
		TestKeyTypeSecondary,
	}
}

// ToPtr returns a *TestKeyType pointing to the current value.
func (c TestKeyType) ToPtr() *TestKeyType {
	return &c
}

// TrafficDirection - The direction of required traffic
type TrafficDirection string

const (
	TrafficDirectionInbound  TrafficDirection = "Inbound"
	TrafficDirectionOutbound TrafficDirection = "Outbound"
)

// PossibleTrafficDirectionValues returns the possible values for the TrafficDirection const type.
func PossibleTrafficDirectionValues() []TrafficDirection {
	return []TrafficDirection{
		TrafficDirectionInbound,
		TrafficDirectionOutbound,
	}
}

// ToPtr returns a *TrafficDirection pointing to the current value.
func (c TrafficDirection) ToPtr() *TrafficDirection {
	return &c
}

// UserSourceType - Type of the source uploaded
type UserSourceType string

const (
	UserSourceTypeContainer  UserSourceType = "Container"
	UserSourceTypeJar        UserSourceType = "Jar"
	UserSourceTypeNetCoreZip UserSourceType = "NetCoreZip"
	UserSourceTypeSource     UserSourceType = "Source"
)

// PossibleUserSourceTypeValues returns the possible values for the UserSourceType const type.
func PossibleUserSourceTypeValues() []UserSourceType {
	return []UserSourceType{
		UserSourceTypeContainer,
		UserSourceTypeJar,
		UserSourceTypeNetCoreZip,
		UserSourceTypeSource,
	}
}

// ToPtr returns a *UserSourceType pointing to the current value.
func (c UserSourceType) ToPtr() *UserSourceType {
	return &c
}
