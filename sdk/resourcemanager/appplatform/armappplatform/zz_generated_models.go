//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AppResource - App resource payload
type AppResource struct {
	ProxyResource
	// The Managed Identity type of the app resource
	Identity *ManagedIdentityProperties `json:"identity,omitempty"`

	// The GEO location of the application, always the same with its parent resource
	Location *string `json:"location,omitempty"`

	// Properties of the App resource
	Properties *AppResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppResource.
func (a AppResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppResourceCollection - Object that includes an array of App resources and a possible link for next set
type AppResourceCollection struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of App resources
	Value []*AppResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppResourceCollection.
func (a AppResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AppResourceProperties - App resource properties payload
type AppResourceProperties struct {
	// Name of the active deployment of the App
	ActiveDeploymentName *string `json:"activeDeploymentName,omitempty"`

	// Indicate if end to end TLS is enabled.
	EnableEndToEndTLS *bool `json:"enableEndToEndTLS,omitempty"`

	// Fully qualified dns Name.
	Fqdn *string `json:"fqdn,omitempty"`

	// Indicate if only https is allowed.
	HTTPSOnly *bool `json:"httpsOnly,omitempty"`

	// Persistent disk settings
	PersistentDisk *PersistentDisk `json:"persistentDisk,omitempty"`

	// Indicates whether the App exposes public endpoint
	Public *bool `json:"public,omitempty"`

	// Temporary disk settings
	TemporaryDisk *TemporaryDisk `json:"temporaryDisk,omitempty"`

	// READ-ONLY; Date time when the resource is created
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the App
	ProvisioningState *AppResourceProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; URL of the App
	URL *string `json:"url,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppResourceProperties.
func (a AppResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activeDeploymentName", a.ActiveDeploymentName)
	populate(objectMap, "createdTime", (*timeRFC3339)(a.CreatedTime))
	populate(objectMap, "enableEndToEndTLS", a.EnableEndToEndTLS)
	populate(objectMap, "fqdn", a.Fqdn)
	populate(objectMap, "httpsOnly", a.HTTPSOnly)
	populate(objectMap, "persistentDisk", a.PersistentDisk)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "public", a.Public)
	populate(objectMap, "temporaryDisk", a.TemporaryDisk)
	populate(objectMap, "url", a.URL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppResourceProperties.
func (a *AppResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activeDeploymentName":
			err = unpopulate(val, &a.ActiveDeploymentName)
			delete(rawMsg, key)
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "enableEndToEndTLS":
			err = unpopulate(val, &a.EnableEndToEndTLS)
			delete(rawMsg, key)
		case "fqdn":
			err = unpopulate(val, &a.Fqdn)
			delete(rawMsg, key)
		case "httpsOnly":
			err = unpopulate(val, &a.HTTPSOnly)
			delete(rawMsg, key)
		case "persistentDisk":
			err = unpopulate(val, &a.PersistentDisk)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "public":
			err = unpopulate(val, &a.Public)
			delete(rawMsg, key)
		case "temporaryDisk":
			err = unpopulate(val, &a.TemporaryDisk)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, &a.URL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ApplicationInsightsAgentVersions - Application Insights agent versions properties payload
type ApplicationInsightsAgentVersions struct {
	// READ-ONLY; Indicates the version of application insight java agent
	Java *string `json:"java,omitempty" azure:"ro"`
}

// AppsBeginCreateOrUpdateOptions contains the optional parameters for the Apps.BeginCreateOrUpdate method.
type AppsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppsBeginDeleteOptions contains the optional parameters for the Apps.BeginDelete method.
type AppsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// AppsBeginUpdateOptions contains the optional parameters for the Apps.BeginUpdate method.
type AppsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppsGetOptions contains the optional parameters for the Apps.Get method.
type AppsGetOptions struct {
	// Indicates whether sync status
	SyncStatus *string
}

// AppsGetResourceUploadURLOptions contains the optional parameters for the Apps.GetResourceUploadURL method.
type AppsGetResourceUploadURLOptions struct {
	// placeholder for future optional parameters
}

// AppsListOptions contains the optional parameters for the Apps.List method.
type AppsListOptions struct {
	// placeholder for future optional parameters
}

// AppsValidateDomainOptions contains the optional parameters for the Apps.ValidateDomain method.
type AppsValidateDomainOptions struct {
	// placeholder for future optional parameters
}

// AvailableOperations - Available operations of the service
type AvailableOperations struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of available operation details
	Value []*OperationDetail `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AvailableOperations.
func (a AvailableOperations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

type AvailableRuntimeVersions struct {
	// READ-ONLY; A list of all supported runtime versions.
	Value []*SupportedRuntimeVersion `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AvailableRuntimeVersions.
func (a AvailableRuntimeVersions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// BindingResource - Binding resource payload
type BindingResource struct {
	ProxyResource
	// Properties of the Binding resource
	Properties *BindingResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BindingResource.
func (b BindingResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BindingResourceCollection - Object that includes an array of Binding resources and a possible link for next set
type BindingResourceCollection struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Binding resources
	Value []*BindingResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BindingResourceCollection.
func (b BindingResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BindingResourceProperties - Binding resource properties payload
type BindingResourceProperties struct {
	// Binding parameters of the Binding resource
	BindingParameters map[string]map[string]interface{} `json:"bindingParameters,omitempty"`

	// The key of the bound resource
	Key *string `json:"key,omitempty"`

	// The Azure resource id of the bound resource
	ResourceID *string `json:"resourceId,omitempty"`

	// READ-ONLY; Creation time of the Binding resource
	CreatedAt *string `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; The generated Spring Boot property file for this binding. The secret will be deducted.
	GeneratedProperties *string `json:"generatedProperties,omitempty" azure:"ro"`

	// READ-ONLY; The name of the bound resource
	ResourceName *string `json:"resourceName,omitempty" azure:"ro"`

	// READ-ONLY; The standard Azure resource type of the bound resource
	ResourceType *string `json:"resourceType,omitempty" azure:"ro"`

	// READ-ONLY; Update time of the Binding resource
	UpdatedAt *string `json:"updatedAt,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BindingResourceProperties.
func (b BindingResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bindingParameters", b.BindingParameters)
	populate(objectMap, "createdAt", b.CreatedAt)
	populate(objectMap, "generatedProperties", b.GeneratedProperties)
	populate(objectMap, "key", b.Key)
	populate(objectMap, "resourceId", b.ResourceID)
	populate(objectMap, "resourceName", b.ResourceName)
	populate(objectMap, "resourceType", b.ResourceType)
	populate(objectMap, "updatedAt", b.UpdatedAt)
	return json.Marshal(objectMap)
}

// BindingsBeginCreateOrUpdateOptions contains the optional parameters for the Bindings.BeginCreateOrUpdate method.
type BindingsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BindingsBeginDeleteOptions contains the optional parameters for the Bindings.BeginDelete method.
type BindingsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// BindingsBeginUpdateOptions contains the optional parameters for the Bindings.BeginUpdate method.
type BindingsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// BindingsGetOptions contains the optional parameters for the Bindings.Get method.
type BindingsGetOptions struct {
	// placeholder for future optional parameters
}

// BindingsListOptions contains the optional parameters for the Bindings.List method.
type BindingsListOptions struct {
	// placeholder for future optional parameters
}

// CertificateProperties - Certificate resource payload.
type CertificateProperties struct {
	// REQUIRED; The certificate name of key vault.
	KeyVaultCertName *string `json:"keyVaultCertName,omitempty"`

	// REQUIRED; The vault uri of user key vault.
	VaultURI *string `json:"vaultUri,omitempty"`

	// The certificate version of key vault.
	CertVersion *string `json:"certVersion,omitempty"`

	// READ-ONLY; The activate date of certificate.
	ActivateDate *string `json:"activateDate,omitempty" azure:"ro"`

	// READ-ONLY; The domain list of certificate.
	DNSNames []*string `json:"dnsNames,omitempty" azure:"ro"`

	// READ-ONLY; The expiration date of certificate.
	ExpirationDate *string `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; The issue date of certificate.
	IssuedDate *string `json:"issuedDate,omitempty" azure:"ro"`

	// READ-ONLY; The issuer of certificate.
	Issuer *string `json:"issuer,omitempty" azure:"ro"`

	// READ-ONLY; The subject name of certificate.
	SubjectName *string `json:"subjectName,omitempty" azure:"ro"`

	// READ-ONLY; The thumbprint of certificate.
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateProperties.
func (c CertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activateDate", c.ActivateDate)
	populate(objectMap, "certVersion", c.CertVersion)
	populate(objectMap, "dnsNames", c.DNSNames)
	populate(objectMap, "expirationDate", c.ExpirationDate)
	populate(objectMap, "issuedDate", c.IssuedDate)
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "keyVaultCertName", c.KeyVaultCertName)
	populate(objectMap, "subjectName", c.SubjectName)
	populate(objectMap, "thumbprint", c.Thumbprint)
	populate(objectMap, "vaultUri", c.VaultURI)
	return json.Marshal(objectMap)
}

// CertificateResource - Certificate resource payload.
type CertificateResource struct {
	ProxyResource
	// Properties of the certificate resource payload.
	Properties *CertificateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateResource.
func (c CertificateResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateResourceCollection - Collection compose of certificate resources list and a possible link for next page.
type CertificateResourceCollection struct {
	// The link to next page of certificate list.
	NextLink *string `json:"nextLink,omitempty"`

	// The certificate resources list.
	Value []*CertificateResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateResourceCollection.
func (c CertificateResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CertificatesBeginCreateOrUpdateOptions contains the optional parameters for the Certificates.BeginCreateOrUpdate method.
type CertificatesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CertificatesBeginDeleteOptions contains the optional parameters for the Certificates.BeginDelete method.
type CertificatesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// CertificatesGetOptions contains the optional parameters for the Certificates.Get method.
type CertificatesGetOptions struct {
	// placeholder for future optional parameters
}

// CertificatesListOptions contains the optional parameters for the Certificates.List method.
type CertificatesListOptions struct {
	// placeholder for future optional parameters
}

// CloudError - An error response from the service.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// An error response from the service.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - An error response from the service.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// ClusterResourceProperties - Service properties payload
type ClusterResourceProperties struct {
	// Network profile of the Service
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`

	// READ-ONLY; Provisioning state of the Service
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; ServiceInstanceEntity GUID which uniquely identifies a created resource
	ServiceID *string `json:"serviceId,omitempty" azure:"ro"`

	// READ-ONLY; Version of the Service
	Version *int32 `json:"version,omitempty" azure:"ro"`
}

// ConfigServerGitProperty - Property of git.
type ConfigServerGitProperty struct {
	// REQUIRED; URI of the repository
	URI *string `json:"uri,omitempty"`

	// Public sshKey of git repository.
	HostKey *string `json:"hostKey,omitempty"`

	// SshKey algorithm of git repository.
	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty"`

	// Label of the repository
	Label *string `json:"label,omitempty"`

	// Password of git repository basic auth.
	Password *string `json:"password,omitempty"`

	// Private sshKey algorithm of git repository.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Repositories of git.
	Repositories []*GitPatternRepository `json:"repositories,omitempty"`

	// Searching path of the repository
	SearchPaths []*string `json:"searchPaths,omitempty"`

	// Strict host key checking or not.
	StrictHostKeyChecking *bool `json:"strictHostKeyChecking,omitempty"`

	// Username of git repository basic auth.
	Username *string `json:"username,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerGitProperty.
func (c ConfigServerGitProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostKey", c.HostKey)
	populate(objectMap, "hostKeyAlgorithm", c.HostKeyAlgorithm)
	populate(objectMap, "label", c.Label)
	populate(objectMap, "password", c.Password)
	populate(objectMap, "privateKey", c.PrivateKey)
	populate(objectMap, "repositories", c.Repositories)
	populate(objectMap, "searchPaths", c.SearchPaths)
	populate(objectMap, "strictHostKeyChecking", c.StrictHostKeyChecking)
	populate(objectMap, "uri", c.URI)
	populate(objectMap, "username", c.Username)
	return json.Marshal(objectMap)
}

// ConfigServerProperties - Config server git properties payload
type ConfigServerProperties struct {
	// Settings of config server.
	ConfigServer *ConfigServerSettings `json:"configServer,omitempty"`

	// Error when apply config server settings.
	Error *Error `json:"error,omitempty"`

	// READ-ONLY; State of the config server.
	ProvisioningState *ConfigServerState `json:"provisioningState,omitempty" azure:"ro"`
}

// ConfigServerResource - Config Server resource
type ConfigServerResource struct {
	ProxyResource
	// Properties of the Config Server resource
	Properties *ConfigServerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerResource.
func (c ConfigServerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ConfigServerSettings - The settings of config server.
type ConfigServerSettings struct {
	// Property of git environment.
	GitProperty *ConfigServerGitProperty `json:"gitProperty,omitempty"`
}

// ConfigServerSettingsErrorRecord - Error record of the config server settings
type ConfigServerSettingsErrorRecord struct {
	// The detail error messages of the record
	Messages []*string `json:"messages,omitempty"`

	// The name of the config server settings error record
	Name *string `json:"name,omitempty"`

	// The uri of the config server settings error record
	URI *string `json:"uri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerSettingsErrorRecord.
func (c ConfigServerSettingsErrorRecord) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "messages", c.Messages)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "uri", c.URI)
	return json.Marshal(objectMap)
}

// ConfigServerSettingsValidateResult - Validation result for config server settings
type ConfigServerSettingsValidateResult struct {
	// The detail validation results
	Details []*ConfigServerSettingsErrorRecord `json:"details,omitempty"`

	// Indicate if the config server settings are valid
	IsValid *bool `json:"isValid,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerSettingsValidateResult.
func (c ConfigServerSettingsValidateResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "details", c.Details)
	populate(objectMap, "isValid", c.IsValid)
	return json.Marshal(objectMap)
}

// ConfigServersBeginUpdatePatchOptions contains the optional parameters for the ConfigServers.BeginUpdatePatch method.
type ConfigServersBeginUpdatePatchOptions struct {
	// placeholder for future optional parameters
}

// ConfigServersBeginUpdatePutOptions contains the optional parameters for the ConfigServers.BeginUpdatePut method.
type ConfigServersBeginUpdatePutOptions struct {
	// placeholder for future optional parameters
}

// ConfigServersBeginValidateOptions contains the optional parameters for the ConfigServers.BeginValidate method.
type ConfigServersBeginValidateOptions struct {
	// placeholder for future optional parameters
}

// ConfigServersGetOptions contains the optional parameters for the ConfigServers.Get method.
type ConfigServersGetOptions struct {
	// placeholder for future optional parameters
}

// CustomContainer - Custom container payload
type CustomContainer struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
	Args []*string `json:"args,omitempty"`

	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.
	Command []*string `json:"command,omitempty"`

	// Container image of the custom container. This should be in the form of : without the server name of the registry
	ContainerImage *string `json:"containerImage,omitempty"`

	// Credential of the image registry
	ImageRegistryCredential *ImageRegistryCredential `json:"imageRegistryCredential,omitempty"`

	// The name of the registry that contains the container image
	Server *string `json:"server,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomContainer.
func (c CustomContainer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "args", c.Args)
	populate(objectMap, "command", c.Command)
	populate(objectMap, "containerImage", c.ContainerImage)
	populate(objectMap, "imageRegistryCredential", c.ImageRegistryCredential)
	populate(objectMap, "server", c.Server)
	return json.Marshal(objectMap)
}

// CustomDomainProperties - Custom domain of app resource payload.
type CustomDomainProperties struct {
	// The bound certificate name of domain.
	CertName *string `json:"certName,omitempty"`

	// The thumbprint of bound certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`

	// READ-ONLY; The app name of domain.
	AppName *string `json:"appName,omitempty" azure:"ro"`
}

// CustomDomainResource - Custom domain resource payload.
type CustomDomainResource struct {
	ProxyResource
	// Properties of the custom domain resource.
	Properties *CustomDomainProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomDomainResource.
func (c CustomDomainResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CustomDomainResourceCollection - Collection compose of a custom domain resources list and a possible link for next page.
type CustomDomainResourceCollection struct {
	// The link to next page of custom domain list.
	NextLink *string `json:"nextLink,omitempty"`

	// The custom domain resources list.
	Value []*CustomDomainResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomDomainResourceCollection.
func (c CustomDomainResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CustomDomainValidatePayload - Custom domain validate payload.
type CustomDomainValidatePayload struct {
	// REQUIRED; Name to be validated
	Name *string `json:"name,omitempty"`
}

// CustomDomainValidateResult - Validation result for custom domain.
type CustomDomainValidateResult struct {
	// Indicates if domain name is valid.
	IsValid *bool `json:"isValid,omitempty"`

	// Message of why domain name is invalid.
	Message *string `json:"message,omitempty"`
}

// CustomDomainsBeginCreateOrUpdateOptions contains the optional parameters for the CustomDomains.BeginCreateOrUpdate method.
type CustomDomainsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomDomainsBeginDeleteOptions contains the optional parameters for the CustomDomains.BeginDelete method.
type CustomDomainsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// CustomDomainsBeginUpdateOptions contains the optional parameters for the CustomDomains.BeginUpdate method.
type CustomDomainsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomDomainsGetOptions contains the optional parameters for the CustomDomains.Get method.
type CustomDomainsGetOptions struct {
	// placeholder for future optional parameters
}

// CustomDomainsListOptions contains the optional parameters for the CustomDomains.List method.
type CustomDomainsListOptions struct {
	// placeholder for future optional parameters
}

// DeploymentInstance - Deployment instance payload
type DeploymentInstance struct {
	// READ-ONLY; Discovery status of the deployment instance
	DiscoveryStatus *string `json:"discoveryStatus,omitempty" azure:"ro"`

	// READ-ONLY; Name of the deployment instance
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Failed reason of the deployment instance
	Reason *string `json:"reason,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the deployment instance
	StartTime *string `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Status of the deployment instance
	Status *string `json:"status,omitempty" azure:"ro"`
}

// DeploymentResource - Deployment resource payload
type DeploymentResource struct {
	ProxyResource
	// Properties of the Deployment resource
	Properties *DeploymentResourceProperties `json:"properties,omitempty"`

	// Sku of the Deployment resource
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResource.
func (d DeploymentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "sku", d.SKU)
	return json.Marshal(objectMap)
}

// DeploymentResourceCollection - Object that includes an array of App resources and a possible link for next set
type DeploymentResourceCollection struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Deployment resources
	Value []*DeploymentResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResourceCollection.
func (d DeploymentResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeploymentResourceProperties - Deployment resource properties payload
type DeploymentResourceProperties struct {
	// Deployment settings of the Deployment
	DeploymentSettings *DeploymentSettings `json:"deploymentSettings,omitempty"`

	// Uploaded source information of the deployment.
	Source *UserSourceInfo `json:"source,omitempty"`

	// READ-ONLY; Indicates whether the Deployment is active
	Active *bool `json:"active,omitempty" azure:"ro"`

	// READ-ONLY; App name of the deployment
	AppName *string `json:"appName,omitempty" azure:"ro"`

	// READ-ONLY; Date time when the resource is created
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Collection of instances belong to the Deployment
	Instances []*DeploymentInstance `json:"instances,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the Deployment
	ProvisioningState *DeploymentResourceProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the Deployment
	Status *DeploymentResourceStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResourceProperties.
func (d DeploymentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "active", d.Active)
	populate(objectMap, "appName", d.AppName)
	populate(objectMap, "createdTime", (*timeRFC3339)(d.CreatedTime))
	populate(objectMap, "deploymentSettings", d.DeploymentSettings)
	populate(objectMap, "instances", d.Instances)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentResourceProperties.
func (d *DeploymentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "active":
			err = unpopulate(val, &d.Active)
			delete(rawMsg, key)
		case "appName":
			err = unpopulate(val, &d.AppName)
			delete(rawMsg, key)
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "deploymentSettings":
			err = unpopulate(val, &d.DeploymentSettings)
			delete(rawMsg, key)
		case "instances":
			err = unpopulate(val, &d.Instances)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &d.Source)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DeploymentSettings - Deployment settings payload
type DeploymentSettings struct {
	// Required CPU. This should be 1 for Basic tier, and in range [1, 4] for Standard tier. This is deprecated starting from API version 2021-06-01-preview.
	// Please use the resourceRequests field to set the
	// CPU size.
	CPU *int32 `json:"cpu,omitempty"`

	// Collection of environment variables
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty"`

	// JVM parameter
	JvmOptions *string `json:"jvmOptions,omitempty"`

	// Required Memory size in GB. This should be in range [1, 2] for Basic tier, and in range [1, 8] for Standard tier. This is deprecated starting from API
	// version 2021-06-01-preview. Please use the
	// resourceRequests field to set the the memory size.
	MemoryInGB *int32 `json:"memoryInGB,omitempty"`

	// The path to the .NET executable relative to zip root
	NetCoreMainEntryPath *string `json:"netCoreMainEntryPath,omitempty"`

	// The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old
	// field cpu and memoryInGB will be deprecated
	// later.
	ResourceRequests *ResourceRequests `json:"resourceRequests,omitempty"`

	// Runtime version
	RuntimeVersion *RuntimeVersion `json:"runtimeVersion,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentSettings.
func (d DeploymentSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cpu", d.CPU)
	populate(objectMap, "environmentVariables", d.EnvironmentVariables)
	populate(objectMap, "jvmOptions", d.JvmOptions)
	populate(objectMap, "memoryInGB", d.MemoryInGB)
	populate(objectMap, "netCoreMainEntryPath", d.NetCoreMainEntryPath)
	populate(objectMap, "resourceRequests", d.ResourceRequests)
	populate(objectMap, "runtimeVersion", d.RuntimeVersion)
	return json.Marshal(objectMap)
}

// DeploymentsBeginCreateOrUpdateOptions contains the optional parameters for the Deployments.BeginCreateOrUpdate method.
type DeploymentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginDeleteOptions contains the optional parameters for the Deployments.BeginDelete method.
type DeploymentsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginRestartOptions contains the optional parameters for the Deployments.BeginRestart method.
type DeploymentsBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginStartOptions contains the optional parameters for the Deployments.BeginStart method.
type DeploymentsBeginStartOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginStopOptions contains the optional parameters for the Deployments.BeginStop method.
type DeploymentsBeginStopOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsBeginUpdateOptions contains the optional parameters for the Deployments.BeginUpdate method.
type DeploymentsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetLogFileURLOptions contains the optional parameters for the Deployments.GetLogFileURL method.
type DeploymentsGetLogFileURLOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsGetOptions contains the optional parameters for the Deployments.Get method.
type DeploymentsGetOptions struct {
	// placeholder for future optional parameters
}

// DeploymentsListForClusterOptions contains the optional parameters for the Deployments.ListForCluster method.
type DeploymentsListForClusterOptions struct {
	// Version of the deployments to be listed
	Version []string
}

// DeploymentsListOptions contains the optional parameters for the Deployments.List method.
type DeploymentsListOptions struct {
	// Version of the deployments to be listed
	Version []string
}

// Error - The error code compose of code and message.
type Error struct {
	// The code of error.
	Code *string `json:"code,omitempty"`

	// The message of error.
	Message *string `json:"message,omitempty"`
}

// GitPatternRepository - Git repository property payload
type GitPatternRepository struct {
	// REQUIRED; Name of the repository
	Name *string `json:"name,omitempty"`

	// REQUIRED; URI of the repository
	URI *string `json:"uri,omitempty"`

	// Public sshKey of git repository.
	HostKey *string `json:"hostKey,omitempty"`

	// SshKey algorithm of git repository.
	HostKeyAlgorithm *string `json:"hostKeyAlgorithm,omitempty"`

	// Label of the repository
	Label *string `json:"label,omitempty"`

	// Password of git repository basic auth.
	Password *string `json:"password,omitempty"`

	// Collection of pattern of the repository
	Pattern []*string `json:"pattern,omitempty"`

	// Private sshKey algorithm of git repository.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Searching path of the repository
	SearchPaths []*string `json:"searchPaths,omitempty"`

	// Strict host key checking or not.
	StrictHostKeyChecking *bool `json:"strictHostKeyChecking,omitempty"`

	// Username of git repository basic auth.
	Username *string `json:"username,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GitPatternRepository.
func (g GitPatternRepository) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostKey", g.HostKey)
	populate(objectMap, "hostKeyAlgorithm", g.HostKeyAlgorithm)
	populate(objectMap, "label", g.Label)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "password", g.Password)
	populate(objectMap, "pattern", g.Pattern)
	populate(objectMap, "privateKey", g.PrivateKey)
	populate(objectMap, "searchPaths", g.SearchPaths)
	populate(objectMap, "strictHostKeyChecking", g.StrictHostKeyChecking)
	populate(objectMap, "uri", g.URI)
	populate(objectMap, "username", g.Username)
	return json.Marshal(objectMap)
}

// ImageRegistryCredential - Credential of the image registry
type ImageRegistryCredential struct {
	// The password of the image registry credential
	Password *string `json:"password,omitempty"`

	// The username of the image registry credential
	Username *string `json:"username,omitempty"`
}

// LogFileURLResponse - Log file URL payload
type LogFileURLResponse struct {
	// REQUIRED; URL of the log file
	URL *string `json:"url,omitempty"`
}

// LogSpecification - Specifications of the Log for Azure Monitoring
type LogSpecification struct {
	// Blob duration of the log
	BlobDuration *string `json:"blobDuration,omitempty"`

	// Localized friendly display name of the log
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the log
	Name *string `json:"name,omitempty"`
}

// ManagedIdentityProperties - Managed identity properties retrieved from ARM request headers.
type ManagedIdentityProperties struct {
	// Principal Id
	PrincipalID *string `json:"principalId,omitempty"`

	// Tenant Id
	TenantID *string `json:"tenantId,omitempty"`

	// Type of the managed identity
	Type *ManagedIdentityType `json:"type,omitempty"`
}

// MetricDimension - Specifications of the Dimension of metrics
type MetricDimension struct {
	// Localized friendly display name of the dimension
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the dimension
	Name *string `json:"name,omitempty"`

	// Whether this dimension should be included for the Shoebox export scenario
	ToBeExportedForShoebox *bool `json:"toBeExportedForShoebox,omitempty"`
}

// MetricSpecification - Specifications of the Metrics for Azure Monitoring
type MetricSpecification struct {
	// Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
	AggregationType *string `json:"aggregationType,omitempty"`

	// Name of the metric category that the metric belongs to. A metric can only belong to a single category.
	Category *string `json:"category,omitempty"`

	// Dimensions of the metric
	Dimensions []*MetricDimension `json:"dimensions,omitempty"`

	// Localized friendly description of the metric
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// Localized friendly display name of the metric
	DisplayName *string `json:"displayName,omitempty"`

	// Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.
	FillGapWithZero *bool `json:"fillGapWithZero,omitempty"`

	// Name of the metric
	Name *string `json:"name,omitempty"`

	// Name of the MDM namespace. Optional.
	SourceMdmNamespace *string `json:"sourceMdmNamespace,omitempty"`

	// Supported aggregation types
	SupportedAggregationTypes []*string `json:"supportedAggregationTypes,omitempty"`

	// Supported time grain types
	SupportedTimeGrainTypes []*string `json:"supportedTimeGrainTypes,omitempty"`

	// Unit that makes sense for the metric
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "fillGapWithZero", m.FillGapWithZero)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "sourceMdmNamespace", m.SourceMdmNamespace)
	populate(objectMap, "supportedAggregationTypes", m.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", m.SupportedTimeGrainTypes)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MonitoringSettingProperties - Monitoring Setting properties payload
type MonitoringSettingProperties struct {
	// Indicates the versions of application insight agent
	AppInsightsAgentVersions *ApplicationInsightsAgentVersions `json:"appInsightsAgentVersions,omitempty"`

	// Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings
	AppInsightsInstrumentationKey *string `json:"appInsightsInstrumentationKey,omitempty"`

	// Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0]
	AppInsightsSamplingRate *float64 `json:"appInsightsSamplingRate,omitempty"`

	// Error when apply Monitoring Setting changes.
	Error *Error `json:"error,omitempty"`

	// Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey
	// to indicate if monitoringSettings enabled
	// or not
	TraceEnabled *bool `json:"traceEnabled,omitempty"`

	// READ-ONLY; State of the Monitoring Setting.
	ProvisioningState *MonitoringSettingState `json:"provisioningState,omitempty" azure:"ro"`
}

// MonitoringSettingResource - Monitoring Setting resource
type MonitoringSettingResource struct {
	ProxyResource
	// Properties of the Monitoring Setting resource
	Properties *MonitoringSettingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MonitoringSettingResource.
func (m MonitoringSettingResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MonitoringSettingsBeginUpdatePatchOptions contains the optional parameters for the MonitoringSettings.BeginUpdatePatch method.
type MonitoringSettingsBeginUpdatePatchOptions struct {
	// placeholder for future optional parameters
}

// MonitoringSettingsBeginUpdatePutOptions contains the optional parameters for the MonitoringSettings.BeginUpdatePut method.
type MonitoringSettingsBeginUpdatePutOptions struct {
	// placeholder for future optional parameters
}

// MonitoringSettingsGetOptions contains the optional parameters for the MonitoringSettings.Get method.
type MonitoringSettingsGetOptions struct {
	// placeholder for future optional parameters
}

// NameAvailability - Name availability result payload
type NameAvailability struct {
	// Message why the name is not available
	Message *string `json:"message,omitempty"`

	// Indicates whether the name is available
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Reason why the name is not available
	Reason *string `json:"reason,omitempty"`
}

// NameAvailabilityParameters - Name availability parameters payload
type NameAvailabilityParameters struct {
	// REQUIRED; Name to be checked
	Name *string `json:"name,omitempty"`

	// REQUIRED; Type of the resource to check name availability
	Type *string `json:"type,omitempty"`
}

// NetworkProfile - Service network profile payload
type NetworkProfile struct {
	// Name of the resource group containing network resources of Azure Spring Cloud Apps
	AppNetworkResourceGroup *string `json:"appNetworkResourceGroup,omitempty"`

	// Fully qualified resource Id of the subnet to host Azure Spring Cloud Apps
	AppSubnetID *string `json:"appSubnetId,omitempty"`

	// Azure Spring Cloud service reserved CIDR
	ServiceCidr *string `json:"serviceCidr,omitempty"`

	// Name of the resource group containing network resources of Azure Spring Cloud Service Runtime
	ServiceRuntimeNetworkResourceGroup *string `json:"serviceRuntimeNetworkResourceGroup,omitempty"`

	// Fully qualified resource Id of the subnet to host Azure Spring Cloud Service Runtime
	ServiceRuntimeSubnetID *string `json:"serviceRuntimeSubnetId,omitempty"`

	// READ-ONLY; Desired outbound IP resources for Azure Spring Cloud instance.
	OutboundIPs *NetworkProfileOutboundIPs `json:"outboundIPs,omitempty" azure:"ro"`

	// READ-ONLY; Required inbound or outbound traffics for Azure Spring Cloud instance.
	RequiredTraffics []*RequiredTraffic `json:"requiredTraffics,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkProfile.
func (n NetworkProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appNetworkResourceGroup", n.AppNetworkResourceGroup)
	populate(objectMap, "appSubnetId", n.AppSubnetID)
	populate(objectMap, "outboundIPs", n.OutboundIPs)
	populate(objectMap, "requiredTraffics", n.RequiredTraffics)
	populate(objectMap, "serviceCidr", n.ServiceCidr)
	populate(objectMap, "serviceRuntimeNetworkResourceGroup", n.ServiceRuntimeNetworkResourceGroup)
	populate(objectMap, "serviceRuntimeSubnetId", n.ServiceRuntimeSubnetID)
	return json.Marshal(objectMap)
}

// NetworkProfileOutboundIPs - Desired outbound IP resources for Azure Spring Cloud instance.
type NetworkProfileOutboundIPs struct {
	// READ-ONLY; A list of public IP addresses.
	PublicIPs []*string `json:"publicIPs,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkProfileOutboundIPs.
func (n NetworkProfileOutboundIPs) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "publicIPs", n.PublicIPs)
	return json.Marshal(objectMap)
}

// OperationDetail - Operation detail payload
type OperationDetail struct {
	// Display of the operation
	Display *OperationDisplay `json:"display,omitempty"`

	// Indicates whether the operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Name of the operation
	Name *string `json:"name,omitempty"`

	// Origin of the operation
	Origin *string `json:"origin,omitempty"`

	// Properties of the operation
	Properties *OperationProperties `json:"properties,omitempty"`
}

// OperationDisplay - Operation display payload
type OperationDisplay struct {
	// Localized friendly description for the operation
	Description *string `json:"description,omitempty"`

	// Localized friendly name for the operation
	Operation *string `json:"operation,omitempty"`

	// Resource provider of the operation
	Provider *string `json:"provider,omitempty"`

	// Resource of the operation
	Resource *string `json:"resource,omitempty"`
}

// OperationProperties - Extra Operation properties
type OperationProperties struct {
	// Service specifications of the operation
	ServiceSpecification *ServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PersistentDisk - Persistent disk payload
type PersistentDisk struct {
	// Mount path of the persistent disk
	MountPath *string `json:"mountPath,omitempty"`

	// Size of the persistent disk in GB
	SizeInGB *int32 `json:"sizeInGB,omitempty"`

	// READ-ONLY; Size of the used persistent disk in GB
	UsedInGB *int32 `json:"usedInGB,omitempty" azure:"ro"`
}

// ProxyResource - The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

// RegenerateTestKeyRequestPayload - Regenerate test key request payload
type RegenerateTestKeyRequestPayload struct {
	// REQUIRED; Type of the test key
	KeyType *TestKeyType `json:"keyType,omitempty"`
}

// RequiredTraffic - Required inbound or outbound traffic for Azure Spring Cloud instance.
type RequiredTraffic struct {
	// READ-ONLY; The direction of required traffic
	Direction *TrafficDirection `json:"direction,omitempty" azure:"ro"`

	// READ-ONLY; The FQDN list of required traffic
	Fqdns []*string `json:"fqdns,omitempty" azure:"ro"`

	// READ-ONLY; The ip list of required traffic
	IPs []*string `json:"ips,omitempty" azure:"ro"`

	// READ-ONLY; The port of required traffic
	Port *int32 `json:"port,omitempty" azure:"ro"`

	// READ-ONLY; The protocol of required traffic
	Protocol *string `json:"protocol,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RequiredTraffic.
func (r RequiredTraffic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "direction", r.Direction)
	populate(objectMap, "fqdns", r.Fqdns)
	populate(objectMap, "ips", r.IPs)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "protocol", r.Protocol)
	return json.Marshal(objectMap)
}

// Resource - The core properties of ARM resources.
type Resource struct {
	// READ-ONLY; Fully qualified resource Id for the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ResourceRequests - Deployment resource request payload
type ResourceRequests struct {
	// Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.
	CPU *string `json:"cpu,omitempty"`

	// Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, …, 8Gi} for Standard
	// tier.
	Memory *string `json:"memory,omitempty"`
}

// ResourceSKU - Describes an available Azure Spring Cloud SKU.
type ResourceSKU struct {
	// Gets the capacity of SKU.
	Capacity *SKUCapacity `json:"capacity,omitempty"`

	// Gets a list of locations and availability zones in those locations where the SKU is available.
	LocationInfo []*ResourceSKULocationInfo `json:"locationInfo,omitempty"`

	// Gets the set of locations that the SKU is available.
	Locations []*string `json:"locations,omitempty"`

	// Gets the name of SKU.
	Name *string `json:"name,omitempty"`

	// Gets the type of resource the SKU applies to.
	ResourceType *string `json:"resourceType,omitempty"`

	// Gets the restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
	Restrictions []*ResourceSKURestrictions `json:"restrictions,omitempty"`

	// Gets the tier of SKU.
	Tier *string `json:"tier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKU.
func (r ResourceSKU) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capacity", r.Capacity)
	populate(objectMap, "locationInfo", r.LocationInfo)
	populate(objectMap, "locations", r.Locations)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "resourceType", r.ResourceType)
	populate(objectMap, "restrictions", r.Restrictions)
	populate(objectMap, "tier", r.Tier)
	return json.Marshal(objectMap)
}

type ResourceSKUCapabilities struct {
	// Gets an invariant to describe the feature.
	Name *string `json:"name,omitempty"`

	// Gets an invariant if the feature is measured by quantity.
	Value *string `json:"value,omitempty"`
}

// ResourceSKUCollection - Object that includes an array of Azure Spring Cloud SKU and a possible link for next set
type ResourceSKUCollection struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of resource SKU
	Value []*ResourceSKU `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKUCollection.
func (r ResourceSKUCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceSKULocationInfo - Locations and availability zones where the SKU is available
type ResourceSKULocationInfo struct {
	// Gets location of the SKU
	Location *string `json:"location,omitempty"`

	// Gets details of capabilities available to a SKU in specific zones.
	ZoneDetails []*ResourceSKUZoneDetails `json:"zoneDetails,omitempty"`

	// Gets list of availability zones where the SKU is supported.
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKULocationInfo.
func (r ResourceSKULocationInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "zoneDetails", r.ZoneDetails)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// ResourceSKURestrictionInfo - Information about the restriction where the SKU cannot be used
type ResourceSKURestrictionInfo struct {
	// Gets locations where the SKU is restricted
	Locations []*string `json:"locations,omitempty"`

	// Gets list of availability zones where the SKU is restricted.
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKURestrictionInfo.
func (r ResourceSKURestrictionInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "locations", r.Locations)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// ResourceSKURestrictions - Restrictions where the SKU cannot be used
type ResourceSKURestrictions struct {
	// Gets the reason for restriction. Possible values include: 'QuotaId', 'NotAvailableForSubscription'
	ReasonCode *ResourceSKURestrictionsReasonCode `json:"reasonCode,omitempty"`

	// Gets the information about the restriction where the SKU cannot be used.
	RestrictionInfo *ResourceSKURestrictionInfo `json:"restrictionInfo,omitempty"`

	// Gets the type of restrictions. Possible values include: 'Location', 'Zone'
	Type *ResourceSKURestrictionsType `json:"type,omitempty"`

	// Gets the value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
	Values []*string `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKURestrictions.
func (r ResourceSKURestrictions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "reasonCode", r.ReasonCode)
	populate(objectMap, "restrictionInfo", r.RestrictionInfo)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "values", r.Values)
	return json.Marshal(objectMap)
}

// ResourceSKUZoneDetails - Details of capabilities available to a SKU in specific zones
type ResourceSKUZoneDetails struct {
	// Gets a list of capabilities that are available for the SKU in the specified list of zones.
	Capabilities []*ResourceSKUCapabilities `json:"capabilities,omitempty"`

	// Gets the set of zones that the SKU is available in with the specified capabilities.
	Name []*string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSKUZoneDetails.
func (r ResourceSKUZoneDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", r.Capabilities)
	populate(objectMap, "name", r.Name)
	return json.Marshal(objectMap)
}

// ResourceUploadDefinition - Resource upload definition payload
type ResourceUploadDefinition struct {
	// Source relative path
	RelativePath *string `json:"relativePath,omitempty"`

	// Upload URL
	UploadURL *string `json:"uploadUrl,omitempty"`
}

// RuntimeVersionsListRuntimeVersionsOptions contains the optional parameters for the RuntimeVersions.ListRuntimeVersions method.
type RuntimeVersionsListRuntimeVersionsOptions struct {
	// placeholder for future optional parameters
}

// SKU - Sku of Azure Spring Cloud
type SKU struct {
	// Current capacity of the target resource
	Capacity *int32 `json:"capacity,omitempty"`

	// Name of the Sku
	Name *string `json:"name,omitempty"`

	// Tier of the Sku
	Tier *string `json:"tier,omitempty"`
}

// SKUCapacity - The SKU capacity
type SKUCapacity struct {
	// REQUIRED; Gets or sets the minimum.
	Minimum *int32 `json:"minimum,omitempty"`

	// Gets or sets the default.
	Default *int32 `json:"default,omitempty"`

	// Gets or sets the maximum.
	Maximum *int32 `json:"maximum,omitempty"`

	// Gets or sets the type of the scale.
	ScaleType *SKUScaleType `json:"scaleType,omitempty"`
}

// SKUsListOptions contains the optional parameters for the SKUs.List method.
type SKUsListOptions struct {
	// placeholder for future optional parameters
}

// ServiceResource - Service resource
type ServiceResource struct {
	TrackedResource
	// Properties of the Service resource
	Properties *ClusterResourceProperties `json:"properties,omitempty"`

	// Sku of the Service resource
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResource.
func (s ServiceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	return json.Marshal(objectMap)
}

// ServiceResourceList - Object that includes an array of Service resources and a possible link for next set
type ServiceResourceList struct {
	// URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// Collection of Service resources
	Value []*ServiceResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceList.
func (s ServiceResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceSpecification - Service specification payload
type ServiceSpecification struct {
	// Specifications of the Log for Azure Monitoring
	LogSpecifications []*LogSpecification `json:"logSpecifications,omitempty"`

	// Specifications of the Metrics for Azure Monitoring
	MetricSpecifications []*MetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// ServicesBeginCreateOrUpdateOptions contains the optional parameters for the Services.BeginCreateOrUpdate method.
type ServicesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServicesBeginDeleteOptions contains the optional parameters for the Services.BeginDelete method.
type ServicesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServicesBeginUpdateOptions contains the optional parameters for the Services.BeginUpdate method.
type ServicesBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServicesCheckNameAvailabilityOptions contains the optional parameters for the Services.CheckNameAvailability method.
type ServicesCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// ServicesDisableTestEndpointOptions contains the optional parameters for the Services.DisableTestEndpoint method.
type ServicesDisableTestEndpointOptions struct {
	// placeholder for future optional parameters
}

// ServicesEnableTestEndpointOptions contains the optional parameters for the Services.EnableTestEndpoint method.
type ServicesEnableTestEndpointOptions struct {
	// placeholder for future optional parameters
}

// ServicesGetOptions contains the optional parameters for the Services.Get method.
type ServicesGetOptions struct {
	// placeholder for future optional parameters
}

// ServicesListBySubscriptionOptions contains the optional parameters for the Services.ListBySubscription method.
type ServicesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ServicesListOptions contains the optional parameters for the Services.List method.
type ServicesListOptions struct {
	// placeholder for future optional parameters
}

// ServicesListTestKeysOptions contains the optional parameters for the Services.ListTestKeys method.
type ServicesListTestKeysOptions struct {
	// placeholder for future optional parameters
}

// ServicesRegenerateTestKeyOptions contains the optional parameters for the Services.RegenerateTestKey method.
type ServicesRegenerateTestKeyOptions struct {
	// placeholder for future optional parameters
}

// SupportedRuntimeVersion - Supported deployment runtime version descriptor.
type SupportedRuntimeVersion struct {
	// The platform of this runtime version (possible values: "Java" or ".NET").
	Platform *SupportedRuntimePlatform `json:"platform,omitempty"`

	// The raw value which could be passed to deployment CRUD operations.
	Value *SupportedRuntimeValue `json:"value,omitempty"`

	// The detailed version (major.minor) of the platform.
	Version *string `json:"version,omitempty"`
}

// TemporaryDisk - Temporary disk payload
type TemporaryDisk struct {
	// Mount path of the temporary disk
	MountPath *string `json:"mountPath,omitempty"`

	// Size of the temporary disk in GB
	SizeInGB *int32 `json:"sizeInGB,omitempty"`
}

// TestKeys - Test keys payload
type TestKeys struct {
	// Indicates whether the test endpoint feature enabled or not
	Enabled *bool `json:"enabled,omitempty"`

	// Primary key
	PrimaryKey *string `json:"primaryKey,omitempty"`

	// Primary test endpoint
	PrimaryTestEndpoint *string `json:"primaryTestEndpoint,omitempty"`

	// Secondary key
	SecondaryKey *string `json:"secondaryKey,omitempty"`

	// Secondary test endpoint
	SecondaryTestEndpoint *string `json:"secondaryTestEndpoint,omitempty"`
}

// TrackedResource - The resource model definition for a ARM tracked top level resource.
type TrackedResource struct {
	Resource
	// The GEO location of the resource.
	Location *string `json:"location,omitempty"`

	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// UserSourceInfo - Source information for a deployment
type UserSourceInfo struct {
	// Selector for the artifact to be used for the deployment for multi-module projects. This should be the relative path to the target module/project.
	ArtifactSelector *string `json:"artifactSelector,omitempty"`

	// Custom container payload
	CustomContainer *CustomContainer `json:"customContainer,omitempty"`

	// Relative path of the storage which stores the source
	RelativePath *string `json:"relativePath,omitempty"`

	// Type of the source uploaded
	Type *UserSourceType `json:"type,omitempty"`

	// Version of the source
	Version *string `json:"version,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
