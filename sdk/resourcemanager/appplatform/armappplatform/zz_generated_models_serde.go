//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappplatform

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type APIPortalProperties.
func (a APIPortalProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "gatewayIds", a.GatewayIDs)
	populate(objectMap, "httpsOnly", a.HTTPSOnly)
	populate(objectMap, "instances", a.Instances)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "public", a.Public)
	populate(objectMap, "resourceRequests", a.ResourceRequests)
	populate(objectMap, "sourceUrls", a.SourceUrls)
	populate(objectMap, "ssoProperties", a.SsoProperties)
	populate(objectMap, "url", a.URL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ActiveDeploymentCollection.
func (a ActiveDeploymentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activeDeploymentNames", a.ActiveDeploymentNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppResource.
func (a AppResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppResourceProperties.
func (a AppResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addonConfigs", a.AddonConfigs)
	populate(objectMap, "customPersistentDisks", a.CustomPersistentDisks)
	populate(objectMap, "enableEndToEndTLS", a.EnableEndToEndTLS)
	populate(objectMap, "fqdn", a.Fqdn)
	populate(objectMap, "httpsOnly", a.HTTPSOnly)
	populate(objectMap, "loadedCertificates", a.LoadedCertificates)
	populate(objectMap, "persistentDisk", a.PersistentDisk)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "public", a.Public)
	populate(objectMap, "temporaryDisk", a.TemporaryDisk)
	populate(objectMap, "url", a.URL)
	populate(objectMap, "vnetAddons", a.VnetAddons)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFileVolume.
func (a AzureFileVolume) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "mountOptions", a.MountOptions)
	populate(objectMap, "mountPath", a.MountPath)
	populate(objectMap, "readOnly", a.ReadOnly)
	populate(objectMap, "shareName", a.ShareName)
	objectMap["type"] = TypeAzureFileVolume
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureFileVolume.
func (a *AzureFileVolume) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "mountOptions":
			err = unpopulate(val, "MountOptions", &a.MountOptions)
			delete(rawMsg, key)
		case "mountPath":
			err = unpopulate(val, "MountPath", &a.MountPath)
			delete(rawMsg, key)
		case "readOnly":
			err = unpopulate(val, "ReadOnly", &a.ReadOnly)
			delete(rawMsg, key)
		case "shareName":
			err = unpopulate(val, "ShareName", &a.ShareName)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BindingResource.
func (b BindingResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BindingResourceProperties.
func (b BindingResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bindingParameters", b.BindingParameters)
	populate(objectMap, "createdAt", b.CreatedAt)
	populate(objectMap, "generatedProperties", b.GeneratedProperties)
	populate(objectMap, "key", b.Key)
	populate(objectMap, "resourceId", b.ResourceID)
	populate(objectMap, "resourceName", b.ResourceName)
	populate(objectMap, "resourceType", b.ResourceType)
	populate(objectMap, "updatedAt", b.UpdatedAt)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BuildProperties.
func (b BuildProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "agentPool", b.AgentPool)
	populate(objectMap, "builder", b.Builder)
	populate(objectMap, "env", b.Env)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	populate(objectMap, "relativePath", b.RelativePath)
	populate(objectMap, "resourceRequests", b.ResourceRequests)
	populate(objectMap, "triggeredBuildResult", b.TriggeredBuildResult)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BuildResultProperties.
func (b BuildResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildPodName", b.BuildPodName)
	populate(objectMap, "buildStages", b.BuildStages)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BuildResultUserSourceInfo.
func (b BuildResultUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildResultId", b.BuildResultID)
	objectMap["type"] = "BuildResult"
	populate(objectMap, "version", b.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BuildResultUserSourceInfo.
func (b *BuildResultUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "buildResultId":
			err = unpopulate(val, "BuildResultID", &b.BuildResultID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &b.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &b.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BuilderProperties.
func (b BuilderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildpackGroups", b.BuildpackGroups)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	populate(objectMap, "stack", b.Stack)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BuildpackBindingLaunchProperties.
func (b BuildpackBindingLaunchProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "secrets", b.Secrets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BuildpacksGroupProperties.
func (b BuildpacksGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildpacks", b.Buildpacks)
	populate(objectMap, "name", b.Name)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateProperties.
func (c CertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activateDate", c.ActivateDate)
	populate(objectMap, "dnsNames", c.DNSNames)
	populate(objectMap, "expirationDate", c.ExpirationDate)
	populate(objectMap, "issuedDate", c.IssuedDate)
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "subjectName", c.SubjectName)
	populate(objectMap, "thumbprint", c.Thumbprint)
	objectMap["type"] = c.Type
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateResource.
func (c CertificateResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "systemData", c.SystemData)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateResource.
func (c *CertificateResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &c.Name)
			delete(rawMsg, key)
		case "properties":
			c.Properties, err = unmarshalCertificatePropertiesClassification(val)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &c.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerGitProperty.
func (c ConfigServerGitProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostKey", c.HostKey)
	populate(objectMap, "hostKeyAlgorithm", c.HostKeyAlgorithm)
	populate(objectMap, "label", c.Label)
	populate(objectMap, "password", c.Password)
	populate(objectMap, "privateKey", c.PrivateKey)
	populate(objectMap, "repositories", c.Repositories)
	populate(objectMap, "searchPaths", c.SearchPaths)
	populate(objectMap, "strictHostKeyChecking", c.StrictHostKeyChecking)
	populate(objectMap, "uri", c.URI)
	populate(objectMap, "username", c.Username)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigServerResource.
func (c ConfigServerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "systemData", c.SystemData)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationServiceGitProperty.
func (c ConfigurationServiceGitProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "repositories", c.Repositories)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationServiceGitRepository.
func (c ConfigurationServiceGitRepository) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostKey", c.HostKey)
	populate(objectMap, "hostKeyAlgorithm", c.HostKeyAlgorithm)
	populate(objectMap, "label", c.Label)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "password", c.Password)
	populate(objectMap, "patterns", c.Patterns)
	populate(objectMap, "privateKey", c.PrivateKey)
	populate(objectMap, "searchPaths", c.SearchPaths)
	populate(objectMap, "strictHostKeyChecking", c.StrictHostKeyChecking)
	populate(objectMap, "uri", c.URI)
	populate(objectMap, "username", c.Username)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationServiceProperties.
func (c ConfigurationServiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "instances", c.Instances)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "resourceRequests", c.ResourceRequests)
	populate(objectMap, "settings", c.Settings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContentCertificateProperties.
func (c ContentCertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activateDate", c.ActivateDate)
	populate(objectMap, "content", c.Content)
	populate(objectMap, "dnsNames", c.DNSNames)
	populate(objectMap, "expirationDate", c.ExpirationDate)
	populate(objectMap, "issuedDate", c.IssuedDate)
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "subjectName", c.SubjectName)
	populate(objectMap, "thumbprint", c.Thumbprint)
	objectMap["type"] = "ContentCertificate"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContentCertificateProperties.
func (c *ContentCertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activateDate":
			err = unpopulate(val, "ActivateDate", &c.ActivateDate)
			delete(rawMsg, key)
		case "content":
			err = unpopulate(val, "Content", &c.Content)
			delete(rawMsg, key)
		case "dnsNames":
			err = unpopulate(val, "DNSNames", &c.DNSNames)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulate(val, "ExpirationDate", &c.ExpirationDate)
			delete(rawMsg, key)
		case "issuedDate":
			err = unpopulate(val, "IssuedDate", &c.IssuedDate)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, "Issuer", &c.Issuer)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &c.ProvisioningState)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, "SubjectName", &c.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, "Thumbprint", &c.Thumbprint)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CustomContainer.
func (c CustomContainer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "args", c.Args)
	populate(objectMap, "command", c.Command)
	populate(objectMap, "containerImage", c.ContainerImage)
	populate(objectMap, "imageRegistryCredential", c.ImageRegistryCredential)
	populate(objectMap, "languageFramework", c.LanguageFramework)
	populate(objectMap, "server", c.Server)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomContainerUserSourceInfo.
func (c CustomContainerUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customContainer", c.CustomContainer)
	objectMap["type"] = "Container"
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomContainerUserSourceInfo.
func (c *CustomContainerUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "customContainer":
			err = unpopulate(val, "CustomContainer", &c.CustomContainer)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &c.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &c.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CustomDomainResource.
func (c CustomDomainResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "systemData", c.SystemData)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomPersistentDiskProperties.
func (c CustomPersistentDiskProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "mountOptions", c.MountOptions)
	populate(objectMap, "mountPath", c.MountPath)
	populate(objectMap, "readOnly", c.ReadOnly)
	objectMap["type"] = c.Type
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomPersistentDiskResource.
func (c CustomPersistentDiskResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customPersistentDiskProperties", c.CustomPersistentDiskProperties)
	populate(objectMap, "storageId", c.StorageID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomPersistentDiskResource.
func (c *CustomPersistentDiskResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "customPersistentDiskProperties":
			c.CustomPersistentDiskProperties, err = unmarshalCustomPersistentDiskPropertiesClassification(val)
			delete(rawMsg, key)
		case "storageId":
			err = unpopulate(val, "StorageID", &c.StorageID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResource.
func (d DeploymentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "sku", d.SKU)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentResourceProperties.
func (d DeploymentResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "active", d.Active)
	populate(objectMap, "deploymentSettings", d.DeploymentSettings)
	populate(objectMap, "instances", d.Instances)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentResourceProperties.
func (d *DeploymentResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "active":
			err = unpopulate(val, "Active", &d.Active)
			delete(rawMsg, key)
		case "deploymentSettings":
			err = unpopulate(val, "DeploymentSettings", &d.DeploymentSettings)
			delete(rawMsg, key)
		case "instances":
			err = unpopulate(val, "Instances", &d.Instances)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
			delete(rawMsg, key)
		case "source":
			d.Source, err = unmarshalUserSourceInfoClassification(val)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentSettings.
func (d DeploymentSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addonConfigs", d.AddonConfigs)
	populate(objectMap, "containerProbeSettings", d.ContainerProbeSettings)
	populate(objectMap, "environmentVariables", d.EnvironmentVariables)
	populate(objectMap, "livenessProbe", d.LivenessProbe)
	populate(objectMap, "readinessProbe", d.ReadinessProbe)
	populate(objectMap, "resourceRequests", d.ResourceRequests)
	populate(objectMap, "startupProbe", d.StartupProbe)
	populate(objectMap, "terminationGracePeriodSeconds", d.TerminationGracePeriodSeconds)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExecAction.
func (e ExecAction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "command", e.Command)
	objectMap["type"] = ProbeActionTypeExecAction
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExecAction.
func (e *ExecAction) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", e, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "command":
			err = unpopulate(val, "Command", &e.Command)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &e.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", e, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GatewayAPIRoute.
func (g GatewayAPIRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", g.Description)
	populate(objectMap, "filters", g.Filters)
	populate(objectMap, "order", g.Order)
	populate(objectMap, "predicates", g.Predicates)
	populate(objectMap, "ssoEnabled", g.SsoEnabled)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "title", g.Title)
	populate(objectMap, "tokenRelay", g.TokenRelay)
	populate(objectMap, "uri", g.URI)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GatewayCorsProperties.
func (g GatewayCorsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowCredentials", g.AllowCredentials)
	populate(objectMap, "allowedHeaders", g.AllowedHeaders)
	populate(objectMap, "allowedMethods", g.AllowedMethods)
	populate(objectMap, "allowedOrigins", g.AllowedOrigins)
	populate(objectMap, "exposedHeaders", g.ExposedHeaders)
	populate(objectMap, "maxAge", g.MaxAge)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GatewayOperatorProperties.
func (g GatewayOperatorProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "instances", g.Instances)
	populate(objectMap, "resourceRequests", g.ResourceRequests)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GatewayProperties.
func (g GatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiMetadataProperties", g.APIMetadataProperties)
	populate(objectMap, "corsProperties", g.CorsProperties)
	populate(objectMap, "httpsOnly", g.HTTPSOnly)
	populate(objectMap, "instances", g.Instances)
	populate(objectMap, "operatorProperties", g.OperatorProperties)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "public", g.Public)
	populate(objectMap, "resourceRequests", g.ResourceRequests)
	populate(objectMap, "ssoProperties", g.SsoProperties)
	populate(objectMap, "url", g.URL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GatewayRouteConfigProperties.
func (g GatewayRouteConfigProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appResourceId", g.AppResourceID)
	populate(objectMap, "openApi", g.OpenAPI)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "routes", g.Routes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GitPatternRepository.
func (g GitPatternRepository) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostKey", g.HostKey)
	populate(objectMap, "hostKeyAlgorithm", g.HostKeyAlgorithm)
	populate(objectMap, "label", g.Label)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "password", g.Password)
	populate(objectMap, "pattern", g.Pattern)
	populate(objectMap, "privateKey", g.PrivateKey)
	populate(objectMap, "searchPaths", g.SearchPaths)
	populate(objectMap, "strictHostKeyChecking", g.StrictHostKeyChecking)
	populate(objectMap, "uri", g.URI)
	populate(objectMap, "username", g.Username)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HTTPGetAction.
func (h HTTPGetAction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "path", h.Path)
	populate(objectMap, "scheme", h.Scheme)
	objectMap["type"] = ProbeActionTypeHTTPGetAction
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HTTPGetAction.
func (h *HTTPGetAction) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", h, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "path":
			err = unpopulate(val, "Path", &h.Path)
			delete(rawMsg, key)
		case "scheme":
			err = unpopulate(val, "Scheme", &h.Scheme)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &h.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", h, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JarUploadedUserSourceInfo.
func (j JarUploadedUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jvmOptions", j.JvmOptions)
	populate(objectMap, "relativePath", j.RelativePath)
	populate(objectMap, "runtimeVersion", j.RuntimeVersion)
	objectMap["type"] = "Jar"
	populate(objectMap, "version", j.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JarUploadedUserSourceInfo.
func (j *JarUploadedUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", j, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jvmOptions":
			err = unpopulate(val, "JvmOptions", &j.JvmOptions)
			delete(rawMsg, key)
		case "relativePath":
			err = unpopulate(val, "RelativePath", &j.RelativePath)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, "RuntimeVersion", &j.RuntimeVersion)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &j.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &j.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", j, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type KeyVaultCertificateProperties.
func (k KeyVaultCertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activateDate", k.ActivateDate)
	populate(objectMap, "certVersion", k.CertVersion)
	populate(objectMap, "dnsNames", k.DNSNames)
	populate(objectMap, "excludePrivateKey", k.ExcludePrivateKey)
	populate(objectMap, "expirationDate", k.ExpirationDate)
	populate(objectMap, "issuedDate", k.IssuedDate)
	populate(objectMap, "issuer", k.Issuer)
	populate(objectMap, "keyVaultCertName", k.KeyVaultCertName)
	populate(objectMap, "provisioningState", k.ProvisioningState)
	populate(objectMap, "subjectName", k.SubjectName)
	populate(objectMap, "thumbprint", k.Thumbprint)
	objectMap["type"] = "KeyVaultCertificate"
	populate(objectMap, "vaultUri", k.VaultURI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KeyVaultCertificateProperties.
func (k *KeyVaultCertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", k, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activateDate":
			err = unpopulate(val, "ActivateDate", &k.ActivateDate)
			delete(rawMsg, key)
		case "certVersion":
			err = unpopulate(val, "CertVersion", &k.CertVersion)
			delete(rawMsg, key)
		case "dnsNames":
			err = unpopulate(val, "DNSNames", &k.DNSNames)
			delete(rawMsg, key)
		case "excludePrivateKey":
			err = unpopulate(val, "ExcludePrivateKey", &k.ExcludePrivateKey)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulate(val, "ExpirationDate", &k.ExpirationDate)
			delete(rawMsg, key)
		case "issuedDate":
			err = unpopulate(val, "IssuedDate", &k.IssuedDate)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, "Issuer", &k.Issuer)
			delete(rawMsg, key)
		case "keyVaultCertName":
			err = unpopulate(val, "KeyVaultCertName", &k.KeyVaultCertName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &k.ProvisioningState)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, "SubjectName", &k.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, "Thumbprint", &k.Thumbprint)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &k.Type)
			delete(rawMsg, key)
		case "vaultUri":
			err = unpopulate(val, "VaultURI", &k.VaultURI)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", k, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagedIdentityProperties.
func (m ManagedIdentityProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MonitoringSettingResource.
func (m MonitoringSettingResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NetCoreZipUploadedUserSourceInfo.
func (n NetCoreZipUploadedUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "netCoreMainEntryPath", n.NetCoreMainEntryPath)
	populate(objectMap, "relativePath", n.RelativePath)
	populate(objectMap, "runtimeVersion", n.RuntimeVersion)
	objectMap["type"] = "NetCoreZip"
	populate(objectMap, "version", n.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NetCoreZipUploadedUserSourceInfo.
func (n *NetCoreZipUploadedUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "netCoreMainEntryPath":
			err = unpopulate(val, "NetCoreMainEntryPath", &n.NetCoreMainEntryPath)
			delete(rawMsg, key)
		case "relativePath":
			err = unpopulate(val, "RelativePath", &n.RelativePath)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, "RuntimeVersion", &n.RuntimeVersion)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &n.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &n.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type NetworkProfile.
func (n NetworkProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appNetworkResourceGroup", n.AppNetworkResourceGroup)
	populate(objectMap, "appSubnetId", n.AppSubnetID)
	populate(objectMap, "ingressConfig", n.IngressConfig)
	populate(objectMap, "outboundIPs", n.OutboundIPs)
	populate(objectMap, "requiredTraffics", n.RequiredTraffics)
	populate(objectMap, "serviceCidr", n.ServiceCidr)
	populate(objectMap, "serviceRuntimeNetworkResourceGroup", n.ServiceRuntimeNetworkResourceGroup)
	populate(objectMap, "serviceRuntimeSubnetId", n.ServiceRuntimeSubnetID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NetworkProfileOutboundIPs.
func (n NetworkProfileOutboundIPs) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "publicIPs", n.PublicIPs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Probe.
func (p Probe) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disableProbe", p.DisableProbe)
	populate(objectMap, "failureThreshold", p.FailureThreshold)
	populate(objectMap, "initialDelaySeconds", p.InitialDelaySeconds)
	populate(objectMap, "periodSeconds", p.PeriodSeconds)
	populate(objectMap, "probeAction", p.ProbeAction)
	populate(objectMap, "successThreshold", p.SuccessThreshold)
	populate(objectMap, "timeoutSeconds", p.TimeoutSeconds)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Probe.
func (p *Probe) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "disableProbe":
			err = unpopulate(val, "DisableProbe", &p.DisableProbe)
			delete(rawMsg, key)
		case "failureThreshold":
			err = unpopulate(val, "FailureThreshold", &p.FailureThreshold)
			delete(rawMsg, key)
		case "initialDelaySeconds":
			err = unpopulate(val, "InitialDelaySeconds", &p.InitialDelaySeconds)
			delete(rawMsg, key)
		case "periodSeconds":
			err = unpopulate(val, "PeriodSeconds", &p.PeriodSeconds)
			delete(rawMsg, key)
		case "probeAction":
			p.ProbeAction, err = unmarshalProbeActionClassification(val)
			delete(rawMsg, key)
		case "successThreshold":
			err = unpopulate(val, "SuccessThreshold", &p.SuccessThreshold)
			delete(rawMsg, key)
		case "timeoutSeconds":
			err = unpopulate(val, "TimeoutSeconds", &p.TimeoutSeconds)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RequiredTraffic.
func (r RequiredTraffic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "direction", r.Direction)
	populate(objectMap, "fqdns", r.Fqdns)
	populate(objectMap, "ips", r.IPs)
	populate(objectMap, "port", r.Port)
	populate(objectMap, "protocol", r.Protocol)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceRegistryProperties.
func (s ServiceRegistryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "instances", s.Instances)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "resourceRequests", s.ResourceRequests)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResource.
func (s ServiceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SourceUploadedUserSourceInfo.
func (s SourceUploadedUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "artifactSelector", s.ArtifactSelector)
	populate(objectMap, "relativePath", s.RelativePath)
	populate(objectMap, "runtimeVersion", s.RuntimeVersion)
	objectMap["type"] = "Source"
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceUploadedUserSourceInfo.
func (s *SourceUploadedUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "artifactSelector":
			err = unpopulate(val, "ArtifactSelector", &s.ArtifactSelector)
			delete(rawMsg, key)
		case "relativePath":
			err = unpopulate(val, "RelativePath", &s.RelativePath)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, "RuntimeVersion", &s.RuntimeVersion)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &s.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SsoProperties.
func (s SsoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clientId", s.ClientID)
	populate(objectMap, "clientSecret", s.ClientSecret)
	populate(objectMap, "issuerUri", s.IssuerURI)
	populate(objectMap, "scope", s.Scope)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StorageAccount.
func (s StorageAccount) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountKey", s.AccountKey)
	populate(objectMap, "accountName", s.AccountName)
	objectMap["storageType"] = StorageTypeStorageAccount
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StorageAccount.
func (s *StorageAccount) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountKey":
			err = unpopulate(val, "AccountKey", &s.AccountKey)
			delete(rawMsg, key)
		case "accountName":
			err = unpopulate(val, "AccountName", &s.AccountName)
			delete(rawMsg, key)
		case "storageType":
			err = unpopulate(val, "StorageType", &s.StorageType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StorageResource.
func (s StorageResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StorageResource.
func (s *StorageResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &s.Name)
			delete(rawMsg, key)
		case "properties":
			s.Properties, err = unmarshalStoragePropertiesClassification(val)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TCPSocketAction.
func (t TCPSocketAction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["type"] = ProbeActionTypeTCPSocketAction
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TCPSocketAction.
func (t *TCPSocketAction) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "type":
			err = unpopulate(val, "Type", &t.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "systemData", t.SystemData)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UploadedUserSourceInfo.
func (u UploadedUserSourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "relativePath", u.RelativePath)
	objectMap["type"] = "UploadedUserSourceInfo"
	populate(objectMap, "version", u.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UploadedUserSourceInfo.
func (u *UploadedUserSourceInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "relativePath":
			err = unpopulate(val, "RelativePath", &u.RelativePath)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &u.Type)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, "Version", &u.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
