//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappservice_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/appservice/armappservice"
)

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GenerateStaticSiteWorkflowPreview.json
func ExampleStaticSitesClient_PreviewWorkflow() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.PreviewWorkflow(ctx,
		"<location>",
		armappservice.StaticSitesWorkflowPreviewRequest{
			Properties: &armappservice.StaticSitesWorkflowPreviewRequestProperties{
				Branch: to.StringPtr("<branch>"),
				BuildProperties: &armappservice.StaticSiteBuildProperties{
					APILocation:         to.StringPtr("<apilocation>"),
					AppArtifactLocation: to.StringPtr("<app-artifact-location>"),
					AppLocation:         to.StringPtr("<app-location>"),
				},
				RepositoryURL: to.StringPtr("<repository-url>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSitesWorkflowPreview.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetAllStaticSites.json
func ExampleStaticSitesClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.List(nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSites.json
func ExampleStaticSitesClient_GetStaticSitesByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.GetStaticSitesByResourceGroup("<resource-group-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSite.json
func ExampleStaticSitesClient_GetStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSite.json
func ExampleStaticSitesClient_BeginCreateOrUpdateStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdateStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StaticSiteARMResource{
			Resource: armappservice.Resource{
				Location: to.StringPtr("<location>"),
			},
			Properties: &armappservice.StaticSite{
				Branch: to.StringPtr("<branch>"),
				BuildProperties: &armappservice.StaticSiteBuildProperties{
					APILocation:         to.StringPtr("<apilocation>"),
					AppArtifactLocation: to.StringPtr("<app-artifact-location>"),
					AppLocation:         to.StringPtr("<app-location>"),
				},
				RepositoryToken: to.StringPtr("<repository-token>"),
				RepositoryURL:   to.StringPtr("<repository-url>"),
			},
			SKU: &armappservice.SKUDescription{
				Name: to.StringPtr("<name>"),
				Tier: to.StringPtr("<tier>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DeleteStaticSite.json
func ExampleStaticSitesClient_BeginDeleteStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/PatchStaticSite.json
func ExampleStaticSitesClient_UpdateStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.UpdateStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StaticSitePatchResource{
			Properties: &armappservice.StaticSite{},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteUsers.json
func ExampleStaticSitesClient_ListStaticSiteUsers() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.ListStaticSiteUsers("<resource-group-name>",
		"<name>",
		"<authprovider>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteUserARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DeleteStaticSiteUser.json
func ExampleStaticSitesClient_DeleteStaticSiteUser() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	_, err = client.DeleteStaticSiteUser(ctx,
		"<resource-group-name>",
		"<name>",
		"<authprovider>",
		"<userid>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/UpdateStaticSiteUser.json
func ExampleStaticSitesClient_UpdateStaticSiteUser() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.UpdateStaticSiteUser(ctx,
		"<resource-group-name>",
		"<name>",
		"<authprovider>",
		"<userid>",
		armappservice.StaticSiteUserARMResource{
			Properties: &armappservice.StaticSiteUserARMResourceProperties{
				Roles: to.StringPtr("<roles>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSiteBuilds.json
func ExampleStaticSitesClient_GetStaticSiteBuilds() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.GetStaticSiteBuilds("<resource-group-name>",
		"<name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteBuildARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSiteBuild.json
func ExampleStaticSitesClient_GetStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteBuildARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DeleteStaticSiteBuild.json
func ExampleStaticSitesClient_BeginDeleteStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSiteBuildAppSettings.json
func ExampleStaticSitesClient_CreateOrUpdateStaticSiteBuildAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdateStaticSiteBuildAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSiteBuildFunctionAppSettings.json
func ExampleStaticSitesClient_CreateOrUpdateStaticSiteBuildFunctionAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdateStaticSiteBuildFunctionAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteBuildFunctions.json
func ExampleStaticSitesClient_ListStaticSiteBuildFunctions() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.ListStaticSiteBuildFunctions("<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteFunctionOverviewARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteBuildAppSettings.json
func ExampleStaticSitesClient_ListStaticSiteBuildAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteBuildAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteBuildFunctionAppSettings.json
func ExampleStaticSitesClient_ListStaticSiteBuildFunctionAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteBuildFunctionAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetUserProvidedFunctionAppsForStaticSiteBuild.json
func ExampleStaticSitesClient_GetUserProvidedFunctionAppsForStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.GetUserProvidedFunctionAppsForStaticSiteBuild("<resource-group-name>",
		"<name>",
		"<environment-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetUserProvidedFunctionAppForStaticSiteBuild.json
func ExampleStaticSitesClient_GetUserProvidedFunctionAppForStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetUserProvidedFunctionAppForStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		"<function-app-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/RegisterUserProvidedFunctionAppWithStaticSiteBuild.json
func ExampleStaticSitesClient_BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		"<function-app-name>",
		armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.StringPtr("<function-app-region>"),
				FunctionAppResourceID: to.StringPtr("<function-app-resource-id>"),
			},
		},
		&armappservice.StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteBuildOptions{IsForced: to.BoolPtr(true)})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DetachUserProvidedFunctionAppFromStaticSiteBuild.json
func ExampleStaticSitesClient_DetachUserProvidedFunctionAppFromStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	_, err = client.DetachUserProvidedFunctionAppFromStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		"<function-app-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/StaticSiteBuildZipDeploy.json
func ExampleStaticSitesClient_BeginCreateZipDeploymentForStaticSiteBuild() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateZipDeploymentForStaticSiteBuild(ctx,
		"<resource-group-name>",
		"<name>",
		"<environment-name>",
		armappservice.StaticSiteZipDeploymentARMResource{
			Properties: &armappservice.StaticSiteZipDeployment{
				APIZipURL:        to.StringPtr("<apizip-url>"),
				AppZipURL:        to.StringPtr("<app-zip-url>"),
				DeploymentTitle:  to.StringPtr("<deployment-title>"),
				FunctionLanguage: to.StringPtr("<function-language>"),
				Provider:         to.StringPtr("<provider>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSiteAppSettings.json
func ExampleStaticSitesClient_CreateOrUpdateStaticSiteAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdateStaticSiteAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSiteFunctionAppSettings.json
func ExampleStaticSitesClient_CreateOrUpdateStaticSiteFunctionAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdateStaticSiteFunctionAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StringDictionary{
			Properties: map[string]*string{
				"setting1": to.StringPtr("someval"),
				"setting2": to.StringPtr("someval2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateUserRolesInvitationLink.json
func ExampleStaticSitesClient_CreateUserRolesInvitationLink() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.CreateUserRolesInvitationLink(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StaticSiteUserInvitationRequestResource{
			Properties: &armappservice.StaticSiteUserInvitationRequestResourceProperties{
				Domain:               to.StringPtr("<domain>"),
				NumHoursToExpiration: to.Int32Ptr(1),
				Provider:             to.StringPtr("<provider>"),
				Roles:                to.StringPtr("<roles>"),
				UserDetails:          to.StringPtr("<user-details>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserInvitationResponseResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSiteCustomDomains.json
func ExampleStaticSitesClient_ListStaticSiteCustomDomains() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.ListStaticSiteCustomDomains("<resource-group-name>",
		"<name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteCustomDomainOverviewARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetStaticSiteCustomDomain.json
func ExampleStaticSitesClient_GetStaticSiteCustomDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetStaticSiteCustomDomain(ctx,
		"<resource-group-name>",
		"<name>",
		"<domain-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteCustomDomainOverviewARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/CreateOrUpdateStaticSiteCustomDomain.json
func ExampleStaticSitesClient_BeginCreateOrUpdateStaticSiteCustomDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdateStaticSiteCustomDomain(ctx,
		"<resource-group-name>",
		"<name>",
		"<domain-name>",
		armappservice.StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &armappservice.StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteCustomDomainOverviewARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DeleteStaticSiteCustomDomain.json
func ExampleStaticSitesClient_BeginDeleteStaticSiteCustomDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteStaticSiteCustomDomain(ctx,
		"<resource-group-name>",
		"<name>",
		"<domain-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ValidateStaticSiteCustomDomain.json
func ExampleStaticSitesClient_BeginValidateCustomDomainCanBeAddedToStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginValidateCustomDomainCanBeAddedToStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		"<domain-name>",
		armappservice.StaticSiteCustomDomainRequestPropertiesARMResource{
			Properties: &armappservice.StaticSiteCustomDomainRequestPropertiesARMResourceProperties{},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DetachStaticSite.json
func ExampleStaticSitesClient_BeginDetachStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDetachStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteFunctions.json
func ExampleStaticSitesClient_ListStaticSiteFunctions() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.ListStaticSiteFunctions("<resource-group-name>",
		"<name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteFunctionOverviewARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteAppSettings.json
func ExampleStaticSitesClient_ListStaticSiteAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteConfiguredRoles.json
func ExampleStaticSitesClient_ListStaticSiteConfiguredRoles() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteConfiguredRoles(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringList.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteFunctionAppSettings.json
func ExampleStaticSitesClient_ListStaticSiteFunctionAppSettings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteFunctionAppSettings(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ListStaticSiteSecrets.json
func ExampleStaticSitesClient_ListStaticSiteSecrets() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.ListStaticSiteSecrets(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StringDictionary.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetSitePrivateEndpointConnectionList.json
func ExampleStaticSitesClient_GetPrivateEndpointConnectionList() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.GetPrivateEndpointConnectionList("<resource-group-name>",
		"<name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("RemotePrivateEndpointConnectionARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetSitePrivateEndpointConnection.json
func ExampleStaticSitesClient_GetPrivateEndpointConnection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetPrivateEndpointConnection(ctx,
		"<resource-group-name>",
		"<name>",
		"<private-endpoint-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("RemotePrivateEndpointConnectionARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ApproveRejectSitePrivateEndpointConnection.json
func ExampleStaticSitesClient_BeginApproveOrRejectPrivateEndpointConnection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginApproveOrRejectPrivateEndpointConnection(ctx,
		"<resource-group-name>",
		"<name>",
		"<private-endpoint-connection-name>",
		armappservice.PrivateLinkConnectionApprovalRequestResource{
			Properties: &armappservice.PrivateLinkConnectionApprovalRequest{
				PrivateLinkServiceConnectionState: &armappservice.PrivateLinkConnectionState{
					Description:     to.StringPtr("<description>"),
					ActionsRequired: to.StringPtr("<actions-required>"),
					Status:          to.StringPtr("<status>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("RemotePrivateEndpointConnectionARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DeleteSitePrivateEndpointConnection.json
func ExampleStaticSitesClient_BeginDeletePrivateEndpointConnection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeletePrivateEndpointConnection(ctx,
		"<resource-group-name>",
		"<name>",
		"<private-endpoint-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetSitePrivateLinkResources.json
func ExampleStaticSitesClient_GetPrivateLinkResources() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	_, err = client.GetPrivateLinkResources(ctx,
		"<resource-group-name>",
		"<name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/ResetStaticSiteApiKey.json
func ExampleStaticSitesClient_ResetStaticSiteAPIKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	_, err = client.ResetStaticSiteAPIKey(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StaticSiteResetPropertiesARMResource{
			Properties: &armappservice.StaticSiteResetPropertiesARMResourceProperties{
				RepositoryToken:        to.StringPtr("<repository-token>"),
				ShouldUpdateRepository: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetUserProvidedFunctionAppsForStaticSite.json
func ExampleStaticSitesClient_GetUserProvidedFunctionAppsForStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	pager := client.GetUserProvidedFunctionAppsForStaticSite("<resource-group-name>",
		"<name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/GetUserProvidedFunctionAppForStaticSite.json
func ExampleStaticSitesClient_GetUserProvidedFunctionAppForStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	res, err := client.GetUserProvidedFunctionAppForStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		"<function-app-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/RegisterUserProvidedFunctionAppWithStaticSite.json
func ExampleStaticSitesClient_BeginRegisterUserProvidedFunctionAppWithStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRegisterUserProvidedFunctionAppWithStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		"<function-app-name>",
		armappservice.StaticSiteUserProvidedFunctionAppARMResource{
			Properties: &armappservice.StaticSiteUserProvidedFunctionAppARMResourceProperties{
				FunctionAppRegion:     to.StringPtr("<function-app-region>"),
				FunctionAppResourceID: to.StringPtr("<function-app-resource-id>"),
			},
		},
		&armappservice.StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteOptions{IsForced: to.BoolPtr(true)})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("StaticSiteUserProvidedFunctionAppARMResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/DetachUserProvidedFunctionAppFromStaticSite.json
func ExampleStaticSitesClient_DetachUserProvidedFunctionAppFromStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	_, err = client.DetachUserProvidedFunctionAppFromStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		"<function-app-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2021-02-01/examples/StaticSiteZipDeploy.json
func ExampleStaticSitesClient_BeginCreateZipDeploymentForStaticSite() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armappservice.NewStaticSitesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateZipDeploymentForStaticSite(ctx,
		"<resource-group-name>",
		"<name>",
		armappservice.StaticSiteZipDeploymentARMResource{
			Properties: &armappservice.StaticSiteZipDeployment{
				APIZipURL:        to.StringPtr("<apizip-url>"),
				AppZipURL:        to.StringPtr("<app-zip-url>"),
				DeploymentTitle:  to.StringPtr("<deployment-title>"),
				FunctionLanguage: to.StringPtr("<function-language>"),
				Provider:         to.StringPtr("<provider>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
