//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappservice

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type APIKVReferenceCollection.
func (a APIKVReferenceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AbnormalTimePeriod.
func (a AbnormalTimePeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", a.EndTime)
	populate(objectMap, "events", a.Events)
	populate(objectMap, "solutions", a.Solutions)
	populateTimeRFC3339(objectMap, "startTime", a.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AbnormalTimePeriod.
func (a *AbnormalTimePeriod) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &a.EndTime)
			delete(rawMsg, key)
		case "events":
			err = unpopulate(val, &a.Events)
			delete(rawMsg, key)
		case "solutions":
			err = unpopulate(val, &a.Solutions)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &a.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AddressResponseProperties.
func (a AddressResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "internalIpAddress", a.InternalIPAddress)
	populate(objectMap, "outboundIpAddresses", a.OutboundIPAddresses)
	populate(objectMap, "serviceIpAddress", a.ServiceIPAddress)
	populate(objectMap, "vipMappings", a.VipMappings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AllowedAudiencesValidation.
func (a AllowedAudiencesValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedAudiences", a.AllowedAudiences)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AllowedPrincipals.
func (a AllowedPrincipals) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groups", a.Groups)
	populate(objectMap, "identities", a.Identities)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AnalysisData.
func (a AnalysisData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", a.Data)
	populate(objectMap, "detectorDefinition", a.DetectorDefinition)
	populate(objectMap, "detectorMetaData", a.DetectorMetaData)
	populate(objectMap, "metrics", a.Metrics)
	populate(objectMap, "source", a.Source)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppCertificate.
func (a AppCertificate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "kind", a.Kind)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppCertificateCollection.
func (a AppCertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppCertificatePatchResource.
func (a AppCertificatePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "kind", a.Kind)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AppCertificatePatchResourceProperties.
func (a AppCertificatePatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canonicalName", a.CanonicalName)
	populateByteArray(objectMap, "cerBlob", a.CerBlob, runtime.Base64StdFormat)
	populate(objectMap, "domainValidationMethod", a.DomainValidationMethod)
	populateTimeRFC3339(objectMap, "expirationDate", a.ExpirationDate)
	populate(objectMap, "friendlyName", a.FriendlyName)
	populate(objectMap, "hostNames", a.HostNames)
	populate(objectMap, "hostingEnvironmentProfile", a.HostingEnvironmentProfile)
	populateTimeRFC3339(objectMap, "issueDate", a.IssueDate)
	populate(objectMap, "issuer", a.Issuer)
	populate(objectMap, "keyVaultId", a.KeyVaultID)
	populate(objectMap, "keyVaultSecretName", a.KeyVaultSecretName)
	populate(objectMap, "keyVaultSecretStatus", a.KeyVaultSecretStatus)
	populate(objectMap, "password", a.Password)
	populateByteArray(objectMap, "pfxBlob", a.PfxBlob, runtime.Base64StdFormat)
	populate(objectMap, "publicKeyHash", a.PublicKeyHash)
	populate(objectMap, "selfLink", a.SelfLink)
	populate(objectMap, "serverFarmId", a.ServerFarmID)
	populate(objectMap, "siteName", a.SiteName)
	populate(objectMap, "subjectName", a.SubjectName)
	populate(objectMap, "thumbprint", a.Thumbprint)
	populate(objectMap, "valid", a.Valid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppCertificatePatchResourceProperties.
func (a *AppCertificatePatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canonicalName":
			err = unpopulate(val, &a.CanonicalName)
			delete(rawMsg, key)
		case "cerBlob":
			err = runtime.DecodeByteArray(string(val), &a.CerBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "domainValidationMethod":
			err = unpopulate(val, &a.DomainValidationMethod)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &a.ExpirationDate)
			delete(rawMsg, key)
		case "friendlyName":
			err = unpopulate(val, &a.FriendlyName)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &a.HostNames)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &a.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "issueDate":
			err = unpopulateTimeRFC3339(val, &a.IssueDate)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, &a.Issuer)
			delete(rawMsg, key)
		case "keyVaultId":
			err = unpopulate(val, &a.KeyVaultID)
			delete(rawMsg, key)
		case "keyVaultSecretName":
			err = unpopulate(val, &a.KeyVaultSecretName)
			delete(rawMsg, key)
		case "keyVaultSecretStatus":
			err = unpopulate(val, &a.KeyVaultSecretStatus)
			delete(rawMsg, key)
		case "password":
			err = unpopulate(val, &a.Password)
			delete(rawMsg, key)
		case "pfxBlob":
			err = runtime.DecodeByteArray(string(val), &a.PfxBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicKeyHash":
			err = unpopulate(val, &a.PublicKeyHash)
			delete(rawMsg, key)
		case "selfLink":
			err = unpopulate(val, &a.SelfLink)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &a.ServerFarmID)
			delete(rawMsg, key)
		case "siteName":
			err = unpopulate(val, &a.SiteName)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, &a.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &a.Thumbprint)
			delete(rawMsg, key)
		case "valid":
			err = unpopulate(val, &a.Valid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AppCertificateProperties.
func (a AppCertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canonicalName", a.CanonicalName)
	populateByteArray(objectMap, "cerBlob", a.CerBlob, runtime.Base64StdFormat)
	populate(objectMap, "domainValidationMethod", a.DomainValidationMethod)
	populateTimeRFC3339(objectMap, "expirationDate", a.ExpirationDate)
	populate(objectMap, "friendlyName", a.FriendlyName)
	populate(objectMap, "hostNames", a.HostNames)
	populate(objectMap, "hostingEnvironmentProfile", a.HostingEnvironmentProfile)
	populateTimeRFC3339(objectMap, "issueDate", a.IssueDate)
	populate(objectMap, "issuer", a.Issuer)
	populate(objectMap, "keyVaultId", a.KeyVaultID)
	populate(objectMap, "keyVaultSecretName", a.KeyVaultSecretName)
	populate(objectMap, "keyVaultSecretStatus", a.KeyVaultSecretStatus)
	populate(objectMap, "password", a.Password)
	populateByteArray(objectMap, "pfxBlob", a.PfxBlob, runtime.Base64StdFormat)
	populate(objectMap, "publicKeyHash", a.PublicKeyHash)
	populate(objectMap, "selfLink", a.SelfLink)
	populate(objectMap, "serverFarmId", a.ServerFarmID)
	populate(objectMap, "siteName", a.SiteName)
	populate(objectMap, "subjectName", a.SubjectName)
	populate(objectMap, "thumbprint", a.Thumbprint)
	populate(objectMap, "valid", a.Valid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppCertificateProperties.
func (a *AppCertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canonicalName":
			err = unpopulate(val, &a.CanonicalName)
			delete(rawMsg, key)
		case "cerBlob":
			err = runtime.DecodeByteArray(string(val), &a.CerBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "domainValidationMethod":
			err = unpopulate(val, &a.DomainValidationMethod)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &a.ExpirationDate)
			delete(rawMsg, key)
		case "friendlyName":
			err = unpopulate(val, &a.FriendlyName)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &a.HostNames)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &a.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "issueDate":
			err = unpopulateTimeRFC3339(val, &a.IssueDate)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, &a.Issuer)
			delete(rawMsg, key)
		case "keyVaultId":
			err = unpopulate(val, &a.KeyVaultID)
			delete(rawMsg, key)
		case "keyVaultSecretName":
			err = unpopulate(val, &a.KeyVaultSecretName)
			delete(rawMsg, key)
		case "keyVaultSecretStatus":
			err = unpopulate(val, &a.KeyVaultSecretStatus)
			delete(rawMsg, key)
		case "password":
			err = unpopulate(val, &a.Password)
			delete(rawMsg, key)
		case "pfxBlob":
			err = runtime.DecodeByteArray(string(val), &a.PfxBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicKeyHash":
			err = unpopulate(val, &a.PublicKeyHash)
			delete(rawMsg, key)
		case "selfLink":
			err = unpopulate(val, &a.SelfLink)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &a.ServerFarmID)
			delete(rawMsg, key)
		case "siteName":
			err = unpopulate(val, &a.SiteName)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, &a.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &a.Thumbprint)
			delete(rawMsg, key)
		case "valid":
			err = unpopulate(val, &a.Valid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationStack.
func (a ApplicationStack) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dependency", a.Dependency)
	populate(objectMap, "display", a.Display)
	populate(objectMap, "frameworks", a.Frameworks)
	populate(objectMap, "isDeprecated", a.IsDeprecated)
	populate(objectMap, "majorVersions", a.MajorVersions)
	populate(objectMap, "name", a.Name)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationStackCollection.
func (a ApplicationStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AseV3NetworkingConfigurationProperties.
func (a AseV3NetworkingConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowNewPrivateEndpointConnections", a.AllowNewPrivateEndpointConnections)
	populate(objectMap, "externalInboundIpAddresses", a.ExternalInboundIPAddresses)
	populate(objectMap, "internalInboundIpAddresses", a.InternalInboundIPAddresses)
	populate(objectMap, "linuxOutboundIpAddresses", a.LinuxOutboundIPAddresses)
	populate(objectMap, "windowsOutboundIpAddresses", a.WindowsOutboundIPAddresses)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AutoHealTriggers.
func (a AutoHealTriggers) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateBytesInKB", a.PrivateBytesInKB)
	populate(objectMap, "requests", a.Requests)
	populate(objectMap, "slowRequests", a.SlowRequests)
	populate(objectMap, "slowRequestsWithPath", a.SlowRequestsWithPath)
	populate(objectMap, "statusCodes", a.StatusCodes)
	populate(objectMap, "statusCodesRange", a.StatusCodesRange)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureActiveDirectoryLogin.
func (a AzureActiveDirectoryLogin) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disableWWWAuthenticate", a.DisableWWWAuthenticate)
	populate(objectMap, "loginParameters", a.LoginParameters)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureActiveDirectoryValidation.
func (a AzureActiveDirectoryValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedAudiences", a.AllowedAudiences)
	populate(objectMap, "defaultAuthorizationPolicy", a.DefaultAuthorizationPolicy)
	populate(objectMap, "jwtClaimChecks", a.JwtClaimChecks)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureStoragePropertyDictionaryResource.
func (a AzureStoragePropertyDictionaryResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "kind", a.Kind)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BackupItemCollection.
func (b BackupItemCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BackupItemProperties.
func (b BackupItemProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.BackupID)
	populate(objectMap, "blobName", b.BlobName)
	populate(objectMap, "correlationId", b.CorrelationID)
	populateTimeRFC3339(objectMap, "created", b.Created)
	populate(objectMap, "databases", b.Databases)
	populateTimeRFC3339(objectMap, "finishedTimeStamp", b.FinishedTimeStamp)
	populateTimeRFC3339(objectMap, "lastRestoreTimeStamp", b.LastRestoreTimeStamp)
	populate(objectMap, "log", b.Log)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "scheduled", b.Scheduled)
	populate(objectMap, "sizeInBytes", b.SizeInBytes)
	populate(objectMap, "status", b.Status)
	populate(objectMap, "storageAccountUrl", b.StorageAccountURL)
	populate(objectMap, "websiteSizeInBytes", b.WebsiteSizeInBytes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupItemProperties.
func (b *BackupItemProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.BackupID)
			delete(rawMsg, key)
		case "blobName":
			err = unpopulate(val, &b.BlobName)
			delete(rawMsg, key)
		case "correlationId":
			err = unpopulate(val, &b.CorrelationID)
			delete(rawMsg, key)
		case "created":
			err = unpopulateTimeRFC3339(val, &b.Created)
			delete(rawMsg, key)
		case "databases":
			err = unpopulate(val, &b.Databases)
			delete(rawMsg, key)
		case "finishedTimeStamp":
			err = unpopulateTimeRFC3339(val, &b.FinishedTimeStamp)
			delete(rawMsg, key)
		case "lastRestoreTimeStamp":
			err = unpopulateTimeRFC3339(val, &b.LastRestoreTimeStamp)
			delete(rawMsg, key)
		case "log":
			err = unpopulate(val, &b.Log)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "scheduled":
			err = unpopulate(val, &b.Scheduled)
			delete(rawMsg, key)
		case "sizeInBytes":
			err = unpopulate(val, &b.SizeInBytes)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &b.Status)
			delete(rawMsg, key)
		case "storageAccountUrl":
			err = unpopulate(val, &b.StorageAccountURL)
			delete(rawMsg, key)
		case "websiteSizeInBytes":
			err = unpopulate(val, &b.WebsiteSizeInBytes)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BackupRequestProperties.
func (b BackupRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupName", b.BackupName)
	populate(objectMap, "backupSchedule", b.BackupSchedule)
	populate(objectMap, "databases", b.Databases)
	populate(objectMap, "enabled", b.Enabled)
	populate(objectMap, "storageAccountUrl", b.StorageAccountURL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BackupSchedule.
func (b BackupSchedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "frequencyInterval", b.FrequencyInterval)
	populate(objectMap, "frequencyUnit", b.FrequencyUnit)
	populate(objectMap, "keepAtLeastOneBackup", b.KeepAtLeastOneBackup)
	populateTimeRFC3339(objectMap, "lastExecutionTime", b.LastExecutionTime)
	populate(objectMap, "retentionPeriodInDays", b.RetentionPeriodInDays)
	populateTimeRFC3339(objectMap, "startTime", b.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupSchedule.
func (b *BackupSchedule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "frequencyInterval":
			err = unpopulate(val, &b.FrequencyInterval)
			delete(rawMsg, key)
		case "frequencyUnit":
			err = unpopulate(val, &b.FrequencyUnit)
			delete(rawMsg, key)
		case "keepAtLeastOneBackup":
			err = unpopulate(val, &b.KeepAtLeastOneBackup)
			delete(rawMsg, key)
		case "lastExecutionTime":
			err = unpopulateTimeRFC3339(val, &b.LastExecutionTime)
			delete(rawMsg, key)
		case "retentionPeriodInDays":
			err = unpopulate(val, &b.RetentionPeriodInDays)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &b.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BillingMeterCollection.
func (b BillingMeterCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateCollection.
func (c CertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateDetails.
func (c CertificateDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "issuer", c.Issuer)
	populateTimeRFC3339(objectMap, "notAfter", c.NotAfter)
	populateTimeRFC3339(objectMap, "notBefore", c.NotBefore)
	populate(objectMap, "rawData", c.RawData)
	populate(objectMap, "serialNumber", c.SerialNumber)
	populate(objectMap, "signatureAlgorithm", c.SignatureAlgorithm)
	populate(objectMap, "subject", c.Subject)
	populate(objectMap, "thumbprint", c.Thumbprint)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateDetails.
func (c *CertificateDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "issuer":
			err = unpopulate(val, &c.Issuer)
			delete(rawMsg, key)
		case "notAfter":
			err = unpopulateTimeRFC3339(val, &c.NotAfter)
			delete(rawMsg, key)
		case "notBefore":
			err = unpopulateTimeRFC3339(val, &c.NotBefore)
			delete(rawMsg, key)
		case "rawData":
			err = unpopulate(val, &c.RawData)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &c.SerialNumber)
			delete(rawMsg, key)
		case "signatureAlgorithm":
			err = unpopulate(val, &c.SignatureAlgorithm)
			delete(rawMsg, key)
		case "subject":
			err = unpopulate(val, &c.Subject)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &c.Thumbprint)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &c.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CertificateEmailProperties.
func (c CertificateEmailProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "emailId", c.EmailID)
	populateTimeRFC3339(objectMap, "timeStamp", c.TimeStamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateEmailProperties.
func (c *CertificateEmailProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "emailId":
			err = unpopulate(val, &c.EmailID)
			delete(rawMsg, key)
		case "timeStamp":
			err = unpopulateTimeRFC3339(val, &c.TimeStamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrder.
func (c CertificateOrder) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderActionProperties.
func (c CertificateOrderActionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionType", c.ActionType)
	populateTimeRFC3339(objectMap, "createdAt", c.CreatedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateOrderActionProperties.
func (c *CertificateOrderActionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, &c.ActionType)
			delete(rawMsg, key)
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &c.CreatedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderCollection.
func (c CertificateOrderCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderPatchResource.
func (c CertificateOrderPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderPatchResourceProperties.
func (c CertificateOrderPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appServiceCertificateNotRenewableReasons", c.AppServiceCertificateNotRenewableReasons)
	populate(objectMap, "autoRenew", c.AutoRenew)
	populate(objectMap, "certificates", c.Certificates)
	populate(objectMap, "contact", c.Contact)
	populate(objectMap, "csr", c.Csr)
	populate(objectMap, "distinguishedName", c.DistinguishedName)
	populate(objectMap, "domainVerificationToken", c.DomainVerificationToken)
	populateTimeRFC3339(objectMap, "expirationTime", c.ExpirationTime)
	populate(objectMap, "intermediate", c.Intermediate)
	populate(objectMap, "isPrivateKeyExternal", c.IsPrivateKeyExternal)
	populate(objectMap, "keySize", c.KeySize)
	populateTimeRFC3339(objectMap, "lastCertificateIssuanceTime", c.LastCertificateIssuanceTime)
	populateTimeRFC3339(objectMap, "nextAutoRenewalTimeStamp", c.NextAutoRenewalTimeStamp)
	populate(objectMap, "productType", c.ProductType)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "root", c.Root)
	populate(objectMap, "serialNumber", c.SerialNumber)
	populate(objectMap, "signedCertificate", c.SignedCertificate)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "validityInYears", c.ValidityInYears)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateOrderPatchResourceProperties.
func (c *CertificateOrderPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appServiceCertificateNotRenewableReasons":
			err = unpopulate(val, &c.AppServiceCertificateNotRenewableReasons)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &c.AutoRenew)
			delete(rawMsg, key)
		case "certificates":
			err = unpopulate(val, &c.Certificates)
			delete(rawMsg, key)
		case "contact":
			err = unpopulate(val, &c.Contact)
			delete(rawMsg, key)
		case "csr":
			err = unpopulate(val, &c.Csr)
			delete(rawMsg, key)
		case "distinguishedName":
			err = unpopulate(val, &c.DistinguishedName)
			delete(rawMsg, key)
		case "domainVerificationToken":
			err = unpopulate(val, &c.DomainVerificationToken)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &c.ExpirationTime)
			delete(rawMsg, key)
		case "intermediate":
			err = unpopulate(val, &c.Intermediate)
			delete(rawMsg, key)
		case "isPrivateKeyExternal":
			err = unpopulate(val, &c.IsPrivateKeyExternal)
			delete(rawMsg, key)
		case "keySize":
			err = unpopulate(val, &c.KeySize)
			delete(rawMsg, key)
		case "lastCertificateIssuanceTime":
			err = unpopulateTimeRFC3339(val, &c.LastCertificateIssuanceTime)
			delete(rawMsg, key)
		case "nextAutoRenewalTimeStamp":
			err = unpopulateTimeRFC3339(val, &c.NextAutoRenewalTimeStamp)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &c.ProductType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &c.ProvisioningState)
			delete(rawMsg, key)
		case "root":
			err = unpopulate(val, &c.Root)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &c.SerialNumber)
			delete(rawMsg, key)
		case "signedCertificate":
			err = unpopulate(val, &c.SignedCertificate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &c.Status)
			delete(rawMsg, key)
		case "validityInYears":
			err = unpopulate(val, &c.ValidityInYears)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderProperties.
func (c CertificateOrderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appServiceCertificateNotRenewableReasons", c.AppServiceCertificateNotRenewableReasons)
	populate(objectMap, "autoRenew", c.AutoRenew)
	populate(objectMap, "certificates", c.Certificates)
	populate(objectMap, "contact", c.Contact)
	populate(objectMap, "csr", c.Csr)
	populate(objectMap, "distinguishedName", c.DistinguishedName)
	populate(objectMap, "domainVerificationToken", c.DomainVerificationToken)
	populateTimeRFC3339(objectMap, "expirationTime", c.ExpirationTime)
	populate(objectMap, "intermediate", c.Intermediate)
	populate(objectMap, "isPrivateKeyExternal", c.IsPrivateKeyExternal)
	populate(objectMap, "keySize", c.KeySize)
	populateTimeRFC3339(objectMap, "lastCertificateIssuanceTime", c.LastCertificateIssuanceTime)
	populateTimeRFC3339(objectMap, "nextAutoRenewalTimeStamp", c.NextAutoRenewalTimeStamp)
	populate(objectMap, "productType", c.ProductType)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "root", c.Root)
	populate(objectMap, "serialNumber", c.SerialNumber)
	populate(objectMap, "signedCertificate", c.SignedCertificate)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "validityInYears", c.ValidityInYears)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateOrderProperties.
func (c *CertificateOrderProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appServiceCertificateNotRenewableReasons":
			err = unpopulate(val, &c.AppServiceCertificateNotRenewableReasons)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &c.AutoRenew)
			delete(rawMsg, key)
		case "certificates":
			err = unpopulate(val, &c.Certificates)
			delete(rawMsg, key)
		case "contact":
			err = unpopulate(val, &c.Contact)
			delete(rawMsg, key)
		case "csr":
			err = unpopulate(val, &c.Csr)
			delete(rawMsg, key)
		case "distinguishedName":
			err = unpopulate(val, &c.DistinguishedName)
			delete(rawMsg, key)
		case "domainVerificationToken":
			err = unpopulate(val, &c.DomainVerificationToken)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &c.ExpirationTime)
			delete(rawMsg, key)
		case "intermediate":
			err = unpopulate(val, &c.Intermediate)
			delete(rawMsg, key)
		case "isPrivateKeyExternal":
			err = unpopulate(val, &c.IsPrivateKeyExternal)
			delete(rawMsg, key)
		case "keySize":
			err = unpopulate(val, &c.KeySize)
			delete(rawMsg, key)
		case "lastCertificateIssuanceTime":
			err = unpopulateTimeRFC3339(val, &c.LastCertificateIssuanceTime)
			delete(rawMsg, key)
		case "nextAutoRenewalTimeStamp":
			err = unpopulateTimeRFC3339(val, &c.NextAutoRenewalTimeStamp)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &c.ProductType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &c.ProvisioningState)
			delete(rawMsg, key)
		case "root":
			err = unpopulate(val, &c.Root)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &c.SerialNumber)
			delete(rawMsg, key)
		case "signedCertificate":
			err = unpopulate(val, &c.SignedCertificate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &c.Status)
			delete(rawMsg, key)
		case "validityInYears":
			err = unpopulate(val, &c.ValidityInYears)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CertificatePatchResource.
func (c CertificatePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CertificateResource.
func (c CertificateResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CloningInfo.
func (c CloningInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingsOverrides", c.AppSettingsOverrides)
	populate(objectMap, "cloneCustomHostNames", c.CloneCustomHostNames)
	populate(objectMap, "cloneSourceControl", c.CloneSourceControl)
	populate(objectMap, "configureLoadBalancing", c.ConfigureLoadBalancing)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "hostingEnvironment", c.HostingEnvironment)
	populate(objectMap, "overwrite", c.Overwrite)
	populate(objectMap, "sourceWebAppId", c.SourceWebAppID)
	populate(objectMap, "sourceWebAppLocation", c.SourceWebAppLocation)
	populate(objectMap, "trafficManagerProfileId", c.TrafficManagerProfileID)
	populate(objectMap, "trafficManagerProfileName", c.TrafficManagerProfileName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Configuration.
func (c Configuration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activeRevisionsMode", c.ActiveRevisionsMode)
	populate(objectMap, "ingress", c.Ingress)
	populate(objectMap, "registries", c.Registries)
	populate(objectMap, "secrets", c.Secrets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionStringDictionary.
func (c ConnectionStringDictionary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Container.
func (c Container) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "args", c.Args)
	populate(objectMap, "command", c.Command)
	populate(objectMap, "env", c.Env)
	populate(objectMap, "image", c.Image)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "resources", c.Resources)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerApp.
func (c ContainerApp) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerAppCollection.
func (c ContainerAppCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerCPUUsage.
func (c ContainerCPUUsage) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "kernelModeUsage", c.KernelModeUsage)
	populate(objectMap, "perCpuUsage", c.PerCPUUsage)
	populate(objectMap, "totalUsage", c.TotalUsage)
	populate(objectMap, "userModeUsage", c.UserModeUsage)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerInfo.
func (c ContainerInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentCpuStats", c.CurrentCPUStats)
	populateTimeRFC3339(objectMap, "currentTimeStamp", c.CurrentTimeStamp)
	populate(objectMap, "eth0", c.Eth0)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "memoryStats", c.MemoryStats)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "previousCpuStats", c.PreviousCPUStats)
	populateTimeRFC3339(objectMap, "previousTimeStamp", c.PreviousTimeStamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerInfo.
func (c *ContainerInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentCpuStats":
			err = unpopulate(val, &c.CurrentCPUStats)
			delete(rawMsg, key)
		case "currentTimeStamp":
			err = unpopulateTimeRFC3339(val, &c.CurrentTimeStamp)
			delete(rawMsg, key)
		case "eth0":
			err = unpopulate(val, &c.Eth0)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "memoryStats":
			err = unpopulate(val, &c.MemoryStats)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		case "previousCpuStats":
			err = unpopulate(val, &c.PreviousCPUStats)
			delete(rawMsg, key)
		case "previousTimeStamp":
			err = unpopulateTimeRFC3339(val, &c.PreviousTimeStamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousWebJobCollection.
func (c ContinuousWebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousWebJobProperties.
func (c ContinuousWebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "detailed_status", c.DetailedStatus)
	populate(objectMap, "error", c.Error)
	populate(objectMap, "extra_info_url", c.ExtraInfoURL)
	populate(objectMap, "log_url", c.LogURL)
	populate(objectMap, "run_command", c.RunCommand)
	populate(objectMap, "settings", c.Settings)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "url", c.URL)
	populate(objectMap, "using_sdk", c.UsingSdk)
	populate(objectMap, "web_job_type", c.WebJobType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CorsSettings.
func (c CorsSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedOrigins", c.AllowedOrigins)
	populate(objectMap, "supportCredentials", c.SupportCredentials)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CsmMoveResourceEnvelope.
func (c CsmMoveResourceEnvelope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "resources", c.Resources)
	populate(objectMap, "targetResourceGroup", c.TargetResourceGroup)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CsmOperationCollection.
func (c CsmOperationCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CsmUsageQuota.
func (c CsmUsageQuota) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentValue", c.CurrentValue)
	populate(objectMap, "limit", c.Limit)
	populate(objectMap, "name", c.Name)
	populateTimeRFC3339(objectMap, "nextResetTime", c.NextResetTime)
	populate(objectMap, "unit", c.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CsmUsageQuota.
func (c *CsmUsageQuota) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentValue":
			err = unpopulate(val, &c.CurrentValue)
			delete(rawMsg, key)
		case "limit":
			err = unpopulate(val, &c.Limit)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		case "nextResetTime":
			err = unpopulateTimeRFC3339(val, &c.NextResetTime)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &c.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CsmUsageQuotaCollection.
func (c CsmUsageQuotaCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomHostnameAnalysisResultProperties.
func (c CustomHostnameAnalysisResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aRecords", c.ARecords)
	populate(objectMap, "alternateCNameRecords", c.AlternateCNameRecords)
	populate(objectMap, "alternateTxtRecords", c.AlternateTxtRecords)
	populate(objectMap, "cNameRecords", c.CNameRecords)
	populate(objectMap, "conflictingAppResourceId", c.ConflictingAppResourceID)
	populate(objectMap, "customDomainVerificationFailureInfo", c.CustomDomainVerificationFailureInfo)
	populate(objectMap, "customDomainVerificationTest", c.CustomDomainVerificationTest)
	populate(objectMap, "hasConflictAcrossSubscription", c.HasConflictAcrossSubscription)
	populate(objectMap, "hasConflictOnScaleUnit", c.HasConflictOnScaleUnit)
	populate(objectMap, "isHostnameAlreadyVerified", c.IsHostnameAlreadyVerified)
	populate(objectMap, "txtRecords", c.TxtRecords)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomHostnameSitesCollection.
func (c CustomHostnameSitesCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomHostnameSitesProperties.
func (c CustomHostnameSitesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customHostname", c.CustomHostname)
	populate(objectMap, "region", c.Region)
	populate(objectMap, "siteResourceIds", c.SiteResourceIDs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomScaleRule.
func (c CustomScaleRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "auth", c.Auth)
	populate(objectMap, "metadata", c.Metadata)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Dapr.
func (d Dapr) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appId", d.AppID)
	populate(objectMap, "appPort", d.AppPort)
	populate(objectMap, "components", d.Components)
	populate(objectMap, "enabled", d.Enabled)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DaprComponent.
func (d DaprComponent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "type", d.Type)
	populate(objectMap, "version", d.Version)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataProviderMetadata.
func (d DataProviderMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "propertyBag", d.PropertyBag)
	populate(objectMap, "providerName", d.ProviderName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataSource.
func (d DataSource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSourceUri", d.DataSourceURI)
	populate(objectMap, "instructions", d.Instructions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataTableResponseObject.
func (d DataTableResponseObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "columns", d.Columns)
	populate(objectMap, "rows", d.Rows)
	populate(objectMap, "tableName", d.TableName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DefaultAuthorizationPolicy.
func (d DefaultAuthorizationPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedApplications", d.AllowedApplications)
	populate(objectMap, "allowedPrincipals", d.AllowedPrincipals)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DefaultErrorResponseError.
func (d DefaultErrorResponseError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", d.Code)
	populate(objectMap, "details", d.Details)
	populate(objectMap, "innererror", d.Innererror)
	populate(objectMap, "message", d.Message)
	populate(objectMap, "target", d.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeletedWebAppCollection.
func (d DeletedWebAppCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentCollection.
func (d DeploymentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentLocations.
func (d DeploymentLocations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostingEnvironmentDeploymentInfos", d.HostingEnvironmentDeploymentInfos)
	populate(objectMap, "hostingEnvironments", d.HostingEnvironments)
	populate(objectMap, "locations", d.Locations)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentProperties.
func (d DeploymentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "active", d.Active)
	populate(objectMap, "author", d.Author)
	populate(objectMap, "author_email", d.AuthorEmail)
	populate(objectMap, "deployer", d.Deployer)
	populate(objectMap, "details", d.Details)
	populateTimeRFC3339(objectMap, "end_time", d.EndTime)
	populate(objectMap, "message", d.Message)
	populateTimeRFC3339(objectMap, "start_time", d.StartTime)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentProperties.
func (d *DeploymentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "active":
			err = unpopulate(val, &d.Active)
			delete(rawMsg, key)
		case "author":
			err = unpopulate(val, &d.Author)
			delete(rawMsg, key)
		case "author_email":
			err = unpopulate(val, &d.AuthorEmail)
			delete(rawMsg, key)
		case "deployer":
			err = unpopulate(val, &d.Deployer)
			delete(rawMsg, key)
		case "details":
			err = unpopulate(val, &d.Details)
			delete(rawMsg, key)
		case "end_time":
			err = unpopulateTimeRFC3339(val, &d.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &d.Message)
			delete(rawMsg, key)
		case "start_time":
			err = unpopulateTimeRFC3339(val, &d.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DetectorAbnormalTimePeriod.
func (d DetectorAbnormalTimePeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", d.EndTime)
	populate(objectMap, "message", d.Message)
	populate(objectMap, "metaData", d.MetaData)
	populate(objectMap, "priority", d.Priority)
	populate(objectMap, "solutions", d.Solutions)
	populate(objectMap, "source", d.Source)
	populateTimeRFC3339(objectMap, "startTime", d.StartTime)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DetectorAbnormalTimePeriod.
func (d *DetectorAbnormalTimePeriod) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &d.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &d.Message)
			delete(rawMsg, key)
		case "metaData":
			err = unpopulate(val, &d.MetaData)
			delete(rawMsg, key)
		case "priority":
			err = unpopulate(val, &d.Priority)
			delete(rawMsg, key)
		case "solutions":
			err = unpopulate(val, &d.Solutions)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &d.Source)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &d.StartTime)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DetectorInfo.
func (d DetectorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analysisType", d.AnalysisType)
	populate(objectMap, "author", d.Author)
	populate(objectMap, "category", d.Category)
	populate(objectMap, "description", d.Description)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "score", d.Score)
	populate(objectMap, "supportTopicList", d.SupportTopicList)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DetectorResponseCollection.
func (d DetectorResponseCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DetectorResponseProperties.
func (d DetectorResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataProvidersMetadata", d.DataProvidersMetadata)
	populate(objectMap, "dataset", d.Dataset)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "suggestedUtterances", d.SuggestedUtterances)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticAnalysisCollection.
func (d DiagnosticAnalysisCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticAnalysisProperties.
func (d DiagnosticAnalysisProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "abnormalTimePeriods", d.AbnormalTimePeriods)
	populateTimeRFC3339(objectMap, "endTime", d.EndTime)
	populate(objectMap, "nonCorrelatedDetectors", d.NonCorrelatedDetectors)
	populate(objectMap, "payload", d.Payload)
	populateTimeRFC3339(objectMap, "startTime", d.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticAnalysisProperties.
func (d *DiagnosticAnalysisProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "abnormalTimePeriods":
			err = unpopulate(val, &d.AbnormalTimePeriods)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &d.EndTime)
			delete(rawMsg, key)
		case "nonCorrelatedDetectors":
			err = unpopulate(val, &d.NonCorrelatedDetectors)
			delete(rawMsg, key)
		case "payload":
			err = unpopulate(val, &d.Payload)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &d.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticCategoryCollection.
func (d DiagnosticCategoryCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticDetectorCollection.
func (d DiagnosticDetectorCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticDetectorResponseProperties.
func (d DiagnosticDetectorResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "abnormalTimePeriods", d.AbnormalTimePeriods)
	populate(objectMap, "data", d.Data)
	populate(objectMap, "detectorDefinition", d.DetectorDefinition)
	populateTimeRFC3339(objectMap, "endTime", d.EndTime)
	populate(objectMap, "issueDetected", d.IssueDetected)
	populate(objectMap, "metrics", d.Metrics)
	populate(objectMap, "responseMetaData", d.ResponseMetaData)
	populateTimeRFC3339(objectMap, "startTime", d.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticDetectorResponseProperties.
func (d *DiagnosticDetectorResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "abnormalTimePeriods":
			err = unpopulate(val, &d.AbnormalTimePeriods)
			delete(rawMsg, key)
		case "data":
			err = unpopulate(val, &d.Data)
			delete(rawMsg, key)
		case "detectorDefinition":
			err = unpopulate(val, &d.DetectorDefinition)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &d.EndTime)
			delete(rawMsg, key)
		case "issueDetected":
			err = unpopulate(val, &d.IssueDetected)
			delete(rawMsg, key)
		case "metrics":
			err = unpopulate(val, &d.Metrics)
			delete(rawMsg, key)
		case "responseMetaData":
			err = unpopulate(val, &d.ResponseMetaData)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &d.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticMetricSample.
func (d DiagnosticMetricSample) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "isAggregated", d.IsAggregated)
	populate(objectMap, "maximum", d.Maximum)
	populate(objectMap, "minimum", d.Minimum)
	populate(objectMap, "roleInstance", d.RoleInstance)
	populateTimeRFC3339(objectMap, "timestamp", d.Timestamp)
	populate(objectMap, "total", d.Total)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticMetricSample.
func (d *DiagnosticMetricSample) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "isAggregated":
			err = unpopulate(val, &d.IsAggregated)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, &d.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, &d.Minimum)
			delete(rawMsg, key)
		case "roleInstance":
			err = unpopulate(val, &d.RoleInstance)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &d.Timestamp)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &d.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticMetricSet.
func (d DiagnosticMetricSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", d.EndTime)
	populate(objectMap, "name", d.Name)
	populateTimeRFC3339(objectMap, "startTime", d.StartTime)
	populate(objectMap, "timeGrain", d.TimeGrain)
	populate(objectMap, "unit", d.Unit)
	populate(objectMap, "values", d.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticMetricSet.
func (d *DiagnosticMetricSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &d.EndTime)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &d.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &d.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &d.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &d.Unit)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, &d.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Domain.
func (d Domain) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DomainCollection.
func (d DomainCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DomainOwnershipIdentifier.
func (d DomainOwnershipIdentifier) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DomainOwnershipIdentifierCollection.
func (d DomainOwnershipIdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DomainPatchResource.
func (d DomainPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DomainPatchResourceProperties.
func (d DomainPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authCode", d.AuthCode)
	populate(objectMap, "autoRenew", d.AutoRenew)
	populate(objectMap, "consent", d.Consent)
	populate(objectMap, "contactAdmin", d.ContactAdmin)
	populate(objectMap, "contactBilling", d.ContactBilling)
	populate(objectMap, "contactRegistrant", d.ContactRegistrant)
	populate(objectMap, "contactTech", d.ContactTech)
	populateTimeRFC3339(objectMap, "createdTime", d.CreatedTime)
	populate(objectMap, "dnsType", d.DNSType)
	populate(objectMap, "dnsZoneId", d.DNSZoneID)
	populate(objectMap, "domainNotRenewableReasons", d.DomainNotRenewableReasons)
	populateTimeRFC3339(objectMap, "expirationTime", d.ExpirationTime)
	populateTimeRFC3339(objectMap, "lastRenewedTime", d.LastRenewedTime)
	populate(objectMap, "managedHostNames", d.ManagedHostNames)
	populate(objectMap, "nameServers", d.NameServers)
	populate(objectMap, "privacy", d.Privacy)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "readyForDnsRecordManagement", d.ReadyForDNSRecordManagement)
	populate(objectMap, "registrationStatus", d.RegistrationStatus)
	populate(objectMap, "targetDnsType", d.TargetDNSType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainPatchResourceProperties.
func (d *DomainPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authCode":
			err = unpopulate(val, &d.AuthCode)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &d.AutoRenew)
			delete(rawMsg, key)
		case "consent":
			err = unpopulate(val, &d.Consent)
			delete(rawMsg, key)
		case "contactAdmin":
			err = unpopulate(val, &d.ContactAdmin)
			delete(rawMsg, key)
		case "contactBilling":
			err = unpopulate(val, &d.ContactBilling)
			delete(rawMsg, key)
		case "contactRegistrant":
			err = unpopulate(val, &d.ContactRegistrant)
			delete(rawMsg, key)
		case "contactTech":
			err = unpopulate(val, &d.ContactTech)
			delete(rawMsg, key)
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &d.CreatedTime)
			delete(rawMsg, key)
		case "dnsType":
			err = unpopulate(val, &d.DNSType)
			delete(rawMsg, key)
		case "dnsZoneId":
			err = unpopulate(val, &d.DNSZoneID)
			delete(rawMsg, key)
		case "domainNotRenewableReasons":
			err = unpopulate(val, &d.DomainNotRenewableReasons)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &d.ExpirationTime)
			delete(rawMsg, key)
		case "lastRenewedTime":
			err = unpopulateTimeRFC3339(val, &d.LastRenewedTime)
			delete(rawMsg, key)
		case "managedHostNames":
			err = unpopulate(val, &d.ManagedHostNames)
			delete(rawMsg, key)
		case "nameServers":
			err = unpopulate(val, &d.NameServers)
			delete(rawMsg, key)
		case "privacy":
			err = unpopulate(val, &d.Privacy)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "readyForDnsRecordManagement":
			err = unpopulate(val, &d.ReadyForDNSRecordManagement)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &d.RegistrationStatus)
			delete(rawMsg, key)
		case "targetDnsType":
			err = unpopulate(val, &d.TargetDNSType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DomainProperties.
func (d DomainProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authCode", d.AuthCode)
	populate(objectMap, "autoRenew", d.AutoRenew)
	populate(objectMap, "consent", d.Consent)
	populate(objectMap, "contactAdmin", d.ContactAdmin)
	populate(objectMap, "contactBilling", d.ContactBilling)
	populate(objectMap, "contactRegistrant", d.ContactRegistrant)
	populate(objectMap, "contactTech", d.ContactTech)
	populateTimeRFC3339(objectMap, "createdTime", d.CreatedTime)
	populate(objectMap, "dnsType", d.DNSType)
	populate(objectMap, "dnsZoneId", d.DNSZoneID)
	populate(objectMap, "domainNotRenewableReasons", d.DomainNotRenewableReasons)
	populateTimeRFC3339(objectMap, "expirationTime", d.ExpirationTime)
	populateTimeRFC3339(objectMap, "lastRenewedTime", d.LastRenewedTime)
	populate(objectMap, "managedHostNames", d.ManagedHostNames)
	populate(objectMap, "nameServers", d.NameServers)
	populate(objectMap, "privacy", d.Privacy)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "readyForDnsRecordManagement", d.ReadyForDNSRecordManagement)
	populate(objectMap, "registrationStatus", d.RegistrationStatus)
	populate(objectMap, "targetDnsType", d.TargetDNSType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainProperties.
func (d *DomainProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authCode":
			err = unpopulate(val, &d.AuthCode)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &d.AutoRenew)
			delete(rawMsg, key)
		case "consent":
			err = unpopulate(val, &d.Consent)
			delete(rawMsg, key)
		case "contactAdmin":
			err = unpopulate(val, &d.ContactAdmin)
			delete(rawMsg, key)
		case "contactBilling":
			err = unpopulate(val, &d.ContactBilling)
			delete(rawMsg, key)
		case "contactRegistrant":
			err = unpopulate(val, &d.ContactRegistrant)
			delete(rawMsg, key)
		case "contactTech":
			err = unpopulate(val, &d.ContactTech)
			delete(rawMsg, key)
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &d.CreatedTime)
			delete(rawMsg, key)
		case "dnsType":
			err = unpopulate(val, &d.DNSType)
			delete(rawMsg, key)
		case "dnsZoneId":
			err = unpopulate(val, &d.DNSZoneID)
			delete(rawMsg, key)
		case "domainNotRenewableReasons":
			err = unpopulate(val, &d.DomainNotRenewableReasons)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &d.ExpirationTime)
			delete(rawMsg, key)
		case "lastRenewedTime":
			err = unpopulateTimeRFC3339(val, &d.LastRenewedTime)
			delete(rawMsg, key)
		case "managedHostNames":
			err = unpopulate(val, &d.ManagedHostNames)
			delete(rawMsg, key)
		case "nameServers":
			err = unpopulate(val, &d.NameServers)
			delete(rawMsg, key)
		case "privacy":
			err = unpopulate(val, &d.Privacy)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "readyForDnsRecordManagement":
			err = unpopulate(val, &d.ReadyForDNSRecordManagement)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &d.RegistrationStatus)
			delete(rawMsg, key)
		case "targetDnsType":
			err = unpopulate(val, &d.TargetDNSType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DomainPurchaseConsent.
func (d DomainPurchaseConsent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "agreedAt", d.AgreedAt)
	populate(objectMap, "agreedBy", d.AgreedBy)
	populate(objectMap, "agreementKeys", d.AgreementKeys)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainPurchaseConsent.
func (d *DomainPurchaseConsent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "agreedAt":
			err = unpopulateTimeRFC3339(val, &d.AgreedAt)
			delete(rawMsg, key)
		case "agreedBy":
			err = unpopulate(val, &d.AgreedBy)
			delete(rawMsg, key)
		case "agreementKeys":
			err = unpopulate(val, &d.AgreementKeys)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type EndpointDependency.
func (e EndpointDependency) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "domainName", e.DomainName)
	populate(objectMap, "endpointDetails", e.EndpointDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Environment.
func (e Environment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterSettings", e.ClusterSettings)
	populate(objectMap, "dnsSuffix", e.DNSSuffix)
	populate(objectMap, "dedicatedHostCount", e.DedicatedHostCount)
	populate(objectMap, "frontEndScaleFactor", e.FrontEndScaleFactor)
	populate(objectMap, "hasLinuxWorkers", e.HasLinuxWorkers)
	populate(objectMap, "internalLoadBalancingMode", e.InternalLoadBalancingMode)
	populate(objectMap, "ipsslAddressCount", e.IpsslAddressCount)
	populate(objectMap, "maximumNumberOfMachines", e.MaximumNumberOfMachines)
	populate(objectMap, "multiRoleCount", e.MultiRoleCount)
	populate(objectMap, "multiSize", e.MultiSize)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "status", e.Status)
	populate(objectMap, "suspended", e.Suspended)
	populate(objectMap, "userWhitelistedIpRanges", e.UserWhitelistedIPRanges)
	populate(objectMap, "virtualNetwork", e.VirtualNetwork)
	populate(objectMap, "zoneRedundant", e.ZoneRedundant)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentCollection.
func (e EnvironmentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentPatchResource.
func (e EnvironmentPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "kind", e.Kind)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EnvironmentResource.
func (e EnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "kind", e.Kind)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorEntity.
func (e ErrorEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "extendedCode", e.ExtendedCode)
	populate(objectMap, "innerErrors", e.InnerErrors)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "messageTemplate", e.MessageTemplate)
	populate(objectMap, "parameters", e.Parameters)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Experiments.
func (e Experiments) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "rampUpRules", e.RampUpRules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppMajorVersion.
func (f FunctionAppMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", f.DisplayText)
	populate(objectMap, "minorVersions", f.MinorVersions)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppRuntimeSettings.
func (f FunctionAppRuntimeSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appInsightsSettings", f.AppInsightsSettings)
	populate(objectMap, "appSettingsDictionary", f.AppSettingsDictionary)
	populateTimeRFC3339(objectMap, "endOfLifeDate", f.EndOfLifeDate)
	populate(objectMap, "gitHubActionSettings", f.GitHubActionSettings)
	populate(objectMap, "isAutoUpdate", f.IsAutoUpdate)
	populate(objectMap, "isDefault", f.IsDefault)
	populate(objectMap, "isDeprecated", f.IsDeprecated)
	populate(objectMap, "isEarlyAccess", f.IsEarlyAccess)
	populate(objectMap, "isHidden", f.IsHidden)
	populate(objectMap, "isPreview", f.IsPreview)
	populate(objectMap, "remoteDebuggingSupported", f.RemoteDebuggingSupported)
	populate(objectMap, "runtimeVersion", f.RuntimeVersion)
	populate(objectMap, "siteConfigPropertiesDictionary", f.SiteConfigPropertiesDictionary)
	populate(objectMap, "supportedFunctionsExtensionVersions", f.SupportedFunctionsExtensionVersions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FunctionAppRuntimeSettings.
func (f *FunctionAppRuntimeSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsightsSettings":
			err = unpopulate(val, &f.AppInsightsSettings)
			delete(rawMsg, key)
		case "appSettingsDictionary":
			err = unpopulate(val, &f.AppSettingsDictionary)
			delete(rawMsg, key)
		case "endOfLifeDate":
			err = unpopulateTimeRFC3339(val, &f.EndOfLifeDate)
			delete(rawMsg, key)
		case "gitHubActionSettings":
			err = unpopulate(val, &f.GitHubActionSettings)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &f.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDefault":
			err = unpopulate(val, &f.IsDefault)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &f.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &f.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &f.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &f.IsPreview)
			delete(rawMsg, key)
		case "remoteDebuggingSupported":
			err = unpopulate(val, &f.RemoteDebuggingSupported)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, &f.RuntimeVersion)
			delete(rawMsg, key)
		case "siteConfigPropertiesDictionary":
			err = unpopulate(val, &f.SiteConfigPropertiesDictionary)
			delete(rawMsg, key)
		case "supportedFunctionsExtensionVersions":
			err = unpopulate(val, &f.SupportedFunctionsExtensionVersions)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppStackCollection.
func (f FunctionAppStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppStackProperties.
func (f FunctionAppStackProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", f.DisplayText)
	populate(objectMap, "majorVersions", f.MajorVersions)
	populate(objectMap, "preferredOs", f.PreferredOs)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FunctionEnvelopeCollection.
func (f FunctionEnvelopeCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FunctionEnvelopeProperties.
func (f FunctionEnvelopeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "config", &f.Config)
	populate(objectMap, "config_href", f.ConfigHref)
	populate(objectMap, "files", f.Files)
	populate(objectMap, "function_app_id", f.FunctionAppID)
	populate(objectMap, "href", f.Href)
	populate(objectMap, "invoke_url_template", f.InvokeURLTemplate)
	populate(objectMap, "isDisabled", f.IsDisabled)
	populate(objectMap, "language", f.Language)
	populate(objectMap, "script_href", f.ScriptHref)
	populate(objectMap, "script_root_path_href", f.ScriptRootPathHref)
	populate(objectMap, "secrets_file_href", f.SecretsFileHref)
	populate(objectMap, "test_data", f.TestData)
	populate(objectMap, "test_data_href", f.TestDataHref)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GeoRegionCollection.
func (g GeoRegionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", g.NextLink)
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GlobalCsmSKUDescription.
func (g GlobalCsmSKUDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", g.Capabilities)
	populate(objectMap, "capacity", g.Capacity)
	populate(objectMap, "family", g.Family)
	populate(objectMap, "locations", g.Locations)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "size", g.Size)
	populate(objectMap, "tier", g.Tier)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GlobalValidation.
func (g GlobalValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "excludedPaths", g.ExcludedPaths)
	populate(objectMap, "redirectToProvider", g.RedirectToProvider)
	populate(objectMap, "requireAuthentication", g.RequireAuthentication)
	populate(objectMap, "unauthenticatedClientAction", g.UnauthenticatedClientAction)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HTTPScaleRule.
func (h HTTPScaleRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "auth", h.Auth)
	populate(objectMap, "metadata", h.Metadata)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HostKeys.
func (h HostKeys) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "functionKeys", h.FunctionKeys)
	populate(objectMap, "masterKey", h.MasterKey)
	populate(objectMap, "systemKeys", h.SystemKeys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HostName.
func (h HostName) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureResourceName", h.AzureResourceName)
	populate(objectMap, "azureResourceType", h.AzureResourceType)
	populate(objectMap, "customHostNameDnsRecordType", h.CustomHostNameDNSRecordType)
	populate(objectMap, "hostNameType", h.HostNameType)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "siteNames", h.SiteNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HostNameBindingCollection.
func (h HostNameBindingCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnection.
func (h HybridConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", h.ID)
	populate(objectMap, "kind", h.Kind)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "properties", h.Properties)
	populate(objectMap, "type", h.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnectionCollection.
func (h HybridConnectionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPSecurityRestriction.
func (i IPSecurityRestriction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", i.Action)
	populate(objectMap, "description", i.Description)
	populate(objectMap, "headers", i.Headers)
	populate(objectMap, "ipAddress", i.IPAddress)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "priority", i.Priority)
	populate(objectMap, "subnetMask", i.SubnetMask)
	populate(objectMap, "subnetTrafficTag", i.SubnetTrafficTag)
	populate(objectMap, "tag", i.Tag)
	populate(objectMap, "vnetSubnetResourceId", i.VnetSubnetResourceID)
	populate(objectMap, "vnetTrafficTag", i.VnetTrafficTag)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Identifier.
func (i Identifier) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", i.ID)
	populate(objectMap, "kind", i.Kind)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IdentifierCollection.
func (i IdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IdentityProviders.
func (i IdentityProviders) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apple", i.Apple)
	populate(objectMap, "azureActiveDirectory", i.AzureActiveDirectory)
	populate(objectMap, "azureStaticWebApps", i.AzureStaticWebApps)
	populate(objectMap, "customOpenIdConnectProviders", i.CustomOpenIDConnectProviders)
	populate(objectMap, "facebook", i.Facebook)
	populate(objectMap, "gitHub", i.GitHub)
	populate(objectMap, "google", i.Google)
	populate(objectMap, "legacyMicrosoftAccount", i.LegacyMicrosoftAccount)
	populate(objectMap, "twitter", i.Twitter)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InboundEnvironmentEndpoint.
func (i InboundEnvironmentEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", i.Description)
	populate(objectMap, "endpoints", i.Endpoints)
	populate(objectMap, "ports", i.Ports)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InboundEnvironmentEndpointCollection.
func (i InboundEnvironmentEndpointCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Ingress.
func (i Ingress) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowInsecure", i.AllowInsecure)
	populate(objectMap, "external", i.External)
	populate(objectMap, "fqdn", i.Fqdn)
	populate(objectMap, "targetPort", i.TargetPort)
	populate(objectMap, "traffic", i.Traffic)
	populate(objectMap, "transport", i.Transport)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type JwtClaimChecks.
func (j JwtClaimChecks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedClientApplications", j.AllowedClientApplications)
	populate(objectMap, "allowedGroups", j.AllowedGroups)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironment.
func (k KubeEnvironment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "extendedLocation", k.ExtendedLocation)
	populate(objectMap, "id", k.ID)
	populate(objectMap, "kind", k.Kind)
	populate(objectMap, "location", k.Location)
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "tags", k.Tags)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironmentCollection.
func (k KubeEnvironmentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", k.NextLink)
	populate(objectMap, "value", k.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironmentPatchResource.
func (k KubeEnvironmentPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", k.ID)
	populate(objectMap, "kind", k.Kind)
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LinuxJavaContainerSettings.
func (l LinuxJavaContainerSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endOfLifeDate", l.EndOfLifeDate)
	populate(objectMap, "isAutoUpdate", l.IsAutoUpdate)
	populate(objectMap, "isDeprecated", l.IsDeprecated)
	populate(objectMap, "isEarlyAccess", l.IsEarlyAccess)
	populate(objectMap, "isHidden", l.IsHidden)
	populate(objectMap, "isPreview", l.IsPreview)
	populate(objectMap, "java11Runtime", l.Java11Runtime)
	populate(objectMap, "java8Runtime", l.Java8Runtime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LinuxJavaContainerSettings.
func (l *LinuxJavaContainerSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endOfLifeDate":
			err = unpopulateTimeRFC3339(val, &l.EndOfLifeDate)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &l.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &l.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &l.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &l.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &l.IsPreview)
			delete(rawMsg, key)
		case "java11Runtime":
			err = unpopulate(val, &l.Java11Runtime)
			delete(rawMsg, key)
		case "java8Runtime":
			err = unpopulate(val, &l.Java8Runtime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Login.
func (l Login) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedExternalRedirectUrls", l.AllowedExternalRedirectUrls)
	populate(objectMap, "cookieExpiration", l.CookieExpiration)
	populate(objectMap, "nonce", l.Nonce)
	populate(objectMap, "preserveUrlFragmentsForLogins", l.PreserveURLFragmentsForLogins)
	populate(objectMap, "routes", l.Routes)
	populate(objectMap, "tokenStore", l.TokenStore)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoginScopes.
func (l LoginScopes) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "scopes", l.Scopes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployCore.
func (m MSDeployCore) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appOffline", m.AppOffline)
	populate(objectMap, "connectionString", m.ConnectionString)
	populate(objectMap, "dbType", m.DbType)
	populate(objectMap, "packageUri", m.PackageURI)
	populate(objectMap, "setParameters", m.SetParameters)
	populate(objectMap, "setParametersXmlFileUri", m.SetParametersXMLFileURI)
	populate(objectMap, "skipAppData", m.SkipAppData)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployLogEntry.
func (m MSDeployLogEntry) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "message", m.Message)
	populateTimeRFC3339(objectMap, "time", m.Time)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MSDeployLogEntry.
func (m *MSDeployLogEntry) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "message":
			err = unpopulate(val, &m.Message)
			delete(rawMsg, key)
		case "time":
			err = unpopulateTimeRFC3339(val, &m.Time)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployLogProperties.
func (m MSDeployLogProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "entries", m.Entries)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployStatusProperties.
func (m MSDeployStatusProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "complete", m.Complete)
	populate(objectMap, "deployer", m.Deployer)
	populateTimeRFC3339(objectMap, "endTime", m.EndTime)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populateTimeRFC3339(objectMap, "startTime", m.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MSDeployStatusProperties.
func (m *MSDeployStatusProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "complete":
			err = unpopulate(val, &m.Complete)
			delete(rawMsg, key)
		case "deployer":
			err = unpopulate(val, &m.Deployer)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &m.EndTime)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &m.ProvisioningState)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &m.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "availabilities", m.Availabilities)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", m.EnableRegionalMdmAccount)
	populate(objectMap, "fillGapWithZero", m.FillGapWithZero)
	populate(objectMap, "isInternal", m.IsInternal)
	populate(objectMap, "metricFilterPattern", m.MetricFilterPattern)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "sourceMdmAccount", m.SourceMdmAccount)
	populate(objectMap, "sourceMdmNamespace", m.SourceMdmNamespace)
	populate(objectMap, "supportedAggregationTypes", m.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", m.SupportedTimeGrainTypes)
	populate(objectMap, "supportsInstanceLevelAggregation", m.SupportsInstanceLevelAggregation)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NameIdentifierCollection.
func (n NameIdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFeaturesProperties.
func (n NetworkFeaturesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hybridConnections", n.HybridConnections)
	populate(objectMap, "hybridConnectionsV2", n.HybridConnectionsV2)
	populate(objectMap, "virtualNetworkConnection", n.VirtualNetworkConnection)
	populate(objectMap, "virtualNetworkName", n.VirtualNetworkName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OpenIDConnectLogin.
func (o OpenIDConnectLogin) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nameClaimType", o.NameClaimType)
	populate(objectMap, "scopes", o.Scopes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdTime", o.CreatedTime)
	populate(objectMap, "errors", o.Errors)
	populateTimeRFC3339(objectMap, "expirationTime", o.ExpirationTime)
	populate(objectMap, "geoMasterOperationId", o.GeoMasterOperationID)
	populate(objectMap, "id", o.ID)
	populateTimeRFC3339(objectMap, "modifiedTime", o.ModifiedTime)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &o.CreatedTime)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &o.Errors)
			delete(rawMsg, key)
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &o.ExpirationTime)
			delete(rawMsg, key)
		case "geoMasterOperationId":
			err = unpopulate(val, &o.GeoMasterOperationID)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &o.ID)
			delete(rawMsg, key)
		case "modifiedTime":
			err = unpopulateTimeRFC3339(val, &o.ModifiedTime)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OutboundEnvironmentEndpoint.
func (o OutboundEnvironmentEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", o.Category)
	populate(objectMap, "endpoints", o.Endpoints)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OutboundEnvironmentEndpointCollection.
func (o OutboundEnvironmentEndpointCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonCounterCollection.
func (p PerfMonCounterCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonSample.
func (p PerfMonSample) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "instanceName", p.InstanceName)
	populateTimeRFC3339(objectMap, "time", p.Time)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PerfMonSample.
func (p *PerfMonSample) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceName":
			err = unpopulate(val, &p.InstanceName)
			delete(rawMsg, key)
		case "time":
			err = unpopulateTimeRFC3339(val, &p.Time)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &p.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonSet.
func (p PerfMonSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", p.EndTime)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "startTime", p.StartTime)
	populate(objectMap, "timeGrain", p.TimeGrain)
	populate(objectMap, "values", p.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PerfMonSet.
func (p *PerfMonSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &p.EndTime)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &p.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &p.TimeGrain)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, &p.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Plan.
func (p Plan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "extendedLocation", p.ExtendedLocation)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PlanCollection.
func (p PlanCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PlanPatchResource.
func (p PlanPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PlanPatchResourceProperties.
func (p PlanPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "elasticScaleEnabled", p.ElasticScaleEnabled)
	populateTimeRFC3339(objectMap, "freeOfferExpirationTime", p.FreeOfferExpirationTime)
	populate(objectMap, "geoRegion", p.GeoRegion)
	populate(objectMap, "hostingEnvironmentProfile", p.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", p.HyperV)
	populate(objectMap, "isSpot", p.IsSpot)
	populate(objectMap, "isXenon", p.IsXenon)
	populate(objectMap, "kubeEnvironmentProfile", p.KubeEnvironmentProfile)
	populate(objectMap, "maximumElasticWorkerCount", p.MaximumElasticWorkerCount)
	populate(objectMap, "maximumNumberOfWorkers", p.MaximumNumberOfWorkers)
	populate(objectMap, "numberOfSites", p.NumberOfSites)
	populate(objectMap, "perSiteScaling", p.PerSiteScaling)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "reserved", p.Reserved)
	populate(objectMap, "resourceGroup", p.ResourceGroup)
	populateTimeRFC3339(objectMap, "spotExpirationTime", p.SpotExpirationTime)
	populate(objectMap, "status", p.Status)
	populate(objectMap, "subscription", p.Subscription)
	populate(objectMap, "targetWorkerCount", p.TargetWorkerCount)
	populate(objectMap, "targetWorkerSizeId", p.TargetWorkerSizeID)
	populate(objectMap, "workerTierName", p.WorkerTierName)
	populate(objectMap, "zoneRedundant", p.ZoneRedundant)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlanPatchResourceProperties.
func (p *PlanPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "elasticScaleEnabled":
			err = unpopulate(val, &p.ElasticScaleEnabled)
			delete(rawMsg, key)
		case "freeOfferExpirationTime":
			err = unpopulateTimeRFC3339(val, &p.FreeOfferExpirationTime)
			delete(rawMsg, key)
		case "geoRegion":
			err = unpopulate(val, &p.GeoRegion)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &p.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &p.HyperV)
			delete(rawMsg, key)
		case "isSpot":
			err = unpopulate(val, &p.IsSpot)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &p.IsXenon)
			delete(rawMsg, key)
		case "kubeEnvironmentProfile":
			err = unpopulate(val, &p.KubeEnvironmentProfile)
			delete(rawMsg, key)
		case "maximumElasticWorkerCount":
			err = unpopulate(val, &p.MaximumElasticWorkerCount)
			delete(rawMsg, key)
		case "maximumNumberOfWorkers":
			err = unpopulate(val, &p.MaximumNumberOfWorkers)
			delete(rawMsg, key)
		case "numberOfSites":
			err = unpopulate(val, &p.NumberOfSites)
			delete(rawMsg, key)
		case "perSiteScaling":
			err = unpopulate(val, &p.PerSiteScaling)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &p.ProvisioningState)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &p.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &p.ResourceGroup)
			delete(rawMsg, key)
		case "spotExpirationTime":
			err = unpopulateTimeRFC3339(val, &p.SpotExpirationTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "subscription":
			err = unpopulate(val, &p.Subscription)
			delete(rawMsg, key)
		case "targetWorkerCount":
			err = unpopulate(val, &p.TargetWorkerCount)
			delete(rawMsg, key)
		case "targetWorkerSizeId":
			err = unpopulate(val, &p.TargetWorkerSizeID)
			delete(rawMsg, key)
		case "workerTierName":
			err = unpopulate(val, &p.WorkerTierName)
			delete(rawMsg, key)
		case "zoneRedundant":
			err = unpopulate(val, &p.ZoneRedundant)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlanProperties.
func (p PlanProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "elasticScaleEnabled", p.ElasticScaleEnabled)
	populateTimeRFC3339(objectMap, "freeOfferExpirationTime", p.FreeOfferExpirationTime)
	populate(objectMap, "geoRegion", p.GeoRegion)
	populate(objectMap, "hostingEnvironmentProfile", p.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", p.HyperV)
	populate(objectMap, "isSpot", p.IsSpot)
	populate(objectMap, "isXenon", p.IsXenon)
	populate(objectMap, "kubeEnvironmentProfile", p.KubeEnvironmentProfile)
	populate(objectMap, "maximumElasticWorkerCount", p.MaximumElasticWorkerCount)
	populate(objectMap, "maximumNumberOfWorkers", p.MaximumNumberOfWorkers)
	populate(objectMap, "numberOfSites", p.NumberOfSites)
	populate(objectMap, "perSiteScaling", p.PerSiteScaling)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "reserved", p.Reserved)
	populate(objectMap, "resourceGroup", p.ResourceGroup)
	populateTimeRFC3339(objectMap, "spotExpirationTime", p.SpotExpirationTime)
	populate(objectMap, "status", p.Status)
	populate(objectMap, "subscription", p.Subscription)
	populate(objectMap, "targetWorkerCount", p.TargetWorkerCount)
	populate(objectMap, "targetWorkerSizeId", p.TargetWorkerSizeID)
	populate(objectMap, "workerTierName", p.WorkerTierName)
	populate(objectMap, "zoneRedundant", p.ZoneRedundant)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlanProperties.
func (p *PlanProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "elasticScaleEnabled":
			err = unpopulate(val, &p.ElasticScaleEnabled)
			delete(rawMsg, key)
		case "freeOfferExpirationTime":
			err = unpopulateTimeRFC3339(val, &p.FreeOfferExpirationTime)
			delete(rawMsg, key)
		case "geoRegion":
			err = unpopulate(val, &p.GeoRegion)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &p.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &p.HyperV)
			delete(rawMsg, key)
		case "isSpot":
			err = unpopulate(val, &p.IsSpot)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &p.IsXenon)
			delete(rawMsg, key)
		case "kubeEnvironmentProfile":
			err = unpopulate(val, &p.KubeEnvironmentProfile)
			delete(rawMsg, key)
		case "maximumElasticWorkerCount":
			err = unpopulate(val, &p.MaximumElasticWorkerCount)
			delete(rawMsg, key)
		case "maximumNumberOfWorkers":
			err = unpopulate(val, &p.MaximumNumberOfWorkers)
			delete(rawMsg, key)
		case "numberOfSites":
			err = unpopulate(val, &p.NumberOfSites)
			delete(rawMsg, key)
		case "perSiteScaling":
			err = unpopulate(val, &p.PerSiteScaling)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &p.ProvisioningState)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &p.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &p.ResourceGroup)
			delete(rawMsg, key)
		case "spotExpirationTime":
			err = unpopulateTimeRFC3339(val, &p.SpotExpirationTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "subscription":
			err = unpopulate(val, &p.Subscription)
			delete(rawMsg, key)
		case "targetWorkerCount":
			err = unpopulate(val, &p.TargetWorkerCount)
			delete(rawMsg, key)
		case "targetWorkerSizeId":
			err = unpopulate(val, &p.TargetWorkerSizeID)
			delete(rawMsg, key)
		case "workerTierName":
			err = unpopulate(val, &p.WorkerTierName)
			delete(rawMsg, key)
		case "zoneRedundant":
			err = unpopulate(val, &p.ZoneRedundant)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOn.
func (p PremierAddOn) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOnOfferCollection.
func (p PremierAddOnOfferCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOnPatchResource.
func (p PremierAddOnPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateAccessProperties.
func (p PrivateAccessProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enabled", p.Enabled)
	populate(objectMap, "virtualNetworks", p.VirtualNetworks)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateAccessVirtualNetwork.
func (p PrivateAccessVirtualNetwork) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "key", p.Key)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "resourceId", p.ResourceID)
	populate(objectMap, "subnets", p.Subnets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionCollection.
func (p PrivateEndpointConnectionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourcesWrapper.
func (p PrivateLinkResourcesWrapper) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProcessInfoCollection.
func (p ProcessInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProcessInfoProperties.
func (p ProcessInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "children", p.Children)
	populate(objectMap, "command_line", p.CommandLine)
	populate(objectMap, "deployment_name", p.DeploymentName)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "environment_variables", p.EnvironmentVariables)
	populate(objectMap, "file_name", p.FileName)
	populate(objectMap, "handle_count", p.HandleCount)
	populate(objectMap, "href", p.Href)
	populate(objectMap, "identifier", p.Identifier)
	populate(objectMap, "iis_profile_timeout_in_seconds", p.IisProfileTimeoutInSeconds)
	populate(objectMap, "is_iis_profile_running", p.IsIisProfileRunning)
	populate(objectMap, "is_profile_running", p.IsProfileRunning)
	populate(objectMap, "is_scm_site", p.IsScmSite)
	populate(objectMap, "is_webjob", p.IsWebjob)
	populate(objectMap, "minidump", p.Minidump)
	populate(objectMap, "module_count", p.ModuleCount)
	populate(objectMap, "modules", p.Modules)
	populate(objectMap, "non_paged_system_memory", p.NonPagedSystemMemory)
	populate(objectMap, "open_file_handles", p.OpenFileHandles)
	populate(objectMap, "paged_memory", p.PagedMemory)
	populate(objectMap, "paged_system_memory", p.PagedSystemMemory)
	populate(objectMap, "parent", p.Parent)
	populate(objectMap, "peak_paged_memory", p.PeakPagedMemory)
	populate(objectMap, "peak_virtual_memory", p.PeakVirtualMemory)
	populate(objectMap, "peak_working_set", p.PeakWorkingSet)
	populate(objectMap, "private_memory", p.PrivateMemory)
	populate(objectMap, "privileged_cpu_time", p.PrivilegedCPUTime)
	populateTimeRFC3339(objectMap, "start_time", p.StartTime)
	populate(objectMap, "thread_count", p.ThreadCount)
	populate(objectMap, "threads", p.Threads)
	populateTimeRFC3339(objectMap, "time_stamp", p.TimeStamp)
	populate(objectMap, "total_cpu_time", p.TotalCPUTime)
	populate(objectMap, "user_cpu_time", p.UserCPUTime)
	populate(objectMap, "user_name", p.UserName)
	populate(objectMap, "virtual_memory", p.VirtualMemory)
	populate(objectMap, "working_set", p.WorkingSet)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProcessInfoProperties.
func (p *ProcessInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "children":
			err = unpopulate(val, &p.Children)
			delete(rawMsg, key)
		case "command_line":
			err = unpopulate(val, &p.CommandLine)
			delete(rawMsg, key)
		case "deployment_name":
			err = unpopulate(val, &p.DeploymentName)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &p.Description)
			delete(rawMsg, key)
		case "environment_variables":
			err = unpopulate(val, &p.EnvironmentVariables)
			delete(rawMsg, key)
		case "file_name":
			err = unpopulate(val, &p.FileName)
			delete(rawMsg, key)
		case "handle_count":
			err = unpopulate(val, &p.HandleCount)
			delete(rawMsg, key)
		case "href":
			err = unpopulate(val, &p.Href)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, &p.Identifier)
			delete(rawMsg, key)
		case "iis_profile_timeout_in_seconds":
			err = unpopulate(val, &p.IisProfileTimeoutInSeconds)
			delete(rawMsg, key)
		case "is_iis_profile_running":
			err = unpopulate(val, &p.IsIisProfileRunning)
			delete(rawMsg, key)
		case "is_profile_running":
			err = unpopulate(val, &p.IsProfileRunning)
			delete(rawMsg, key)
		case "is_scm_site":
			err = unpopulate(val, &p.IsScmSite)
			delete(rawMsg, key)
		case "is_webjob":
			err = unpopulate(val, &p.IsWebjob)
			delete(rawMsg, key)
		case "minidump":
			err = unpopulate(val, &p.Minidump)
			delete(rawMsg, key)
		case "module_count":
			err = unpopulate(val, &p.ModuleCount)
			delete(rawMsg, key)
		case "modules":
			err = unpopulate(val, &p.Modules)
			delete(rawMsg, key)
		case "non_paged_system_memory":
			err = unpopulate(val, &p.NonPagedSystemMemory)
			delete(rawMsg, key)
		case "open_file_handles":
			err = unpopulate(val, &p.OpenFileHandles)
			delete(rawMsg, key)
		case "paged_memory":
			err = unpopulate(val, &p.PagedMemory)
			delete(rawMsg, key)
		case "paged_system_memory":
			err = unpopulate(val, &p.PagedSystemMemory)
			delete(rawMsg, key)
		case "parent":
			err = unpopulate(val, &p.Parent)
			delete(rawMsg, key)
		case "peak_paged_memory":
			err = unpopulate(val, &p.PeakPagedMemory)
			delete(rawMsg, key)
		case "peak_virtual_memory":
			err = unpopulate(val, &p.PeakVirtualMemory)
			delete(rawMsg, key)
		case "peak_working_set":
			err = unpopulate(val, &p.PeakWorkingSet)
			delete(rawMsg, key)
		case "private_memory":
			err = unpopulate(val, &p.PrivateMemory)
			delete(rawMsg, key)
		case "privileged_cpu_time":
			err = unpopulate(val, &p.PrivilegedCPUTime)
			delete(rawMsg, key)
		case "start_time":
			err = unpopulateTimeRFC3339(val, &p.StartTime)
			delete(rawMsg, key)
		case "thread_count":
			err = unpopulate(val, &p.ThreadCount)
			delete(rawMsg, key)
		case "threads":
			err = unpopulate(val, &p.Threads)
			delete(rawMsg, key)
		case "time_stamp":
			err = unpopulateTimeRFC3339(val, &p.TimeStamp)
			delete(rawMsg, key)
		case "total_cpu_time":
			err = unpopulate(val, &p.TotalCPUTime)
			delete(rawMsg, key)
		case "user_cpu_time":
			err = unpopulate(val, &p.UserCPUTime)
			delete(rawMsg, key)
		case "user_name":
			err = unpopulate(val, &p.UserName)
			delete(rawMsg, key)
		case "virtual_memory":
			err = unpopulate(val, &p.VirtualMemory)
			delete(rawMsg, key)
		case "working_set":
			err = unpopulate(val, &p.WorkingSet)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProcessModuleInfoCollection.
func (p ProcessModuleInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProcessThreadInfoCollection.
func (p ProcessThreadInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProcessThreadInfoProperties.
func (p ProcessThreadInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "base_priority", p.BasePriority)
	populate(objectMap, "current_priority", p.CurrentPriority)
	populate(objectMap, "href", p.Href)
	populate(objectMap, "identifier", p.Identifier)
	populate(objectMap, "priority_level", p.PriorityLevel)
	populate(objectMap, "process", p.Process)
	populate(objectMap, "start_address", p.StartAddress)
	populateTimeRFC3339(objectMap, "start_time", p.StartTime)
	populate(objectMap, "state", p.State)
	populate(objectMap, "total_processor_time", p.TotalProcessorTime)
	populate(objectMap, "user_processor_time", p.UserProcessorTime)
	populate(objectMap, "wait_reason", p.WaitReason)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProcessThreadInfoProperties.
func (p *ProcessThreadInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "base_priority":
			err = unpopulate(val, &p.BasePriority)
			delete(rawMsg, key)
		case "current_priority":
			err = unpopulate(val, &p.CurrentPriority)
			delete(rawMsg, key)
		case "href":
			err = unpopulate(val, &p.Href)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, &p.Identifier)
			delete(rawMsg, key)
		case "priority_level":
			err = unpopulate(val, &p.PriorityLevel)
			delete(rawMsg, key)
		case "process":
			err = unpopulate(val, &p.Process)
			delete(rawMsg, key)
		case "start_address":
			err = unpopulate(val, &p.StartAddress)
			delete(rawMsg, key)
		case "start_time":
			err = unpopulateTimeRFC3339(val, &p.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "total_processor_time":
			err = unpopulate(val, &p.TotalProcessorTime)
			delete(rawMsg, key)
		case "user_processor_time":
			err = unpopulate(val, &p.UserProcessorTime)
			delete(rawMsg, key)
		case "wait_reason":
			err = unpopulate(val, &p.WaitReason)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PublicCertificateCollection.
func (p PublicCertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PublicCertificateProperties.
func (p PublicCertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateByteArray(objectMap, "blob", p.Blob, runtime.Base64StdFormat)
	populate(objectMap, "publicCertificateLocation", p.PublicCertificateLocation)
	populate(objectMap, "thumbprint", p.Thumbprint)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PublicCertificateProperties.
func (p *PublicCertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blob":
			err = runtime.DecodeByteArray(string(val), &p.Blob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicCertificateLocation":
			err = unpopulate(val, &p.PublicCertificateLocation)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &p.Thumbprint)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PublishingCredentialsPoliciesCollection.
func (p PublishingCredentialsPoliciesCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type QueryUtterancesResults.
func (q QueryUtterancesResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "query", q.Query)
	populate(objectMap, "results", q.Results)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type QueueScaleRule.
func (q QueueScaleRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "auth", q.Auth)
	populate(objectMap, "queueLength", q.QueueLength)
	populate(objectMap, "queueName", q.QueueName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationCollection.
func (r RecommendationCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationProperties.
func (r RecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionName", r.ActionName)
	populate(objectMap, "bladeName", r.BladeName)
	populate(objectMap, "categoryTags", r.CategoryTags)
	populate(objectMap, "channels", r.Channels)
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populate(objectMap, "displayName", r.DisplayName)
	populate(objectMap, "enabled", r.Enabled)
	populateTimeRFC3339(objectMap, "endTime", r.EndTime)
	populate(objectMap, "extensionName", r.ExtensionName)
	populate(objectMap, "forwardLink", r.ForwardLink)
	populate(objectMap, "isDynamic", r.IsDynamic)
	populate(objectMap, "level", r.Level)
	populate(objectMap, "message", r.Message)
	populateTimeRFC3339(objectMap, "nextNotificationTime", r.NextNotificationTime)
	populateTimeRFC3339(objectMap, "notificationExpirationTime", r.NotificationExpirationTime)
	populateTimeRFC3339(objectMap, "notifiedTime", r.NotifiedTime)
	populate(objectMap, "recommendationId", r.RecommendationID)
	populate(objectMap, "resourceId", r.ResourceID)
	populate(objectMap, "resourceScope", r.ResourceScope)
	populate(objectMap, "ruleName", r.RuleName)
	populate(objectMap, "score", r.Score)
	populateTimeRFC3339(objectMap, "startTime", r.StartTime)
	populate(objectMap, "states", r.States)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecommendationProperties.
func (r *RecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionName":
			err = unpopulate(val, &r.ActionName)
			delete(rawMsg, key)
		case "bladeName":
			err = unpopulate(val, &r.BladeName)
			delete(rawMsg, key)
		case "categoryTags":
			err = unpopulate(val, &r.CategoryTags)
			delete(rawMsg, key)
		case "channels":
			err = unpopulate(val, &r.Channels)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &r.DisplayName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &r.Enabled)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &r.EndTime)
			delete(rawMsg, key)
		case "extensionName":
			err = unpopulate(val, &r.ExtensionName)
			delete(rawMsg, key)
		case "forwardLink":
			err = unpopulate(val, &r.ForwardLink)
			delete(rawMsg, key)
		case "isDynamic":
			err = unpopulate(val, &r.IsDynamic)
			delete(rawMsg, key)
		case "level":
			err = unpopulate(val, &r.Level)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &r.Message)
			delete(rawMsg, key)
		case "nextNotificationTime":
			err = unpopulateTimeRFC3339(val, &r.NextNotificationTime)
			delete(rawMsg, key)
		case "notificationExpirationTime":
			err = unpopulateTimeRFC3339(val, &r.NotificationExpirationTime)
			delete(rawMsg, key)
		case "notifiedTime":
			err = unpopulateTimeRFC3339(val, &r.NotifiedTime)
			delete(rawMsg, key)
		case "recommendationId":
			err = unpopulate(val, &r.RecommendationID)
			delete(rawMsg, key)
		case "resourceId":
			err = unpopulate(val, &r.ResourceID)
			delete(rawMsg, key)
		case "resourceScope":
			err = unpopulate(val, &r.ResourceScope)
			delete(rawMsg, key)
		case "ruleName":
			err = unpopulate(val, &r.RuleName)
			delete(rawMsg, key)
		case "score":
			err = unpopulate(val, &r.Score)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &r.StartTime)
			delete(rawMsg, key)
		case "states":
			err = unpopulate(val, &r.States)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationRuleProperties.
func (r RecommendationRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionName", r.ActionName)
	populate(objectMap, "bladeName", r.BladeName)
	populate(objectMap, "categoryTags", r.CategoryTags)
	populate(objectMap, "channels", r.Channels)
	populate(objectMap, "description", r.Description)
	populate(objectMap, "displayName", r.DisplayName)
	populate(objectMap, "extensionName", r.ExtensionName)
	populate(objectMap, "forwardLink", r.ForwardLink)
	populate(objectMap, "isDynamic", r.IsDynamic)
	populate(objectMap, "level", r.Level)
	populate(objectMap, "message", r.Message)
	populate(objectMap, "recommendationId", r.RecommendationID)
	populate(objectMap, "recommendationName", r.RecommendationName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RelayServiceConnectionEntity.
func (r RelayServiceConnectionEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "kind", r.Kind)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnectionARMResourceProperties.
func (r RemotePrivateEndpointConnectionARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipAddresses", r.IPAddresses)
	populate(objectMap, "privateEndpoint", r.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", r.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnectionProperties.
func (r RemotePrivateEndpointConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipAddresses", r.IPAddresses)
	populate(objectMap, "privateEndpoint", r.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", r.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "kind", r.Kind)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceCollection.
func (r ResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceHealthMetadataCollection.
func (r ResourceHealthMetadataCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceMetricDefinitionCollection.
func (r ResourceMetricDefinitionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceMetricDefinitionProperties.
func (r ResourceMetricDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metricAvailabilities", r.MetricAvailabilities)
	populate(objectMap, "primaryAggregationType", r.PrimaryAggregationType)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "resourceUri", r.ResourceURI)
	populate(objectMap, "unit", r.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResponseMessageEnvelopeRemotePrivateEndpointConnection.
func (r ResponseMessageEnvelopeRemotePrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", r.Error)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "plan", r.Plan)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "sku", r.SKU)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestoreRequestProperties.
func (r RestoreRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "adjustConnectionStrings", r.AdjustConnectionStrings)
	populate(objectMap, "appServicePlan", r.AppServicePlan)
	populate(objectMap, "blobName", r.BlobName)
	populate(objectMap, "databases", r.Databases)
	populate(objectMap, "hostingEnvironment", r.HostingEnvironment)
	populate(objectMap, "ignoreConflictingHostNames", r.IgnoreConflictingHostNames)
	populate(objectMap, "ignoreDatabases", r.IgnoreDatabases)
	populate(objectMap, "operationType", r.OperationType)
	populate(objectMap, "overwrite", r.Overwrite)
	populate(objectMap, "siteName", r.SiteName)
	populate(objectMap, "storageAccountUrl", r.StorageAccountURL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Revision.
func (r Revision) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "kind", r.Kind)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RevisionCollection.
func (r RevisionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RevisionProperties.
func (r RevisionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "active", r.Active)
	populateTimeRFC3339(objectMap, "createdTime", r.CreatedTime)
	populate(objectMap, "fqdn", r.Fqdn)
	populate(objectMap, "healthState", r.HealthState)
	populate(objectMap, "provisioningError", r.ProvisioningError)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "replicas", r.Replicas)
	populate(objectMap, "template", r.Template)
	populate(objectMap, "trafficWeight", r.TrafficWeight)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RevisionProperties.
func (r *RevisionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "active":
			err = unpopulate(val, &r.Active)
			delete(rawMsg, key)
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &r.CreatedTime)
			delete(rawMsg, key)
		case "fqdn":
			err = unpopulate(val, &r.Fqdn)
			delete(rawMsg, key)
		case "healthState":
			err = unpopulate(val, &r.HealthState)
			delete(rawMsg, key)
		case "provisioningError":
			err = unpopulate(val, &r.ProvisioningError)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &r.ProvisioningState)
			delete(rawMsg, key)
		case "replicas":
			err = unpopulate(val, &r.Replicas)
			delete(rawMsg, key)
		case "template":
			err = unpopulate(val, &r.Template)
			delete(rawMsg, key)
		case "trafficWeight":
			err = unpopulate(val, &r.TrafficWeight)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SKUDescription.
func (s SKUDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", s.Capabilities)
	populate(objectMap, "capacity", s.Capacity)
	populate(objectMap, "family", s.Family)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "skuCapacity", s.SKUCapacity)
	populate(objectMap, "size", s.Size)
	populate(objectMap, "tier", s.Tier)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SKUInfoCollection.
func (s SKUInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SKUInfos.
func (s SKUInfos) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "resourceType", s.ResourceType)
	populate(objectMap, "skus", s.SKUs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SampleUtterance.
func (s SampleUtterance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "links", s.Links)
	populate(objectMap, "qid", s.Qid)
	populate(objectMap, "text", s.Text)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Scale.
func (s Scale) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "maxReplicas", s.MaxReplicas)
	populate(objectMap, "minReplicas", s.MinReplicas)
	populate(objectMap, "rules", s.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SecretsCollection.
func (s SecretsCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Site.
func (s Site) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "extendedLocation", s.ExtendedLocation)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteAuthSettingsProperties.
func (s SiteAuthSettingsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aadClaimsAuthorization", s.AADClaimsAuthorization)
	populate(objectMap, "additionalLoginParams", s.AdditionalLoginParams)
	populate(objectMap, "allowedAudiences", s.AllowedAudiences)
	populate(objectMap, "allowedExternalRedirectUrls", s.AllowedExternalRedirectUrls)
	populate(objectMap, "authFilePath", s.AuthFilePath)
	populate(objectMap, "clientId", s.ClientID)
	populate(objectMap, "clientSecret", s.ClientSecret)
	populate(objectMap, "clientSecretCertificateThumbprint", s.ClientSecretCertificateThumbprint)
	populate(objectMap, "clientSecretSettingName", s.ClientSecretSettingName)
	populate(objectMap, "configVersion", s.ConfigVersion)
	populate(objectMap, "defaultProvider", s.DefaultProvider)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "facebookAppId", s.FacebookAppID)
	populate(objectMap, "facebookAppSecret", s.FacebookAppSecret)
	populate(objectMap, "facebookAppSecretSettingName", s.FacebookAppSecretSettingName)
	populate(objectMap, "facebookOAuthScopes", s.FacebookOAuthScopes)
	populate(objectMap, "gitHubClientId", s.GitHubClientID)
	populate(objectMap, "gitHubClientSecret", s.GitHubClientSecret)
	populate(objectMap, "gitHubClientSecretSettingName", s.GitHubClientSecretSettingName)
	populate(objectMap, "gitHubOAuthScopes", s.GitHubOAuthScopes)
	populate(objectMap, "googleClientId", s.GoogleClientID)
	populate(objectMap, "googleClientSecret", s.GoogleClientSecret)
	populate(objectMap, "googleClientSecretSettingName", s.GoogleClientSecretSettingName)
	populate(objectMap, "googleOAuthScopes", s.GoogleOAuthScopes)
	populate(objectMap, "isAuthFromFile", s.IsAuthFromFile)
	populate(objectMap, "issuer", s.Issuer)
	populate(objectMap, "microsoftAccountClientId", s.MicrosoftAccountClientID)
	populate(objectMap, "microsoftAccountClientSecret", s.MicrosoftAccountClientSecret)
	populate(objectMap, "microsoftAccountClientSecretSettingName", s.MicrosoftAccountClientSecretSettingName)
	populate(objectMap, "microsoftAccountOAuthScopes", s.MicrosoftAccountOAuthScopes)
	populate(objectMap, "runtimeVersion", s.RuntimeVersion)
	populate(objectMap, "tokenRefreshExtensionHours", s.TokenRefreshExtensionHours)
	populate(objectMap, "tokenStoreEnabled", s.TokenStoreEnabled)
	populate(objectMap, "twitterConsumerKey", s.TwitterConsumerKey)
	populate(objectMap, "twitterConsumerSecret", s.TwitterConsumerSecret)
	populate(objectMap, "twitterConsumerSecretSettingName", s.TwitterConsumerSecretSettingName)
	populate(objectMap, "unauthenticatedClientAction", s.UnauthenticatedClientAction)
	populate(objectMap, "validateIssuer", s.ValidateIssuer)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteCloneability.
func (s SiteCloneability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blockingCharacteristics", s.BlockingCharacteristics)
	populate(objectMap, "blockingFeatures", s.BlockingFeatures)
	populate(objectMap, "result", s.Result)
	populate(objectMap, "unsupportedFeatures", s.UnsupportedFeatures)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfig.
func (s SiteConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiDefinition", s.APIDefinition)
	populate(objectMap, "apiManagementConfig", s.APIManagementConfig)
	populate(objectMap, "acrUseManagedIdentityCreds", s.AcrUseManagedIdentityCreds)
	populate(objectMap, "acrUserManagedIdentityID", s.AcrUserManagedIdentityID)
	populate(objectMap, "alwaysOn", s.AlwaysOn)
	populate(objectMap, "appCommandLine", s.AppCommandLine)
	populate(objectMap, "appSettings", s.AppSettings)
	populate(objectMap, "autoHealEnabled", s.AutoHealEnabled)
	populate(objectMap, "autoHealRules", s.AutoHealRules)
	populate(objectMap, "autoSwapSlotName", s.AutoSwapSlotName)
	populate(objectMap, "azureStorageAccounts", s.AzureStorageAccounts)
	populate(objectMap, "connectionStrings", s.ConnectionStrings)
	populate(objectMap, "cors", s.Cors)
	populate(objectMap, "defaultDocuments", s.DefaultDocuments)
	populate(objectMap, "detailedErrorLoggingEnabled", s.DetailedErrorLoggingEnabled)
	populate(objectMap, "documentRoot", s.DocumentRoot)
	populate(objectMap, "experiments", s.Experiments)
	populate(objectMap, "ftpsState", s.FtpsState)
	populate(objectMap, "functionAppScaleLimit", s.FunctionAppScaleLimit)
	populate(objectMap, "functionsRuntimeScaleMonitoringEnabled", s.FunctionsRuntimeScaleMonitoringEnabled)
	populate(objectMap, "httpLoggingEnabled", s.HTTPLoggingEnabled)
	populate(objectMap, "handlerMappings", s.HandlerMappings)
	populate(objectMap, "healthCheckPath", s.HealthCheckPath)
	populate(objectMap, "http20Enabled", s.Http20Enabled)
	populate(objectMap, "ipSecurityRestrictions", s.IPSecurityRestrictions)
	populate(objectMap, "javaContainer", s.JavaContainer)
	populate(objectMap, "javaContainerVersion", s.JavaContainerVersion)
	populate(objectMap, "javaVersion", s.JavaVersion)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "limits", s.Limits)
	populate(objectMap, "linuxFxVersion", s.LinuxFxVersion)
	populate(objectMap, "loadBalancing", s.LoadBalancing)
	populate(objectMap, "localMySqlEnabled", s.LocalMySQLEnabled)
	populate(objectMap, "logsDirectorySizeLimit", s.LogsDirectorySizeLimit)
	populate(objectMap, "machineKey", s.MachineKey)
	populate(objectMap, "managedPipelineMode", s.ManagedPipelineMode)
	populate(objectMap, "managedServiceIdentityId", s.ManagedServiceIdentityID)
	populate(objectMap, "minTlsVersion", s.MinTLSVersion)
	populate(objectMap, "minimumElasticInstanceCount", s.MinimumElasticInstanceCount)
	populate(objectMap, "netFrameworkVersion", s.NetFrameworkVersion)
	populate(objectMap, "nodeVersion", s.NodeVersion)
	populate(objectMap, "numberOfWorkers", s.NumberOfWorkers)
	populate(objectMap, "phpVersion", s.PhpVersion)
	populate(objectMap, "powerShellVersion", s.PowerShellVersion)
	populate(objectMap, "preWarmedInstanceCount", s.PreWarmedInstanceCount)
	populate(objectMap, "publicNetworkAccess", s.PublicNetworkAccess)
	populate(objectMap, "publishingUsername", s.PublishingUsername)
	populate(objectMap, "push", s.Push)
	populate(objectMap, "pythonVersion", s.PythonVersion)
	populate(objectMap, "remoteDebuggingEnabled", s.RemoteDebuggingEnabled)
	populate(objectMap, "remoteDebuggingVersion", s.RemoteDebuggingVersion)
	populate(objectMap, "requestTracingEnabled", s.RequestTracingEnabled)
	populateTimeRFC3339(objectMap, "requestTracingExpirationTime", s.RequestTracingExpirationTime)
	populate(objectMap, "scmIpSecurityRestrictions", s.ScmIPSecurityRestrictions)
	populate(objectMap, "scmIpSecurityRestrictionsUseMain", s.ScmIPSecurityRestrictionsUseMain)
	populate(objectMap, "scmMinTlsVersion", s.ScmMinTLSVersion)
	populate(objectMap, "scmType", s.ScmType)
	populate(objectMap, "tracingOptions", s.TracingOptions)
	populate(objectMap, "use32BitWorkerProcess", s.Use32BitWorkerProcess)
	populate(objectMap, "virtualApplications", s.VirtualApplications)
	populate(objectMap, "vnetName", s.VnetName)
	populate(objectMap, "vnetPrivatePortsCount", s.VnetPrivatePortsCount)
	populate(objectMap, "vnetRouteAllEnabled", s.VnetRouteAllEnabled)
	populate(objectMap, "webSocketsEnabled", s.WebSocketsEnabled)
	populate(objectMap, "websiteTimeZone", s.WebsiteTimeZone)
	populate(objectMap, "windowsFxVersion", s.WindowsFxVersion)
	populate(objectMap, "xManagedServiceIdentityId", s.XManagedServiceIdentityID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteConfig.
func (s *SiteConfig) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiDefinition":
			err = unpopulate(val, &s.APIDefinition)
			delete(rawMsg, key)
		case "apiManagementConfig":
			err = unpopulate(val, &s.APIManagementConfig)
			delete(rawMsg, key)
		case "acrUseManagedIdentityCreds":
			err = unpopulate(val, &s.AcrUseManagedIdentityCreds)
			delete(rawMsg, key)
		case "acrUserManagedIdentityID":
			err = unpopulate(val, &s.AcrUserManagedIdentityID)
			delete(rawMsg, key)
		case "alwaysOn":
			err = unpopulate(val, &s.AlwaysOn)
			delete(rawMsg, key)
		case "appCommandLine":
			err = unpopulate(val, &s.AppCommandLine)
			delete(rawMsg, key)
		case "appSettings":
			err = unpopulate(val, &s.AppSettings)
			delete(rawMsg, key)
		case "autoHealEnabled":
			err = unpopulate(val, &s.AutoHealEnabled)
			delete(rawMsg, key)
		case "autoHealRules":
			err = unpopulate(val, &s.AutoHealRules)
			delete(rawMsg, key)
		case "autoSwapSlotName":
			err = unpopulate(val, &s.AutoSwapSlotName)
			delete(rawMsg, key)
		case "azureStorageAccounts":
			err = unpopulate(val, &s.AzureStorageAccounts)
			delete(rawMsg, key)
		case "connectionStrings":
			err = unpopulate(val, &s.ConnectionStrings)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &s.Cors)
			delete(rawMsg, key)
		case "defaultDocuments":
			err = unpopulate(val, &s.DefaultDocuments)
			delete(rawMsg, key)
		case "detailedErrorLoggingEnabled":
			err = unpopulate(val, &s.DetailedErrorLoggingEnabled)
			delete(rawMsg, key)
		case "documentRoot":
			err = unpopulate(val, &s.DocumentRoot)
			delete(rawMsg, key)
		case "experiments":
			err = unpopulate(val, &s.Experiments)
			delete(rawMsg, key)
		case "ftpsState":
			err = unpopulate(val, &s.FtpsState)
			delete(rawMsg, key)
		case "functionAppScaleLimit":
			err = unpopulate(val, &s.FunctionAppScaleLimit)
			delete(rawMsg, key)
		case "functionsRuntimeScaleMonitoringEnabled":
			err = unpopulate(val, &s.FunctionsRuntimeScaleMonitoringEnabled)
			delete(rawMsg, key)
		case "httpLoggingEnabled":
			err = unpopulate(val, &s.HTTPLoggingEnabled)
			delete(rawMsg, key)
		case "handlerMappings":
			err = unpopulate(val, &s.HandlerMappings)
			delete(rawMsg, key)
		case "healthCheckPath":
			err = unpopulate(val, &s.HealthCheckPath)
			delete(rawMsg, key)
		case "http20Enabled":
			err = unpopulate(val, &s.Http20Enabled)
			delete(rawMsg, key)
		case "ipSecurityRestrictions":
			err = unpopulate(val, &s.IPSecurityRestrictions)
			delete(rawMsg, key)
		case "javaContainer":
			err = unpopulate(val, &s.JavaContainer)
			delete(rawMsg, key)
		case "javaContainerVersion":
			err = unpopulate(val, &s.JavaContainerVersion)
			delete(rawMsg, key)
		case "javaVersion":
			err = unpopulate(val, &s.JavaVersion)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, &s.Limits)
			delete(rawMsg, key)
		case "linuxFxVersion":
			err = unpopulate(val, &s.LinuxFxVersion)
			delete(rawMsg, key)
		case "loadBalancing":
			err = unpopulate(val, &s.LoadBalancing)
			delete(rawMsg, key)
		case "localMySqlEnabled":
			err = unpopulate(val, &s.LocalMySQLEnabled)
			delete(rawMsg, key)
		case "logsDirectorySizeLimit":
			err = unpopulate(val, &s.LogsDirectorySizeLimit)
			delete(rawMsg, key)
		case "machineKey":
			err = unpopulate(val, &s.MachineKey)
			delete(rawMsg, key)
		case "managedPipelineMode":
			err = unpopulate(val, &s.ManagedPipelineMode)
			delete(rawMsg, key)
		case "managedServiceIdentityId":
			err = unpopulate(val, &s.ManagedServiceIdentityID)
			delete(rawMsg, key)
		case "minTlsVersion":
			err = unpopulate(val, &s.MinTLSVersion)
			delete(rawMsg, key)
		case "minimumElasticInstanceCount":
			err = unpopulate(val, &s.MinimumElasticInstanceCount)
			delete(rawMsg, key)
		case "netFrameworkVersion":
			err = unpopulate(val, &s.NetFrameworkVersion)
			delete(rawMsg, key)
		case "nodeVersion":
			err = unpopulate(val, &s.NodeVersion)
			delete(rawMsg, key)
		case "numberOfWorkers":
			err = unpopulate(val, &s.NumberOfWorkers)
			delete(rawMsg, key)
		case "phpVersion":
			err = unpopulate(val, &s.PhpVersion)
			delete(rawMsg, key)
		case "powerShellVersion":
			err = unpopulate(val, &s.PowerShellVersion)
			delete(rawMsg, key)
		case "preWarmedInstanceCount":
			err = unpopulate(val, &s.PreWarmedInstanceCount)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &s.PublicNetworkAccess)
			delete(rawMsg, key)
		case "publishingUsername":
			err = unpopulate(val, &s.PublishingUsername)
			delete(rawMsg, key)
		case "push":
			err = unpopulate(val, &s.Push)
			delete(rawMsg, key)
		case "pythonVersion":
			err = unpopulate(val, &s.PythonVersion)
			delete(rawMsg, key)
		case "remoteDebuggingEnabled":
			err = unpopulate(val, &s.RemoteDebuggingEnabled)
			delete(rawMsg, key)
		case "remoteDebuggingVersion":
			err = unpopulate(val, &s.RemoteDebuggingVersion)
			delete(rawMsg, key)
		case "requestTracingEnabled":
			err = unpopulate(val, &s.RequestTracingEnabled)
			delete(rawMsg, key)
		case "requestTracingExpirationTime":
			err = unpopulateTimeRFC3339(val, &s.RequestTracingExpirationTime)
			delete(rawMsg, key)
		case "scmIpSecurityRestrictions":
			err = unpopulate(val, &s.ScmIPSecurityRestrictions)
			delete(rawMsg, key)
		case "scmIpSecurityRestrictionsUseMain":
			err = unpopulate(val, &s.ScmIPSecurityRestrictionsUseMain)
			delete(rawMsg, key)
		case "scmMinTlsVersion":
			err = unpopulate(val, &s.ScmMinTLSVersion)
			delete(rawMsg, key)
		case "scmType":
			err = unpopulate(val, &s.ScmType)
			delete(rawMsg, key)
		case "tracingOptions":
			err = unpopulate(val, &s.TracingOptions)
			delete(rawMsg, key)
		case "use32BitWorkerProcess":
			err = unpopulate(val, &s.Use32BitWorkerProcess)
			delete(rawMsg, key)
		case "virtualApplications":
			err = unpopulate(val, &s.VirtualApplications)
			delete(rawMsg, key)
		case "vnetName":
			err = unpopulate(val, &s.VnetName)
			delete(rawMsg, key)
		case "vnetPrivatePortsCount":
			err = unpopulate(val, &s.VnetPrivatePortsCount)
			delete(rawMsg, key)
		case "vnetRouteAllEnabled":
			err = unpopulate(val, &s.VnetRouteAllEnabled)
			delete(rawMsg, key)
		case "webSocketsEnabled":
			err = unpopulate(val, &s.WebSocketsEnabled)
			delete(rawMsg, key)
		case "websiteTimeZone":
			err = unpopulate(val, &s.WebsiteTimeZone)
			delete(rawMsg, key)
		case "windowsFxVersion":
			err = unpopulate(val, &s.WindowsFxVersion)
			delete(rawMsg, key)
		case "xManagedServiceIdentityId":
			err = unpopulate(val, &s.XManagedServiceIdentityID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigResource.
func (s SiteConfigResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigResourceCollection.
func (s SiteConfigResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigurationSnapshotInfoCollection.
func (s SiteConfigurationSnapshotInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigurationSnapshotInfoProperties.
func (s SiteConfigurationSnapshotInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "snapshotId", s.SnapshotID)
	populateTimeRFC3339(objectMap, "time", s.Time)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteConfigurationSnapshotInfoProperties.
func (s *SiteConfigurationSnapshotInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "snapshotId":
			err = unpopulate(val, &s.SnapshotID)
			delete(rawMsg, key)
		case "time":
			err = unpopulateTimeRFC3339(val, &s.Time)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SiteExtensionInfoCollection.
func (s SiteExtensionInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteExtensionInfoProperties.
func (s SiteExtensionInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authors", s.Authors)
	populate(objectMap, "comment", s.Comment)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "download_count", s.DownloadCount)
	populate(objectMap, "extension_id", s.ExtensionID)
	populate(objectMap, "extension_type", s.ExtensionType)
	populate(objectMap, "extension_url", s.ExtensionURL)
	populate(objectMap, "feed_url", s.FeedURL)
	populate(objectMap, "icon_url", s.IconURL)
	populateTimeRFC3339(objectMap, "installed_date_time", s.InstalledDateTime)
	populate(objectMap, "installer_command_line_params", s.InstallerCommandLineParams)
	populate(objectMap, "license_url", s.LicenseURL)
	populate(objectMap, "local_is_latest_version", s.LocalIsLatestVersion)
	populate(objectMap, "local_path", s.LocalPath)
	populate(objectMap, "project_url", s.ProjectURL)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populateTimeRFC3339(objectMap, "published_date_time", s.PublishedDateTime)
	populate(objectMap, "summary", s.Summary)
	populate(objectMap, "title", s.Title)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteExtensionInfoProperties.
func (s *SiteExtensionInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authors":
			err = unpopulate(val, &s.Authors)
			delete(rawMsg, key)
		case "comment":
			err = unpopulate(val, &s.Comment)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "download_count":
			err = unpopulate(val, &s.DownloadCount)
			delete(rawMsg, key)
		case "extension_id":
			err = unpopulate(val, &s.ExtensionID)
			delete(rawMsg, key)
		case "extension_type":
			err = unpopulate(val, &s.ExtensionType)
			delete(rawMsg, key)
		case "extension_url":
			err = unpopulate(val, &s.ExtensionURL)
			delete(rawMsg, key)
		case "feed_url":
			err = unpopulate(val, &s.FeedURL)
			delete(rawMsg, key)
		case "icon_url":
			err = unpopulate(val, &s.IconURL)
			delete(rawMsg, key)
		case "installed_date_time":
			err = unpopulateTimeRFC3339(val, &s.InstalledDateTime)
			delete(rawMsg, key)
		case "installer_command_line_params":
			err = unpopulate(val, &s.InstallerCommandLineParams)
			delete(rawMsg, key)
		case "license_url":
			err = unpopulate(val, &s.LicenseURL)
			delete(rawMsg, key)
		case "local_is_latest_version":
			err = unpopulate(val, &s.LocalIsLatestVersion)
			delete(rawMsg, key)
		case "local_path":
			err = unpopulate(val, &s.LocalPath)
			delete(rawMsg, key)
		case "project_url":
			err = unpopulate(val, &s.ProjectURL)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "published_date_time":
			err = unpopulateTimeRFC3339(val, &s.PublishedDateTime)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, &s.Summary)
			delete(rawMsg, key)
		case "title":
			err = unpopulate(val, &s.Title)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SitePatchResource.
func (s SitePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SitePatchResourceProperties.
func (s SitePatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityState", s.AvailabilityState)
	populate(objectMap, "clientAffinityEnabled", s.ClientAffinityEnabled)
	populate(objectMap, "clientCertEnabled", s.ClientCertEnabled)
	populate(objectMap, "clientCertExclusionPaths", s.ClientCertExclusionPaths)
	populate(objectMap, "clientCertMode", s.ClientCertMode)
	populate(objectMap, "cloningInfo", s.CloningInfo)
	populate(objectMap, "containerSize", s.ContainerSize)
	populate(objectMap, "customDomainVerificationId", s.CustomDomainVerificationID)
	populate(objectMap, "dailyMemoryTimeQuota", s.DailyMemoryTimeQuota)
	populate(objectMap, "defaultHostName", s.DefaultHostName)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "enabledHostNames", s.EnabledHostNames)
	populate(objectMap, "httpsOnly", s.HTTPSOnly)
	populate(objectMap, "hostNameSslStates", s.HostNameSSLStates)
	populate(objectMap, "hostNames", s.HostNames)
	populate(objectMap, "hostNamesDisabled", s.HostNamesDisabled)
	populate(objectMap, "hostingEnvironmentProfile", s.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", s.HyperV)
	populate(objectMap, "inProgressOperationId", s.InProgressOperationID)
	populate(objectMap, "isDefaultContainer", s.IsDefaultContainer)
	populate(objectMap, "isXenon", s.IsXenon)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populateTimeRFC3339(objectMap, "lastModifiedTimeUtc", s.LastModifiedTimeUTC)
	populate(objectMap, "maxNumberOfWorkers", s.MaxNumberOfWorkers)
	populate(objectMap, "outboundIpAddresses", s.OutboundIPAddresses)
	populate(objectMap, "possibleOutboundIpAddresses", s.PossibleOutboundIPAddresses)
	populate(objectMap, "redundancyMode", s.RedundancyMode)
	populate(objectMap, "repositorySiteName", s.RepositorySiteName)
	populate(objectMap, "reserved", s.Reserved)
	populate(objectMap, "resourceGroup", s.ResourceGroup)
	populate(objectMap, "scmSiteAlsoStopped", s.ScmSiteAlsoStopped)
	populate(objectMap, "serverFarmId", s.ServerFarmID)
	populate(objectMap, "siteConfig", s.SiteConfig)
	populate(objectMap, "slotSwapStatus", s.SlotSwapStatus)
	populate(objectMap, "state", s.State)
	populate(objectMap, "storageAccountRequired", s.StorageAccountRequired)
	populateTimeRFC3339(objectMap, "suspendedTill", s.SuspendedTill)
	populate(objectMap, "targetSwapSlot", s.TargetSwapSlot)
	populate(objectMap, "trafficManagerHostNames", s.TrafficManagerHostNames)
	populate(objectMap, "usageState", s.UsageState)
	populate(objectMap, "virtualNetworkSubnetId", s.VirtualNetworkSubnetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SitePatchResourceProperties.
func (s *SitePatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityState":
			err = unpopulate(val, &s.AvailabilityState)
			delete(rawMsg, key)
		case "clientAffinityEnabled":
			err = unpopulate(val, &s.ClientAffinityEnabled)
			delete(rawMsg, key)
		case "clientCertEnabled":
			err = unpopulate(val, &s.ClientCertEnabled)
			delete(rawMsg, key)
		case "clientCertExclusionPaths":
			err = unpopulate(val, &s.ClientCertExclusionPaths)
			delete(rawMsg, key)
		case "clientCertMode":
			err = unpopulate(val, &s.ClientCertMode)
			delete(rawMsg, key)
		case "cloningInfo":
			err = unpopulate(val, &s.CloningInfo)
			delete(rawMsg, key)
		case "containerSize":
			err = unpopulate(val, &s.ContainerSize)
			delete(rawMsg, key)
		case "customDomainVerificationId":
			err = unpopulate(val, &s.CustomDomainVerificationID)
			delete(rawMsg, key)
		case "dailyMemoryTimeQuota":
			err = unpopulate(val, &s.DailyMemoryTimeQuota)
			delete(rawMsg, key)
		case "defaultHostName":
			err = unpopulate(val, &s.DefaultHostName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &s.Enabled)
			delete(rawMsg, key)
		case "enabledHostNames":
			err = unpopulate(val, &s.EnabledHostNames)
			delete(rawMsg, key)
		case "httpsOnly":
			err = unpopulate(val, &s.HTTPSOnly)
			delete(rawMsg, key)
		case "hostNameSslStates":
			err = unpopulate(val, &s.HostNameSSLStates)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &s.HostNames)
			delete(rawMsg, key)
		case "hostNamesDisabled":
			err = unpopulate(val, &s.HostNamesDisabled)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &s.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &s.HyperV)
			delete(rawMsg, key)
		case "inProgressOperationId":
			err = unpopulate(val, &s.InProgressOperationID)
			delete(rawMsg, key)
		case "isDefaultContainer":
			err = unpopulate(val, &s.IsDefaultContainer)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &s.IsXenon)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "lastModifiedTimeUtc":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedTimeUTC)
			delete(rawMsg, key)
		case "maxNumberOfWorkers":
			err = unpopulate(val, &s.MaxNumberOfWorkers)
			delete(rawMsg, key)
		case "outboundIpAddresses":
			err = unpopulate(val, &s.OutboundIPAddresses)
			delete(rawMsg, key)
		case "possibleOutboundIpAddresses":
			err = unpopulate(val, &s.PossibleOutboundIPAddresses)
			delete(rawMsg, key)
		case "redundancyMode":
			err = unpopulate(val, &s.RedundancyMode)
			delete(rawMsg, key)
		case "repositorySiteName":
			err = unpopulate(val, &s.RepositorySiteName)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &s.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &s.ResourceGroup)
			delete(rawMsg, key)
		case "scmSiteAlsoStopped":
			err = unpopulate(val, &s.ScmSiteAlsoStopped)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &s.ServerFarmID)
			delete(rawMsg, key)
		case "siteConfig":
			err = unpopulate(val, &s.SiteConfig)
			delete(rawMsg, key)
		case "slotSwapStatus":
			err = unpopulate(val, &s.SlotSwapStatus)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &s.State)
			delete(rawMsg, key)
		case "storageAccountRequired":
			err = unpopulate(val, &s.StorageAccountRequired)
			delete(rawMsg, key)
		case "suspendedTill":
			err = unpopulateTimeRFC3339(val, &s.SuspendedTill)
			delete(rawMsg, key)
		case "targetSwapSlot":
			err = unpopulate(val, &s.TargetSwapSlot)
			delete(rawMsg, key)
		case "trafficManagerHostNames":
			err = unpopulate(val, &s.TrafficManagerHostNames)
			delete(rawMsg, key)
		case "usageState":
			err = unpopulate(val, &s.UsageState)
			delete(rawMsg, key)
		case "virtualNetworkSubnetId":
			err = unpopulate(val, &s.VirtualNetworkSubnetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SiteProperties.
func (s SiteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityState", s.AvailabilityState)
	populate(objectMap, "clientAffinityEnabled", s.ClientAffinityEnabled)
	populate(objectMap, "clientCertEnabled", s.ClientCertEnabled)
	populate(objectMap, "clientCertExclusionPaths", s.ClientCertExclusionPaths)
	populate(objectMap, "clientCertMode", s.ClientCertMode)
	populate(objectMap, "cloningInfo", s.CloningInfo)
	populate(objectMap, "containerSize", s.ContainerSize)
	populate(objectMap, "customDomainVerificationId", s.CustomDomainVerificationID)
	populate(objectMap, "dailyMemoryTimeQuota", s.DailyMemoryTimeQuota)
	populate(objectMap, "defaultHostName", s.DefaultHostName)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "enabledHostNames", s.EnabledHostNames)
	populate(objectMap, "httpsOnly", s.HTTPSOnly)
	populate(objectMap, "hostNameSslStates", s.HostNameSSLStates)
	populate(objectMap, "hostNames", s.HostNames)
	populate(objectMap, "hostNamesDisabled", s.HostNamesDisabled)
	populate(objectMap, "hostingEnvironmentProfile", s.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", s.HyperV)
	populate(objectMap, "inProgressOperationId", s.InProgressOperationID)
	populate(objectMap, "isDefaultContainer", s.IsDefaultContainer)
	populate(objectMap, "isXenon", s.IsXenon)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populateTimeRFC3339(objectMap, "lastModifiedTimeUtc", s.LastModifiedTimeUTC)
	populate(objectMap, "maxNumberOfWorkers", s.MaxNumberOfWorkers)
	populate(objectMap, "outboundIpAddresses", s.OutboundIPAddresses)
	populate(objectMap, "possibleOutboundIpAddresses", s.PossibleOutboundIPAddresses)
	populate(objectMap, "redundancyMode", s.RedundancyMode)
	populate(objectMap, "repositorySiteName", s.RepositorySiteName)
	populate(objectMap, "reserved", s.Reserved)
	populate(objectMap, "resourceGroup", s.ResourceGroup)
	populate(objectMap, "scmSiteAlsoStopped", s.ScmSiteAlsoStopped)
	populate(objectMap, "serverFarmId", s.ServerFarmID)
	populate(objectMap, "siteConfig", s.SiteConfig)
	populate(objectMap, "slotSwapStatus", s.SlotSwapStatus)
	populate(objectMap, "state", s.State)
	populate(objectMap, "storageAccountRequired", s.StorageAccountRequired)
	populateTimeRFC3339(objectMap, "suspendedTill", s.SuspendedTill)
	populate(objectMap, "targetSwapSlot", s.TargetSwapSlot)
	populate(objectMap, "trafficManagerHostNames", s.TrafficManagerHostNames)
	populate(objectMap, "usageState", s.UsageState)
	populate(objectMap, "virtualNetworkSubnetId", s.VirtualNetworkSubnetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteProperties.
func (s *SiteProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityState":
			err = unpopulate(val, &s.AvailabilityState)
			delete(rawMsg, key)
		case "clientAffinityEnabled":
			err = unpopulate(val, &s.ClientAffinityEnabled)
			delete(rawMsg, key)
		case "clientCertEnabled":
			err = unpopulate(val, &s.ClientCertEnabled)
			delete(rawMsg, key)
		case "clientCertExclusionPaths":
			err = unpopulate(val, &s.ClientCertExclusionPaths)
			delete(rawMsg, key)
		case "clientCertMode":
			err = unpopulate(val, &s.ClientCertMode)
			delete(rawMsg, key)
		case "cloningInfo":
			err = unpopulate(val, &s.CloningInfo)
			delete(rawMsg, key)
		case "containerSize":
			err = unpopulate(val, &s.ContainerSize)
			delete(rawMsg, key)
		case "customDomainVerificationId":
			err = unpopulate(val, &s.CustomDomainVerificationID)
			delete(rawMsg, key)
		case "dailyMemoryTimeQuota":
			err = unpopulate(val, &s.DailyMemoryTimeQuota)
			delete(rawMsg, key)
		case "defaultHostName":
			err = unpopulate(val, &s.DefaultHostName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &s.Enabled)
			delete(rawMsg, key)
		case "enabledHostNames":
			err = unpopulate(val, &s.EnabledHostNames)
			delete(rawMsg, key)
		case "httpsOnly":
			err = unpopulate(val, &s.HTTPSOnly)
			delete(rawMsg, key)
		case "hostNameSslStates":
			err = unpopulate(val, &s.HostNameSSLStates)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &s.HostNames)
			delete(rawMsg, key)
		case "hostNamesDisabled":
			err = unpopulate(val, &s.HostNamesDisabled)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &s.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &s.HyperV)
			delete(rawMsg, key)
		case "inProgressOperationId":
			err = unpopulate(val, &s.InProgressOperationID)
			delete(rawMsg, key)
		case "isDefaultContainer":
			err = unpopulate(val, &s.IsDefaultContainer)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &s.IsXenon)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "lastModifiedTimeUtc":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedTimeUTC)
			delete(rawMsg, key)
		case "maxNumberOfWorkers":
			err = unpopulate(val, &s.MaxNumberOfWorkers)
			delete(rawMsg, key)
		case "outboundIpAddresses":
			err = unpopulate(val, &s.OutboundIPAddresses)
			delete(rawMsg, key)
		case "possibleOutboundIpAddresses":
			err = unpopulate(val, &s.PossibleOutboundIPAddresses)
			delete(rawMsg, key)
		case "redundancyMode":
			err = unpopulate(val, &s.RedundancyMode)
			delete(rawMsg, key)
		case "repositorySiteName":
			err = unpopulate(val, &s.RepositorySiteName)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &s.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &s.ResourceGroup)
			delete(rawMsg, key)
		case "scmSiteAlsoStopped":
			err = unpopulate(val, &s.ScmSiteAlsoStopped)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &s.ServerFarmID)
			delete(rawMsg, key)
		case "siteConfig":
			err = unpopulate(val, &s.SiteConfig)
			delete(rawMsg, key)
		case "slotSwapStatus":
			err = unpopulate(val, &s.SlotSwapStatus)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &s.State)
			delete(rawMsg, key)
		case "storageAccountRequired":
			err = unpopulate(val, &s.StorageAccountRequired)
			delete(rawMsg, key)
		case "suspendedTill":
			err = unpopulateTimeRFC3339(val, &s.SuspendedTill)
			delete(rawMsg, key)
		case "targetSwapSlot":
			err = unpopulate(val, &s.TargetSwapSlot)
			delete(rawMsg, key)
		case "trafficManagerHostNames":
			err = unpopulate(val, &s.TrafficManagerHostNames)
			delete(rawMsg, key)
		case "usageState":
			err = unpopulate(val, &s.UsageState)
			delete(rawMsg, key)
		case "virtualNetworkSubnetId":
			err = unpopulate(val, &s.VirtualNetworkSubnetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SiteSourceControl.
func (s SiteSourceControl) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SlotConfigNames.
func (s SlotConfigNames) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingNames", s.AppSettingNames)
	populate(objectMap, "azureStorageConfigNames", s.AzureStorageConfigNames)
	populate(objectMap, "connectionStringNames", s.ConnectionStringNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SlotDifferenceCollection.
func (s SlotDifferenceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SlotSwapStatus.
func (s SlotSwapStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationSlotName", s.DestinationSlotName)
	populate(objectMap, "sourceSlotName", s.SourceSlotName)
	populateTimeRFC3339(objectMap, "timestampUtc", s.TimestampUTC)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SlotSwapStatus.
func (s *SlotSwapStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destinationSlotName":
			err = unpopulate(val, &s.DestinationSlotName)
			delete(rawMsg, key)
		case "sourceSlotName":
			err = unpopulate(val, &s.SourceSlotName)
			delete(rawMsg, key)
		case "timestampUtc":
			err = unpopulateTimeRFC3339(val, &s.TimestampUTC)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SnapshotCollection.
func (s SnapshotCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Solution.
func (s Solution) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", s.Data)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "metadata", s.Metadata)
	populate(objectMap, "order", s.Order)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlCollection.
func (s SourceControlCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlProperties.
func (s SourceControlProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "expirationTime", s.ExpirationTime)
	populate(objectMap, "refreshToken", s.RefreshToken)
	populate(objectMap, "token", s.Token)
	populate(objectMap, "tokenSecret", s.TokenSecret)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlProperties.
func (s *SourceControlProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expirationTime":
			err = unpopulateTimeRFC3339(val, &s.ExpirationTime)
			delete(rawMsg, key)
		case "refreshToken":
			err = unpopulate(val, &s.RefreshToken)
			delete(rawMsg, key)
		case "token":
			err = unpopulate(val, &s.Token)
			delete(rawMsg, key)
		case "tokenSecret":
			err = unpopulate(val, &s.TokenSecret)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StackMajorVersion.
func (s StackMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingsDictionary", s.AppSettingsDictionary)
	populate(objectMap, "applicationInsights", s.ApplicationInsights)
	populate(objectMap, "displayVersion", s.DisplayVersion)
	populate(objectMap, "isDefault", s.IsDefault)
	populate(objectMap, "isDeprecated", s.IsDeprecated)
	populate(objectMap, "isHidden", s.IsHidden)
	populate(objectMap, "isPreview", s.IsPreview)
	populate(objectMap, "minorVersions", s.MinorVersions)
	populate(objectMap, "runtimeVersion", s.RuntimeVersion)
	populate(objectMap, "siteConfigPropertiesDictionary", s.SiteConfigPropertiesDictionary)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StampCapacityCollection.
func (s StampCapacityCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSite.
func (s StaticSite) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowConfigFileUpdates", s.AllowConfigFileUpdates)
	populate(objectMap, "branch", s.Branch)
	populate(objectMap, "buildProperties", s.BuildProperties)
	populate(objectMap, "contentDistributionEndpoint", s.ContentDistributionEndpoint)
	populate(objectMap, "customDomains", s.CustomDomains)
	populate(objectMap, "defaultHostname", s.DefaultHostname)
	populate(objectMap, "enterpriseGradeCdnStatus", s.EnterpriseGradeCdnStatus)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "privateEndpointConnections", s.PrivateEndpointConnections)
	populate(objectMap, "provider", s.Provider)
	populate(objectMap, "repositoryToken", s.RepositoryToken)
	populate(objectMap, "repositoryUrl", s.RepositoryURL)
	populate(objectMap, "stagingEnvironmentPolicy", s.StagingEnvironmentPolicy)
	populate(objectMap, "templateProperties", s.TemplateProperties)
	populate(objectMap, "userProvidedFunctionApps", s.UserProvidedFunctionApps)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteARMResource.
func (s StaticSiteARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteBuildARMResourceProperties.
func (s StaticSiteBuildARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildId", s.BuildID)
	populateTimeRFC3339(objectMap, "createdTimeUtc", s.CreatedTimeUTC)
	populate(objectMap, "hostname", s.Hostname)
	populateTimeRFC3339(objectMap, "lastUpdatedOn", s.LastUpdatedOn)
	populate(objectMap, "pullRequestTitle", s.PullRequestTitle)
	populate(objectMap, "sourceBranch", s.SourceBranch)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "userProvidedFunctionApps", s.UserProvidedFunctionApps)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteBuildARMResourceProperties.
func (s *StaticSiteBuildARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "buildId":
			err = unpopulate(val, &s.BuildID)
			delete(rawMsg, key)
		case "createdTimeUtc":
			err = unpopulateTimeRFC3339(val, &s.CreatedTimeUTC)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &s.Hostname)
			delete(rawMsg, key)
		case "lastUpdatedOn":
			err = unpopulateTimeRFC3339(val, &s.LastUpdatedOn)
			delete(rawMsg, key)
		case "pullRequestTitle":
			err = unpopulate(val, &s.PullRequestTitle)
			delete(rawMsg, key)
		case "sourceBranch":
			err = unpopulate(val, &s.SourceBranch)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "userProvidedFunctionApps":
			err = unpopulate(val, &s.UserProvidedFunctionApps)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteBuildCollection.
func (s StaticSiteBuildCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCollection.
func (s StaticSiteCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainOverviewARMResourceProperties.
func (s StaticSiteCustomDomainOverviewARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdOn", s.CreatedOn)
	populate(objectMap, "domainName", s.DomainName)
	populate(objectMap, "errorMessage", s.ErrorMessage)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "validationToken", s.ValidationToken)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteCustomDomainOverviewARMResourceProperties.
func (s *StaticSiteCustomDomainOverviewARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			err = unpopulateTimeRFC3339(val, &s.CreatedOn)
			delete(rawMsg, key)
		case "domainName":
			err = unpopulate(val, &s.DomainName)
			delete(rawMsg, key)
		case "errorMessage":
			err = unpopulate(val, &s.ErrorMessage)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "validationToken":
			err = unpopulate(val, &s.ValidationToken)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainOverviewCollection.
func (s StaticSiteCustomDomainOverviewCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteFunctionOverviewCollection.
func (s StaticSiteFunctionOverviewCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSitePatchResource.
func (s StaticSitePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserARMResource.
func (s StaticSiteUserARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserCollection.
func (s StaticSiteUserCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserInvitationResponseResourceProperties.
func (s StaticSiteUserInvitationResponseResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "expiresOn", s.ExpiresOn)
	populate(objectMap, "invitationUrl", s.InvitationURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserInvitationResponseResourceProperties.
func (s *StaticSiteUserInvitationResponseResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expiresOn":
			err = unpopulateTimeRFC3339(val, &s.ExpiresOn)
			delete(rawMsg, key)
		case "invitationUrl":
			err = unpopulate(val, &s.InvitationURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppARMResourceProperties.
func (s StaticSiteUserProvidedFunctionAppARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdOn", s.CreatedOn)
	populate(objectMap, "functionAppRegion", s.FunctionAppRegion)
	populate(objectMap, "functionAppResourceId", s.FunctionAppResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserProvidedFunctionAppARMResourceProperties.
func (s *StaticSiteUserProvidedFunctionAppARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			err = unpopulateTimeRFC3339(val, &s.CreatedOn)
			delete(rawMsg, key)
		case "functionAppRegion":
			err = unpopulate(val, &s.FunctionAppRegion)
			delete(rawMsg, key)
		case "functionAppResourceId":
			err = unpopulate(val, &s.FunctionAppResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppProperties.
func (s StaticSiteUserProvidedFunctionAppProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdOn", s.CreatedOn)
	populate(objectMap, "functionAppRegion", s.FunctionAppRegion)
	populate(objectMap, "functionAppResourceId", s.FunctionAppResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserProvidedFunctionAppProperties.
func (s *StaticSiteUserProvidedFunctionAppProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			err = unpopulateTimeRFC3339(val, &s.CreatedOn)
			delete(rawMsg, key)
		case "functionAppRegion":
			err = unpopulate(val, &s.FunctionAppRegion)
			delete(rawMsg, key)
		case "functionAppResourceId":
			err = unpopulate(val, &s.FunctionAppResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppsCollection.
func (s StaticSiteUserProvidedFunctionAppsCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StringDictionary.
func (s StringDictionary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StringList.
func (s StringList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SwiftVirtualNetwork.
func (s SwiftVirtualNetwork) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Template.
func (t Template) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "containers", t.Containers)
	populate(objectMap, "dapr", t.Dapr)
	populate(objectMap, "revisionSuffix", t.RevisionSuffix)
	populate(objectMap, "scale", t.Scale)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TldLegalAgreementCollection.
func (t TldLegalAgreementCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TopLevelDomainCollection.
func (t TopLevelDomainCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobHistoryCollection.
func (t TriggeredJobHistoryCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobHistoryProperties.
func (t TriggeredJobHistoryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "runs", t.Runs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobRun.
func (t TriggeredJobRun) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "duration", t.Duration)
	populateTimeRFC3339(objectMap, "end_time", t.EndTime)
	populate(objectMap, "error_url", t.ErrorURL)
	populate(objectMap, "job_name", t.JobName)
	populate(objectMap, "output_url", t.OutputURL)
	populateTimeRFC3339(objectMap, "start_time", t.StartTime)
	populate(objectMap, "status", t.Status)
	populate(objectMap, "trigger", t.Trigger)
	populate(objectMap, "url", t.URL)
	populate(objectMap, "web_job_id", t.WebJobID)
	populate(objectMap, "web_job_name", t.WebJobName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggeredJobRun.
func (t *TriggeredJobRun) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			err = unpopulate(val, &t.Duration)
			delete(rawMsg, key)
		case "end_time":
			err = unpopulateTimeRFC3339(val, &t.EndTime)
			delete(rawMsg, key)
		case "error_url":
			err = unpopulate(val, &t.ErrorURL)
			delete(rawMsg, key)
		case "job_name":
			err = unpopulate(val, &t.JobName)
			delete(rawMsg, key)
		case "output_url":
			err = unpopulate(val, &t.OutputURL)
			delete(rawMsg, key)
		case "start_time":
			err = unpopulateTimeRFC3339(val, &t.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &t.Status)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &t.Trigger)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, &t.URL)
			delete(rawMsg, key)
		case "web_job_id":
			err = unpopulate(val, &t.WebJobID)
			delete(rawMsg, key)
		case "web_job_name":
			err = unpopulate(val, &t.WebJobName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredWebJobCollection.
func (t TriggeredWebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredWebJobProperties.
func (t TriggeredWebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", t.Error)
	populate(objectMap, "extra_info_url", t.ExtraInfoURL)
	populate(objectMap, "history_url", t.HistoryURL)
	populate(objectMap, "latest_run", t.LatestRun)
	populate(objectMap, "run_command", t.RunCommand)
	populate(objectMap, "scheduler_logs_url", t.SchedulerLogsURL)
	populate(objectMap, "settings", t.Settings)
	populate(objectMap, "url", t.URL)
	populate(objectMap, "using_sdk", t.UsingSdk)
	populate(objectMap, "web_job_type", t.WebJobType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UsageCollection.
func (u UsageCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", u.NextLink)
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UsageProperties.
func (u UsageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "computeMode", u.ComputeMode)
	populate(objectMap, "currentValue", u.CurrentValue)
	populate(objectMap, "displayName", u.DisplayName)
	populate(objectMap, "limit", u.Limit)
	populateTimeRFC3339(objectMap, "nextResetTime", u.NextResetTime)
	populate(objectMap, "resourceName", u.ResourceName)
	populate(objectMap, "siteMode", u.SiteMode)
	populate(objectMap, "unit", u.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageProperties.
func (u *UsageProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "computeMode":
			err = unpopulate(val, &u.ComputeMode)
			delete(rawMsg, key)
		case "currentValue":
			err = unpopulate(val, &u.CurrentValue)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &u.DisplayName)
			delete(rawMsg, key)
		case "limit":
			err = unpopulate(val, &u.Limit)
			delete(rawMsg, key)
		case "nextResetTime":
			err = unpopulateTimeRFC3339(val, &u.NextResetTime)
			delete(rawMsg, key)
		case "resourceName":
			err = unpopulate(val, &u.ResourceName)
			delete(rawMsg, key)
		case "siteMode":
			err = unpopulate(val, &u.SiteMode)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &u.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type VirtualApplication.
func (v VirtualApplication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPath", v.PhysicalPath)
	populate(objectMap, "preloadEnabled", v.PreloadEnabled)
	populate(objectMap, "virtualDirectories", v.VirtualDirectories)
	populate(objectMap, "virtualPath", v.VirtualPath)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetGateway.
func (v VnetGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "kind", v.Kind)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetInfo.
func (v VnetInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "certBlob", v.CertBlob)
	populate(objectMap, "certThumbprint", v.CertThumbprint)
	populate(objectMap, "dnsServers", v.DNSServers)
	populate(objectMap, "isSwift", v.IsSwift)
	populate(objectMap, "resyncRequired", v.ResyncRequired)
	populate(objectMap, "routes", v.Routes)
	populate(objectMap, "vnetResourceId", v.VnetResourceID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetInfoResource.
func (v VnetInfoResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "kind", v.Kind)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetRoute.
func (v VnetRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "kind", v.Kind)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetValidationFailureDetailsProperties.
func (v VnetValidationFailureDetailsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "failed", v.Failed)
	populate(objectMap, "failedTests", v.FailedTests)
	populate(objectMap, "message", v.Message)
	populate(objectMap, "warnings", v.Warnings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebAppCollection.
func (w WebAppCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebAppInstanceStatusCollection.
func (w WebAppInstanceStatusCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebAppMajorVersion.
func (w WebAppMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", w.DisplayText)
	populate(objectMap, "minorVersions", w.MinorVersions)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebAppRuntimeSettings.
func (w WebAppRuntimeSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appInsightsSettings", w.AppInsightsSettings)
	populateTimeRFC3339(objectMap, "endOfLifeDate", w.EndOfLifeDate)
	populate(objectMap, "gitHubActionSettings", w.GitHubActionSettings)
	populate(objectMap, "isAutoUpdate", w.IsAutoUpdate)
	populate(objectMap, "isDeprecated", w.IsDeprecated)
	populate(objectMap, "isEarlyAccess", w.IsEarlyAccess)
	populate(objectMap, "isHidden", w.IsHidden)
	populate(objectMap, "isPreview", w.IsPreview)
	populate(objectMap, "remoteDebuggingSupported", w.RemoteDebuggingSupported)
	populate(objectMap, "runtimeVersion", w.RuntimeVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebAppRuntimeSettings.
func (w *WebAppRuntimeSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsightsSettings":
			err = unpopulate(val, &w.AppInsightsSettings)
			delete(rawMsg, key)
		case "endOfLifeDate":
			err = unpopulateTimeRFC3339(val, &w.EndOfLifeDate)
			delete(rawMsg, key)
		case "gitHubActionSettings":
			err = unpopulate(val, &w.GitHubActionSettings)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &w.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &w.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &w.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &w.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &w.IsPreview)
			delete(rawMsg, key)
		case "remoteDebuggingSupported":
			err = unpopulate(val, &w.RemoteDebuggingSupported)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, &w.RuntimeVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WebAppStackCollection.
func (w WebAppStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebAppStackProperties.
func (w WebAppStackProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", w.DisplayText)
	populate(objectMap, "majorVersions", w.MajorVersions)
	populate(objectMap, "preferredOs", w.PreferredOs)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebJobCollection.
func (w WebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebJobProperties.
func (w WebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", w.Error)
	populate(objectMap, "extra_info_url", w.ExtraInfoURL)
	populate(objectMap, "run_command", w.RunCommand)
	populate(objectMap, "settings", w.Settings)
	populate(objectMap, "url", w.URL)
	populate(objectMap, "using_sdk", w.UsingSdk)
	populate(objectMap, "web_job_type", w.WebJobType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebSiteInstanceStatusProperties.
func (w WebSiteInstanceStatusProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consoleUrl", w.ConsoleURL)
	populate(objectMap, "containers", w.Containers)
	populate(objectMap, "detectorUrl", w.DetectorURL)
	populate(objectMap, "healthCheckUrl", w.HealthCheckURL)
	populate(objectMap, "state", w.State)
	populate(objectMap, "statusUrl", w.StatusURL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WindowsJavaContainerSettings.
func (w WindowsJavaContainerSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endOfLifeDate", w.EndOfLifeDate)
	populate(objectMap, "isAutoUpdate", w.IsAutoUpdate)
	populate(objectMap, "isDeprecated", w.IsDeprecated)
	populate(objectMap, "isEarlyAccess", w.IsEarlyAccess)
	populate(objectMap, "isHidden", w.IsHidden)
	populate(objectMap, "isPreview", w.IsPreview)
	populate(objectMap, "javaContainer", w.JavaContainer)
	populate(objectMap, "javaContainerVersion", w.JavaContainerVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WindowsJavaContainerSettings.
func (w *WindowsJavaContainerSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endOfLifeDate":
			err = unpopulateTimeRFC3339(val, &w.EndOfLifeDate)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &w.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &w.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &w.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &w.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &w.IsPreview)
			delete(rawMsg, key)
		case "javaContainer":
			err = unpopulate(val, &w.JavaContainer)
			delete(rawMsg, key)
		case "javaContainerVersion":
			err = unpopulate(val, &w.JavaContainerVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPool.
func (w WorkerPool) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "computeMode", w.ComputeMode)
	populate(objectMap, "instanceNames", w.InstanceNames)
	populate(objectMap, "workerCount", w.WorkerCount)
	populate(objectMap, "workerSize", w.WorkerSize)
	populate(objectMap, "workerSizeId", w.WorkerSizeID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPoolCollection.
func (w WorkerPoolCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPoolResource.
func (w WorkerPoolResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", w.ID)
	populate(objectMap, "kind", w.Kind)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "sku", w.SKU)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray(m map[string]interface{}, k string, b []byte, f runtime.Base64Encoding) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = runtime.EncodeByteArray(b, f)
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
