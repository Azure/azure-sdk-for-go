//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armappservice

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// CertificateOrdersClientCreateOrUpdateCertificatePoller provides polling facilities until the operation reaches a terminal state.
type CertificateOrdersClientCreateOrUpdateCertificatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *CertificateOrdersClientCreateOrUpdateCertificatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *CertificateOrdersClientCreateOrUpdateCertificatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final CertificateOrdersClientCreateOrUpdateCertificateResponse will be returned.
func (p *CertificateOrdersClientCreateOrUpdateCertificatePoller) FinalResponse(ctx context.Context) (CertificateOrdersClientCreateOrUpdateCertificateResponse, error) {
	respType := CertificateOrdersClientCreateOrUpdateCertificateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.CertificateResource)
	if err != nil {
		return CertificateOrdersClientCreateOrUpdateCertificateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *CertificateOrdersClientCreateOrUpdateCertificatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// CertificateOrdersClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type CertificateOrdersClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *CertificateOrdersClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *CertificateOrdersClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final CertificateOrdersClientCreateOrUpdateResponse will be returned.
func (p *CertificateOrdersClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (CertificateOrdersClientCreateOrUpdateResponse, error) {
	respType := CertificateOrdersClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.CertificateOrder)
	if err != nil {
		return CertificateOrdersClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *CertificateOrdersClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ContainerAppsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ContainerAppsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ContainerAppsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ContainerAppsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ContainerAppsClientCreateOrUpdateResponse will be returned.
func (p *ContainerAppsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ContainerAppsClientCreateOrUpdateResponse, error) {
	respType := ContainerAppsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ContainerApp)
	if err != nil {
		return ContainerAppsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ContainerAppsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ContainerAppsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ContainerAppsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ContainerAppsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ContainerAppsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ContainerAppsClientDeleteResponse will be returned.
func (p *ContainerAppsClientDeletePoller) FinalResponse(ctx context.Context) (ContainerAppsClientDeleteResponse, error) {
	respType := ContainerAppsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ContainerAppsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ContainerAppsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DomainsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type DomainsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DomainsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DomainsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DomainsClientCreateOrUpdateResponse will be returned.
func (p *DomainsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (DomainsClientCreateOrUpdateResponse, error) {
	respType := DomainsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Domain)
	if err != nil {
		return DomainsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DomainsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientApproveOrRejectPrivateEndpointConnectionResponse will be returned.
func (p *EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (EnvironmentsClientApproveOrRejectPrivateEndpointConnectionResponse, error) {
	respType := EnvironmentsClientApproveOrRejectPrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RemotePrivateEndpointConnectionARMResource)
	if err != nil {
		return EnvironmentsClientApproveOrRejectPrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientApproveOrRejectPrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientChangeVnetPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientChangeVnetPoller struct {
	pt     *azcore.Poller
	client *EnvironmentsClient
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientChangeVnetPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientChangeVnetPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final *EnvironmentsClientChangeVnetPager will be returned.
func (p *EnvironmentsClientChangeVnetPoller) FinalResponse(ctx context.Context) (*EnvironmentsClientChangeVnetPager, error) {
	respType := &EnvironmentsClientChangeVnetPager{client: p.client}
	if _, err := p.pt.FinalResponse(ctx, &respType.current.WebAppCollection); err != nil {
		return nil, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientChangeVnetPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientCreateOrUpdateMultiRolePoolPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientCreateOrUpdateMultiRolePoolPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientCreateOrUpdateMultiRolePoolPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientCreateOrUpdateMultiRolePoolPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientCreateOrUpdateMultiRolePoolResponse will be returned.
func (p *EnvironmentsClientCreateOrUpdateMultiRolePoolPoller) FinalResponse(ctx context.Context) (EnvironmentsClientCreateOrUpdateMultiRolePoolResponse, error) {
	respType := EnvironmentsClientCreateOrUpdateMultiRolePoolResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkerPoolResource)
	if err != nil {
		return EnvironmentsClientCreateOrUpdateMultiRolePoolResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientCreateOrUpdateMultiRolePoolPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientCreateOrUpdateResponse will be returned.
func (p *EnvironmentsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (EnvironmentsClientCreateOrUpdateResponse, error) {
	respType := EnvironmentsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.EnvironmentResource)
	if err != nil {
		return EnvironmentsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientCreateOrUpdateWorkerPoolPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientCreateOrUpdateWorkerPoolPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientCreateOrUpdateWorkerPoolPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientCreateOrUpdateWorkerPoolPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientCreateOrUpdateWorkerPoolResponse will be returned.
func (p *EnvironmentsClientCreateOrUpdateWorkerPoolPoller) FinalResponse(ctx context.Context) (EnvironmentsClientCreateOrUpdateWorkerPoolResponse, error) {
	respType := EnvironmentsClientCreateOrUpdateWorkerPoolResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkerPoolResource)
	if err != nil {
		return EnvironmentsClientCreateOrUpdateWorkerPoolResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientCreateOrUpdateWorkerPoolPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientDeleteResponse will be returned.
func (p *EnvironmentsClientDeletePoller) FinalResponse(ctx context.Context) (EnvironmentsClientDeleteResponse, error) {
	respType := EnvironmentsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return EnvironmentsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientDeletePrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientDeletePrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientDeletePrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientDeletePrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final EnvironmentsClientDeletePrivateEndpointConnectionResponse will be returned.
func (p *EnvironmentsClientDeletePrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (EnvironmentsClientDeletePrivateEndpointConnectionResponse, error) {
	respType := EnvironmentsClientDeletePrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Interface)
	if err != nil {
		return EnvironmentsClientDeletePrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientDeletePrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientResumePoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientResumePoller struct {
	pt     *azcore.Poller
	client *EnvironmentsClient
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientResumePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientResumePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final *EnvironmentsClientResumePager will be returned.
func (p *EnvironmentsClientResumePoller) FinalResponse(ctx context.Context) (*EnvironmentsClientResumePager, error) {
	respType := &EnvironmentsClientResumePager{client: p.client}
	if _, err := p.pt.FinalResponse(ctx, &respType.current.WebAppCollection); err != nil {
		return nil, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientResumePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// EnvironmentsClientSuspendPoller provides polling facilities until the operation reaches a terminal state.
type EnvironmentsClientSuspendPoller struct {
	pt     *azcore.Poller
	client *EnvironmentsClient
}

// Done returns true if the LRO has reached a terminal state.
func (p *EnvironmentsClientSuspendPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *EnvironmentsClientSuspendPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final *EnvironmentsClientSuspendPager will be returned.
func (p *EnvironmentsClientSuspendPoller) FinalResponse(ctx context.Context) (*EnvironmentsClientSuspendPager, error) {
	respType := &EnvironmentsClientSuspendPager{client: p.client}
	if _, err := p.pt.FinalResponse(ctx, &respType.current.WebAppCollection); err != nil {
		return nil, err
	}
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *EnvironmentsClientSuspendPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// KubeEnvironmentsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type KubeEnvironmentsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *KubeEnvironmentsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *KubeEnvironmentsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final KubeEnvironmentsClientCreateOrUpdateResponse will be returned.
func (p *KubeEnvironmentsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (KubeEnvironmentsClientCreateOrUpdateResponse, error) {
	respType := KubeEnvironmentsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.KubeEnvironment)
	if err != nil {
		return KubeEnvironmentsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *KubeEnvironmentsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// KubeEnvironmentsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type KubeEnvironmentsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *KubeEnvironmentsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *KubeEnvironmentsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final KubeEnvironmentsClientDeleteResponse will be returned.
func (p *KubeEnvironmentsClientDeletePoller) FinalResponse(ctx context.Context) (KubeEnvironmentsClientDeleteResponse, error) {
	respType := KubeEnvironmentsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return KubeEnvironmentsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *KubeEnvironmentsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PlansClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PlansClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PlansClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PlansClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PlansClientCreateOrUpdateResponse will be returned.
func (p *PlansClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (PlansClientCreateOrUpdateResponse, error) {
	respType := PlansClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Plan)
	if err != nil {
		return PlansClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PlansClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientApproveOrRejectPrivateEndpointConnectionResponse will be returned.
func (p *StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (StaticSitesClientApproveOrRejectPrivateEndpointConnectionResponse, error) {
	respType := StaticSitesClientApproveOrRejectPrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RemotePrivateEndpointConnectionARMResource)
	if err != nil {
		return StaticSitesClientApproveOrRejectPrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientApproveOrRejectPrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientCreateOrUpdateStaticSiteCustomDomainResponse will be returned.
func (p *StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller) FinalResponse(ctx context.Context) (StaticSitesClientCreateOrUpdateStaticSiteCustomDomainResponse, error) {
	respType := StaticSitesClientCreateOrUpdateStaticSiteCustomDomainResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StaticSiteCustomDomainOverviewARMResource)
	if err != nil {
		return StaticSitesClientCreateOrUpdateStaticSiteCustomDomainResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientCreateOrUpdateStaticSiteCustomDomainPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientCreateOrUpdateStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientCreateOrUpdateStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientCreateOrUpdateStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientCreateOrUpdateStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientCreateOrUpdateStaticSiteResponse will be returned.
func (p *StaticSitesClientCreateOrUpdateStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientCreateOrUpdateStaticSiteResponse, error) {
	respType := StaticSitesClientCreateOrUpdateStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StaticSiteARMResource)
	if err != nil {
		return StaticSitesClientCreateOrUpdateStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientCreateOrUpdateStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientCreateZipDeploymentForStaticSiteBuildResponse will be returned.
func (p *StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller) FinalResponse(ctx context.Context) (StaticSitesClientCreateZipDeploymentForStaticSiteBuildResponse, error) {
	respType := StaticSitesClientCreateZipDeploymentForStaticSiteBuildResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientCreateZipDeploymentForStaticSiteBuildResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientCreateZipDeploymentForStaticSiteBuildPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientCreateZipDeploymentForStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientCreateZipDeploymentForStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientCreateZipDeploymentForStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientCreateZipDeploymentForStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientCreateZipDeploymentForStaticSiteResponse will be returned.
func (p *StaticSitesClientCreateZipDeploymentForStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientCreateZipDeploymentForStaticSiteResponse, error) {
	respType := StaticSitesClientCreateZipDeploymentForStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientCreateZipDeploymentForStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientCreateZipDeploymentForStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientDeletePrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientDeletePrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientDeletePrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientDeletePrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientDeletePrivateEndpointConnectionResponse will be returned.
func (p *StaticSitesClientDeletePrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (StaticSitesClientDeletePrivateEndpointConnectionResponse, error) {
	respType := StaticSitesClientDeletePrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Interface)
	if err != nil {
		return StaticSitesClientDeletePrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientDeletePrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientDeleteStaticSiteBuildPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientDeleteStaticSiteBuildPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientDeleteStaticSiteBuildPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientDeleteStaticSiteBuildPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientDeleteStaticSiteBuildResponse will be returned.
func (p *StaticSitesClientDeleteStaticSiteBuildPoller) FinalResponse(ctx context.Context) (StaticSitesClientDeleteStaticSiteBuildResponse, error) {
	respType := StaticSitesClientDeleteStaticSiteBuildResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientDeleteStaticSiteBuildResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientDeleteStaticSiteBuildPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientDeleteStaticSiteCustomDomainPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientDeleteStaticSiteCustomDomainPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientDeleteStaticSiteCustomDomainPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientDeleteStaticSiteCustomDomainPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientDeleteStaticSiteCustomDomainResponse will be returned.
func (p *StaticSitesClientDeleteStaticSiteCustomDomainPoller) FinalResponse(ctx context.Context) (StaticSitesClientDeleteStaticSiteCustomDomainResponse, error) {
	respType := StaticSitesClientDeleteStaticSiteCustomDomainResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientDeleteStaticSiteCustomDomainResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientDeleteStaticSiteCustomDomainPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientDeleteStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientDeleteStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientDeleteStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientDeleteStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientDeleteStaticSiteResponse will be returned.
func (p *StaticSitesClientDeleteStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientDeleteStaticSiteResponse, error) {
	respType := StaticSitesClientDeleteStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientDeleteStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientDeleteStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientDetachStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientDetachStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientDetachStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientDetachStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientDetachStaticSiteResponse will be returned.
func (p *StaticSitesClientDetachStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientDetachStaticSiteResponse, error) {
	respType := StaticSitesClientDetachStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientDetachStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientDetachStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildResponse will be returned.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller) FinalResponse(ctx context.Context) (StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildResponse, error) {
	respType := StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StaticSiteUserProvidedFunctionAppARMResource)
	if err != nil {
		return StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteBuildPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteResponse will be returned.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteResponse, error) {
	respType := StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StaticSiteUserProvidedFunctionAppARMResource)
	if err != nil {
		return StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientRegisterUserProvidedFunctionAppWithStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller provides polling facilities until the operation reaches a terminal state.
type StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final StaticSitesClientValidateCustomDomainCanBeAddedToStaticSiteResponse will be returned.
func (p *StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller) FinalResponse(ctx context.Context) (StaticSitesClientValidateCustomDomainCanBeAddedToStaticSiteResponse, error) {
	respType := StaticSitesClientValidateCustomDomainCanBeAddedToStaticSiteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return StaticSitesClientValidateCustomDomainCanBeAddedToStaticSiteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *StaticSitesClientValidateCustomDomainCanBeAddedToStaticSitePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientApproveOrRejectPrivateEndpointConnectionResponse will be returned.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (WebAppsClientApproveOrRejectPrivateEndpointConnectionResponse, error) {
	respType := WebAppsClientApproveOrRejectPrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RemotePrivateEndpointConnectionARMResource)
	if err != nil {
		return WebAppsClientApproveOrRejectPrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotResponse will be returned.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotResponse, error) {
	respType := WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RemotePrivateEndpointConnectionARMResource)
	if err != nil {
		return WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientApproveOrRejectPrivateEndpointConnectionSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateFunctionPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateFunctionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateFunctionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateFunctionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateFunctionResponse will be returned.
func (p *WebAppsClientCreateFunctionPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateFunctionResponse, error) {
	respType := WebAppsClientCreateFunctionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.FunctionEnvelope)
	if err != nil {
		return WebAppsClientCreateFunctionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateFunctionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateInstanceFunctionSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateInstanceFunctionSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateInstanceFunctionSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateInstanceFunctionSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateInstanceFunctionSlotResponse will be returned.
func (p *WebAppsClientCreateInstanceFunctionSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateInstanceFunctionSlotResponse, error) {
	respType := WebAppsClientCreateInstanceFunctionSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.FunctionEnvelope)
	if err != nil {
		return WebAppsClientCreateInstanceFunctionSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateInstanceFunctionSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateInstanceMSDeployOperationPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateInstanceMSDeployOperationPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateInstanceMSDeployOperationPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateInstanceMSDeployOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateInstanceMSDeployOperationResponse will be returned.
func (p *WebAppsClientCreateInstanceMSDeployOperationPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateInstanceMSDeployOperationResponse, error) {
	respType := WebAppsClientCreateInstanceMSDeployOperationResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MSDeployStatus)
	if err != nil {
		return WebAppsClientCreateInstanceMSDeployOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateInstanceMSDeployOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateInstanceMSDeployOperationSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateInstanceMSDeployOperationSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateInstanceMSDeployOperationSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateInstanceMSDeployOperationSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateInstanceMSDeployOperationSlotResponse will be returned.
func (p *WebAppsClientCreateInstanceMSDeployOperationSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateInstanceMSDeployOperationSlotResponse, error) {
	respType := WebAppsClientCreateInstanceMSDeployOperationSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MSDeployStatus)
	if err != nil {
		return WebAppsClientCreateInstanceMSDeployOperationSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateInstanceMSDeployOperationSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateMSDeployOperationPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateMSDeployOperationPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateMSDeployOperationPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateMSDeployOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateMSDeployOperationResponse will be returned.
func (p *WebAppsClientCreateMSDeployOperationPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateMSDeployOperationResponse, error) {
	respType := WebAppsClientCreateMSDeployOperationResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MSDeployStatus)
	if err != nil {
		return WebAppsClientCreateMSDeployOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateMSDeployOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateMSDeployOperationSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateMSDeployOperationSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateMSDeployOperationSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateMSDeployOperationSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateMSDeployOperationSlotResponse will be returned.
func (p *WebAppsClientCreateMSDeployOperationSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateMSDeployOperationSlotResponse, error) {
	respType := WebAppsClientCreateMSDeployOperationSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MSDeployStatus)
	if err != nil {
		return WebAppsClientCreateMSDeployOperationSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateMSDeployOperationSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateOrUpdateResponse will be returned.
func (p *WebAppsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (WebAppsClientCreateOrUpdateResponse, error) {
	respType := WebAppsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Site)
	if err != nil {
		return WebAppsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateOrUpdateSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateOrUpdateSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateOrUpdateSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateOrUpdateSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateOrUpdateSlotResponse will be returned.
func (p *WebAppsClientCreateOrUpdateSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateOrUpdateSlotResponse, error) {
	respType := WebAppsClientCreateOrUpdateSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Site)
	if err != nil {
		return WebAppsClientCreateOrUpdateSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateOrUpdateSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateOrUpdateSourceControlPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateOrUpdateSourceControlPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateOrUpdateSourceControlPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateOrUpdateSourceControlPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateOrUpdateSourceControlResponse will be returned.
func (p *WebAppsClientCreateOrUpdateSourceControlPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateOrUpdateSourceControlResponse, error) {
	respType := WebAppsClientCreateOrUpdateSourceControlResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SiteSourceControl)
	if err != nil {
		return WebAppsClientCreateOrUpdateSourceControlResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateOrUpdateSourceControlPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientCreateOrUpdateSourceControlSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientCreateOrUpdateSourceControlSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientCreateOrUpdateSourceControlSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientCreateOrUpdateSourceControlSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientCreateOrUpdateSourceControlSlotResponse will be returned.
func (p *WebAppsClientCreateOrUpdateSourceControlSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientCreateOrUpdateSourceControlSlotResponse, error) {
	respType := WebAppsClientCreateOrUpdateSourceControlSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SiteSourceControl)
	if err != nil {
		return WebAppsClientCreateOrUpdateSourceControlSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientCreateOrUpdateSourceControlSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientDeletePrivateEndpointConnectionPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientDeletePrivateEndpointConnectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientDeletePrivateEndpointConnectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientDeletePrivateEndpointConnectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientDeletePrivateEndpointConnectionResponse will be returned.
func (p *WebAppsClientDeletePrivateEndpointConnectionPoller) FinalResponse(ctx context.Context) (WebAppsClientDeletePrivateEndpointConnectionResponse, error) {
	respType := WebAppsClientDeletePrivateEndpointConnectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Interface)
	if err != nil {
		return WebAppsClientDeletePrivateEndpointConnectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientDeletePrivateEndpointConnectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientDeletePrivateEndpointConnectionSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientDeletePrivateEndpointConnectionSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientDeletePrivateEndpointConnectionSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientDeletePrivateEndpointConnectionSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientDeletePrivateEndpointConnectionSlotResponse will be returned.
func (p *WebAppsClientDeletePrivateEndpointConnectionSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientDeletePrivateEndpointConnectionSlotResponse, error) {
	respType := WebAppsClientDeletePrivateEndpointConnectionSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Interface)
	if err != nil {
		return WebAppsClientDeletePrivateEndpointConnectionSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientDeletePrivateEndpointConnectionSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientInstallSiteExtensionPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientInstallSiteExtensionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientInstallSiteExtensionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientInstallSiteExtensionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientInstallSiteExtensionResponse will be returned.
func (p *WebAppsClientInstallSiteExtensionPoller) FinalResponse(ctx context.Context) (WebAppsClientInstallSiteExtensionResponse, error) {
	respType := WebAppsClientInstallSiteExtensionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SiteExtensionInfo)
	if err != nil {
		return WebAppsClientInstallSiteExtensionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientInstallSiteExtensionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientInstallSiteExtensionSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientInstallSiteExtensionSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientInstallSiteExtensionSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientInstallSiteExtensionSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientInstallSiteExtensionSlotResponse will be returned.
func (p *WebAppsClientInstallSiteExtensionSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientInstallSiteExtensionSlotResponse, error) {
	respType := WebAppsClientInstallSiteExtensionSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SiteExtensionInfo)
	if err != nil {
		return WebAppsClientInstallSiteExtensionSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientInstallSiteExtensionSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientListPublishingCredentialsPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientListPublishingCredentialsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientListPublishingCredentialsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientListPublishingCredentialsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientListPublishingCredentialsResponse will be returned.
func (p *WebAppsClientListPublishingCredentialsPoller) FinalResponse(ctx context.Context) (WebAppsClientListPublishingCredentialsResponse, error) {
	respType := WebAppsClientListPublishingCredentialsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.User)
	if err != nil {
		return WebAppsClientListPublishingCredentialsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientListPublishingCredentialsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientListPublishingCredentialsSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientListPublishingCredentialsSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientListPublishingCredentialsSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientListPublishingCredentialsSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientListPublishingCredentialsSlotResponse will be returned.
func (p *WebAppsClientListPublishingCredentialsSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientListPublishingCredentialsSlotResponse, error) {
	respType := WebAppsClientListPublishingCredentialsSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.User)
	if err != nil {
		return WebAppsClientListPublishingCredentialsSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientListPublishingCredentialsSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientMigrateMySQLPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientMigrateMySQLPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientMigrateMySQLPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientMigrateMySQLPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientMigrateMySQLResponse will be returned.
func (p *WebAppsClientMigrateMySQLPoller) FinalResponse(ctx context.Context) (WebAppsClientMigrateMySQLResponse, error) {
	respType := WebAppsClientMigrateMySQLResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Operation)
	if err != nil {
		return WebAppsClientMigrateMySQLResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientMigrateMySQLPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientMigrateStoragePoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientMigrateStoragePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientMigrateStoragePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientMigrateStoragePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientMigrateStorageResponse will be returned.
func (p *WebAppsClientMigrateStoragePoller) FinalResponse(ctx context.Context) (WebAppsClientMigrateStorageResponse, error) {
	respType := WebAppsClientMigrateStorageResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StorageMigrationResponse)
	if err != nil {
		return WebAppsClientMigrateStorageResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientMigrateStoragePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreFromBackupBlobPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreFromBackupBlobPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreFromBackupBlobPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreFromBackupBlobPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreFromBackupBlobResponse will be returned.
func (p *WebAppsClientRestoreFromBackupBlobPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreFromBackupBlobResponse, error) {
	respType := WebAppsClientRestoreFromBackupBlobResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreFromBackupBlobResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreFromBackupBlobPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreFromBackupBlobSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreFromBackupBlobSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreFromBackupBlobSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreFromBackupBlobSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreFromBackupBlobSlotResponse will be returned.
func (p *WebAppsClientRestoreFromBackupBlobSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreFromBackupBlobSlotResponse, error) {
	respType := WebAppsClientRestoreFromBackupBlobSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreFromBackupBlobSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreFromBackupBlobSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreFromDeletedAppPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreFromDeletedAppPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreFromDeletedAppPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreFromDeletedAppPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreFromDeletedAppResponse will be returned.
func (p *WebAppsClientRestoreFromDeletedAppPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreFromDeletedAppResponse, error) {
	respType := WebAppsClientRestoreFromDeletedAppResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreFromDeletedAppResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreFromDeletedAppPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreFromDeletedAppSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreFromDeletedAppSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreFromDeletedAppSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreFromDeletedAppSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreFromDeletedAppSlotResponse will be returned.
func (p *WebAppsClientRestoreFromDeletedAppSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreFromDeletedAppSlotResponse, error) {
	respType := WebAppsClientRestoreFromDeletedAppSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreFromDeletedAppSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreFromDeletedAppSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestorePoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestorePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestorePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestorePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreResponse will be returned.
func (p *WebAppsClientRestorePoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreResponse, error) {
	respType := WebAppsClientRestoreResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestorePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreSlotResponse will be returned.
func (p *WebAppsClientRestoreSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreSlotResponse, error) {
	respType := WebAppsClientRestoreSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreSnapshotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreSnapshotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreSnapshotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreSnapshotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreSnapshotResponse will be returned.
func (p *WebAppsClientRestoreSnapshotPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreSnapshotResponse, error) {
	respType := WebAppsClientRestoreSnapshotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreSnapshotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreSnapshotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientRestoreSnapshotSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientRestoreSnapshotSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientRestoreSnapshotSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientRestoreSnapshotSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientRestoreSnapshotSlotResponse will be returned.
func (p *WebAppsClientRestoreSnapshotSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientRestoreSnapshotSlotResponse, error) {
	respType := WebAppsClientRestoreSnapshotSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientRestoreSnapshotSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientRestoreSnapshotSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientStartNetworkTracePoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientStartNetworkTracePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientStartNetworkTracePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientStartNetworkTracePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientStartNetworkTraceResponse will be returned.
func (p *WebAppsClientStartNetworkTracePoller) FinalResponse(ctx context.Context) (WebAppsClientStartNetworkTraceResponse, error) {
	respType := WebAppsClientStartNetworkTraceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkTraceArray)
	if err != nil {
		return WebAppsClientStartNetworkTraceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientStartNetworkTracePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientStartNetworkTraceSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientStartNetworkTraceSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientStartNetworkTraceSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientStartNetworkTraceSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientStartNetworkTraceSlotResponse will be returned.
func (p *WebAppsClientStartNetworkTraceSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientStartNetworkTraceSlotResponse, error) {
	respType := WebAppsClientStartNetworkTraceSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkTraceArray)
	if err != nil {
		return WebAppsClientStartNetworkTraceSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientStartNetworkTraceSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientStartWebSiteNetworkTraceOperationPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientStartWebSiteNetworkTraceOperationPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientStartWebSiteNetworkTraceOperationResponse will be returned.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationPoller) FinalResponse(ctx context.Context) (WebAppsClientStartWebSiteNetworkTraceOperationResponse, error) {
	respType := WebAppsClientStartWebSiteNetworkTraceOperationResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkTraceArray)
	if err != nil {
		return WebAppsClientStartWebSiteNetworkTraceOperationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientStartWebSiteNetworkTraceOperationSlotResponse will be returned.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientStartWebSiteNetworkTraceOperationSlotResponse, error) {
	respType := WebAppsClientStartWebSiteNetworkTraceOperationSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkTraceArray)
	if err != nil {
		return WebAppsClientStartWebSiteNetworkTraceOperationSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientStartWebSiteNetworkTraceOperationSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientSwapSlotPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientSwapSlotPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientSwapSlotPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientSwapSlotPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientSwapSlotResponse will be returned.
func (p *WebAppsClientSwapSlotPoller) FinalResponse(ctx context.Context) (WebAppsClientSwapSlotResponse, error) {
	respType := WebAppsClientSwapSlotResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientSwapSlotResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientSwapSlotPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WebAppsClientSwapSlotWithProductionPoller provides polling facilities until the operation reaches a terminal state.
type WebAppsClientSwapSlotWithProductionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WebAppsClientSwapSlotWithProductionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WebAppsClientSwapSlotWithProductionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WebAppsClientSwapSlotWithProductionResponse will be returned.
func (p *WebAppsClientSwapSlotWithProductionPoller) FinalResponse(ctx context.Context) (WebAppsClientSwapSlotWithProductionResponse, error) {
	respType := WebAppsClientSwapSlotWithProductionResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WebAppsClientSwapSlotWithProductionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WebAppsClientSwapSlotWithProductionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
