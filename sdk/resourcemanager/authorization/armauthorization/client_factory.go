//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armauthorization

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
)

// ClientFactory is a client factory used to create any client in this module.
// Don't use this type directly, use NewClientFactory instead.
type ClientFactory struct {
	subscriptionID string
	credential     azcore.TokenCredential
	options        *arm.ClientOptions
}

// NewClientFactory creates a new instance of ClientFactory with the specified values.
// The parameter values will be propagated to any client created from this factory.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewClientFactory(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ClientFactory, error) {
	_, err := arm.NewClient(moduleName+".ClientFactory", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	return &ClientFactory{
		subscriptionID: subscriptionID, credential: credential,
		options: options.Clone(),
	}, nil
}

func (c *ClientFactory) NewClassicAdministratorsClient() *ClassicAdministratorsClient {
	subClient, _ := NewClassicAdministratorsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewGlobalAdministratorClient() *GlobalAdministratorClient {
	subClient, _ := NewGlobalAdministratorClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewDenyAssignmentsClient() *DenyAssignmentsClient {
	subClient, _ := NewDenyAssignmentsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewProviderOperationsMetadataClient() *ProviderOperationsMetadataClient {
	subClient, _ := NewProviderOperationsMetadataClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleAssignmentsClient() *RoleAssignmentsClient {
	subClient, _ := NewRoleAssignmentsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewPermissionsClient() *PermissionsClient {
	subClient, _ := NewPermissionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleDefinitionsClient() *RoleDefinitionsClient {
	subClient, _ := NewRoleDefinitionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewOperationsClient() *OperationsClient {
	subClient, _ := NewOperationsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewHistoryDefinitionsClient() *AccessReviewHistoryDefinitionsClient {
	subClient, _ := NewAccessReviewHistoryDefinitionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewHistoryDefinitionClient() *AccessReviewHistoryDefinitionClient {
	subClient, _ := NewAccessReviewHistoryDefinitionClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewHistoryDefinitionInstanceClient() *AccessReviewHistoryDefinitionInstanceClient {
	subClient, _ := NewAccessReviewHistoryDefinitionInstanceClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewHistoryDefinitionInstancesClient() *AccessReviewHistoryDefinitionInstancesClient {
	subClient, _ := NewAccessReviewHistoryDefinitionInstancesClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewScheduleDefinitionsClient() *AccessReviewScheduleDefinitionsClient {
	subClient, _ := NewAccessReviewScheduleDefinitionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstancesClient() *AccessReviewInstancesClient {
	subClient, _ := NewAccessReviewInstancesClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstanceClient() *AccessReviewInstanceClient {
	subClient, _ := NewAccessReviewInstanceClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstanceDecisionsClient() *AccessReviewInstanceDecisionsClient {
	subClient, _ := NewAccessReviewInstanceDecisionsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstanceContactedReviewersClient() *AccessReviewInstanceContactedReviewersClient {
	subClient, _ := NewAccessReviewInstanceContactedReviewersClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewDefaultSettingsClient() *AccessReviewDefaultSettingsClient {
	subClient, _ := NewAccessReviewDefaultSettingsClient(c.subscriptionID, c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewHistoryDefinitionsClient() *ScopeAccessReviewHistoryDefinitionsClient {
	subClient, _ := NewScopeAccessReviewHistoryDefinitionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewHistoryDefinitionClient() *ScopeAccessReviewHistoryDefinitionClient {
	subClient, _ := NewScopeAccessReviewHistoryDefinitionClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewHistoryDefinitionInstanceClient() *ScopeAccessReviewHistoryDefinitionInstanceClient {
	subClient, _ := NewScopeAccessReviewHistoryDefinitionInstanceClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewHistoryDefinitionInstancesClient() *ScopeAccessReviewHistoryDefinitionInstancesClient {
	subClient, _ := NewScopeAccessReviewHistoryDefinitionInstancesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewScheduleDefinitionsClient() *ScopeAccessReviewScheduleDefinitionsClient {
	subClient, _ := NewScopeAccessReviewScheduleDefinitionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewInstancesClient() *ScopeAccessReviewInstancesClient {
	subClient, _ := NewScopeAccessReviewInstancesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewInstanceClient() *ScopeAccessReviewInstanceClient {
	subClient, _ := NewScopeAccessReviewInstanceClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewInstanceDecisionsClient() *ScopeAccessReviewInstanceDecisionsClient {
	subClient, _ := NewScopeAccessReviewInstanceDecisionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewInstanceContactedReviewersClient() *ScopeAccessReviewInstanceContactedReviewersClient {
	subClient, _ := NewScopeAccessReviewInstanceContactedReviewersClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewScopeAccessReviewDefaultSettingsClient() *ScopeAccessReviewDefaultSettingsClient {
	subClient, _ := NewScopeAccessReviewDefaultSettingsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewScheduleDefinitionsAssignedForMyApprovalClient() *AccessReviewScheduleDefinitionsAssignedForMyApprovalClient {
	subClient, _ := NewAccessReviewScheduleDefinitionsAssignedForMyApprovalClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstancesAssignedForMyApprovalClient() *AccessReviewInstancesAssignedForMyApprovalClient {
	subClient, _ := NewAccessReviewInstancesAssignedForMyApprovalClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAccessReviewInstanceMyDecisionsClient() *AccessReviewInstanceMyDecisionsClient {
	subClient, _ := NewAccessReviewInstanceMyDecisionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewTenantLevelAccessReviewInstanceContactedReviewersClient() *TenantLevelAccessReviewInstanceContactedReviewersClient {
	subClient, _ := NewTenantLevelAccessReviewInstanceContactedReviewersClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewEligibleChildResourcesClient() *EligibleChildResourcesClient {
	subClient, _ := NewEligibleChildResourcesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleAssignmentSchedulesClient() *RoleAssignmentSchedulesClient {
	subClient, _ := NewRoleAssignmentSchedulesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleAssignmentScheduleInstancesClient() *RoleAssignmentScheduleInstancesClient {
	subClient, _ := NewRoleAssignmentScheduleInstancesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleAssignmentScheduleRequestsClient() *RoleAssignmentScheduleRequestsClient {
	subClient, _ := NewRoleAssignmentScheduleRequestsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleEligibilitySchedulesClient() *RoleEligibilitySchedulesClient {
	subClient, _ := NewRoleEligibilitySchedulesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleEligibilityScheduleInstancesClient() *RoleEligibilityScheduleInstancesClient {
	subClient, _ := NewRoleEligibilityScheduleInstancesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleEligibilityScheduleRequestsClient() *RoleEligibilityScheduleRequestsClient {
	subClient, _ := NewRoleEligibilityScheduleRequestsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleManagementPoliciesClient() *RoleManagementPoliciesClient {
	subClient, _ := NewRoleManagementPoliciesClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewRoleManagementPolicyAssignmentsClient() *RoleManagementPolicyAssignmentsClient {
	subClient, _ := NewRoleManagementPolicyAssignmentsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAlertsClient() *AlertsClient {
	subClient, _ := NewAlertsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAlertConfigurationsClient() *AlertConfigurationsClient {
	subClient, _ := NewAlertConfigurationsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAlertDefinitionsClient() *AlertDefinitionsClient {
	subClient, _ := NewAlertDefinitionsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAlertIncidentsClient() *AlertIncidentsClient {
	subClient, _ := NewAlertIncidentsClient(c.credential, c.options)
	return subClient
}

func (c *ClientFactory) NewAlertOperationClient() *AlertOperationClient {
	subClient, _ := NewAlertOperationClient(c.credential, c.options)
	return subClient
}
