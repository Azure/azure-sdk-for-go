//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization"
)

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_ListForSubscription.json
func ExampleRoleAssignmentsClient_ListForSubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	pager := client.ListForSubscription(&armauthorization.RoleAssignmentsClientListForSubscriptionOptions{Filter: nil,
		TenantID: nil,
	})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_ListForResourceGroup.json
func ExampleRoleAssignmentsClient_ListForResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	pager := client.ListForResourceGroup("<resource-group-name>",
		&armauthorization.RoleAssignmentsClientListForResourceGroupOptions{Filter: nil,
			TenantID: nil,
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_ListForResource.json
func ExampleRoleAssignmentsClient_ListForResource() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	pager := client.ListForResource("<resource-group-name>",
		"<resource-provider-namespace>",
		"<resource-type>",
		"<resource-name>",
		&armauthorization.RoleAssignmentsClientListForResourceOptions{Filter: nil,
			TenantID: nil,
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_Get.json
func ExampleRoleAssignmentsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<scope>",
		"<role-assignment-name>",
		&armauthorization.RoleAssignmentsClientGetOptions{TenantID: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleAssignmentsClientGetResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_CreateForResource.json
func ExampleRoleAssignmentsClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	res, err := client.Create(ctx,
		"<scope>",
		"<role-assignment-name>",
		armauthorization.RoleAssignmentCreateParameters{
			Properties: &armauthorization.RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("<principal-id>"),
				PrincipalType:    armauthorization.PrincipalType("User").ToPtr(),
				RoleDefinitionID: to.StringPtr("<role-definition-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleAssignmentsClientCreateResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_Delete.json
func ExampleRoleAssignmentsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	res, err := client.Delete(ctx,
		"<scope>",
		"<role-assignment-name>",
		&armauthorization.RoleAssignmentsClientDeleteOptions{TenantID: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleAssignmentsClientDeleteResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_ValidateInvalid.json
func ExampleRoleAssignmentsClient_Validate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	res, err := client.Validate(ctx,
		"<scope>",
		"<role-assignment-name>",
		armauthorization.RoleAssignmentCreateParameters{
			Properties: &armauthorization.RoleAssignmentProperties{
				PrincipalID:      to.StringPtr("<principal-id>"),
				PrincipalType:    armauthorization.PrincipalType("User").ToPtr(),
				RoleDefinitionID: to.StringPtr("<role-definition-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleAssignmentsClientValidateResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/RoleAssignments_ListForScope.json
func ExampleRoleAssignmentsClient_ListForScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleAssignmentsClient("<subscription-id>", cred, nil)
	pager := client.ListForScope("<scope>",
		&armauthorization.RoleAssignmentsClientListForScopeOptions{Filter: nil,
			TenantID: nil,
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
