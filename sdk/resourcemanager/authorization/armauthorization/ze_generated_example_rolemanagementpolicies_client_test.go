//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization"
)

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/GetRoleManagementPolicyByName.json
func ExampleRoleManagementPoliciesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleManagementPoliciesClient(cred, nil)
	res, err := client.Get(ctx,
		"<scope>",
		"<role-management-policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleManagementPoliciesClientGetResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/PatchPartialRoleManagementPolicy.json
func ExampleRoleManagementPoliciesClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleManagementPoliciesClient(cred, nil)
	res, err := client.Update(ctx,
		"<scope>",
		"<role-management-policy-name>",
		armauthorization.RoleManagementPolicy{
			Properties: &armauthorization.RoleManagementPolicyProperties{
				Rules: []armauthorization.RoleManagementPolicyRuleClassification{
					&armauthorization.RoleManagementPolicyExpirationRule{
						ID:       to.StringPtr("<id>"),
						RuleType: armauthorization.RoleManagementPolicyRuleType("RoleManagementPolicyExpirationRule").ToPtr(),
						Target: &armauthorization.RoleManagementPolicyRuleTarget{
							Caller: to.StringPtr("<caller>"),
							Level:  to.StringPtr("<level>"),
							Operations: []*string{
								to.StringPtr("All")},
						},
						IsExpirationRequired: to.BoolPtr(false),
						MaximumDuration:      to.StringPtr("<maximum-duration>"),
					},
					&armauthorization.RoleManagementPolicyNotificationRule{
						ID:       to.StringPtr("<id>"),
						RuleType: armauthorization.RoleManagementPolicyRuleType("RoleManagementPolicyNotificationRule").ToPtr(),
						Target: &armauthorization.RoleManagementPolicyRuleTarget{
							Caller: to.StringPtr("<caller>"),
							Level:  to.StringPtr("<level>"),
							Operations: []*string{
								to.StringPtr("All")},
						},
						IsDefaultRecipientsEnabled: to.BoolPtr(false),
						NotificationLevel:          armauthorization.NotificationLevel("Critical").ToPtr(),
						NotificationRecipients: []*string{
							to.StringPtr("admin_admin_eligible@test.com")},
						NotificationType: armauthorization.NotificationDeliveryMechanism("Email").ToPtr(),
						RecipientType:    armauthorization.RecipientType("Admin").ToPtr(),
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoleManagementPoliciesClientUpdateResult)
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/DeleteRoleManagementPolicy.json
func ExampleRoleManagementPoliciesClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleManagementPoliciesClient(cred, nil)
	_, err = client.Delete(ctx,
		"<scope>",
		"<role-management-policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/authorization/resource-manager/Microsoft.Authorization/preview/2020-10-01-preview/examples/GetRoleManagementPolicyByScope.json
func ExampleRoleManagementPoliciesClient_ListForScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armauthorization.NewRoleManagementPoliciesClient(cred, nil)
	pager := client.ListForScope("<scope>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
