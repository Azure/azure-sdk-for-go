//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armauthorization

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewContactedReviewerProperties.
func (a *AccessReviewContactedReviewerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateTime":
			err = unpopulateTimeRFC3339(val, "CreatedDateTime", &a.CreatedDateTime)
			delete(rawMsg, key)
		case "userDisplayName":
			err = unpopulate(val, "UserDisplayName", &a.UserDisplayName)
			delete(rawMsg, key)
		case "userPrincipalName":
			err = unpopulate(val, "UserPrincipalName", &a.UserPrincipalName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewDecisionProperties.
func (a AccessReviewDecisionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appliedBy", a.AppliedBy)
	populateTimeRFC3339(objectMap, "appliedDateTime", a.AppliedDateTime)
	populate(objectMap, "applyResult", a.ApplyResult)
	populate(objectMap, "decision", a.Decision)
	populate(objectMap, "justification", a.Justification)
	populate(objectMap, "principal", a.Principal)
	populate(objectMap, "recommendation", a.Recommendation)
	populate(objectMap, "resource", a.Resource)
	populate(objectMap, "reviewedBy", a.ReviewedBy)
	populateTimeRFC3339(objectMap, "reviewedDateTime", a.ReviewedDateTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewDecisionProperties.
func (a *AccessReviewDecisionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appliedBy":
			err = unpopulate(val, "AppliedBy", &a.AppliedBy)
			delete(rawMsg, key)
		case "appliedDateTime":
			err = unpopulateTimeRFC3339(val, "AppliedDateTime", &a.AppliedDateTime)
			delete(rawMsg, key)
		case "applyResult":
			err = unpopulate(val, "ApplyResult", &a.ApplyResult)
			delete(rawMsg, key)
		case "decision":
			err = unpopulate(val, "Decision", &a.Decision)
			delete(rawMsg, key)
		case "justification":
			err = unpopulate(val, "Justification", &a.Justification)
			delete(rawMsg, key)
		case "principal":
			a.Principal, err = unmarshalAccessReviewDecisionIdentityClassification(val)
			delete(rawMsg, key)
		case "recommendation":
			err = unpopulate(val, "Recommendation", &a.Recommendation)
			delete(rawMsg, key)
		case "resource":
			a.Resource, err = unmarshalAccessReviewDecisionResourceClassification(val)
			delete(rawMsg, key)
		case "reviewedBy":
			err = unpopulate(val, "ReviewedBy", &a.ReviewedBy)
			delete(rawMsg, key)
		case "reviewedDateTime":
			err = unpopulateTimeRFC3339(val, "ReviewedDateTime", &a.ReviewedDateTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewDecisionResourceAzureRole.
func (a AccessReviewDecisionResourceAzureRole) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "id", a.ID)
	objectMap["type"] = DecisionResourceTypeAzureRole
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewDecisionResourceAzureRole.
func (a *AccessReviewDecisionResourceAzureRole) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &a.ID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewDecisionServicePrincipalIdentity.
func (a AccessReviewDecisionServicePrincipalIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appId", a.AppID)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "id", a.ID)
	objectMap["type"] = DecisionTargetTypeServicePrincipal
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewDecisionServicePrincipalIdentity.
func (a *AccessReviewDecisionServicePrincipalIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appId":
			err = unpopulate(val, "AppID", &a.AppID)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &a.ID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewDecisionUserIdentity.
func (a AccessReviewDecisionUserIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "id", a.ID)
	objectMap["type"] = DecisionTargetTypeUser
	populate(objectMap, "userPrincipalName", a.UserPrincipalName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewDecisionUserIdentity.
func (a *AccessReviewDecisionUserIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &a.ID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		case "userPrincipalName":
			err = unpopulate(val, "UserPrincipalName", &a.UserPrincipalName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewHistoryDefinitionProperties.
func (a AccessReviewHistoryDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdBy", a.CreatedBy)
	populateTimeRFC3339(objectMap, "createdDateTime", a.CreatedDateTime)
	populate(objectMap, "decisions", a.Decisions)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "instances", a.Instances)
	populateTimeRFC3339(objectMap, "reviewHistoryPeriodEndDateTime", a.ReviewHistoryPeriodEndDateTime)
	populateTimeRFC3339(objectMap, "reviewHistoryPeriodStartDateTime", a.ReviewHistoryPeriodStartDateTime)
	populate(objectMap, "scopes", a.Scopes)
	populate(objectMap, "settings", a.Settings)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewHistoryDefinitionProperties.
func (a *AccessReviewHistoryDefinitionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &a.CreatedBy)
			delete(rawMsg, key)
		case "createdDateTime":
			err = unpopulateTimeRFC3339(val, "CreatedDateTime", &a.CreatedDateTime)
			delete(rawMsg, key)
		case "decisions":
			err = unpopulate(val, "Decisions", &a.Decisions)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "instances":
			err = unpopulate(val, "Instances", &a.Instances)
			delete(rawMsg, key)
		case "reviewHistoryPeriodEndDateTime":
			err = unpopulateTimeRFC3339(val, "ReviewHistoryPeriodEndDateTime", &a.ReviewHistoryPeriodEndDateTime)
			delete(rawMsg, key)
		case "reviewHistoryPeriodStartDateTime":
			err = unpopulateTimeRFC3339(val, "ReviewHistoryPeriodStartDateTime", &a.ReviewHistoryPeriodStartDateTime)
			delete(rawMsg, key)
		case "scopes":
			err = unpopulate(val, "Scopes", &a.Scopes)
			delete(rawMsg, key)
		case "settings":
			err = unpopulate(val, "Settings", &a.Settings)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewHistoryInstanceProperties.
func (a AccessReviewHistoryInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "downloadUri", a.DownloadURI)
	populateTimeRFC3339(objectMap, "expiration", a.Expiration)
	populateTimeRFC3339(objectMap, "fulfilledDateTime", a.FulfilledDateTime)
	populateTimeRFC3339(objectMap, "reviewHistoryPeriodEndDateTime", a.ReviewHistoryPeriodEndDateTime)
	populateTimeRFC3339(objectMap, "reviewHistoryPeriodStartDateTime", a.ReviewHistoryPeriodStartDateTime)
	populateTimeRFC3339(objectMap, "runDateTime", a.RunDateTime)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewHistoryInstanceProperties.
func (a *AccessReviewHistoryInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, "DisplayName", &a.DisplayName)
			delete(rawMsg, key)
		case "downloadUri":
			err = unpopulate(val, "DownloadURI", &a.DownloadURI)
			delete(rawMsg, key)
		case "expiration":
			err = unpopulateTimeRFC3339(val, "Expiration", &a.Expiration)
			delete(rawMsg, key)
		case "fulfilledDateTime":
			err = unpopulateTimeRFC3339(val, "FulfilledDateTime", &a.FulfilledDateTime)
			delete(rawMsg, key)
		case "reviewHistoryPeriodEndDateTime":
			err = unpopulateTimeRFC3339(val, "ReviewHistoryPeriodEndDateTime", &a.ReviewHistoryPeriodEndDateTime)
			delete(rawMsg, key)
		case "reviewHistoryPeriodStartDateTime":
			err = unpopulateTimeRFC3339(val, "ReviewHistoryPeriodStartDateTime", &a.ReviewHistoryPeriodStartDateTime)
			delete(rawMsg, key)
		case "runDateTime":
			err = unpopulateTimeRFC3339(val, "RunDateTime", &a.RunDateTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewInstanceProperties.
func (a AccessReviewInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupReviewers", a.BackupReviewers)
	populateTimeRFC3339(objectMap, "endDateTime", a.EndDateTime)
	populate(objectMap, "reviewers", a.Reviewers)
	populate(objectMap, "reviewersType", a.ReviewersType)
	populateTimeRFC3339(objectMap, "startDateTime", a.StartDateTime)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewInstanceProperties.
func (a *AccessReviewInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "backupReviewers":
			err = unpopulate(val, "BackupReviewers", &a.BackupReviewers)
			delete(rawMsg, key)
		case "endDateTime":
			err = unpopulateTimeRFC3339(val, "EndDateTime", &a.EndDateTime)
			delete(rawMsg, key)
		case "reviewers":
			err = unpopulate(val, "Reviewers", &a.Reviewers)
			delete(rawMsg, key)
		case "reviewersType":
			err = unpopulate(val, "ReviewersType", &a.ReviewersType)
			delete(rawMsg, key)
		case "startDateTime":
			err = unpopulateTimeRFC3339(val, "StartDateTime", &a.StartDateTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewRecurrenceRange.
func (a AccessReviewRecurrenceRange) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endDate", a.EndDate)
	populate(objectMap, "numberOfOccurrences", a.NumberOfOccurrences)
	populateTimeRFC3339(objectMap, "startDate", a.StartDate)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccessReviewRecurrenceRange.
func (a *AccessReviewRecurrenceRange) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endDate":
			err = unpopulateTimeRFC3339(val, "EndDate", &a.EndDate)
			delete(rawMsg, key)
		case "numberOfOccurrences":
			err = unpopulate(val, "NumberOfOccurrences", &a.NumberOfOccurrences)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, "StartDate", &a.StartDate)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccessReviewScheduleDefinitionProperties.
func (a AccessReviewScheduleDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupReviewers", a.BackupReviewers)
	populate(objectMap, "createdBy", a.CreatedBy)
	populate(objectMap, "descriptionForAdmins", a.DescriptionForAdmins)
	populate(objectMap, "descriptionForReviewers", a.DescriptionForReviewers)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "instances", a.Instances)
	populate(objectMap, "reviewers", a.Reviewers)
	populate(objectMap, "reviewersType", a.ReviewersType)
	populate(objectMap, "scope", a.Scope)
	populate(objectMap, "settings", a.Settings)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
