//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armautomation_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/automation/armautomation"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/createOrUpdateSchedule.json
func ExampleScheduleClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewScheduleClient().CreateOrUpdate(ctx, "rg", "myAutomationAccount33", "mySchedule", armautomation.ScheduleCreateOrUpdateParameters{
		Name: to.Ptr("mySchedule"),
		Properties: &armautomation.ScheduleCreateOrUpdateProperties{
			Description:      to.Ptr("my description of schedule goes here"),
			AdvancedSchedule: &armautomation.AdvancedSchedule{},
			ExpiryTime:       to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:57.2494819Z"); return t }()),
			Frequency:        to.Ptr(armautomation.ScheduleFrequencyHour),
			Interval:         float64(1),
			StartTime:        to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:57.2494819Z"); return t }()),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Schedule = armautomation.Schedule{
	// 	Name: to.Ptr("mySchedule"),
	// 	ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
	// 	Properties: &armautomation.ScheduleProperties{
	// 		Description: to.Ptr("my description of schedule goes here"),
	// 		CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
	// 		ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
	// 		Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
	// 		Interval: float64(1),
	// 		IsEnabled: to.Ptr(true),
	// 		LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		NextRunOffsetMinutes: to.Ptr[float64](0),
	// 		StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		StartTimeOffsetMinutes: to.Ptr[float64](0),
	// 		TimeZone: to.Ptr("UTC"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/updateSchedule.json
func ExampleScheduleClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewScheduleClient().Update(ctx, "rg", "myAutomationAccount33", "mySchedule", armautomation.ScheduleUpdateParameters{
		Name: to.Ptr("mySchedule"),
		Properties: &armautomation.ScheduleUpdateProperties{
			Description: to.Ptr("my updated description of schedule goes here"),
			IsEnabled:   to.Ptr(false),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Schedule = armautomation.Schedule{
	// 	Name: to.Ptr("mySchedule"),
	// 	ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
	// 	Properties: &armautomation.ScheduleProperties{
	// 		Description: to.Ptr("my updated description of schedule goes here"),
	// 		CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
	// 		ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
	// 		Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
	// 		Interval: float64(1),
	// 		IsEnabled: to.Ptr(false),
	// 		LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		NextRunOffsetMinutes: to.Ptr[float64](0),
	// 		StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		StartTimeOffsetMinutes: to.Ptr[float64](0),
	// 		TimeZone: to.Ptr("UTC"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/getSchedule.json
func ExampleScheduleClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewScheduleClient().Get(ctx, "rg", "myAutomationAccount33", "mySchedule", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Schedule = armautomation.Schedule{
	// 	Name: to.Ptr("mySchedule"),
	// 	ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
	// 	Properties: &armautomation.ScheduleProperties{
	// 		Description: to.Ptr("my description of schedule goes here"),
	// 		CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
	// 		ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
	// 		Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
	// 		Interval: float64(1),
	// 		IsEnabled: to.Ptr(true),
	// 		LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
	// 		NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		NextRunOffsetMinutes: to.Ptr[float64](0),
	// 		StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
	// 		StartTimeOffsetMinutes: to.Ptr[float64](0),
	// 		TimeZone: to.Ptr("UTC"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/deleteSchedule.json
func ExampleScheduleClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = clientFactory.NewScheduleClient().Delete(ctx, "rg", "myAutomationAccount33", "mySchedule", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_First100.json
func ExampleScheduleClient_NewListByAutomationAccountPager_listSchedulesByAutomationAccountFirst100() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewScheduleClient().NewListByAutomationAccountPager("rg", "myAutomationAccount33", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ScheduleListResult = armautomation.ScheduleListResult{
		// 	Value: []*armautomation.Schedule{
		// 		{
		// 			Name: to.Ptr("mySchedule"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my updated description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T16:59:22.697+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(false),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:14.027+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:28:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule0"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule0"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.18+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.18+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule1"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule1"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.493+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.493+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule10"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule10"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.54+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.54+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule100"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule100"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.103+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.103+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule101"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule101"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.433+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.433+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule102"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule102"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.713+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:50.713+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule103"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule103"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.04+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.04+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule104"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule104"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.323+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.323+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule105"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule105"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.62+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.62+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule106"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule106"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.9+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:51.9+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule107"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule107"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.183+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.183+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule108"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule108"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.48+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.48+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule109"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule109"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.76+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:52.76+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule11"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule11"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.883+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.883+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule110"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule110"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.073+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.073+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule111"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule111"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.48+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.48+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule112"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule112"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.807+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:53.807+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule113"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule113"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.073+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.073+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule114"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule114"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule115"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule115"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.65+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.65+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule116"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule116"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.933+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:54.933+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule117"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule117"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.277+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.277+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule118"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule118"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.65+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.65+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule119"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule119"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.95+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:55.95+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule12"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule12"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.213+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.213+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule120"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule120"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule121"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule121"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.65+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.65+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule122"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule122"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.95+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:56.95+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule123"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule123"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.247+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.247+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule124"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule124"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.573+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.573+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule125"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule125"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.9+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:57.9+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule126"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule126"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.387+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.387+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule127"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule127"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.7+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:58.7+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule128"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule128"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.4+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.4+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule129"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule129"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.73+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:59.73+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule13"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule13"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.603+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.603+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule130"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule130"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.09+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.09+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule131"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule131"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.4+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.4+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule132"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule132"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.683+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:00.683+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule133"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule133"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.073+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.073+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule134"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule134"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.387+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.387+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule135"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule135"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.667+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.667+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule136"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule136"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.95+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:01.95+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule137"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule137"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.247+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.247+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule138"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule138"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.557+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.557+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule139"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule139"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.853+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:02.853+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule14"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule14"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.98+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:21.98+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule140"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule140"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.247+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.247+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule141"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule141"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.573+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.573+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule142"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule142"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.87+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:03.87+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule143"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule143"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.2+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.2+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule144"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule144"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.48+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.48+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule145"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule145"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.76+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:04.76+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule146"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule146"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.027+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.027+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule147"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule147"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule148"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule148"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.65+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.65+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule149"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule149"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.95+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:05.95+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule15"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule15"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule150"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule150"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.247+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.247+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule151"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule151"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.527+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.527+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule152"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule152"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.81+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:06.81+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule153"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule153"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.157+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.157+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule154"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule154"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.453+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.453+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule155"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule155"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.75+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:07.75+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule156"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule156"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.093+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.093+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule157"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule157"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.513+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.513+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule158"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule158"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.873+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:08.873+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule159"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule159"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.203+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.203+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule16"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule16"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.697+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:22.697+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule160"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule160"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.547+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.547+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule161"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule161"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.843+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:09.843+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule162"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule162"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.14+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.14+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule163"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule163"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.437+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.437+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule164"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule164"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.72+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:10.72+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule165"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule165"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.013+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.013+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule166"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule166"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.297+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.297+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule167"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule167"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.61+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.61+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule168"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule168"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.89+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:11.89+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule169"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule169"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.203+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.203+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule17"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule17"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.027+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.027+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule170"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule170"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.453+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.453+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule171"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule171"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.733+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:12.733+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule172"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule172"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.03+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.03+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule173"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule173"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.31+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.31+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule174"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule174"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.623+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.623+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule175"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule175"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.937+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:01:13.937+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule18"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule18"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.337+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.337+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule19"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule19"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.667+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:23.667+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule2"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule2"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.823+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:17.823+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule20"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule20"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.01+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.01+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule21"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule21"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.337+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.337+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule22"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule22"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.667+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.667+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule23"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule23"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.98+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:24.98+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule24"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule24"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule25"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule25"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.68+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:25.68+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule26"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule26"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.01+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.01+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule27"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule27"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.323+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.323+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule28"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule28"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.65+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.65+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule29"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule29"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.947+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:26.947+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/automation/resource-manager/Microsoft.Automation/preview/2020-01-13-preview/examples/listSchedulesByAutomationAccount_Next100.json
func ExampleScheduleClient_NewListByAutomationAccountPager_listSchedulesByAutomationAccountNext100() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armautomation.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewScheduleClient().NewListByAutomationAccountPager("rg", "myAutomationAccount33", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ScheduleListResult = armautomation.ScheduleListResult{
		// 	Value: []*armautomation.Schedule{
		// 		{
		// 			Name: to.Ptr("mySchedule3"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule3"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.12+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.12+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule30"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule30"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.277+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule31"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule31"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:27.603+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule32"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule32"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.04+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.04+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule33"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule33"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule34"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule34"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:28.667+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule35"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule35"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.01+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.01+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule36"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule36"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule37"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule37"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.68+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.68+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule38"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule38"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:29.993+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule39"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule39"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.307+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule4"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule4"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.417+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule40"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule40"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.62+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.62+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule41"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule41"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.93+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:30.93+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule42"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule42"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.26+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.26+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule43"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule43"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.573+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule44"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule44"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:31.947+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule45"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule45"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.29+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.29+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule46"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule46"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.603+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule47"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule47"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.93+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:32.93+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule48"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule48"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.51+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.51+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule49"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule49"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:33.823+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule5"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule5"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:18.743+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule50"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule50"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.15+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.15+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule51"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule51"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.447+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule52"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule52"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:34.743+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule53"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule53"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.057+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule54"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule54"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.37+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.37+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule55"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule55"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.683+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule56"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule56"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.98+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:35.98+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule57"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule57"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.277+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule58"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule58"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.603+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule59"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule59"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:36.947+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule6"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule6"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.103+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule60"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule60"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.26+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.26+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule61"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule61"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.557+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule62"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule62"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:37.963+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule63"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule63"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.29+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.29+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule64"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule64"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.603+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule65"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule65"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:38.917+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule66"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule66"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.307+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule67"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule67"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.59+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.59+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule68"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule68"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:39.947+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule69"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule69"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.307+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule7"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule7"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.51+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.51+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule70"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule70"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:40.667+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule71"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule71"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.01+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.01+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule72"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule72"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.323+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule73"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule73"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.637+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule74"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule74"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:41.933+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule75"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule75"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.26+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.26+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule76"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule76"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.573+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule77"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule77"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.9+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:42.9+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule78"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule78"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.213+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule79"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule79"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.573+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule8"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule8"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:19.837+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule80"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule80"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.87+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:43.87+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule81"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule81"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.197+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule82"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule82"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.493+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule83"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule83"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:44.807+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule84"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule84"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.183+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule85"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule85"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.493+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule86"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule86"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.79+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:45.79+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule87"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule87"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.09+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.09+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule88"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule88"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.37+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.37+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule89"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule89"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:46.887+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule9"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule9"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.15+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:20.15+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule90"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule90"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.183+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule91"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule91"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.493+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule92"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule92"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.76+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:47.76+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule93"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule93"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.073+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule94"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule94"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.353+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule95"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule95"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.683+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule96"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule96"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:48.963+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule97"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule97"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.243+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule98"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule98"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.51+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.51+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("mySchedule99"),
		// 			ID: to.Ptr("/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Automation/automationAccounts/myAutomationAccount33/schedules/mySchedule99"),
		// 			Properties: &armautomation.ScheduleProperties{
		// 				Description: to.Ptr("my description of schedule goes here"),
		// 				CreationTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.79+00:00"); return t}()),
		// 				ExpiryTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-04-01T17:28:00+00:00"); return t}()),
		// 				ExpiryTimeOffsetMinutes: to.Ptr[float64](0),
		// 				Frequency: to.Ptr(armautomation.ScheduleFrequencyHour),
		// 				Interval: float64(1),
		// 				IsEnabled: to.Ptr(true),
		// 				LastModifiedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T17:00:49.79+00:00"); return t}()),
		// 				NextRun: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				NextRunOffsetMinutes: to.Ptr[float64](0),
		// 				StartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2017-03-27T18:59:00+00:00"); return t}()),
		// 				StartTimeOffsetMinutes: to.Ptr[float64](0),
		// 				TimeZone: to.Ptr("UTC"),
		// 			},
		// 	}},
		// }
	}
}
