//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armautomation

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// Activity - Definition of the activity.
type Activity struct {
	// Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`

	// Gets or sets the properties of the activity.
	Properties *ActivityProperties `json:"properties,omitempty"`

	// READ-ONLY; Gets the name of the activity.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// ActivityGetOptions contains the optional parameters for the Activity.Get method.
type ActivityGetOptions struct {
	// placeholder for future optional parameters
}

// ActivityListByModuleOptions contains the optional parameters for the Activity.ListByModule method.
type ActivityListByModuleOptions struct {
	// placeholder for future optional parameters
}

// ActivityListResult - The response model for the list activity operation.
type ActivityListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of activities.
	Value []*Activity `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ActivityListResult.
func (a ActivityListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ActivityOutputType - Definition of the activity output type.
type ActivityOutputType struct {
	// Gets or sets the name of the activity output type.
	Name *string `json:"name,omitempty"`

	// Gets or sets the type of the activity output type.
	Type *string `json:"type,omitempty"`
}

// ActivityParameter - Definition of the activity parameter.
type ActivityParameter struct {
	// Gets or sets the description of the activity parameter.
	Description *string `json:"description,omitempty"`

	// Gets or sets a Boolean value that indicates true if the parameter is dynamic.
	IsDynamic *bool `json:"isDynamic,omitempty"`

	// Gets or sets a Boolean value that indicates true if the parameter is required. If the value is false, the parameter is optional.
	IsMandatory *bool `json:"isMandatory,omitempty"`

	// Gets or sets the name of the activity parameter.
	Name *string `json:"name,omitempty"`

	// Gets or sets the position of the activity parameter.
	Position *int64 `json:"position,omitempty"`

	// Gets or sets the type of the activity parameter.
	Type *string `json:"type,omitempty"`

	// Gets or sets the validation set of activity parameter.
	ValidationSet []*ActivityParameterValidationSet `json:"validationSet,omitempty"`

	// Gets or sets a Boolean value that indicates true if the parameter can take values from the incoming pipeline objects. This setting is used if the cmdlet
	// must access the complete input object. false
	// indicates that the parameter cannot take values from the complete input object.
	ValueFromPipeline *bool `json:"valueFromPipeline,omitempty"`

	// Gets or sets a Boolean value that indicates true if the parameter can be filled from a property of the incoming pipeline object that has the same name
	// as this parameter. false indicates that the
	// parameter cannot be filled from the incoming pipeline object property with the same name.
	ValueFromPipelineByPropertyName *bool `json:"valueFromPipelineByPropertyName,omitempty"`

	// Gets or sets a Boolean value that indicates true if the cmdlet parameter accepts all the remaining command-line arguments that are associated with this
	// parameter in the form of an array. false if the
	// cmdlet parameter does not accept all the remaining argument values.
	ValueFromRemainingArguments *bool `json:"valueFromRemainingArguments,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ActivityParameter.
func (a ActivityParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "isDynamic", a.IsDynamic)
	populate(objectMap, "isMandatory", a.IsMandatory)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "position", a.Position)
	populate(objectMap, "type", a.Type)
	populate(objectMap, "validationSet", a.ValidationSet)
	populate(objectMap, "valueFromPipeline", a.ValueFromPipeline)
	populate(objectMap, "valueFromPipelineByPropertyName", a.ValueFromPipelineByPropertyName)
	populate(objectMap, "valueFromRemainingArguments", a.ValueFromRemainingArguments)
	return json.Marshal(objectMap)
}

// ActivityParameterSet - Definition of the activity parameter set.
type ActivityParameterSet struct {
	// Gets or sets the name of the activity parameter set.
	Name *string `json:"name,omitempty"`

	// Gets or sets the parameters of the activity parameter set.
	Parameters []*ActivityParameter `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ActivityParameterSet.
func (a ActivityParameterSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", a.Name)
	populate(objectMap, "parameters", a.Parameters)
	return json.Marshal(objectMap)
}

// ActivityParameterValidationSet - Definition of the activity parameter validation set.
type ActivityParameterValidationSet struct {
	// Gets or sets the name of the activity parameter validation set member.
	MemberValue *string `json:"memberValue,omitempty"`
}

// ActivityProperties - Properties of the activity.
type ActivityProperties struct {
	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the user name of the activity.
	Definition *string `json:"definition,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the output types of the activity.
	OutputTypes []*ActivityOutputType `json:"outputTypes,omitempty"`

	// Gets or sets the parameter sets of the activity.
	ParameterSets []*ActivityParameterSet `json:"parameterSets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ActivityProperties.
func (a ActivityProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(a.CreationTime))
	populate(objectMap, "definition", a.Definition)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(a.LastModifiedTime))
	populate(objectMap, "outputTypes", a.OutputTypes)
	populate(objectMap, "parameterSets", a.ParameterSets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ActivityProperties.
func (a *ActivityProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "definition":
			err = unpopulate(val, &a.Definition)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "outputTypes":
			err = unpopulate(val, &a.OutputTypes)
			delete(rawMsg, key)
		case "parameterSets":
			err = unpopulate(val, &a.ParameterSets)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AdvancedSchedule - The properties of the create Advanced Schedule.
type AdvancedSchedule struct {
	// Days of the month that the job should execute on. Must be between 1 and 31.
	MonthDays []*int32 `json:"monthDays,omitempty"`

	// Occurrences of days within a month.
	MonthlyOccurrences []*AdvancedScheduleMonthlyOccurrence `json:"monthlyOccurrences,omitempty"`

	// Days of the week that the job should execute on.
	WeekDays []*string `json:"weekDays,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AdvancedSchedule.
func (a AdvancedSchedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "monthDays", a.MonthDays)
	populate(objectMap, "monthlyOccurrences", a.MonthlyOccurrences)
	populate(objectMap, "weekDays", a.WeekDays)
	return json.Marshal(objectMap)
}

// AdvancedScheduleMonthlyOccurrence - The properties of the create advanced schedule monthly occurrence.
type AdvancedScheduleMonthlyOccurrence struct {
	// Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
	Day *ScheduleDay `json:"day,omitempty"`

	// Occurrence of the week within the month. Must be between 1 and 5
	Occurrence *int32 `json:"occurrence,omitempty"`
}

// AgentRegistration - Definition of the agent registration information type.
type AgentRegistration struct {
	// Gets or sets the dsc meta configuration.
	DscMetaConfiguration *string `json:"dscMetaConfiguration,omitempty"`

	// Gets or sets the dsc server endpoint.
	Endpoint *string `json:"endpoint,omitempty"`

	// Gets or sets the id.
	ID *string `json:"id,omitempty"`

	// Gets or sets the agent registration keys.
	Keys *AgentRegistrationKeys `json:"keys,omitempty"`
}

// AgentRegistrationInformationGetOptions contains the optional parameters for the AgentRegistrationInformation.Get method.
type AgentRegistrationInformationGetOptions struct {
	// placeholder for future optional parameters
}

// AgentRegistrationInformationRegenerateKeyOptions contains the optional parameters for the AgentRegistrationInformation.RegenerateKey method.
type AgentRegistrationInformationRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// AgentRegistrationKeys - Definition of the agent registration keys.
type AgentRegistrationKeys struct {
	// Gets or sets the primary key.
	Primary *string `json:"primary,omitempty"`

	// Gets or sets the secondary key.
	Secondary *string `json:"secondary,omitempty"`
}

// AgentRegistrationRegenerateKeyParameter - The parameters supplied to the regenerate keys operation.
type AgentRegistrationRegenerateKeyParameter struct {
	// REQUIRED; Gets or sets the agent registration key name - primary or secondary.
	KeyName *AgentRegistrationKeyName `json:"keyName,omitempty"`
}

// AutomationAccount - Definition of the automation account type.
type AutomationAccount struct {
	TrackedResource
	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// Identity for the resource.
	Identity *Identity `json:"identity,omitempty"`

	// Gets or sets the automation account properties.
	Properties *AutomationAccountProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource system metadata.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AutomationAccount.
func (a AutomationAccount) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	return json.Marshal(objectMap)
}

// AutomationAccountCreateOrUpdateOptions contains the optional parameters for the AutomationAccount.CreateOrUpdate method.
type AutomationAccountCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountCreateOrUpdateParameters - The parameters supplied to the create or update automation account operation.
type AutomationAccountCreateOrUpdateParameters struct {
	// Sets the identity property for automation account
	Identity *Identity `json:"identity,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets account create or update properties.
	Properties *AutomationAccountCreateOrUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AutomationAccountCreateOrUpdateParameters.
func (a AutomationAccountCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// AutomationAccountCreateOrUpdateProperties - The parameters supplied to the create or update account properties.
type AutomationAccountCreateOrUpdateProperties struct {
	// Indicates whether requests using non-AAD authentication are blocked
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Set the encryption properties for the automation account
	Encryption *EncryptionProperties `json:"encryption,omitempty"`

	// Indicates whether traffic on the non-ARM endpoint (Webhook/Agent) is allowed from the public internet
	PublicNetworkAccess *bool `json:"publicNetworkAccess,omitempty"`

	// Gets or sets account SKU.
	SKU *SKU `json:"sku,omitempty"`
}

// AutomationAccountDeleteOptions contains the optional parameters for the AutomationAccount.Delete method.
type AutomationAccountDeleteOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountGetOptions contains the optional parameters for the AutomationAccount.Get method.
type AutomationAccountGetOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountListByResourceGroupOptions contains the optional parameters for the AutomationAccount.ListByResourceGroup method.
type AutomationAccountListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountListOptions contains the optional parameters for the AutomationAccount.List method.
type AutomationAccountListOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountListResult - The response model for the list account operation.
type AutomationAccountListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets list of accounts.
	Value []*AutomationAccount `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AutomationAccountListResult.
func (a AutomationAccountListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AutomationAccountProperties - Definition of the account property.
type AutomationAccountProperties struct {
	// URL of automation hybrid service which is used for hybrid worker on-boarding.
	AutomationHybridServiceURL *string `json:"automationHybridServiceUrl,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Indicates whether requests using non-AAD authentication are blocked
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Encryption properties for the automation account
	Encryption *EncryptionProperties `json:"encryption,omitempty"`

	// Gets or sets the last modified by.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// List of Automation operations supported by the Automation resource provider.
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty"`

	// Indicates whether traffic on the non-ARM endpoint (Webhook/Agent) is allowed from the public internet
	PublicNetworkAccess *bool `json:"publicNetworkAccess,omitempty"`

	// Gets or sets the SKU of account.
	SKU *SKU `json:"sku,omitempty"`

	// READ-ONLY; Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets status of account.
	State *AutomationAccountState `json:"state,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AutomationAccountProperties.
func (a AutomationAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "automationHybridServiceUrl", a.AutomationHybridServiceURL)
	populate(objectMap, "creationTime", (*timeRFC3339)(a.CreationTime))
	populate(objectMap, "description", a.Description)
	populate(objectMap, "disableLocalAuth", a.DisableLocalAuth)
	populate(objectMap, "encryption", a.Encryption)
	populate(objectMap, "lastModifiedBy", a.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(a.LastModifiedTime))
	populate(objectMap, "privateEndpointConnections", a.PrivateEndpointConnections)
	populate(objectMap, "publicNetworkAccess", a.PublicNetworkAccess)
	populate(objectMap, "sku", a.SKU)
	populate(objectMap, "state", a.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AutomationAccountProperties.
func (a *AutomationAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "automationHybridServiceUrl":
			err = unpopulate(val, &a.AutomationHybridServiceURL)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &a.DisableLocalAuth)
			delete(rawMsg, key)
		case "encryption":
			err = unpopulate(val, &a.Encryption)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &a.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &a.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &a.PublicNetworkAccess)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &a.SKU)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &a.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AutomationAccountUpdateOptions contains the optional parameters for the AutomationAccount.Update method.
type AutomationAccountUpdateOptions struct {
	// placeholder for future optional parameters
}

// AutomationAccountUpdateParameters - The parameters supplied to the update automation account operation.
type AutomationAccountUpdateParameters struct {
	// Sets the identity property for automation account
	Identity *Identity `json:"identity,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets account update properties.
	Properties *AutomationAccountUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AutomationAccountUpdateParameters.
func (a AutomationAccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// AutomationAccountUpdateProperties - The parameters supplied to the update account properties.
type AutomationAccountUpdateProperties struct {
	// Indicates whether requests using non-AAD authentication are blocked
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Set the encryption properties for the automation account
	Encryption *EncryptionProperties `json:"encryption,omitempty"`

	// Indicates whether traffic on the non-ARM endpoint (Webhook/Agent) is allowed from the public internet
	PublicNetworkAccess *bool `json:"publicNetworkAccess,omitempty"`

	// Gets or sets account SKU.
	SKU *SKU `json:"sku,omitempty"`
}

// AutomationClientConvertGraphRunbookContentOptions contains the optional parameters for the AutomationClient.ConvertGraphRunbookContent method.
type AutomationClientConvertGraphRunbookContentOptions struct {
	// placeholder for future optional parameters
}

// AzureQueryProperties - Azure query for the update configuration.
type AzureQueryProperties struct {
	// List of locations to scope the query to.
	Locations []*string `json:"locations,omitempty"`

	// List of Subscription or Resource Group ARM Ids.
	Scope []*string `json:"scope,omitempty"`

	// Tag settings for the VM.
	TagSettings *TagSettingsProperties `json:"tagSettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureQueryProperties.
func (a AzureQueryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "locations", a.Locations)
	populate(objectMap, "scope", a.Scope)
	populate(objectMap, "tagSettings", a.TagSettings)
	return json.Marshal(objectMap)
}

// Certificate - Definition of the certificate.
type Certificate struct {
	ProxyResource
	// Gets or sets the properties of the certificate.
	Properties *CertificateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Certificate.
func (c Certificate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateCreateOrUpdateOptions contains the optional parameters for the Certificate.CreateOrUpdate method.
type CertificateCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CertificateCreateOrUpdateParameters - The parameters supplied to the create or update or replace certificate operation.
type CertificateCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the certificate.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the properties of the certificate.
	Properties *CertificateCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CertificateCreateOrUpdateProperties - The properties of the create certificate operation.
type CertificateCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the base64 encoded value of the certificate.
	Base64Value *string `json:"base64Value,omitempty"`

	// Gets or sets the description of the certificate.
	Description *string `json:"description,omitempty"`

	// Gets or sets the is exportable flag of the certificate.
	IsExportable *bool `json:"isExportable,omitempty"`

	// Gets or sets the thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// CertificateDeleteOptions contains the optional parameters for the Certificate.Delete method.
type CertificateDeleteOptions struct {
	// placeholder for future optional parameters
}

// CertificateGetOptions contains the optional parameters for the Certificate.Get method.
type CertificateGetOptions struct {
	// placeholder for future optional parameters
}

// CertificateListByAutomationAccountOptions contains the optional parameters for the Certificate.ListByAutomationAccount method.
type CertificateListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// CertificateListResult - The response model for the list certificate operation.
type CertificateListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of certificates.
	Value []*Certificate `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateListResult.
func (c CertificateListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CertificateProperties - Properties of the certificate.
type CertificateProperties struct {
	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the expiry time of the certificate.
	ExpiryTime *time.Time `json:"expiryTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the is exportable flag of the certificate.
	IsExportable *bool `json:"isExportable,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateProperties.
func (c CertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(c.CreationTime))
	populate(objectMap, "description", c.Description)
	populate(objectMap, "expiryTime", (*timeRFC3339)(c.ExpiryTime))
	populate(objectMap, "isExportable", c.IsExportable)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(c.LastModifiedTime))
	populate(objectMap, "thumbprint", c.Thumbprint)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateProperties.
func (c *CertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "isExportable":
			err = unpopulate(val, &c.IsExportable)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &c.Thumbprint)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CertificateUpdateOptions contains the optional parameters for the Certificate.Update method.
type CertificateUpdateOptions struct {
	// placeholder for future optional parameters
}

// CertificateUpdateParameters - The parameters supplied to the update certificate operation.
type CertificateUpdateParameters struct {
	// Gets or sets the name of the certificate.
	Name *string `json:"name,omitempty"`

	// Gets or sets the properties of the certificate.
	Properties *CertificateUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateUpdateParameters.
func (c CertificateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateUpdateProperties - The properties of the update certificate operation
type CertificateUpdateProperties struct {
	// Gets or sets the description of the certificate.
	Description *string `json:"description,omitempty"`
}

type ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// Connection - Definition of the connection.
type Connection struct {
	ProxyResource
	// Gets or sets the properties of the connection.
	Properties *ConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Connection.
func (c Connection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ConnectionCreateOrUpdateOptions contains the optional parameters for the Connection.CreateOrUpdate method.
type ConnectionCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ConnectionCreateOrUpdateParameters - The parameters supplied to the create or update connection operation.
type ConnectionCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the connection.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the properties of the connection.
	Properties *ConnectionCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ConnectionCreateOrUpdateProperties - The properties of the create connection properties
type ConnectionCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the connectionType of the connection.
	ConnectionType *ConnectionTypeAssociationProperty `json:"connectionType,omitempty"`

	// Gets or sets the description of the connection.
	Description *string `json:"description,omitempty"`

	// Gets or sets the field definition properties of the connection.
	FieldDefinitionValues map[string]*string `json:"fieldDefinitionValues,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionCreateOrUpdateProperties.
func (c ConnectionCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionType", c.ConnectionType)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "fieldDefinitionValues", c.FieldDefinitionValues)
	return json.Marshal(objectMap)
}

// ConnectionDeleteOptions contains the optional parameters for the Connection.Delete method.
type ConnectionDeleteOptions struct {
	// placeholder for future optional parameters
}

// ConnectionGetOptions contains the optional parameters for the Connection.Get method.
type ConnectionGetOptions struct {
	// placeholder for future optional parameters
}

// ConnectionListByAutomationAccountOptions contains the optional parameters for the Connection.ListByAutomationAccount method.
type ConnectionListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// ConnectionListResult - The response model for the list connection operation.
type ConnectionListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of connection.
	Value []*Connection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionListResult.
func (c ConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ConnectionProperties - Definition of the connection properties.
type ConnectionProperties struct {
	// Gets or sets the connectionType of the connection.
	ConnectionType *ConnectionTypeAssociationProperty `json:"connectionType,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the field definition values of the connection.
	FieldDefinitionValues map[string]*string `json:"fieldDefinitionValues,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionProperties.
func (c ConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionType", c.ConnectionType)
	populate(objectMap, "creationTime", (*timeRFC3339)(c.CreationTime))
	populate(objectMap, "description", c.Description)
	populate(objectMap, "fieldDefinitionValues", c.FieldDefinitionValues)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(c.LastModifiedTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionProperties.
func (c *ConnectionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionType":
			err = unpopulate(val, &c.ConnectionType)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "fieldDefinitionValues":
			err = unpopulate(val, &c.FieldDefinitionValues)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ConnectionType - Definition of the connection type.
type ConnectionType struct {
	// Gets or sets the properties of the connection type.
	Properties *ConnectionTypeProperties `json:"properties,omitempty"`

	// READ-ONLY; Gets the id of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Gets the name of the connection type.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ConnectionTypeAssociationProperty - The connection type property associated with the entity.
type ConnectionTypeAssociationProperty struct {
	// Gets or sets the name of the connection type.
	Name *string `json:"name,omitempty"`
}

// ConnectionTypeCreateOrUpdateOptions contains the optional parameters for the ConnectionType.CreateOrUpdate method.
type ConnectionTypeCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ConnectionTypeCreateOrUpdateParameters - The parameters supplied to the create or update connection type operation.
type ConnectionTypeCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the connection type.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the value of the connection type.
	Properties *ConnectionTypeCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ConnectionTypeCreateOrUpdateProperties - The properties of the create connection type.
type ConnectionTypeCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the field definitions of the connection type.
	FieldDefinitions map[string]*FieldDefinition `json:"fieldDefinitions,omitempty"`

	// Gets or sets a Boolean value to indicate if the connection type is global.
	IsGlobal *bool `json:"isGlobal,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionTypeCreateOrUpdateProperties.
func (c ConnectionTypeCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fieldDefinitions", c.FieldDefinitions)
	populate(objectMap, "isGlobal", c.IsGlobal)
	return json.Marshal(objectMap)
}

// ConnectionTypeDeleteOptions contains the optional parameters for the ConnectionType.Delete method.
type ConnectionTypeDeleteOptions struct {
	// placeholder for future optional parameters
}

// ConnectionTypeGetOptions contains the optional parameters for the ConnectionType.Get method.
type ConnectionTypeGetOptions struct {
	// placeholder for future optional parameters
}

// ConnectionTypeListByAutomationAccountOptions contains the optional parameters for the ConnectionType.ListByAutomationAccount method.
type ConnectionTypeListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// ConnectionTypeListResult - The response model for the list connection type operation.
type ConnectionTypeListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of connection types.
	Value []*ConnectionType `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionTypeListResult.
func (c ConnectionTypeListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ConnectionTypeProperties - Properties of the connection type.
type ConnectionTypeProperties struct {
	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets a Boolean value to indicate if the connection type is global.
	IsGlobal *bool `json:"isGlobal,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// READ-ONLY; Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the field definitions of the connection type.
	FieldDefinitions map[string]*FieldDefinition `json:"fieldDefinitions,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionTypeProperties.
func (c ConnectionTypeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(c.CreationTime))
	populate(objectMap, "description", c.Description)
	populate(objectMap, "fieldDefinitions", c.FieldDefinitions)
	populate(objectMap, "isGlobal", c.IsGlobal)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(c.LastModifiedTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionTypeProperties.
func (c *ConnectionTypeProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "fieldDefinitions":
			err = unpopulate(val, &c.FieldDefinitions)
			delete(rawMsg, key)
		case "isGlobal":
			err = unpopulate(val, &c.IsGlobal)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ConnectionUpdateOptions contains the optional parameters for the Connection.Update method.
type ConnectionUpdateOptions struct {
	// placeholder for future optional parameters
}

// ConnectionUpdateParameters - The parameters supplied to the update connection operation.
type ConnectionUpdateParameters struct {
	// Gets or sets the name of the connection.
	Name *string `json:"name,omitempty"`

	// Gets or sets the properties of the connection.
	Properties *ConnectionUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionUpdateParameters.
func (c ConnectionUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ConnectionUpdateProperties - The properties of the update connection operation.
type ConnectionUpdateProperties struct {
	// Gets or sets the description of the connection.
	Description *string `json:"description,omitempty"`

	// Gets or sets the field definition values of the connection.
	FieldDefinitionValues map[string]*string `json:"fieldDefinitionValues,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionUpdateProperties.
func (c ConnectionUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", c.Description)
	populate(objectMap, "fieldDefinitionValues", c.FieldDefinitionValues)
	return json.Marshal(objectMap)
}

// ContentHash - Definition of the runbook property type.
type ContentHash struct {
	// REQUIRED; Gets or sets the content hash algorithm used to hash the content.
	Algorithm *string `json:"algorithm,omitempty"`

	// REQUIRED; Gets or sets expected hash value of the content.
	Value *string `json:"value,omitempty"`
}

// ContentLink - Definition of the content link.
type ContentLink struct {
	// Gets or sets the hash.
	ContentHash *ContentHash `json:"contentHash,omitempty"`

	// Gets or sets the uri of the runbook content.
	URI *string `json:"uri,omitempty"`

	// Gets or sets the version of the content.
	Version *string `json:"version,omitempty"`
}

// ContentSource - Definition of the content source.
type ContentSource struct {
	// Gets or sets the hash.
	Hash *ContentHash `json:"hash,omitempty"`

	// Gets or sets the content source type.
	Type *ContentSourceType `json:"type,omitempty"`

	// Gets or sets the value of the content. This is based on the content source type.
	Value *string `json:"value,omitempty"`

	// Gets or sets the version of the content.
	Version *string `json:"version,omitempty"`
}

// Credential - Definition of the credential.
type Credential struct {
	ProxyResource
	// Gets or sets the properties of the credential.
	Properties *CredentialProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Credential.
func (c Credential) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CredentialCreateOrUpdateOptions contains the optional parameters for the Credential.CreateOrUpdate method.
type CredentialCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CredentialCreateOrUpdateParameters - The parameters supplied to the create or update credential operation.
type CredentialCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the credential.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the properties of the credential.
	Properties *CredentialCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CredentialCreateOrUpdateProperties - The properties of the create credential operation.
type CredentialCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the password of the credential.
	Password *string `json:"password,omitempty"`

	// REQUIRED; Gets or sets the user name of the credential.
	UserName *string `json:"userName,omitempty"`

	// Gets or sets the description of the credential.
	Description *string `json:"description,omitempty"`
}

// CredentialDeleteOptions contains the optional parameters for the Credential.Delete method.
type CredentialDeleteOptions struct {
	// placeholder for future optional parameters
}

// CredentialGetOptions contains the optional parameters for the Credential.Get method.
type CredentialGetOptions struct {
	// placeholder for future optional parameters
}

// CredentialListByAutomationAccountOptions contains the optional parameters for the Credential.ListByAutomationAccount method.
type CredentialListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// CredentialListResult - The response model for the list credential operation.
type CredentialListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of credentials.
	Value []*Credential `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CredentialListResult.
func (c CredentialListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CredentialProperties - Definition of the credential properties
type CredentialProperties struct {
	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; Gets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the user name of the credential.
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CredentialProperties.
func (c CredentialProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(c.CreationTime))
	populate(objectMap, "description", c.Description)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(c.LastModifiedTime))
	populate(objectMap, "userName", c.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CredentialProperties.
func (c *CredentialProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &c.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CredentialUpdateOptions contains the optional parameters for the Credential.Update method.
type CredentialUpdateOptions struct {
	// placeholder for future optional parameters
}

// CredentialUpdateParameters - The parameters supplied to the Update credential operation.
type CredentialUpdateParameters struct {
	// Gets or sets the name of the credential.
	Name *string `json:"name,omitempty"`

	// Gets or sets the properties of the variable.
	Properties *CredentialUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CredentialUpdateParameters.
func (c CredentialUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CredentialUpdateProperties - The properties of the Update credential
type CredentialUpdateProperties struct {
	// Gets or sets the description of the credential.
	Description *string `json:"description,omitempty"`

	// Gets or sets the password of the credential.
	Password *string `json:"password,omitempty"`

	// Gets or sets the user name of the credential.
	UserName *string `json:"userName,omitempty"`
}

// DscCompilationJob - Definition of the Dsc Compilation job.
type DscCompilationJob struct {
	ProxyResource
	// Gets or sets the properties of the Dsc Compilation job.
	Properties *DscCompilationJobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscCompilationJob.
func (d DscCompilationJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DscCompilationJobBeginCreateOptions contains the optional parameters for the DscCompilationJob.BeginCreate method.
type DscCompilationJobBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// DscCompilationJobCreateParameters - The parameters supplied to the create compilation job operation.
type DscCompilationJobCreateParameters struct {
	// REQUIRED; Gets or sets the list of compilation job properties.
	Properties *DscCompilationJobCreateProperties `json:"properties,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscCompilationJobCreateParameters.
func (d DscCompilationJobCreateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DscCompilationJobCreateProperties - The parameters supplied to the create compilation job operation.
type DscCompilationJobCreateProperties struct {
	// REQUIRED; Gets or sets the configuration.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`

	// If a new build version of NodeConfiguration is required.
	IncrementNodeConfigurationBuild *bool `json:"incrementNodeConfigurationBuild,omitempty"`

	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscCompilationJobCreateProperties.
func (d DscCompilationJobCreateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuration", d.Configuration)
	populate(objectMap, "incrementNodeConfigurationBuild", d.IncrementNodeConfigurationBuild)
	populate(objectMap, "parameters", d.Parameters)
	return json.Marshal(objectMap)
}

// DscCompilationJobGetOptions contains the optional parameters for the DscCompilationJob.Get method.
type DscCompilationJobGetOptions struct {
	// placeholder for future optional parameters
}

// DscCompilationJobGetStreamOptions contains the optional parameters for the DscCompilationJob.GetStream method.
type DscCompilationJobGetStreamOptions struct {
	// placeholder for future optional parameters
}

// DscCompilationJobListByAutomationAccountOptions contains the optional parameters for the DscCompilationJob.ListByAutomationAccount method.
type DscCompilationJobListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// DscCompilationJobListResult - The response model for the list job operation.
type DscCompilationJobListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of Dsc Compilation jobs.
	Value []*DscCompilationJob `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscCompilationJobListResult.
func (d DscCompilationJobListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DscCompilationJobProperties - Definition of Dsc Compilation job properties.
type DscCompilationJobProperties struct {
	// Gets or sets the configuration.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`

	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// The current provisioning state of the job.
	ProvisioningState *JobProvisioningState `json:"provisioningState,omitempty"`

	// Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the status of the job.
	Status *JobStatus `json:"status,omitempty"`

	// Gets or sets the status details of the job.
	StatusDetails *string `json:"statusDetails,omitempty"`

	// READ-ONLY; Gets the creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the end time of the job.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the exception of the job.
	Exception *string `json:"exception,omitempty" azure:"ro"`

	// READ-ONLY; Gets the id of the job.
	JobID *string `json:"jobId,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last modified time of the job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the last status modified time of the job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the start time of the job.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the compilation job started by.
	StartedBy *string `json:"startedBy,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DscCompilationJobProperties.
func (d DscCompilationJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuration", d.Configuration)
	populate(objectMap, "creationTime", (*timeRFC3339)(d.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "exception", d.Exception)
	populate(objectMap, "jobId", d.JobID)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(d.LastModifiedTime))
	populate(objectMap, "lastStatusModifiedTime", (*timeRFC3339)(d.LastStatusModifiedTime))
	populate(objectMap, "parameters", d.Parameters)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "runOn", d.RunOn)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	populate(objectMap, "startedBy", d.StartedBy)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "statusDetails", d.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscCompilationJobProperties.
func (d *DscCompilationJobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "configuration":
			err = unpopulate(val, &d.Configuration)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "exception":
			err = unpopulate(val, &d.Exception)
			delete(rawMsg, key)
		case "jobId":
			err = unpopulate(val, &d.JobID)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastStatusModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastStatusModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &d.Parameters)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &d.RunOn)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startedBy":
			err = unpopulate(val, &d.StartedBy)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &d.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscCompilationJobStreamListByJobOptions contains the optional parameters for the DscCompilationJobStream.ListByJob method.
type DscCompilationJobStreamListByJobOptions struct {
	// placeholder for future optional parameters
}

// DscConfiguration - Definition of the configuration type.
type DscConfiguration struct {
	TrackedResource
	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// Gets or sets the configuration properties.
	Properties *DscConfigurationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfiguration.
func (d DscConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DscConfigurationAssociationProperty - The Dsc configuration property associated with the entity.
type DscConfigurationAssociationProperty struct {
	// Gets or sets the name of the Dsc configuration.
	Name *string `json:"name,omitempty"`
}

// DscConfigurationCreateOrUpdateOptions contains the optional parameters for the DscConfiguration.CreateOrUpdate method.
type DscConfigurationCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DscConfigurationCreateOrUpdateParameters - The parameters supplied to the create or update configuration operation.
type DscConfigurationCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets configuration create or update properties.
	Properties *DscConfigurationCreateOrUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfigurationCreateOrUpdateParameters.
func (d DscConfigurationCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DscConfigurationCreateOrUpdateProperties - The properties to create or update configuration.
type DscConfigurationCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the source.
	Source *ContentSource `json:"source,omitempty"`

	// Gets or sets the description of the configuration.
	Description *string `json:"description,omitempty"`

	// Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`

	// Gets or sets the configuration parameters.
	Parameters map[string]*DscConfigurationParameter `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfigurationCreateOrUpdateProperties.
func (d DscConfigurationCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", d.Description)
	populate(objectMap, "logProgress", d.LogProgress)
	populate(objectMap, "logVerbose", d.LogVerbose)
	populate(objectMap, "parameters", d.Parameters)
	populate(objectMap, "source", d.Source)
	return json.Marshal(objectMap)
}

// DscConfigurationCreateOrUpdateWithDscConfigurationCreateOrUpdateParametersOptions contains the optional parameters for the DscConfiguration.CreateOrUpdateWithDscConfigurationCreateOrUpdateParameters
// method.
type DscConfigurationCreateOrUpdateWithDscConfigurationCreateOrUpdateParametersOptions struct {
	// placeholder for future optional parameters
}

// DscConfigurationDeleteOptions contains the optional parameters for the DscConfiguration.Delete method.
type DscConfigurationDeleteOptions struct {
	// placeholder for future optional parameters
}

// DscConfigurationGetContentOptions contains the optional parameters for the DscConfiguration.GetContent method.
type DscConfigurationGetContentOptions struct {
	// placeholder for future optional parameters
}

// DscConfigurationGetOptions contains the optional parameters for the DscConfiguration.Get method.
type DscConfigurationGetOptions struct {
	// placeholder for future optional parameters
}

// DscConfigurationListByAutomationAccountOptions contains the optional parameters for the DscConfiguration.ListByAutomationAccount method.
type DscConfigurationListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
	// Return total rows.
	Inlinecount *string
	// The number of rows to skip.
	Skip *int32
	// The number of rows to take.
	Top *int32
}

// DscConfigurationListResult - The response model for the list configuration operation.
type DscConfigurationListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets the total number of configurations matching filter criteria.
	TotalCount *int32 `json:"totalCount,omitempty"`

	// Gets or sets a list of configurations.
	Value []*DscConfiguration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfigurationListResult.
func (d DscConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "totalCount", d.TotalCount)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DscConfigurationParameter - Definition of the configuration parameter type.
type DscConfigurationParameter struct {
	// Gets or sets the default value of parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`

	// Gets or sets a Boolean value to indicate whether the parameter is mandatory or not.
	IsMandatory *bool `json:"isMandatory,omitempty"`

	// Get or sets the position of the parameter.
	Position *int32 `json:"position,omitempty"`

	// Gets or sets the type of the parameter.
	Type *string `json:"type,omitempty"`
}

// DscConfigurationProperties - Definition of the configuration property type.
type DscConfigurationProperties struct {
	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the job count of the configuration.
	JobCount *int32 `json:"jobCount,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`

	// Gets the number of compiled node configurations.
	NodeConfigurationCount *int32 `json:"nodeConfigurationCount,omitempty"`

	// Gets or sets the configuration parameters.
	Parameters map[string]*DscConfigurationParameter `json:"parameters,omitempty"`

	// Gets or sets the provisioning state of the configuration.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// Gets or sets the source.
	Source *ContentSource `json:"source,omitempty"`

	// Gets or sets the state of the configuration.
	State *DscConfigurationState `json:"state,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfigurationProperties.
func (d DscConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(d.CreationTime))
	populate(objectMap, "description", d.Description)
	populate(objectMap, "jobCount", d.JobCount)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(d.LastModifiedTime))
	populate(objectMap, "logVerbose", d.LogVerbose)
	populate(objectMap, "nodeConfigurationCount", d.NodeConfigurationCount)
	populate(objectMap, "parameters", d.Parameters)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "state", d.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscConfigurationProperties.
func (d *DscConfigurationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &d.Description)
			delete(rawMsg, key)
		case "jobCount":
			err = unpopulate(val, &d.JobCount)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "logVerbose":
			err = unpopulate(val, &d.LogVerbose)
			delete(rawMsg, key)
		case "nodeConfigurationCount":
			err = unpopulate(val, &d.NodeConfigurationCount)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &d.Parameters)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &d.Source)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &d.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscConfigurationUpdateOptions contains the optional parameters for the DscConfiguration.Update method.
type DscConfigurationUpdateOptions struct {
	// The create or update parameters for configuration.
	Parameters *string
}

// DscConfigurationUpdateParameters - The parameters supplied to the create or update configuration operation.
type DscConfigurationUpdateParameters struct {
	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets configuration create or update properties.
	Properties *DscConfigurationCreateOrUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscConfigurationUpdateParameters.
func (d DscConfigurationUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DscConfigurationUpdateWithDscConfigurationUpdateParametersOptions contains the optional parameters for the DscConfiguration.UpdateWithDscConfigurationUpdateParameters
// method.
type DscConfigurationUpdateWithDscConfigurationUpdateParametersOptions struct {
	// The create or update parameters for configuration.
	Parameters *DscConfigurationUpdateParameters
}

// DscMetaConfiguration - Definition of the DSC Meta Configuration.
type DscMetaConfiguration struct {
	// Gets or sets the ActionAfterReboot value of the meta configuration.
	ActionAfterReboot *string `json:"actionAfterReboot,omitempty"`

	// Gets or sets the AllowModuleOverwrite value of the meta configuration.
	AllowModuleOverwrite *bool `json:"allowModuleOverwrite,omitempty"`

	// Gets or sets the CertificateId value of the meta configuration.
	CertificateID *string `json:"certificateId,omitempty"`

	// Gets or sets the ConfigurationMode value of the meta configuration.
	ConfigurationMode *string `json:"configurationMode,omitempty"`

	// Gets or sets the ConfigurationModeFrequencyMins value of the meta configuration.
	ConfigurationModeFrequencyMins *int32 `json:"configurationModeFrequencyMins,omitempty"`

	// Gets or sets the RebootNodeIfNeeded value of the meta configuration.
	RebootNodeIfNeeded *bool `json:"rebootNodeIfNeeded,omitempty"`

	// Gets or sets the RefreshFrequencyMins value of the meta configuration.
	RefreshFrequencyMins *int32 `json:"refreshFrequencyMins,omitempty"`
}

// DscNode - Definition of a DscNode
type DscNode struct {
	ProxyResource
	// The properties of a DscNode.
	Properties *DscNodeProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNode.
func (d DscNode) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DscNodeConfiguration - Definition of the dsc node configuration.
type DscNodeConfiguration struct {
	ProxyResource
	// Gets or sets the configuration properties.
	Properties *DscNodeConfigurationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeConfiguration.
func (d DscNodeConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DscNodeConfigurationAssociationProperty - The dsc node configuration property associated with the entity.
type DscNodeConfigurationAssociationProperty struct {
	// Gets or sets the name of the dsc node configuration.
	Name *string `json:"name,omitempty"`
}

// DscNodeConfigurationBeginCreateOrUpdateOptions contains the optional parameters for the DscNodeConfiguration.BeginCreateOrUpdate method.
type DscNodeConfigurationBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DscNodeConfigurationCreateOrUpdateParameters - The parameters supplied to the create or update node configuration operation.
type DscNodeConfigurationCreateOrUpdateParameters struct {
	// Name of the node configuration.
	Name *string `json:"name,omitempty"`

	// Node configuration properties
	Properties *DscNodeConfigurationCreateOrUpdateParametersProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeConfigurationCreateOrUpdateParameters.
func (d DscNodeConfigurationCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DscNodeConfigurationCreateOrUpdateParametersProperties - The parameter properties supplied to the create or update node configuration operation.
type DscNodeConfigurationCreateOrUpdateParametersProperties struct {
	// REQUIRED; Gets or sets the configuration of the node.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`

	// REQUIRED; Gets or sets the source.
	Source *ContentSource `json:"source,omitempty"`

	// If a new build version of NodeConfiguration is required.
	IncrementNodeConfigurationBuild *bool `json:"incrementNodeConfigurationBuild,omitempty"`
}

// DscNodeConfigurationDeleteOptions contains the optional parameters for the DscNodeConfiguration.Delete method.
type DscNodeConfigurationDeleteOptions struct {
	// placeholder for future optional parameters
}

// DscNodeConfigurationGetOptions contains the optional parameters for the DscNodeConfiguration.Get method.
type DscNodeConfigurationGetOptions struct {
	// placeholder for future optional parameters
}

// DscNodeConfigurationListByAutomationAccountOptions contains the optional parameters for the DscNodeConfiguration.ListByAutomationAccount method.
type DscNodeConfigurationListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
	// Return total rows.
	Inlinecount *string
	// The number of rows to skip.
	Skip *int32
	// The number of rows to take.
	Top *int32
}

// DscNodeConfigurationListResult - The response model for the list job operation.
type DscNodeConfigurationListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets the total rows in query.
	TotalCount *int32 `json:"totalCount,omitempty"`

	// Gets or sets a list of Dsc node configurations.
	Value []*DscNodeConfiguration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeConfigurationListResult.
func (d DscNodeConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "totalCount", d.TotalCount)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DscNodeConfigurationProperties - Properties for the DscNodeConfiguration
type DscNodeConfigurationProperties struct {
	// Gets or sets the configuration of the node.
	Configuration *DscConfigurationAssociationProperty `json:"configuration,omitempty"`

	// Gets or sets creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// If a new build version of NodeConfiguration is required.
	IncrementNodeConfigurationBuild *bool `json:"incrementNodeConfigurationBuild,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Number of nodes with this node configuration assigned
	NodeCount *int64 `json:"nodeCount,omitempty"`

	// Source of node configuration.
	Source *string `json:"source,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeConfigurationProperties.
func (d DscNodeConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuration", d.Configuration)
	populate(objectMap, "creationTime", (*timeRFC3339)(d.CreationTime))
	populate(objectMap, "incrementNodeConfigurationBuild", d.IncrementNodeConfigurationBuild)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(d.LastModifiedTime))
	populate(objectMap, "nodeCount", d.NodeCount)
	populate(objectMap, "source", d.Source)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscNodeConfigurationProperties.
func (d *DscNodeConfigurationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "configuration":
			err = unpopulate(val, &d.Configuration)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "incrementNodeConfigurationBuild":
			err = unpopulate(val, &d.IncrementNodeConfigurationBuild)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nodeCount":
			err = unpopulate(val, &d.NodeCount)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &d.Source)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscNodeDeleteOptions contains the optional parameters for the DscNode.Delete method.
type DscNodeDeleteOptions struct {
	// placeholder for future optional parameters
}

// DscNodeExtensionHandlerAssociationProperty - The dsc extensionHandler property associated with the node
type DscNodeExtensionHandlerAssociationProperty struct {
	// Gets or sets the name of the extension handler.
	Name *string `json:"name,omitempty"`

	// Gets or sets the version of the extension handler.
	Version *string `json:"version,omitempty"`
}

// DscNodeGetOptions contains the optional parameters for the DscNode.Get method.
type DscNodeGetOptions struct {
	// placeholder for future optional parameters
}

// DscNodeListByAutomationAccountOptions contains the optional parameters for the DscNode.ListByAutomationAccount method.
type DscNodeListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
	// Return total rows.
	Inlinecount *string
	// The number of rows to skip.
	Skip *int32
	// The number of rows to take.
	Top *int32
}

// DscNodeListResult - The response model for the list dsc nodes operation.
type DscNodeListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets the total number of nodes matching filter criteria.
	TotalCount *int32 `json:"totalCount,omitempty"`

	// Gets or sets a list of dsc nodes.
	Value []*DscNode `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeListResult.
func (d DscNodeListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "totalCount", d.TotalCount)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DscNodeProperties - The properties of a DscNode
type DscNodeProperties struct {
	// Gets or sets the account id of the node.
	AccountID *string `json:"accountId,omitempty"`

	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// Gets or sets the list of extensionHandler properties for a Node.
	ExtensionHandler []*DscNodeExtensionHandlerAssociationProperty `json:"extensionHandler,omitempty"`

	// Gets or sets the ip of the node.
	IP *string `json:"ip,omitempty"`

	// Gets or sets the last seen time of the node.
	LastSeen *time.Time `json:"lastSeen,omitempty"`

	// Gets or sets the configuration of the node.
	NodeConfiguration *DscNodeConfigurationAssociationProperty `json:"nodeConfiguration,omitempty"`

	// Gets or sets the node id.
	NodeID *string `json:"nodeId,omitempty"`

	// Gets or sets the registration time of the node.
	RegistrationTime *time.Time `json:"registrationTime,omitempty"`

	// Gets or sets the status of the node.
	Status *string `json:"status,omitempty"`

	// Gets the total number of records matching filter criteria.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeProperties.
func (d DscNodeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountId", d.AccountID)
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "extensionHandler", d.ExtensionHandler)
	populate(objectMap, "ip", d.IP)
	populate(objectMap, "lastSeen", (*timeRFC3339)(d.LastSeen))
	populate(objectMap, "nodeConfiguration", d.NodeConfiguration)
	populate(objectMap, "nodeId", d.NodeID)
	populate(objectMap, "registrationTime", (*timeRFC3339)(d.RegistrationTime))
	populate(objectMap, "status", d.Status)
	populate(objectMap, "totalCount", d.TotalCount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscNodeProperties.
func (d *DscNodeProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountId":
			err = unpopulate(val, &d.AccountID)
			delete(rawMsg, key)
		case "etag":
			err = unpopulate(val, &d.Etag)
			delete(rawMsg, key)
		case "extensionHandler":
			err = unpopulate(val, &d.ExtensionHandler)
			delete(rawMsg, key)
		case "ip":
			err = unpopulate(val, &d.IP)
			delete(rawMsg, key)
		case "lastSeen":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastSeen = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nodeConfiguration":
			err = unpopulate(val, &d.NodeConfiguration)
			delete(rawMsg, key)
		case "nodeId":
			err = unpopulate(val, &d.NodeID)
			delete(rawMsg, key)
		case "registrationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.RegistrationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "totalCount":
			err = unpopulate(val, &d.TotalCount)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscNodeReport - Definition of the dsc node report type.
type DscNodeReport struct {
	// Gets or sets the configurationVersion of the node report.
	ConfigurationVersion *string `json:"configurationVersion,omitempty"`

	// Gets or sets the end time of the node report.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Gets or sets the errors for the node report.
	Errors []*DscReportError `json:"errors,omitempty"`

	// Gets or sets the hostname of the node that sent the report.
	HostName *string `json:"hostName,omitempty"`

	// Gets or sets the id.
	ID *string `json:"id,omitempty"`

	// Gets or sets the IPv4 address of the node that sent the report.
	IPV4Addresses []*string `json:"iPV4Addresses,omitempty"`

	// Gets or sets the IPv6 address of the node that sent the report.
	IPV6Addresses []*string `json:"iPV6Addresses,omitempty"`

	// Gets or sets the lastModifiedTime of the node report.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the metaConfiguration of the node at the time of the report.
	MetaConfiguration *DscMetaConfiguration `json:"metaConfiguration,omitempty"`

	// Gets or sets the number of resource in the node report.
	NumberOfResources *int32 `json:"numberOfResources,omitempty"`

	// Gets or sets the unparsed errors for the node report.
	RawErrors *string `json:"rawErrors,omitempty"`

	// Gets or sets the rebootRequested of the node report.
	RebootRequested *string `json:"rebootRequested,omitempty"`

	// Gets or sets the refreshMode of the node report.
	RefreshMode *string `json:"refreshMode,omitempty"`

	// Gets or sets the reportFormatVersion of the node report.
	ReportFormatVersion *string `json:"reportFormatVersion,omitempty"`

	// Gets or sets the id of the node report.
	ReportID *string `json:"reportId,omitempty"`

	// Gets or sets the resource for the node report.
	Resources []*DscReportResource `json:"resources,omitempty"`

	// Gets or sets the start time of the node report.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the status of the node report.
	Status *string `json:"status,omitempty"`

	// Gets or sets the type of the node report.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeReport.
func (d DscNodeReport) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configurationVersion", d.ConfigurationVersion)
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "errors", d.Errors)
	populate(objectMap, "hostName", d.HostName)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "iPV4Addresses", d.IPV4Addresses)
	populate(objectMap, "iPV6Addresses", d.IPV6Addresses)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(d.LastModifiedTime))
	populate(objectMap, "metaConfiguration", d.MetaConfiguration)
	populate(objectMap, "numberOfResources", d.NumberOfResources)
	populate(objectMap, "rawErrors", d.RawErrors)
	populate(objectMap, "rebootRequested", d.RebootRequested)
	populate(objectMap, "refreshMode", d.RefreshMode)
	populate(objectMap, "reportFormatVersion", d.ReportFormatVersion)
	populate(objectMap, "reportId", d.ReportID)
	populate(objectMap, "resources", d.Resources)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	populate(objectMap, "status", d.Status)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscNodeReport.
func (d *DscNodeReport) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "configurationVersion":
			err = unpopulate(val, &d.ConfigurationVersion)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &d.Errors)
			delete(rawMsg, key)
		case "hostName":
			err = unpopulate(val, &d.HostName)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &d.ID)
			delete(rawMsg, key)
		case "iPV4Addresses":
			err = unpopulate(val, &d.IPV4Addresses)
			delete(rawMsg, key)
		case "iPV6Addresses":
			err = unpopulate(val, &d.IPV6Addresses)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "metaConfiguration":
			err = unpopulate(val, &d.MetaConfiguration)
			delete(rawMsg, key)
		case "numberOfResources":
			err = unpopulate(val, &d.NumberOfResources)
			delete(rawMsg, key)
		case "rawErrors":
			err = unpopulate(val, &d.RawErrors)
			delete(rawMsg, key)
		case "rebootRequested":
			err = unpopulate(val, &d.RebootRequested)
			delete(rawMsg, key)
		case "refreshMode":
			err = unpopulate(val, &d.RefreshMode)
			delete(rawMsg, key)
		case "reportFormatVersion":
			err = unpopulate(val, &d.ReportFormatVersion)
			delete(rawMsg, key)
		case "reportId":
			err = unpopulate(val, &d.ReportID)
			delete(rawMsg, key)
		case "resources":
			err = unpopulate(val, &d.Resources)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscNodeReportListResult - The response model for the list dsc nodes operation.
type DscNodeReportListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of dsc node reports.
	Value []*DscNodeReport `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeReportListResult.
func (d DscNodeReportListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DscNodeUpdateOptions contains the optional parameters for the DscNode.Update method.
type DscNodeUpdateOptions struct {
	// placeholder for future optional parameters
}

// DscNodeUpdateParameters - The parameters supplied to the update dsc node operation.
type DscNodeUpdateParameters struct {
	// Gets or sets the id of the dsc node.
	NodeID     *string                            `json:"nodeId,omitempty"`
	Properties *DscNodeUpdateParametersProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscNodeUpdateParameters.
func (d DscNodeUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nodeId", d.NodeID)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

type DscNodeUpdateParametersProperties struct {
	// Gets or sets the configuration of the node.
	NodeConfiguration *DscNodeConfigurationAssociationProperty `json:"nodeConfiguration,omitempty"`
}

// DscReportError - Definition of the dsc node report error type.
type DscReportError struct {
	// Gets or sets the error code.
	ErrorCode *string `json:"errorCode,omitempty"`

	// Gets or sets the error details.
	ErrorDetails *string `json:"errorDetails,omitempty"`

	// Gets or sets the error message.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Gets or sets the source of the error.
	ErrorSource *string `json:"errorSource,omitempty"`

	// Gets or sets the locale of the error.
	Locale *string `json:"locale,omitempty"`

	// Gets or sets the resource ID which generated the error.
	ResourceID *string `json:"resourceId,omitempty"`
}

// DscReportResource - Definition of the DSC Report Resource.
type DscReportResource struct {
	// Gets or sets the Resource Navigation values for resources the resource depends on.
	DependsOn []*DscReportResourceNavigation `json:"dependsOn,omitempty"`

	// Gets or sets the duration in seconds for the resource.
	DurationInSeconds *float64 `json:"durationInSeconds,omitempty"`

	// Gets or sets the error of the resource.
	Error *string `json:"error,omitempty"`

	// Gets or sets the module name of the resource.
	ModuleName *string `json:"moduleName,omitempty"`

	// Gets or sets the module version of the resource.
	ModuleVersion *string `json:"moduleVersion,omitempty"`

	// Gets or sets the ID of the resource.
	ResourceID *string `json:"resourceId,omitempty"`

	// Gets or sets the name of the resource.
	ResourceName *string `json:"resourceName,omitempty"`

	// Gets or sets the source info of the resource.
	SourceInfo *string `json:"sourceInfo,omitempty"`

	// Gets or sets the start date of the resource.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Gets or sets the status of the resource.
	Status *string `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DscReportResource.
func (d DscReportResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dependsOn", d.DependsOn)
	populate(objectMap, "durationInSeconds", d.DurationInSeconds)
	populate(objectMap, "error", d.Error)
	populate(objectMap, "moduleName", d.ModuleName)
	populate(objectMap, "moduleVersion", d.ModuleVersion)
	populate(objectMap, "resourceId", d.ResourceID)
	populate(objectMap, "resourceName", d.ResourceName)
	populate(objectMap, "sourceInfo", d.SourceInfo)
	populate(objectMap, "startDate", (*timeRFC3339)(d.StartDate))
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DscReportResource.
func (d *DscReportResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dependsOn":
			err = unpopulate(val, &d.DependsOn)
			delete(rawMsg, key)
		case "durationInSeconds":
			err = unpopulate(val, &d.DurationInSeconds)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &d.Error)
			delete(rawMsg, key)
		case "moduleName":
			err = unpopulate(val, &d.ModuleName)
			delete(rawMsg, key)
		case "moduleVersion":
			err = unpopulate(val, &d.ModuleVersion)
			delete(rawMsg, key)
		case "resourceId":
			err = unpopulate(val, &d.ResourceID)
			delete(rawMsg, key)
		case "resourceName":
			err = unpopulate(val, &d.ResourceName)
			delete(rawMsg, key)
		case "sourceInfo":
			err = unpopulate(val, &d.SourceInfo)
			delete(rawMsg, key)
		case "startDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DscReportResourceNavigation - Navigation for DSC Report Resource.
type DscReportResourceNavigation struct {
	// Gets or sets the ID of the resource to navigate to.
	ResourceID *string `json:"resourceId,omitempty"`
}

// EncryptionProperties - The encryption settings for automation account
type EncryptionProperties struct {
	// User identity used for CMK.
	Identity *EncryptionPropertiesIdentity `json:"identity,omitempty"`

	// Encryption Key Source
	KeySource *EncryptionKeySourceType `json:"keySource,omitempty"`

	// Key vault properties.
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`
}

// EncryptionPropertiesIdentity - User identity used for CMK.
type EncryptionPropertiesIdentity struct {
	// The user identity used for CMK. It will be an ARM resource id in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentity map[string]interface{} `json:"userAssignedIdentity,omitempty"`
}

// ErrorResponse - Error response of an operation failure
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Error code
	Code *string `json:"code,omitempty"`

	// Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// FieldDefinition - Definition of the connection fields.
type FieldDefinition struct {
	// REQUIRED; Gets or sets the type of the connection field definition.
	Type *string `json:"type,omitempty"`

	// Gets or sets the isEncrypted flag of the connection field definition.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`

	// Gets or sets the isOptional flag of the connection field definition.
	IsOptional *bool `json:"isOptional,omitempty"`
}

// FieldsListByTypeOptions contains the optional parameters for the Fields.ListByType method.
type FieldsListByTypeOptions struct {
	// placeholder for future optional parameters
}

// GraphicalRunbookContent - Graphical Runbook Content
type GraphicalRunbookContent struct {
	// Graphical Runbook content as JSON
	GraphRunbookJSON *string `json:"graphRunbookJson,omitempty"`

	// Raw graphical Runbook content.
	RawContent *RawGraphicalRunbookContent `json:"rawContent,omitempty"`
}

// HybridRunbookWorker - Definition of hybrid runbook worker.
type HybridRunbookWorker struct {
	Resource
	// Gets or sets the hybrid worker group properties.
	Properties *HybridRunbookWorkerProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource system metadata.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorker.
func (h HybridRunbookWorker) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", h.Properties)
	populate(objectMap, "systemData", h.SystemData)
	return json.Marshal(objectMap)
}

// HybridRunbookWorkerCreateOrUpdateParameters - The parameters supplied to the create or update hybrid runbook worker operation.
type HybridRunbookWorkerCreateOrUpdateParameters struct {
	// Azure Resource Manager Id for a virtual machine.
	VMResourceID *string `json:"vmResourceId,omitempty"`
}

// HybridRunbookWorkerCreateParameters - The parameters supplied to the create hybrid runbook worker operation.
type HybridRunbookWorkerCreateParameters struct {
	// REQUIRED; Gets or sets hybrid runbook worker group create or update properties.
	Properties *HybridRunbookWorkerCreateOrUpdateParameters `json:"properties,omitempty"`

	// Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`
}

// HybridRunbookWorkerGroup - Definition of hybrid runbook worker group.
type HybridRunbookWorkerGroup struct {
	// Sets the credential of a worker group.
	Credential *RunAsCredentialAssociationProperty `json:"credential,omitempty"`

	// Type of the HybridWorkerGroup.
	GroupType *GroupTypeEnum `json:"groupType,omitempty"`

	// Gets or sets the list of hybrid runbook workers.
	HybridRunbookWorkers []*HybridRunbookWorkerLegacy `json:"hybridRunbookWorkers,omitempty"`

	// Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`

	// Gets or sets the name of the group.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Resource system metadata.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkerGroup.
func (h HybridRunbookWorkerGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "credential", h.Credential)
	populate(objectMap, "groupType", h.GroupType)
	populate(objectMap, "hybridRunbookWorkers", h.HybridRunbookWorkers)
	populate(objectMap, "id", h.ID)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "systemData", h.SystemData)
	populate(objectMap, "type", h.Type)
	return json.Marshal(objectMap)
}

// HybridRunbookWorkerGroupCreateOptions contains the optional parameters for the HybridRunbookWorkerGroup.Create method.
type HybridRunbookWorkerGroupCreateOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkerGroupCreateOrUpdateParameters - The parameters supplied to the create or update hybrid runbook worker group operation.
type HybridRunbookWorkerGroupCreateOrUpdateParameters struct {
	// Sets the credential of a worker group.
	Credential *RunAsCredentialAssociationProperty `json:"credential,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkerGroupCreateOrUpdateParameters.
func (h HybridRunbookWorkerGroupCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "credential", h.Credential)
	return json.Marshal(objectMap)
}

// HybridRunbookWorkerGroupDeleteOptions contains the optional parameters for the HybridRunbookWorkerGroup.Delete method.
type HybridRunbookWorkerGroupDeleteOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkerGroupGetOptions contains the optional parameters for the HybridRunbookWorkerGroup.Get method.
type HybridRunbookWorkerGroupGetOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkerGroupListByAutomationAccountOptions contains the optional parameters for the HybridRunbookWorkerGroup.ListByAutomationAccount method.
type HybridRunbookWorkerGroupListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// HybridRunbookWorkerGroupUpdateOptions contains the optional parameters for the HybridRunbookWorkerGroup.Update method.
type HybridRunbookWorkerGroupUpdateOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkerGroupUpdateParameters - Parameters supplied to the update operation.
type HybridRunbookWorkerGroupUpdateParameters struct {
	// Sets the credential of a worker group.
	Credential *RunAsCredentialAssociationProperty `json:"credential,omitempty"`
}

// HybridRunbookWorkerGroupsListResult - The response model for the list hybrid runbook worker groups.
type HybridRunbookWorkerGroupsListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of hybrid runbook worker groups.
	Value []*HybridRunbookWorkerGroup `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkerGroupsListResult.
func (h HybridRunbookWorkerGroupsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// HybridRunbookWorkerLegacy - Definition of hybrid runbook worker Legacy.
type HybridRunbookWorkerLegacy struct {
	// Gets or sets the assigned machine IP address.
	IP *string `json:"ip,omitempty"`

	// Last Heartbeat from the Worker
	LastSeenDateTime *time.Time `json:"lastSeenDateTime,omitempty"`

	// Gets or sets the worker machine name.
	Name *string `json:"name,omitempty"`

	// Gets or sets the registration time of the worker machine.
	RegistrationTime *time.Time `json:"registrationTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkerLegacy.
func (h HybridRunbookWorkerLegacy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ip", h.IP)
	populate(objectMap, "lastSeenDateTime", (*timeRFC3339)(h.LastSeenDateTime))
	populate(objectMap, "name", h.Name)
	populate(objectMap, "registrationTime", (*timeRFC3339)(h.RegistrationTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HybridRunbookWorkerLegacy.
func (h *HybridRunbookWorkerLegacy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ip":
			err = unpopulate(val, &h.IP)
			delete(rawMsg, key)
		case "lastSeenDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			h.LastSeenDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &h.Name)
			delete(rawMsg, key)
		case "registrationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			h.RegistrationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// HybridRunbookWorkerMoveParameters - Parameters supplied to move hybrid worker operation.
type HybridRunbookWorkerMoveParameters struct {
	// Gets or sets the target hybrid runbook worker group.
	HybridRunbookWorkerGroupName *string `json:"hybridRunbookWorkerGroupName,omitempty"`
}

// HybridRunbookWorkerProperties - Definition of hybrid runbook worker property.
type HybridRunbookWorkerProperties struct {
	// Gets or sets the assigned machine IP address.
	IP *string `json:"ip,omitempty"`

	// Last Heartbeat from the Worker
	LastSeenDateTime *time.Time `json:"lastSeenDateTime,omitempty"`

	// Gets or sets the registration time of the worker machine.
	RegisteredDateTime *time.Time `json:"registeredDateTime,omitempty"`

	// Azure Resource Manager Id for a virtual machine.
	VMResourceID *string `json:"vmResourceId,omitempty"`

	// Name of the HybridWorker.
	WorkerName *string `json:"workerName,omitempty"`

	// Type of the HybridWorker.
	WorkerType *WorkerType `json:"workerType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkerProperties.
func (h HybridRunbookWorkerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ip", h.IP)
	populate(objectMap, "lastSeenDateTime", (*timeRFC3339)(h.LastSeenDateTime))
	populate(objectMap, "registeredDateTime", (*timeRFC3339)(h.RegisteredDateTime))
	populate(objectMap, "vmResourceId", h.VMResourceID)
	populate(objectMap, "workerName", h.WorkerName)
	populate(objectMap, "workerType", h.WorkerType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HybridRunbookWorkerProperties.
func (h *HybridRunbookWorkerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ip":
			err = unpopulate(val, &h.IP)
			delete(rawMsg, key)
		case "lastSeenDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			h.LastSeenDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "registeredDateTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			h.RegisteredDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "vmResourceId":
			err = unpopulate(val, &h.VMResourceID)
			delete(rawMsg, key)
		case "workerName":
			err = unpopulate(val, &h.WorkerName)
			delete(rawMsg, key)
		case "workerType":
			err = unpopulate(val, &h.WorkerType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// HybridRunbookWorkersCreateOptions contains the optional parameters for the HybridRunbookWorkers.Create method.
type HybridRunbookWorkersCreateOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkersDeleteOptions contains the optional parameters for the HybridRunbookWorkers.Delete method.
type HybridRunbookWorkersDeleteOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkersGetOptions contains the optional parameters for the HybridRunbookWorkers.Get method.
type HybridRunbookWorkersGetOptions struct {
	// placeholder for future optional parameters
}

// HybridRunbookWorkersListByHybridRunbookWorkerGroupOptions contains the optional parameters for the HybridRunbookWorkers.ListByHybridRunbookWorkerGroup
// method.
type HybridRunbookWorkersListByHybridRunbookWorkerGroupOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// HybridRunbookWorkersListResult - The response model for the list hybrid runbook workers.
type HybridRunbookWorkersListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of hybrid runbook workers.
	Value []*HybridRunbookWorker `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridRunbookWorkersListResult.
func (h HybridRunbookWorkersListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// HybridRunbookWorkersMoveOptions contains the optional parameters for the HybridRunbookWorkers.Move method.
type HybridRunbookWorkersMoveOptions struct {
	// placeholder for future optional parameters
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The principal ID of resource identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of resource.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Identity.
func (i Identity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", i.PrincipalID)
	populate(objectMap, "tenantId", i.TenantID)
	populate(objectMap, "type", i.Type)
	populate(objectMap, "userAssignedIdentities", i.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// Job - Definition of the job.
type Job struct {
	ProxyResource
	// The properties of the job.
	Properties *JobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Job.
func (j Job) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	j.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", j.Properties)
	return json.Marshal(objectMap)
}

// JobCollectionItem - Job collection item properties.
type JobCollectionItem struct {
	ProxyResource
	// REQUIRED; Job properties.
	Properties *JobCollectionItemProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobCollectionItem.
func (j JobCollectionItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	j.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", j.Properties)
	return json.Marshal(objectMap)
}

// JobCollectionItemProperties - Job collection item properties.
type JobCollectionItemProperties struct {
	// Specifies the runOn group name where the job was executed.
	RunOn *string `json:"runOn,omitempty"`

	// READ-ONLY; The creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; The end time of the job.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The id of the job.
	JobID *string `json:"jobId,omitempty" azure:"ro"`

	// READ-ONLY; The last modified time of the job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of a resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The runbook association.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty" azure:"ro"`

	// READ-ONLY; The start time of the job.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; The status of the job.
	Status *JobStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type JobCollectionItemProperties.
func (j JobCollectionItemProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(j.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(j.EndTime))
	populate(objectMap, "jobId", j.JobID)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(j.LastModifiedTime))
	populate(objectMap, "provisioningState", j.ProvisioningState)
	populate(objectMap, "runOn", j.RunOn)
	populate(objectMap, "runbook", j.Runbook)
	populate(objectMap, "startTime", (*timeRFC3339)(j.StartTime))
	populate(objectMap, "status", j.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobCollectionItemProperties.
func (j *JobCollectionItemProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "jobId":
			err = unpopulate(val, &j.JobID)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &j.ProvisioningState)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &j.RunOn)
			delete(rawMsg, key)
		case "runbook":
			err = unpopulate(val, &j.Runbook)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &j.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// JobCreateOptions contains the optional parameters for the Job.Create method.
type JobCreateOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobCreateParameters - The parameters supplied to the create job operation.
type JobCreateParameters struct {
	// REQUIRED; Gets or sets the list of job properties.
	Properties *JobCreateProperties `json:"properties,omitempty"`
}

type JobCreateProperties struct {
	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobCreateProperties.
func (j JobCreateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "parameters", j.Parameters)
	populate(objectMap, "runOn", j.RunOn)
	populate(objectMap, "runbook", j.Runbook)
	return json.Marshal(objectMap)
}

// JobGetOptions contains the optional parameters for the Job.Get method.
type JobGetOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobGetOutputOptions contains the optional parameters for the Job.GetOutput method.
type JobGetOutputOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobGetRunbookContentOptions contains the optional parameters for the Job.GetRunbookContent method.
type JobGetRunbookContentOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobListByAutomationAccountOptions contains the optional parameters for the Job.ListByAutomationAccount method.
type JobListByAutomationAccountOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
	// The filter to apply on the operation.
	Filter *string
}

// JobListResultV2 - The response model for the list job operation.
type JobListResultV2 struct {
	// List of jobs.
	Value []*JobCollectionItem `json:"value,omitempty"`

	// READ-ONLY; The link to the next page.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type JobListResultV2.
func (j JobListResultV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", j.NextLink)
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// JobNavigation - Software update configuration machine run job navigation properties.
type JobNavigation struct {
	// READ-ONLY; Id of the job associated with the software update configuration run
	ID *string `json:"id,omitempty" azure:"ro"`
}

// JobProperties - Definition of job properties.
type JobProperties struct {
	// Gets or sets the creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the end time of the job.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Gets or sets the exception of the job.
	Exception *string `json:"exception,omitempty"`

	// Gets or sets the id of the job.
	JobID *string `json:"jobId,omitempty"`

	// Gets or sets the last modified time of the job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the last status modified time of the job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty"`

	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// The current provisioning state of the job.
	ProvisioningState *JobProvisioningState `json:"provisioningState,omitempty"`

	// Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`

	// Gets or sets the start time of the job.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the job started by.
	StartedBy *string `json:"startedBy,omitempty"`

	// Gets or sets the status of the job.
	Status *JobStatus `json:"status,omitempty"`

	// Gets or sets the status details of the job.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobProperties.
func (j JobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(j.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(j.EndTime))
	populate(objectMap, "exception", j.Exception)
	populate(objectMap, "jobId", j.JobID)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(j.LastModifiedTime))
	populate(objectMap, "lastStatusModifiedTime", (*timeRFC3339)(j.LastStatusModifiedTime))
	populate(objectMap, "parameters", j.Parameters)
	populate(objectMap, "provisioningState", j.ProvisioningState)
	populate(objectMap, "runOn", j.RunOn)
	populate(objectMap, "runbook", j.Runbook)
	populate(objectMap, "startTime", (*timeRFC3339)(j.StartTime))
	populate(objectMap, "startedBy", j.StartedBy)
	populate(objectMap, "status", j.Status)
	populate(objectMap, "statusDetails", j.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobProperties.
func (j *JobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "exception":
			err = unpopulate(val, &j.Exception)
			delete(rawMsg, key)
		case "jobId":
			err = unpopulate(val, &j.JobID)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastStatusModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.LastStatusModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &j.Parameters)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &j.ProvisioningState)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &j.RunOn)
			delete(rawMsg, key)
		case "runbook":
			err = unpopulate(val, &j.Runbook)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startedBy":
			err = unpopulate(val, &j.StartedBy)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &j.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &j.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// JobResumeOptions contains the optional parameters for the Job.Resume method.
type JobResumeOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobSchedule - Definition of the job schedule.
type JobSchedule struct {
	// Gets or sets the properties of the job schedule.
	Properties *JobScheduleProperties `json:"properties,omitempty"`

	// READ-ONLY; Gets the id of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Gets the name of the variable.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// JobScheduleCreateOptions contains the optional parameters for the JobSchedule.Create method.
type JobScheduleCreateOptions struct {
	// placeholder for future optional parameters
}

// JobScheduleCreateParameters - The parameters supplied to the create job schedule operation.
type JobScheduleCreateParameters struct {
	// REQUIRED; Gets or sets the list of job schedule properties.
	Properties *JobScheduleCreateProperties `json:"properties,omitempty"`
}

// JobScheduleCreateProperties - The parameters supplied to the create job schedule operation.
type JobScheduleCreateProperties struct {
	// REQUIRED; Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`

	// REQUIRED; Gets or sets the schedule.
	Schedule *ScheduleAssociationProperty `json:"schedule,omitempty"`

	// Gets or sets a list of job properties.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the hybrid worker group that the scheduled job should run on.
	RunOn *string `json:"runOn,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobScheduleCreateProperties.
func (j JobScheduleCreateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "parameters", j.Parameters)
	populate(objectMap, "runOn", j.RunOn)
	populate(objectMap, "runbook", j.Runbook)
	populate(objectMap, "schedule", j.Schedule)
	return json.Marshal(objectMap)
}

// JobScheduleDeleteOptions contains the optional parameters for the JobSchedule.Delete method.
type JobScheduleDeleteOptions struct {
	// placeholder for future optional parameters
}

// JobScheduleGetOptions contains the optional parameters for the JobSchedule.Get method.
type JobScheduleGetOptions struct {
	// placeholder for future optional parameters
}

// JobScheduleListByAutomationAccountOptions contains the optional parameters for the JobSchedule.ListByAutomationAccount method.
type JobScheduleListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// JobScheduleListResult - The response model for the list job schedule operation.
type JobScheduleListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of job schedules.
	Value []*JobSchedule `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobScheduleListResult.
func (j JobScheduleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", j.NextLink)
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// JobScheduleProperties - Definition of job schedule parameters.
type JobScheduleProperties struct {
	// Gets or sets the id of job schedule.
	JobScheduleID *string `json:"jobScheduleId,omitempty"`

	// Gets or sets the parameters of the job schedule.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the hybrid worker group that the scheduled job should run on.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`

	// Gets or sets the schedule.
	Schedule *ScheduleAssociationProperty `json:"schedule,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobScheduleProperties.
func (j JobScheduleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jobScheduleId", j.JobScheduleID)
	populate(objectMap, "parameters", j.Parameters)
	populate(objectMap, "runOn", j.RunOn)
	populate(objectMap, "runbook", j.Runbook)
	populate(objectMap, "schedule", j.Schedule)
	return json.Marshal(objectMap)
}

// JobStopOptions contains the optional parameters for the Job.Stop method.
type JobStopOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobStream - Definition of the job stream.
type JobStream struct {
	// Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`

	// Gets or sets the id of the job stream.
	Properties *JobStreamProperties `json:"properties,omitempty"`
}

// JobStreamGetOptions contains the optional parameters for the JobStream.Get method.
type JobStreamGetOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// JobStreamListByJobOptions contains the optional parameters for the JobStream.ListByJob method.
type JobStreamListByJobOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
	// The filter to apply on the operation.
	Filter *string
}

// JobStreamListResult - The response model for the list job stream operation.
type JobStreamListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of job streams.
	Value []*JobStream `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobStreamListResult.
func (j JobStreamListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", j.NextLink)
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// JobStreamProperties - Definition of the job stream.
type JobStreamProperties struct {
	// Gets or sets the id of the job stream.
	JobStreamID *string `json:"jobStreamId,omitempty"`

	// Gets or sets the stream text.
	StreamText *string `json:"streamText,omitempty"`

	// Gets or sets the stream type.
	StreamType *JobStreamType `json:"streamType,omitempty"`

	// Gets or sets the summary.
	Summary *string `json:"summary,omitempty"`

	// Gets or sets the creation time of the job.
	Time *time.Time `json:"time,omitempty"`

	// Gets or sets the values of the job stream.
	Value map[string]map[string]interface{} `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JobStreamProperties.
func (j JobStreamProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jobStreamId", j.JobStreamID)
	populate(objectMap, "streamText", j.StreamText)
	populate(objectMap, "streamType", j.StreamType)
	populate(objectMap, "summary", j.Summary)
	populate(objectMap, "time", (*timeRFC3339)(j.Time))
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobStreamProperties.
func (j *JobStreamProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jobStreamId":
			err = unpopulate(val, &j.JobStreamID)
			delete(rawMsg, key)
		case "streamText":
			err = unpopulate(val, &j.StreamText)
			delete(rawMsg, key)
		case "streamType":
			err = unpopulate(val, &j.StreamType)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, &j.Summary)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			j.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &j.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// JobSuspendOptions contains the optional parameters for the Job.Suspend method.
type JobSuspendOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// Key - Automation key which is used to register a DSC Node
type Key struct {
	// READ-ONLY; Automation key name.
	KeyName *AutomationKeyName `json:"KeyName,omitempty" azure:"ro"`

	// READ-ONLY; Automation key permissions.
	Permissions *AutomationKeyPermissions `json:"Permissions,omitempty" azure:"ro"`

	// READ-ONLY; Value of the Automation Key used for registration.
	Value *string `json:"Value,omitempty" azure:"ro"`
}

type KeyListResult struct {
	// Lists the automation keys.
	Keys []*Key `json:"keys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KeyListResult.
func (k KeyListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "keys", k.Keys)
	return json.Marshal(objectMap)
}

// KeyVaultProperties - Settings concerning key vault encryption for a configuration store.
type KeyVaultProperties struct {
	// The name of key used to encrypt data.
	KeyName *string `json:"keyName,omitempty"`

	// The key version of the key used to encrypt data.
	KeyVersion *string `json:"keyVersion,omitempty"`

	// The URI of the key vault key used to encrypt data.
	KeyvaultURI *string `json:"keyvaultUri,omitempty"`
}

// KeysListByAutomationAccountOptions contains the optional parameters for the Keys.ListByAutomationAccount method.
type KeysListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// LinkedWorkspace - Definition of the linked workspace.
type LinkedWorkspace struct {
	// READ-ONLY; Gets the id of the linked workspace.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// LinkedWorkspaceGetOptions contains the optional parameters for the LinkedWorkspace.Get method.
type LinkedWorkspaceGetOptions struct {
	// placeholder for future optional parameters
}

// LinuxProperties - Linux specific update configuration.
type LinuxProperties struct {
	// packages excluded from the software update configuration.
	ExcludedPackageNameMasks []*string `json:"excludedPackageNameMasks,omitempty"`

	// Update classifications included in the software update configuration.
	IncludedPackageClassifications *LinuxUpdateClasses `json:"includedPackageClassifications,omitempty"`

	// packages included from the software update configuration.
	IncludedPackageNameMasks []*string `json:"includedPackageNameMasks,omitempty"`

	// Reboot setting for the software update configuration.
	RebootSetting *string `json:"rebootSetting,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinuxProperties.
func (l LinuxProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "excludedPackageNameMasks", l.ExcludedPackageNameMasks)
	populate(objectMap, "includedPackageClassifications", l.IncludedPackageClassifications)
	populate(objectMap, "includedPackageNameMasks", l.IncludedPackageNameMasks)
	populate(objectMap, "rebootSetting", l.RebootSetting)
	return json.Marshal(objectMap)
}

// Module - Definition of the module type.
type Module struct {
	TrackedResource
	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// Gets or sets the module properties.
	Properties *ModuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Module.
func (m Module) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", m.Etag)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// ModuleCreateOrUpdateOptions contains the optional parameters for the Module.CreateOrUpdate method.
type ModuleCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ModuleCreateOrUpdateParameters - The parameters supplied to the create or update module operation.
type ModuleCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the module create properties.
	Properties *ModuleCreateOrUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ModuleCreateOrUpdateParameters.
func (m ModuleCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	return json.Marshal(objectMap)
}

// ModuleCreateOrUpdateProperties - The parameters supplied to the create or update module properties.
type ModuleCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the module content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
}

// ModuleDeleteOptions contains the optional parameters for the Module.Delete method.
type ModuleDeleteOptions struct {
	// placeholder for future optional parameters
}

// ModuleErrorInfo - Definition of the module error info type.
type ModuleErrorInfo struct {
	// Gets or sets the error code.
	Code *string `json:"code,omitempty"`

	// Gets or sets the error message.
	Message *string `json:"message,omitempty"`
}

// ModuleGetOptions contains the optional parameters for the Module.Get method.
type ModuleGetOptions struct {
	// placeholder for future optional parameters
}

// ModuleListByAutomationAccountOptions contains the optional parameters for the Module.ListByAutomationAccount method.
type ModuleListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// ModuleListResult - The response model for the list module operation.
type ModuleListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of modules.
	Value []*Module `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ModuleListResult.
func (m ModuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// ModuleProperties - Definition of the module property type.
type ModuleProperties struct {
	// Gets or sets the activity count of the module.
	ActivityCount *int32 `json:"activityCount,omitempty"`

	// Gets or sets the contentLink of the module.
	ContentLink *ContentLink `json:"contentLink,omitempty"`

	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the error info of the module.
	Error *ModuleErrorInfo `json:"error,omitempty"`

	// Gets or sets type of module, if its composite or not.
	IsComposite *bool `json:"isComposite,omitempty"`

	// Gets or sets the isGlobal flag of the module.
	IsGlobal *bool `json:"isGlobal,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the provisioning state of the module.
	ProvisioningState *ModuleProvisioningState `json:"provisioningState,omitempty"`

	// Gets or sets the size in bytes of the module.
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`

	// Gets or sets the version of the module.
	Version *string `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ModuleProperties.
func (m ModuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activityCount", m.ActivityCount)
	populate(objectMap, "contentLink", m.ContentLink)
	populate(objectMap, "creationTime", (*timeRFC3339)(m.CreationTime))
	populate(objectMap, "description", m.Description)
	populate(objectMap, "error", m.Error)
	populate(objectMap, "isComposite", m.IsComposite)
	populate(objectMap, "isGlobal", m.IsGlobal)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(m.LastModifiedTime))
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "sizeInBytes", m.SizeInBytes)
	populate(objectMap, "version", m.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ModuleProperties.
func (m *ModuleProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activityCount":
			err = unpopulate(val, &m.ActivityCount)
			delete(rawMsg, key)
		case "contentLink":
			err = unpopulate(val, &m.ContentLink)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &m.Description)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &m.Error)
			delete(rawMsg, key)
		case "isComposite":
			err = unpopulate(val, &m.IsComposite)
			delete(rawMsg, key)
		case "isGlobal":
			err = unpopulate(val, &m.IsGlobal)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &m.ProvisioningState)
			delete(rawMsg, key)
		case "sizeInBytes":
			err = unpopulate(val, &m.SizeInBytes)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &m.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ModuleUpdateOptions contains the optional parameters for the Module.Update method.
type ModuleUpdateOptions struct {
	// placeholder for future optional parameters
}

// ModuleUpdateParameters - The parameters supplied to the update module operation.
type ModuleUpdateParameters struct {
	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the module update properties.
	Properties *ModuleUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ModuleUpdateParameters.
func (m ModuleUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	return json.Marshal(objectMap)
}

// ModuleUpdateProperties - The parameters supplied to the update properties.
type ModuleUpdateProperties struct {
	// Gets or sets the module content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
}

// NodeCount - Number of nodes based on the Filter
type NodeCount struct {
	// Gets the name of a count type
	Name       *string              `json:"name,omitempty"`
	Properties *NodeCountProperties `json:"properties,omitempty"`
}

// NodeCountInformationGetOptions contains the optional parameters for the NodeCountInformation.Get method.
type NodeCountInformationGetOptions struct {
	// placeholder for future optional parameters
}

type NodeCountProperties struct {
	// Gets the count for the name
	Count *int32 `json:"count,omitempty"`
}

// NodeCounts - Gets the count of nodes by count type
type NodeCounts struct {
	// Gets the total number of records matching countType criteria.
	TotalCount *int32 `json:"totalCount,omitempty"`

	// Gets an array of counts
	Value []*NodeCount `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NodeCounts.
func (n NodeCounts) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "totalCount", n.TotalCount)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NodeReportsGetContentOptions contains the optional parameters for the NodeReports.GetContent method.
type NodeReportsGetContentOptions struct {
	// placeholder for future optional parameters
}

// NodeReportsGetOptions contains the optional parameters for the NodeReports.Get method.
type NodeReportsGetOptions struct {
	// placeholder for future optional parameters
}

// NodeReportsListByNodeOptions contains the optional parameters for the NodeReports.ListByNode method.
type NodeReportsListByNodeOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// NonAzureQueryProperties - Non Azure query for the update configuration.
type NonAzureQueryProperties struct {
	// Log Analytics Saved Search name.
	FunctionAlias *string `json:"functionAlias,omitempty"`

	// Workspace Id for Log Analytics in which the saved Search is resided.
	WorkspaceID *string `json:"workspaceId,omitempty"`
}

// ObjectDataTypesListFieldsByModuleAndTypeOptions contains the optional parameters for the ObjectDataTypes.ListFieldsByModuleAndType method.
type ObjectDataTypesListFieldsByModuleAndTypeOptions struct {
	// placeholder for future optional parameters
}

// ObjectDataTypesListFieldsByTypeOptions contains the optional parameters for the ObjectDataTypes.ListFieldsByType method.
type ObjectDataTypesListFieldsByTypeOptions struct {
	// placeholder for future optional parameters
}

// Operation - Automation REST API operation
type Operation struct {
	// Provider, Resource and Operation values
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - Provider, Resource and Operation values
type OperationDisplay struct {
	// Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft.Automation
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed: Runbooks, Jobs etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - The response model for the list of Automation operations
type OperationListResult struct {
	// List of Automation operations supported by the Automation resource provider.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnection - A private endpoint connection
type PrivateEndpointConnection struct {
	ProxyResource
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnection.
func (p PrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionListResult - A list of private endpoint connections
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of a private endpoint connection.
type PrivateEndpointConnectionProperties struct {
	// Private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpointProperty `json:"privateEndpoint,omitempty"`

	// Connection State of the Private Endpoint Connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateProperty `json:"privateLinkServiceConnectionState,omitempty"`
}

// PrivateEndpointConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnections.BeginCreateOrUpdate method.
type PrivateEndpointConnectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnections.BeginDelete method.
type PrivateEndpointConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListByAutomationAccountOptions contains the optional parameters for the PrivateEndpointConnections.ListByAutomationAccount
// method.
type PrivateEndpointConnectionsListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointProperty - Private endpoint which the connection belongs to.
type PrivateEndpointProperty struct {
	// Resource id of the private endpoint.
	ID *string `json:"id,omitempty"`
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	ProxyResource
	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResource.
func (p PrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesAutomationOptions contains the optional parameters for the PrivateLinkResources.Automation method.
type PrivateLinkResourcesAutomationOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServiceConnectionStateProperty - Connection State of the Private Endpoint Connection.
type PrivateLinkServiceConnectionStateProperty struct {
	// The private link service connection description.
	Description *string `json:"description,omitempty"`

	// The private link service connection status.
	Status *string `json:"status,omitempty"`

	// READ-ONLY; Any action that is required beyond basic workflow (approve/ reject/ disconnect)
	ActionsRequired *string `json:"actionsRequired,omitempty" azure:"ro"`
}

// ProxyResource - ARM proxy resource.
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

// Python2PackageCreateOrUpdateOptions contains the optional parameters for the Python2Package.CreateOrUpdate method.
type Python2PackageCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// Python2PackageDeleteOptions contains the optional parameters for the Python2Package.Delete method.
type Python2PackageDeleteOptions struct {
	// placeholder for future optional parameters
}

// Python2PackageGetOptions contains the optional parameters for the Python2Package.Get method.
type Python2PackageGetOptions struct {
	// placeholder for future optional parameters
}

// Python2PackageListByAutomationAccountOptions contains the optional parameters for the Python2Package.ListByAutomationAccount method.
type Python2PackageListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// Python2PackageUpdateOptions contains the optional parameters for the Python2Package.Update method.
type Python2PackageUpdateOptions struct {
	// placeholder for future optional parameters
}

// PythonPackageCreateParameters - The parameters supplied to the create or update module operation.
type PythonPackageCreateParameters struct {
	// REQUIRED; Gets or sets the module create properties.
	Properties *PythonPackageCreateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PythonPackageCreateParameters.
func (p PythonPackageCreateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PythonPackageCreateProperties - The parameters supplied to the create or update module properties.
type PythonPackageCreateProperties struct {
	// REQUIRED; Gets or sets the module content link.
	ContentLink *ContentLink `json:"contentLink,omitempty"`
}

// PythonPackageUpdateParameters - The parameters supplied to the update module operation.
type PythonPackageUpdateParameters struct {
	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PythonPackageUpdateParameters.
func (p PythonPackageUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// RawGraphicalRunbookContent - Raw Graphical Runbook content
type RawGraphicalRunbookContent struct {
	// Serialized Graphical runbook
	RunbookDefinition *string `json:"runbookDefinition,omitempty"`

	// Runbook Type
	RunbookType *GraphRunbookType `json:"runbookType,omitempty"`

	// Schema version of the serializer.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
}

// Resource - The core properties of ARM resources
type Resource struct {
	// READ-ONLY; Fully qualified resource Id for the resource
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// RunAsCredentialAssociationProperty - Definition of RunAs credential to use for hybrid worker.
type RunAsCredentialAssociationProperty struct {
	// Gets or sets the name of the credential.
	Name *string `json:"name,omitempty"`
}

// Runbook - Definition of the runbook type.
type Runbook struct {
	TrackedResource
	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// Gets or sets the runbook properties.
	Properties *RunbookProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Runbook.
func (r Runbook) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", r.Etag)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RunbookAssociationProperty - The runbook property associated with the entity.
type RunbookAssociationProperty struct {
	// Gets or sets the name of the runbook.
	Name *string `json:"name,omitempty"`
}

// RunbookBeginPublishOptions contains the optional parameters for the Runbook.BeginPublish method.
type RunbookBeginPublishOptions struct {
	// placeholder for future optional parameters
}

// RunbookCreateOrUpdateDraftParameters - The parameters supplied to the create or update runbook operation.
type RunbookCreateOrUpdateDraftParameters struct {
	// REQUIRED; Content of the Runbook.
	RunbookContent *string `json:"runbookContent,omitempty"`
}

// RunbookCreateOrUpdateDraftProperties - The parameters supplied to the create or update draft runbook properties.
type RunbookCreateOrUpdateDraftProperties struct {
	// REQUIRED; Gets or sets the draft runbook properties.
	Draft *RunbookDraft `json:"draft,omitempty"`

	// REQUIRED; Gets or sets the type of the runbook.
	RunbookType *RunbookTypeEnum `json:"runbookType,omitempty"`

	// Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`

	// Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`

	// Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
}

// RunbookCreateOrUpdateOptions contains the optional parameters for the Runbook.CreateOrUpdate method.
type RunbookCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RunbookCreateOrUpdateParameters - The parameters supplied to the create or update runbook operation.
type RunbookCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets runbook create or update properties.
	Properties *RunbookCreateOrUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RunbookCreateOrUpdateParameters.
func (r RunbookCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// RunbookCreateOrUpdateProperties - The parameters supplied to the create or update runbook properties.
type RunbookCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the type of the runbook.
	RunbookType *RunbookTypeEnum `json:"runbookType,omitempty"`

	// Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`

	// Gets or sets the draft runbook properties.
	Draft *RunbookDraft `json:"draft,omitempty"`

	// Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`

	// Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`

	// Gets or sets the published runbook content link.
	PublishContentLink *ContentLink `json:"publishContentLink,omitempty"`
}

// RunbookDeleteOptions contains the optional parameters for the Runbook.Delete method.
type RunbookDeleteOptions struct {
	// placeholder for future optional parameters
}

type RunbookDraft struct {
	// Gets or sets the creation time of the runbook draft.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the draft runbook content link.
	DraftContentLink *ContentLink `json:"draftContentLink,omitempty"`

	// Gets or sets whether runbook is in edit mode.
	InEdit *bool `json:"inEdit,omitempty"`

	// Gets or sets the last modified time of the runbook draft.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the runbook output types.
	OutputTypes []*string `json:"outputTypes,omitempty"`

	// Gets or sets the runbook draft parameters.
	Parameters map[string]*RunbookParameter `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RunbookDraft.
func (r RunbookDraft) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "draftContentLink", r.DraftContentLink)
	populate(objectMap, "inEdit", r.InEdit)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(r.LastModifiedTime))
	populate(objectMap, "outputTypes", r.OutputTypes)
	populate(objectMap, "parameters", r.Parameters)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RunbookDraft.
func (r *RunbookDraft) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "draftContentLink":
			err = unpopulate(val, &r.DraftContentLink)
			delete(rawMsg, key)
		case "inEdit":
			err = unpopulate(val, &r.InEdit)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "outputTypes":
			err = unpopulate(val, &r.OutputTypes)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &r.Parameters)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RunbookDraftBeginReplaceContentOptions contains the optional parameters for the RunbookDraft.BeginReplaceContent method.
type RunbookDraftBeginReplaceContentOptions struct {
	// placeholder for future optional parameters
}

// RunbookDraftGetContentOptions contains the optional parameters for the RunbookDraft.GetContent method.
type RunbookDraftGetContentOptions struct {
	// placeholder for future optional parameters
}

// RunbookDraftGetOptions contains the optional parameters for the RunbookDraft.Get method.
type RunbookDraftGetOptions struct {
	// placeholder for future optional parameters
}

// RunbookDraftUndoEditOptions contains the optional parameters for the RunbookDraft.UndoEdit method.
type RunbookDraftUndoEditOptions struct {
	// placeholder for future optional parameters
}

// RunbookDraftUndoEditResult - The response model for the undo edit runbook operation.
type RunbookDraftUndoEditResult struct {
	RequestID  *string         `json:"requestId,omitempty"`
	StatusCode *HTTPStatusCode `json:"statusCode,omitempty"`
}

// RunbookGetContentOptions contains the optional parameters for the Runbook.GetContent method.
type RunbookGetContentOptions struct {
	// placeholder for future optional parameters
}

// RunbookGetOptions contains the optional parameters for the Runbook.Get method.
type RunbookGetOptions struct {
	// placeholder for future optional parameters
}

// RunbookListByAutomationAccountOptions contains the optional parameters for the Runbook.ListByAutomationAccount method.
type RunbookListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// RunbookListResult - The response model for the list runbook operation.
type RunbookListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of runbooks.
	Value []*Runbook `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RunbookListResult.
func (r RunbookListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RunbookParameter - Definition of the runbook parameter type.
type RunbookParameter struct {
	// Gets or sets the default value of parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`

	// Gets or sets a Boolean value to indicate whether the parameter is mandatory or not.
	IsMandatory *bool `json:"isMandatory,omitempty"`

	// Get or sets the position of the parameter.
	Position *int32 `json:"position,omitempty"`

	// Gets or sets the type of the parameter.
	Type *string `json:"type,omitempty"`
}

// RunbookProperties - Definition of the runbook property type.
type RunbookProperties struct {
	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the draft runbook properties.
	Draft *RunbookDraft `json:"draft,omitempty"`

	// Gets or sets the job count of the runbook.
	JobCount *int32 `json:"jobCount,omitempty"`

	// Gets or sets the last modified by.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the option to log activity trace of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`

	// Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`

	// Gets or sets the runbook output types.
	OutputTypes []*string `json:"outputTypes,omitempty"`

	// Gets or sets the runbook parameters.
	Parameters map[string]*RunbookParameter `json:"parameters,omitempty"`

	// Gets or sets the provisioning state of the runbook.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// Gets or sets the published runbook content link.
	PublishContentLink *ContentLink `json:"publishContentLink,omitempty"`

	// Gets or sets the type of the runbook.
	RunbookType *RunbookTypeEnum `json:"runbookType,omitempty"`

	// Gets or sets the state of the runbook.
	State *RunbookState `json:"state,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RunbookProperties.
func (r RunbookProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "description", r.Description)
	populate(objectMap, "draft", r.Draft)
	populate(objectMap, "jobCount", r.JobCount)
	populate(objectMap, "lastModifiedBy", r.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(r.LastModifiedTime))
	populate(objectMap, "logActivityTrace", r.LogActivityTrace)
	populate(objectMap, "logProgress", r.LogProgress)
	populate(objectMap, "logVerbose", r.LogVerbose)
	populate(objectMap, "outputTypes", r.OutputTypes)
	populate(objectMap, "parameters", r.Parameters)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "publishContentLink", r.PublishContentLink)
	populate(objectMap, "runbookType", r.RunbookType)
	populate(objectMap, "state", r.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RunbookProperties.
func (r *RunbookProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &r.Description)
			delete(rawMsg, key)
		case "draft":
			err = unpopulate(val, &r.Draft)
			delete(rawMsg, key)
		case "jobCount":
			err = unpopulate(val, &r.JobCount)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &r.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "logActivityTrace":
			err = unpopulate(val, &r.LogActivityTrace)
			delete(rawMsg, key)
		case "logProgress":
			err = unpopulate(val, &r.LogProgress)
			delete(rawMsg, key)
		case "logVerbose":
			err = unpopulate(val, &r.LogVerbose)
			delete(rawMsg, key)
		case "outputTypes":
			err = unpopulate(val, &r.OutputTypes)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &r.Parameters)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &r.ProvisioningState)
			delete(rawMsg, key)
		case "publishContentLink":
			err = unpopulate(val, &r.PublishContentLink)
			delete(rawMsg, key)
		case "runbookType":
			err = unpopulate(val, &r.RunbookType)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &r.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RunbookUpdateOptions contains the optional parameters for the Runbook.Update method.
type RunbookUpdateOptions struct {
	// placeholder for future optional parameters
}

// RunbookUpdateParameters - The parameters supplied to the update runbook operation.
type RunbookUpdateParameters struct {
	// Gets or sets the location of the resource.
	Location *string `json:"location,omitempty"`

	// Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the runbook update properties.
	Properties *RunbookUpdateProperties `json:"properties,omitempty"`

	// Gets or sets the tags attached to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RunbookUpdateParameters.
func (r RunbookUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// RunbookUpdateProperties - The parameters supplied to the update runbook properties.
type RunbookUpdateProperties struct {
	// Gets or sets the description of the runbook.
	Description *string `json:"description,omitempty"`

	// Gets or sets the activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`

	// Gets or sets progress log option.
	LogProgress *bool `json:"logProgress,omitempty"`

	// Gets or sets verbose log option.
	LogVerbose *bool `json:"logVerbose,omitempty"`
}

// SKU - The account SKU.
type SKU struct {
	// REQUIRED; Gets or sets the SKU name of the account.
	Name *SKUNameEnum `json:"name,omitempty"`

	// Gets or sets the SKU capacity.
	Capacity *int32 `json:"capacity,omitempty"`

	// Gets or sets the SKU family.
	Family *string `json:"family,omitempty"`
}

// SUCScheduleProperties - Definition of schedule parameters.
type SUCScheduleProperties struct {
	// Gets or sets the advanced schedule.
	AdvancedSchedule *AdvancedSchedule `json:"advancedSchedule,omitempty"`

	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the end time of the schedule.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`

	// Gets or sets the expiry time's offset in minutes.
	ExpiryTimeOffsetMinutes *float64 `json:"expiryTimeOffsetMinutes,omitempty"`

	// Gets or sets the frequency of the schedule.
	Frequency *ScheduleFrequency `json:"frequency,omitempty"`

	// Gets or sets the interval of the schedule.
	Interval *int64 `json:"interval,omitempty"`

	// Gets or sets a value indicating whether this schedule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the next run time of the schedule.
	NextRun *time.Time `json:"nextRun,omitempty"`

	// Gets or sets the next run time's offset in minutes.
	NextRunOffsetMinutes *float64 `json:"nextRunOffsetMinutes,omitempty"`

	// Gets or sets the start time of the schedule.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the time zone of the schedule.
	TimeZone *string `json:"timeZone,omitempty"`

	// READ-ONLY; Gets the start time's offset in minutes.
	StartTimeOffsetMinutes *float64 `json:"startTimeOffsetMinutes,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SUCScheduleProperties.
func (s SUCScheduleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "advancedSchedule", s.AdvancedSchedule)
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "description", s.Description)
	populate(objectMap, "expiryTime", (*timeRFC3339)(s.ExpiryTime))
	populate(objectMap, "expiryTimeOffsetMinutes", s.ExpiryTimeOffsetMinutes)
	populate(objectMap, "frequency", s.Frequency)
	populate(objectMap, "interval", s.Interval)
	populate(objectMap, "isEnabled", s.IsEnabled)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "nextRun", (*timeRFC3339)(s.NextRun))
	populate(objectMap, "nextRunOffsetMinutes", s.NextRunOffsetMinutes)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "startTimeOffsetMinutes", s.StartTimeOffsetMinutes)
	populate(objectMap, "timeZone", s.TimeZone)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SUCScheduleProperties.
func (s *SUCScheduleProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "advancedSchedule":
			err = unpopulate(val, &s.AdvancedSchedule)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "expiryTimeOffsetMinutes":
			err = unpopulate(val, &s.ExpiryTimeOffsetMinutes)
			delete(rawMsg, key)
		case "frequency":
			err = unpopulate(val, &s.Frequency)
			delete(rawMsg, key)
		case "interval":
			err = unpopulate(val, &s.Interval)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, &s.IsEnabled)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextRun":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.NextRun = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextRunOffsetMinutes":
			err = unpopulate(val, &s.NextRunOffsetMinutes)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startTimeOffsetMinutes":
			err = unpopulate(val, &s.StartTimeOffsetMinutes)
			delete(rawMsg, key)
		case "timeZone":
			err = unpopulate(val, &s.TimeZone)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Schedule - Definition of the schedule.
type Schedule struct {
	ProxyResource
	// Gets or sets the properties of the schedule.
	Properties *ScheduleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Schedule.
func (s Schedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// ScheduleAssociationProperty - The schedule property associated with the entity.
type ScheduleAssociationProperty struct {
	// Gets or sets the name of the Schedule.
	Name *string `json:"name,omitempty"`
}

// ScheduleCreateOrUpdateOptions contains the optional parameters for the Schedule.CreateOrUpdate method.
type ScheduleCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ScheduleCreateOrUpdateParameters - The parameters supplied to the create or update schedule operation.
type ScheduleCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the Schedule.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the list of schedule properties.
	Properties *ScheduleCreateOrUpdateProperties `json:"properties,omitempty"`
}

// ScheduleCreateOrUpdateProperties - The parameters supplied to the create or update schedule operation.
type ScheduleCreateOrUpdateProperties struct {
	// REQUIRED; Gets or sets the frequency of the schedule.
	Frequency *ScheduleFrequency `json:"frequency,omitempty"`

	// REQUIRED; Gets or sets the start time of the schedule.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the AdvancedSchedule.
	AdvancedSchedule *AdvancedSchedule `json:"advancedSchedule,omitempty"`

	// Gets or sets the description of the schedule.
	Description *string `json:"description,omitempty"`

	// Gets or sets the end time of the schedule.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`

	// Gets or sets the interval of the schedule.
	Interval interface{} `json:"interval,omitempty"`

	// Gets or sets the time zone of the schedule.
	TimeZone *string `json:"timeZone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleCreateOrUpdateProperties.
func (s ScheduleCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "advancedSchedule", s.AdvancedSchedule)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "expiryTime", (*timeRFC3339)(s.ExpiryTime))
	populate(objectMap, "frequency", s.Frequency)
	populate(objectMap, "interval", s.Interval)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "timeZone", s.TimeZone)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleCreateOrUpdateProperties.
func (s *ScheduleCreateOrUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "advancedSchedule":
			err = unpopulate(val, &s.AdvancedSchedule)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "frequency":
			err = unpopulate(val, &s.Frequency)
			delete(rawMsg, key)
		case "interval":
			err = unpopulate(val, &s.Interval)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "timeZone":
			err = unpopulate(val, &s.TimeZone)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ScheduleDeleteOptions contains the optional parameters for the Schedule.Delete method.
type ScheduleDeleteOptions struct {
	// placeholder for future optional parameters
}

// ScheduleGetOptions contains the optional parameters for the Schedule.Get method.
type ScheduleGetOptions struct {
	// placeholder for future optional parameters
}

// ScheduleListByAutomationAccountOptions contains the optional parameters for the Schedule.ListByAutomationAccount method.
type ScheduleListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// ScheduleListResult - The response model for the list schedule operation.
type ScheduleListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of schedules.
	Value []*Schedule `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleListResult.
func (s ScheduleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ScheduleProperties - Definition of schedule parameters.
type ScheduleProperties struct {
	// Gets or sets the advanced schedule.
	AdvancedSchedule *AdvancedSchedule `json:"advancedSchedule,omitempty"`

	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the end time of the schedule.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`

	// Gets or sets the expiry time's offset in minutes.
	ExpiryTimeOffsetMinutes *float64 `json:"expiryTimeOffsetMinutes,omitempty"`

	// Gets or sets the frequency of the schedule.
	Frequency *ScheduleFrequency `json:"frequency,omitempty"`

	// Gets or sets the interval of the schedule.
	Interval interface{} `json:"interval,omitempty"`

	// Gets or sets a value indicating whether this schedule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the next run time of the schedule.
	NextRun *time.Time `json:"nextRun,omitempty"`

	// Gets or sets the next run time's offset in minutes.
	NextRunOffsetMinutes *float64 `json:"nextRunOffsetMinutes,omitempty"`

	// Gets or sets the start time of the schedule.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the time zone of the schedule.
	TimeZone *string `json:"timeZone,omitempty"`

	// READ-ONLY; Gets the start time's offset in minutes.
	StartTimeOffsetMinutes *float64 `json:"startTimeOffsetMinutes,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleProperties.
func (s ScheduleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "advancedSchedule", s.AdvancedSchedule)
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "description", s.Description)
	populate(objectMap, "expiryTime", (*timeRFC3339)(s.ExpiryTime))
	populate(objectMap, "expiryTimeOffsetMinutes", s.ExpiryTimeOffsetMinutes)
	populate(objectMap, "frequency", s.Frequency)
	populate(objectMap, "interval", s.Interval)
	populate(objectMap, "isEnabled", s.IsEnabled)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "nextRun", (*timeRFC3339)(s.NextRun))
	populate(objectMap, "nextRunOffsetMinutes", s.NextRunOffsetMinutes)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "startTimeOffsetMinutes", s.StartTimeOffsetMinutes)
	populate(objectMap, "timeZone", s.TimeZone)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleProperties.
func (s *ScheduleProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "advancedSchedule":
			err = unpopulate(val, &s.AdvancedSchedule)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "expiryTimeOffsetMinutes":
			err = unpopulate(val, &s.ExpiryTimeOffsetMinutes)
			delete(rawMsg, key)
		case "frequency":
			err = unpopulate(val, &s.Frequency)
			delete(rawMsg, key)
		case "interval":
			err = unpopulate(val, &s.Interval)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, &s.IsEnabled)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextRun":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.NextRun = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextRunOffsetMinutes":
			err = unpopulate(val, &s.NextRunOffsetMinutes)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "startTimeOffsetMinutes":
			err = unpopulate(val, &s.StartTimeOffsetMinutes)
			delete(rawMsg, key)
		case "timeZone":
			err = unpopulate(val, &s.TimeZone)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ScheduleUpdateOptions contains the optional parameters for the Schedule.Update method.
type ScheduleUpdateOptions struct {
	// placeholder for future optional parameters
}

// ScheduleUpdateParameters - The parameters supplied to the update schedule operation.
type ScheduleUpdateParameters struct {
	// Gets or sets the name of the Schedule.
	Name *string `json:"name,omitempty"`

	// Gets or sets the list of schedule properties.
	Properties *ScheduleUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleUpdateParameters.
func (s ScheduleUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// ScheduleUpdateProperties - The parameters supplied to the update schedule operation.
type ScheduleUpdateProperties struct {
	// Gets or sets the description of the schedule.
	Description *string `json:"description,omitempty"`

	// Gets or sets a value indicating whether this schedule is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// SoftwareUpdateConfiguration - Software update configuration properties.
type SoftwareUpdateConfiguration struct {
	// REQUIRED; Software update configuration properties.
	Properties *SoftwareUpdateConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SoftwareUpdateConfigurationCollectionItem - Software update configuration collection item properties.
type SoftwareUpdateConfigurationCollectionItem struct {
	// REQUIRED; Software update configuration properties.
	Properties *SoftwareUpdateConfigurationCollectionItemProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id of the software update configuration
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the software update configuration.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// SoftwareUpdateConfigurationCollectionItemProperties - Software update configuration collection item properties.
type SoftwareUpdateConfigurationCollectionItemProperties struct {
	// execution frequency of the schedule associated with the software update configuration
	Frequency *ScheduleFrequency `json:"frequency,omitempty"`

	// ext run time of the update.
	NextRun *time.Time `json:"nextRun,omitempty"`

	// the start time of the update.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Pre and Post Tasks defined
	Tasks *SoftwareUpdateConfigurationTasks `json:"tasks,omitempty"`

	// Update specific properties of the software update configuration.
	UpdateConfiguration *UpdateConfiguration `json:"updateConfiguration,omitempty"`

	// READ-ONLY; Creation time of the software update configuration, which only appears in the response.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Last time software update configuration was modified, which only appears in the response.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state for the software update configuration, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationCollectionItemProperties.
func (s SoftwareUpdateConfigurationCollectionItemProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "frequency", s.Frequency)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "nextRun", (*timeRFC3339)(s.NextRun))
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "tasks", s.Tasks)
	populate(objectMap, "updateConfiguration", s.UpdateConfiguration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SoftwareUpdateConfigurationCollectionItemProperties.
func (s *SoftwareUpdateConfigurationCollectionItemProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "frequency":
			err = unpopulate(val, &s.Frequency)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextRun":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.NextRun = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "tasks":
			err = unpopulate(val, &s.Tasks)
			delete(rawMsg, key)
		case "updateConfiguration":
			err = unpopulate(val, &s.UpdateConfiguration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SoftwareUpdateConfigurationListResult - result of listing all software update configuration
type SoftwareUpdateConfigurationListResult struct {
	// outer object returned when listing all software update configurations
	Value []*SoftwareUpdateConfigurationCollectionItem `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationListResult.
func (s SoftwareUpdateConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SoftwareUpdateConfigurationMachineRun - Software update configuration machine run model.
type SoftwareUpdateConfigurationMachineRun struct {
	// Software update configuration machine run properties.
	Properties *UpdateConfigurationMachineRunProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id of the software update configuration machine run
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the software update configuration machine run
	Name *string `json:"name,omitempty" azure:"ro"`
}

// SoftwareUpdateConfigurationMachineRunListResult - result of listing all software update configuration machine runs
type SoftwareUpdateConfigurationMachineRunListResult struct {
	// link to next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// outer object returned when listing all software update configuration machine runs
	Value []*SoftwareUpdateConfigurationMachineRun `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationMachineRunListResult.
func (s SoftwareUpdateConfigurationMachineRunListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SoftwareUpdateConfigurationMachineRunsGetByIDOptions contains the optional parameters for the SoftwareUpdateConfigurationMachineRuns.GetByID method.
type SoftwareUpdateConfigurationMachineRunsGetByIDOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// SoftwareUpdateConfigurationMachineRunsListOptions contains the optional parameters for the SoftwareUpdateConfigurationMachineRuns.List method.
type SoftwareUpdateConfigurationMachineRunsListOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
	// The filter to apply on the operation. You can use the following filters: 'properties/osType', 'properties/status', 'properties/startTime', and 'properties/softwareUpdateConfiguration/name'
	Filter *string
	// number of entries you skip before returning results
	Skip *string
	// Maximum number of entries returned in the results collection
	Top *string
}

// SoftwareUpdateConfigurationProperties - Software update configuration properties.
type SoftwareUpdateConfigurationProperties struct {
	// REQUIRED; Schedule information for the Software update configuration
	ScheduleInfo *SUCScheduleProperties `json:"scheduleInfo,omitempty"`

	// REQUIRED; update specific properties for the Software update configuration
	UpdateConfiguration *UpdateConfiguration `json:"updateConfiguration,omitempty"`

	// Details of provisioning error
	Error *ErrorResponse `json:"error,omitempty"`

	// Tasks information for the Software update configuration.
	Tasks *SoftwareUpdateConfigurationTasks `json:"tasks,omitempty"`

	// READ-ONLY; CreatedBy property, which only appears in the response.
	CreatedBy *string `json:"createdBy,omitempty" azure:"ro"`

	// READ-ONLY; Creation time of the resource, which only appears in the response.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; LastModifiedBy property, which only appears in the response.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// READ-ONLY; Last time resource was modified, which only appears in the response.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state for the software update configuration, which only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationProperties.
func (s SoftwareUpdateConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "error", s.Error)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "scheduleInfo", s.ScheduleInfo)
	populate(objectMap, "tasks", s.Tasks)
	populate(objectMap, "updateConfiguration", s.UpdateConfiguration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SoftwareUpdateConfigurationProperties.
func (s *SoftwareUpdateConfigurationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &s.Error)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "scheduleInfo":
			err = unpopulate(val, &s.ScheduleInfo)
			delete(rawMsg, key)
		case "tasks":
			err = unpopulate(val, &s.Tasks)
			delete(rawMsg, key)
		case "updateConfiguration":
			err = unpopulate(val, &s.UpdateConfiguration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SoftwareUpdateConfigurationRun - Software update configuration Run properties.
type SoftwareUpdateConfigurationRun struct {
	// Software update configuration Run properties.
	Properties *SoftwareUpdateConfigurationRunProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource Id of the software update configuration run
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the software update configuration run.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// SoftwareUpdateConfigurationRunListResult - result of listing all software update configuration runs
type SoftwareUpdateConfigurationRunListResult struct {
	// link to next page of results.
	NextLink *string `json:"nextLink,omitempty"`

	// outer object returned when listing all software update configuration runs
	Value []*SoftwareUpdateConfigurationRun `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationRunListResult.
func (s SoftwareUpdateConfigurationRunListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SoftwareUpdateConfigurationRunProperties - Software update configuration properties.
type SoftwareUpdateConfigurationRunProperties struct {
	// software update configuration triggered this run
	SoftwareUpdateConfiguration *UpdateConfigurationNavigation `json:"softwareUpdateConfiguration,omitempty"`

	// Software update configuration tasks triggered in this run
	Tasks *SoftwareUpdateConfigurationRunTasks `json:"tasks,omitempty"`

	// READ-ONLY; Number of computers in the software update configuration run.
	ComputerCount *int32 `json:"computerCount,omitempty" azure:"ro"`

	// READ-ONLY; Configured duration for the software update configuration run.
	ConfiguredDuration *string `json:"configuredDuration,omitempty" azure:"ro"`

	// READ-ONLY; CreatedBy property, which only appears in the response.
	CreatedBy *string `json:"createdBy,omitempty" azure:"ro"`

	// READ-ONLY; Creation time of the resource, which only appears in the response.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; End time of the software update configuration run.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Number of computers with failed status.
	FailedCount *int32 `json:"failedCount,omitempty" azure:"ro"`

	// READ-ONLY; LastModifiedBy property, which only appears in the response.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// READ-ONLY; Last time resource was modified, which only appears in the response.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Operating system target of the software update configuration triggered this run
	OSType *string `json:"osType,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the software update configuration run.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Status of the software update configuration run.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SoftwareUpdateConfigurationRunProperties.
func (s SoftwareUpdateConfigurationRunProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "computerCount", s.ComputerCount)
	populate(objectMap, "configuredDuration", s.ConfiguredDuration)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(s.EndTime))
	populate(objectMap, "failedCount", s.FailedCount)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "osType", s.OSType)
	populate(objectMap, "softwareUpdateConfiguration", s.SoftwareUpdateConfiguration)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "status", s.Status)
	populate(objectMap, "tasks", s.Tasks)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SoftwareUpdateConfigurationRunProperties.
func (s *SoftwareUpdateConfigurationRunProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "computerCount":
			err = unpopulate(val, &s.ComputerCount)
			delete(rawMsg, key)
		case "configuredDuration":
			err = unpopulate(val, &s.ConfiguredDuration)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "failedCount":
			err = unpopulate(val, &s.FailedCount)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &s.OSType)
			delete(rawMsg, key)
		case "softwareUpdateConfiguration":
			err = unpopulate(val, &s.SoftwareUpdateConfiguration)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "tasks":
			err = unpopulate(val, &s.Tasks)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SoftwareUpdateConfigurationRunTaskProperties - Task properties of the software update configuration.
type SoftwareUpdateConfigurationRunTaskProperties struct {
	// The job id of the task.
	JobID *string `json:"jobId,omitempty"`

	// The name of the source of the task.
	Source *string `json:"source,omitempty"`

	// The status of the task.
	Status *string `json:"status,omitempty"`
}

// SoftwareUpdateConfigurationRunTasks - Software update configuration run tasks model.
type SoftwareUpdateConfigurationRunTasks struct {
	// Post task properties.
	PostTask *SoftwareUpdateConfigurationRunTaskProperties `json:"postTask,omitempty"`

	// Pre task properties.
	PreTask *SoftwareUpdateConfigurationRunTaskProperties `json:"preTask,omitempty"`
}

// SoftwareUpdateConfigurationRunsGetByIDOptions contains the optional parameters for the SoftwareUpdateConfigurationRuns.GetByID method.
type SoftwareUpdateConfigurationRunsGetByIDOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// SoftwareUpdateConfigurationRunsListOptions contains the optional parameters for the SoftwareUpdateConfigurationRuns.List method.
type SoftwareUpdateConfigurationRunsListOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
	// The filter to apply on the operation. You can use the following filters: 'properties/osType', 'properties/status', 'properties/startTime', and 'properties/softwareUpdateConfiguration/name'
	Filter *string
	// Number of entries you skip before returning results
	Skip *string
	// Maximum number of entries returned in the results collection
	Top *string
}

// SoftwareUpdateConfigurationTasks - Task properties of the software update configuration.
type SoftwareUpdateConfigurationTasks struct {
	// Post task properties.
	PostTask *TaskProperties `json:"postTask,omitempty"`

	// Pre task properties.
	PreTask *TaskProperties `json:"preTask,omitempty"`
}

// SoftwareUpdateConfigurationsCreateOptions contains the optional parameters for the SoftwareUpdateConfigurations.Create method.
type SoftwareUpdateConfigurationsCreateOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// SoftwareUpdateConfigurationsDeleteOptions contains the optional parameters for the SoftwareUpdateConfigurations.Delete method.
type SoftwareUpdateConfigurationsDeleteOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// SoftwareUpdateConfigurationsGetByNameOptions contains the optional parameters for the SoftwareUpdateConfigurations.GetByName method.
type SoftwareUpdateConfigurationsGetByNameOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
}

// SoftwareUpdateConfigurationsListOptions contains the optional parameters for the SoftwareUpdateConfigurations.List method.
type SoftwareUpdateConfigurationsListOptions struct {
	// Identifies this specific client request.
	ClientRequestID *string
	// The filter to apply on the operation.
	Filter *string
}

// SourceControl - Definition of the source control.
type SourceControl struct {
	ProxyResource
	// The properties of the source control.
	Properties *SourceControlProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControl.
func (s SourceControl) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SourceControlCreateOrUpdateOptions contains the optional parameters for the SourceControl.CreateOrUpdate method.
type SourceControlCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SourceControlCreateOrUpdateParameters - The parameters supplied to the create or update source control operation.
type SourceControlCreateOrUpdateParameters struct {
	// REQUIRED; The properties of the source control.
	Properties *SourceControlCreateOrUpdateProperties `json:"properties,omitempty"`
}

// SourceControlCreateOrUpdateProperties - The properties of the create source control operation.
type SourceControlCreateOrUpdateProperties struct {
	// The auto async of the source control. Default is false.
	AutoSync *bool `json:"autoSync,omitempty"`

	// The repo branch of the source control. Include branch as empty string for VsoTfvc.
	Branch *string `json:"branch,omitempty"`

	// The user description of the source control.
	Description *string `json:"description,omitempty"`

	// The folder path of the source control. Path must be relative.
	FolderPath *string `json:"folderPath,omitempty"`

	// The auto publish of the source control. Default is true.
	PublishRunbook *bool `json:"publishRunbook,omitempty"`

	// The repo url of the source control.
	RepoURL *string `json:"repoUrl,omitempty"`

	// The authorization token for the repo of the source control.
	SecurityToken *SourceControlSecurityTokenProperties `json:"securityToken,omitempty"`

	// The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
	SourceType *SourceType `json:"sourceType,omitempty"`
}

// SourceControlDeleteOptions contains the optional parameters for the SourceControl.Delete method.
type SourceControlDeleteOptions struct {
	// placeholder for future optional parameters
}

// SourceControlGetOptions contains the optional parameters for the SourceControl.Get method.
type SourceControlGetOptions struct {
	// placeholder for future optional parameters
}

// SourceControlListByAutomationAccountOptions contains the optional parameters for the SourceControl.ListByAutomationAccount method.
type SourceControlListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// SourceControlListResult - The response model for the list source controls operation.
type SourceControlListResult struct {
	// The next link.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of source controls.
	Value []*SourceControl `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlListResult.
func (s SourceControlListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SourceControlProperties - Definition of the source control properties
type SourceControlProperties struct {
	// The auto sync of the source control. Default is false.
	AutoSync *bool `json:"autoSync,omitempty"`

	// The repo branch of the source control. Include branch as empty string for VsoTfvc.
	Branch *string `json:"branch,omitempty"`

	// The creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// The description.
	Description *string `json:"description,omitempty"`

	// The folder path of the source control.
	FolderPath *string `json:"folderPath,omitempty"`

	// The last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// The auto publish of the source control. Default is true.
	PublishRunbook *bool `json:"publishRunbook,omitempty"`

	// The repo url of the source control.
	RepoURL *string `json:"repoUrl,omitempty"`

	// The source type. Must be one of VsoGit, VsoTfvc, GitHub.
	SourceType *SourceType `json:"sourceType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlProperties.
func (s SourceControlProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoSync", s.AutoSync)
	populate(objectMap, "branch", s.Branch)
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "description", s.Description)
	populate(objectMap, "folderPath", s.FolderPath)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(s.LastModifiedTime))
	populate(objectMap, "publishRunbook", s.PublishRunbook)
	populate(objectMap, "repoUrl", s.RepoURL)
	populate(objectMap, "sourceType", s.SourceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlProperties.
func (s *SourceControlProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoSync":
			err = unpopulate(val, &s.AutoSync)
			delete(rawMsg, key)
		case "branch":
			err = unpopulate(val, &s.Branch)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "folderPath":
			err = unpopulate(val, &s.FolderPath)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "publishRunbook":
			err = unpopulate(val, &s.PublishRunbook)
			delete(rawMsg, key)
		case "repoUrl":
			err = unpopulate(val, &s.RepoURL)
			delete(rawMsg, key)
		case "sourceType":
			err = unpopulate(val, &s.SourceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type SourceControlSecurityTokenProperties struct {
	// The access token.
	AccessToken *string `json:"accessToken,omitempty"`

	// The refresh token.
	RefreshToken *string `json:"refreshToken,omitempty"`

	// The token type. Must be either PersonalAccessToken or Oauth.
	TokenType *TokenType `json:"tokenType,omitempty"`
}

// SourceControlSyncJob - Definition of the source control sync job.
type SourceControlSyncJob struct {
	// The properties of the source control sync job.
	Properties *SourceControlSyncJobProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SourceControlSyncJobByID - Definition of the source control sync job.
type SourceControlSyncJobByID struct {
	// The id of the job.
	ID *string `json:"id,omitempty"`

	// The properties of the source control sync job.
	Properties *SourceControlSyncJobByIDProperties `json:"properties,omitempty"`
}

// SourceControlSyncJobByIDProperties - Definition of source control sync job properties.
type SourceControlSyncJobByIDProperties struct {
	// The exceptions that occurred while running the sync job.
	Exception *string `json:"exception,omitempty"`

	// The provisioning state of the job.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty"`

	// The source control sync job id.
	SourceControlSyncJobID *string `json:"sourceControlSyncJobId,omitempty"`

	// The sync type.
	SyncType *SyncType `json:"syncType,omitempty"`

	// READ-ONLY; The creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; The end time of the job.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The start time of the job.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobByIDProperties.
func (s SourceControlSyncJobByIDProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(s.EndTime))
	populate(objectMap, "exception", s.Exception)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "sourceControlSyncJobId", s.SourceControlSyncJobID)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "syncType", s.SyncType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlSyncJobByIDProperties.
func (s *SourceControlSyncJobByIDProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "exception":
			err = unpopulate(val, &s.Exception)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "sourceControlSyncJobId":
			err = unpopulate(val, &s.SourceControlSyncJobID)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "syncType":
			err = unpopulate(val, &s.SyncType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SourceControlSyncJobCreateOptions contains the optional parameters for the SourceControlSyncJob.Create method.
type SourceControlSyncJobCreateOptions struct {
	// placeholder for future optional parameters
}

// SourceControlSyncJobCreateParameters - The parameters supplied to the create source control sync job operation.
type SourceControlSyncJobCreateParameters struct {
	// REQUIRED; The properties of the source control sync job.
	Properties *SourceControlSyncJobCreateProperties `json:"properties,omitempty"`
}

// SourceControlSyncJobCreateProperties - Definition of create source control sync job properties.
type SourceControlSyncJobCreateProperties struct {
	// REQUIRED; The commit id of the source control sync job. If not syncing to a commitId, enter an empty string.
	CommitID *string `json:"commitId,omitempty"`
}

// SourceControlSyncJobGetOptions contains the optional parameters for the SourceControlSyncJob.Get method.
type SourceControlSyncJobGetOptions struct {
	// placeholder for future optional parameters
}

// SourceControlSyncJobListByAutomationAccountOptions contains the optional parameters for the SourceControlSyncJob.ListByAutomationAccount method.
type SourceControlSyncJobListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// SourceControlSyncJobListResult - The response model for the list source control sync jobs operation.
type SourceControlSyncJobListResult struct {
	// The next link.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of source control sync jobs.
	Value []*SourceControlSyncJob `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobListResult.
func (s SourceControlSyncJobListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SourceControlSyncJobProperties - Definition of source control sync job properties.
type SourceControlSyncJobProperties struct {
	// The provisioning state of the job.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty"`

	// The source control sync job id.
	SourceControlSyncJobID *string `json:"sourceControlSyncJobId,omitempty"`

	// The sync type.
	SyncType *SyncType `json:"syncType,omitempty"`

	// READ-ONLY; The creation time of the job.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; The end time of the job.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The start time of the job.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobProperties.
func (s SourceControlSyncJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(s.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(s.EndTime))
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "sourceControlSyncJobId", s.SourceControlSyncJobID)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "syncType", s.SyncType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlSyncJobProperties.
func (s *SourceControlSyncJobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "sourceControlSyncJobId":
			err = unpopulate(val, &s.SourceControlSyncJobID)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "syncType":
			err = unpopulate(val, &s.SyncType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SourceControlSyncJobStream - Definition of the source control sync job stream.
type SourceControlSyncJobStream struct {
	// The properties of the source control sync job stream.
	Properties *SourceControlSyncJobStreamProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource id.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// SourceControlSyncJobStreamByID - Definition of the source control sync job stream by id.
type SourceControlSyncJobStreamByID struct {
	// The properties of the source control sync job stream.
	Properties *SourceControlSyncJobStreamByIDProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource id.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// SourceControlSyncJobStreamByIDProperties - Definition of source control sync job stream by id properties.
type SourceControlSyncJobStreamByIDProperties struct {
	// The sync job stream id.
	SourceControlSyncJobStreamID *string `json:"sourceControlSyncJobStreamId,omitempty"`

	// The text of the sync job stream.
	StreamText *string `json:"streamText,omitempty"`

	// The type of the sync job stream.
	StreamType *StreamType `json:"streamType,omitempty"`

	// The summary of the sync job stream.
	Summary *string `json:"summary,omitempty"`

	// The values of the job stream.
	Value map[string]map[string]interface{} `json:"value,omitempty"`

	// READ-ONLY; The time of the sync job stream.
	Time *time.Time `json:"time,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobStreamByIDProperties.
func (s SourceControlSyncJobStreamByIDProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "sourceControlSyncJobStreamId", s.SourceControlSyncJobStreamID)
	populate(objectMap, "streamText", s.StreamText)
	populate(objectMap, "streamType", s.StreamType)
	populate(objectMap, "summary", s.Summary)
	populate(objectMap, "time", (*timeRFC3339)(s.Time))
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlSyncJobStreamByIDProperties.
func (s *SourceControlSyncJobStreamByIDProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sourceControlSyncJobStreamId":
			err = unpopulate(val, &s.SourceControlSyncJobStreamID)
			delete(rawMsg, key)
		case "streamText":
			err = unpopulate(val, &s.StreamText)
			delete(rawMsg, key)
		case "streamType":
			err = unpopulate(val, &s.StreamType)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, &s.Summary)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &s.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SourceControlSyncJobStreamProperties - Definition of source control sync job stream properties.
type SourceControlSyncJobStreamProperties struct {
	// The sync job stream id.
	SourceControlSyncJobStreamID *string `json:"sourceControlSyncJobStreamId,omitempty"`

	// The type of the sync job stream.
	StreamType *StreamType `json:"streamType,omitempty"`

	// The summary of the sync job stream.
	Summary *string `json:"summary,omitempty"`

	// READ-ONLY; The time of the sync job stream.
	Time *time.Time `json:"time,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobStreamProperties.
func (s SourceControlSyncJobStreamProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "sourceControlSyncJobStreamId", s.SourceControlSyncJobStreamID)
	populate(objectMap, "streamType", s.StreamType)
	populate(objectMap, "summary", s.Summary)
	populate(objectMap, "time", (*timeRFC3339)(s.Time))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlSyncJobStreamProperties.
func (s *SourceControlSyncJobStreamProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "sourceControlSyncJobStreamId":
			err = unpopulate(val, &s.SourceControlSyncJobStreamID)
			delete(rawMsg, key)
		case "streamType":
			err = unpopulate(val, &s.StreamType)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, &s.Summary)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SourceControlSyncJobStreamsGetOptions contains the optional parameters for the SourceControlSyncJobStreams.Get method.
type SourceControlSyncJobStreamsGetOptions struct {
	// placeholder for future optional parameters
}

// SourceControlSyncJobStreamsListBySyncJob - The response model for the list source control sync job streams operation.
type SourceControlSyncJobStreamsListBySyncJob struct {
	// The list of source control sync job streams.
	Value []*SourceControlSyncJobStream `json:"value,omitempty"`

	// READ-ONLY; The next link.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlSyncJobStreamsListBySyncJob.
func (s SourceControlSyncJobStreamsListBySyncJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SourceControlSyncJobStreamsListBySyncJobOptions contains the optional parameters for the SourceControlSyncJobStreams.ListBySyncJob method.
type SourceControlSyncJobStreamsListBySyncJobOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// SourceControlUpdateOptions contains the optional parameters for the SourceControl.Update method.
type SourceControlUpdateOptions struct {
	// placeholder for future optional parameters
}

// SourceControlUpdateParameters - The parameters supplied to the update source control operation.
type SourceControlUpdateParameters struct {
	// The value of the source control.
	Properties *SourceControlUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlUpdateParameters.
func (s SourceControlUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SourceControlUpdateProperties - The properties of the update source control
type SourceControlUpdateProperties struct {
	// The auto sync of the source control. Default is false.
	AutoSync *bool `json:"autoSync,omitempty"`

	// The repo branch of the source control.
	Branch *string `json:"branch,omitempty"`

	// The user description of the source control.
	Description *string `json:"description,omitempty"`

	// The folder path of the source control. Path must be relative.
	FolderPath *string `json:"folderPath,omitempty"`

	// The auto publish of the source control. Default is true.
	PublishRunbook *bool `json:"publishRunbook,omitempty"`

	// The authorization token for the repo of the source control.
	SecurityToken *SourceControlSecurityTokenProperties `json:"securityToken,omitempty"`
}

// Statistics - Definition of the statistic.
type Statistics struct {
	// READ-ONLY; Gets the property value of the statistic.
	CounterProperty *string `json:"counterProperty,omitempty" azure:"ro"`

	// READ-ONLY; Gets the value of the statistic.
	CounterValue *int64 `json:"counterValue,omitempty" azure:"ro"`

	// READ-ONLY; Gets the endTime of the statistic.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Gets the startTime of the statistic.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Statistics.
func (s Statistics) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "counterProperty", s.CounterProperty)
	populate(objectMap, "counterValue", s.CounterValue)
	populate(objectMap, "endTime", (*timeRFC3339)(s.EndTime))
	populate(objectMap, "id", s.ID)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Statistics.
func (s *Statistics) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "counterProperty":
			err = unpopulate(val, &s.CounterProperty)
			delete(rawMsg, key)
		case "counterValue":
			err = unpopulate(val, &s.CounterValue)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StatisticsListByAutomationAccountOptions contains the optional parameters for the Statistics.ListByAutomationAccount method.
type StatisticsListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// StatisticsListResult - The response model for the list statistics operation.
type StatisticsListResult struct {
	// Gets or sets a list of statistics.
	Value []*Statistics `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StatisticsListResult.
func (s StatisticsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdAt", (*timeRFC3339)(s.CreatedAt))
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populate(objectMap, "lastModifiedAt", (*timeRFC3339)(s.LastModifiedAt))
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TagSettingsProperties - Tag filter information for the VM.
type TagSettingsProperties struct {
	// Filter VMs by Any or All specified tags.
	FilterOperator *TagOperators `json:"filterOperator,omitempty"`

	// Dictionary of tags with its list of values.
	Tags map[string][]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TagSettingsProperties.
func (t TagSettingsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filterOperator", t.FilterOperator)
	populate(objectMap, "tags", t.Tags)
	return json.Marshal(objectMap)
}

// TargetProperties - Group specific to the update configuration.
type TargetProperties struct {
	// List of Azure queries in the software update configuration.
	AzureQueries []*AzureQueryProperties `json:"azureQueries,omitempty"`

	// List of non Azure queries in the software update configuration.
	NonAzureQueries []*NonAzureQueryProperties `json:"nonAzureQueries,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetProperties.
func (t TargetProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureQueries", t.AzureQueries)
	populate(objectMap, "nonAzureQueries", t.NonAzureQueries)
	return json.Marshal(objectMap)
}

// TaskProperties - Task properties of the software update configuration.
type TaskProperties struct {
	// Gets or sets the parameters of the task.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the name of the runbook.
	Source *string `json:"source,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TaskProperties.
func (t TaskProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "parameters", t.Parameters)
	populate(objectMap, "source", t.Source)
	return json.Marshal(objectMap)
}

// TestJob - Definition of the test job.
type TestJob struct {
	// Gets or sets the creation time of the test job.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the end time of the test job.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Gets or sets the exception of the test job.
	Exception *string `json:"exception,omitempty"`

	// Gets or sets the last modified time of the test job.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the last status modified time of the test job.
	LastStatusModifiedTime *time.Time `json:"lastStatusModifiedTime,omitempty"`

	// The activity-level tracing options of the runbook.
	LogActivityTrace *int32 `json:"logActivityTrace,omitempty"`

	// Gets or sets the parameters of the test job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the start time of the test job.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Gets or sets the status of the test job.
	Status *string `json:"status,omitempty"`

	// Gets or sets the status details of the test job.
	StatusDetails *string `json:"statusDetails,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TestJob.
func (t TestJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(t.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(t.EndTime))
	populate(objectMap, "exception", t.Exception)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(t.LastModifiedTime))
	populate(objectMap, "lastStatusModifiedTime", (*timeRFC3339)(t.LastStatusModifiedTime))
	populate(objectMap, "logActivityTrace", t.LogActivityTrace)
	populate(objectMap, "parameters", t.Parameters)
	populate(objectMap, "runOn", t.RunOn)
	populate(objectMap, "startTime", (*timeRFC3339)(t.StartTime))
	populate(objectMap, "status", t.Status)
	populate(objectMap, "statusDetails", t.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TestJob.
func (t *TestJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "exception":
			err = unpopulate(val, &t.Exception)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastStatusModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.LastStatusModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "logActivityTrace":
			err = unpopulate(val, &t.LogActivityTrace)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &t.Parameters)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &t.RunOn)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &t.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &t.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TestJobCreateOptions contains the optional parameters for the TestJob.Create method.
type TestJobCreateOptions struct {
	// placeholder for future optional parameters
}

// TestJobCreateParameters - The parameters supplied to the create test job operation.
type TestJobCreateParameters struct {
	// Gets or sets the parameters of the test job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the runOn which specifies the group name where the job is to be executed.
	RunOn *string `json:"runOn,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TestJobCreateParameters.
func (t TestJobCreateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "parameters", t.Parameters)
	populate(objectMap, "runOn", t.RunOn)
	return json.Marshal(objectMap)
}

// TestJobGetOptions contains the optional parameters for the TestJob.Get method.
type TestJobGetOptions struct {
	// placeholder for future optional parameters
}

// TestJobResumeOptions contains the optional parameters for the TestJob.Resume method.
type TestJobResumeOptions struct {
	// placeholder for future optional parameters
}

// TestJobStopOptions contains the optional parameters for the TestJob.Stop method.
type TestJobStopOptions struct {
	// placeholder for future optional parameters
}

// TestJobStreamsGetOptions contains the optional parameters for the TestJobStreams.Get method.
type TestJobStreamsGetOptions struct {
	// placeholder for future optional parameters
}

// TestJobStreamsListByTestJobOptions contains the optional parameters for the TestJobStreams.ListByTestJob method.
type TestJobStreamsListByTestJobOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// TestJobSuspendOptions contains the optional parameters for the TestJob.Suspend method.
type TestJobSuspendOptions struct {
	// placeholder for future optional parameters
}

// TrackedResource - The resource model definition for a ARM tracked top level resource
type TrackedResource struct {
	Resource
	// The Azure Region where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// TypeField - Information about a field of a type.
type TypeField struct {
	// Gets or sets the name of the field.
	Name *string `json:"name,omitempty"`

	// Gets or sets the type of the field.
	Type *string `json:"type,omitempty"`
}

// TypeFieldListResult - The response model for the list fields operation.
type TypeFieldListResult struct {
	// Gets or sets a list of fields.
	Value []*TypeField `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TypeFieldListResult.
func (t TypeFieldListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// UpdateConfiguration - Update specific properties of the software update configuration.
type UpdateConfiguration struct {
	// REQUIRED; operating system of target machines
	OperatingSystem *OperatingSystemType `json:"operatingSystem,omitempty"`

	// List of azure resource Ids for azure virtual machines targeted by the software update configuration.
	AzureVirtualMachines []*string `json:"azureVirtualMachines,omitempty"`

	// Maximum time allowed for the software update configuration run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601
	Duration *string `json:"duration,omitempty"`

	// Linux specific update configuration.
	Linux *LinuxProperties `json:"linux,omitempty"`

	// List of names of non-azure machines targeted by the software update configuration.
	NonAzureComputerNames []*string `json:"nonAzureComputerNames,omitempty"`

	// Group targets for the software update configuration.
	Targets *TargetProperties `json:"targets,omitempty"`

	// Windows specific update configuration.
	Windows *WindowsProperties `json:"windows,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateConfiguration.
func (u UpdateConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureVirtualMachines", u.AzureVirtualMachines)
	populate(objectMap, "duration", u.Duration)
	populate(objectMap, "linux", u.Linux)
	populate(objectMap, "nonAzureComputerNames", u.NonAzureComputerNames)
	populate(objectMap, "operatingSystem", u.OperatingSystem)
	populate(objectMap, "targets", u.Targets)
	populate(objectMap, "windows", u.Windows)
	return json.Marshal(objectMap)
}

// UpdateConfigurationMachineRunProperties - Software update configuration machine run properties.
type UpdateConfigurationMachineRunProperties struct {
	// Details of provisioning error
	Error *ErrorResponse `json:"error,omitempty"`

	// Job associated with the software update configuration machine run
	Job *JobNavigation `json:"job,omitempty"`

	// software update configuration triggered this run
	SoftwareUpdateConfiguration *UpdateConfigurationNavigation `json:"softwareUpdateConfiguration,omitempty"`

	// READ-ONLY; configured duration for the software update configuration run.
	ConfiguredDuration *string `json:"configuredDuration,omitempty" azure:"ro"`

	// READ-ONLY; correlation id of the software update configuration machine run
	CorrelationID *string `json:"correlationId,omitempty" azure:"ro"`

	// READ-ONLY; createdBy property, which only appears in the response.
	CreatedBy *string `json:"createdBy,omitempty" azure:"ro"`

	// READ-ONLY; Creation time of the resource, which only appears in the response.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; End time of the software update configuration machine run.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; lastModifiedBy property, which only appears in the response.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// READ-ONLY; Last time resource was modified, which only appears in the response.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Operating system target of the software update configuration triggered this run
	OSType *string `json:"osType,omitempty" azure:"ro"`

	// READ-ONLY; source computer id of the software update configuration machine run
	SourceComputerID *string `json:"sourceComputerId,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the software update configuration machine run.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Status of the software update configuration machine run.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; name of the updated computer
	TargetComputer *string `json:"targetComputer,omitempty" azure:"ro"`

	// READ-ONLY; type of the updated computer.
	TargetComputerType *string `json:"targetComputerType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateConfigurationMachineRunProperties.
func (u UpdateConfigurationMachineRunProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configuredDuration", u.ConfiguredDuration)
	populate(objectMap, "correlationId", u.CorrelationID)
	populate(objectMap, "createdBy", u.CreatedBy)
	populate(objectMap, "creationTime", (*timeRFC3339)(u.CreationTime))
	populate(objectMap, "endTime", (*timeRFC3339)(u.EndTime))
	populate(objectMap, "error", u.Error)
	populate(objectMap, "job", u.Job)
	populate(objectMap, "lastModifiedBy", u.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(u.LastModifiedTime))
	populate(objectMap, "osType", u.OSType)
	populate(objectMap, "softwareUpdateConfiguration", u.SoftwareUpdateConfiguration)
	populate(objectMap, "sourceComputerId", u.SourceComputerID)
	populate(objectMap, "startTime", (*timeRFC3339)(u.StartTime))
	populate(objectMap, "status", u.Status)
	populate(objectMap, "targetComputer", u.TargetComputer)
	populate(objectMap, "targetComputerType", u.TargetComputerType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateConfigurationMachineRunProperties.
func (u *UpdateConfigurationMachineRunProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "configuredDuration":
			err = unpopulate(val, &u.ConfiguredDuration)
			delete(rawMsg, key)
		case "correlationId":
			err = unpopulate(val, &u.CorrelationID)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &u.CreatedBy)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &u.Error)
			delete(rawMsg, key)
		case "job":
			err = unpopulate(val, &u.Job)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &u.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &u.OSType)
			delete(rawMsg, key)
		case "softwareUpdateConfiguration":
			err = unpopulate(val, &u.SoftwareUpdateConfiguration)
			delete(rawMsg, key)
		case "sourceComputerId":
			err = unpopulate(val, &u.SourceComputerID)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &u.Status)
			delete(rawMsg, key)
		case "targetComputer":
			err = unpopulate(val, &u.TargetComputer)
			delete(rawMsg, key)
		case "targetComputerType":
			err = unpopulate(val, &u.TargetComputerType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UpdateConfigurationNavigation - Software update configuration Run Navigation model.
type UpdateConfigurationNavigation struct {
	// READ-ONLY; Name of the software update configuration triggered the software update configuration run
	Name *string `json:"name,omitempty" azure:"ro"`
}

// Usage - Definition of Usage.
type Usage struct {
	// Gets or sets the current usage value.
	CurrentValue *float64 `json:"currentValue,omitempty"`

	// Gets or sets the id of the resource.
	ID *string `json:"id,omitempty"`

	// Gets or sets max limit. -1 for unlimited
	Limit *int64 `json:"limit,omitempty"`

	// Gets or sets the usage counter name.
	Name *UsageCounterName `json:"name,omitempty"`

	// Gets or sets the throttle status.
	ThrottleStatus *string `json:"throttleStatus,omitempty"`

	// Gets or sets the usage unit name.
	Unit *string `json:"unit,omitempty"`
}

// UsageCounterName - Definition of usage counter name.
type UsageCounterName struct {
	// Gets or sets the localized usage counter name.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// Gets or sets the usage counter name.
	Value *string `json:"value,omitempty"`
}

// UsageListResult - The response model for the get usage operation.
type UsageListResult struct {
	// Gets or sets usage.
	Value []*Usage `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UsageListResult.
func (u UsageListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// UsagesListByAutomationAccountOptions contains the optional parameters for the Usages.ListByAutomationAccount method.
type UsagesListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// Variable - Definition of the variable.
type Variable struct {
	ProxyResource
	// Gets or sets the properties of the variable.
	Properties *VariableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Variable.
func (v Variable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VariableCreateOrUpdateOptions contains the optional parameters for the Variable.CreateOrUpdate method.
type VariableCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VariableCreateOrUpdateParameters - The parameters supplied to the create or update variable operation.
type VariableCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the properties of the variable.
	Properties *VariableCreateOrUpdateProperties `json:"properties,omitempty"`
}

// VariableCreateOrUpdateProperties - The properties of the create variable operation.
type VariableCreateOrUpdateProperties struct {
	// Gets or sets the description of the variable.
	Description *string `json:"description,omitempty"`

	// Gets or sets the encrypted flag of the variable.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`

	// Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
}

// VariableDeleteOptions contains the optional parameters for the Variable.Delete method.
type VariableDeleteOptions struct {
	// placeholder for future optional parameters
}

// VariableGetOptions contains the optional parameters for the Variable.Get method.
type VariableGetOptions struct {
	// placeholder for future optional parameters
}

// VariableListByAutomationAccountOptions contains the optional parameters for the Variable.ListByAutomationAccount method.
type VariableListByAutomationAccountOptions struct {
	// placeholder for future optional parameters
}

// VariableListResult - The response model for the list variables operation.
type VariableListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of variables.
	Value []*Variable `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VariableListResult.
func (v VariableListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VariableProperties - Definition of the variable properties
type VariableProperties struct {
	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the encrypted flag of the variable.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VariableProperties.
func (v VariableProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(v.CreationTime))
	populate(objectMap, "description", v.Description)
	populate(objectMap, "isEncrypted", v.IsEncrypted)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(v.LastModifiedTime))
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VariableProperties.
func (v *VariableProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &v.Description)
			delete(rawMsg, key)
		case "isEncrypted":
			err = unpopulate(val, &v.IsEncrypted)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			v.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &v.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// VariableUpdateOptions contains the optional parameters for the Variable.Update method.
type VariableUpdateOptions struct {
	// placeholder for future optional parameters
}

// VariableUpdateParameters - The parameters supplied to the update variable operation.
type VariableUpdateParameters struct {
	// Gets or sets the name of the variable.
	Name *string `json:"name,omitempty"`

	// Gets or sets the value of the variable.
	Properties *VariableUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VariableUpdateParameters.
func (v VariableUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VariableUpdateProperties - The properties of the update variable
type VariableUpdateProperties struct {
	// Gets or sets the description of the variable.
	Description *string `json:"description,omitempty"`

	// Gets or sets the value of the variable.
	Value *string `json:"value,omitempty"`
}

// Watcher - Definition of the watcher type.
type Watcher struct {
	Resource
	// Gets or sets the etag of the resource.
	Etag *string `json:"etag,omitempty"`

	// The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Gets or sets the watcher properties.
	Properties *WatcherProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Watcher.
func (w Watcher) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.Resource.marshalInternal(objectMap)
	populate(objectMap, "etag", w.Etag)
	populate(objectMap, "location", w.Location)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "tags", w.Tags)
	return json.Marshal(objectMap)
}

// WatcherCreateOrUpdateOptions contains the optional parameters for the Watcher.CreateOrUpdate method.
type WatcherCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// WatcherDeleteOptions contains the optional parameters for the Watcher.Delete method.
type WatcherDeleteOptions struct {
	// placeholder for future optional parameters
}

// WatcherGetOptions contains the optional parameters for the Watcher.Get method.
type WatcherGetOptions struct {
	// placeholder for future optional parameters
}

// WatcherListByAutomationAccountOptions contains the optional parameters for the Watcher.ListByAutomationAccount method.
type WatcherListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// WatcherListResult - The response model for the list watcher operation.
type WatcherListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of watchers.
	Value []*Watcher `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WatcherListResult.
func (w WatcherListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WatcherProperties - Definition of the watcher properties
type WatcherProperties struct {
	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds *int64 `json:"executionFrequencyInSeconds,omitempty"`

	// Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.
	ScriptName *string `json:"scriptName,omitempty"`

	// Gets or sets the parameters of the script.
	ScriptParameters map[string]*string `json:"scriptParameters,omitempty"`

	// Gets or sets the name of the hybrid worker group the watcher will run on.
	ScriptRunOn *string `json:"scriptRunOn,omitempty"`

	// READ-ONLY; Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; Details of the user who last modified the watcher.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; Gets the current status of the watcher.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WatcherProperties.
func (w WatcherProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(w.CreationTime))
	populate(objectMap, "description", w.Description)
	populate(objectMap, "executionFrequencyInSeconds", w.ExecutionFrequencyInSeconds)
	populate(objectMap, "lastModifiedBy", w.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(w.LastModifiedTime))
	populate(objectMap, "scriptName", w.ScriptName)
	populate(objectMap, "scriptParameters", w.ScriptParameters)
	populate(objectMap, "scriptRunOn", w.ScriptRunOn)
	populate(objectMap, "status", w.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WatcherProperties.
func (w *WatcherProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &w.Description)
			delete(rawMsg, key)
		case "executionFrequencyInSeconds":
			err = unpopulate(val, &w.ExecutionFrequencyInSeconds)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &w.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "scriptName":
			err = unpopulate(val, &w.ScriptName)
			delete(rawMsg, key)
		case "scriptParameters":
			err = unpopulate(val, &w.ScriptParameters)
			delete(rawMsg, key)
		case "scriptRunOn":
			err = unpopulate(val, &w.ScriptRunOn)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &w.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WatcherStartOptions contains the optional parameters for the Watcher.Start method.
type WatcherStartOptions struct {
	// placeholder for future optional parameters
}

// WatcherStopOptions contains the optional parameters for the Watcher.Stop method.
type WatcherStopOptions struct {
	// placeholder for future optional parameters
}

// WatcherUpdateOptions contains the optional parameters for the Watcher.Update method.
type WatcherUpdateOptions struct {
	// placeholder for future optional parameters
}

type WatcherUpdateParameters struct {
	// Gets or sets the name of the resource.
	Name *string `json:"name,omitempty"`

	// Gets or sets the watcher update properties.
	Properties *WatcherUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WatcherUpdateParameters.
func (w WatcherUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WatcherUpdateProperties - The properties of the update watcher operation.
type WatcherUpdateProperties struct {
	// Gets or sets the frequency at which the watcher is invoked.
	ExecutionFrequencyInSeconds *int64 `json:"executionFrequencyInSeconds,omitempty"`
}

// Webhook - Definition of the webhook type.
type Webhook struct {
	ProxyResource
	// Gets or sets the webhook properties.
	Properties *WebhookProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Webhook.
func (w Webhook) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WebhookCreateOrUpdateOptions contains the optional parameters for the Webhook.CreateOrUpdate method.
type WebhookCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// WebhookCreateOrUpdateParameters - The parameters supplied to the create or update webhook operation.
type WebhookCreateOrUpdateParameters struct {
	// REQUIRED; Gets or sets the name of the webhook.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Gets or sets the properties of the webhook.
	Properties *WebhookCreateOrUpdateProperties `json:"properties,omitempty"`
}

// WebhookCreateOrUpdateProperties - The properties of the create webhook operation.
type WebhookCreateOrUpdateProperties struct {
	// Gets or sets the expiry time.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`

	// Gets or sets the value of the enabled flag of webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the runbook.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`

	// Gets or sets the uri.
	URI *string `json:"uri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebhookCreateOrUpdateProperties.
func (w WebhookCreateOrUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "expiryTime", (*timeRFC3339)(w.ExpiryTime))
	populate(objectMap, "isEnabled", w.IsEnabled)
	populate(objectMap, "parameters", w.Parameters)
	populate(objectMap, "runOn", w.RunOn)
	populate(objectMap, "runbook", w.Runbook)
	populate(objectMap, "uri", w.URI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebhookCreateOrUpdateProperties.
func (w *WebhookCreateOrUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, &w.IsEnabled)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &w.Parameters)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &w.RunOn)
			delete(rawMsg, key)
		case "runbook":
			err = unpopulate(val, &w.Runbook)
			delete(rawMsg, key)
		case "uri":
			err = unpopulate(val, &w.URI)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WebhookDeleteOptions contains the optional parameters for the Webhook.Delete method.
type WebhookDeleteOptions struct {
	// placeholder for future optional parameters
}

// WebhookGenerateURIOptions contains the optional parameters for the Webhook.GenerateURI method.
type WebhookGenerateURIOptions struct {
	// placeholder for future optional parameters
}

// WebhookGetOptions contains the optional parameters for the Webhook.Get method.
type WebhookGetOptions struct {
	// placeholder for future optional parameters
}

// WebhookListByAutomationAccountOptions contains the optional parameters for the Webhook.ListByAutomationAccount method.
type WebhookListByAutomationAccountOptions struct {
	// The filter to apply on the operation.
	Filter *string
}

// WebhookListResult - The response model for the list webhook operation.
type WebhookListResult struct {
	// Gets or sets the next link.
	NextLink *string `json:"nextLink,omitempty"`

	// Gets or sets a list of webhooks.
	Value []*Webhook `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebhookListResult.
func (w WebhookListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebhookProperties - Definition of the webhook properties
type WebhookProperties struct {
	// Gets or sets the creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Gets or sets the description.
	Description *string `json:"description,omitempty"`

	// Gets or sets the expiry time.
	ExpiryTime *time.Time `json:"expiryTime,omitempty"`

	// Gets or sets the value of the enabled flag of the webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Gets or sets the last invoked time.
	LastInvokedTime *time.Time `json:"lastInvokedTime,omitempty"`

	// Details of the user who last modified the Webhook
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// Gets or sets the last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`

	// Gets or sets the parameters of the job that is created when the webhook calls the runbook it is associated with.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`

	// Gets or sets the runbook the webhook is associated with.
	Runbook *RunbookAssociationProperty `json:"runbook,omitempty"`

	// Gets or sets the webhook uri.
	URI *string `json:"uri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebhookProperties.
func (w WebhookProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationTime", (*timeRFC3339)(w.CreationTime))
	populate(objectMap, "description", w.Description)
	populate(objectMap, "expiryTime", (*timeRFC3339)(w.ExpiryTime))
	populate(objectMap, "isEnabled", w.IsEnabled)
	populate(objectMap, "lastInvokedTime", (*timeRFC3339)(w.LastInvokedTime))
	populate(objectMap, "lastModifiedBy", w.LastModifiedBy)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(w.LastModifiedTime))
	populate(objectMap, "parameters", w.Parameters)
	populate(objectMap, "runOn", w.RunOn)
	populate(objectMap, "runbook", w.Runbook)
	populate(objectMap, "uri", w.URI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebhookProperties.
func (w *WebhookProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &w.Description)
			delete(rawMsg, key)
		case "expiryTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.ExpiryTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "isEnabled":
			err = unpopulate(val, &w.IsEnabled)
			delete(rawMsg, key)
		case "lastInvokedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.LastInvokedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &w.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "parameters":
			err = unpopulate(val, &w.Parameters)
			delete(rawMsg, key)
		case "runOn":
			err = unpopulate(val, &w.RunOn)
			delete(rawMsg, key)
		case "runbook":
			err = unpopulate(val, &w.Runbook)
			delete(rawMsg, key)
		case "uri":
			err = unpopulate(val, &w.URI)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WebhookUpdateOptions contains the optional parameters for the Webhook.Update method.
type WebhookUpdateOptions struct {
	// placeholder for future optional parameters
}

// WebhookUpdateParameters - The parameters supplied to the update webhook operation.
type WebhookUpdateParameters struct {
	// Gets or sets the name of the webhook.
	Name *string `json:"name,omitempty"`

	// Gets or sets the value of the webhook.
	Properties *WebhookUpdateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebhookUpdateParameters.
func (w WebhookUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WebhookUpdateProperties - The properties of the update webhook.
type WebhookUpdateProperties struct {
	// Gets or sets the description of the webhook.
	Description *string `json:"description,omitempty"`

	// Gets or sets the value of the enabled flag of webhook.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// Gets or sets the parameters of the job.
	Parameters map[string]*string `json:"parameters,omitempty"`

	// Gets or sets the name of the hybrid worker group the webhook job will run on.
	RunOn *string `json:"runOn,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebhookUpdateProperties.
func (w WebhookUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", w.Description)
	populate(objectMap, "isEnabled", w.IsEnabled)
	populate(objectMap, "parameters", w.Parameters)
	populate(objectMap, "runOn", w.RunOn)
	return json.Marshal(objectMap)
}

// WindowsProperties - Windows specific update configuration.
type WindowsProperties struct {
	// KB numbers excluded from the software update configuration.
	ExcludedKbNumbers []*string `json:"excludedKbNumbers,omitempty"`

	// KB numbers included from the software update configuration.
	IncludedKbNumbers []*string `json:"includedKbNumbers,omitempty"`

	// Update classification included in the software update configuration. A comma separated string with required values
	IncludedUpdateClassifications *WindowsUpdateClasses `json:"includedUpdateClassifications,omitempty"`

	// Reboot setting for the software update configuration.
	RebootSetting *string `json:"rebootSetting,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WindowsProperties.
func (w WindowsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "excludedKbNumbers", w.ExcludedKbNumbers)
	populate(objectMap, "includedKbNumbers", w.IncludedKbNumbers)
	populate(objectMap, "includedUpdateClassifications", w.IncludedUpdateClassifications)
	populate(objectMap, "rebootSetting", w.RebootSetting)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
