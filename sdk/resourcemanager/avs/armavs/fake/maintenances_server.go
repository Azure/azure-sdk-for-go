// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/avs/armavs/v2"
	"net/http"
	"net/url"
	"regexp"
	"time"
)

// MaintenancesServer is a fake server for instances of the armavs.MaintenancesClient type.
type MaintenancesServer struct {
	// Get is the fake for method MaintenancesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, options *armavs.MaintenancesClientGetOptions) (resp azfake.Responder[armavs.MaintenancesClientGetResponse], errResp azfake.ErrorResponder)

	// InitiateChecks is the fake for method MaintenancesClient.InitiateChecks
	// HTTP status codes to indicate success: http.StatusOK
	InitiateChecks func(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, options *armavs.MaintenancesClientInitiateChecksOptions) (resp azfake.Responder[armavs.MaintenancesClientInitiateChecksResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method MaintenancesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, privateCloudName string, options *armavs.MaintenancesClientListOptions) (resp azfake.PagerResponder[armavs.MaintenancesClientListResponse])

	// Reschedule is the fake for method MaintenancesClient.Reschedule
	// HTTP status codes to indicate success: http.StatusOK
	Reschedule func(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body armavs.MaintenanceReschedule, options *armavs.MaintenancesClientRescheduleOptions) (resp azfake.Responder[armavs.MaintenancesClientRescheduleResponse], errResp azfake.ErrorResponder)

	// Schedule is the fake for method MaintenancesClient.Schedule
	// HTTP status codes to indicate success: http.StatusOK
	Schedule func(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body armavs.MaintenanceSchedule, options *armavs.MaintenancesClientScheduleOptions) (resp azfake.Responder[armavs.MaintenancesClientScheduleResponse], errResp azfake.ErrorResponder)
}

// NewMaintenancesServerTransport creates a new instance of MaintenancesServerTransport with the provided implementation.
// The returned MaintenancesServerTransport instance is connected to an instance of armavs.MaintenancesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMaintenancesServerTransport(srv *MaintenancesServer) *MaintenancesServerTransport {
	return &MaintenancesServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armavs.MaintenancesClientListResponse]](),
	}
}

// MaintenancesServerTransport connects instances of armavs.MaintenancesClient to instances of MaintenancesServer.
// Don't use this type directly, use NewMaintenancesServerTransport instead.
type MaintenancesServerTransport struct {
	srv          *MaintenancesServer
	newListPager *tracker[azfake.PagerResponder[armavs.MaintenancesClientListResponse]]
}

// Do implements the policy.Transporter interface for MaintenancesServerTransport.
func (m *MaintenancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MaintenancesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if maintenancesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = maintenancesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MaintenancesClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "MaintenancesClient.InitiateChecks":
				res.resp, res.err = m.dispatchInitiateChecks(req)
			case "MaintenancesClient.NewListPager":
				res.resp, res.err = m.dispatchNewListPager(req)
			case "MaintenancesClient.Reschedule":
				res.resp, res.err = m.dispatchReschedule(req)
			case "MaintenancesClient.Schedule":
				res.resp, res.err = m.dispatchSchedule(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MaintenancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/maintenances/(?P<maintenanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	maintenanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("maintenanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), resourceGroupNameParam, privateCloudNameParam, maintenanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Maintenance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MaintenancesServerTransport) dispatchInitiateChecks(req *http.Request) (*http.Response, error) {
	if m.srv.InitiateChecks == nil {
		return nil, &nonRetriableError{errors.New("fake for method InitiateChecks not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/maintenances/(?P<maintenanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/initiateChecks`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	maintenanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("maintenanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.InitiateChecks(req.Context(), resourceGroupNameParam, privateCloudNameParam, maintenanceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Maintenance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MaintenancesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := m.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/maintenances`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
		if err != nil {
			return nil, err
		}
		stateNameUnescaped, err := url.QueryUnescape(qp.Get("stateName"))
		if err != nil {
			return nil, err
		}
		stateNameParam := getOptional(armavs.MaintenanceStateName(stateNameUnescaped))
		statusUnescaped, err := url.QueryUnescape(qp.Get("status"))
		if err != nil {
			return nil, err
		}
		statusParam := getOptional(armavs.MaintenanceStatusFilter(statusUnescaped))
		fromUnescaped, err := url.QueryUnescape(qp.Get("from"))
		if err != nil {
			return nil, err
		}
		fromParam, err := parseOptional(fromUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		toUnescaped, err := url.QueryUnescape(qp.Get("to"))
		if err != nil {
			return nil, err
		}
		toParam, err := parseOptional(toUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		var options *armavs.MaintenancesClientListOptions
		if stateNameParam != nil || statusParam != nil || fromParam != nil || toParam != nil {
			options = &armavs.MaintenancesClientListOptions{
				StateName: stateNameParam,
				Status:    statusParam,
				From:      fromParam,
				To:        toParam,
			}
		}
		resp := m.srv.NewListPager(resourceGroupNameParam, privateCloudNameParam, options)
		newListPager = &resp
		m.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armavs.MaintenancesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		m.newListPager.remove(req)
	}
	return resp, nil
}

func (m *MaintenancesServerTransport) dispatchReschedule(req *http.Request) (*http.Response, error) {
	if m.srv.Reschedule == nil {
		return nil, &nonRetriableError{errors.New("fake for method Reschedule not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/maintenances/(?P<maintenanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reschedule`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armavs.MaintenanceReschedule](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	maintenanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("maintenanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Reschedule(req.Context(), resourceGroupNameParam, privateCloudNameParam, maintenanceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Maintenance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MaintenancesServerTransport) dispatchSchedule(req *http.Request) (*http.Response, error) {
	if m.srv.Schedule == nil {
		return nil, &nonRetriableError{errors.New("fake for method Schedule not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AVS/privateClouds/(?P<privateCloudName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/maintenances/(?P<maintenanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/schedule`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armavs.MaintenanceSchedule](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	privateCloudNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("privateCloudName")])
	if err != nil {
		return nil, err
	}
	maintenanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("maintenanceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Schedule(req.Context(), resourceGroupNameParam, privateCloudNameParam, maintenanceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Maintenance, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MaintenancesServerTransport
var maintenancesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
