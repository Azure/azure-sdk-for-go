// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armavs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// MaintenancesClient contains the methods for the Maintenances group.
// Don't use this type directly, use NewMaintenancesClient() instead.
type MaintenancesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMaintenancesClient creates a new instance of MaintenancesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewMaintenancesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MaintenancesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MaintenancesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a Maintenance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - maintenanceName - Name of the maintenance
//   - options - MaintenancesClientGetOptions contains the optional parameters for the MaintenancesClient.Get method.
func (client *MaintenancesClient) Get(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, options *MaintenancesClientGetOptions) (MaintenancesClientGetResponse, error) {
	var err error
	const operationName = "MaintenancesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, privateCloudName, maintenanceName, options)
	if err != nil {
		return MaintenancesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MaintenancesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MaintenancesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *MaintenancesClient) getCreateRequest(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, _ *MaintenancesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if maintenanceName == "" {
		return nil, errors.New("parameter maintenanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{maintenanceName}", url.PathEscape(maintenanceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MaintenancesClient) getHandleResponse(resp *http.Response) (MaintenancesClientGetResponse, error) {
	result := MaintenancesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Maintenance); err != nil {
		return MaintenancesClientGetResponse{}, err
	}
	return result, nil
}

// InitiateChecks - Initiate maintenance readiness checks
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - maintenanceName - Name of the maintenance
//   - options - MaintenancesClientInitiateChecksOptions contains the optional parameters for the MaintenancesClient.InitiateChecks
//     method.
func (client *MaintenancesClient) InitiateChecks(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, options *MaintenancesClientInitiateChecksOptions) (MaintenancesClientInitiateChecksResponse, error) {
	var err error
	const operationName = "MaintenancesClient.InitiateChecks"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.initiateChecksCreateRequest(ctx, resourceGroupName, privateCloudName, maintenanceName, options)
	if err != nil {
		return MaintenancesClientInitiateChecksResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MaintenancesClientInitiateChecksResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MaintenancesClientInitiateChecksResponse{}, err
	}
	resp, err := client.initiateChecksHandleResponse(httpResp)
	return resp, err
}

// initiateChecksCreateRequest creates the InitiateChecks request.
func (client *MaintenancesClient) initiateChecksCreateRequest(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, _ *MaintenancesClientInitiateChecksOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/initiateChecks"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if maintenanceName == "" {
		return nil, errors.New("parameter maintenanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{maintenanceName}", url.PathEscape(maintenanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// initiateChecksHandleResponse handles the InitiateChecks response.
func (client *MaintenancesClient) initiateChecksHandleResponse(resp *http.Response) (MaintenancesClientInitiateChecksResponse, error) {
	result := MaintenancesClientInitiateChecksResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Maintenance); err != nil {
		return MaintenancesClientInitiateChecksResponse{}, err
	}
	return result, nil
}

// NewListPager - List Maintenance resources by subscription ID
//
// Generated from API version 2025-09-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - options - MaintenancesClientListOptions contains the optional parameters for the MaintenancesClient.NewListPager method.
func (client *MaintenancesClient) NewListPager(resourceGroupName string, privateCloudName string, options *MaintenancesClientListOptions) *runtime.Pager[MaintenancesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[MaintenancesClientListResponse]{
		More: func(page MaintenancesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MaintenancesClientListResponse) (MaintenancesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MaintenancesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, privateCloudName, options)
			}, nil)
			if err != nil {
				return MaintenancesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *MaintenancesClient) listCreateRequest(ctx context.Context, resourceGroupName string, privateCloudName string, options *MaintenancesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	if options != nil && options.From != nil {
		reqQP.Set("from", options.From.Format(time.RFC3339Nano))
	}
	if options != nil && options.StateName != nil {
		reqQP.Set("stateName", string(*options.StateName))
	}
	if options != nil && options.Status != nil {
		reqQP.Set("status", string(*options.Status))
	}
	if options != nil && options.To != nil {
		reqQP.Set("to", options.To.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MaintenancesClient) listHandleResponse(resp *http.Response) (MaintenancesClientListResponse, error) {
	result := MaintenancesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MaintenanceListResult); err != nil {
		return MaintenancesClientListResponse{}, err
	}
	return result, nil
}

// Reschedule - Reschedule a maintenance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - maintenanceName - Name of the maintenance
//   - body - The content of the action request
//   - options - MaintenancesClientRescheduleOptions contains the optional parameters for the MaintenancesClient.Reschedule method.
func (client *MaintenancesClient) Reschedule(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body MaintenanceReschedule, options *MaintenancesClientRescheduleOptions) (MaintenancesClientRescheduleResponse, error) {
	var err error
	const operationName = "MaintenancesClient.Reschedule"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.rescheduleCreateRequest(ctx, resourceGroupName, privateCloudName, maintenanceName, body, options)
	if err != nil {
		return MaintenancesClientRescheduleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MaintenancesClientRescheduleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MaintenancesClientRescheduleResponse{}, err
	}
	resp, err := client.rescheduleHandleResponse(httpResp)
	return resp, err
}

// rescheduleCreateRequest creates the Reschedule request.
func (client *MaintenancesClient) rescheduleCreateRequest(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body MaintenanceReschedule, _ *MaintenancesClientRescheduleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/reschedule"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if maintenanceName == "" {
		return nil, errors.New("parameter maintenanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{maintenanceName}", url.PathEscape(maintenanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// rescheduleHandleResponse handles the Reschedule response.
func (client *MaintenancesClient) rescheduleHandleResponse(resp *http.Response) (MaintenancesClientRescheduleResponse, error) {
	result := MaintenancesClientRescheduleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Maintenance); err != nil {
		return MaintenancesClientRescheduleResponse{}, err
	}
	return result, nil
}

// Schedule - Schedule a maintenance
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - privateCloudName - Name of the private cloud
//   - maintenanceName - Name of the maintenance
//   - body - The content of the action request
//   - options - MaintenancesClientScheduleOptions contains the optional parameters for the MaintenancesClient.Schedule method.
func (client *MaintenancesClient) Schedule(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body MaintenanceSchedule, options *MaintenancesClientScheduleOptions) (MaintenancesClientScheduleResponse, error) {
	var err error
	const operationName = "MaintenancesClient.Schedule"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.scheduleCreateRequest(ctx, resourceGroupName, privateCloudName, maintenanceName, body, options)
	if err != nil {
		return MaintenancesClientScheduleResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MaintenancesClientScheduleResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MaintenancesClientScheduleResponse{}, err
	}
	resp, err := client.scheduleHandleResponse(httpResp)
	return resp, err
}

// scheduleCreateRequest creates the Schedule request.
func (client *MaintenancesClient) scheduleCreateRequest(ctx context.Context, resourceGroupName string, privateCloudName string, maintenanceName string, body MaintenanceSchedule, _ *MaintenancesClientScheduleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/maintenances/{maintenanceName}/schedule"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if privateCloudName == "" {
		return nil, errors.New("parameter privateCloudName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateCloudName}", url.PathEscape(privateCloudName))
	if maintenanceName == "" {
		return nil, errors.New("parameter maintenanceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{maintenanceName}", url.PathEscape(maintenanceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// scheduleHandleResponse handles the Schedule response.
func (client *MaintenancesClient) scheduleHandleResponse(resp *http.Response) (MaintenancesClientScheduleResponse, error) {
	result := MaintenancesClientScheduleResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Maintenance); err != nil {
		return MaintenancesClientScheduleResponse{}, err
	}
	return result, nil
}
