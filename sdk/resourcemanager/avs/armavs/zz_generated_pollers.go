//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// AddonsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type AddonsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AddonsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AddonsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AddonsClientCreateOrUpdateResponse will be returned.
func (p *AddonsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (AddonsClientCreateOrUpdateResponse, error) {
	respType := AddonsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Addon)
	if err != nil {
		return AddonsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AddonsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// AddonsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type AddonsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AddonsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AddonsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AddonsClientDeleteResponse will be returned.
func (p *AddonsClientDeletePoller) FinalResponse(ctx context.Context) (AddonsClientDeleteResponse, error) {
	respType := AddonsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AddonsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AddonsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// AuthorizationsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type AuthorizationsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AuthorizationsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AuthorizationsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AuthorizationsClientCreateOrUpdateResponse will be returned.
func (p *AuthorizationsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (AuthorizationsClientCreateOrUpdateResponse, error) {
	respType := AuthorizationsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ExpressRouteAuthorization)
	if err != nil {
		return AuthorizationsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AuthorizationsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// AuthorizationsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type AuthorizationsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AuthorizationsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AuthorizationsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AuthorizationsClientDeleteResponse will be returned.
func (p *AuthorizationsClientDeletePoller) FinalResponse(ctx context.Context) (AuthorizationsClientDeleteResponse, error) {
	respType := AuthorizationsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AuthorizationsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AuthorizationsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// CloudLinksClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type CloudLinksClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *CloudLinksClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *CloudLinksClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final CloudLinksClientCreateOrUpdateResponse will be returned.
func (p *CloudLinksClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (CloudLinksClientCreateOrUpdateResponse, error) {
	respType := CloudLinksClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.CloudLink)
	if err != nil {
		return CloudLinksClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *CloudLinksClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// CloudLinksClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type CloudLinksClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *CloudLinksClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *CloudLinksClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final CloudLinksClientDeleteResponse will be returned.
func (p *CloudLinksClientDeletePoller) FinalResponse(ctx context.Context) (CloudLinksClientDeleteResponse, error) {
	respType := CloudLinksClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return CloudLinksClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *CloudLinksClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ClustersClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ClustersClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ClustersClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ClustersClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ClustersClientCreateOrUpdateResponse will be returned.
func (p *ClustersClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ClustersClientCreateOrUpdateResponse, error) {
	respType := ClustersClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Cluster)
	if err != nil {
		return ClustersClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ClustersClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ClustersClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ClustersClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ClustersClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ClustersClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ClustersClientDeleteResponse will be returned.
func (p *ClustersClientDeletePoller) FinalResponse(ctx context.Context) (ClustersClientDeleteResponse, error) {
	respType := ClustersClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ClustersClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ClustersClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ClustersClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ClustersClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ClustersClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ClustersClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ClustersClientUpdateResponse will be returned.
func (p *ClustersClientUpdatePoller) FinalResponse(ctx context.Context) (ClustersClientUpdateResponse, error) {
	respType := ClustersClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Cluster)
	if err != nil {
		return ClustersClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ClustersClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DatastoresClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type DatastoresClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DatastoresClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DatastoresClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DatastoresClientCreateOrUpdateResponse will be returned.
func (p *DatastoresClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (DatastoresClientCreateOrUpdateResponse, error) {
	respType := DatastoresClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Datastore)
	if err != nil {
		return DatastoresClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DatastoresClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// DatastoresClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type DatastoresClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *DatastoresClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *DatastoresClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final DatastoresClientDeleteResponse will be returned.
func (p *DatastoresClientDeletePoller) FinalResponse(ctx context.Context) (DatastoresClientDeleteResponse, error) {
	respType := DatastoresClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return DatastoresClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *DatastoresClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// GlobalReachConnectionsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type GlobalReachConnectionsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *GlobalReachConnectionsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *GlobalReachConnectionsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final GlobalReachConnectionsClientCreateOrUpdateResponse will be returned.
func (p *GlobalReachConnectionsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (GlobalReachConnectionsClientCreateOrUpdateResponse, error) {
	respType := GlobalReachConnectionsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.GlobalReachConnection)
	if err != nil {
		return GlobalReachConnectionsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *GlobalReachConnectionsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// GlobalReachConnectionsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type GlobalReachConnectionsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *GlobalReachConnectionsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *GlobalReachConnectionsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final GlobalReachConnectionsClientDeleteResponse will be returned.
func (p *GlobalReachConnectionsClientDeletePoller) FinalResponse(ctx context.Context) (GlobalReachConnectionsClientDeleteResponse, error) {
	respType := GlobalReachConnectionsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return GlobalReachConnectionsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *GlobalReachConnectionsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PlacementPoliciesClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PlacementPoliciesClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PlacementPoliciesClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PlacementPoliciesClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PlacementPoliciesClientCreateOrUpdateResponse will be returned.
func (p *PlacementPoliciesClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (PlacementPoliciesClientCreateOrUpdateResponse, error) {
	respType := PlacementPoliciesClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PlacementPolicy)
	if err != nil {
		return PlacementPoliciesClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PlacementPoliciesClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PlacementPoliciesClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type PlacementPoliciesClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PlacementPoliciesClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PlacementPoliciesClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PlacementPoliciesClientDeleteResponse will be returned.
func (p *PlacementPoliciesClientDeletePoller) FinalResponse(ctx context.Context) (PlacementPoliciesClientDeleteResponse, error) {
	respType := PlacementPoliciesClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PlacementPoliciesClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PlacementPoliciesClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PlacementPoliciesClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PlacementPoliciesClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PlacementPoliciesClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PlacementPoliciesClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PlacementPoliciesClientUpdateResponse will be returned.
func (p *PlacementPoliciesClientUpdatePoller) FinalResponse(ctx context.Context) (PlacementPoliciesClientUpdateResponse, error) {
	respType := PlacementPoliciesClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PlacementPolicy)
	if err != nil {
		return PlacementPoliciesClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PlacementPoliciesClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PrivateCloudsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PrivateCloudsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PrivateCloudsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PrivateCloudsClientCreateOrUpdateResponse will be returned.
func (p *PrivateCloudsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (PrivateCloudsClientCreateOrUpdateResponse, error) {
	respType := PrivateCloudsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PrivateCloud)
	if err != nil {
		return PrivateCloudsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PrivateCloudsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PrivateCloudsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PrivateCloudsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PrivateCloudsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PrivateCloudsClientDeleteResponse will be returned.
func (p *PrivateCloudsClientDeletePoller) FinalResponse(ctx context.Context) (PrivateCloudsClientDeleteResponse, error) {
	respType := PrivateCloudsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PrivateCloudsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PrivateCloudsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PrivateCloudsClientRotateNsxtPasswordPoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudsClientRotateNsxtPasswordPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PrivateCloudsClientRotateNsxtPasswordPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PrivateCloudsClientRotateNsxtPasswordPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PrivateCloudsClientRotateNsxtPasswordResponse will be returned.
func (p *PrivateCloudsClientRotateNsxtPasswordPoller) FinalResponse(ctx context.Context) (PrivateCloudsClientRotateNsxtPasswordResponse, error) {
	respType := PrivateCloudsClientRotateNsxtPasswordResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PrivateCloudsClientRotateNsxtPasswordResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PrivateCloudsClientRotateNsxtPasswordPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PrivateCloudsClientRotateVcenterPasswordPoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudsClientRotateVcenterPasswordPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PrivateCloudsClientRotateVcenterPasswordPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PrivateCloudsClientRotateVcenterPasswordPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PrivateCloudsClientRotateVcenterPasswordResponse will be returned.
func (p *PrivateCloudsClientRotateVcenterPasswordPoller) FinalResponse(ctx context.Context) (PrivateCloudsClientRotateVcenterPasswordResponse, error) {
	respType := PrivateCloudsClientRotateVcenterPasswordResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return PrivateCloudsClientRotateVcenterPasswordResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PrivateCloudsClientRotateVcenterPasswordPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// PrivateCloudsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *PrivateCloudsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *PrivateCloudsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final PrivateCloudsClientUpdateResponse will be returned.
func (p *PrivateCloudsClientUpdatePoller) FinalResponse(ctx context.Context) (PrivateCloudsClientUpdateResponse, error) {
	respType := PrivateCloudsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.PrivateCloud)
	if err != nil {
		return PrivateCloudsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *PrivateCloudsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ScriptExecutionsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ScriptExecutionsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ScriptExecutionsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ScriptExecutionsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ScriptExecutionsClientCreateOrUpdateResponse will be returned.
func (p *ScriptExecutionsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ScriptExecutionsClientCreateOrUpdateResponse, error) {
	respType := ScriptExecutionsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ScriptExecution)
	if err != nil {
		return ScriptExecutionsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ScriptExecutionsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ScriptExecutionsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ScriptExecutionsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ScriptExecutionsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ScriptExecutionsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ScriptExecutionsClientDeleteResponse will be returned.
func (p *ScriptExecutionsClientDeletePoller) FinalResponse(ctx context.Context) (ScriptExecutionsClientDeleteResponse, error) {
	respType := ScriptExecutionsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ScriptExecutionsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ScriptExecutionsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// VirtualMachinesClientRestrictMovementPoller provides polling facilities until the operation reaches a terminal state.
type VirtualMachinesClientRestrictMovementPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *VirtualMachinesClientRestrictMovementPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *VirtualMachinesClientRestrictMovementPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final VirtualMachinesClientRestrictMovementResponse will be returned.
func (p *VirtualMachinesClientRestrictMovementPoller) FinalResponse(ctx context.Context) (VirtualMachinesClientRestrictMovementResponse, error) {
	respType := VirtualMachinesClientRestrictMovementResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return VirtualMachinesClientRestrictMovementResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *VirtualMachinesClientRestrictMovementPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreateDNSServicePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreateDNSServicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreateDNSServicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreateDNSServicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreateDNSServiceResponse will be returned.
func (p *WorkloadNetworksClientCreateDNSServicePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreateDNSServiceResponse, error) {
	respType := WorkloadNetworksClientCreateDNSServiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDNSService)
	if err != nil {
		return WorkloadNetworksClientCreateDNSServiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreateDNSServicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreateDNSZonePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreateDNSZonePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreateDNSZonePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreateDNSZonePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreateDNSZoneResponse will be returned.
func (p *WorkloadNetworksClientCreateDNSZonePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreateDNSZoneResponse, error) {
	respType := WorkloadNetworksClientCreateDNSZoneResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDNSZone)
	if err != nil {
		return WorkloadNetworksClientCreateDNSZoneResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreateDNSZonePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreateDhcpPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreateDhcpPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreateDhcpPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreateDhcpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreateDhcpResponse will be returned.
func (p *WorkloadNetworksClientCreateDhcpPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreateDhcpResponse, error) {
	respType := WorkloadNetworksClientCreateDhcpResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDhcp)
	if err != nil {
		return WorkloadNetworksClientCreateDhcpResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreateDhcpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreatePortMirroringPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreatePortMirroringPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreatePortMirroringPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreatePortMirroringPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreatePortMirroringResponse will be returned.
func (p *WorkloadNetworksClientCreatePortMirroringPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreatePortMirroringResponse, error) {
	respType := WorkloadNetworksClientCreatePortMirroringResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return WorkloadNetworksClientCreatePortMirroringResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreatePortMirroringPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreatePublicIPPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreatePublicIPPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreatePublicIPPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreatePublicIPPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreatePublicIPResponse will be returned.
func (p *WorkloadNetworksClientCreatePublicIPPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreatePublicIPResponse, error) {
	respType := WorkloadNetworksClientCreatePublicIPResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkPublicIP)
	if err != nil {
		return WorkloadNetworksClientCreatePublicIPResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreatePublicIPPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreateSegmentsPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreateSegmentsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreateSegmentsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreateSegmentsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreateSegmentsResponse will be returned.
func (p *WorkloadNetworksClientCreateSegmentsPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreateSegmentsResponse, error) {
	respType := WorkloadNetworksClientCreateSegmentsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkSegment)
	if err != nil {
		return WorkloadNetworksClientCreateSegmentsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreateSegmentsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientCreateVMGroupPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientCreateVMGroupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientCreateVMGroupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientCreateVMGroupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientCreateVMGroupResponse will be returned.
func (p *WorkloadNetworksClientCreateVMGroupPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientCreateVMGroupResponse, error) {
	respType := WorkloadNetworksClientCreateVMGroupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkVMGroup)
	if err != nil {
		return WorkloadNetworksClientCreateVMGroupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientCreateVMGroupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeleteDNSServicePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeleteDNSServicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeleteDNSServicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeleteDNSServicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeleteDNSServiceResponse will be returned.
func (p *WorkloadNetworksClientDeleteDNSServicePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeleteDNSServiceResponse, error) {
	respType := WorkloadNetworksClientDeleteDNSServiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeleteDNSServiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeleteDNSServicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeleteDNSZonePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeleteDNSZonePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeleteDNSZonePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeleteDNSZonePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeleteDNSZoneResponse will be returned.
func (p *WorkloadNetworksClientDeleteDNSZonePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeleteDNSZoneResponse, error) {
	respType := WorkloadNetworksClientDeleteDNSZoneResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeleteDNSZoneResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeleteDNSZonePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeleteDhcpPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeleteDhcpPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeleteDhcpPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeleteDhcpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeleteDhcpResponse will be returned.
func (p *WorkloadNetworksClientDeleteDhcpPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeleteDhcpResponse, error) {
	respType := WorkloadNetworksClientDeleteDhcpResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeleteDhcpResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeleteDhcpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeletePortMirroringPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeletePortMirroringPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeletePortMirroringPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeletePortMirroringPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeletePortMirroringResponse will be returned.
func (p *WorkloadNetworksClientDeletePortMirroringPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeletePortMirroringResponse, error) {
	respType := WorkloadNetworksClientDeletePortMirroringResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeletePortMirroringResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeletePortMirroringPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeletePublicIPPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeletePublicIPPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeletePublicIPPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeletePublicIPPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeletePublicIPResponse will be returned.
func (p *WorkloadNetworksClientDeletePublicIPPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeletePublicIPResponse, error) {
	respType := WorkloadNetworksClientDeletePublicIPResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeletePublicIPResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeletePublicIPPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeleteSegmentPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeleteSegmentPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeleteSegmentPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeleteSegmentPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeleteSegmentResponse will be returned.
func (p *WorkloadNetworksClientDeleteSegmentPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeleteSegmentResponse, error) {
	respType := WorkloadNetworksClientDeleteSegmentResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeleteSegmentResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeleteSegmentPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientDeleteVMGroupPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientDeleteVMGroupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientDeleteVMGroupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientDeleteVMGroupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientDeleteVMGroupResponse will be returned.
func (p *WorkloadNetworksClientDeleteVMGroupPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientDeleteVMGroupResponse, error) {
	respType := WorkloadNetworksClientDeleteVMGroupResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return WorkloadNetworksClientDeleteVMGroupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientDeleteVMGroupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdateDNSServicePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdateDNSServicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdateDNSServicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdateDNSServicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdateDNSServiceResponse will be returned.
func (p *WorkloadNetworksClientUpdateDNSServicePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdateDNSServiceResponse, error) {
	respType := WorkloadNetworksClientUpdateDNSServiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDNSService)
	if err != nil {
		return WorkloadNetworksClientUpdateDNSServiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdateDNSServicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdateDNSZonePoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdateDNSZonePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdateDNSZonePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdateDNSZonePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdateDNSZoneResponse will be returned.
func (p *WorkloadNetworksClientUpdateDNSZonePoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdateDNSZoneResponse, error) {
	respType := WorkloadNetworksClientUpdateDNSZoneResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDNSZone)
	if err != nil {
		return WorkloadNetworksClientUpdateDNSZoneResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdateDNSZonePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdateDhcpPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdateDhcpPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdateDhcpPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdateDhcpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdateDhcpResponse will be returned.
func (p *WorkloadNetworksClientUpdateDhcpPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdateDhcpResponse, error) {
	respType := WorkloadNetworksClientUpdateDhcpResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkDhcp)
	if err != nil {
		return WorkloadNetworksClientUpdateDhcpResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdateDhcpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdatePortMirroringPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdatePortMirroringPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdatePortMirroringPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdatePortMirroringPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdatePortMirroringResponse will be returned.
func (p *WorkloadNetworksClientUpdatePortMirroringPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdatePortMirroringResponse, error) {
	respType := WorkloadNetworksClientUpdatePortMirroringResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return WorkloadNetworksClientUpdatePortMirroringResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdatePortMirroringPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdateSegmentsPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdateSegmentsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdateSegmentsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdateSegmentsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdateSegmentsResponse will be returned.
func (p *WorkloadNetworksClientUpdateSegmentsPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdateSegmentsResponse, error) {
	respType := WorkloadNetworksClientUpdateSegmentsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkSegment)
	if err != nil {
		return WorkloadNetworksClientUpdateSegmentsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdateSegmentsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// WorkloadNetworksClientUpdateVMGroupPoller provides polling facilities until the operation reaches a terminal state.
type WorkloadNetworksClientUpdateVMGroupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *WorkloadNetworksClientUpdateVMGroupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *WorkloadNetworksClientUpdateVMGroupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final WorkloadNetworksClientUpdateVMGroupResponse will be returned.
func (p *WorkloadNetworksClientUpdateVMGroupPoller) FinalResponse(ctx context.Context) (WorkloadNetworksClientUpdateVMGroupResponse, error) {
	respType := WorkloadNetworksClientUpdateVMGroupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.WorkloadNetworkVMGroup)
	if err != nil {
		return WorkloadNetworksClientUpdateVMGroupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *WorkloadNetworksClientUpdateVMGroupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
