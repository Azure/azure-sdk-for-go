//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AddonsClientCreateOrUpdatePollerResponse contains the response from method AddonsClient.CreateOrUpdate.
type AddonsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AddonsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AddonsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AddonsClientCreateOrUpdateResponse, error) {
	respType := AddonsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Addon)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AddonsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AddonsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AddonsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AddonsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AddonsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AddonsClientCreateOrUpdateResponse contains the response from method AddonsClient.CreateOrUpdate.
type AddonsClientCreateOrUpdateResponse struct {
	AddonsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AddonsClientCreateOrUpdateResult contains the result from method AddonsClient.CreateOrUpdate.
type AddonsClientCreateOrUpdateResult struct {
	Addon
}

// AddonsClientDeletePollerResponse contains the response from method AddonsClient.Delete.
type AddonsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AddonsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AddonsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AddonsClientDeleteResponse, error) {
	respType := AddonsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AddonsClientDeletePollerResponse from the provided client and resume token.
func (l *AddonsClientDeletePollerResponse) Resume(ctx context.Context, client *AddonsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AddonsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AddonsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AddonsClientDeleteResponse contains the response from method AddonsClient.Delete.
type AddonsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AddonsClientGetResponse contains the response from method AddonsClient.Get.
type AddonsClientGetResponse struct {
	AddonsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AddonsClientGetResult contains the result from method AddonsClient.Get.
type AddonsClientGetResult struct {
	Addon
}

// AddonsClientListResponse contains the response from method AddonsClient.List.
type AddonsClientListResponse struct {
	AddonsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AddonsClientListResult contains the result from method AddonsClient.List.
type AddonsClientListResult struct {
	AddonList
}

// AuthorizationsClientCreateOrUpdatePollerResponse contains the response from method AuthorizationsClient.CreateOrUpdate.
type AuthorizationsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AuthorizationsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AuthorizationsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AuthorizationsClientCreateOrUpdateResponse, error) {
	respType := AuthorizationsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ExpressRouteAuthorization)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AuthorizationsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AuthorizationsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AuthorizationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AuthorizationsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AuthorizationsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AuthorizationsClientCreateOrUpdateResponse contains the response from method AuthorizationsClient.CreateOrUpdate.
type AuthorizationsClientCreateOrUpdateResponse struct {
	AuthorizationsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationsClientCreateOrUpdateResult contains the result from method AuthorizationsClient.CreateOrUpdate.
type AuthorizationsClientCreateOrUpdateResult struct {
	ExpressRouteAuthorization
}

// AuthorizationsClientDeletePollerResponse contains the response from method AuthorizationsClient.Delete.
type AuthorizationsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AuthorizationsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AuthorizationsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AuthorizationsClientDeleteResponse, error) {
	respType := AuthorizationsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AuthorizationsClientDeletePollerResponse from the provided client and resume token.
func (l *AuthorizationsClientDeletePollerResponse) Resume(ctx context.Context, client *AuthorizationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AuthorizationsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AuthorizationsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AuthorizationsClientDeleteResponse contains the response from method AuthorizationsClient.Delete.
type AuthorizationsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationsClientGetResponse contains the response from method AuthorizationsClient.Get.
type AuthorizationsClientGetResponse struct {
	AuthorizationsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationsClientGetResult contains the result from method AuthorizationsClient.Get.
type AuthorizationsClientGetResult struct {
	ExpressRouteAuthorization
}

// AuthorizationsClientListResponse contains the response from method AuthorizationsClient.List.
type AuthorizationsClientListResponse struct {
	AuthorizationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AuthorizationsClientListResult contains the result from method AuthorizationsClient.List.
type AuthorizationsClientListResult struct {
	ExpressRouteAuthorizationList
}

// CloudLinksClientCreateOrUpdatePollerResponse contains the response from method CloudLinksClient.CreateOrUpdate.
type CloudLinksClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudLinksClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudLinksClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudLinksClientCreateOrUpdateResponse, error) {
	respType := CloudLinksClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CloudLink)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudLinksClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *CloudLinksClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *CloudLinksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudLinksClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudLinksClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudLinksClientCreateOrUpdateResponse contains the response from method CloudLinksClient.CreateOrUpdate.
type CloudLinksClientCreateOrUpdateResponse struct {
	CloudLinksClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudLinksClientCreateOrUpdateResult contains the result from method CloudLinksClient.CreateOrUpdate.
type CloudLinksClientCreateOrUpdateResult struct {
	CloudLink
}

// CloudLinksClientDeletePollerResponse contains the response from method CloudLinksClient.Delete.
type CloudLinksClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudLinksClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudLinksClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudLinksClientDeleteResponse, error) {
	respType := CloudLinksClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudLinksClientDeletePollerResponse from the provided client and resume token.
func (l *CloudLinksClientDeletePollerResponse) Resume(ctx context.Context, client *CloudLinksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudLinksClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudLinksClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudLinksClientDeleteResponse contains the response from method CloudLinksClient.Delete.
type CloudLinksClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudLinksClientGetResponse contains the response from method CloudLinksClient.Get.
type CloudLinksClientGetResponse struct {
	CloudLinksClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudLinksClientGetResult contains the result from method CloudLinksClient.Get.
type CloudLinksClientGetResult struct {
	CloudLink
}

// CloudLinksClientListResponse contains the response from method CloudLinksClient.List.
type CloudLinksClientListResponse struct {
	CloudLinksClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudLinksClientListResult contains the result from method CloudLinksClient.List.
type CloudLinksClientListResult struct {
	CloudLinkList
}

// ClustersClientCreateOrUpdatePollerResponse contains the response from method ClustersClient.CreateOrUpdate.
type ClustersClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClustersClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClustersClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClustersClientCreateOrUpdateResponse, error) {
	respType := ClustersClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Cluster)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClustersClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ClustersClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ClustersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ClustersClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClustersClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClustersClientCreateOrUpdateResponse contains the response from method ClustersClient.CreateOrUpdate.
type ClustersClientCreateOrUpdateResponse struct {
	ClustersClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersClientCreateOrUpdateResult contains the result from method ClustersClient.CreateOrUpdate.
type ClustersClientCreateOrUpdateResult struct {
	Cluster
}

// ClustersClientDeletePollerResponse contains the response from method ClustersClient.Delete.
type ClustersClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClustersClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClustersClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClustersClientDeleteResponse, error) {
	respType := ClustersClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClustersClientDeletePollerResponse from the provided client and resume token.
func (l *ClustersClientDeletePollerResponse) Resume(ctx context.Context, client *ClustersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ClustersClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClustersClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClustersClientDeleteResponse contains the response from method ClustersClient.Delete.
type ClustersClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersClientGetResponse contains the response from method ClustersClient.Get.
type ClustersClientGetResponse struct {
	ClustersClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersClientGetResult contains the result from method ClustersClient.Get.
type ClustersClientGetResult struct {
	Cluster
}

// ClustersClientListResponse contains the response from method ClustersClient.List.
type ClustersClientListResponse struct {
	ClustersClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersClientListResult contains the result from method ClustersClient.List.
type ClustersClientListResult struct {
	ClusterList
}

// ClustersClientUpdatePollerResponse contains the response from method ClustersClient.Update.
type ClustersClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClustersClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClustersClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClustersClientUpdateResponse, error) {
	respType := ClustersClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Cluster)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClustersClientUpdatePollerResponse from the provided client and resume token.
func (l *ClustersClientUpdatePollerResponse) Resume(ctx context.Context, client *ClustersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ClustersClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClustersClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClustersClientUpdateResponse contains the response from method ClustersClient.Update.
type ClustersClientUpdateResponse struct {
	ClustersClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersClientUpdateResult contains the result from method ClustersClient.Update.
type ClustersClientUpdateResult struct {
	Cluster
}

// DatastoresClientCreateOrUpdatePollerResponse contains the response from method DatastoresClient.CreateOrUpdate.
type DatastoresClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DatastoresClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DatastoresClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DatastoresClientCreateOrUpdateResponse, error) {
	respType := DatastoresClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Datastore)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DatastoresClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *DatastoresClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *DatastoresClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DatastoresClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DatastoresClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DatastoresClientCreateOrUpdateResponse contains the response from method DatastoresClient.CreateOrUpdate.
type DatastoresClientCreateOrUpdateResponse struct {
	DatastoresClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatastoresClientCreateOrUpdateResult contains the result from method DatastoresClient.CreateOrUpdate.
type DatastoresClientCreateOrUpdateResult struct {
	Datastore
}

// DatastoresClientDeletePollerResponse contains the response from method DatastoresClient.Delete.
type DatastoresClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DatastoresClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DatastoresClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DatastoresClientDeleteResponse, error) {
	respType := DatastoresClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DatastoresClientDeletePollerResponse from the provided client and resume token.
func (l *DatastoresClientDeletePollerResponse) Resume(ctx context.Context, client *DatastoresClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DatastoresClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DatastoresClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DatastoresClientDeleteResponse contains the response from method DatastoresClient.Delete.
type DatastoresClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatastoresClientGetResponse contains the response from method DatastoresClient.Get.
type DatastoresClientGetResponse struct {
	DatastoresClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatastoresClientGetResult contains the result from method DatastoresClient.Get.
type DatastoresClientGetResult struct {
	Datastore
}

// DatastoresClientListResponse contains the response from method DatastoresClient.List.
type DatastoresClientListResponse struct {
	DatastoresClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatastoresClientListResult contains the result from method DatastoresClient.List.
type DatastoresClientListResult struct {
	DatastoreList
}

// GlobalReachConnectionsClientCreateOrUpdatePollerResponse contains the response from method GlobalReachConnectionsClient.CreateOrUpdate.
type GlobalReachConnectionsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GlobalReachConnectionsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l GlobalReachConnectionsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GlobalReachConnectionsClientCreateOrUpdateResponse, error) {
	respType := GlobalReachConnectionsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GlobalReachConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a GlobalReachConnectionsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *GlobalReachConnectionsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *GlobalReachConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("GlobalReachConnectionsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &GlobalReachConnectionsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// GlobalReachConnectionsClientCreateOrUpdateResponse contains the response from method GlobalReachConnectionsClient.CreateOrUpdate.
type GlobalReachConnectionsClientCreateOrUpdateResponse struct {
	GlobalReachConnectionsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionsClientCreateOrUpdateResult contains the result from method GlobalReachConnectionsClient.CreateOrUpdate.
type GlobalReachConnectionsClientCreateOrUpdateResult struct {
	GlobalReachConnection
}

// GlobalReachConnectionsClientDeletePollerResponse contains the response from method GlobalReachConnectionsClient.Delete.
type GlobalReachConnectionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GlobalReachConnectionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l GlobalReachConnectionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GlobalReachConnectionsClientDeleteResponse, error) {
	respType := GlobalReachConnectionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a GlobalReachConnectionsClientDeletePollerResponse from the provided client and resume token.
func (l *GlobalReachConnectionsClientDeletePollerResponse) Resume(ctx context.Context, client *GlobalReachConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("GlobalReachConnectionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &GlobalReachConnectionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// GlobalReachConnectionsClientDeleteResponse contains the response from method GlobalReachConnectionsClient.Delete.
type GlobalReachConnectionsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionsClientGetResponse contains the response from method GlobalReachConnectionsClient.Get.
type GlobalReachConnectionsClientGetResponse struct {
	GlobalReachConnectionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionsClientGetResult contains the result from method GlobalReachConnectionsClient.Get.
type GlobalReachConnectionsClientGetResult struct {
	GlobalReachConnection
}

// GlobalReachConnectionsClientListResponse contains the response from method GlobalReachConnectionsClient.List.
type GlobalReachConnectionsClientListResponse struct {
	GlobalReachConnectionsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GlobalReachConnectionsClientListResult contains the result from method GlobalReachConnectionsClient.List.
type GlobalReachConnectionsClientListResult struct {
	GlobalReachConnectionList
}

// HcxEnterpriseSitesClientCreateOrUpdateResponse contains the response from method HcxEnterpriseSitesClient.CreateOrUpdate.
type HcxEnterpriseSitesClientCreateOrUpdateResponse struct {
	HcxEnterpriseSitesClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSitesClientCreateOrUpdateResult contains the result from method HcxEnterpriseSitesClient.CreateOrUpdate.
type HcxEnterpriseSitesClientCreateOrUpdateResult struct {
	HcxEnterpriseSite
}

// HcxEnterpriseSitesClientDeleteResponse contains the response from method HcxEnterpriseSitesClient.Delete.
type HcxEnterpriseSitesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSitesClientGetResponse contains the response from method HcxEnterpriseSitesClient.Get.
type HcxEnterpriseSitesClientGetResponse struct {
	HcxEnterpriseSitesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSitesClientGetResult contains the result from method HcxEnterpriseSitesClient.Get.
type HcxEnterpriseSitesClientGetResult struct {
	HcxEnterpriseSite
}

// HcxEnterpriseSitesClientListResponse contains the response from method HcxEnterpriseSitesClient.List.
type HcxEnterpriseSitesClientListResponse struct {
	HcxEnterpriseSitesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// HcxEnterpriseSitesClientListResult contains the result from method HcxEnterpriseSitesClient.List.
type HcxEnterpriseSitesClientListResult struct {
	HcxEnterpriseSiteList
}

// LocationsClientCheckQuotaAvailabilityResponse contains the response from method LocationsClient.CheckQuotaAvailability.
type LocationsClientCheckQuotaAvailabilityResponse struct {
	LocationsClientCheckQuotaAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationsClientCheckQuotaAvailabilityResult contains the result from method LocationsClient.CheckQuotaAvailability.
type LocationsClientCheckQuotaAvailabilityResult struct {
	Quota
}

// LocationsClientCheckTrialAvailabilityResponse contains the response from method LocationsClient.CheckTrialAvailability.
type LocationsClientCheckTrialAvailabilityResponse struct {
	LocationsClientCheckTrialAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationsClientCheckTrialAvailabilityResult contains the result from method LocationsClient.CheckTrialAvailability.
type LocationsClientCheckTrialAvailabilityResult struct {
	Trial
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationList
}

// PlacementPoliciesClientCreateOrUpdatePollerResponse contains the response from method PlacementPoliciesClient.CreateOrUpdate.
type PlacementPoliciesClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PlacementPoliciesClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PlacementPoliciesClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PlacementPoliciesClientCreateOrUpdateResponse, error) {
	respType := PlacementPoliciesClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PlacementPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PlacementPoliciesClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PlacementPoliciesClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PlacementPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PlacementPoliciesClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PlacementPoliciesClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PlacementPoliciesClientCreateOrUpdateResponse contains the response from method PlacementPoliciesClient.CreateOrUpdate.
type PlacementPoliciesClientCreateOrUpdateResponse struct {
	PlacementPoliciesClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PlacementPoliciesClientCreateOrUpdateResult contains the result from method PlacementPoliciesClient.CreateOrUpdate.
type PlacementPoliciesClientCreateOrUpdateResult struct {
	PlacementPolicy
}

// PlacementPoliciesClientDeletePollerResponse contains the response from method PlacementPoliciesClient.Delete.
type PlacementPoliciesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PlacementPoliciesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PlacementPoliciesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PlacementPoliciesClientDeleteResponse, error) {
	respType := PlacementPoliciesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PlacementPoliciesClientDeletePollerResponse from the provided client and resume token.
func (l *PlacementPoliciesClientDeletePollerResponse) Resume(ctx context.Context, client *PlacementPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PlacementPoliciesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PlacementPoliciesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PlacementPoliciesClientDeleteResponse contains the response from method PlacementPoliciesClient.Delete.
type PlacementPoliciesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PlacementPoliciesClientGetResponse contains the response from method PlacementPoliciesClient.Get.
type PlacementPoliciesClientGetResponse struct {
	PlacementPoliciesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PlacementPoliciesClientGetResult contains the result from method PlacementPoliciesClient.Get.
type PlacementPoliciesClientGetResult struct {
	PlacementPolicy
}

// PlacementPoliciesClientListResponse contains the response from method PlacementPoliciesClient.List.
type PlacementPoliciesClientListResponse struct {
	PlacementPoliciesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PlacementPoliciesClientListResult contains the result from method PlacementPoliciesClient.List.
type PlacementPoliciesClientListResult struct {
	PlacementPoliciesList
}

// PlacementPoliciesClientUpdatePollerResponse contains the response from method PlacementPoliciesClient.Update.
type PlacementPoliciesClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PlacementPoliciesClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PlacementPoliciesClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PlacementPoliciesClientUpdateResponse, error) {
	respType := PlacementPoliciesClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PlacementPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PlacementPoliciesClientUpdatePollerResponse from the provided client and resume token.
func (l *PlacementPoliciesClientUpdatePollerResponse) Resume(ctx context.Context, client *PlacementPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PlacementPoliciesClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PlacementPoliciesClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PlacementPoliciesClientUpdateResponse contains the response from method PlacementPoliciesClient.Update.
type PlacementPoliciesClientUpdateResponse struct {
	PlacementPoliciesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PlacementPoliciesClientUpdateResult contains the result from method PlacementPoliciesClient.Update.
type PlacementPoliciesClientUpdateResult struct {
	PlacementPolicy
}

// PrivateCloudsClientCreateOrUpdatePollerResponse contains the response from method PrivateCloudsClient.CreateOrUpdate.
type PrivateCloudsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateCloudsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateCloudsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateCloudsClientCreateOrUpdateResponse, error) {
	respType := PrivateCloudsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateCloud)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateCloudsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateCloudsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateCloudsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateCloudsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateCloudsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateCloudsClientCreateOrUpdateResponse contains the response from method PrivateCloudsClient.CreateOrUpdate.
type PrivateCloudsClientCreateOrUpdateResponse struct {
	PrivateCloudsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientCreateOrUpdateResult contains the result from method PrivateCloudsClient.CreateOrUpdate.
type PrivateCloudsClientCreateOrUpdateResult struct {
	PrivateCloud
}

// PrivateCloudsClientDeletePollerResponse contains the response from method PrivateCloudsClient.Delete.
type PrivateCloudsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateCloudsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateCloudsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateCloudsClientDeleteResponse, error) {
	respType := PrivateCloudsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateCloudsClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateCloudsClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateCloudsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateCloudsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateCloudsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateCloudsClientDeleteResponse contains the response from method PrivateCloudsClient.Delete.
type PrivateCloudsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientGetResponse contains the response from method PrivateCloudsClient.Get.
type PrivateCloudsClientGetResponse struct {
	PrivateCloudsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientGetResult contains the result from method PrivateCloudsClient.Get.
type PrivateCloudsClientGetResult struct {
	PrivateCloud
}

// PrivateCloudsClientListAdminCredentialsResponse contains the response from method PrivateCloudsClient.ListAdminCredentials.
type PrivateCloudsClientListAdminCredentialsResponse struct {
	PrivateCloudsClientListAdminCredentialsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientListAdminCredentialsResult contains the result from method PrivateCloudsClient.ListAdminCredentials.
type PrivateCloudsClientListAdminCredentialsResult struct {
	AdminCredentials
}

// PrivateCloudsClientListInSubscriptionResponse contains the response from method PrivateCloudsClient.ListInSubscription.
type PrivateCloudsClientListInSubscriptionResponse struct {
	PrivateCloudsClientListInSubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientListInSubscriptionResult contains the result from method PrivateCloudsClient.ListInSubscription.
type PrivateCloudsClientListInSubscriptionResult struct {
	PrivateCloudList
}

// PrivateCloudsClientListResponse contains the response from method PrivateCloudsClient.List.
type PrivateCloudsClientListResponse struct {
	PrivateCloudsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientListResult contains the result from method PrivateCloudsClient.List.
type PrivateCloudsClientListResult struct {
	PrivateCloudList
}

// PrivateCloudsClientRotateNsxtPasswordPollerResponse contains the response from method PrivateCloudsClient.RotateNsxtPassword.
type PrivateCloudsClientRotateNsxtPasswordPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateCloudsClientRotateNsxtPasswordPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateCloudsClientRotateNsxtPasswordPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateCloudsClientRotateNsxtPasswordResponse, error) {
	respType := PrivateCloudsClientRotateNsxtPasswordResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateCloudsClientRotateNsxtPasswordPollerResponse from the provided client and resume token.
func (l *PrivateCloudsClientRotateNsxtPasswordPollerResponse) Resume(ctx context.Context, client *PrivateCloudsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateCloudsClient.RotateNsxtPassword", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateCloudsClientRotateNsxtPasswordPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateCloudsClientRotateNsxtPasswordResponse contains the response from method PrivateCloudsClient.RotateNsxtPassword.
type PrivateCloudsClientRotateNsxtPasswordResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientRotateVcenterPasswordPollerResponse contains the response from method PrivateCloudsClient.RotateVcenterPassword.
type PrivateCloudsClientRotateVcenterPasswordPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateCloudsClientRotateVcenterPasswordPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateCloudsClientRotateVcenterPasswordPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateCloudsClientRotateVcenterPasswordResponse, error) {
	respType := PrivateCloudsClientRotateVcenterPasswordResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateCloudsClientRotateVcenterPasswordPollerResponse from the provided client and resume token.
func (l *PrivateCloudsClientRotateVcenterPasswordPollerResponse) Resume(ctx context.Context, client *PrivateCloudsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateCloudsClient.RotateVcenterPassword", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateCloudsClientRotateVcenterPasswordPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateCloudsClientRotateVcenterPasswordResponse contains the response from method PrivateCloudsClient.RotateVcenterPassword.
type PrivateCloudsClientRotateVcenterPasswordResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientUpdatePollerResponse contains the response from method PrivateCloudsClient.Update.
type PrivateCloudsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateCloudsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateCloudsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateCloudsClientUpdateResponse, error) {
	respType := PrivateCloudsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateCloud)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateCloudsClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateCloudsClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateCloudsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateCloudsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateCloudsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateCloudsClientUpdateResponse contains the response from method PrivateCloudsClient.Update.
type PrivateCloudsClientUpdateResponse struct {
	PrivateCloudsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateCloudsClientUpdateResult contains the result from method PrivateCloudsClient.Update.
type PrivateCloudsClientUpdateResult struct {
	PrivateCloud
}

// ScriptCmdletsClientGetResponse contains the response from method ScriptCmdletsClient.Get.
type ScriptCmdletsClientGetResponse struct {
	ScriptCmdletsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptCmdletsClientGetResult contains the result from method ScriptCmdletsClient.Get.
type ScriptCmdletsClientGetResult struct {
	ScriptCmdlet
}

// ScriptCmdletsClientListResponse contains the response from method ScriptCmdletsClient.List.
type ScriptCmdletsClientListResponse struct {
	ScriptCmdletsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptCmdletsClientListResult contains the result from method ScriptCmdletsClient.List.
type ScriptCmdletsClientListResult struct {
	ScriptCmdletsList
}

// ScriptExecutionsClientCreateOrUpdatePollerResponse contains the response from method ScriptExecutionsClient.CreateOrUpdate.
type ScriptExecutionsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ScriptExecutionsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ScriptExecutionsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ScriptExecutionsClientCreateOrUpdateResponse, error) {
	respType := ScriptExecutionsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ScriptExecution)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ScriptExecutionsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ScriptExecutionsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ScriptExecutionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ScriptExecutionsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ScriptExecutionsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ScriptExecutionsClientCreateOrUpdateResponse contains the response from method ScriptExecutionsClient.CreateOrUpdate.
type ScriptExecutionsClientCreateOrUpdateResponse struct {
	ScriptExecutionsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptExecutionsClientCreateOrUpdateResult contains the result from method ScriptExecutionsClient.CreateOrUpdate.
type ScriptExecutionsClientCreateOrUpdateResult struct {
	ScriptExecution
}

// ScriptExecutionsClientDeletePollerResponse contains the response from method ScriptExecutionsClient.Delete.
type ScriptExecutionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ScriptExecutionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ScriptExecutionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ScriptExecutionsClientDeleteResponse, error) {
	respType := ScriptExecutionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ScriptExecutionsClientDeletePollerResponse from the provided client and resume token.
func (l *ScriptExecutionsClientDeletePollerResponse) Resume(ctx context.Context, client *ScriptExecutionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ScriptExecutionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ScriptExecutionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ScriptExecutionsClientDeleteResponse contains the response from method ScriptExecutionsClient.Delete.
type ScriptExecutionsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptExecutionsClientGetExecutionLogsResponse contains the response from method ScriptExecutionsClient.GetExecutionLogs.
type ScriptExecutionsClientGetExecutionLogsResponse struct {
	ScriptExecutionsClientGetExecutionLogsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptExecutionsClientGetExecutionLogsResult contains the result from method ScriptExecutionsClient.GetExecutionLogs.
type ScriptExecutionsClientGetExecutionLogsResult struct {
	ScriptExecution
}

// ScriptExecutionsClientGetResponse contains the response from method ScriptExecutionsClient.Get.
type ScriptExecutionsClientGetResponse struct {
	ScriptExecutionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptExecutionsClientGetResult contains the result from method ScriptExecutionsClient.Get.
type ScriptExecutionsClientGetResult struct {
	ScriptExecution
}

// ScriptExecutionsClientListResponse contains the response from method ScriptExecutionsClient.List.
type ScriptExecutionsClientListResponse struct {
	ScriptExecutionsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptExecutionsClientListResult contains the result from method ScriptExecutionsClient.List.
type ScriptExecutionsClientListResult struct {
	ScriptExecutionsList
}

// ScriptPackagesClientGetResponse contains the response from method ScriptPackagesClient.Get.
type ScriptPackagesClientGetResponse struct {
	ScriptPackagesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptPackagesClientGetResult contains the result from method ScriptPackagesClient.Get.
type ScriptPackagesClientGetResult struct {
	ScriptPackage
}

// ScriptPackagesClientListResponse contains the response from method ScriptPackagesClient.List.
type ScriptPackagesClientListResponse struct {
	ScriptPackagesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ScriptPackagesClientListResult contains the result from method ScriptPackagesClient.List.
type ScriptPackagesClientListResult struct {
	ScriptPackagesList
}

// VirtualMachinesClientGetResponse contains the response from method VirtualMachinesClient.Get.
type VirtualMachinesClientGetResponse struct {
	VirtualMachinesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesClientGetResult contains the result from method VirtualMachinesClient.Get.
type VirtualMachinesClientGetResult struct {
	VirtualMachine
}

// VirtualMachinesClientListResponse contains the response from method VirtualMachinesClient.List.
type VirtualMachinesClientListResponse struct {
	VirtualMachinesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachinesClientListResult contains the result from method VirtualMachinesClient.List.
type VirtualMachinesClientListResult struct {
	VirtualMachinesList
}

// VirtualMachinesClientRestrictMovementPollerResponse contains the response from method VirtualMachinesClient.RestrictMovement.
type VirtualMachinesClientRestrictMovementPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachinesClientRestrictMovementPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachinesClientRestrictMovementPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachinesClientRestrictMovementResponse, error) {
	respType := VirtualMachinesClientRestrictMovementResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachinesClientRestrictMovementPollerResponse from the provided client and resume token.
func (l *VirtualMachinesClientRestrictMovementPollerResponse) Resume(ctx context.Context, client *VirtualMachinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachinesClient.RestrictMovement", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VirtualMachinesClientRestrictMovementPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachinesClientRestrictMovementResponse contains the response from method VirtualMachinesClient.RestrictMovement.
type VirtualMachinesClientRestrictMovementResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateDNSServicePollerResponse contains the response from method WorkloadNetworksClient.CreateDNSService.
type WorkloadNetworksClientCreateDNSServicePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreateDNSServicePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreateDNSServicePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreateDNSServiceResponse, error) {
	respType := WorkloadNetworksClientCreateDNSServiceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDNSService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreateDNSServicePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreateDNSServicePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreateDNSService", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreateDNSServicePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreateDNSServiceResponse contains the response from method WorkloadNetworksClient.CreateDNSService.
type WorkloadNetworksClientCreateDNSServiceResponse struct {
	WorkloadNetworksClientCreateDNSServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateDNSServiceResult contains the result from method WorkloadNetworksClient.CreateDNSService.
type WorkloadNetworksClientCreateDNSServiceResult struct {
	WorkloadNetworkDNSService
}

// WorkloadNetworksClientCreateDNSZonePollerResponse contains the response from method WorkloadNetworksClient.CreateDNSZone.
type WorkloadNetworksClientCreateDNSZonePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreateDNSZonePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreateDNSZonePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreateDNSZoneResponse, error) {
	respType := WorkloadNetworksClientCreateDNSZoneResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDNSZone)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreateDNSZonePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreateDNSZonePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreateDNSZone", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreateDNSZonePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreateDNSZoneResponse contains the response from method WorkloadNetworksClient.CreateDNSZone.
type WorkloadNetworksClientCreateDNSZoneResponse struct {
	WorkloadNetworksClientCreateDNSZoneResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateDNSZoneResult contains the result from method WorkloadNetworksClient.CreateDNSZone.
type WorkloadNetworksClientCreateDNSZoneResult struct {
	WorkloadNetworkDNSZone
}

// WorkloadNetworksClientCreateDhcpPollerResponse contains the response from method WorkloadNetworksClient.CreateDhcp.
type WorkloadNetworksClientCreateDhcpPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreateDhcpPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreateDhcpPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreateDhcpResponse, error) {
	respType := WorkloadNetworksClientCreateDhcpResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDhcp)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreateDhcpPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreateDhcpPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreateDhcp", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreateDhcpPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreateDhcpResponse contains the response from method WorkloadNetworksClient.CreateDhcp.
type WorkloadNetworksClientCreateDhcpResponse struct {
	WorkloadNetworksClientCreateDhcpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateDhcpResult contains the result from method WorkloadNetworksClient.CreateDhcp.
type WorkloadNetworksClientCreateDhcpResult struct {
	WorkloadNetworkDhcp
}

// WorkloadNetworksClientCreatePortMirroringPollerResponse contains the response from method WorkloadNetworksClient.CreatePortMirroring.
type WorkloadNetworksClientCreatePortMirroringPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreatePortMirroringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreatePortMirroringPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreatePortMirroringResponse, error) {
	respType := WorkloadNetworksClientCreatePortMirroringResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreatePortMirroringPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreatePortMirroringPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreatePortMirroring", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreatePortMirroringPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreatePortMirroringResponse contains the response from method WorkloadNetworksClient.CreatePortMirroring.
type WorkloadNetworksClientCreatePortMirroringResponse struct {
	WorkloadNetworksClientCreatePortMirroringResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreatePortMirroringResult contains the result from method WorkloadNetworksClient.CreatePortMirroring.
type WorkloadNetworksClientCreatePortMirroringResult struct {
	WorkloadNetworkPortMirroring
}

// WorkloadNetworksClientCreatePublicIPPollerResponse contains the response from method WorkloadNetworksClient.CreatePublicIP.
type WorkloadNetworksClientCreatePublicIPPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreatePublicIPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreatePublicIPPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreatePublicIPResponse, error) {
	respType := WorkloadNetworksClientCreatePublicIPResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkPublicIP)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreatePublicIPPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreatePublicIPPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreatePublicIP", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreatePublicIPPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreatePublicIPResponse contains the response from method WorkloadNetworksClient.CreatePublicIP.
type WorkloadNetworksClientCreatePublicIPResponse struct {
	WorkloadNetworksClientCreatePublicIPResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreatePublicIPResult contains the result from method WorkloadNetworksClient.CreatePublicIP.
type WorkloadNetworksClientCreatePublicIPResult struct {
	WorkloadNetworkPublicIP
}

// WorkloadNetworksClientCreateSegmentsPollerResponse contains the response from method WorkloadNetworksClient.CreateSegments.
type WorkloadNetworksClientCreateSegmentsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreateSegmentsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreateSegmentsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreateSegmentsResponse, error) {
	respType := WorkloadNetworksClientCreateSegmentsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkSegment)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreateSegmentsPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreateSegmentsPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreateSegments", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreateSegmentsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreateSegmentsResponse contains the response from method WorkloadNetworksClient.CreateSegments.
type WorkloadNetworksClientCreateSegmentsResponse struct {
	WorkloadNetworksClientCreateSegmentsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateSegmentsResult contains the result from method WorkloadNetworksClient.CreateSegments.
type WorkloadNetworksClientCreateSegmentsResult struct {
	WorkloadNetworkSegment
}

// WorkloadNetworksClientCreateVMGroupPollerResponse contains the response from method WorkloadNetworksClient.CreateVMGroup.
type WorkloadNetworksClientCreateVMGroupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientCreateVMGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientCreateVMGroupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientCreateVMGroupResponse, error) {
	respType := WorkloadNetworksClientCreateVMGroupResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkVMGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientCreateVMGroupPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientCreateVMGroupPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.CreateVMGroup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientCreateVMGroupPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientCreateVMGroupResponse contains the response from method WorkloadNetworksClient.CreateVMGroup.
type WorkloadNetworksClientCreateVMGroupResponse struct {
	WorkloadNetworksClientCreateVMGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientCreateVMGroupResult contains the result from method WorkloadNetworksClient.CreateVMGroup.
type WorkloadNetworksClientCreateVMGroupResult struct {
	WorkloadNetworkVMGroup
}

// WorkloadNetworksClientDeleteDNSServicePollerResponse contains the response from method WorkloadNetworksClient.DeleteDNSService.
type WorkloadNetworksClientDeleteDNSServicePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeleteDNSServicePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeleteDNSServicePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeleteDNSServiceResponse, error) {
	respType := WorkloadNetworksClientDeleteDNSServiceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeleteDNSServicePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeleteDNSServicePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeleteDNSService", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeleteDNSServicePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeleteDNSServiceResponse contains the response from method WorkloadNetworksClient.DeleteDNSService.
type WorkloadNetworksClientDeleteDNSServiceResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeleteDNSZonePollerResponse contains the response from method WorkloadNetworksClient.DeleteDNSZone.
type WorkloadNetworksClientDeleteDNSZonePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeleteDNSZonePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeleteDNSZonePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeleteDNSZoneResponse, error) {
	respType := WorkloadNetworksClientDeleteDNSZoneResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeleteDNSZonePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeleteDNSZonePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeleteDNSZone", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeleteDNSZonePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeleteDNSZoneResponse contains the response from method WorkloadNetworksClient.DeleteDNSZone.
type WorkloadNetworksClientDeleteDNSZoneResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeleteDhcpPollerResponse contains the response from method WorkloadNetworksClient.DeleteDhcp.
type WorkloadNetworksClientDeleteDhcpPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeleteDhcpPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeleteDhcpPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeleteDhcpResponse, error) {
	respType := WorkloadNetworksClientDeleteDhcpResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeleteDhcpPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeleteDhcpPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeleteDhcp", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeleteDhcpPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeleteDhcpResponse contains the response from method WorkloadNetworksClient.DeleteDhcp.
type WorkloadNetworksClientDeleteDhcpResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeletePortMirroringPollerResponse contains the response from method WorkloadNetworksClient.DeletePortMirroring.
type WorkloadNetworksClientDeletePortMirroringPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeletePortMirroringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeletePortMirroringPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeletePortMirroringResponse, error) {
	respType := WorkloadNetworksClientDeletePortMirroringResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeletePortMirroringPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeletePortMirroringPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeletePortMirroring", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeletePortMirroringPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeletePortMirroringResponse contains the response from method WorkloadNetworksClient.DeletePortMirroring.
type WorkloadNetworksClientDeletePortMirroringResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeletePublicIPPollerResponse contains the response from method WorkloadNetworksClient.DeletePublicIP.
type WorkloadNetworksClientDeletePublicIPPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeletePublicIPPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeletePublicIPPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeletePublicIPResponse, error) {
	respType := WorkloadNetworksClientDeletePublicIPResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeletePublicIPPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeletePublicIPPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeletePublicIP", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeletePublicIPPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeletePublicIPResponse contains the response from method WorkloadNetworksClient.DeletePublicIP.
type WorkloadNetworksClientDeletePublicIPResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeleteSegmentPollerResponse contains the response from method WorkloadNetworksClient.DeleteSegment.
type WorkloadNetworksClientDeleteSegmentPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeleteSegmentPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeleteSegmentPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeleteSegmentResponse, error) {
	respType := WorkloadNetworksClientDeleteSegmentResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeleteSegmentPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeleteSegmentPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeleteSegment", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeleteSegmentPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeleteSegmentResponse contains the response from method WorkloadNetworksClient.DeleteSegment.
type WorkloadNetworksClientDeleteSegmentResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientDeleteVMGroupPollerResponse contains the response from method WorkloadNetworksClient.DeleteVMGroup.
type WorkloadNetworksClientDeleteVMGroupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientDeleteVMGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientDeleteVMGroupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientDeleteVMGroupResponse, error) {
	respType := WorkloadNetworksClientDeleteVMGroupResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientDeleteVMGroupPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientDeleteVMGroupPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.DeleteVMGroup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientDeleteVMGroupPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientDeleteVMGroupResponse contains the response from method WorkloadNetworksClient.DeleteVMGroup.
type WorkloadNetworksClientDeleteVMGroupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetDNSServiceResponse contains the response from method WorkloadNetworksClient.GetDNSService.
type WorkloadNetworksClientGetDNSServiceResponse struct {
	WorkloadNetworksClientGetDNSServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetDNSServiceResult contains the result from method WorkloadNetworksClient.GetDNSService.
type WorkloadNetworksClientGetDNSServiceResult struct {
	WorkloadNetworkDNSService
}

// WorkloadNetworksClientGetDNSZoneResponse contains the response from method WorkloadNetworksClient.GetDNSZone.
type WorkloadNetworksClientGetDNSZoneResponse struct {
	WorkloadNetworksClientGetDNSZoneResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetDNSZoneResult contains the result from method WorkloadNetworksClient.GetDNSZone.
type WorkloadNetworksClientGetDNSZoneResult struct {
	WorkloadNetworkDNSZone
}

// WorkloadNetworksClientGetDhcpResponse contains the response from method WorkloadNetworksClient.GetDhcp.
type WorkloadNetworksClientGetDhcpResponse struct {
	WorkloadNetworksClientGetDhcpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetDhcpResult contains the result from method WorkloadNetworksClient.GetDhcp.
type WorkloadNetworksClientGetDhcpResult struct {
	WorkloadNetworkDhcp
}

// WorkloadNetworksClientGetGatewayResponse contains the response from method WorkloadNetworksClient.GetGateway.
type WorkloadNetworksClientGetGatewayResponse struct {
	WorkloadNetworksClientGetGatewayResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetGatewayResult contains the result from method WorkloadNetworksClient.GetGateway.
type WorkloadNetworksClientGetGatewayResult struct {
	WorkloadNetworkGateway
}

// WorkloadNetworksClientGetPortMirroringResponse contains the response from method WorkloadNetworksClient.GetPortMirroring.
type WorkloadNetworksClientGetPortMirroringResponse struct {
	WorkloadNetworksClientGetPortMirroringResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetPortMirroringResult contains the result from method WorkloadNetworksClient.GetPortMirroring.
type WorkloadNetworksClientGetPortMirroringResult struct {
	WorkloadNetworkPortMirroring
}

// WorkloadNetworksClientGetPublicIPResponse contains the response from method WorkloadNetworksClient.GetPublicIP.
type WorkloadNetworksClientGetPublicIPResponse struct {
	WorkloadNetworksClientGetPublicIPResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetPublicIPResult contains the result from method WorkloadNetworksClient.GetPublicIP.
type WorkloadNetworksClientGetPublicIPResult struct {
	WorkloadNetworkPublicIP
}

// WorkloadNetworksClientGetSegmentResponse contains the response from method WorkloadNetworksClient.GetSegment.
type WorkloadNetworksClientGetSegmentResponse struct {
	WorkloadNetworksClientGetSegmentResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetSegmentResult contains the result from method WorkloadNetworksClient.GetSegment.
type WorkloadNetworksClientGetSegmentResult struct {
	WorkloadNetworkSegment
}

// WorkloadNetworksClientGetVMGroupResponse contains the response from method WorkloadNetworksClient.GetVMGroup.
type WorkloadNetworksClientGetVMGroupResponse struct {
	WorkloadNetworksClientGetVMGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetVMGroupResult contains the result from method WorkloadNetworksClient.GetVMGroup.
type WorkloadNetworksClientGetVMGroupResult struct {
	WorkloadNetworkVMGroup
}

// WorkloadNetworksClientGetVirtualMachineResponse contains the response from method WorkloadNetworksClient.GetVirtualMachine.
type WorkloadNetworksClientGetVirtualMachineResponse struct {
	WorkloadNetworksClientGetVirtualMachineResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientGetVirtualMachineResult contains the result from method WorkloadNetworksClient.GetVirtualMachine.
type WorkloadNetworksClientGetVirtualMachineResult struct {
	WorkloadNetworkVirtualMachine
}

// WorkloadNetworksClientListDNSServicesResponse contains the response from method WorkloadNetworksClient.ListDNSServices.
type WorkloadNetworksClientListDNSServicesResponse struct {
	WorkloadNetworksClientListDNSServicesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListDNSServicesResult contains the result from method WorkloadNetworksClient.ListDNSServices.
type WorkloadNetworksClientListDNSServicesResult struct {
	WorkloadNetworkDNSServicesList
}

// WorkloadNetworksClientListDNSZonesResponse contains the response from method WorkloadNetworksClient.ListDNSZones.
type WorkloadNetworksClientListDNSZonesResponse struct {
	WorkloadNetworksClientListDNSZonesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListDNSZonesResult contains the result from method WorkloadNetworksClient.ListDNSZones.
type WorkloadNetworksClientListDNSZonesResult struct {
	WorkloadNetworkDNSZonesList
}

// WorkloadNetworksClientListDhcpResponse contains the response from method WorkloadNetworksClient.ListDhcp.
type WorkloadNetworksClientListDhcpResponse struct {
	WorkloadNetworksClientListDhcpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListDhcpResult contains the result from method WorkloadNetworksClient.ListDhcp.
type WorkloadNetworksClientListDhcpResult struct {
	WorkloadNetworkDhcpList
}

// WorkloadNetworksClientListGatewaysResponse contains the response from method WorkloadNetworksClient.ListGateways.
type WorkloadNetworksClientListGatewaysResponse struct {
	WorkloadNetworksClientListGatewaysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListGatewaysResult contains the result from method WorkloadNetworksClient.ListGateways.
type WorkloadNetworksClientListGatewaysResult struct {
	WorkloadNetworkGatewayList
}

// WorkloadNetworksClientListPortMirroringResponse contains the response from method WorkloadNetworksClient.ListPortMirroring.
type WorkloadNetworksClientListPortMirroringResponse struct {
	WorkloadNetworksClientListPortMirroringResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListPortMirroringResult contains the result from method WorkloadNetworksClient.ListPortMirroring.
type WorkloadNetworksClientListPortMirroringResult struct {
	WorkloadNetworkPortMirroringList
}

// WorkloadNetworksClientListPublicIPsResponse contains the response from method WorkloadNetworksClient.ListPublicIPs.
type WorkloadNetworksClientListPublicIPsResponse struct {
	WorkloadNetworksClientListPublicIPsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListPublicIPsResult contains the result from method WorkloadNetworksClient.ListPublicIPs.
type WorkloadNetworksClientListPublicIPsResult struct {
	WorkloadNetworkPublicIPsList
}

// WorkloadNetworksClientListSegmentsResponse contains the response from method WorkloadNetworksClient.ListSegments.
type WorkloadNetworksClientListSegmentsResponse struct {
	WorkloadNetworksClientListSegmentsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListSegmentsResult contains the result from method WorkloadNetworksClient.ListSegments.
type WorkloadNetworksClientListSegmentsResult struct {
	WorkloadNetworkSegmentsList
}

// WorkloadNetworksClientListVMGroupsResponse contains the response from method WorkloadNetworksClient.ListVMGroups.
type WorkloadNetworksClientListVMGroupsResponse struct {
	WorkloadNetworksClientListVMGroupsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListVMGroupsResult contains the result from method WorkloadNetworksClient.ListVMGroups.
type WorkloadNetworksClientListVMGroupsResult struct {
	WorkloadNetworkVMGroupsList
}

// WorkloadNetworksClientListVirtualMachinesResponse contains the response from method WorkloadNetworksClient.ListVirtualMachines.
type WorkloadNetworksClientListVirtualMachinesResponse struct {
	WorkloadNetworksClientListVirtualMachinesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientListVirtualMachinesResult contains the result from method WorkloadNetworksClient.ListVirtualMachines.
type WorkloadNetworksClientListVirtualMachinesResult struct {
	WorkloadNetworkVirtualMachinesList
}

// WorkloadNetworksClientUpdateDNSServicePollerResponse contains the response from method WorkloadNetworksClient.UpdateDNSService.
type WorkloadNetworksClientUpdateDNSServicePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdateDNSServicePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdateDNSServicePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdateDNSServiceResponse, error) {
	respType := WorkloadNetworksClientUpdateDNSServiceResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDNSService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdateDNSServicePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdateDNSServicePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdateDNSService", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdateDNSServicePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdateDNSServiceResponse contains the response from method WorkloadNetworksClient.UpdateDNSService.
type WorkloadNetworksClientUpdateDNSServiceResponse struct {
	WorkloadNetworksClientUpdateDNSServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdateDNSServiceResult contains the result from method WorkloadNetworksClient.UpdateDNSService.
type WorkloadNetworksClientUpdateDNSServiceResult struct {
	WorkloadNetworkDNSService
}

// WorkloadNetworksClientUpdateDNSZonePollerResponse contains the response from method WorkloadNetworksClient.UpdateDNSZone.
type WorkloadNetworksClientUpdateDNSZonePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdateDNSZonePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdateDNSZonePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdateDNSZoneResponse, error) {
	respType := WorkloadNetworksClientUpdateDNSZoneResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDNSZone)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdateDNSZonePollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdateDNSZonePollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdateDNSZone", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdateDNSZonePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdateDNSZoneResponse contains the response from method WorkloadNetworksClient.UpdateDNSZone.
type WorkloadNetworksClientUpdateDNSZoneResponse struct {
	WorkloadNetworksClientUpdateDNSZoneResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdateDNSZoneResult contains the result from method WorkloadNetworksClient.UpdateDNSZone.
type WorkloadNetworksClientUpdateDNSZoneResult struct {
	WorkloadNetworkDNSZone
}

// WorkloadNetworksClientUpdateDhcpPollerResponse contains the response from method WorkloadNetworksClient.UpdateDhcp.
type WorkloadNetworksClientUpdateDhcpPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdateDhcpPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdateDhcpPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdateDhcpResponse, error) {
	respType := WorkloadNetworksClientUpdateDhcpResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkDhcp)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdateDhcpPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdateDhcpPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdateDhcp", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdateDhcpPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdateDhcpResponse contains the response from method WorkloadNetworksClient.UpdateDhcp.
type WorkloadNetworksClientUpdateDhcpResponse struct {
	WorkloadNetworksClientUpdateDhcpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdateDhcpResult contains the result from method WorkloadNetworksClient.UpdateDhcp.
type WorkloadNetworksClientUpdateDhcpResult struct {
	WorkloadNetworkDhcp
}

// WorkloadNetworksClientUpdatePortMirroringPollerResponse contains the response from method WorkloadNetworksClient.UpdatePortMirroring.
type WorkloadNetworksClientUpdatePortMirroringPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdatePortMirroringPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdatePortMirroringPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdatePortMirroringResponse, error) {
	respType := WorkloadNetworksClientUpdatePortMirroringResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkPortMirroring)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdatePortMirroringPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdatePortMirroringPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdatePortMirroring", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdatePortMirroringPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdatePortMirroringResponse contains the response from method WorkloadNetworksClient.UpdatePortMirroring.
type WorkloadNetworksClientUpdatePortMirroringResponse struct {
	WorkloadNetworksClientUpdatePortMirroringResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdatePortMirroringResult contains the result from method WorkloadNetworksClient.UpdatePortMirroring.
type WorkloadNetworksClientUpdatePortMirroringResult struct {
	WorkloadNetworkPortMirroring
}

// WorkloadNetworksClientUpdateSegmentsPollerResponse contains the response from method WorkloadNetworksClient.UpdateSegments.
type WorkloadNetworksClientUpdateSegmentsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdateSegmentsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdateSegmentsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdateSegmentsResponse, error) {
	respType := WorkloadNetworksClientUpdateSegmentsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkSegment)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdateSegmentsPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdateSegmentsPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdateSegments", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdateSegmentsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdateSegmentsResponse contains the response from method WorkloadNetworksClient.UpdateSegments.
type WorkloadNetworksClientUpdateSegmentsResponse struct {
	WorkloadNetworksClientUpdateSegmentsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdateSegmentsResult contains the result from method WorkloadNetworksClient.UpdateSegments.
type WorkloadNetworksClientUpdateSegmentsResult struct {
	WorkloadNetworkSegment
}

// WorkloadNetworksClientUpdateVMGroupPollerResponse contains the response from method WorkloadNetworksClient.UpdateVMGroup.
type WorkloadNetworksClientUpdateVMGroupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkloadNetworksClientUpdateVMGroupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkloadNetworksClientUpdateVMGroupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkloadNetworksClientUpdateVMGroupResponse, error) {
	respType := WorkloadNetworksClientUpdateVMGroupResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadNetworkVMGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkloadNetworksClientUpdateVMGroupPollerResponse from the provided client and resume token.
func (l *WorkloadNetworksClientUpdateVMGroupPollerResponse) Resume(ctx context.Context, client *WorkloadNetworksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkloadNetworksClient.UpdateVMGroup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &WorkloadNetworksClientUpdateVMGroupPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkloadNetworksClientUpdateVMGroupResponse contains the response from method WorkloadNetworksClient.UpdateVMGroup.
type WorkloadNetworksClientUpdateVMGroupResponse struct {
	WorkloadNetworksClientUpdateVMGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkloadNetworksClientUpdateVMGroupResult contains the result from method WorkloadNetworksClient.UpdateVMGroup.
type WorkloadNetworksClientUpdateVMGroupResult struct {
	WorkloadNetworkVMGroup
}
