//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armazureadexternalidentities

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GuestUsagesClient contains the methods for the GuestUsages group.
// Don't use this type directly, use NewGuestUsagesClient() instead.
type GuestUsagesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGuestUsagesClient creates a new instance of GuestUsagesClient with the specified values.
//   - subscriptionID - Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
//     part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGuestUsagesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GuestUsagesClient, error) {
	cl, err := arm.NewClient(moduleName+".GuestUsagesClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GuestUsagesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Creates a Guest Usages resource, which is used to linking a subscription to an instance of Azure AD External Identities.
// Learn more [https://aka.ms/extidbilling].
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-18-preview
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - resource - Guest Usages resource to be created
//   - options - GuestUsagesClientCreateOptions contains the optional parameters for the GuestUsagesClient.Create method.
func (client *GuestUsagesClient) Create(ctx context.Context, resourceGroupName string, resourceName string, resource GuestUsagesResource, options *GuestUsagesClientCreateOptions) (GuestUsagesClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, resourceName, resource, options)
	if err != nil {
		return GuestUsagesClientCreateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GuestUsagesClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *GuestUsagesClient) createCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resource GuestUsagesResource, options *GuestUsagesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// createHandleResponse handles the Create response.
func (client *GuestUsagesClient) createHandleResponse(resp *http.Response) (GuestUsagesClientCreateResponse, error) {
	result := GuestUsagesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-18-preview
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - GuestUsagesClientDeleteOptions contains the optional parameters for the GuestUsagesClient.Delete method.
func (client *GuestUsagesClient) Delete(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesClientDeleteOptions) (GuestUsagesClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return GuestUsagesClientDeleteResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return GuestUsagesClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return GuestUsagesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *GuestUsagesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-18-preview
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - options - GuestUsagesClientGetOptions contains the optional parameters for the GuestUsagesClient.Get method.
func (client *GuestUsagesClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesClientGetOptions) (GuestUsagesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return GuestUsagesClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GuestUsagesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *GuestUsagesClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *GuestUsagesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GuestUsagesClient) getHandleResponse(resp *http.Response) (GuestUsagesClientGetResponse, error) {
	result := GuestUsagesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets Guest Usages resources under a resource group for the Microsoft.AzureActiveDirectory
// resource provider
//
// Generated from API version 2023-01-18-preview
//   - resourceGroupName - The name of the resource group.
//   - options - GuestUsagesClientListByResourceGroupOptions contains the optional parameters for the GuestUsagesClient.NewListByResourceGroupPager
//     method.
func (client *GuestUsagesClient) NewListByResourceGroupPager(resourceGroupName string, options *GuestUsagesClientListByResourceGroupOptions) *runtime.Pager[GuestUsagesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[GuestUsagesClientListByResourceGroupResponse]{
		More: func(page GuestUsagesClientListByResourceGroupResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *GuestUsagesClientListByResourceGroupResponse) (GuestUsagesClientListByResourceGroupResponse, error) {
			req, err := client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			if err != nil {
				return GuestUsagesClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return GuestUsagesClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return GuestUsagesClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *GuestUsagesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *GuestUsagesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *GuestUsagesClient) listByResourceGroupHandleResponse(resp *http.Response) (GuestUsagesClientListByResourceGroupResponse, error) {
	result := GuestUsagesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResourceList); err != nil {
		return GuestUsagesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets Guest Usages resources under a subscription for the Microsoft.AzureActiveDirectory resource
// provider
//
// Generated from API version 2023-01-18-preview
//   - options - GuestUsagesClientListBySubscriptionOptions contains the optional parameters for the GuestUsagesClient.NewListBySubscriptionPager
//     method.
func (client *GuestUsagesClient) NewListBySubscriptionPager(options *GuestUsagesClientListBySubscriptionOptions) *runtime.Pager[GuestUsagesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[GuestUsagesClientListBySubscriptionResponse]{
		More: func(page GuestUsagesClientListBySubscriptionResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *GuestUsagesClientListBySubscriptionResponse) (GuestUsagesClientListBySubscriptionResponse, error) {
			req, err := client.listBySubscriptionCreateRequest(ctx, options)
			if err != nil {
				return GuestUsagesClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return GuestUsagesClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return GuestUsagesClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *GuestUsagesClient) listBySubscriptionCreateRequest(ctx context.Context, options *GuestUsagesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureActiveDirectory/guestUsages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *GuestUsagesClient) listBySubscriptionHandleResponse(resp *http.Response) (GuestUsagesClientListBySubscriptionResponse, error) {
	result := GuestUsagesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResourceList); err != nil {
		return GuestUsagesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Updates a Guest Usages resource for the Microsoft.AzureActiveDirectory resource provider
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-18-preview
//   - resourceGroupName - The name of the resource group.
//   - resourceName - The initial domain name of the Azure AD B2C tenant.
//   - resourcePatch - Guest Usages Resource to be updated
//   - options - GuestUsagesClientUpdateOptions contains the optional parameters for the GuestUsagesClient.Update method.
func (client *GuestUsagesClient) Update(ctx context.Context, resourceGroupName string, resourceName string, resourcePatch GuestUsagesResourcePatch, options *GuestUsagesClientUpdateOptions) (GuestUsagesClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, resourcePatch, options)
	if err != nil {
		return GuestUsagesClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GuestUsagesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GuestUsagesClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *GuestUsagesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, resourcePatch GuestUsagesResourcePatch, options *GuestUsagesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureActiveDirectory/guestUsages/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-18-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resourcePatch)
}

// updateHandleResponse handles the Update response.
func (client *GuestUsagesClient) updateHandleResponse(resp *http.Response) (GuestUsagesClientUpdateResponse, error) {
	result := GuestUsagesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GuestUsagesResource); err != nil {
		return GuestUsagesClientUpdateResponse{}, err
	}
	return result, nil
}
