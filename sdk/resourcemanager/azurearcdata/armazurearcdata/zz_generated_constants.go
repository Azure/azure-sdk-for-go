//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

const (
	moduleName    = "armazurearcdata"
	moduleVersion = "v0.2.0"
)

// ArcSQLManagedInstanceLicenseType - The license type to apply for this managed instance.
type ArcSQLManagedInstanceLicenseType string

const (
	ArcSQLManagedInstanceLicenseTypeBasePrice        ArcSQLManagedInstanceLicenseType = "BasePrice"
	ArcSQLManagedInstanceLicenseTypeDisasterRecovery ArcSQLManagedInstanceLicenseType = "DisasterRecovery"
	ArcSQLManagedInstanceLicenseTypeLicenseIncluded  ArcSQLManagedInstanceLicenseType = "LicenseIncluded"
)

// PossibleArcSQLManagedInstanceLicenseTypeValues returns the possible values for the ArcSQLManagedInstanceLicenseType const type.
func PossibleArcSQLManagedInstanceLicenseTypeValues() []ArcSQLManagedInstanceLicenseType {
	return []ArcSQLManagedInstanceLicenseType{
		ArcSQLManagedInstanceLicenseTypeBasePrice,
		ArcSQLManagedInstanceLicenseTypeDisasterRecovery,
		ArcSQLManagedInstanceLicenseTypeLicenseIncluded,
	}
}

// ToPtr returns a *ArcSQLManagedInstanceLicenseType pointing to the current value.
func (c ArcSQLManagedInstanceLicenseType) ToPtr() *ArcSQLManagedInstanceLicenseType {
	return &c
}

// ArcSQLServerLicenseType - SQL Server license type.
type ArcSQLServerLicenseType string

const (
	ArcSQLServerLicenseTypeFree      ArcSQLServerLicenseType = "Free"
	ArcSQLServerLicenseTypeHADR      ArcSQLServerLicenseType = "HADR"
	ArcSQLServerLicenseTypePaid      ArcSQLServerLicenseType = "Paid"
	ArcSQLServerLicenseTypeUndefined ArcSQLServerLicenseType = "Undefined"
)

// PossibleArcSQLServerLicenseTypeValues returns the possible values for the ArcSQLServerLicenseType const type.
func PossibleArcSQLServerLicenseTypeValues() []ArcSQLServerLicenseType {
	return []ArcSQLServerLicenseType{
		ArcSQLServerLicenseTypeFree,
		ArcSQLServerLicenseTypeHADR,
		ArcSQLServerLicenseTypePaid,
		ArcSQLServerLicenseTypeUndefined,
	}
}

// ToPtr returns a *ArcSQLServerLicenseType pointing to the current value.
func (c ArcSQLServerLicenseType) ToPtr() *ArcSQLServerLicenseType {
	return &c
}

// ConnectionStatus - The cloud connectivity status.
type ConnectionStatus string

const (
	ConnectionStatusConnected    ConnectionStatus = "Connected"
	ConnectionStatusDisconnected ConnectionStatus = "Disconnected"
	ConnectionStatusUnknown      ConnectionStatus = "Unknown"
)

// PossibleConnectionStatusValues returns the possible values for the ConnectionStatus const type.
func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{
		ConnectionStatusConnected,
		ConnectionStatusDisconnected,
		ConnectionStatusUnknown,
	}
}

// ToPtr returns a *ConnectionStatus pointing to the current value.
func (c ConnectionStatus) ToPtr() *ConnectionStatus {
	return &c
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// DefenderStatus - Status of Azure Defender.
type DefenderStatus string

const (
	DefenderStatusProtected   DefenderStatus = "Protected"
	DefenderStatusUnknown     DefenderStatus = "Unknown"
	DefenderStatusUnprotected DefenderStatus = "Unprotected"
)

// PossibleDefenderStatusValues returns the possible values for the DefenderStatus const type.
func PossibleDefenderStatusValues() []DefenderStatus {
	return []DefenderStatus{
		DefenderStatusProtected,
		DefenderStatusUnknown,
		DefenderStatusUnprotected,
	}
}

// ToPtr returns a *DefenderStatus pointing to the current value.
func (c DefenderStatus) ToPtr() *DefenderStatus {
	return &c
}

// EditionType - SQL Server edition.
type EditionType string

const (
	EditionTypeDeveloper  EditionType = "Developer"
	EditionTypeEnterprise EditionType = "Enterprise"
	EditionTypeEvaluation EditionType = "Evaluation"
	EditionTypeExpress    EditionType = "Express"
	EditionTypeStandard   EditionType = "Standard"
	EditionTypeWeb        EditionType = "Web"
)

// PossibleEditionTypeValues returns the possible values for the EditionType const type.
func PossibleEditionTypeValues() []EditionType {
	return []EditionType{
		EditionTypeDeveloper,
		EditionTypeEnterprise,
		EditionTypeEvaluation,
		EditionTypeExpress,
		EditionTypeStandard,
		EditionTypeWeb,
	}
}

// ToPtr returns a *EditionType pointing to the current value.
func (c EditionType) ToPtr() *EditionType {
	return &c
}

// ExtendedLocationTypes - The type of extendedLocation.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesCustomLocation ExtendedLocationTypes = "CustomLocation"
)

// PossibleExtendedLocationTypesValues returns the possible values for the ExtendedLocationTypes const type.
func PossibleExtendedLocationTypesValues() []ExtendedLocationTypes {
	return []ExtendedLocationTypes{
		ExtendedLocationTypesCustomLocation,
	}
}

// ToPtr returns a *ExtendedLocationTypes pointing to the current value.
func (c ExtendedLocationTypes) ToPtr() *ExtendedLocationTypes {
	return &c
}

// Infrastructure - The infrastructure the data controller is running on.
type Infrastructure string

const (
	InfrastructureAzure      Infrastructure = "azure"
	InfrastructureGcp        Infrastructure = "gcp"
	InfrastructureAws        Infrastructure = "aws"
	InfrastructureAlibaba    Infrastructure = "alibaba"
	InfrastructureOnpremises Infrastructure = "onpremises"
	InfrastructureOther      Infrastructure = "other"
)

// PossibleInfrastructureValues returns the possible values for the Infrastructure const type.
func PossibleInfrastructureValues() []Infrastructure {
	return []Infrastructure{
		InfrastructureAzure,
		InfrastructureGcp,
		InfrastructureAws,
		InfrastructureAlibaba,
		InfrastructureOnpremises,
		InfrastructureOther,
	}
}

// ToPtr returns a *Infrastructure pointing to the current value.
func (c Infrastructure) ToPtr() *Infrastructure {
	return &c
}

// OperationOrigin - The intended executor of the operation.
type OperationOrigin string

const (
	OperationOriginSystem OperationOrigin = "system"
	OperationOriginUser   OperationOrigin = "user"
)

// PossibleOperationOriginValues returns the possible values for the OperationOrigin const type.
func PossibleOperationOriginValues() []OperationOrigin {
	return []OperationOrigin{
		OperationOriginSystem,
		OperationOriginUser,
	}
}

// ToPtr returns a *OperationOrigin pointing to the current value.
func (c OperationOrigin) ToPtr() *OperationOrigin {
	return &c
}

// SQLManagedInstanceSKUName - The name of the SKU.
type SQLManagedInstanceSKUName string

const (
	SQLManagedInstanceSKUNameVCore SQLManagedInstanceSKUName = "vCore"
)

// PossibleSQLManagedInstanceSKUNameValues returns the possible values for the SQLManagedInstanceSKUName const type.
func PossibleSQLManagedInstanceSKUNameValues() []SQLManagedInstanceSKUName {
	return []SQLManagedInstanceSKUName{
		SQLManagedInstanceSKUNameVCore,
	}
}

// ToPtr returns a *SQLManagedInstanceSKUName pointing to the current value.
func (c SQLManagedInstanceSKUName) ToPtr() *SQLManagedInstanceSKUName {
	return &c
}

// SQLManagedInstanceSKUTier - The pricing tier for the instance.
type SQLManagedInstanceSKUTier string

const (
	SQLManagedInstanceSKUTierGeneralPurpose   SQLManagedInstanceSKUTier = "GeneralPurpose"
	SQLManagedInstanceSKUTierBusinessCritical SQLManagedInstanceSKUTier = "BusinessCritical"
)

// PossibleSQLManagedInstanceSKUTierValues returns the possible values for the SQLManagedInstanceSKUTier const type.
func PossibleSQLManagedInstanceSKUTierValues() []SQLManagedInstanceSKUTier {
	return []SQLManagedInstanceSKUTier{
		SQLManagedInstanceSKUTierGeneralPurpose,
		SQLManagedInstanceSKUTierBusinessCritical,
	}
}

// ToPtr returns a *SQLManagedInstanceSKUTier pointing to the current value.
func (c SQLManagedInstanceSKUTier) ToPtr() *SQLManagedInstanceSKUTier {
	return &c
}

// SQLVersion - SQL Server version.
type SQLVersion string

const (
	SQLVersionSQLServer2016 SQLVersion = "SQL Server 2016"
	SQLVersionSQLServer2017 SQLVersion = "SQL Server 2017"
	SQLVersionSQLServer2019 SQLVersion = "SQL Server 2019"
)

// PossibleSQLVersionValues returns the possible values for the SQLVersion const type.
func PossibleSQLVersionValues() []SQLVersion {
	return []SQLVersion{
		SQLVersionSQLServer2016,
		SQLVersionSQLServer2017,
		SQLVersionSQLServer2019,
	}
}

// ToPtr returns a *SQLVersion pointing to the current value.
func (c SQLVersion) ToPtr() *SQLVersion {
	return &c
}
