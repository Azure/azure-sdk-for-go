//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataControllersClient contains the methods for the DataControllers group.
// Don't use this type directly, use NewDataControllersClient() instead.
type DataControllersClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewDataControllersClient creates a new instance of DataControllersClient with the specified values.
func NewDataControllersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *DataControllersClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &DataControllersClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginDeleteDataController - Deletes a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) BeginDeleteDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersBeginDeleteDataControllerOptions) (DataControllersDeleteDataControllerPollerResponse, error) {
	resp, err := client.deleteDataController(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return DataControllersDeleteDataControllerPollerResponse{}, err
	}
	result := DataControllersDeleteDataControllerPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DataControllersClient.DeleteDataController", "", resp, client.pl, client.deleteDataControllerHandleError)
	if err != nil {
		return DataControllersDeleteDataControllerPollerResponse{}, err
	}
	result.Poller = &DataControllersDeleteDataControllerPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteDataController - Deletes a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) deleteDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersBeginDeleteDataControllerOptions) (*http.Response, error) {
	req, err := client.deleteDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteDataControllerHandleError(resp)
	}
	return resp, nil
}

// deleteDataControllerCreateRequest creates the DeleteDataController request.
func (client *DataControllersClient) deleteDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersBeginDeleteDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteDataControllerHandleError handles the DeleteDataController error response.
func (client *DataControllersClient) deleteDataControllerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDataController - Retrieves a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) GetDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersGetDataControllerOptions) (DataControllersGetDataControllerResponse, error) {
	req, err := client.getDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return DataControllersGetDataControllerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DataControllersGetDataControllerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DataControllersGetDataControllerResponse{}, client.getDataControllerHandleError(resp)
	}
	return client.getDataControllerHandleResponse(resp)
}

// getDataControllerCreateRequest creates the GetDataController request.
func (client *DataControllersClient) getDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersGetDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDataControllerHandleResponse handles the GetDataController response.
func (client *DataControllersClient) getDataControllerHandleResponse(resp *http.Response) (DataControllersGetDataControllerResponse, error) {
	result := DataControllersGetDataControllerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataControllerResource); err != nil {
		return DataControllersGetDataControllerResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDataControllerHandleError handles the GetDataController error response.
func (client *DataControllersClient) getDataControllerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListInGroup - List dataController resources in the resource group
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) ListInGroup(resourceGroupName string, options *DataControllersListInGroupOptions) *DataControllersListInGroupPager {
	return &DataControllersListInGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp DataControllersListInGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PageOfDataControllerResource.NextLink)
		},
	}
}

// listInGroupCreateRequest creates the ListInGroup request.
func (client *DataControllersClient) listInGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DataControllersListInGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInGroupHandleResponse handles the ListInGroup response.
func (client *DataControllersClient) listInGroupHandleResponse(resp *http.Response) (DataControllersListInGroupResponse, error) {
	result := DataControllersListInGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PageOfDataControllerResource); err != nil {
		return DataControllersListInGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listInGroupHandleError handles the ListInGroup error response.
func (client *DataControllersClient) listInGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListInSubscription - List dataController resources in the subscription
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) ListInSubscription(options *DataControllersListInSubscriptionOptions) *DataControllersListInSubscriptionPager {
	return &DataControllersListInSubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInSubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DataControllersListInSubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PageOfDataControllerResource.NextLink)
		},
	}
}

// listInSubscriptionCreateRequest creates the ListInSubscription request.
func (client *DataControllersClient) listInSubscriptionCreateRequest(ctx context.Context, options *DataControllersListInSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/dataControllers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInSubscriptionHandleResponse handles the ListInSubscription response.
func (client *DataControllersClient) listInSubscriptionHandleResponse(resp *http.Response) (DataControllersListInSubscriptionResponse, error) {
	result := DataControllersListInSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PageOfDataControllerResource); err != nil {
		return DataControllersListInSubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listInSubscriptionHandleError handles the ListInSubscription error response.
func (client *DataControllersClient) listInSubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PatchDataController - Updates a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) PatchDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerUpdate, options *DataControllersPatchDataControllerOptions) (DataControllersPatchDataControllerResponse, error) {
	req, err := client.patchDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return DataControllersPatchDataControllerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DataControllersPatchDataControllerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DataControllersPatchDataControllerResponse{}, client.patchDataControllerHandleError(resp)
	}
	return client.patchDataControllerHandleResponse(resp)
}

// patchDataControllerCreateRequest creates the PatchDataController request.
func (client *DataControllersClient) patchDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerUpdate, options *DataControllersPatchDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, dataControllerResource)
}

// patchDataControllerHandleResponse handles the PatchDataController response.
func (client *DataControllersClient) patchDataControllerHandleResponse(resp *http.Response) (DataControllersPatchDataControllerResponse, error) {
	result := DataControllersPatchDataControllerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataControllerResource); err != nil {
		return DataControllersPatchDataControllerResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// patchDataControllerHandleError handles the PatchDataController error response.
func (client *DataControllersClient) patchDataControllerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginPutDataController - Creates or replaces a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) BeginPutDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersBeginPutDataControllerOptions) (DataControllersPutDataControllerPollerResponse, error) {
	resp, err := client.putDataController(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return DataControllersPutDataControllerPollerResponse{}, err
	}
	result := DataControllersPutDataControllerPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DataControllersClient.PutDataController", "azure-async-operation", resp, client.pl, client.putDataControllerHandleError)
	if err != nil {
		return DataControllersPutDataControllerPollerResponse{}, err
	}
	result.Poller = &DataControllersPutDataControllerPoller{
		pt: pt,
	}
	return result, nil
}

// PutDataController - Creates or replaces a dataController resource
// If the operation fails it returns the *ErrorResponse error type.
func (client *DataControllersClient) putDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersBeginPutDataControllerOptions) (*http.Response, error) {
	req, err := client.putDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.putDataControllerHandleError(resp)
	}
	return resp, nil
}

// putDataControllerCreateRequest creates the PutDataController request.
func (client *DataControllersClient) putDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersBeginPutDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, dataControllerResource)
}

// putDataControllerHandleError handles the PutDataController error response.
func (client *DataControllersClient) putDataControllerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
