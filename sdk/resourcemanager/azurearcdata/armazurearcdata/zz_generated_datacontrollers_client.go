//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataControllersClient contains the methods for the DataControllers group.
// Don't use this type directly, use NewDataControllersClient() instead.
type DataControllersClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewDataControllersClient creates a new instance of DataControllersClient with the specified values.
// subscriptionID - The ID of the Azure subscription
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewDataControllersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *DataControllersClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &DataControllersClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// BeginDeleteDataController - Deletes a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the Azure resource group
// options - DataControllersClientBeginDeleteDataControllerOptions contains the optional parameters for the DataControllersClient.BeginDeleteDataController
// method.
func (client *DataControllersClient) BeginDeleteDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersClientBeginDeleteDataControllerOptions) (DataControllersClientDeleteDataControllerPollerResponse, error) {
	resp, err := client.deleteDataController(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return DataControllersClientDeleteDataControllerPollerResponse{}, err
	}
	result := DataControllersClientDeleteDataControllerPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DataControllersClient.DeleteDataController", "", resp, client.pl)
	if err != nil {
		return DataControllersClientDeleteDataControllerPollerResponse{}, err
	}
	result.Poller = &DataControllersClientDeleteDataControllerPoller{
		pt: pt,
	}
	return result, nil
}

// DeleteDataController - Deletes a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
func (client *DataControllersClient) deleteDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersClientBeginDeleteDataControllerOptions) (*http.Response, error) {
	req, err := client.deleteDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteDataControllerCreateRequest creates the DeleteDataController request.
func (client *DataControllersClient) deleteDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersClientBeginDeleteDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetDataController - Retrieves a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the Azure resource group
// options - DataControllersClientGetDataControllerOptions contains the optional parameters for the DataControllersClient.GetDataController
// method.
func (client *DataControllersClient) GetDataController(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersClientGetDataControllerOptions) (DataControllersClientGetDataControllerResponse, error) {
	req, err := client.getDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, options)
	if err != nil {
		return DataControllersClientGetDataControllerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DataControllersClientGetDataControllerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DataControllersClientGetDataControllerResponse{}, runtime.NewResponseError(resp)
	}
	return client.getDataControllerHandleResponse(resp)
}

// getDataControllerCreateRequest creates the GetDataController request.
func (client *DataControllersClient) getDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, options *DataControllersClientGetDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDataControllerHandleResponse handles the GetDataController response.
func (client *DataControllersClient) getDataControllerHandleResponse(resp *http.Response) (DataControllersClientGetDataControllerResponse, error) {
	result := DataControllersClientGetDataControllerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataControllerResource); err != nil {
		return DataControllersClientGetDataControllerResponse{}, err
	}
	return result, nil
}

// ListInGroup - List dataController resources in the resource group
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the Azure resource group
// options - DataControllersClientListInGroupOptions contains the optional parameters for the DataControllersClient.ListInGroup
// method.
func (client *DataControllersClient) ListInGroup(resourceGroupName string, options *DataControllersClientListInGroupOptions) *DataControllersClientListInGroupPager {
	return &DataControllersClientListInGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp DataControllersClientListInGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PageOfDataControllerResource.NextLink)
		},
	}
}

// listInGroupCreateRequest creates the ListInGroup request.
func (client *DataControllersClient) listInGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DataControllersClientListInGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInGroupHandleResponse handles the ListInGroup response.
func (client *DataControllersClient) listInGroupHandleResponse(resp *http.Response) (DataControllersClientListInGroupResponse, error) {
	result := DataControllersClientListInGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PageOfDataControllerResource); err != nil {
		return DataControllersClientListInGroupResponse{}, err
	}
	return result, nil
}

// ListInSubscription - List dataController resources in the subscription
// If the operation fails it returns an *azcore.ResponseError type.
// options - DataControllersClientListInSubscriptionOptions contains the optional parameters for the DataControllersClient.ListInSubscription
// method.
func (client *DataControllersClient) ListInSubscription(options *DataControllersClientListInSubscriptionOptions) *DataControllersClientListInSubscriptionPager {
	return &DataControllersClientListInSubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInSubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DataControllersClientListInSubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PageOfDataControllerResource.NextLink)
		},
	}
}

// listInSubscriptionCreateRequest creates the ListInSubscription request.
func (client *DataControllersClient) listInSubscriptionCreateRequest(ctx context.Context, options *DataControllersClientListInSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/dataControllers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInSubscriptionHandleResponse handles the ListInSubscription response.
func (client *DataControllersClient) listInSubscriptionHandleResponse(resp *http.Response) (DataControllersClientListInSubscriptionResponse, error) {
	result := DataControllersClientListInSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PageOfDataControllerResource); err != nil {
		return DataControllersClientListInSubscriptionResponse{}, err
	}
	return result, nil
}

// PatchDataController - Updates a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the Azure resource group
// dataControllerResource - The update data controller resource
// options - DataControllersClientPatchDataControllerOptions contains the optional parameters for the DataControllersClient.PatchDataController
// method.
func (client *DataControllersClient) PatchDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerUpdate, options *DataControllersClientPatchDataControllerOptions) (DataControllersClientPatchDataControllerResponse, error) {
	req, err := client.patchDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return DataControllersClientPatchDataControllerResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DataControllersClientPatchDataControllerResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DataControllersClientPatchDataControllerResponse{}, runtime.NewResponseError(resp)
	}
	return client.patchDataControllerHandleResponse(resp)
}

// patchDataControllerCreateRequest creates the PatchDataController request.
func (client *DataControllersClient) patchDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerUpdate, options *DataControllersClientPatchDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, dataControllerResource)
}

// patchDataControllerHandleResponse handles the PatchDataController response.
func (client *DataControllersClient) patchDataControllerHandleResponse(resp *http.Response) (DataControllersClientPatchDataControllerResponse, error) {
	result := DataControllersClientPatchDataControllerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DataControllerResource); err != nil {
		return DataControllersClientPatchDataControllerResponse{}, err
	}
	return result, nil
}

// BeginPutDataController - Creates or replaces a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the Azure resource group
// dataControllerResource - desc
// options - DataControllersClientBeginPutDataControllerOptions contains the optional parameters for the DataControllersClient.BeginPutDataController
// method.
func (client *DataControllersClient) BeginPutDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersClientBeginPutDataControllerOptions) (DataControllersClientPutDataControllerPollerResponse, error) {
	resp, err := client.putDataController(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return DataControllersClientPutDataControllerPollerResponse{}, err
	}
	result := DataControllersClientPutDataControllerPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DataControllersClient.PutDataController", "azure-async-operation", resp, client.pl)
	if err != nil {
		return DataControllersClientPutDataControllerPollerResponse{}, err
	}
	result.Poller = &DataControllersClientPutDataControllerPoller{
		pt: pt,
	}
	return result, nil
}

// PutDataController - Creates or replaces a dataController resource
// If the operation fails it returns an *azcore.ResponseError type.
func (client *DataControllersClient) putDataController(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersClientBeginPutDataControllerOptions) (*http.Response, error) {
	req, err := client.putDataControllerCreateRequest(ctx, resourceGroupName, dataControllerName, dataControllerResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// putDataControllerCreateRequest creates the PutDataController request.
func (client *DataControllersClient) putDataControllerCreateRequest(ctx context.Context, resourceGroupName string, dataControllerName string, dataControllerResource DataControllerResource, options *DataControllersClientBeginPutDataControllerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if dataControllerName == "" {
		return nil, errors.New("parameter dataControllerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataControllerName}", url.PathEscape(dataControllerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, dataControllerResource)
}
