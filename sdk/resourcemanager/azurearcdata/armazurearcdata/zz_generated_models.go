//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// BasicLoginInformation - Username and password for basic login authentication.
type BasicLoginInformation struct {
	// Login password.
	Password *string `json:"password,omitempty"`

	// Login username.
	Username *string `json:"username,omitempty"`
}

// DataControllerProperties - The data controller properties.
type DataControllerProperties struct {
	// Deprecated. Azure Arc Data Services data controller no longer expose any endpoint. All traffic are exposed through Kubernetes native API.
	BasicLoginInformation *BasicLoginInformation `json:"basicLoginInformation,omitempty"`

	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterID *string `json:"clusterId,omitempty"`

	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionID *string `json:"extensionId,omitempty"`

	// The infrastructure the data controller is running on.
	Infrastructure *Infrastructure `json:"infrastructure,omitempty"`

	// The raw kubernetes information
	K8SRaw map[string]interface{} `json:"k8sRaw,omitempty"`

	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *time.Time `json:"lastUploadedDate,omitempty"`

	// Log analytics workspace id and primary key
	LogAnalyticsWorkspaceConfig *LogAnalyticsWorkspaceConfig `json:"logAnalyticsWorkspaceConfig,omitempty"`

	// Login credential for logs dashboard on the Kubernetes cluster.
	LogsDashboardCredential *BasicLoginInformation `json:"logsDashboardCredential,omitempty"`

	// Login credential for metrics dashboard on the Kubernetes cluster.
	MetricsDashboardCredential *BasicLoginInformation `json:"metricsDashboardCredential,omitempty"`

	// Properties from the Kubernetes data controller
	OnPremiseProperty *OnPremiseProperty `json:"onPremiseProperty,omitempty"`

	// Deprecated. Service principal is deprecated in favor of Arc Kubernetes service extension managed identity.
	UploadServicePrincipal *UploadServicePrincipal `json:"uploadServicePrincipal,omitempty"`

	// Properties on upload watermark. Mostly timestamp for each upload data type
	UploadWatermark *UploadWatermark `json:"uploadWatermark,omitempty"`

	// READ-ONLY
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataControllerProperties.
func (d DataControllerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "basicLoginInformation", d.BasicLoginInformation)
	populate(objectMap, "clusterId", d.ClusterID)
	populate(objectMap, "extensionId", d.ExtensionID)
	populate(objectMap, "infrastructure", d.Infrastructure)
	populate(objectMap, "k8sRaw", d.K8SRaw)
	populateTimeRFC3339(objectMap, "lastUploadedDate", d.LastUploadedDate)
	populate(objectMap, "logAnalyticsWorkspaceConfig", d.LogAnalyticsWorkspaceConfig)
	populate(objectMap, "logsDashboardCredential", d.LogsDashboardCredential)
	populate(objectMap, "metricsDashboardCredential", d.MetricsDashboardCredential)
	populate(objectMap, "onPremiseProperty", d.OnPremiseProperty)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "uploadServicePrincipal", d.UploadServicePrincipal)
	populate(objectMap, "uploadWatermark", d.UploadWatermark)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataControllerProperties.
func (d *DataControllerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "basicLoginInformation":
			err = unpopulate(val, &d.BasicLoginInformation)
			delete(rawMsg, key)
		case "clusterId":
			err = unpopulate(val, &d.ClusterID)
			delete(rawMsg, key)
		case "extensionId":
			err = unpopulate(val, &d.ExtensionID)
			delete(rawMsg, key)
		case "infrastructure":
			err = unpopulate(val, &d.Infrastructure)
			delete(rawMsg, key)
		case "k8sRaw":
			err = unpopulate(val, &d.K8SRaw)
			delete(rawMsg, key)
		case "lastUploadedDate":
			err = unpopulateTimeRFC3339(val, &d.LastUploadedDate)
			delete(rawMsg, key)
		case "logAnalyticsWorkspaceConfig":
			err = unpopulate(val, &d.LogAnalyticsWorkspaceConfig)
			delete(rawMsg, key)
		case "logsDashboardCredential":
			err = unpopulate(val, &d.LogsDashboardCredential)
			delete(rawMsg, key)
		case "metricsDashboardCredential":
			err = unpopulate(val, &d.MetricsDashboardCredential)
			delete(rawMsg, key)
		case "onPremiseProperty":
			err = unpopulate(val, &d.OnPremiseProperty)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "uploadServicePrincipal":
			err = unpopulate(val, &d.UploadServicePrincipal)
			delete(rawMsg, key)
		case "uploadWatermark":
			err = unpopulate(val, &d.UploadWatermark)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DataControllerResource - Data controller resource
type DataControllerResource struct {
	TrackedResource
	// REQUIRED; The data controller's properties
	Properties *DataControllerProperties `json:"properties,omitempty"`

	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataControllerResource.
func (d DataControllerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "extendedLocation", d.ExtendedLocation)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DataControllerUpdate - Used for updating a data controller resource.
type DataControllerUpdate struct {
	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataControllerUpdate.
func (d DataControllerUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DataControllersBeginDeleteDataControllerOptions contains the optional parameters for the DataControllers.BeginDeleteDataController method.
type DataControllersBeginDeleteDataControllerOptions struct {
	// placeholder for future optional parameters
}

// DataControllersBeginPutDataControllerOptions contains the optional parameters for the DataControllers.BeginPutDataController method.
type DataControllersBeginPutDataControllerOptions struct {
	// placeholder for future optional parameters
}

// DataControllersGetDataControllerOptions contains the optional parameters for the DataControllers.GetDataController method.
type DataControllersGetDataControllerOptions struct {
	// placeholder for future optional parameters
}

// DataControllersListInGroupOptions contains the optional parameters for the DataControllers.ListInGroup method.
type DataControllersListInGroupOptions struct {
	// placeholder for future optional parameters
}

// DataControllersListInSubscriptionOptions contains the optional parameters for the DataControllers.ListInSubscription method.
type DataControllersListInSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DataControllersPatchDataControllerOptions contains the optional parameters for the DataControllers.PatchDataController method.
type DataControllersPatchDataControllerOptions struct {
	// placeholder for future optional parameters
}

// ErrorResponse - An error response from the Azure Data on Azure Arc service.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// null
	InnerError *ErrorResponseBody `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ErrorResponseBody - An error response from the Batch service.
type ErrorResponseBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*ErrorResponseBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponseBody.
func (e ErrorResponseBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ExtendedLocation - The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `json:"name,omitempty"`

	// The type of the extended location.
	Type *ExtendedLocationTypes `json:"type,omitempty"`
}

// K8SResourceRequirements - The kubernetes resource limits and requests used to restrict or reserve resource usage.
type K8SResourceRequirements struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// Limits for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum
	// is 1. Default 'memory' is '4Gi', minimum is '2Gi.
	// If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Limits map[string]*string `json:"limits,omitempty"`

	// Requests for a kubernetes resource type (e.g 'cpu', 'memory'). The 'cpu' request must be less than or equal to 'cpu' limit. Default 'cpu' is 2, minimum
	// is 1. Default 'memory' is '4Gi', minimum is
	// '2Gi. If sku.tier is GeneralPurpose, maximum 'cpu' is 24 and maximum 'memory' is '128Gi'.
	Requests map[string]*string `json:"requests,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type K8SResourceRequirements.
func (k K8SResourceRequirements) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "limits", k.Limits)
	populate(objectMap, "requests", k.Requests)
	if k.AdditionalProperties != nil {
		for key, val := range k.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type K8SResourceRequirements.
func (k *K8SResourceRequirements) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "limits":
			err = unpopulate(val, &k.Limits)
			delete(rawMsg, key)
		case "requests":
			err = unpopulate(val, &k.Requests)
			delete(rawMsg, key)
		default:
			if k.AdditionalProperties == nil {
				k.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				k.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// K8SScheduling - The kubernetes scheduling information.
type K8SScheduling struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database service
	Default *K8SSchedulingOptions `json:"default,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type K8SScheduling.
func (k K8SScheduling) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "default", k.Default)
	if k.AdditionalProperties != nil {
		for key, val := range k.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type K8SScheduling.
func (k *K8SScheduling) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "default":
			err = unpopulate(val, &k.Default)
			delete(rawMsg, key)
		default:
			if k.AdditionalProperties == nil {
				k.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				k.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// K8SSchedulingOptions - The kubernetes scheduling options. It describes restrictions used to help Kubernetes select appropriate nodes to host the database
// service
type K8SSchedulingOptions struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// The kubernetes resource limits and requests used to restrict or reserve resource usage.
	Resources *K8SResourceRequirements `json:"resources,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type K8SSchedulingOptions.
func (k K8SSchedulingOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "resources", k.Resources)
	if k.AdditionalProperties != nil {
		for key, val := range k.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type K8SSchedulingOptions.
func (k *K8SSchedulingOptions) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "resources":
			err = unpopulate(val, &k.Resources)
			delete(rawMsg, key)
		default:
			if k.AdditionalProperties == nil {
				k.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				k.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LogAnalyticsWorkspaceConfig - Log analytics workspace id and primary key
type LogAnalyticsWorkspaceConfig struct {
	// Primary key of the workspace
	PrimaryKey *string `json:"primaryKey,omitempty"`

	// Azure Log Analytics workspace ID
	WorkspaceID *string `json:"workspaceId,omitempty"`
}

// OnPremiseProperty - Properties from the Kubernetes data controller
type OnPremiseProperty struct {
	// REQUIRED; A globally unique ID identifying the associated Kubernetes cluster
	ID *string `json:"id,omitempty"`

	// REQUIRED; Certificate that contains the Kubernetes cluster public key used to verify signing
	PublicSigningKey *string `json:"publicSigningKey,omitempty"`

	// Unique thumbprint returned to customer to verify the certificate being uploaded
	SigningCertificateThumbprint *string `json:"signingCertificateThumbprint,omitempty"`
}

// Operation - Azure Data Services on Azure Arc operation definition.
type Operation struct {
	// REQUIRED; The localized display information for this particular operation / action.
	Display *OperationDisplay `json:"display,omitempty"`

	// REQUIRED; Indicates whether the operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// REQUIRED; The name of the operation being performed on this particular object.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; The intended executor of the operation.
	Origin *OperationOrigin `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; Additional descriptions for the operation.
	Properties map[string]map[string]interface{} `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	populate(objectMap, "properties", o.Properties)
	return json.Marshal(objectMap)
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// REQUIRED; The localized friendly description for the operation.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The localized friendly name for the operation.
	Operation *string `json:"operation,omitempty"`

	// REQUIRED; The localized friendly form of the resource provider name.
	Provider *string `json:"provider,omitempty"`

	// REQUIRED; The localized friendly form of the resource type related to this action/operation.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list Azure Data Services on Azure Arc operations.
type OperationListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

type PageOfDataControllerResource struct {
	// Link to retrieve next page of results.
	NextLink *string                   `json:"nextLink,omitempty"`
	Value    []*DataControllerResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PageOfDataControllerResource.
func (p PageOfDataControllerResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "type", r.Type)
}

// SQLManagedInstance - A SqlManagedInstance.
type SQLManagedInstance struct {
	TrackedResource
	// REQUIRED; null
	Properties *SQLManagedInstanceProperties `json:"properties,omitempty"`

	// The extendedLocation of the resource.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Resource sku.
	SKU *SQLManagedInstanceSKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstance.
func (s SQLManagedInstance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "extendedLocation", s.ExtendedLocation)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	return json.Marshal(objectMap)
}

// SQLManagedInstanceK8SRaw - The raw kubernetes information.
type SQLManagedInstanceK8SRaw struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// The kubernetes spec information.
	Spec *SQLManagedInstanceK8SSpec `json:"spec,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstanceK8SRaw.
func (s SQLManagedInstanceK8SRaw) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "spec", s.Spec)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLManagedInstanceK8SRaw.
func (s *SQLManagedInstanceK8SRaw) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "spec":
			err = unpopulate(val, &s.Spec)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLManagedInstanceK8SSpec - The kubernetes spec information.
type SQLManagedInstanceK8SSpec struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// This option specifies the number of SQL Managed Instance replicas that will be deployed in your Kubernetes cluster for high availability purposes. If
	// sku.tier is BusinessCritical, allowed values are
	// '2' or '3' with default of '3'. If sku.tier is GeneralPurpose, replicas must be '1'.
	Replicas *int32 `json:"replicas,omitempty"`

	// The kubernetes scheduling information.
	Scheduling *K8SScheduling `json:"scheduling,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstanceK8SSpec.
func (s SQLManagedInstanceK8SSpec) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "replicas", s.Replicas)
	populate(objectMap, "scheduling", s.Scheduling)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLManagedInstanceK8SSpec.
func (s *SQLManagedInstanceK8SSpec) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "replicas":
			err = unpopulate(val, &s.Replicas)
			delete(rawMsg, key)
		case "scheduling":
			err = unpopulate(val, &s.Scheduling)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLManagedInstanceListResult - A list of SqlManagedInstance.
type SQLManagedInstanceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*SQLManagedInstance `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstanceListResult.
func (s SQLManagedInstanceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLManagedInstanceProperties - Properties of sqlManagedInstance.
type SQLManagedInstanceProperties struct {
	// The instance admin user
	Admin *string `json:"admin,omitempty"`

	// Username and password for basic authentication.
	BasicLoginInformation *BasicLoginInformation `json:"basicLoginInformation,omitempty"`

	// If a CustomLocation is provided, this contains the ARM id of the connected cluster the custom location belongs to.
	ClusterID *string `json:"clusterId,omitempty"`

	// null
	DataControllerID *string `json:"dataControllerId,omitempty"`

	// The instance end time
	EndTime *string `json:"endTime,omitempty"`

	// If a CustomLocation is provided, this contains the ARM id of the extension the custom location belongs to.
	ExtensionID *string `json:"extensionId,omitempty"`

	// The raw kubernetes information
	K8SRaw *SQLManagedInstanceK8SRaw `json:"k8sRaw,omitempty"`

	// Last uploaded date from Kubernetes cluster. Defaults to current date time
	LastUploadedDate *time.Time `json:"lastUploadedDate,omitempty"`

	// The license type to apply for this managed instance.
	LicenseType *ArcSQLManagedInstanceLicenseType `json:"licenseType,omitempty"`

	// The instance start time
	StartTime *string `json:"startTime,omitempty"`

	// READ-ONLY
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstanceProperties.
func (s SQLManagedInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "admin", s.Admin)
	populate(objectMap, "basicLoginInformation", s.BasicLoginInformation)
	populate(objectMap, "clusterId", s.ClusterID)
	populate(objectMap, "dataControllerId", s.DataControllerID)
	populate(objectMap, "endTime", s.EndTime)
	populate(objectMap, "extensionId", s.ExtensionID)
	populate(objectMap, "k8sRaw", s.K8SRaw)
	populateTimeRFC3339(objectMap, "lastUploadedDate", s.LastUploadedDate)
	populate(objectMap, "licenseType", s.LicenseType)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "startTime", s.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLManagedInstanceProperties.
func (s *SQLManagedInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "admin":
			err = unpopulate(val, &s.Admin)
			delete(rawMsg, key)
		case "basicLoginInformation":
			err = unpopulate(val, &s.BasicLoginInformation)
			delete(rawMsg, key)
		case "clusterId":
			err = unpopulate(val, &s.ClusterID)
			delete(rawMsg, key)
		case "dataControllerId":
			err = unpopulate(val, &s.DataControllerID)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulate(val, &s.EndTime)
			delete(rawMsg, key)
		case "extensionId":
			err = unpopulate(val, &s.ExtensionID)
			delete(rawMsg, key)
		case "k8sRaw":
			err = unpopulate(val, &s.K8SRaw)
			delete(rawMsg, key)
		case "lastUploadedDate":
			err = unpopulateTimeRFC3339(val, &s.LastUploadedDate)
			delete(rawMsg, key)
		case "licenseType":
			err = unpopulate(val, &s.LicenseType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulate(val, &s.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLManagedInstanceSKU - The resource model definition representing SKU for Azure Managed Instance - Azure Arc
type SQLManagedInstanceSKU struct {
	// REQUIRED; The name of the SKU.
	Name     *SQLManagedInstanceSKUName `json:"name,omitempty"`
	Capacity *int32                     `json:"capacity,omitempty"`

	// Whether dev/test is enabled. When the dev field is set to true, the resource is used for dev/test purpose.
	Dev    *bool   `json:"dev,omitempty"`
	Family *string `json:"family,omitempty"`

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `json:"size,omitempty"`

	// The pricing tier for the instance.
	Tier *SQLManagedInstanceSKUTier `json:"tier,omitempty"`
}

// SQLManagedInstanceUpdate - An update to a SQL Managed Instance.
type SQLManagedInstanceUpdate struct {
	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLManagedInstanceUpdate.
func (s SQLManagedInstanceUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// SQLManagedInstancesBeginCreateOptions contains the optional parameters for the SQLManagedInstances.BeginCreate method.
type SQLManagedInstancesBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// SQLManagedInstancesBeginDeleteOptions contains the optional parameters for the SQLManagedInstances.BeginDelete method.
type SQLManagedInstancesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SQLManagedInstancesGetOptions contains the optional parameters for the SQLManagedInstances.Get method.
type SQLManagedInstancesGetOptions struct {
	// placeholder for future optional parameters
}

// SQLManagedInstancesListByResourceGroupOptions contains the optional parameters for the SQLManagedInstances.ListByResourceGroup method.
type SQLManagedInstancesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SQLManagedInstancesListOptions contains the optional parameters for the SQLManagedInstances.List method.
type SQLManagedInstancesListOptions struct {
	// placeholder for future optional parameters
}

// SQLManagedInstancesUpdateOptions contains the optional parameters for the SQLManagedInstances.Update method.
type SQLManagedInstancesUpdateOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstance - A SqlServerInstance.
type SQLServerInstance struct {
	TrackedResource
	// null
	Properties *SQLServerInstanceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLServerInstance.
func (s SQLServerInstance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SQLServerInstanceListResult - A list of SqlServerInstance.
type SQLServerInstanceListResult struct {
	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Array of results.
	Value []*SQLServerInstance `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLServerInstanceListResult.
func (s SQLServerInstanceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SQLServerInstanceProperties - Properties of SqlServerInstance.
type SQLServerInstanceProperties struct {
	// REQUIRED; ARM Resource id of the container resource (Azure Arc for Servers).
	ContainerResourceID *string `json:"containerResourceId,omitempty"`

	// REQUIRED; The cloud connectivity status.
	Status *ConnectionStatus `json:"status,omitempty"`

	// Status of Azure Defender.
	AzureDefenderStatus *DefenderStatus `json:"azureDefenderStatus,omitempty"`

	// Timestamp of last Azure Defender status update.
	AzureDefenderStatusLastUpdated *time.Time `json:"azureDefenderStatusLastUpdated,omitempty"`

	// SQL Server collation.
	Collation *string `json:"collation,omitempty"`

	// SQL Server current version.
	CurrentVersion *string `json:"currentVersion,omitempty"`

	// SQL Server edition.
	Edition *EditionType `json:"edition,omitempty"`

	// SQL Server instance name.
	InstanceName *string `json:"instanceName,omitempty"`

	// SQL Server license type.
	LicenseType *ArcSQLServerLicenseType `json:"licenseType,omitempty"`

	// SQL Server update level.
	PatchLevel *string `json:"patchLevel,omitempty"`

	// SQL Server product ID.
	ProductID *string `json:"productId,omitempty"`

	// Dynamic TCP ports used by SQL Server.
	TCPDynamicPorts *string `json:"tcpDynamicPorts,omitempty"`

	// Static TCP ports used by SQL Server.
	TCPStaticPorts *string `json:"tcpStaticPorts,omitempty"`

	// The number of logical processors used by the SQL Server instance.
	VCore *string `json:"vCore,omitempty"`

	// SQL Server version.
	Version *SQLVersion `json:"version,omitempty"`

	// READ-ONLY; The time when the resource was created.
	CreateTime *string `json:"createTime,omitempty" azure:"ro"`

	// READ-ONLY
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLServerInstanceProperties.
func (s SQLServerInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureDefenderStatus", s.AzureDefenderStatus)
	populateTimeRFC3339(objectMap, "azureDefenderStatusLastUpdated", s.AzureDefenderStatusLastUpdated)
	populate(objectMap, "collation", s.Collation)
	populate(objectMap, "containerResourceId", s.ContainerResourceID)
	populate(objectMap, "createTime", s.CreateTime)
	populate(objectMap, "currentVersion", s.CurrentVersion)
	populate(objectMap, "edition", s.Edition)
	populate(objectMap, "instanceName", s.InstanceName)
	populate(objectMap, "licenseType", s.LicenseType)
	populate(objectMap, "patchLevel", s.PatchLevel)
	populate(objectMap, "productId", s.ProductID)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "tcpDynamicPorts", s.TCPDynamicPorts)
	populate(objectMap, "tcpStaticPorts", s.TCPStaticPorts)
	populate(objectMap, "vCore", s.VCore)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLServerInstanceProperties.
func (s *SQLServerInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureDefenderStatus":
			err = unpopulate(val, &s.AzureDefenderStatus)
			delete(rawMsg, key)
		case "azureDefenderStatusLastUpdated":
			err = unpopulateTimeRFC3339(val, &s.AzureDefenderStatusLastUpdated)
			delete(rawMsg, key)
		case "collation":
			err = unpopulate(val, &s.Collation)
			delete(rawMsg, key)
		case "containerResourceId":
			err = unpopulate(val, &s.ContainerResourceID)
			delete(rawMsg, key)
		case "createTime":
			err = unpopulate(val, &s.CreateTime)
			delete(rawMsg, key)
		case "currentVersion":
			err = unpopulate(val, &s.CurrentVersion)
			delete(rawMsg, key)
		case "edition":
			err = unpopulate(val, &s.Edition)
			delete(rawMsg, key)
		case "instanceName":
			err = unpopulate(val, &s.InstanceName)
			delete(rawMsg, key)
		case "licenseType":
			err = unpopulate(val, &s.LicenseType)
			delete(rawMsg, key)
		case "patchLevel":
			err = unpopulate(val, &s.PatchLevel)
			delete(rawMsg, key)
		case "productId":
			err = unpopulate(val, &s.ProductID)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "tcpDynamicPorts":
			err = unpopulate(val, &s.TCPDynamicPorts)
			delete(rawMsg, key)
		case "tcpStaticPorts":
			err = unpopulate(val, &s.TCPStaticPorts)
			delete(rawMsg, key)
		case "vCore":
			err = unpopulate(val, &s.VCore)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLServerInstanceUpdate - An update to a SQL Server Instance.
type SQLServerInstanceUpdate struct {
	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLServerInstanceUpdate.
func (s SQLServerInstanceUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// SQLServerInstancesBeginCreateOptions contains the optional parameters for the SQLServerInstances.BeginCreate method.
type SQLServerInstancesBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstancesBeginDeleteOptions contains the optional parameters for the SQLServerInstances.BeginDelete method.
type SQLServerInstancesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstancesGetOptions contains the optional parameters for the SQLServerInstances.Get method.
type SQLServerInstancesGetOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstancesListByResourceGroupOptions contains the optional parameters for the SQLServerInstances.ListByResourceGroup method.
type SQLServerInstancesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstancesListOptions contains the optional parameters for the SQLServerInstances.List method.
type SQLServerInstancesListOptions struct {
	// placeholder for future optional parameters
}

// SQLServerInstancesUpdateOptions contains the optional parameters for the SQLServerInstances.Update method.
type SQLServerInstancesUpdateOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// UploadServicePrincipal - Service principal for uploading billing, metrics and logs.
type UploadServicePrincipal struct {
	// Authority for the service principal. Example: https://login.microsoftonline.com/
	Authority *string `json:"authority,omitempty"`

	// Client ID of the service principal for uploading data.
	ClientID *string `json:"clientId,omitempty"`

	// Secret of the service principal
	ClientSecret *string `json:"clientSecret,omitempty"`

	// Tenant ID of the service principal.
	TenantID *string `json:"tenantId,omitempty"`
}

// UploadWatermark - Properties on upload watermark. Mostly timestamp for each upload data type
type UploadWatermark struct {
	// Last uploaded date for logs from kubernetes cluster. Defaults to current date time
	Logs *time.Time `json:"logs,omitempty"`

	// Last uploaded date for metrics from kubernetes cluster. Defaults to current date time
	Metrics *time.Time `json:"metrics,omitempty"`

	// Last uploaded date for usages from kubernetes cluster. Defaults to current date time
	Usages *time.Time `json:"usages,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UploadWatermark.
func (u UploadWatermark) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "logs", u.Logs)
	populateTimeRFC3339(objectMap, "metrics", u.Metrics)
	populateTimeRFC3339(objectMap, "usages", u.Usages)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UploadWatermark.
func (u *UploadWatermark) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "logs":
			err = unpopulateTimeRFC3339(val, &u.Logs)
			delete(rawMsg, key)
		case "metrics":
			err = unpopulateTimeRFC3339(val, &u.Metrics)
			delete(rawMsg, key)
		case "usages":
			err = unpopulateTimeRFC3339(val, &u.Usages)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
