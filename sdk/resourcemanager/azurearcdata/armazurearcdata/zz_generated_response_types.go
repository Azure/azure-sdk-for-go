//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurearcdata

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// DataControllersClientDeleteDataControllerPollerResponse contains the response from method DataControllersClient.DeleteDataController.
type DataControllersClientDeleteDataControllerPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataControllersClientDeleteDataControllerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataControllersClientDeleteDataControllerPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataControllersClientDeleteDataControllerResponse, error) {
	respType := DataControllersClientDeleteDataControllerResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataControllersClientDeleteDataControllerPollerResponse from the provided client and resume token.
func (l *DataControllersClientDeleteDataControllerPollerResponse) Resume(ctx context.Context, client *DataControllersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataControllersClient.DeleteDataController", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataControllersClientDeleteDataControllerPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataControllersClientDeleteDataControllerResponse contains the response from method DataControllersClient.DeleteDataController.
type DataControllersClientDeleteDataControllerResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientGetDataControllerResponse contains the response from method DataControllersClient.GetDataController.
type DataControllersClientGetDataControllerResponse struct {
	DataControllersClientGetDataControllerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientGetDataControllerResult contains the result from method DataControllersClient.GetDataController.
type DataControllersClientGetDataControllerResult struct {
	DataControllerResource
}

// DataControllersClientListInGroupResponse contains the response from method DataControllersClient.ListInGroup.
type DataControllersClientListInGroupResponse struct {
	DataControllersClientListInGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientListInGroupResult contains the result from method DataControllersClient.ListInGroup.
type DataControllersClientListInGroupResult struct {
	PageOfDataControllerResource
}

// DataControllersClientListInSubscriptionResponse contains the response from method DataControllersClient.ListInSubscription.
type DataControllersClientListInSubscriptionResponse struct {
	DataControllersClientListInSubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientListInSubscriptionResult contains the result from method DataControllersClient.ListInSubscription.
type DataControllersClientListInSubscriptionResult struct {
	PageOfDataControllerResource
}

// DataControllersClientPatchDataControllerResponse contains the response from method DataControllersClient.PatchDataController.
type DataControllersClientPatchDataControllerResponse struct {
	DataControllersClientPatchDataControllerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientPatchDataControllerResult contains the result from method DataControllersClient.PatchDataController.
type DataControllersClientPatchDataControllerResult struct {
	DataControllerResource
}

// DataControllersClientPutDataControllerPollerResponse contains the response from method DataControllersClient.PutDataController.
type DataControllersClientPutDataControllerPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataControllersClientPutDataControllerPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataControllersClientPutDataControllerPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataControllersClientPutDataControllerResponse, error) {
	respType := DataControllersClientPutDataControllerResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataControllerResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataControllersClientPutDataControllerPollerResponse from the provided client and resume token.
func (l *DataControllersClientPutDataControllerPollerResponse) Resume(ctx context.Context, client *DataControllersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataControllersClient.PutDataController", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataControllersClientPutDataControllerPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataControllersClientPutDataControllerResponse contains the response from method DataControllersClient.PutDataController.
type DataControllersClientPutDataControllerResponse struct {
	DataControllersClientPutDataControllerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataControllersClientPutDataControllerResult contains the result from method DataControllersClient.PutDataController.
type DataControllersClientPutDataControllerResult struct {
	DataControllerResource
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// SQLManagedInstancesClientCreatePollerResponse contains the response from method SQLManagedInstancesClient.Create.
type SQLManagedInstancesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLManagedInstancesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLManagedInstancesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLManagedInstancesClientCreateResponse, error) {
	respType := SQLManagedInstancesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLManagedInstance)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLManagedInstancesClientCreatePollerResponse from the provided client and resume token.
func (l *SQLManagedInstancesClientCreatePollerResponse) Resume(ctx context.Context, client *SQLManagedInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLManagedInstancesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SQLManagedInstancesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLManagedInstancesClientCreateResponse contains the response from method SQLManagedInstancesClient.Create.
type SQLManagedInstancesClientCreateResponse struct {
	SQLManagedInstancesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientCreateResult contains the result from method SQLManagedInstancesClient.Create.
type SQLManagedInstancesClientCreateResult struct {
	SQLManagedInstance
}

// SQLManagedInstancesClientDeletePollerResponse contains the response from method SQLManagedInstancesClient.Delete.
type SQLManagedInstancesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLManagedInstancesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLManagedInstancesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLManagedInstancesClientDeleteResponse, error) {
	respType := SQLManagedInstancesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLManagedInstancesClientDeletePollerResponse from the provided client and resume token.
func (l *SQLManagedInstancesClientDeletePollerResponse) Resume(ctx context.Context, client *SQLManagedInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLManagedInstancesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SQLManagedInstancesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLManagedInstancesClientDeleteResponse contains the response from method SQLManagedInstancesClient.Delete.
type SQLManagedInstancesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientGetResponse contains the response from method SQLManagedInstancesClient.Get.
type SQLManagedInstancesClientGetResponse struct {
	SQLManagedInstancesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientGetResult contains the result from method SQLManagedInstancesClient.Get.
type SQLManagedInstancesClientGetResult struct {
	SQLManagedInstance
}

// SQLManagedInstancesClientListByResourceGroupResponse contains the response from method SQLManagedInstancesClient.ListByResourceGroup.
type SQLManagedInstancesClientListByResourceGroupResponse struct {
	SQLManagedInstancesClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientListByResourceGroupResult contains the result from method SQLManagedInstancesClient.ListByResourceGroup.
type SQLManagedInstancesClientListByResourceGroupResult struct {
	SQLManagedInstanceListResult
}

// SQLManagedInstancesClientListResponse contains the response from method SQLManagedInstancesClient.List.
type SQLManagedInstancesClientListResponse struct {
	SQLManagedInstancesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientListResult contains the result from method SQLManagedInstancesClient.List.
type SQLManagedInstancesClientListResult struct {
	SQLManagedInstanceListResult
}

// SQLManagedInstancesClientUpdateResponse contains the response from method SQLManagedInstancesClient.Update.
type SQLManagedInstancesClientUpdateResponse struct {
	SQLManagedInstancesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLManagedInstancesClientUpdateResult contains the result from method SQLManagedInstancesClient.Update.
type SQLManagedInstancesClientUpdateResult struct {
	SQLManagedInstance
}

// SQLServerInstancesClientCreatePollerResponse contains the response from method SQLServerInstancesClient.Create.
type SQLServerInstancesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLServerInstancesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLServerInstancesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLServerInstancesClientCreateResponse, error) {
	respType := SQLServerInstancesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLServerInstance)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLServerInstancesClientCreatePollerResponse from the provided client and resume token.
func (l *SQLServerInstancesClientCreatePollerResponse) Resume(ctx context.Context, client *SQLServerInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLServerInstancesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SQLServerInstancesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLServerInstancesClientCreateResponse contains the response from method SQLServerInstancesClient.Create.
type SQLServerInstancesClientCreateResponse struct {
	SQLServerInstancesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientCreateResult contains the result from method SQLServerInstancesClient.Create.
type SQLServerInstancesClientCreateResult struct {
	SQLServerInstance
}

// SQLServerInstancesClientDeletePollerResponse contains the response from method SQLServerInstancesClient.Delete.
type SQLServerInstancesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLServerInstancesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLServerInstancesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLServerInstancesClientDeleteResponse, error) {
	respType := SQLServerInstancesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLServerInstancesClientDeletePollerResponse from the provided client and resume token.
func (l *SQLServerInstancesClientDeletePollerResponse) Resume(ctx context.Context, client *SQLServerInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLServerInstancesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SQLServerInstancesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLServerInstancesClientDeleteResponse contains the response from method SQLServerInstancesClient.Delete.
type SQLServerInstancesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientGetResponse contains the response from method SQLServerInstancesClient.Get.
type SQLServerInstancesClientGetResponse struct {
	SQLServerInstancesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientGetResult contains the result from method SQLServerInstancesClient.Get.
type SQLServerInstancesClientGetResult struct {
	SQLServerInstance
}

// SQLServerInstancesClientListByResourceGroupResponse contains the response from method SQLServerInstancesClient.ListByResourceGroup.
type SQLServerInstancesClientListByResourceGroupResponse struct {
	SQLServerInstancesClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientListByResourceGroupResult contains the result from method SQLServerInstancesClient.ListByResourceGroup.
type SQLServerInstancesClientListByResourceGroupResult struct {
	SQLServerInstanceListResult
}

// SQLServerInstancesClientListResponse contains the response from method SQLServerInstancesClient.List.
type SQLServerInstancesClientListResponse struct {
	SQLServerInstancesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientListResult contains the result from method SQLServerInstancesClient.List.
type SQLServerInstancesClientListResult struct {
	SQLServerInstanceListResult
}

// SQLServerInstancesClientUpdateResponse contains the response from method SQLServerInstancesClient.Update.
type SQLServerInstancesClientUpdateResponse struct {
	SQLServerInstancesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLServerInstancesClientUpdateResult contains the result from method SQLServerInstancesClient.Update.
type SQLServerInstancesClientUpdateResult struct {
	SQLServerInstance
}
