//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LinkedSubscriptionsClient contains the methods for the LinkedSubscriptions group.
// Don't use this type directly, use NewLinkedSubscriptionsClient() instead.
type LinkedSubscriptionsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewLinkedSubscriptionsClient creates a new instance of LinkedSubscriptionsClient with the specified values.
func NewLinkedSubscriptionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *LinkedSubscriptionsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &LinkedSubscriptionsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Create or update a linked subscription resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) CreateOrUpdate(ctx context.Context, resourceGroup string, linkedSubscriptionName string, resource LinkedSubscriptionParameter, options *LinkedSubscriptionsCreateOrUpdateOptions) (LinkedSubscriptionsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroup, linkedSubscriptionName, resource, options)
	if err != nil {
		return LinkedSubscriptionsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LinkedSubscriptionsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return LinkedSubscriptionsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *LinkedSubscriptionsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroup string, linkedSubscriptionName string, resource LinkedSubscriptionParameter, options *LinkedSubscriptionsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if linkedSubscriptionName == "" {
		return nil, errors.New("parameter linkedSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkedSubscriptionName}", url.PathEscape(linkedSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, resource)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *LinkedSubscriptionsClient) createOrUpdateHandleResponse(resp *http.Response) (LinkedSubscriptionsCreateOrUpdateResponse, error) {
	result := LinkedSubscriptionsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedSubscription); err != nil {
		return LinkedSubscriptionsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *LinkedSubscriptionsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete the requested Linked Subscription resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) Delete(ctx context.Context, resourceGroup string, linkedSubscriptionName string, options *LinkedSubscriptionsDeleteOptions) (LinkedSubscriptionsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroup, linkedSubscriptionName, options)
	if err != nil {
		return LinkedSubscriptionsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LinkedSubscriptionsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return LinkedSubscriptionsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return LinkedSubscriptionsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *LinkedSubscriptionsClient) deleteCreateRequest(ctx context.Context, resourceGroup string, linkedSubscriptionName string, options *LinkedSubscriptionsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if linkedSubscriptionName == "" {
		return nil, errors.New("parameter linkedSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkedSubscriptionName}", url.PathEscape(linkedSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *LinkedSubscriptionsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Returns the properties of a Linked Subscription resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) Get(ctx context.Context, resourceGroup string, linkedSubscriptionName string, options *LinkedSubscriptionsGetOptions) (LinkedSubscriptionsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroup, linkedSubscriptionName, options)
	if err != nil {
		return LinkedSubscriptionsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LinkedSubscriptionsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LinkedSubscriptionsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *LinkedSubscriptionsClient) getCreateRequest(ctx context.Context, resourceGroup string, linkedSubscriptionName string, options *LinkedSubscriptionsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if linkedSubscriptionName == "" {
		return nil, errors.New("parameter linkedSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkedSubscriptionName}", url.PathEscape(linkedSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LinkedSubscriptionsClient) getHandleResponse(resp *http.Response) (LinkedSubscriptionsGetResponse, error) {
	result := LinkedSubscriptionsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedSubscription); err != nil {
		return LinkedSubscriptionsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *LinkedSubscriptionsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - Returns a list of all linked subscriptions under current resource group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) ListByResourceGroup(resourceGroup string, options *LinkedSubscriptionsListByResourceGroupOptions) *LinkedSubscriptionsListByResourceGroupPager {
	return &LinkedSubscriptionsListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroup, options)
		},
		advancer: func(ctx context.Context, resp LinkedSubscriptionsListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.LinkedSubscriptionsList.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *LinkedSubscriptionsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroup string, options *LinkedSubscriptionsListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *LinkedSubscriptionsClient) listByResourceGroupHandleResponse(resp *http.Response) (LinkedSubscriptionsListByResourceGroupResponse, error) {
	result := LinkedSubscriptionsListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedSubscriptionsList); err != nil {
		return LinkedSubscriptionsListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *LinkedSubscriptionsClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Returns a list of all linked subscriptions under current subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) ListBySubscription(options *LinkedSubscriptionsListBySubscriptionOptions) *LinkedSubscriptionsListBySubscriptionPager {
	return &LinkedSubscriptionsListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp LinkedSubscriptionsListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.LinkedSubscriptionsList.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *LinkedSubscriptionsClient) listBySubscriptionCreateRequest(ctx context.Context, options *LinkedSubscriptionsListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStack/linkedSubscriptions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *LinkedSubscriptionsClient) listBySubscriptionHandleResponse(resp *http.Response) (LinkedSubscriptionsListBySubscriptionResponse, error) {
	result := LinkedSubscriptionsListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedSubscriptionsList); err != nil {
		return LinkedSubscriptionsListBySubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *LinkedSubscriptionsClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Patch a Linked Subscription resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LinkedSubscriptionsClient) Update(ctx context.Context, resourceGroup string, linkedSubscriptionName string, resource LinkedSubscriptionParameter, options *LinkedSubscriptionsUpdateOptions) (LinkedSubscriptionsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroup, linkedSubscriptionName, resource, options)
	if err != nil {
		return LinkedSubscriptionsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LinkedSubscriptionsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LinkedSubscriptionsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *LinkedSubscriptionsClient) updateCreateRequest(ctx context.Context, resourceGroup string, linkedSubscriptionName string, resource LinkedSubscriptionParameter, options *LinkedSubscriptionsUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/linkedSubscriptions/{linkedSubscriptionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if linkedSubscriptionName == "" {
		return nil, errors.New("parameter linkedSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{linkedSubscriptionName}", url.PathEscape(linkedSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, resource)
}

// updateHandleResponse handles the Update response.
func (client *LinkedSubscriptionsClient) updateHandleResponse(resp *http.Response) (LinkedSubscriptionsUpdateResponse, error) {
	result := LinkedSubscriptionsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedSubscription); err != nil {
		return LinkedSubscriptionsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *LinkedSubscriptionsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
