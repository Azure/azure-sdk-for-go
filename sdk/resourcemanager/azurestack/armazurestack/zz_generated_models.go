//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// ActivationKeyResult - The resource containing the Azure Stack activation key.
type ActivationKeyResult struct {
	// Azure Stack activation key.
	ActivationKey *string `json:"activationKey,omitempty"`
}

// CloudManifestFileDeploymentData - Cloud specific manifest data for AzureStack deployment.
type CloudManifestFileDeploymentData struct {
	// Signing verification public key.
	CustomCloudVerificationKey *string `json:"customCloudVerificationKey,omitempty"`

	// Environment endpoints.
	CustomEnvironmentEndpoints *CloudManifestFileEnvironmentEndpoints `json:"customEnvironmentEndpoints,omitempty"`

	// Dsms external certificates.
	ExternalDsmsCertificates *string `json:"externalDsmsCertificates,omitempty"`
}

// CloudManifestFileEnvironmentEndpoints - Cloud specific environment endpoints for AzureStack deployment.
type CloudManifestFileEnvironmentEndpoints struct {
	// ARM endpoint.
	CustomCloudArmEndpoint *string `json:"customCloudArmEndpoint,omitempty"`

	// Dsms endpoint.
	ExternalDsmsEndpoint *string `json:"externalDsmsEndpoint,omitempty"`
}

// CloudManifestFileGetOptions contains the optional parameters for the CloudManifestFile.Get method.
type CloudManifestFileGetOptions struct {
	// Signing verification key version creation date.
	VersionCreationDate *string
}

// CloudManifestFileListOptions contains the optional parameters for the CloudManifestFile.List method.
type CloudManifestFileListOptions struct {
	// placeholder for future optional parameters
}

// CloudManifestFileProperties - Cloud specific manifest JSON properties.
type CloudManifestFileProperties struct {
	// Cloud specific manifest data.
	DeploymentData *CloudManifestFileDeploymentData `json:"deploymentData,omitempty"`

	// Signature of the cloud specific manifest data.
	Signature *string `json:"signature,omitempty"`
}

// CloudManifestFileResponse - Cloud specific manifest GET response.
type CloudManifestFileResponse struct {
	Resource
	// Cloud specific manifest data.
	Properties *CloudManifestFileProperties `json:"properties,omitempty"`
}

// Compatibility - Product compatibility
type Compatibility struct {
	// Full error message if any compatibility issues are found
	Description *string `json:"description,omitempty"`

	// Tells if product is compatible with current device
	IsCompatible *bool `json:"isCompatible,omitempty"`

	// List of all issues found
	Issues []*CompatibilityIssue `json:"issues,omitempty"`

	// Short error message if any compatibility issues are found
	Message *string `json:"message,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Compatibility.
func (c Compatibility) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", c.Description)
	populate(objectMap, "isCompatible", c.IsCompatible)
	populate(objectMap, "issues", c.Issues)
	populate(objectMap, "message", c.Message)
	return json.Marshal(objectMap)
}

// CustomerSubscription - Customer subscription.
type CustomerSubscription struct {
	Resource
	// Customer subscription properties.
	Properties *CustomerSubscriptionProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// CustomerSubscriptionList - Pageable list of customer subscriptions.
type CustomerSubscriptionList struct {
	// URI to the next page.
	NextLink *string `json:"nextLink,omitempty"`

	// List of customer subscriptions.
	Value []*CustomerSubscription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomerSubscriptionList.
func (c CustomerSubscriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CustomerSubscriptionProperties - Customer subscription properties.
type CustomerSubscriptionProperties struct {
	// Tenant Id.
	TenantID *string `json:"tenantId,omitempty"`
}

// CustomerSubscriptionsCreateOptions contains the optional parameters for the CustomerSubscriptions.Create method.
type CustomerSubscriptionsCreateOptions struct {
	// placeholder for future optional parameters
}

// CustomerSubscriptionsDeleteOptions contains the optional parameters for the CustomerSubscriptions.Delete method.
type CustomerSubscriptionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// CustomerSubscriptionsGetOptions contains the optional parameters for the CustomerSubscriptions.Get method.
type CustomerSubscriptionsGetOptions struct {
	// placeholder for future optional parameters
}

// CustomerSubscriptionsListOptions contains the optional parameters for the CustomerSubscriptions.List method.
type CustomerSubscriptionsListOptions struct {
	// placeholder for future optional parameters
}

// DataDiskImage - Data disk image.
type DataDiskImage struct {
	// READ-ONLY; The LUN.
	Lun *int32 `json:"lun,omitempty" azure:"ro"`

	// READ-ONLY; SAS key for source blob.
	SourceBlobSasURI *string `json:"sourceBlobSasUri,omitempty" azure:"ro"`
}

// DeviceConfiguration - Device Configuration.
type DeviceConfiguration struct {
	// READ-ONLY; Version of the device.
	DeviceVersion *string `json:"deviceVersion,omitempty" azure:"ro"`

	// READ-ONLY; Identity system of the device.
	IdentitySystem *Category `json:"identitySystem,omitempty" azure:"ro"`
}

// Display - Contains the localized display information for this particular operation or action.
type Display struct {
	// The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both
	// tooltips and detailed views.
	Description *string `json:"description,omitempty"`

	// The localized, friendly name for the operation. Use the name as it will displayed to the user.
	Operation *string `json:"operation,omitempty"`

	// The localized, friendly version of the resource provider name.
	Provider *string `json:"provider,omitempty"`

	// The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for
	// the resource provider.
	Resource *string `json:"resource,omitempty"`
}

// ErrorDetails - The details of the error.
type ErrorDetails struct {
	// READ-ONLY; Error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The target of the particular error.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// ErrorResponse - Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The details of the error.
	InnerError *ErrorDetails `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ExtendedProduct - Extended description about the product required for installing it into Azure Stack.
type ExtendedProduct struct {
	// READ-ONLY; The URI to the .azpkg file that provides information required for showing product in the gallery.
	GalleryPackageBlobSasURI *string `json:"galleryPackageBlobSasUri,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the kind of the product (virtualMachine or virtualMachineExtension).
	ProductKind *string `json:"productKind,omitempty" azure:"ro"`

	// READ-ONLY; Specifies additional properties describing the product.
	Properties *ExtendedProductProperties `json:"properties,omitempty" azure:"ro"`
}

// ExtendedProductProperties - Product information.
type ExtendedProductProperties struct {
	VirtualMachineExtensionProductProperties
	VirtualMachineProductProperties
}

// IconUris - Links to product icons.
type IconUris struct {
	// URI to hero icon.
	Hero *string `json:"hero,omitempty"`

	// URI to large icon.
	Large *string `json:"large,omitempty"`

	// URI to medium icon.
	Medium *string `json:"medium,omitempty"`

	// URI to small icon.
	Small *string `json:"small,omitempty"`

	// URI to wide icon.
	Wide *string `json:"wide,omitempty"`
}

// LinkedSubscription - Linked Subscription information.
type LinkedSubscription struct {
	TrackedResource
	// Linked Subscription resource.
	Properties *LinkedSubscriptionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedSubscription.
func (l LinkedSubscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	l.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", l.Properties)
	return json.Marshal(objectMap)
}

// LinkedSubscriptionParameter - Linked Subscription resource
type LinkedSubscriptionParameter struct {
	// REQUIRED; Location of the resource.
	Location *Location `json:"location,omitempty"`

	// REQUIRED; Properties of the Linked Subscription resource
	Properties *LinkedSubscriptionParameterProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedSubscriptionParameter.
func (l LinkedSubscriptionParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", l.Location)
	populate(objectMap, "properties", l.Properties)
	return json.Marshal(objectMap)
}

// LinkedSubscriptionParameterProperties - Properties of the Linked Subscription resource
type LinkedSubscriptionParameterProperties struct {
	// REQUIRED; The identifier associated with the device subscription.
	LinkedSubscriptionID *string `json:"linkedSubscriptionId,omitempty"`

	// REQUIRED; The identifier associated with the device registration.
	RegistrationResourceID *string `json:"registrationResourceId,omitempty"`
}

// LinkedSubscriptionProperties - Properties portion of the linked subscription resource.
type LinkedSubscriptionProperties struct {
	// The identifier associated with the device subscription.
	LinkedSubscriptionID *string `json:"linkedSubscriptionId,omitempty"`

	// The identifier associated with the device registration.
	RegistrationResourceID *string `json:"registrationResourceId,omitempty"`

	// READ-ONLY; The status of the remote management connection of the Azure Stack device.
	DeviceConnectionStatus *string `json:"deviceConnectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; The identifier of the Azure Stack device for remote management.
	DeviceID *string `json:"deviceId,omitempty" azure:"ro"`

	// READ-ONLY; The connection state of the Azure Stack device.
	DeviceLinkState *string `json:"deviceLinkState,omitempty" azure:"ro"`

	// READ-ONLY; The object identifier associated with the Azure Stack device connecting to Azure.
	DeviceObjectID *string `json:"deviceObjectId,omitempty" azure:"ro"`

	// READ-ONLY; The last remote management connection time for the Azure Stack device connected to the linked subscription resource.
	LastConnectedTime *string `json:"lastConnectedTime,omitempty" azure:"ro"`
}

// LinkedSubscriptionsCreateOrUpdateOptions contains the optional parameters for the LinkedSubscriptions.CreateOrUpdate method.
type LinkedSubscriptionsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkedSubscriptionsDeleteOptions contains the optional parameters for the LinkedSubscriptions.Delete method.
type LinkedSubscriptionsDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedSubscriptionsGetOptions contains the optional parameters for the LinkedSubscriptions.Get method.
type LinkedSubscriptionsGetOptions struct {
	// placeholder for future optional parameters
}

// LinkedSubscriptionsList - List of linked subscriptions with paging support.
type LinkedSubscriptionsList struct {
	// URI to the next page.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Linked Subscriptions
	Value []*LinkedSubscription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedSubscriptionsList.
func (l LinkedSubscriptionsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LinkedSubscriptionsListByResourceGroupOptions contains the optional parameters for the LinkedSubscriptions.ListByResourceGroup method.
type LinkedSubscriptionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// LinkedSubscriptionsListBySubscriptionOptions contains the optional parameters for the LinkedSubscriptions.ListBySubscription method.
type LinkedSubscriptionsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// LinkedSubscriptionsUpdateOptions contains the optional parameters for the LinkedSubscriptions.Update method.
type LinkedSubscriptionsUpdateOptions struct {
	// placeholder for future optional parameters
}

// MarketplaceProductLogUpdate - Update details for product log.
type MarketplaceProductLogUpdate struct {
	// READ-ONLY; Error details related to operation.
	Details *string `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Error related to the operation.
	Error *string `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; Operation to log.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Operation status to log.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// Operation - Describes the supported REST operation.
type Operation struct {
	// Contains the localized display information for this particular operation or action.
	Display *Display `json:"display,omitempty"`

	// The name of the operation being performed on this particular object.
	Name *string `json:"name,omitempty"`

	// The intended executor of the operation.
	Origin *string `json:"origin,omitempty"`
}

// OperationList - List of Operations
type OperationList struct {
	// URI to the next page of operations.
	NextLink *string `json:"nextLink,omitempty"`

	// Array of operations
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// OsDiskImage - OS disk image.
type OsDiskImage struct {
	// READ-ONLY; OS operating system type.
	OperatingSystem *OperatingSystem `json:"operatingSystem,omitempty" azure:"ro"`

	// READ-ONLY; SAS key for source blob.
	SourceBlobSasURI *string `json:"sourceBlobSasUri,omitempty" azure:"ro"`
}

// Product information.
type Product struct {
	Resource
	// Properties of the product resource.
	Properties *ProductNestedProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// ProductLink - Link with additional information about a product.
type ProductLink struct {
	// The description of the link.
	DisplayName *string `json:"displayName,omitempty"`

	// The URI corresponding to the link.
	URI *string `json:"uri,omitempty"`
}

// ProductList - Pageable list of products.
type ProductList struct {
	// URI to the next page.
	NextLink *string `json:"nextLink,omitempty"`

	// List of products.
	Value []*Product `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductList.
func (p ProductList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProductLog - Product action log.
type ProductLog struct {
	// READ-ONLY; Operation error details.
	Details *string `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Operation end datetime.
	EndDate *string `json:"endDate,omitempty" azure:"ro"`

	// READ-ONLY; Operation error data.
	Error *string `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; Log ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Logged operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Logged product ID.
	ProductID *string `json:"productId,omitempty" azure:"ro"`

	// READ-ONLY; Logged registration name.
	RegistrationName *string `json:"registrationName,omitempty" azure:"ro"`

	// READ-ONLY; Logged resource group name.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" azure:"ro"`

	// READ-ONLY; Operation start datetime.
	StartDate *string `json:"startDate,omitempty" azure:"ro"`

	// READ-ONLY; Operation status.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Logged subscription ID.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`
}

// ProductNestedProperties - Properties portion of the product resource.
type ProductNestedProperties struct {
	// The part number used for billing purposes.
	BillingPartNumber *string `json:"billingPartNumber,omitempty"`

	// Product compatibility with current device.
	Compatibility *Compatibility `json:"compatibility,omitempty"`

	// The description of the product.
	Description *string `json:"description,omitempty"`

	// The display name of the product.
	DisplayName *string `json:"displayName,omitempty"`

	// The identifier of the gallery item corresponding to the product.
	GalleryItemIdentity *string `json:"galleryItemIdentity,omitempty"`

	// Additional links available for this product.
	IconUris *IconUris `json:"iconUris,omitempty"`

	// The legal terms.
	LegalTerms *string `json:"legalTerms,omitempty"`

	// Additional links available for this product.
	Links []*ProductLink `json:"links,omitempty"`

	// The offer representing the product.
	Offer *string `json:"offer,omitempty"`

	// The version of the product offer.
	OfferVersion *string `json:"offerVersion,omitempty"`

	// The length of product content.
	PayloadLength *int64 `json:"payloadLength,omitempty"`

	// The privacy policy.
	PrivacyPolicy *string `json:"privacyPolicy,omitempty"`

	// The kind of the product (virtualMachine or virtualMachineExtension)
	ProductKind *string `json:"productKind,omitempty"`

	// Additional properties for the product.
	ProductProperties *ProductProperties `json:"productProperties,omitempty"`

	// The user-friendly name of the product publisher.
	PublisherDisplayName *string `json:"publisherDisplayName,omitempty"`

	// Publisher identifier.
	PublisherIdentifier *string `json:"publisherIdentifier,omitempty"`

	// The product SKU.
	SKU *string `json:"sku,omitempty"`

	// The type of the Virtual Machine Extension.
	VMExtensionType *string `json:"vmExtensionType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductNestedProperties.
func (p ProductNestedProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingPartNumber", p.BillingPartNumber)
	populate(objectMap, "compatibility", p.Compatibility)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "galleryItemIdentity", p.GalleryItemIdentity)
	populate(objectMap, "iconUris", p.IconUris)
	populate(objectMap, "legalTerms", p.LegalTerms)
	populate(objectMap, "links", p.Links)
	populate(objectMap, "offer", p.Offer)
	populate(objectMap, "offerVersion", p.OfferVersion)
	populate(objectMap, "payloadLength", p.PayloadLength)
	populate(objectMap, "privacyPolicy", p.PrivacyPolicy)
	populate(objectMap, "productKind", p.ProductKind)
	populate(objectMap, "productProperties", p.ProductProperties)
	populate(objectMap, "publisherDisplayName", p.PublisherDisplayName)
	populate(objectMap, "publisherIdentifier", p.PublisherIdentifier)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "vmExtensionType", p.VMExtensionType)
	return json.Marshal(objectMap)
}

// ProductProperties - Additional properties of the product
type ProductProperties struct {
	// The version.
	Version *string `json:"version,omitempty"`
}

// ProductsGetOptions contains the optional parameters for the Products.Get method.
type ProductsGetOptions struct {
	// placeholder for future optional parameters
}

// ProductsGetProductOptions contains the optional parameters for the Products.GetProduct method.
type ProductsGetProductOptions struct {
	// Device configuration.
	DeviceConfiguration *DeviceConfiguration
}

// ProductsGetProductsOptions contains the optional parameters for the Products.GetProducts method.
type ProductsGetProductsOptions struct {
	// Device configuration.
	DeviceConfiguration *DeviceConfiguration
}

// ProductsListDetailsOptions contains the optional parameters for the Products.ListDetails method.
type ProductsListDetailsOptions struct {
	// placeholder for future optional parameters
}

// ProductsListOptions contains the optional parameters for the Products.List method.
type ProductsListOptions struct {
	// placeholder for future optional parameters
}

// ProductsUploadLogOptions contains the optional parameters for the Products.UploadLog method.
type ProductsUploadLogOptions struct {
	// Update details for product log.
	MarketplaceProductLogUpdate *MarketplaceProductLogUpdate
}

// Registration information.
type Registration struct {
	TrackedResource
	// Registration resource.
	Properties *RegistrationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Registration.
func (r Registration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RegistrationList - Pageable list of registrations.
type RegistrationList struct {
	// URI to the next page.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Registrations
	Value []*Registration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RegistrationList.
func (r RegistrationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RegistrationParameter - Registration resource
type RegistrationParameter struct {
	// REQUIRED; Location of the resource.
	Location *Location `json:"location,omitempty"`

	// REQUIRED; Properties of the Azure Stack registration resource
	Properties *RegistrationParameterProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RegistrationParameter.
func (r RegistrationParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", r.Location)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RegistrationParameterProperties - Properties of the Azure Stack registration resource
type RegistrationParameterProperties struct {
	// REQUIRED; The token identifying registered Azure Stack
	RegistrationToken *string `json:"registrationToken,omitempty"`
}

// RegistrationProperties - Properties portion of the registration resource.
type RegistrationProperties struct {
	// Specifies the billing mode for the Azure Stack registration.
	BillingModel *string `json:"billingModel,omitempty"`

	// The identifier of the registered Azure Stack.
	CloudID *string `json:"cloudId,omitempty"`

	// The object identifier associated with the Azure Stack connecting to Azure.
	ObjectID *string `json:"objectId,omitempty"`
}

// RegistrationsCreateOrUpdateOptions contains the optional parameters for the Registrations.CreateOrUpdate method.
type RegistrationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsDeleteOptions contains the optional parameters for the Registrations.Delete method.
type RegistrationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsEnableRemoteManagementOptions contains the optional parameters for the Registrations.EnableRemoteManagement method.
type RegistrationsEnableRemoteManagementOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsGetActivationKeyOptions contains the optional parameters for the Registrations.GetActivationKey method.
type RegistrationsGetActivationKeyOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsGetOptions contains the optional parameters for the Registrations.Get method.
type RegistrationsGetOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsListBySubscriptionOptions contains the optional parameters for the Registrations.ListBySubscription method.
type RegistrationsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsListOptions contains the optional parameters for the Registrations.List method.
type RegistrationsListOptions struct {
	// placeholder for future optional parameters
}

// RegistrationsUpdateOptions contains the optional parameters for the Registrations.Update method.
type RegistrationsUpdateOptions struct {
	// placeholder for future optional parameters
}

// Resource - Base resource object.
type Resource struct {
	// The entity tag used for optimistic concurrency when modifying the resource.
	Etag *string `json:"etag,omitempty"`

	// READ-ONLY; ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Type of Resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TrackedResource - Base resource object.
type TrackedResource struct {
	// REQUIRED; Location of the resource.
	Location *Location `json:"location,omitempty"`

	// The entity tag used for optimistic concurrency when modifying the resource.
	Etag *string `json:"etag,omitempty"`

	// Custom tags for the resource.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The kind of the resource.
	Kind *string `json:"kind,omitempty" azure:"ro"`

	// READ-ONLY; Name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Type of Resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "etag", t.Etag)
	populate(objectMap, "id", t.ID)
	populate(objectMap, "kind", t.Kind)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "systemData", t.SystemData)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
}

// URI - The URI.
type URI struct {
	// READ-ONLY; The URI.
	URI *string `json:"uri,omitempty" azure:"ro"`
}

// VirtualMachineExtensionProductProperties - Product information.
type VirtualMachineExtensionProductProperties struct {
	// READ-ONLY; Specifies kind of compute role included in the package.
	ComputeRole *ComputeRole `json:"computeRole,omitempty" azure:"ro"`

	// READ-ONLY; Specifies if product is a Virtual Machine Extension.
	IsSystemExtension *bool `json:"isSystemExtension,omitempty" azure:"ro"`

	// READ-ONLY; Specifies a download location where content can be downloaded from.
	SourceBlob *URI `json:"sourceBlob,omitempty" azure:"ro"`

	// READ-ONLY; Indicates if specified product supports multiple extensions.
	SupportMultipleExtensions *bool `json:"supportMultipleExtensions,omitempty" azure:"ro"`

	// READ-ONLY; Specifies operating system used by the product.
	VMOsType *OperatingSystem `json:"vmOsType,omitempty" azure:"ro"`

	// READ-ONLY; Indicates if virtual machine Scale Set is enabled in the specified product.
	VMScaleSetEnabled *bool `json:"vmScaleSetEnabled,omitempty" azure:"ro"`

	// READ-ONLY; Specifies product version.
	Version *string `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineExtensionProductProperties.
func (v VirtualMachineExtensionProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (v VirtualMachineExtensionProductProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "computeRole", v.ComputeRole)
	populate(objectMap, "isSystemExtension", v.IsSystemExtension)
	populate(objectMap, "sourceBlob", v.SourceBlob)
	populate(objectMap, "supportMultipleExtensions", v.SupportMultipleExtensions)
	populate(objectMap, "vmOsType", v.VMOsType)
	populate(objectMap, "vmScaleSetEnabled", v.VMScaleSetEnabled)
	populate(objectMap, "version", v.Version)
}

// VirtualMachineProductProperties - Product information.
type VirtualMachineProductProperties struct {
	// READ-ONLY; List of attached data disks.
	DataDiskImages []*DataDiskImage `json:"dataDiskImages,omitempty" azure:"ro"`

	// READ-ONLY; OS disk image used by product.
	OSDiskImage *OsDiskImage `json:"osDiskImage,omitempty" azure:"ro"`

	// READ-ONLY; Specifies product version.
	Version *string `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineProductProperties.
func (v VirtualMachineProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (v VirtualMachineProductProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "dataDiskImages", v.DataDiskImages)
	populate(objectMap, "osDiskImage", v.OSDiskImage)
	populate(objectMap, "version", v.Version)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
