//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armazurestack

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ProductsClient contains the methods for the Products group.
// Don't use this type directly, use NewProductsClient() instead.
type ProductsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewProductsClient creates a new instance of ProductsClient with the specified values.
func NewProductsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ProductsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ProductsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Get - Returns the specified product.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) Get(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetOptions) (ProductsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ProductsClient) getCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ProductsClient) getHandleResponse(resp *http.Response) (ProductsGetResponse, error) {
	result := ProductsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ProductsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetProduct - Returns the specified product.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) GetProduct(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetProductOptions) (ProductsGetProductResponse, error) {
	req, err := client.getProductCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsGetProductResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsGetProductResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsGetProductResponse{}, client.getProductHandleError(resp)
	}
	return client.getProductHandleResponse(resp)
}

// getProductCreateRequest creates the GetProduct request.
func (client *ProductsClient) getProductCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetProductOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProduct"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.DeviceConfiguration != nil {
		return req, runtime.MarshalAsJSON(req, *options.DeviceConfiguration)
	}
	return req, nil
}

// getProductHandleResponse handles the GetProduct response.
func (client *ProductsClient) getProductHandleResponse(resp *http.Response) (ProductsGetProductResponse, error) {
	result := ProductsGetProductResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Product); err != nil {
		return ProductsGetProductResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getProductHandleError handles the GetProduct error response.
func (client *ProductsClient) getProductHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetProducts - Returns a list of products.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) GetProducts(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetProductsOptions) (ProductsGetProductsResponse, error) {
	req, err := client.getProductsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsGetProductsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsGetProductsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsGetProductsResponse{}, client.getProductsHandleError(resp)
	}
	return client.getProductsHandleResponse(resp)
}

// getProductsCreateRequest creates the GetProducts request.
func (client *ProductsClient) getProductsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsGetProductsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/getProducts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.DeviceConfiguration != nil {
		return req, runtime.MarshalAsJSON(req, *options.DeviceConfiguration)
	}
	return req, nil
}

// getProductsHandleResponse handles the GetProducts response.
func (client *ProductsClient) getProductsHandleResponse(resp *http.Response) (ProductsGetProductsResponse, error) {
	result := ProductsGetProductsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsGetProductsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getProductsHandleError handles the GetProducts error response.
func (client *ProductsClient) getProductsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Returns a list of products.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) List(resourceGroup string, registrationName string, options *ProductsListOptions) *ProductsListPager {
	return &ProductsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceGroup, registrationName, options)
		},
		advancer: func(ctx context.Context, resp ProductsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *ProductsClient) listCreateRequest(ctx context.Context, resourceGroup string, registrationName string, options *ProductsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ProductsClient) listHandleResponse(resp *http.Response) (ProductsListResponse, error) {
	result := ProductsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductList); err != nil {
		return ProductsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *ProductsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListDetails - Returns the extended properties of a product.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) ListDetails(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsListDetailsOptions) (ProductsListDetailsResponse, error) {
	req, err := client.listDetailsCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsListDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsListDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsListDetailsResponse{}, client.listDetailsHandleError(resp)
	}
	return client.listDetailsHandleResponse(resp)
}

// listDetailsCreateRequest creates the ListDetails request.
func (client *ProductsClient) listDetailsCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsListDetailsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/listDetails"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listDetailsHandleResponse handles the ListDetails response.
func (client *ProductsClient) listDetailsHandleResponse(resp *http.Response) (ProductsListDetailsResponse, error) {
	result := ProductsListDetailsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExtendedProduct); err != nil {
		return ProductsListDetailsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listDetailsHandleError handles the ListDetails error response.
func (client *ProductsClient) listDetailsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UploadLog - Returns the specified product.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ProductsClient) UploadLog(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsUploadLogOptions) (ProductsUploadLogResponse, error) {
	req, err := client.uploadLogCreateRequest(ctx, resourceGroup, registrationName, productName, options)
	if err != nil {
		return ProductsUploadLogResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ProductsUploadLogResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ProductsUploadLogResponse{}, client.uploadLogHandleError(resp)
	}
	return client.uploadLogHandleResponse(resp)
}

// uploadLogCreateRequest creates the UploadLog request.
func (client *ProductsClient) uploadLogCreateRequest(ctx context.Context, resourceGroup string, registrationName string, productName string, options *ProductsUploadLogOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AzureStack/registrations/{registrationName}/products/{productName}/uploadProductLog"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroup == "" {
		return nil, errors.New("parameter resourceGroup cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroup}", url.PathEscape(resourceGroup))
	if registrationName == "" {
		return nil, errors.New("parameter registrationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{registrationName}", url.PathEscape(registrationName))
	if productName == "" {
		return nil, errors.New("parameter productName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{productName}", url.PathEscape(productName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.MarketplaceProductLogUpdate != nil {
		return req, runtime.MarshalAsJSON(req, *options.MarketplaceProductLogUpdate)
	}
	return req, nil
}

// uploadLogHandleResponse handles the UploadLog response.
func (client *ProductsClient) uploadLogHandleResponse(resp *http.Response) (ProductsUploadLogResponse, error) {
	result := ProductsUploadLogResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductLog); err != nil {
		return ProductsUploadLogResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// uploadLogHandleError handles the UploadLog error response.
func (client *ProductsClient) uploadLogHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
