//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armazurestackhci_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhci/v2"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/ListClustersBySubscription.json
func ExampleClustersClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewClustersClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ClusterList = armazurestackhci.ClusterList{
		// 	Value: []*armazurestackhci.Cluster{
		// 		{
		// 			Name: to.Ptr("myCluster1"),
		// 			Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
		// 			ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg1/providers/Microsoft.AzureStackHCI/clusters/myCluster1"),
		// 			SystemData: &armazurestackhci.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
		// 				CreatedBy: to.Ptr("user1"),
		// 				CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("user2"),
		// 				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("East US"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armazurestackhci.ClusterProperties{
		// 				AADClientID: to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
		// 				AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
		// 				BillingModel: to.Ptr("Trial"),
		// 				CloudID: to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
		// 				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
		// 				ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusNotYetRegistered),
		// 				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 				},
		// 				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
		// 				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
		// 				},
		// 				Status: to.Ptr(armazurestackhci.StatusNotYetRegistered),
		// 				TrialDaysRemaining: to.Ptr[float32](29),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("myCluster2"),
		// 			Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
		// 			ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg2/providers/Microsoft.AzureStackHCI/clusters/myCluster2"),
		// 			SystemData: &armazurestackhci.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
		// 				CreatedBy: to.Ptr("user1"),
		// 				CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("user2"),
		// 				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("West US"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armazurestackhci.ClusterProperties{
		// 				AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
		// 				AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
		// 				BillingModel: to.Ptr("Trial"),
		// 				CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
		// 				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
		// 				ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusConnected),
		// 				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 				},
		// 				LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
		// 				LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
		// 				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
		// 				RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
		// 				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
		// 					ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
		// 					ClusterName: to.Ptr("cluster1"),
		// 					ClusterType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
		// 					ClusterVersion: to.Ptr("10.0.17777"),
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
		// 					LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
		// 					Manufacturer: to.Ptr("Dell Inc."),
		// 					Nodes: []*armazurestackhci.ClusterNode{
		// 						{
		// 							Name: to.Ptr("Node1"),
		// 							CoreCount: to.Ptr[float32](8),
		// 							ID: to.Ptr[float32](0),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](128),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q45CZC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 						},
		// 						{
		// 							Name: to.Ptr("Node2"),
		// 							CoreCount: to.Ptr[float32](8),
		// 							ID: to.Ptr[float32](1),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](128),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q44BSC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 						},
		// 						{
		// 							Name: to.Ptr("Node3"),
		// 							CoreCount: to.Ptr[float32](16),
		// 							ID: to.Ptr[float32](2),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](256),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q44RFC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 					}},
		// 					OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 				},
		// 				Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
		// 				TrialDaysRemaining: to.Ptr[float32](30),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/ListClustersByResourceGroup.json
func ExampleClustersClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewClustersClient().NewListByResourceGroupPager("test-rg", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ClusterList = armazurestackhci.ClusterList{
		// 	Value: []*armazurestackhci.Cluster{
		// 		{
		// 			Name: to.Ptr("myCluster1"),
		// 			Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
		// 			ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster1"),
		// 			SystemData: &armazurestackhci.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
		// 				CreatedBy: to.Ptr("user1"),
		// 				CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("user2"),
		// 				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("East US"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armazurestackhci.ClusterProperties{
		// 				AADClientID: to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
		// 				AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
		// 				BillingModel: to.Ptr("Trial"),
		// 				CloudID: to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
		// 				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
		// 				ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusNotYetRegistered),
		// 				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 				},
		// 				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
		// 				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
		// 				},
		// 				Status: to.Ptr(armazurestackhci.StatusNotYetRegistered),
		// 				TrialDaysRemaining: to.Ptr[float32](29),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("myCluster2"),
		// 			Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
		// 			ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster2"),
		// 			SystemData: &armazurestackhci.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
		// 				CreatedBy: to.Ptr("user1"),
		// 				CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("user2"),
		// 				LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("East US"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armazurestackhci.ClusterProperties{
		// 				AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
		// 				AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
		// 				BillingModel: to.Ptr("Trial"),
		// 				CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
		// 				CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
		// 				ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusPartiallyConnected),
		// 				DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 				},
		// 				LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
		// 				LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
		// 				ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
		// 				RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
		// 				ReportedProperties: &armazurestackhci.ClusterReportedProperties{
		// 					ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
		// 					ClusterName: to.Ptr("cluster1"),
		// 					ClusterType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
		// 					ClusterVersion: to.Ptr("10.0.17777"),
		// 					DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
		// 					ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
		// 					LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
		// 					Manufacturer: to.Ptr("Dell Inc."),
		// 					Nodes: []*armazurestackhci.ClusterNode{
		// 						{
		// 							Name: to.Ptr("Node1"),
		// 							CoreCount: to.Ptr[float32](8),
		// 							ID: to.Ptr[float32](0),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](128),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q45CZC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 						},
		// 						{
		// 							Name: to.Ptr("Node2"),
		// 							CoreCount: to.Ptr[float32](8),
		// 							ID: to.Ptr[float32](1),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](128),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationEnabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q44BSC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 						},
		// 						{
		// 							Name: to.Ptr("Node3"),
		// 							CoreCount: to.Ptr[float32](16),
		// 							ID: to.Ptr[float32](2),
		// 							Manufacturer: to.Ptr("Dell Inc."),
		// 							MemoryInGiB: to.Ptr[float32](256),
		// 							Model: to.Ptr("EMC AX740"),
		// 							OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
		// 							OSName: to.Ptr("Azure Stack HCI"),
		// 							OSVersion: to.Ptr("10.0.17777.1061"),
		// 							SerialNumber: to.Ptr("Q44RFC3"),
		// 							WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
		// 					}},
		// 					OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
		// 				},
		// 				Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
		// 				TrialDaysRemaining: to.Ptr[float32](30),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/GetCluster.json
func ExampleClustersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewClustersClient().Get(ctx, "test-rg", "myCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusConnected),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 		},
	// 		IsolatedVMAttestationConfiguration: &armazurestackhci.IsolatedVMAttestationConfiguration{
	// 			AttestationResourceID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.Attestation/attestationProviders/testmaa"),
	// 			AttestationServiceEndpoint: to.Ptr("https://dantestnoauth01.eus.attest.azure.net"),
	// 			RelyingPartyServiceEndpoint: to.Ptr("https://azurestackhci.azurefd.net/eastus"),
	// 		},
	// 		LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
	// 		LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		LogCollectionProperties: &armazurestackhci.LogCollectionProperties{
	// 			FromDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			LastLogGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			LogCollectionSessionDetails: []*armazurestackhci.LogCollectionSession{
	// 				{
	// 					CorrelationID: to.Ptr("a76ab33a-1819-4e82-1212-e3e4ec3d1425"),
	// 					EndTimeCollected: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:25:19.123Z"); return t}()),
	// 					LogCollectionJobType: to.Ptr(armazurestackhci.LogCollectionJobTypeOnDemand),
	// 					LogCollectionStatus: to.Ptr(armazurestackhci.LogCollectionStatusSucceeded),
	// 					LogEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					LogSize: to.Ptr[int64](1000),
	// 					LogStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					TimeCollected: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			}},
	// 			ToDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.123Z"); return t}()),
	// 		},
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 			ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
	// 			ClusterName: to.Ptr("cluster1"),
	// 			ClusterType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
	// 			ClusterVersion: to.Ptr("10.0.17777"),
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 			Manufacturer: to.Ptr("Dell Inc."),
	// 			Nodes: []*armazurestackhci.ClusterNode{
	// 				{
	// 					Name: to.Ptr("Node1"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](1),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q45CZC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 				},
	// 				{
	// 					Name: to.Ptr("Node2"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](2),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q44BSC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 				},
	// 				{
	// 					Name: to.Ptr("Node3"),
	// 					CoreCount: to.Ptr[float32](16),
	// 					ID: to.Ptr[float32](3),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](256),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q44RFC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 			}},
	// 			OemActivation: to.Ptr(armazurestackhci.OemActivationDisabled),
	// 		},
	// 		Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/CreateCluster.json
func ExampleClustersClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewClustersClient().Create(ctx, "test-rg", "myCluster", armazurestackhci.Cluster{
		Location: to.Ptr("East US"),
		Identity: &armazurestackhci.ManagedServiceIdentity{
			Type: to.Ptr(armazurestackhci.ManagedServiceIdentityTypeSystemAssigned),
		},
		Properties: &armazurestackhci.ClusterProperties{
			AADClientID:             to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
			AADTenantID:             to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
			CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Identity: &armazurestackhci.ManagedServiceIdentity{
	// 		Type: to.Ptr(armazurestackhci.ManagedServiceIdentityTypeSystemAssigned),
	// 		PrincipalID: to.Ptr("87a834db-2e45-409e-911b-e16a44562ec3"),
	// 		TenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusNotYetRegistered),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionDisabled),
	// 		},
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 		},
	// 		ServiceEndpoint: to.Ptr("https://azurestackhci.azurefd.net/eastus"),
	// 		Status: to.Ptr(armazurestackhci.StatusNotYetRegistered),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/UpdateCluster.json
func ExampleClustersClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewClustersClient().Update(ctx, "test-rg", "myCluster", armazurestackhci.ClusterPatch{
		Identity: &armazurestackhci.ManagedServiceIdentity{
			Type: to.Ptr(armazurestackhci.ManagedServiceIdentityTypeSystemAssigned),
		},
		Properties: &armazurestackhci.ClusterPatchProperties{
			CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
			DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
				DiagnosticLevel:           to.Ptr(armazurestackhci.DiagnosticLevelBasic),
				WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
			},
		},
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 		"tag1": to.Ptr("value1"),
	// 		"tag2": to.Ptr("value2"),
	// 	},
	// 	Identity: &armazurestackhci.ManagedServiceIdentity{
	// 		Type: to.Ptr(armazurestackhci.ManagedServiceIdentityTypeSystemAssigned),
	// 		PrincipalID: to.Ptr("87a834db-2e45-409e-911b-e16a44562ec3"),
	// 		TenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("515da1c2-379e-49b4-9975-09e3e40c86be"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("91c2b355-4826-4e96-9164-e3f26dcf1cdd"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		ConnectivityStatus: to.Ptr(armazurestackhci.ConnectivityStatusConnected),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 		},
	// 		IsolatedVMAttestationConfiguration: &armazurestackhci.IsolatedVMAttestationConfiguration{
	// 			AttestationResourceID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.Attestation/attestationProviders/testmaa"),
	// 			AttestationServiceEndpoint: to.Ptr("https://dantestnoauth01.eus.attest.azure.net"),
	// 			RelyingPartyServiceEndpoint: to.Ptr("https://azurestackhci.azurefd.net/eastus"),
	// 		},
	// 		LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
	// 		LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 			ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
	// 			ClusterName: to.Ptr("cluster1"),
	// 			ClusterType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
	// 			ClusterVersion: to.Ptr("10.0.17777"),
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 			Manufacturer: to.Ptr("Dell Inc."),
	// 			Nodes: []*armazurestackhci.ClusterNode{
	// 				{
	// 					Name: to.Ptr("Node1"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](1),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q45CZC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 				},
	// 				{
	// 					Name: to.Ptr("Node2"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](2),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q44BSC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 				},
	// 				{
	// 					Name: to.Ptr("Node3"),
	// 					CoreCount: to.Ptr[float32](16),
	// 					ID: to.Ptr[float32](3),
	// 					LastLicensingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](256),
	// 					Model: to.Ptr("EMC AX740"),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q44RFC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 			}},
	// 		},
	// 		Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/DeleteCluster.json
func ExampleClustersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginDelete(ctx, "test-rg", "myCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/UploadCertificate.json
func ExampleClustersClient_BeginUploadCertificate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginUploadCertificate(ctx, "test-rg", "myCluster", armazurestackhci.UploadCertificateRequest{
		Properties: &armazurestackhci.RawCertificateData{
			Certificates: []*string{
				to.Ptr("base64cert"),
				to.Ptr("base64cert")},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/CreateClusterIdentity.json
func ExampleClustersClient_BeginCreateIdentity() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginCreateIdentity(ctx, "test-rg", "myCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ClusterIdentityResponse = armazurestackhci.ClusterIdentityResponse{
	// 	Properties: &armazurestackhci.ClusterIdentityResponseProperties{
	// 		AADApplicationObjectID: to.Ptr("00cc4014-482e-4de9-9932-83415cc75f45"),
	// 		AADClientID: to.Ptr("7b93bf67-60ac-4909-a987-ac438e69f9ba"),
	// 		AADServicePrincipalObjectID: to.Ptr("400bd05f-395f-45a6-ba75-72601df80107"),
	// 		AADTenantID: to.Ptr("bdb2c88c-9cfd-4e19-927d-51e875f6912b"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/ExtendSoftwareAssuranceBenefit.json
func ExampleClustersClient_BeginExtendSoftwareAssuranceBenefit() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginExtendSoftwareAssuranceBenefit(ctx, "test-rg", "myCluster", armazurestackhci.SoftwareAssuranceChangeRequest{
		Properties: &armazurestackhci.SoftwareAssuranceChangeRequestProperties{
			SoftwareAssuranceIntent: to.Ptr(armazurestackhci.SoftwareAssuranceIntentEnable),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 		},
	// 		LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
	// 		LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 			ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
	// 			ClusterName: to.Ptr("cluster1"),
	// 			ClusterVersion: to.Ptr("10.0.17777"),
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 			Nodes: []*armazurestackhci.ClusterNode{
	// 				{
	// 					Name: to.Ptr("Node1"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](1),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					NodeType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q45CZC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 			}},
	// 		},
	// 		SoftwareAssuranceProperties: &armazurestackhci.SoftwareAssuranceProperties{
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2022-08-18T22:01:12.419Z"); return t}()),
	// 			SoftwareAssuranceIntent: to.Ptr(armazurestackhci.SoftwareAssuranceIntentEnable),
	// 			SoftwareAssuranceStatus: to.Ptr(armazurestackhci.SoftwareAssuranceStatusEnabled),
	// 		},
	// 		Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/TriggerLogCollection.json
func ExampleClustersClient_BeginTriggerLogCollection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginTriggerLogCollection(ctx, "test-rg", "mycluster", armazurestackhci.LogCollectionRequest{
		Properties: &armazurestackhci.LogCollectionRequestProperties{
			FromDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			ToDate:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.123Z"); return t }()),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 		},
	// 		LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
	// 		LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		LogCollectionProperties: &armazurestackhci.LogCollectionProperties{
	// 			FromDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			LastLogGenerated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			LogCollectionSessionDetails: []*armazurestackhci.LogCollectionSession{
	// 				{
	// 					CorrelationID: to.Ptr("a76ab33a-1819-4e82-1212-e3e4ec3d1425"),
	// 					EndTimeCollected: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:25:19.123Z"); return t}()),
	// 					LogCollectionJobType: to.Ptr(armazurestackhci.LogCollectionJobTypeOnDemand),
	// 					LogCollectionStatus: to.Ptr(armazurestackhci.LogCollectionStatusSucceeded),
	// 					LogEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					LogSize: to.Ptr[int64](1000),
	// 					LogStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					TimeCollected: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			}},
	// 			ToDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-01-01T17:18:19.123Z"); return t}()),
	// 		},
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 			ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
	// 			ClusterName: to.Ptr("cluster1"),
	// 			ClusterVersion: to.Ptr("10.0.17777"),
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 			Nodes: []*armazurestackhci.ClusterNode{
	// 				{
	// 					Name: to.Ptr("Node1"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](1),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					NodeType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q45CZC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 			}},
	// 		},
	// 		Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/c9b146c38df5f76e2d34a3ef771979805ff4ff73/specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/StackHCI/stable/2024-04-01/examples/ConfigureRemoteSupport.json
func ExampleClustersClient_BeginConfigureRemoteSupport() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armazurestackhci.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewClustersClient().BeginConfigureRemoteSupport(ctx, "test-rg", "mycluster", armazurestackhci.RemoteSupportRequest{
		Properties: &armazurestackhci.RemoteSupportRequestProperties{
			AccessLevel:         to.Ptr(armazurestackhci.AccessLevelDiagnostics),
			ExpirationTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t }()),
			RemoteSupportType:   to.Ptr(armazurestackhci.RemoteSupportTypeEnable),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.Cluster = armazurestackhci.Cluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.AzureStackHCI/clusters"),
	// 	ID: to.Ptr("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/test-rg/providers/Microsoft.AzureStackHCI/clusters/myCluster"),
	// 	SystemData: &armazurestackhci.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 		CreatedBy: to.Ptr("user1"),
	// 		CreatedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-02T17:18:19.123Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("user2"),
	// 		LastModifiedByType: to.Ptr(armazurestackhci.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("East US"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armazurestackhci.ClusterProperties{
	// 		AADClientID: to.Ptr("24a6e53d-04e5-44d2-b7cc-1b732a847dfc"),
	// 		AADTenantID: to.Ptr("7e589cc1-a8b6-4dff-91bd-5ec0fa18db94"),
	// 		BillingModel: to.Ptr("Trial"),
	// 		CloudID: to.Ptr("a3c0468f-e38e-4dda-ac48-817f620536f0"),
	// 		CloudManagementEndpoint: to.Ptr("https://98294836-31be-4668-aeae-698667faf99b.waconazure.com"),
	// 		DesiredProperties: &armazurestackhci.ClusterDesiredProperties{
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 		},
	// 		LastBillingTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-12T08:12:55.231Z"); return t}()),
	// 		LastSyncTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		ProvisioningState: to.Ptr(armazurestackhci.ProvisioningStateSucceeded),
	// 		RegistrationTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T20:44:32.562Z"); return t}()),
	// 		RemoteSupportProperties: &armazurestackhci.RemoteSupportProperties{
	// 			AccessLevel: to.Ptr(armazurestackhci.AccessLevelDiagnostics),
	// 			ExpirationTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			RemoteSupportNodeSettings: []*armazurestackhci.RemoteSupportNodeSettings{
	// 				{
	// 					ArcResourceID: to.Ptr("/subscriptions/<subId>/resourcegroups/<rg>/Microsoft.HybridCompute/machines/arcNode0"),
	// 					ConnectionErrorMessage: to.Ptr("test"),
	// 					ConnectionStatus: to.Ptr("Connected"),
	// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					State: to.Ptr("Active"),
	// 					TranscriptLocation: to.Ptr("test"),
	// 					UpdatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 				},
	// 				{
	// 					ArcResourceID: to.Ptr("/subscriptions/<subId>/resourcegroups/<rg>/Microsoft.HybridCompute/machines/arcNode1"),
	// 					ConnectionErrorMessage: to.Ptr("test"),
	// 					ConnectionStatus: to.Ptr("Connected"),
	// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					State: to.Ptr("Active"),
	// 					TranscriptLocation: to.Ptr("test"),
	// 					UpdatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			}},
	// 			RemoteSupportSessionDetails: []*armazurestackhci.PerNodeRemoteSupportSession{
	// 				{
	// 					AccessLevel: to.Ptr(armazurestackhci.AccessLevelDiagnostics),
	// 					Duration: to.Ptr[int64](120),
	// 					NodeName: to.Ptr("arcNode0"),
	// 					SessionEndTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 					SessionStartTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-01-01T17:18:19.123Z"); return t}()),
	// 			}},
	// 			RemoteSupportType: to.Ptr(armazurestackhci.RemoteSupportTypeEnable),
	// 		},
	// 		ReportedProperties: &armazurestackhci.ClusterReportedProperties{
	// 			ClusterID: to.Ptr("a76ac23a-1819-4e82-9410-e3e4ec3d1425"),
	// 			ClusterName: to.Ptr("cluster1"),
	// 			ClusterVersion: to.Ptr("10.0.17777"),
	// 			DiagnosticLevel: to.Ptr(armazurestackhci.DiagnosticLevelBasic),
	// 			ImdsAttestation: to.Ptr(armazurestackhci.ImdsAttestationDisabled),
	// 			LastUpdated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-03-11T19:24:42.194Z"); return t}()),
	// 			Nodes: []*armazurestackhci.ClusterNode{
	// 				{
	// 					Name: to.Ptr("Node1"),
	// 					CoreCount: to.Ptr[float32](8),
	// 					ID: to.Ptr[float32](1),
	// 					Manufacturer: to.Ptr("Dell Inc."),
	// 					MemoryInGiB: to.Ptr[float32](128),
	// 					Model: to.Ptr("EMC AX740"),
	// 					NodeType: to.Ptr(armazurestackhci.ClusterNodeTypeThirdParty),
	// 					OSName: to.Ptr("Azure Stack HCI"),
	// 					OSVersion: to.Ptr("10.0.17777.1061"),
	// 					SerialNumber: to.Ptr("Q45CZC3"),
	// 					WindowsServerSubscription: to.Ptr(armazurestackhci.WindowsServerSubscriptionEnabled),
	// 			}},
	// 		},
	// 		Status: to.Ptr(armazurestackhci.StatusConnectedRecently),
	// 		TrialDaysRemaining: to.Ptr[float32](30),
	// 	},
	// }
}
