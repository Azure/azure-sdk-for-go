// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/azurestackhci/armazurestackhcivm"
	"net/http"
	"net/url"
	"regexp"
)

// VirtualHardDisksServer is a fake server for instances of the armazurestackhcivm.VirtualHardDisksClient type.
type VirtualHardDisksServer struct {
	// BeginCreateOrUpdate is the fake for method VirtualHardDisksClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, virtualHardDiskName string, resource armazurestackhcivm.VirtualHardDisk, options *armazurestackhcivm.VirtualHardDisksClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method VirtualHardDisksClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, virtualHardDiskName string, options *armazurestackhcivm.VirtualHardDisksClientBeginDeleteOptions) (resp azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method VirtualHardDisksClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, virtualHardDiskName string, options *armazurestackhcivm.VirtualHardDisksClientGetOptions) (resp azfake.Responder[armazurestackhcivm.VirtualHardDisksClientGetResponse], errResp azfake.ErrorResponder)

	// NewListAllPager is the fake for method VirtualHardDisksClient.NewListAllPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAllPager func(options *armazurestackhcivm.VirtualHardDisksClientListAllOptions) (resp azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListAllResponse])

	// NewListByResourceGroupPager is the fake for method VirtualHardDisksClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armazurestackhcivm.VirtualHardDisksClientListByResourceGroupOptions) (resp azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListByResourceGroupResponse])

	// BeginUpdate is the fake for method VirtualHardDisksClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, virtualHardDiskName string, properties armazurestackhcivm.VirtualHardDisksUpdateRequest, options *armazurestackhcivm.VirtualHardDisksClientBeginUpdateOptions) (resp azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUpdateResponse], errResp azfake.ErrorResponder)

	// BeginUpload is the fake for method VirtualHardDisksClient.BeginUpload
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpload func(ctx context.Context, resourceGroupName string, virtualHardDiskName string, body armazurestackhcivm.VirtualHardDiskUploadRequest, options *armazurestackhcivm.VirtualHardDisksClientBeginUploadOptions) (resp azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUploadResponse], errResp azfake.ErrorResponder)
}

// NewVirtualHardDisksServerTransport creates a new instance of VirtualHardDisksServerTransport with the provided implementation.
// The returned VirtualHardDisksServerTransport instance is connected to an instance of armazurestackhcivm.VirtualHardDisksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVirtualHardDisksServerTransport(srv *VirtualHardDisksServer) *VirtualHardDisksServerTransport {
	return &VirtualHardDisksServerTransport{
		srv:                         srv,
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientDeleteResponse]](),
		newListAllPager:             newTracker[azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListAllResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListByResourceGroupResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUpdateResponse]](),
		beginUpload:                 newTracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUploadResponse]](),
	}
}

// VirtualHardDisksServerTransport connects instances of armazurestackhcivm.VirtualHardDisksClient to instances of VirtualHardDisksServer.
// Don't use this type directly, use NewVirtualHardDisksServerTransport instead.
type VirtualHardDisksServerTransport struct {
	srv                         *VirtualHardDisksServer
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientDeleteResponse]]
	newListAllPager             *tracker[azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListAllResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armazurestackhcivm.VirtualHardDisksClientListByResourceGroupResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUpdateResponse]]
	beginUpload                 *tracker[azfake.PollerResponder[armazurestackhcivm.VirtualHardDisksClientUploadResponse]]
}

// Do implements the policy.Transporter interface for VirtualHardDisksServerTransport.
func (v *VirtualHardDisksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return v.dispatchToMethodFake(req, method)
}

func (v *VirtualHardDisksServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if virtualHardDisksServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = virtualHardDisksServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "VirtualHardDisksClient.BeginCreateOrUpdate":
				res.resp, res.err = v.dispatchBeginCreateOrUpdate(req)
			case "VirtualHardDisksClient.BeginDelete":
				res.resp, res.err = v.dispatchBeginDelete(req)
			case "VirtualHardDisksClient.Get":
				res.resp, res.err = v.dispatchGet(req)
			case "VirtualHardDisksClient.NewListAllPager":
				res.resp, res.err = v.dispatchNewListAllPager(req)
			case "VirtualHardDisksClient.NewListByResourceGroupPager":
				res.resp, res.err = v.dispatchNewListByResourceGroupPager(req)
			case "VirtualHardDisksClient.BeginUpdate":
				res.resp, res.err = v.dispatchBeginUpdate(req)
			case "VirtualHardDisksClient.BeginUpload":
				res.resp, res.err = v.dispatchBeginUpload(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (v *VirtualHardDisksServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := v.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks/(?P<virtualHardDiskName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurestackhcivm.VirtualHardDisk](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualHardDiskNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualHardDiskName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, virtualHardDiskNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		v.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		v.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		v.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := v.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks/(?P<virtualHardDiskName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualHardDiskNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualHardDiskName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginDelete(req.Context(), resourceGroupNameParam, virtualHardDiskNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		v.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		v.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		v.beginDelete.remove(req)
	}

	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks/(?P<virtualHardDiskName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	virtualHardDiskNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualHardDiskName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), resourceGroupNameParam, virtualHardDiskNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VirtualHardDisk, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchNewListAllPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListAllPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAllPager not implemented")}
	}
	newListAllPager := v.newListAllPager.get(req)
	if newListAllPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListAllPager(nil)
		newListAllPager = &resp
		v.newListAllPager.add(req, newListAllPager)
		server.PagerResponderInjectNextLinks(newListAllPager, req, func(page *armazurestackhcivm.VirtualHardDisksClientListAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAllPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListAllPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAllPager) {
		v.newListAllPager.remove(req)
	}
	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := v.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		v.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armazurestackhcivm.VirtualHardDisksClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		v.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := v.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks/(?P<virtualHardDiskName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurestackhcivm.VirtualHardDisksUpdateRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualHardDiskNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualHardDiskName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpdate(req.Context(), resourceGroupNameParam, virtualHardDiskNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		v.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		v.beginUpdate.remove(req)
	}

	return resp, nil
}

func (v *VirtualHardDisksServerTransport) dispatchBeginUpload(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpload == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpload not implemented")}
	}
	beginUpload := v.beginUpload.get(req)
	if beginUpload == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.AzureStackHCI/virtualHardDisks/(?P<virtualHardDiskName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/upload`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armazurestackhcivm.VirtualHardDiskUploadRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualHardDiskNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualHardDiskName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginUpload(req.Context(), resourceGroupNameParam, virtualHardDiskNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpload = &respr
		v.beginUpload.add(req, beginUpload)
	}

	resp, err := server.PollerResponderNext(beginUpload, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		v.beginUpload.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpload) {
		v.beginUpload.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to VirtualHardDisksServerTransport
var virtualHardDisksServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
