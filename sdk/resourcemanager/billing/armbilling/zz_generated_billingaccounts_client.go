//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BillingAccountsClient contains the methods for the BillingAccounts group.
// Don't use this type directly, use NewBillingAccountsClient() instead.
type BillingAccountsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewBillingAccountsClient creates a new instance of BillingAccountsClient with the specified values.
func NewBillingAccountsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *BillingAccountsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &BillingAccountsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Get - Gets a billing account by its ID.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingAccountsClient) Get(ctx context.Context, billingAccountName string, options *BillingAccountsGetOptions) (BillingAccountsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingAccountName, options)
	if err != nil {
		return BillingAccountsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BillingAccountsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BillingAccountsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *BillingAccountsClient) getCreateRequest(ctx context.Context, billingAccountName string, options *BillingAccountsGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BillingAccountsClient) getHandleResponse(resp *http.Response) (BillingAccountsGetResponse, error) {
	result := BillingAccountsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingAccount); err != nil {
		return BillingAccountsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *BillingAccountsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Lists the billing accounts that a user has access to.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingAccountsClient) List(options *BillingAccountsListOptions) *BillingAccountsListPager {
	return &BillingAccountsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp BillingAccountsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingAccountListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *BillingAccountsClient) listCreateRequest(ctx context.Context, options *BillingAccountsListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *BillingAccountsClient) listHandleResponse(resp *http.Response) (BillingAccountsListResponse, error) {
	result := BillingAccountsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingAccountListResult); err != nil {
		return BillingAccountsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *BillingAccountsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListInvoiceSectionsByCreateSubscriptionPermission - Lists the invoice sections for which the user has permission to create Azure subscriptions. The operation
// is supported only for billing accounts with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingAccountsClient) ListInvoiceSectionsByCreateSubscriptionPermission(billingAccountName string, options *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptions) *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager {
	return &BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInvoiceSectionsByCreateSubscriptionPermissionCreateRequest(ctx, billingAccountName, options)
		},
		advancer: func(ctx context.Context, resp BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.InvoiceSectionListWithCreateSubPermissionResult.NextLink)
		},
	}
}

// listInvoiceSectionsByCreateSubscriptionPermissionCreateRequest creates the ListInvoiceSectionsByCreateSubscriptionPermission request.
func (client *BillingAccountsClient) listInvoiceSectionsByCreateSubscriptionPermissionCreateRequest(ctx context.Context, billingAccountName string, options *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/listInvoiceSectionsWithCreateSubscriptionPermission"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInvoiceSectionsByCreateSubscriptionPermissionHandleResponse handles the ListInvoiceSectionsByCreateSubscriptionPermission response.
func (client *BillingAccountsClient) listInvoiceSectionsByCreateSubscriptionPermissionHandleResponse(resp *http.Response) (BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse, error) {
	result := BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.InvoiceSectionListWithCreateSubPermissionResult); err != nil {
		return BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listInvoiceSectionsByCreateSubscriptionPermissionHandleError handles the ListInvoiceSectionsByCreateSubscriptionPermission error response.
func (client *BillingAccountsClient) listInvoiceSectionsByCreateSubscriptionPermissionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdate - Updates the properties of a billing account. Currently, displayName and address can be updated. The operation is supported only for billing
// accounts with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingAccountsClient) BeginUpdate(ctx context.Context, billingAccountName string, parameters BillingAccountUpdateRequest, options *BillingAccountsBeginUpdateOptions) (BillingAccountsUpdatePollerResponse, error) {
	resp, err := client.update(ctx, billingAccountName, parameters, options)
	if err != nil {
		return BillingAccountsUpdatePollerResponse{}, err
	}
	result := BillingAccountsUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BillingAccountsClient.Update", "azure-async-operation", resp, client.pl, client.updateHandleError)
	if err != nil {
		return BillingAccountsUpdatePollerResponse{}, err
	}
	result.Poller = &BillingAccountsUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - Updates the properties of a billing account. Currently, displayName and address can be updated. The operation is supported only for billing
// accounts with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingAccountsClient) update(ctx context.Context, billingAccountName string, parameters BillingAccountUpdateRequest, options *BillingAccountsBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, billingAccountName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.updateHandleError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *BillingAccountsClient) updateCreateRequest(ctx context.Context, billingAccountName string, parameters BillingAccountUpdateRequest, options *BillingAccountsBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleError handles the Update error response.
func (client *BillingAccountsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
