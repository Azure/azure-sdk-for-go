//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BillingPermissionsClient contains the methods for the BillingPermissions group.
// Don't use this type directly, use NewBillingPermissionsClient() instead.
type BillingPermissionsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewBillingPermissionsClient creates a new instance of BillingPermissionsClient with the specified values.
func NewBillingPermissionsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *BillingPermissionsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &BillingPermissionsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// ListByBillingAccount - Lists the billing permissions the caller has on a billing account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingPermissionsClient) ListByBillingAccount(billingAccountName string, options *BillingPermissionsListByBillingAccountOptions) *BillingPermissionsListByBillingAccountPager {
	return &BillingPermissionsListByBillingAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingAccountCreateRequest(ctx, billingAccountName, options)
		},
		advancer: func(ctx context.Context, resp BillingPermissionsListByBillingAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingPermissionsListResult.NextLink)
		},
	}
}

// listByBillingAccountCreateRequest creates the ListByBillingAccount request.
func (client *BillingPermissionsClient) listByBillingAccountCreateRequest(ctx context.Context, billingAccountName string, options *BillingPermissionsListByBillingAccountOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingPermissions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingAccountHandleResponse handles the ListByBillingAccount response.
func (client *BillingPermissionsClient) listByBillingAccountHandleResponse(resp *http.Response) (BillingPermissionsListByBillingAccountResponse, error) {
	result := BillingPermissionsListByBillingAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingPermissionsListResult); err != nil {
		return BillingPermissionsListByBillingAccountResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingAccountHandleError handles the ListByBillingAccount error response.
func (client *BillingPermissionsClient) listByBillingAccountHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingProfile - Lists the billing permissions the caller has on a billing profile.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingPermissionsClient) ListByBillingProfile(billingAccountName string, billingProfileName string, options *BillingPermissionsListByBillingProfileOptions) *BillingPermissionsListByBillingProfilePager {
	return &BillingPermissionsListByBillingProfilePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingProfileCreateRequest(ctx, billingAccountName, billingProfileName, options)
		},
		advancer: func(ctx context.Context, resp BillingPermissionsListByBillingProfileResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingPermissionsListResult.NextLink)
		},
	}
}

// listByBillingProfileCreateRequest creates the ListByBillingProfile request.
func (client *BillingPermissionsClient) listByBillingProfileCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, options *BillingPermissionsListByBillingProfileOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingPermissions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingProfileHandleResponse handles the ListByBillingProfile response.
func (client *BillingPermissionsClient) listByBillingProfileHandleResponse(resp *http.Response) (BillingPermissionsListByBillingProfileResponse, error) {
	result := BillingPermissionsListByBillingProfileResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingPermissionsListResult); err != nil {
		return BillingPermissionsListByBillingProfileResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingProfileHandleError handles the ListByBillingProfile error response.
func (client *BillingPermissionsClient) listByBillingProfileHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByCustomer - Lists the billing permissions the caller has for a customer.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingPermissionsClient) ListByCustomer(billingAccountName string, customerName string, options *BillingPermissionsListByCustomerOptions) *BillingPermissionsListByCustomerPager {
	return &BillingPermissionsListByCustomerPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByCustomerCreateRequest(ctx, billingAccountName, customerName, options)
		},
		advancer: func(ctx context.Context, resp BillingPermissionsListByCustomerResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingPermissionsListResult.NextLink)
		},
	}
}

// listByCustomerCreateRequest creates the ListByCustomer request.
func (client *BillingPermissionsClient) listByCustomerCreateRequest(ctx context.Context, billingAccountName string, customerName string, options *BillingPermissionsListByCustomerOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingPermissions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if customerName == "" {
		return nil, errors.New("parameter customerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{customerName}", url.PathEscape(customerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByCustomerHandleResponse handles the ListByCustomer response.
func (client *BillingPermissionsClient) listByCustomerHandleResponse(resp *http.Response) (BillingPermissionsListByCustomerResponse, error) {
	result := BillingPermissionsListByCustomerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingPermissionsListResult); err != nil {
		return BillingPermissionsListByCustomerResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByCustomerHandleError handles the ListByCustomer error response.
func (client *BillingPermissionsClient) listByCustomerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByInvoiceSections - Lists the billing permissions the caller has on an invoice section.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingPermissionsClient) ListByInvoiceSections(billingAccountName string, billingProfileName string, invoiceSectionName string, options *BillingPermissionsListByInvoiceSectionsOptions) *BillingPermissionsListByInvoiceSectionsPager {
	return &BillingPermissionsListByInvoiceSectionsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByInvoiceSectionsCreateRequest(ctx, billingAccountName, billingProfileName, invoiceSectionName, options)
		},
		advancer: func(ctx context.Context, resp BillingPermissionsListByInvoiceSectionsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingPermissionsListResult.NextLink)
		},
	}
}

// listByInvoiceSectionsCreateRequest creates the ListByInvoiceSections request.
func (client *BillingPermissionsClient) listByInvoiceSectionsCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, options *BillingPermissionsListByInvoiceSectionsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingPermissions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	if invoiceSectionName == "" {
		return nil, errors.New("parameter invoiceSectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSectionName}", url.PathEscape(invoiceSectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByInvoiceSectionsHandleResponse handles the ListByInvoiceSections response.
func (client *BillingPermissionsClient) listByInvoiceSectionsHandleResponse(resp *http.Response) (BillingPermissionsListByInvoiceSectionsResponse, error) {
	result := BillingPermissionsListByInvoiceSectionsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingPermissionsListResult); err != nil {
		return BillingPermissionsListByInvoiceSectionsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByInvoiceSectionsHandleError handles the ListByInvoiceSections error response.
func (client *BillingPermissionsClient) listByInvoiceSectionsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
