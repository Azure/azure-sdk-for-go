//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BillingSubscriptionsClient contains the methods for the BillingSubscriptions group.
// Don't use this type directly, use NewBillingSubscriptionsClient() instead.
type BillingSubscriptionsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewBillingSubscriptionsClient creates a new instance of BillingSubscriptionsClient with the specified values.
func NewBillingSubscriptionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *BillingSubscriptionsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &BillingSubscriptionsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Get - Gets a subscription by its ID. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement and Microsoft Partner
// Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) Get(ctx context.Context, billingAccountName string, options *BillingSubscriptionsGetOptions) (BillingSubscriptionsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingAccountName, options)
	if err != nil {
		return BillingSubscriptionsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BillingSubscriptionsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BillingSubscriptionsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *BillingSubscriptionsClient) getCreateRequest(ctx context.Context, billingAccountName string, options *BillingSubscriptionsGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BillingSubscriptionsClient) getHandleResponse(resp *http.Response) (BillingSubscriptionsGetResponse, error) {
	result := BillingSubscriptionsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscription); err != nil {
		return BillingSubscriptionsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *BillingSubscriptionsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingAccount - Lists the subscriptions for a billing account. The operation is supported for billing accounts with agreement type Microsoft Customer
// Agreement or Microsoft Partner Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) ListByBillingAccount(billingAccountName string, options *BillingSubscriptionsListByBillingAccountOptions) *BillingSubscriptionsListByBillingAccountPager {
	return &BillingSubscriptionsListByBillingAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingAccountCreateRequest(ctx, billingAccountName, options)
		},
		advancer: func(ctx context.Context, resp BillingSubscriptionsListByBillingAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingSubscriptionsListResult.NextLink)
		},
	}
}

// listByBillingAccountCreateRequest creates the ListByBillingAccount request.
func (client *BillingSubscriptionsClient) listByBillingAccountCreateRequest(ctx context.Context, billingAccountName string, options *BillingSubscriptionsListByBillingAccountOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingAccountHandleResponse handles the ListByBillingAccount response.
func (client *BillingSubscriptionsClient) listByBillingAccountHandleResponse(resp *http.Response) (BillingSubscriptionsListByBillingAccountResponse, error) {
	result := BillingSubscriptionsListByBillingAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscriptionsListResult); err != nil {
		return BillingSubscriptionsListByBillingAccountResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingAccountHandleError handles the ListByBillingAccount error response.
func (client *BillingSubscriptionsClient) listByBillingAccountHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingProfile - Lists the subscriptions that are billed to a billing profile. The operation is supported for billing accounts with agreement type
// Microsoft Customer Agreement or Microsoft Partner Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) ListByBillingProfile(billingAccountName string, billingProfileName string, options *BillingSubscriptionsListByBillingProfileOptions) *BillingSubscriptionsListByBillingProfilePager {
	return &BillingSubscriptionsListByBillingProfilePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingProfileCreateRequest(ctx, billingAccountName, billingProfileName, options)
		},
		advancer: func(ctx context.Context, resp BillingSubscriptionsListByBillingProfileResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingSubscriptionsListResult.NextLink)
		},
	}
}

// listByBillingProfileCreateRequest creates the ListByBillingProfile request.
func (client *BillingSubscriptionsClient) listByBillingProfileCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, options *BillingSubscriptionsListByBillingProfileOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingProfileHandleResponse handles the ListByBillingProfile response.
func (client *BillingSubscriptionsClient) listByBillingProfileHandleResponse(resp *http.Response) (BillingSubscriptionsListByBillingProfileResponse, error) {
	result := BillingSubscriptionsListByBillingProfileResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscriptionsListResult); err != nil {
		return BillingSubscriptionsListByBillingProfileResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingProfileHandleError handles the ListByBillingProfile error response.
func (client *BillingSubscriptionsClient) listByBillingProfileHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByCustomer - Lists the subscriptions for a customer. The operation is supported only for billing accounts with agreement type Microsoft Partner Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) ListByCustomer(billingAccountName string, customerName string, options *BillingSubscriptionsListByCustomerOptions) *BillingSubscriptionsListByCustomerPager {
	return &BillingSubscriptionsListByCustomerPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByCustomerCreateRequest(ctx, billingAccountName, customerName, options)
		},
		advancer: func(ctx context.Context, resp BillingSubscriptionsListByCustomerResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingSubscriptionsListResult.NextLink)
		},
	}
}

// listByCustomerCreateRequest creates the ListByCustomer request.
func (client *BillingSubscriptionsClient) listByCustomerCreateRequest(ctx context.Context, billingAccountName string, customerName string, options *BillingSubscriptionsListByCustomerOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if customerName == "" {
		return nil, errors.New("parameter customerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{customerName}", url.PathEscape(customerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByCustomerHandleResponse handles the ListByCustomer response.
func (client *BillingSubscriptionsClient) listByCustomerHandleResponse(resp *http.Response) (BillingSubscriptionsListByCustomerResponse, error) {
	result := BillingSubscriptionsListByCustomerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscriptionsListResult); err != nil {
		return BillingSubscriptionsListByCustomerResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByCustomerHandleError handles the ListByCustomer error response.
func (client *BillingSubscriptionsClient) listByCustomerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByInvoiceSection - Lists the subscriptions that are billed to an invoice section. The operation is supported only for billing accounts with agreement
// type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) ListByInvoiceSection(billingAccountName string, billingProfileName string, invoiceSectionName string, options *BillingSubscriptionsListByInvoiceSectionOptions) *BillingSubscriptionsListByInvoiceSectionPager {
	return &BillingSubscriptionsListByInvoiceSectionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByInvoiceSectionCreateRequest(ctx, billingAccountName, billingProfileName, invoiceSectionName, options)
		},
		advancer: func(ctx context.Context, resp BillingSubscriptionsListByInvoiceSectionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BillingSubscriptionsListResult.NextLink)
		},
	}
}

// listByInvoiceSectionCreateRequest creates the ListByInvoiceSection request.
func (client *BillingSubscriptionsClient) listByInvoiceSectionCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, options *BillingSubscriptionsListByInvoiceSectionOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	if invoiceSectionName == "" {
		return nil, errors.New("parameter invoiceSectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSectionName}", url.PathEscape(invoiceSectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByInvoiceSectionHandleResponse handles the ListByInvoiceSection response.
func (client *BillingSubscriptionsClient) listByInvoiceSectionHandleResponse(resp *http.Response) (BillingSubscriptionsListByInvoiceSectionResponse, error) {
	result := BillingSubscriptionsListByInvoiceSectionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscriptionsListResult); err != nil {
		return BillingSubscriptionsListByInvoiceSectionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByInvoiceSectionHandleError handles the ListByInvoiceSection error response.
func (client *BillingSubscriptionsClient) listByInvoiceSectionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginMove - Moves a subscription's charges to a new invoice section. The new invoice section must belong to the same billing profile as the existing
// invoice section. This operation is supported for billing
// accounts with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) BeginMove(ctx context.Context, billingAccountName string, parameters TransferBillingSubscriptionRequestProperties, options *BillingSubscriptionsBeginMoveOptions) (BillingSubscriptionsMovePollerResponse, error) {
	resp, err := client.move(ctx, billingAccountName, parameters, options)
	if err != nil {
		return BillingSubscriptionsMovePollerResponse{}, err
	}
	result := BillingSubscriptionsMovePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BillingSubscriptionsClient.Move", "", resp, client.pl, client.moveHandleError)
	if err != nil {
		return BillingSubscriptionsMovePollerResponse{}, err
	}
	result.Poller = &BillingSubscriptionsMovePoller{
		pt: pt,
	}
	return result, nil
}

// Move - Moves a subscription's charges to a new invoice section. The new invoice section must belong to the same billing profile as the existing invoice
// section. This operation is supported for billing
// accounts with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) move(ctx context.Context, billingAccountName string, parameters TransferBillingSubscriptionRequestProperties, options *BillingSubscriptionsBeginMoveOptions) (*http.Response, error) {
	req, err := client.moveCreateRequest(ctx, billingAccountName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.moveHandleError(resp)
	}
	return resp, nil
}

// moveCreateRequest creates the Move request.
func (client *BillingSubscriptionsClient) moveCreateRequest(ctx context.Context, billingAccountName string, parameters TransferBillingSubscriptionRequestProperties, options *BillingSubscriptionsBeginMoveOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}/move"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// moveHandleError handles the Move error response.
func (client *BillingSubscriptionsClient) moveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Updates the properties of a billing subscription. Currently, cost center can be updated. The operation is supported only for billing accounts
// with agreement type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) Update(ctx context.Context, billingAccountName string, parameters BillingSubscription, options *BillingSubscriptionsUpdateOptions) (BillingSubscriptionsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, billingAccountName, parameters, options)
	if err != nil {
		return BillingSubscriptionsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BillingSubscriptionsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BillingSubscriptionsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *BillingSubscriptionsClient) updateCreateRequest(ctx context.Context, billingAccountName string, parameters BillingSubscription, options *BillingSubscriptionsUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleResponse handles the Update response.
func (client *BillingSubscriptionsClient) updateHandleResponse(resp *http.Response) (BillingSubscriptionsUpdateResponse, error) {
	result := BillingSubscriptionsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingSubscription); err != nil {
		return BillingSubscriptionsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *BillingSubscriptionsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ValidateMove - Validates if a subscription's charges can be moved to a new invoice section. This operation is supported for billing accounts with agreement
// type Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *BillingSubscriptionsClient) ValidateMove(ctx context.Context, billingAccountName string, parameters TransferBillingSubscriptionRequestProperties, options *BillingSubscriptionsValidateMoveOptions) (BillingSubscriptionsValidateMoveResponse, error) {
	req, err := client.validateMoveCreateRequest(ctx, billingAccountName, parameters, options)
	if err != nil {
		return BillingSubscriptionsValidateMoveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BillingSubscriptionsValidateMoveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BillingSubscriptionsValidateMoveResponse{}, client.validateMoveHandleError(resp)
	}
	return client.validateMoveHandleResponse(resp)
}

// validateMoveCreateRequest creates the ValidateMove request.
func (client *BillingSubscriptionsClient) validateMoveCreateRequest(ctx context.Context, billingAccountName string, parameters TransferBillingSubscriptionRequestProperties, options *BillingSubscriptionsValidateMoveOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}/validateMoveEligibility"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// validateMoveHandleResponse handles the ValidateMove response.
func (client *BillingSubscriptionsClient) validateMoveHandleResponse(resp *http.Response) (BillingSubscriptionsValidateMoveResponse, error) {
	result := BillingSubscriptionsValidateMoveResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ValidateSubscriptionTransferEligibilityResult); err != nil {
		return BillingSubscriptionsValidateMoveResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// validateMoveHandleError handles the ValidateMove error response.
func (client *BillingSubscriptionsClient) validateMoveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
