//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// InvoicesClient contains the methods for the Invoices group.
// Don't use this type directly, use NewInvoicesClient() instead.
type InvoicesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewInvoicesClient creates a new instance of InvoicesClient with the specified values.
func NewInvoicesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *InvoicesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &InvoicesClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginDownloadBillingSubscriptionInvoice - Gets a URL to download an invoice.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) BeginDownloadBillingSubscriptionInvoice(ctx context.Context, invoiceName string, downloadToken string, options *InvoicesBeginDownloadBillingSubscriptionInvoiceOptions) (InvoicesDownloadBillingSubscriptionInvoicePollerResponse, error) {
	resp, err := client.downloadBillingSubscriptionInvoice(ctx, invoiceName, downloadToken, options)
	if err != nil {
		return InvoicesDownloadBillingSubscriptionInvoicePollerResponse{}, err
	}
	result := InvoicesDownloadBillingSubscriptionInvoicePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("InvoicesClient.DownloadBillingSubscriptionInvoice", "location", resp, client.pl, client.downloadBillingSubscriptionInvoiceHandleError)
	if err != nil {
		return InvoicesDownloadBillingSubscriptionInvoicePollerResponse{}, err
	}
	result.Poller = &InvoicesDownloadBillingSubscriptionInvoicePoller{
		pt: pt,
	}
	return result, nil
}

// DownloadBillingSubscriptionInvoice - Gets a URL to download an invoice.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) downloadBillingSubscriptionInvoice(ctx context.Context, invoiceName string, downloadToken string, options *InvoicesBeginDownloadBillingSubscriptionInvoiceOptions) (*http.Response, error) {
	req, err := client.downloadBillingSubscriptionInvoiceCreateRequest(ctx, invoiceName, downloadToken, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.downloadBillingSubscriptionInvoiceHandleError(resp)
	}
	return resp, nil
}

// downloadBillingSubscriptionInvoiceCreateRequest creates the DownloadBillingSubscriptionInvoice request.
func (client *InvoicesClient) downloadBillingSubscriptionInvoiceCreateRequest(ctx context.Context, invoiceName string, downloadToken string, options *InvoicesBeginDownloadBillingSubscriptionInvoiceOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if invoiceName == "" {
		return nil, errors.New("parameter invoiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceName}", url.PathEscape(invoiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	reqQP.Set("downloadToken", downloadToken)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// downloadBillingSubscriptionInvoiceHandleError handles the DownloadBillingSubscriptionInvoice error response.
func (client *InvoicesClient) downloadBillingSubscriptionInvoiceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDownloadInvoice - Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement
// or Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) BeginDownloadInvoice(ctx context.Context, billingAccountName string, invoiceName string, downloadToken string, options *InvoicesBeginDownloadInvoiceOptions) (InvoicesDownloadInvoicePollerResponse, error) {
	resp, err := client.downloadInvoice(ctx, billingAccountName, invoiceName, downloadToken, options)
	if err != nil {
		return InvoicesDownloadInvoicePollerResponse{}, err
	}
	result := InvoicesDownloadInvoicePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("InvoicesClient.DownloadInvoice", "location", resp, client.pl, client.downloadInvoiceHandleError)
	if err != nil {
		return InvoicesDownloadInvoicePollerResponse{}, err
	}
	result.Poller = &InvoicesDownloadInvoicePoller{
		pt: pt,
	}
	return result, nil
}

// DownloadInvoice - Gets a URL to download an invoice. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement
// or Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) downloadInvoice(ctx context.Context, billingAccountName string, invoiceName string, downloadToken string, options *InvoicesBeginDownloadInvoiceOptions) (*http.Response, error) {
	req, err := client.downloadInvoiceCreateRequest(ctx, billingAccountName, invoiceName, downloadToken, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.downloadInvoiceHandleError(resp)
	}
	return resp, nil
}

// downloadInvoiceCreateRequest creates the DownloadInvoice request.
func (client *InvoicesClient) downloadInvoiceCreateRequest(ctx context.Context, billingAccountName string, invoiceName string, downloadToken string, options *InvoicesBeginDownloadInvoiceOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if invoiceName == "" {
		return nil, errors.New("parameter invoiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceName}", url.PathEscape(invoiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	reqQP.Set("downloadToken", downloadToken)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// downloadInvoiceHandleError handles the DownloadInvoice error response.
func (client *InvoicesClient) downloadInvoiceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDownloadMultipleBillingProfileInvoices - Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file.
// The operation is supported for billing accounts with agreement type Microsoft Partner
// Agreement or Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) BeginDownloadMultipleBillingProfileInvoices(ctx context.Context, billingAccountName string, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingProfileInvoicesOptions) (InvoicesDownloadMultipleBillingProfileInvoicesPollerResponse, error) {
	resp, err := client.downloadMultipleBillingProfileInvoices(ctx, billingAccountName, downloadUrls, options)
	if err != nil {
		return InvoicesDownloadMultipleBillingProfileInvoicesPollerResponse{}, err
	}
	result := InvoicesDownloadMultipleBillingProfileInvoicesPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("InvoicesClient.DownloadMultipleBillingProfileInvoices", "location", resp, client.pl, client.downloadMultipleBillingProfileInvoicesHandleError)
	if err != nil {
		return InvoicesDownloadMultipleBillingProfileInvoicesPollerResponse{}, err
	}
	result.Poller = &InvoicesDownloadMultipleBillingProfileInvoicesPoller{
		pt: pt,
	}
	return result, nil
}

// DownloadMultipleBillingProfileInvoices - Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file. The
// operation is supported for billing accounts with agreement type Microsoft Partner
// Agreement or Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) downloadMultipleBillingProfileInvoices(ctx context.Context, billingAccountName string, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingProfileInvoicesOptions) (*http.Response, error) {
	req, err := client.downloadMultipleBillingProfileInvoicesCreateRequest(ctx, billingAccountName, downloadUrls, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.downloadMultipleBillingProfileInvoicesHandleError(resp)
	}
	return resp, nil
}

// downloadMultipleBillingProfileInvoicesCreateRequest creates the DownloadMultipleBillingProfileInvoices request.
func (client *InvoicesClient) downloadMultipleBillingProfileInvoicesCreateRequest(ctx context.Context, billingAccountName string, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingProfileInvoicesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, downloadUrls)
}

// downloadMultipleBillingProfileInvoicesHandleError handles the DownloadMultipleBillingProfileInvoices error response.
func (client *InvoicesClient) downloadMultipleBillingProfileInvoicesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDownloadMultipleBillingSubscriptionInvoices - Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
// file.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) BeginDownloadMultipleBillingSubscriptionInvoices(ctx context.Context, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingSubscriptionInvoicesOptions) (InvoicesDownloadMultipleBillingSubscriptionInvoicesPollerResponse, error) {
	resp, err := client.downloadMultipleBillingSubscriptionInvoices(ctx, downloadUrls, options)
	if err != nil {
		return InvoicesDownloadMultipleBillingSubscriptionInvoicesPollerResponse{}, err
	}
	result := InvoicesDownloadMultipleBillingSubscriptionInvoicesPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("InvoicesClient.DownloadMultipleBillingSubscriptionInvoices", "location", resp, client.pl, client.downloadMultipleBillingSubscriptionInvoicesHandleError)
	if err != nil {
		return InvoicesDownloadMultipleBillingSubscriptionInvoicesPollerResponse{}, err
	}
	result.Poller = &InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller{
		pt: pt,
	}
	return result, nil
}

// DownloadMultipleBillingSubscriptionInvoices - Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip file.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) downloadMultipleBillingSubscriptionInvoices(ctx context.Context, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingSubscriptionInvoicesOptions) (*http.Response, error) {
	req, err := client.downloadMultipleBillingSubscriptionInvoicesCreateRequest(ctx, downloadUrls, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.downloadMultipleBillingSubscriptionInvoicesHandleError(resp)
	}
	return resp, nil
}

// downloadMultipleBillingSubscriptionInvoicesCreateRequest creates the DownloadMultipleBillingSubscriptionInvoices request.
func (client *InvoicesClient) downloadMultipleBillingSubscriptionInvoicesCreateRequest(ctx context.Context, downloadUrls []*string, options *InvoicesBeginDownloadMultipleBillingSubscriptionInvoicesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, downloadUrls)
}

// downloadMultipleBillingSubscriptionInvoicesHandleError handles the DownloadMultipleBillingSubscriptionInvoices error response.
func (client *InvoicesClient) downloadMultipleBillingSubscriptionInvoicesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets an invoice by billing account name and ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement
// or Microsoft Customer Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) Get(ctx context.Context, billingAccountName string, invoiceName string, options *InvoicesGetOptions) (InvoicesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingAccountName, invoiceName, options)
	if err != nil {
		return InvoicesGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return InvoicesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return InvoicesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *InvoicesClient) getCreateRequest(ctx context.Context, billingAccountName string, invoiceName string, options *InvoicesGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if invoiceName == "" {
		return nil, errors.New("parameter invoiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceName}", url.PathEscape(invoiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *InvoicesClient) getHandleResponse(resp *http.Response) (InvoicesGetResponse, error) {
	result := InvoicesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Invoice); err != nil {
		return InvoicesGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *InvoicesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByID - Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
// Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) GetByID(ctx context.Context, invoiceName string, options *InvoicesGetByIDOptions) (InvoicesGetByIDResponse, error) {
	req, err := client.getByIDCreateRequest(ctx, invoiceName, options)
	if err != nil {
		return InvoicesGetByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return InvoicesGetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return InvoicesGetByIDResponse{}, client.getByIDHandleError(resp)
	}
	return client.getByIDHandleResponse(resp)
}

// getByIDCreateRequest creates the GetByID request.
func (client *InvoicesClient) getByIDCreateRequest(ctx context.Context, invoiceName string, options *InvoicesGetByIDOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/default/invoices/{invoiceName}"
	if invoiceName == "" {
		return nil, errors.New("parameter invoiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceName}", url.PathEscape(invoiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByIDHandleResponse handles the GetByID response.
func (client *InvoicesClient) getByIDHandleResponse(resp *http.Response) (InvoicesGetByIDResponse, error) {
	result := InvoicesGetByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Invoice); err != nil {
		return InvoicesGetByIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getByIDHandleError handles the GetByID error response.
func (client *InvoicesClient) getByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBySubscriptionAndInvoiceID - Gets an invoice by subscription ID and invoice ID.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) GetBySubscriptionAndInvoiceID(ctx context.Context, invoiceName string, options *InvoicesGetBySubscriptionAndInvoiceIDOptions) (InvoicesGetBySubscriptionAndInvoiceIDResponse, error) {
	req, err := client.getBySubscriptionAndInvoiceIDCreateRequest(ctx, invoiceName, options)
	if err != nil {
		return InvoicesGetBySubscriptionAndInvoiceIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return InvoicesGetBySubscriptionAndInvoiceIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return InvoicesGetBySubscriptionAndInvoiceIDResponse{}, client.getBySubscriptionAndInvoiceIDHandleError(resp)
	}
	return client.getBySubscriptionAndInvoiceIDHandleResponse(resp)
}

// getBySubscriptionAndInvoiceIDCreateRequest creates the GetBySubscriptionAndInvoiceID request.
func (client *InvoicesClient) getBySubscriptionAndInvoiceIDCreateRequest(ctx context.Context, invoiceName string, options *InvoicesGetBySubscriptionAndInvoiceIDOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if invoiceName == "" {
		return nil, errors.New("parameter invoiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceName}", url.PathEscape(invoiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBySubscriptionAndInvoiceIDHandleResponse handles the GetBySubscriptionAndInvoiceID response.
func (client *InvoicesClient) getBySubscriptionAndInvoiceIDHandleResponse(resp *http.Response) (InvoicesGetBySubscriptionAndInvoiceIDResponse, error) {
	result := InvoicesGetBySubscriptionAndInvoiceIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Invoice); err != nil {
		return InvoicesGetBySubscriptionAndInvoiceIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBySubscriptionAndInvoiceIDHandleError handles the GetBySubscriptionAndInvoiceID error response.
func (client *InvoicesClient) getBySubscriptionAndInvoiceIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingAccount - Lists the invoices for a billing account for a given start date and end date. The operation is supported for billing accounts
// with agreement type Microsoft Partner Agreement or Microsoft Customer
// Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) ListByBillingAccount(billingAccountName string, periodStartDate string, periodEndDate string, options *InvoicesListByBillingAccountOptions) *InvoicesListByBillingAccountPager {
	return &InvoicesListByBillingAccountPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingAccountCreateRequest(ctx, billingAccountName, periodStartDate, periodEndDate, options)
		},
		advancer: func(ctx context.Context, resp InvoicesListByBillingAccountResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.InvoiceListResult.NextLink)
		},
	}
}

// listByBillingAccountCreateRequest creates the ListByBillingAccount request.
func (client *InvoicesClient) listByBillingAccountCreateRequest(ctx context.Context, billingAccountName string, periodStartDate string, periodEndDate string, options *InvoicesListByBillingAccountOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	reqQP.Set("periodStartDate", periodStartDate)
	reqQP.Set("periodEndDate", periodEndDate)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingAccountHandleResponse handles the ListByBillingAccount response.
func (client *InvoicesClient) listByBillingAccountHandleResponse(resp *http.Response) (InvoicesListByBillingAccountResponse, error) {
	result := InvoicesListByBillingAccountResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.InvoiceListResult); err != nil {
		return InvoicesListByBillingAccountResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingAccountHandleError handles the ListByBillingAccount error response.
func (client *InvoicesClient) listByBillingAccountHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingProfile - Lists the invoices for a billing profile for a given start date and end date. The operation is supported for billing accounts
// with agreement type Microsoft Partner Agreement or Microsoft Customer
// Agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) ListByBillingProfile(billingAccountName string, billingProfileName string, periodStartDate string, periodEndDate string, options *InvoicesListByBillingProfileOptions) *InvoicesListByBillingProfilePager {
	return &InvoicesListByBillingProfilePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingProfileCreateRequest(ctx, billingAccountName, billingProfileName, periodStartDate, periodEndDate, options)
		},
		advancer: func(ctx context.Context, resp InvoicesListByBillingProfileResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.InvoiceListResult.NextLink)
		},
	}
}

// listByBillingProfileCreateRequest creates the ListByBillingProfile request.
func (client *InvoicesClient) listByBillingProfileCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, periodStartDate string, periodEndDate string, options *InvoicesListByBillingProfileOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-05-01")
	reqQP.Set("periodStartDate", periodStartDate)
	reqQP.Set("periodEndDate", periodEndDate)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingProfileHandleResponse handles the ListByBillingProfile response.
func (client *InvoicesClient) listByBillingProfileHandleResponse(resp *http.Response) (InvoicesListByBillingProfileResponse, error) {
	result := InvoicesListByBillingProfileResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.InvoiceListResult); err != nil {
		return InvoicesListByBillingProfileResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingProfileHandleError handles the ListByBillingProfile error response.
func (client *InvoicesClient) listByBillingProfileHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByBillingSubscription - Lists the invoices for a subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *InvoicesClient) ListByBillingSubscription(periodStartDate string, periodEndDate string, options *InvoicesListByBillingSubscriptionOptions) *InvoicesListByBillingSubscriptionPager {
	return &InvoicesListByBillingSubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByBillingSubscriptionCreateRequest(ctx, periodStartDate, periodEndDate, options)
		},
		advancer: func(ctx context.Context, resp InvoicesListByBillingSubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.InvoiceListResult.NextLink)
		},
	}
}

// listByBillingSubscriptionCreateRequest creates the ListByBillingSubscription request.
func (client *InvoicesClient) listByBillingSubscriptionCreateRequest(ctx context.Context, periodStartDate string, periodEndDate string, options *InvoicesListByBillingSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("periodStartDate", periodStartDate)
	reqQP.Set("periodEndDate", periodEndDate)
	reqQP.Set("api-version", "2020-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByBillingSubscriptionHandleResponse handles the ListByBillingSubscription response.
func (client *InvoicesClient) listByBillingSubscriptionHandleResponse(resp *http.Response) (InvoicesListByBillingSubscriptionResponse, error) {
	result := InvoicesListByBillingSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.InvoiceListResult); err != nil {
		return InvoicesListByBillingSubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByBillingSubscriptionHandleError handles the ListByBillingSubscription error response.
func (client *InvoicesClient) listByBillingSubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
