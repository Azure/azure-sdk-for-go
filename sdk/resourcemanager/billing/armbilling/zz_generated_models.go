//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AddressDetails - Address details.
type AddressDetails struct {
	// REQUIRED; Address line 1.
	AddressLine1 *string `json:"addressLine1,omitempty"`

	// REQUIRED; Country code uses ISO2, 2-digit format.
	Country *string `json:"country,omitempty"`

	// Address line 2.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// Address line 3.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// Address city.
	City *string `json:"city,omitempty"`

	// Company name.
	CompanyName *string `json:"companyName,omitempty"`

	// Address district.
	District *string `json:"district,omitempty"`

	// Email address.
	Email *string `json:"email,omitempty"`

	// First name.
	FirstName *string `json:"firstName,omitempty"`

	// Last name.
	LastName *string `json:"lastName,omitempty"`

	// Middle name.
	MiddleName *string `json:"middleName,omitempty"`

	// Phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// Postal code.
	PostalCode *string `json:"postalCode,omitempty"`

	// Address region.
	Region *string `json:"region,omitempty"`
}

// AddressValidateOptions contains the optional parameters for the Address.Validate method.
type AddressValidateOptions struct {
	// placeholder for future optional parameters
}

// Agreement - An agreement.
type Agreement struct {
	Resource
	// The properties of an agreement.
	Properties *AgreementProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Agreement.
func (a Agreement) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AgreementListResult - Result of listing agreements.
type AgreementListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of agreements.
	Value []*Agreement `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AgreementListResult.
func (a AgreementListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AgreementProperties - The properties of an agreement.
type AgreementProperties struct {
	// The list of participants that participates in acceptance of an agreement.
	Participants []*Participants `json:"participants,omitempty"`

	// READ-ONLY; The mode of acceptance for an agreement.
	AcceptanceMode *AcceptanceMode `json:"acceptanceMode,omitempty" azure:"ro"`

	// READ-ONLY; The URL to download the agreement.
	AgreementLink *string `json:"agreementLink,omitempty" azure:"ro"`

	// READ-ONLY; The category of the agreement signed by a customer.
	Category *Category `json:"category,omitempty" azure:"ro"`

	// READ-ONLY; The date from which the agreement is effective.
	EffectiveDate *time.Time `json:"effectiveDate,omitempty" azure:"ro"`

	// READ-ONLY; The date when the agreement expires.
	ExpirationDate *time.Time `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; The current status of the agreement.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AgreementProperties.
func (a AgreementProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "acceptanceMode", a.AcceptanceMode)
	populate(objectMap, "agreementLink", a.AgreementLink)
	populate(objectMap, "category", a.Category)
	populateTimeRFC3339(objectMap, "effectiveDate", a.EffectiveDate)
	populateTimeRFC3339(objectMap, "expirationDate", a.ExpirationDate)
	populate(objectMap, "participants", a.Participants)
	populate(objectMap, "status", a.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AgreementProperties.
func (a *AgreementProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "acceptanceMode":
			err = unpopulate(val, &a.AcceptanceMode)
			delete(rawMsg, key)
		case "agreementLink":
			err = unpopulate(val, &a.AgreementLink)
			delete(rawMsg, key)
		case "category":
			err = unpopulate(val, &a.Category)
			delete(rawMsg, key)
		case "effectiveDate":
			err = unpopulateTimeRFC3339(val, &a.EffectiveDate)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &a.ExpirationDate)
			delete(rawMsg, key)
		case "participants":
			err = unpopulate(val, &a.Participants)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AgreementsGetOptions contains the optional parameters for the Agreements.Get method.
type AgreementsGetOptions struct {
	// May be used to expand the participants.
	Expand *string
}

// AgreementsListByBillingAccountOptions contains the optional parameters for the Agreements.ListByBillingAccount method.
type AgreementsListByBillingAccountOptions struct {
	// May be used to expand the participants.
	Expand *string
}

// Amount - The amount.
type Amount struct {
	// Amount value.
	Value *float32 `json:"value,omitempty"`

	// READ-ONLY; The currency for the amount value.
	Currency *string `json:"currency,omitempty" azure:"ro"`
}

// AvailableBalance - The latest Azure credit balance. This is the balance available for pay now.
type AvailableBalance struct {
	Resource
	// The properties of available balance.
	Properties *AvailableBalanceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AvailableBalance.
func (a AvailableBalance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AvailableBalanceProperties - The properties of available balance.
type AvailableBalanceProperties struct {
	// READ-ONLY; Balance amount.
	Amount *Amount `json:"amount,omitempty" azure:"ro"`
}

// AvailableBalancesGetOptions contains the optional parameters for the AvailableBalances.Get method.
type AvailableBalancesGetOptions struct {
	// placeholder for future optional parameters
}

// AzurePlan - Details of the Azure plan.
type AzurePlan struct {
	// The sku id.
	SKUID *string `json:"skuId,omitempty"`

	// READ-ONLY; The sku description.
	SKUDescription *string `json:"skuDescription,omitempty" azure:"ro"`
}

// BillingAccount - A billing account.
type BillingAccount struct {
	Resource
	// The properties of the billing account.
	Properties *BillingAccountProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingAccount.
func (b BillingAccount) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingAccountListResult - The list of billing accounts.
type BillingAccountListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing accounts.
	Value []*BillingAccount `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingAccountListResult.
func (b BillingAccountListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingAccountProperties - The properties of the billing account.
type BillingAccountProperties struct {
	// The billing profiles associated with the billing account. By default this is not populated, unless it's specified in $expand.
	BillingProfiles *BillingProfilesOnExpand `json:"billingProfiles,omitempty"`

	// The departments associated to the enrollment.
	Departments []*Department `json:"departments,omitempty"`

	// The billing account name.
	DisplayName *string `json:"displayName,omitempty"`

	// The accounts associated to the enrollment.
	EnrollmentAccounts []*EnrollmentAccount `json:"enrollmentAccounts,omitempty"`

	// Notification email address, only for legacy accounts
	NotificationEmailAddress *string `json:"notificationEmailAddress,omitempty"`

	// The address of the individual or organization that is responsible for the billing account.
	SoldTo *AddressDetails `json:"soldTo,omitempty"`

	// READ-ONLY; The current status of the billing account.
	AccountStatus *AccountStatus `json:"accountStatus,omitempty" azure:"ro"`

	// READ-ONLY; The type of customer.
	AccountType *AccountType `json:"accountType,omitempty" azure:"ro"`

	// READ-ONLY; The type of agreement.
	AgreementType *AgreementType `json:"agreementType,omitempty" azure:"ro"`

	// READ-ONLY; The details about the associated legacy enrollment. By default this is not populated, unless it's specified in $expand.
	EnrollmentDetails *Enrollment `json:"enrollmentDetails,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether user has read access to the billing account.
	HasReadAccess *bool `json:"hasReadAccess,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingAccountProperties.
func (b BillingAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountStatus", b.AccountStatus)
	populate(objectMap, "accountType", b.AccountType)
	populate(objectMap, "agreementType", b.AgreementType)
	populate(objectMap, "billingProfiles", b.BillingProfiles)
	populate(objectMap, "departments", b.Departments)
	populate(objectMap, "displayName", b.DisplayName)
	populate(objectMap, "enrollmentAccounts", b.EnrollmentAccounts)
	populate(objectMap, "enrollmentDetails", b.EnrollmentDetails)
	populate(objectMap, "hasReadAccess", b.HasReadAccess)
	populate(objectMap, "notificationEmailAddress", b.NotificationEmailAddress)
	populate(objectMap, "soldTo", b.SoldTo)
	return json.Marshal(objectMap)
}

// BillingAccountUpdateRequest - The request properties of the billing account that can be updated.
type BillingAccountUpdateRequest struct {
	// A billing property.
	Properties *BillingAccountProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingAccountUpdateRequest.
func (b BillingAccountUpdateRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingAccountsBeginUpdateOptions contains the optional parameters for the BillingAccounts.BeginUpdate method.
type BillingAccountsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// BillingAccountsGetOptions contains the optional parameters for the BillingAccounts.Get method.
type BillingAccountsGetOptions struct {
	// May be used to expand the soldTo, invoice sections and billing profiles.
	Expand *string
}

// BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptions contains the optional parameters for the BillingAccounts.ListInvoiceSectionsByCreateSubscriptionPermission
// method.
type BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptions struct {
	// placeholder for future optional parameters
}

// BillingAccountsListOptions contains the optional parameters for the BillingAccounts.List method.
type BillingAccountsListOptions struct {
	// May be used to expand the soldTo, invoice sections and billing profiles.
	Expand *string
}

// BillingPeriod - A billing period resource.
type BillingPeriod struct {
	Resource
	// A billing period.
	Properties *BillingPeriodProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingPeriod.
func (b BillingPeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingPeriodProperties - The properties of the billing period.
type BillingPeriodProperties struct {
	// READ-ONLY; The end of the date range covered by the billing period.
	BillingPeriodEndDate *time.Time `json:"billingPeriodEndDate,omitempty" azure:"ro"`

	// READ-ONLY; The start of the date range covered by the billing period.
	BillingPeriodStartDate *time.Time `json:"billingPeriodStartDate,omitempty" azure:"ro"`

	// READ-ONLY; Array of invoice ids that associated with.
	InvoiceIDs []*string `json:"invoiceIds,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingPeriodProperties.
func (b BillingPeriodProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateDateType(objectMap, "billingPeriodEndDate", b.BillingPeriodEndDate)
	populateDateType(objectMap, "billingPeriodStartDate", b.BillingPeriodStartDate)
	populate(objectMap, "invoiceIds", b.InvoiceIDs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BillingPeriodProperties.
func (b *BillingPeriodProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "billingPeriodEndDate":
			err = unpopulateDateType(val, &b.BillingPeriodEndDate)
			delete(rawMsg, key)
		case "billingPeriodStartDate":
			err = unpopulateDateType(val, &b.BillingPeriodStartDate)
			delete(rawMsg, key)
		case "invoiceIds":
			err = unpopulate(val, &b.InvoiceIDs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BillingPeriodsGetOptions contains the optional parameters for the BillingPeriods.Get method.
type BillingPeriodsGetOptions struct {
	// placeholder for future optional parameters
}

// BillingPeriodsListOptions contains the optional parameters for the BillingPeriods.List method.
type BillingPeriodsListOptions struct {
	// May be used to filter billing periods by billingPeriodEndDate. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support
	// 'ne', 'or', or 'not'.
	Filter *string
	// Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink
	// element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
	Skiptoken *string
	// May be used to limit the number of results to the most recent N billing periods.
	Top *int32
}

// BillingPeriodsListResult - Result of listing billing periods. It contains a list of available billing periods in reverse chronological order.
type BillingPeriodsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing periods.
	Value []*BillingPeriod `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingPeriodsListResult.
func (b BillingPeriodsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingPermissionsListByBillingAccountOptions contains the optional parameters for the BillingPermissions.ListByBillingAccount method.
type BillingPermissionsListByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingPermissionsListByBillingProfileOptions contains the optional parameters for the BillingPermissions.ListByBillingProfile method.
type BillingPermissionsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingPermissionsListByCustomerOptions contains the optional parameters for the BillingPermissions.ListByCustomer method.
type BillingPermissionsListByCustomerOptions struct {
	// placeholder for future optional parameters
}

// BillingPermissionsListByInvoiceSectionsOptions contains the optional parameters for the BillingPermissions.ListByInvoiceSections method.
type BillingPermissionsListByInvoiceSectionsOptions struct {
	// placeholder for future optional parameters
}

// BillingPermissionsListResult - Result of list billingPermissions a caller has on a billing account.
type BillingPermissionsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billingPermissions a caller has on a billing account.
	Value []*BillingPermissionsProperties `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingPermissionsListResult.
func (b BillingPermissionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingPermissionsProperties - The set of allowed action and not allowed actions a caller has on a billing account
type BillingPermissionsProperties struct {
	// READ-ONLY; The set of actions that the caller is allowed to perform.
	Actions []*string `json:"actions,omitempty" azure:"ro"`

	// READ-ONLY; The set of actions that the caller is not allowed to perform.
	NotActions []*string `json:"notActions,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingPermissionsProperties.
func (b BillingPermissionsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", b.Actions)
	populate(objectMap, "notActions", b.NotActions)
	return json.Marshal(objectMap)
}

// BillingProfile - A billing profile.
type BillingProfile struct {
	Resource
	// The properties of the billing profile.
	Properties *BillingProfileProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProfile.
func (b BillingProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingProfileCreationRequest - The request parameters for creating a new billing profile.
type BillingProfileCreationRequest struct {
	// The address of the individual or organization that is responsible for the billing profile.
	BillTo *AddressDetails `json:"billTo,omitempty"`

	// The name of the billing profile.
	DisplayName *string `json:"displayName,omitempty"`

	// Enabled azure plans for the billing profile.
	EnabledAzurePlans []*AzurePlan `json:"enabledAzurePlans,omitempty"`

	// Flag controlling whether the invoices for the billing profile are sent through email.
	InvoiceEmailOptIn *bool `json:"invoiceEmailOptIn,omitempty"`

	// The purchase order name that will appear on the invoices generated for the billing profile.
	PoNumber *string `json:"poNumber,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProfileCreationRequest.
func (b BillingProfileCreationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billTo", b.BillTo)
	populate(objectMap, "displayName", b.DisplayName)
	populate(objectMap, "enabledAzurePlans", b.EnabledAzurePlans)
	populate(objectMap, "invoiceEmailOptIn", b.InvoiceEmailOptIn)
	populate(objectMap, "poNumber", b.PoNumber)
	return json.Marshal(objectMap)
}

// BillingProfileListResult - The list of billing profiles.
type BillingProfileListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing profiles.
	Value []*BillingProfile `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProfileListResult.
func (b BillingProfileListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingProfileProperties - The properties of the billing profile.
type BillingProfileProperties struct {
	// Billing address.
	BillTo *AddressDetails `json:"billTo,omitempty"`

	// The name of the billing profile.
	DisplayName *string `json:"displayName,omitempty"`

	// Information about the enabled azure plans.
	EnabledAzurePlans []*AzurePlan `json:"enabledAzurePlans,omitempty"`

	// Flag controlling whether the invoices for the billing profile are sent through email.
	InvoiceEmailOptIn *bool `json:"invoiceEmailOptIn,omitempty"`

	// The invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand.
	InvoiceSections *InvoiceSectionsOnExpand `json:"invoiceSections,omitempty"`

	// The purchase order name that will appear on the invoices generated for the billing profile.
	PoNumber *string `json:"poNumber,omitempty"`

	// Tags of billing profiles.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Identifies which services and purchases are paid by a billing profile.
	BillingRelationshipType *BillingRelationshipType `json:"billingRelationshipType,omitempty" azure:"ro"`

	// READ-ONLY; The currency in which the charges for the billing profile are billed.
	Currency *string `json:"currency,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether user has read access to the billing profile.
	HasReadAccess *bool `json:"hasReadAccess,omitempty" azure:"ro"`

	// READ-ONLY; Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
	IndirectRelationshipInfo *IndirectRelationshipInfo `json:"indirectRelationshipInfo,omitempty" azure:"ro"`

	// READ-ONLY; The day of the month when the invoice for the billing profile is generated.
	InvoiceDay *int32 `json:"invoiceDay,omitempty" azure:"ro"`

	// READ-ONLY; The billing profile spending limit.
	SpendingLimit *SpendingLimit `json:"spendingLimit,omitempty" azure:"ro"`

	// READ-ONLY; The status of the billing profile.
	Status *BillingProfileStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Reason for the specified billing profile status.
	StatusReasonCode *StatusReasonCode `json:"statusReasonCode,omitempty" azure:"ro"`

	// READ-ONLY; The system generated unique identifier for a billing profile.
	SystemID *string `json:"systemId,omitempty" azure:"ro"`

	// READ-ONLY; Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as
	// the billing profile gets associated with accounts in various
	// clouds.
	TargetClouds []*TargetCloud `json:"targetClouds,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProfileProperties.
func (b BillingProfileProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billTo", b.BillTo)
	populate(objectMap, "billingRelationshipType", b.BillingRelationshipType)
	populate(objectMap, "currency", b.Currency)
	populate(objectMap, "displayName", b.DisplayName)
	populate(objectMap, "enabledAzurePlans", b.EnabledAzurePlans)
	populate(objectMap, "hasReadAccess", b.HasReadAccess)
	populate(objectMap, "indirectRelationshipInfo", b.IndirectRelationshipInfo)
	populate(objectMap, "invoiceDay", b.InvoiceDay)
	populate(objectMap, "invoiceEmailOptIn", b.InvoiceEmailOptIn)
	populate(objectMap, "invoiceSections", b.InvoiceSections)
	populate(objectMap, "poNumber", b.PoNumber)
	populate(objectMap, "spendingLimit", b.SpendingLimit)
	populate(objectMap, "status", b.Status)
	populate(objectMap, "statusReasonCode", b.StatusReasonCode)
	populate(objectMap, "systemId", b.SystemID)
	populate(objectMap, "tags", b.Tags)
	populate(objectMap, "targetClouds", b.TargetClouds)
	return json.Marshal(objectMap)
}

// BillingProfilesBeginCreateOrUpdateOptions contains the optional parameters for the BillingProfiles.BeginCreateOrUpdate method.
type BillingProfilesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BillingProfilesGetOptions contains the optional parameters for the BillingProfiles.Get method.
type BillingProfilesGetOptions struct {
	// May be used to expand the invoice sections.
	Expand *string
}

// BillingProfilesListByBillingAccountOptions contains the optional parameters for the BillingProfiles.ListByBillingAccount method.
type BillingProfilesListByBillingAccountOptions struct {
	// May be used to expand the invoice sections.
	Expand *string
}

// BillingProfilesOnExpand - The billing profiles associated with the billing account. By default this is not populated, unless it's specified in $expand.
type BillingProfilesOnExpand struct {
	// The billing profiles associated with the billing account.
	Value []*BillingProfile `json:"value,omitempty"`

	// READ-ONLY; Indicates whether there are more billing profiles than the ones listed in this collection. The collection lists a maximum of 50 billing profiles.
	// To get all billing profiles, use the list billing
	// profiles API.
	HasMoreResults *bool `json:"hasMoreResults,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProfilesOnExpand.
func (b BillingProfilesOnExpand) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hasMoreResults", b.HasMoreResults)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingProperty - A billing property.
type BillingProperty struct {
	Resource
	// A billing property.
	Properties *BillingPropertyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingProperty.
func (b BillingProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingPropertyGetOptions contains the optional parameters for the BillingProperty.Get method.
type BillingPropertyGetOptions struct {
	// placeholder for future optional parameters
}

// BillingPropertyProperties - The billing property.
type BillingPropertyProperties struct {
	// The cost center applied to the subscription.
	CostCenter *string `json:"costCenter,omitempty"`

	// READ-ONLY; The email address on which the account admin gets all Azure notifications.
	AccountAdminNotificationEmailAddress *string `json:"accountAdminNotificationEmailAddress,omitempty" azure:"ro"`

	// READ-ONLY; The name of the billing account to which the subscription is billed.
	BillingAccountDisplayName *string `json:"billingAccountDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing account to which the subscription is billed.
	BillingAccountID *string `json:"billingAccountId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the billing profile to which the subscription is billed.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile to which the subscription is billed.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The billing profile spending limit.
	BillingProfileSpendingLimit *BillingProfileSpendingLimit `json:"billingProfileSpendingLimit,omitempty" azure:"ro"`

	// READ-ONLY; The status of the billing profile.
	BillingProfileStatus *BillingProfileStatus `json:"billingProfileStatus,omitempty" azure:"ro"`

	// READ-ONLY; Reason for the specified billing profile status.
	BillingProfileStatusReasonCode *BillingProfileStatusReasonCode `json:"billingProfileStatusReasonCode,omitempty" azure:"ro"`

	// READ-ONLY; The Azure AD tenant ID of the billing account for the subscription.
	BillingTenantID *string `json:"billingTenantId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the invoice section to which the subscription is billed.
	InvoiceSectionDisplayName *string `json:"invoiceSectionDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice section to which the subscription is billed.
	InvoiceSectionID *string `json:"invoiceSectionId,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether user is the account admin.
	IsAccountAdmin *bool `json:"isAccountAdmin,omitempty" azure:"ro"`

	// READ-ONLY; The product ID of the Azure plan.
	ProductID *string `json:"productId,omitempty" azure:"ro"`

	// READ-ONLY; The product name of the Azure plan.
	ProductName *string `json:"productName,omitempty" azure:"ro"`

	// READ-ONLY; The sku description of the Azure plan for the subscription.
	SKUDescription *string `json:"skuDescription,omitempty" azure:"ro"`

	// READ-ONLY; The sku ID of the Azure plan for the subscription.
	SKUID *string `json:"skuId,omitempty" azure:"ro"`
}

// BillingPropertyUpdateOptions contains the optional parameters for the BillingProperty.Update method.
type BillingPropertyUpdateOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignment - The role assignment
type BillingRoleAssignment struct {
	Resource
	// The properties of the role assignment.
	Properties *BillingRoleAssignmentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingRoleAssignment.
func (b BillingRoleAssignment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingRoleAssignmentListResult - The list of role assignments.
type BillingRoleAssignmentListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of role assignments.
	Value []*BillingRoleAssignment `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingRoleAssignmentListResult.
func (b BillingRoleAssignmentListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingRoleAssignmentProperties - The properties of the role assignment.
type BillingRoleAssignmentProperties struct {
	// The principal id of the user to whom the role was assigned.
	PrincipalID *string `json:"principalId,omitempty"`

	// The principal tenant id of the user to whom the role was assigned.
	PrincipalTenantID *string `json:"principalTenantId,omitempty"`

	// The ID of the role definition.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`

	// The authentication type.
	UserAuthenticationType *string `json:"userAuthenticationType,omitempty"`

	// The email address of the user.
	UserEmailAddress *string `json:"userEmailAddress,omitempty"`

	// READ-ONLY; The principal Id of the user who created the role assignment.
	CreatedByPrincipalID *string `json:"createdByPrincipalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant Id of the user who created the role assignment.
	CreatedByPrincipalTenantID *string `json:"createdByPrincipalTenantId,omitempty" azure:"ro"`

	// READ-ONLY; The email address of the user who created the role assignment.
	CreatedByUserEmailAddress *string `json:"createdByUserEmailAddress,omitempty" azure:"ro"`

	// READ-ONLY; The date the role assignment was created.
	CreatedOn *string `json:"createdOn,omitempty" azure:"ro"`

	// READ-ONLY; The scope at which the role was assigned.
	Scope *string `json:"scope,omitempty" azure:"ro"`
}

// BillingRoleAssignmentsDeleteByBillingAccountOptions contains the optional parameters for the BillingRoleAssignments.DeleteByBillingAccount method.
type BillingRoleAssignmentsDeleteByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsDeleteByBillingProfileOptions contains the optional parameters for the BillingRoleAssignments.DeleteByBillingProfile method.
type BillingRoleAssignmentsDeleteByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsDeleteByInvoiceSectionOptions contains the optional parameters for the BillingRoleAssignments.DeleteByInvoiceSection method.
type BillingRoleAssignmentsDeleteByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsGetByBillingAccountOptions contains the optional parameters for the BillingRoleAssignments.GetByBillingAccount method.
type BillingRoleAssignmentsGetByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsGetByBillingProfileOptions contains the optional parameters for the BillingRoleAssignments.GetByBillingProfile method.
type BillingRoleAssignmentsGetByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsGetByInvoiceSectionOptions contains the optional parameters for the BillingRoleAssignments.GetByInvoiceSection method.
type BillingRoleAssignmentsGetByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsListByBillingAccountOptions contains the optional parameters for the BillingRoleAssignments.ListByBillingAccount method.
type BillingRoleAssignmentsListByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsListByBillingProfileOptions contains the optional parameters for the BillingRoleAssignments.ListByBillingProfile method.
type BillingRoleAssignmentsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleAssignmentsListByInvoiceSectionOptions contains the optional parameters for the BillingRoleAssignments.ListByInvoiceSection method.
type BillingRoleAssignmentsListByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinition - The properties of a role definition.
type BillingRoleDefinition struct {
	Resource
	// The properties of the a role definition.
	Properties *BillingRoleDefinitionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingRoleDefinition.
func (b BillingRoleDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingRoleDefinitionListResult - The list of role definitions.
type BillingRoleDefinitionListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The role definitions.
	Value []*BillingRoleDefinition `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingRoleDefinitionListResult.
func (b BillingRoleDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingRoleDefinitionProperties - The properties of the a role definition.
type BillingRoleDefinitionProperties struct {
	// The billingPermissions the role has
	Permissions []*BillingPermissionsProperties `json:"permissions,omitempty"`

	// READ-ONLY; The role description
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The name of the role
	RoleName *string `json:"roleName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingRoleDefinitionProperties.
func (b BillingRoleDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", b.Description)
	populate(objectMap, "permissions", b.Permissions)
	populate(objectMap, "roleName", b.RoleName)
	return json.Marshal(objectMap)
}

// BillingRoleDefinitionsGetByBillingAccountOptions contains the optional parameters for the BillingRoleDefinitions.GetByBillingAccount method.
type BillingRoleDefinitionsGetByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinitionsGetByBillingProfileOptions contains the optional parameters for the BillingRoleDefinitions.GetByBillingProfile method.
type BillingRoleDefinitionsGetByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinitionsGetByInvoiceSectionOptions contains the optional parameters for the BillingRoleDefinitions.GetByInvoiceSection method.
type BillingRoleDefinitionsGetByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinitionsListByBillingAccountOptions contains the optional parameters for the BillingRoleDefinitions.ListByBillingAccount method.
type BillingRoleDefinitionsListByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinitionsListByBillingProfileOptions contains the optional parameters for the BillingRoleDefinitions.ListByBillingProfile method.
type BillingRoleDefinitionsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingRoleDefinitionsListByInvoiceSectionOptions contains the optional parameters for the BillingRoleDefinitions.ListByInvoiceSection method.
type BillingRoleDefinitionsListByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscription - A billing subscription.
type BillingSubscription struct {
	Resource
	// The billing properties of a subscription.
	Properties *BillingSubscriptionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingSubscription.
func (b BillingSubscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingSubscriptionProperties - The billing properties of a subscription.
type BillingSubscriptionProperties struct {
	// The cost center applied to the subscription.
	CostCenter *string `json:"costCenter,omitempty"`

	// The sku ID of the Azure plan for the subscription.
	SKUID *string `json:"skuId,omitempty"`

	// The current billing status of the subscription.
	SubscriptionBillingStatus *BillingSubscriptionStatusType `json:"subscriptionBillingStatus,omitempty"`

	// READ-ONLY; The name of the billing profile to which the subscription is billed.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile to which the subscription is billed.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the customer for whom the subscription was created. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerDisplayName *string `json:"customerDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the customer for whom the subscription was created. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerID *string `json:"customerId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the subscription.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The name of the invoice section to which the subscription is billed.
	InvoiceSectionDisplayName *string `json:"invoiceSectionDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice section to which the subscription is billed.
	InvoiceSectionID *string `json:"invoiceSectionId,omitempty" azure:"ro"`

	// READ-ONLY; The last month charges.
	LastMonthCharges *Amount `json:"lastMonthCharges,omitempty" azure:"ro"`

	// READ-ONLY; The current month to date charges.
	MonthToDateCharges *Amount `json:"monthToDateCharges,omitempty" azure:"ro"`

	// READ-ONLY; Reseller for this subscription.
	Reseller *Reseller `json:"reseller,omitempty" azure:"ro"`

	// READ-ONLY; The sku description of the Azure plan for the subscription.
	SKUDescription *string `json:"skuDescription,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the subscription.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; The suspension reason for a subscription. Applies only to subscriptions in Microsoft Online Services Program billing accounts.
	SuspensionReasons []*string `json:"suspensionReasons,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingSubscriptionProperties.
func (b BillingSubscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingProfileDisplayName", b.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", b.BillingProfileID)
	populate(objectMap, "costCenter", b.CostCenter)
	populate(objectMap, "customerDisplayName", b.CustomerDisplayName)
	populate(objectMap, "customerId", b.CustomerID)
	populate(objectMap, "displayName", b.DisplayName)
	populate(objectMap, "invoiceSectionDisplayName", b.InvoiceSectionDisplayName)
	populate(objectMap, "invoiceSectionId", b.InvoiceSectionID)
	populate(objectMap, "lastMonthCharges", b.LastMonthCharges)
	populate(objectMap, "monthToDateCharges", b.MonthToDateCharges)
	populate(objectMap, "reseller", b.Reseller)
	populate(objectMap, "skuDescription", b.SKUDescription)
	populate(objectMap, "skuId", b.SKUID)
	populate(objectMap, "subscriptionBillingStatus", b.SubscriptionBillingStatus)
	populate(objectMap, "subscriptionId", b.SubscriptionID)
	populate(objectMap, "suspensionReasons", b.SuspensionReasons)
	return json.Marshal(objectMap)
}

// BillingSubscriptionsBeginMoveOptions contains the optional parameters for the BillingSubscriptions.BeginMove method.
type BillingSubscriptionsBeginMoveOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsGetOptions contains the optional parameters for the BillingSubscriptions.Get method.
type BillingSubscriptionsGetOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsListByBillingAccountOptions contains the optional parameters for the BillingSubscriptions.ListByBillingAccount method.
type BillingSubscriptionsListByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsListByBillingProfileOptions contains the optional parameters for the BillingSubscriptions.ListByBillingProfile method.
type BillingSubscriptionsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsListByCustomerOptions contains the optional parameters for the BillingSubscriptions.ListByCustomer method.
type BillingSubscriptionsListByCustomerOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsListByInvoiceSectionOptions contains the optional parameters for the BillingSubscriptions.ListByInvoiceSection method.
type BillingSubscriptionsListByInvoiceSectionOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsListResult - The list of billing subscriptions.
type BillingSubscriptionsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing subscriptions.
	Value []*BillingSubscription `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingSubscriptionsListResult.
func (b BillingSubscriptionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "totalCount", b.TotalCount)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingSubscriptionsUpdateOptions contains the optional parameters for the BillingSubscriptions.Update method.
type BillingSubscriptionsUpdateOptions struct {
	// placeholder for future optional parameters
}

// BillingSubscriptionsValidateMoveOptions contains the optional parameters for the BillingSubscriptions.ValidateMove method.
type BillingSubscriptionsValidateMoveOptions struct {
	// placeholder for future optional parameters
}

// Customer - A partner's customer.
type Customer struct {
	Resource
	// The customer.
	Properties *CustomerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Customer.
func (c Customer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CustomerListResult - The list of customers.
type CustomerListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of customers.
	Value []*Customer `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomerListResult.
func (c CustomerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "totalCount", c.TotalCount)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CustomerPolicy - The customer's Policy.
type CustomerPolicy struct {
	Resource
	// The properties of a customer's policy.
	Properties *CustomerPolicyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomerPolicy.
func (c CustomerPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CustomerPolicyProperties - The properties of a customer's policy.
type CustomerPolicyProperties struct {
	// The policy that controls whether the users in customer's organization can view charges at pay-as-you-go prices.
	ViewCharges *ViewCharges `json:"viewCharges,omitempty"`
}

// CustomerProperties - The properties of a customer.
type CustomerProperties struct {
	// The name of the customer.
	DisplayName *string `json:"displayName,omitempty"`

	// Azure plans enabled for the customer.
	EnabledAzurePlans []*AzurePlan `json:"enabledAzurePlans,omitempty"`

	// The list of resellers for which an Azure plan is enabled for the customer.
	Resellers []*Reseller `json:"resellers,omitempty"`

	// READ-ONLY; The name of the billing profile for the invoice section.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile for the invoice section.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomerProperties.
func (c CustomerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingProfileDisplayName", c.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", c.BillingProfileID)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "enabledAzurePlans", c.EnabledAzurePlans)
	populate(objectMap, "resellers", c.Resellers)
	return json.Marshal(objectMap)
}

// CustomersGetOptions contains the optional parameters for the Customers.Get method.
type CustomersGetOptions struct {
	// May be used to expand enabledAzurePlans and resellers
	Expand *string
}

// CustomersListByBillingAccountOptions contains the optional parameters for the Customers.ListByBillingAccount method.
type CustomersListByBillingAccountOptions struct {
	// May be used to filter the list of customers.
	Filter *string
	// Used for searching customers by their name. Any customer with name containing the search text will be included in the response
	Search *string
}

// CustomersListByBillingProfileOptions contains the optional parameters for the Customers.ListByBillingProfile method.
type CustomersListByBillingProfileOptions struct {
	// May be used to filter the list of customers.
	Filter *string
	// Used for searching customers by their name. Any customer with name containing the search text will be included in the response
	Search *string
}

// Department - A department.
type Department struct {
	Resource
	// A department.
	Properties *DepartmentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Department.
func (d Department) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DepartmentProperties - The properties of a department.
type DepartmentProperties struct {
	// The cost center associated with the department.
	CostCenter *string `json:"costCenter,omitempty"`

	// The name of the department.
	DepartmentName *string `json:"departmentName,omitempty"`

	// Associated enrollment accounts. By default this is not populated, unless it's specified in $expand.
	EnrollmentAccounts []*EnrollmentAccount `json:"enrollmentAccounts,omitempty"`

	// The status of the department.
	Status *string `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DepartmentProperties.
func (d DepartmentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "costCenter", d.CostCenter)
	populate(objectMap, "departmentName", d.DepartmentName)
	populate(objectMap, "enrollmentAccounts", d.EnrollmentAccounts)
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// Document - The properties of a document.
type Document struct {
	// READ-ONLY; The type of the document.
	Kind *DocumentType `json:"kind,omitempty" azure:"ro"`

	// READ-ONLY; The source of the document. ENF for Brazil and DRS for rest of the world.
	Source *DocumentSource `json:"source,omitempty" azure:"ro"`

	// READ-ONLY; Document URL.
	URL *string `json:"url,omitempty" azure:"ro"`
}

// DownloadURL - A secure URL that can be used to download a an entity until the URL expires.
type DownloadURL struct {
	// READ-ONLY; The time in UTC when the download URL will expire.
	ExpiryTime *time.Time `json:"expiryTime,omitempty" azure:"ro"`

	// READ-ONLY; The URL to the PDF file.
	URL *string `json:"url,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DownloadURL.
func (d DownloadURL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "expiryTime", d.ExpiryTime)
	populate(objectMap, "url", d.URL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DownloadURL.
func (d *DownloadURL) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expiryTime":
			err = unpopulateTimeRFC3339(val, &d.ExpiryTime)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, &d.URL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Enrollment - The properties of an enrollment.
type Enrollment struct {
	// The end date of the enrollment.
	EndDate *time.Time `json:"endDate,omitempty"`

	// The start date of the enrollment.
	StartDate *time.Time `json:"startDate,omitempty"`

	// READ-ONLY; The billing cycle for the enrollment.
	BillingCycle *string `json:"billingCycle,omitempty" azure:"ro"`

	// READ-ONLY; The channel type of the enrollment.
	Channel *string `json:"channel,omitempty" azure:"ro"`

	// READ-ONLY; The country code of the enrollment.
	CountryCode *string `json:"countryCode,omitempty" azure:"ro"`

	// READ-ONLY; The billing currency for the enrollment.
	Currency *string `json:"currency,omitempty" azure:"ro"`

	// READ-ONLY; The language for the enrollment.
	Language *string `json:"language,omitempty" azure:"ro"`

	// READ-ONLY; The policies for Enterprise Agreement enrollments.
	Policies *EnrollmentPolicies `json:"policies,omitempty" azure:"ro"`

	// READ-ONLY; The current status of the enrollment.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Enrollment.
func (e Enrollment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingCycle", e.BillingCycle)
	populate(objectMap, "channel", e.Channel)
	populate(objectMap, "countryCode", e.CountryCode)
	populate(objectMap, "currency", e.Currency)
	populateTimeRFC3339(objectMap, "endDate", e.EndDate)
	populate(objectMap, "language", e.Language)
	populate(objectMap, "policies", e.Policies)
	populateTimeRFC3339(objectMap, "startDate", e.StartDate)
	populate(objectMap, "status", e.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Enrollment.
func (e *Enrollment) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "billingCycle":
			err = unpopulate(val, &e.BillingCycle)
			delete(rawMsg, key)
		case "channel":
			err = unpopulate(val, &e.Channel)
			delete(rawMsg, key)
		case "countryCode":
			err = unpopulate(val, &e.CountryCode)
			delete(rawMsg, key)
		case "currency":
			err = unpopulate(val, &e.Currency)
			delete(rawMsg, key)
		case "endDate":
			err = unpopulateTimeRFC3339(val, &e.EndDate)
			delete(rawMsg, key)
		case "language":
			err = unpopulate(val, &e.Language)
			delete(rawMsg, key)
		case "policies":
			err = unpopulate(val, &e.Policies)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, &e.StartDate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EnrollmentAccount - An enrollment account.
type EnrollmentAccount struct {
	Resource
	// The properties of an enrollment account.
	Properties *EnrollmentAccountProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EnrollmentAccount.
func (e EnrollmentAccount) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", e.Properties)
	return json.Marshal(objectMap)
}

// EnrollmentAccountContext - The enrollment account context
type EnrollmentAccountContext struct {
	// The cost center associated with the enrollment account.
	CostCenter *string `json:"costCenter,omitempty"`

	// The end date of the enrollment account.
	EndDate *time.Time `json:"endDate,omitempty"`

	// The ID of the enrollment account.
	EnrollmentAccountName *string `json:"enrollmentAccountName,omitempty"`

	// The start date of the enrollment account.
	StartDate *time.Time `json:"startDate,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EnrollmentAccountContext.
func (e EnrollmentAccountContext) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "costCenter", e.CostCenter)
	populateTimeRFC3339(objectMap, "endDate", e.EndDate)
	populate(objectMap, "enrollmentAccountName", e.EnrollmentAccountName)
	populateTimeRFC3339(objectMap, "startDate", e.StartDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnrollmentAccountContext.
func (e *EnrollmentAccountContext) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "costCenter":
			err = unpopulate(val, &e.CostCenter)
			delete(rawMsg, key)
		case "endDate":
			err = unpopulateTimeRFC3339(val, &e.EndDate)
			delete(rawMsg, key)
		case "enrollmentAccountName":
			err = unpopulate(val, &e.EnrollmentAccountName)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, &e.StartDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EnrollmentAccountListResult - Result of listing enrollment accounts.
type EnrollmentAccountListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of enrollment accounts.
	Value []*EnrollmentAccountSummary `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type EnrollmentAccountListResult.
func (e EnrollmentAccountListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// EnrollmentAccountProperties - The properties of an enrollment account.
type EnrollmentAccountProperties struct {
	// The name of the enrollment account.
	AccountName *string `json:"accountName,omitempty"`

	// The owner of the enrollment account.
	AccountOwner *string `json:"accountOwner,omitempty"`

	// The enrollment account owner email address.
	AccountOwnerEmail *string `json:"accountOwnerEmail,omitempty"`

	// The cost center associated with the enrollment account.
	CostCenter *string `json:"costCenter,omitempty"`

	// Associated department. By default this is not populated, unless it's specified in $expand.
	Department *Department `json:"department,omitempty"`

	// The end date of the enrollment account.
	EndDate *time.Time `json:"endDate,omitempty"`

	// The start date of the enrollment account.
	StartDate *time.Time `json:"startDate,omitempty"`

	// The status of the enrollment account.
	Status *string `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EnrollmentAccountProperties.
func (e EnrollmentAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountName", e.AccountName)
	populate(objectMap, "accountOwner", e.AccountOwner)
	populate(objectMap, "accountOwnerEmail", e.AccountOwnerEmail)
	populate(objectMap, "costCenter", e.CostCenter)
	populate(objectMap, "department", e.Department)
	populateTimeRFC3339(objectMap, "endDate", e.EndDate)
	populateTimeRFC3339(objectMap, "startDate", e.StartDate)
	populate(objectMap, "status", e.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EnrollmentAccountProperties.
func (e *EnrollmentAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountName":
			err = unpopulate(val, &e.AccountName)
			delete(rawMsg, key)
		case "accountOwner":
			err = unpopulate(val, &e.AccountOwner)
			delete(rawMsg, key)
		case "accountOwnerEmail":
			err = unpopulate(val, &e.AccountOwnerEmail)
			delete(rawMsg, key)
		case "costCenter":
			err = unpopulate(val, &e.CostCenter)
			delete(rawMsg, key)
		case "department":
			err = unpopulate(val, &e.Department)
			delete(rawMsg, key)
		case "endDate":
			err = unpopulateTimeRFC3339(val, &e.EndDate)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, &e.StartDate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EnrollmentAccountSummary - An enrollment account resource.
type EnrollmentAccountSummary struct {
	Resource
	// An enrollment account.
	Properties *EnrollmentAccountSummaryProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EnrollmentAccountSummary.
func (e EnrollmentAccountSummary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", e.Properties)
	return json.Marshal(objectMap)
}

// EnrollmentAccountSummaryProperties - The properties of the enrollment account.
type EnrollmentAccountSummaryProperties struct {
	// READ-ONLY; The account owner's principal name.
	PrincipalName *string `json:"principalName,omitempty" azure:"ro"`
}

// EnrollmentAccountsGetOptions contains the optional parameters for the EnrollmentAccounts.Get method.
type EnrollmentAccountsGetOptions struct {
	// placeholder for future optional parameters
}

// EnrollmentAccountsListOptions contains the optional parameters for the EnrollmentAccounts.List method.
type EnrollmentAccountsListOptions struct {
	// placeholder for future optional parameters
}

// EnrollmentPolicies - The policies for Enterprise Agreement enrollments.
type EnrollmentPolicies struct {
	// READ-ONLY; The policy that controls whether Account Owners can view charges.
	AccountOwnerViewCharges *bool `json:"accountOwnerViewCharges,omitempty" azure:"ro"`

	// READ-ONLY; The policy that controls whether Department Administrators can view charges.
	DepartmentAdminViewCharges *bool `json:"departmentAdminViewCharges,omitempty" azure:"ro"`

	// READ-ONLY; The policy that controls whether Azure marketplace purchases are allowed in the enrollment.
	MarketplaceEnabled *bool `json:"marketplaceEnabled,omitempty" azure:"ro"`

	// READ-ONLY; The policy that controls whether Azure reservation purchases are allowed in the enrollment.
	ReservedInstancesEnabled *bool `json:"reservedInstancesEnabled,omitempty" azure:"ro"`
}

// ErrorDetails - The details of the error.
type ErrorDetails struct {
	// READ-ONLY; Error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The sub details of the error.
	Details []*ErrorSubDetailsItem `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The target of the particular error.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetails.
func (e ErrorDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The details of the error.
	InnerError *ErrorDetails `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

type ErrorSubDetailsItem struct {
	// READ-ONLY; Error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The target of the particular error.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// IndirectRelationshipInfo - The billing profile details of the partner of the customer for an indirect motion.
type IndirectRelationshipInfo struct {
	// The billing account name of the partner or the customer for an indirect motion.
	BillingAccountName *string `json:"billingAccountName,omitempty"`

	// The billing profile name of the partner or the customer for an indirect motion.
	BillingProfileName *string `json:"billingProfileName,omitempty"`

	// The display name of the partner or customer for an indirect motion.
	DisplayName *string `json:"displayName,omitempty"`
}

// Instruction - An instruction.
type Instruction struct {
	Resource
	// A billing instruction used during invoice generation.
	Properties *InstructionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Instruction.
func (i Instruction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// InstructionListResult - The list of billing instructions used during invoice generation.
type InstructionListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing instructions used during invoice generation.
	Value []*Instruction `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InstructionListResult.
func (i InstructionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InstructionProperties - A billing instruction used during invoice generation.
type InstructionProperties struct {
	// REQUIRED; The amount budgeted for this billing instruction.
	Amount *float32 `json:"amount,omitempty"`

	// REQUIRED; The date this billing instruction is no longer in effect.
	EndDate *time.Time `json:"endDate,omitempty"`

	// REQUIRED; The date this billing instruction goes into effect.
	StartDate *time.Time `json:"startDate,omitempty"`

	// The date this billing instruction was created.
	CreationDate *time.Time `json:"creationDate,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InstructionProperties.
func (i InstructionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "amount", i.Amount)
	populateTimeRFC3339(objectMap, "creationDate", i.CreationDate)
	populateTimeRFC3339(objectMap, "endDate", i.EndDate)
	populateTimeRFC3339(objectMap, "startDate", i.StartDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InstructionProperties.
func (i *InstructionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "amount":
			err = unpopulate(val, &i.Amount)
			delete(rawMsg, key)
		case "creationDate":
			err = unpopulateTimeRFC3339(val, &i.CreationDate)
			delete(rawMsg, key)
		case "endDate":
			err = unpopulateTimeRFC3339(val, &i.EndDate)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, &i.StartDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// InstructionsGetOptions contains the optional parameters for the Instructions.Get method.
type InstructionsGetOptions struct {
	// placeholder for future optional parameters
}

// InstructionsListByBillingProfileOptions contains the optional parameters for the Instructions.ListByBillingProfile method.
type InstructionsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// InstructionsPutOptions contains the optional parameters for the Instructions.Put method.
type InstructionsPutOptions struct {
	// placeholder for future optional parameters
}

// Invoice - An invoice.
type Invoice struct {
	Resource
	// An invoice.
	Properties *InvoiceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Invoice.
func (i Invoice) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// InvoiceListResult - The list of invoices.
type InvoiceListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of invoices.
	Value []*Invoice `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceListResult.
func (i InvoiceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "totalCount", i.TotalCount)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InvoiceProperties - The properties of the invoice.
type InvoiceProperties struct {
	// READ-ONLY; The amount due as of now.
	AmountDue *Amount `json:"amountDue,omitempty" azure:"ro"`

	// READ-ONLY; The amount of Azure prepayment applied to the charges. This field is applicable to billing accounts with agreement type Microsoft Customer
	// Agreement.
	AzurePrepaymentApplied *Amount `json:"azurePrepaymentApplied,omitempty" azure:"ro"`

	// READ-ONLY; The total charges for the invoice billing period.
	BilledAmount *Amount `json:"billedAmount,omitempty" azure:"ro"`

	// READ-ONLY; The Id of the active invoice which is originally billed after this invoice was voided. This field is applicable to the void invoices only.
	BilledDocumentID *string `json:"billedDocumentId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the billing profile for which the invoice is generated.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile for which the invoice is generated.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The total refund for returns and cancellations during the invoice billing period. This field is applicable to billing accounts with agreement
	// type Microsoft Customer Agreement.
	CreditAmount *Amount `json:"creditAmount,omitempty" azure:"ro"`

	// READ-ONLY; The Id of the invoice which got voided and this credit note was issued as a result. This field is applicable to the credit notes only.
	CreditForDocumentID *string `json:"creditForDocumentId,omitempty" azure:"ro"`

	// READ-ONLY; The type of the document.
	DocumentType *InvoiceDocumentType `json:"documentType,omitempty" azure:"ro"`

	// READ-ONLY; List of documents available to download such as invoice and tax receipt.
	Documents []*Document `json:"documents,omitempty" azure:"ro"`

	// READ-ONLY; The due date for the invoice.
	DueDate *time.Time `json:"dueDate,omitempty" azure:"ro"`

	// READ-ONLY; The amount of free Azure credits applied to the charges. This field is applicable to billing accounts with agreement type Microsoft Customer
	// Agreement.
	FreeAzureCreditApplied *Amount `json:"freeAzureCreditApplied,omitempty" azure:"ro"`

	// READ-ONLY; The date when the invoice was generated.
	InvoiceDate *time.Time `json:"invoiceDate,omitempty" azure:"ro"`

	// READ-ONLY; The end date of the billing period for which the invoice is generated.
	InvoicePeriodEndDate *time.Time `json:"invoicePeriodEndDate,omitempty" azure:"ro"`

	// READ-ONLY; The start date of the billing period for which the invoice is generated.
	InvoicePeriodStartDate *time.Time `json:"invoicePeriodStartDate,omitempty" azure:"ro"`

	// READ-ONLY; Invoice type.
	InvoiceType *InvoiceType `json:"invoiceType,omitempty" azure:"ro"`

	// READ-ONLY; Specifies if the invoice is generated as part of monthly invoicing cycle or not. This field is applicable to billing accounts with agreement
	// type Microsoft Customer Agreement.
	IsMonthlyInvoice *bool `json:"isMonthlyInvoice,omitempty" azure:"ro"`

	// READ-ONLY; List of payments.
	Payments []*PaymentProperties `json:"payments,omitempty" azure:"ro"`

	// READ-ONLY; An optional purchase order number for the invoice.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty" azure:"ro"`

	// READ-ONLY; Rebill details for an invoice.
	RebillDetails map[string]*RebillDetails `json:"rebillDetails,omitempty" azure:"ro"`

	// READ-ONLY; The current status of the invoice.
	Status *InvoiceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The pre-tax amount due. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
	SubTotal *Amount `json:"subTotal,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the subscription for which the invoice is generated.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; The amount of tax charged for the billing period. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
	TaxAmount *Amount `json:"taxAmount,omitempty" azure:"ro"`

	// READ-ONLY; The amount due when the invoice was generated. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
	TotalAmount *Amount `json:"totalAmount,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceProperties.
func (i InvoiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "amountDue", i.AmountDue)
	populate(objectMap, "azurePrepaymentApplied", i.AzurePrepaymentApplied)
	populate(objectMap, "billedAmount", i.BilledAmount)
	populate(objectMap, "billedDocumentId", i.BilledDocumentID)
	populate(objectMap, "billingProfileDisplayName", i.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", i.BillingProfileID)
	populate(objectMap, "creditAmount", i.CreditAmount)
	populate(objectMap, "creditForDocumentId", i.CreditForDocumentID)
	populate(objectMap, "documentType", i.DocumentType)
	populate(objectMap, "documents", i.Documents)
	populateTimeRFC3339(objectMap, "dueDate", i.DueDate)
	populate(objectMap, "freeAzureCreditApplied", i.FreeAzureCreditApplied)
	populateTimeRFC3339(objectMap, "invoiceDate", i.InvoiceDate)
	populateTimeRFC3339(objectMap, "invoicePeriodEndDate", i.InvoicePeriodEndDate)
	populateTimeRFC3339(objectMap, "invoicePeriodStartDate", i.InvoicePeriodStartDate)
	populate(objectMap, "invoiceType", i.InvoiceType)
	populate(objectMap, "isMonthlyInvoice", i.IsMonthlyInvoice)
	populate(objectMap, "payments", i.Payments)
	populate(objectMap, "purchaseOrderNumber", i.PurchaseOrderNumber)
	populate(objectMap, "rebillDetails", i.RebillDetails)
	populate(objectMap, "status", i.Status)
	populate(objectMap, "subTotal", i.SubTotal)
	populate(objectMap, "subscriptionId", i.SubscriptionID)
	populate(objectMap, "taxAmount", i.TaxAmount)
	populate(objectMap, "totalAmount", i.TotalAmount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InvoiceProperties.
func (i *InvoiceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "amountDue":
			err = unpopulate(val, &i.AmountDue)
			delete(rawMsg, key)
		case "azurePrepaymentApplied":
			err = unpopulate(val, &i.AzurePrepaymentApplied)
			delete(rawMsg, key)
		case "billedAmount":
			err = unpopulate(val, &i.BilledAmount)
			delete(rawMsg, key)
		case "billedDocumentId":
			err = unpopulate(val, &i.BilledDocumentID)
			delete(rawMsg, key)
		case "billingProfileDisplayName":
			err = unpopulate(val, &i.BillingProfileDisplayName)
			delete(rawMsg, key)
		case "billingProfileId":
			err = unpopulate(val, &i.BillingProfileID)
			delete(rawMsg, key)
		case "creditAmount":
			err = unpopulate(val, &i.CreditAmount)
			delete(rawMsg, key)
		case "creditForDocumentId":
			err = unpopulate(val, &i.CreditForDocumentID)
			delete(rawMsg, key)
		case "documentType":
			err = unpopulate(val, &i.DocumentType)
			delete(rawMsg, key)
		case "documents":
			err = unpopulate(val, &i.Documents)
			delete(rawMsg, key)
		case "dueDate":
			err = unpopulateTimeRFC3339(val, &i.DueDate)
			delete(rawMsg, key)
		case "freeAzureCreditApplied":
			err = unpopulate(val, &i.FreeAzureCreditApplied)
			delete(rawMsg, key)
		case "invoiceDate":
			err = unpopulateTimeRFC3339(val, &i.InvoiceDate)
			delete(rawMsg, key)
		case "invoicePeriodEndDate":
			err = unpopulateTimeRFC3339(val, &i.InvoicePeriodEndDate)
			delete(rawMsg, key)
		case "invoicePeriodStartDate":
			err = unpopulateTimeRFC3339(val, &i.InvoicePeriodStartDate)
			delete(rawMsg, key)
		case "invoiceType":
			err = unpopulate(val, &i.InvoiceType)
			delete(rawMsg, key)
		case "isMonthlyInvoice":
			err = unpopulate(val, &i.IsMonthlyInvoice)
			delete(rawMsg, key)
		case "payments":
			err = unpopulate(val, &i.Payments)
			delete(rawMsg, key)
		case "purchaseOrderNumber":
			err = unpopulate(val, &i.PurchaseOrderNumber)
			delete(rawMsg, key)
		case "rebillDetails":
			err = unpopulate(val, &i.RebillDetails)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &i.Status)
			delete(rawMsg, key)
		case "subTotal":
			err = unpopulate(val, &i.SubTotal)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &i.SubscriptionID)
			delete(rawMsg, key)
		case "taxAmount":
			err = unpopulate(val, &i.TaxAmount)
			delete(rawMsg, key)
		case "totalAmount":
			err = unpopulate(val, &i.TotalAmount)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// InvoiceSection - An invoice section.
type InvoiceSection struct {
	Resource
	// The properties of an invoice section.
	Properties *InvoiceSectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSection.
func (i InvoiceSection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// InvoiceSectionCreationRequest - The properties of the invoice section.
type InvoiceSectionCreationRequest struct {
	// The name of the invoice section.
	DisplayName *string `json:"displayName,omitempty"`
}

// InvoiceSectionListResult - The list of invoice sections.
type InvoiceSectionListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of invoice sections.
	Value []*InvoiceSection `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSectionListResult.
func (i InvoiceSectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "totalCount", i.TotalCount)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InvoiceSectionListWithCreateSubPermissionResult - The list of invoice section properties with create subscription permission.
type InvoiceSectionListWithCreateSubPermissionResult struct {
	// The list of invoice section properties with create subscription permission.
	Value []*InvoiceSectionWithCreateSubPermission `json:"value,omitempty"`

	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSectionListWithCreateSubPermissionResult.
func (i InvoiceSectionListWithCreateSubPermissionResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InvoiceSectionProperties - The properties of an invoice section.
type InvoiceSectionProperties struct {
	// The name of the invoice section.
	DisplayName *string `json:"displayName,omitempty"`

	// Dictionary of metadata associated with the invoice section.
	Labels map[string]*string `json:"labels,omitempty"`

	// Dictionary of metadata associated with the invoice section. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor
	// null. Keys can not contain < > % & \ ? /
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Identifies the state of an invoice section.
	State *InvoiceSectionState `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; The system generated unique identifier for an invoice section.
	SystemID *string `json:"systemId,omitempty" azure:"ro"`

	// READ-ONLY; Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as
	// the invoice section gets associated with accounts in various
	// clouds.
	TargetCloud *TargetCloud `json:"targetCloud,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSectionProperties.
func (i InvoiceSectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", i.DisplayName)
	populate(objectMap, "labels", i.Labels)
	populate(objectMap, "state", i.State)
	populate(objectMap, "systemId", i.SystemID)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "targetCloud", i.TargetCloud)
	return json.Marshal(objectMap)
}

// InvoiceSectionWithCreateSubPermission - Invoice section properties with create subscription permission.
type InvoiceSectionWithCreateSubPermission struct {
	// Enabled azure plans for the associated billing profile.
	EnabledAzurePlans []*AzurePlan `json:"enabledAzurePlans,omitempty"`

	// READ-ONLY; The name of the billing profile for the invoice section.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile for the invoice section.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The billing profile spending limit.
	BillingProfileSpendingLimit *SpendingLimitForBillingProfile `json:"billingProfileSpendingLimit,omitempty" azure:"ro"`

	// READ-ONLY; The status of the billing profile.
	BillingProfileStatus *BillingProfileStatus `json:"billingProfileStatus,omitempty" azure:"ro"`

	// READ-ONLY; Reason for the specified billing profile status.
	BillingProfileStatusReasonCode *StatusReasonCodeForBillingProfile `json:"billingProfileStatusReasonCode,omitempty" azure:"ro"`

	// READ-ONLY; The system generated unique identifier for a billing profile.
	BillingProfileSystemID *string `json:"billingProfileSystemId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the invoice section.
	InvoiceSectionDisplayName *string `json:"invoiceSectionDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice section.
	InvoiceSectionID *string `json:"invoiceSectionId,omitempty" azure:"ro"`

	// READ-ONLY; The system generated unique identifier for an invoice section.
	InvoiceSectionSystemID *string `json:"invoiceSectionSystemId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSectionWithCreateSubPermission.
func (i InvoiceSectionWithCreateSubPermission) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingProfileDisplayName", i.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", i.BillingProfileID)
	populate(objectMap, "billingProfileSpendingLimit", i.BillingProfileSpendingLimit)
	populate(objectMap, "billingProfileStatus", i.BillingProfileStatus)
	populate(objectMap, "billingProfileStatusReasonCode", i.BillingProfileStatusReasonCode)
	populate(objectMap, "billingProfileSystemId", i.BillingProfileSystemID)
	populate(objectMap, "enabledAzurePlans", i.EnabledAzurePlans)
	populate(objectMap, "invoiceSectionDisplayName", i.InvoiceSectionDisplayName)
	populate(objectMap, "invoiceSectionId", i.InvoiceSectionID)
	populate(objectMap, "invoiceSectionSystemId", i.InvoiceSectionSystemID)
	return json.Marshal(objectMap)
}

// InvoiceSectionsBeginCreateOrUpdateOptions contains the optional parameters for the InvoiceSections.BeginCreateOrUpdate method.
type InvoiceSectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// InvoiceSectionsGetOptions contains the optional parameters for the InvoiceSections.Get method.
type InvoiceSectionsGetOptions struct {
	// placeholder for future optional parameters
}

// InvoiceSectionsListByBillingProfileOptions contains the optional parameters for the InvoiceSections.ListByBillingProfile method.
type InvoiceSectionsListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// InvoiceSectionsOnExpand - The invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand.
type InvoiceSectionsOnExpand struct {
	// The invoice sections associated to the billing profile.
	Value []*InvoiceSection `json:"value,omitempty"`

	// READ-ONLY; Indicates whether there are more invoice sections than the ones listed in this collection. The collection lists a maximum of 50 invoice sections.
	// To get all invoice sections, use the list invoice
	// sections API.
	HasMoreResults *bool `json:"hasMoreResults,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvoiceSectionsOnExpand.
func (i InvoiceSectionsOnExpand) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hasMoreResults", i.HasMoreResults)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InvoicesBeginDownloadBillingSubscriptionInvoiceOptions contains the optional parameters for the Invoices.BeginDownloadBillingSubscriptionInvoice method.
type InvoicesBeginDownloadBillingSubscriptionInvoiceOptions struct {
	// placeholder for future optional parameters
}

// InvoicesBeginDownloadInvoiceOptions contains the optional parameters for the Invoices.BeginDownloadInvoice method.
type InvoicesBeginDownloadInvoiceOptions struct {
	// placeholder for future optional parameters
}

// InvoicesBeginDownloadMultipleBillingProfileInvoicesOptions contains the optional parameters for the Invoices.BeginDownloadMultipleBillingProfileInvoices
// method.
type InvoicesBeginDownloadMultipleBillingProfileInvoicesOptions struct {
	// placeholder for future optional parameters
}

// InvoicesBeginDownloadMultipleBillingSubscriptionInvoicesOptions contains the optional parameters for the Invoices.BeginDownloadMultipleBillingSubscriptionInvoices
// method.
type InvoicesBeginDownloadMultipleBillingSubscriptionInvoicesOptions struct {
	// placeholder for future optional parameters
}

// InvoicesGetByIDOptions contains the optional parameters for the Invoices.GetByID method.
type InvoicesGetByIDOptions struct {
	// placeholder for future optional parameters
}

// InvoicesGetBySubscriptionAndInvoiceIDOptions contains the optional parameters for the Invoices.GetBySubscriptionAndInvoiceID method.
type InvoicesGetBySubscriptionAndInvoiceIDOptions struct {
	// placeholder for future optional parameters
}

// InvoicesGetOptions contains the optional parameters for the Invoices.Get method.
type InvoicesGetOptions struct {
	// placeholder for future optional parameters
}

// InvoicesListByBillingAccountOptions contains the optional parameters for the Invoices.ListByBillingAccount method.
type InvoicesListByBillingAccountOptions struct {
	// placeholder for future optional parameters
}

// InvoicesListByBillingProfileOptions contains the optional parameters for the Invoices.ListByBillingProfile method.
type InvoicesListByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// InvoicesListByBillingSubscriptionOptions contains the optional parameters for the Invoices.ListByBillingSubscription method.
type InvoicesListByBillingSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// Operation - A Billing REST API operation.
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Identifies if the operation is a data operation.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// READ-ONLY; Description of operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Operation type such as read, write and delete.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Service provider: Microsoft.Billing.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource on which the operation is performed such as invoice and billing subscription.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - The list of billing operations and a URL link to get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of billing operations supported by the Microsoft.Billing resource provider.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Participants - The details about a participant.
type Participants struct {
	// READ-ONLY; The email address of the participant.
	Email *string `json:"email,omitempty" azure:"ro"`

	// READ-ONLY; The acceptance status of the participant.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The date when the status got changed.
	StatusDate *time.Time `json:"statusDate,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Participants.
func (p Participants) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "email", p.Email)
	populate(objectMap, "status", p.Status)
	populateTimeRFC3339(objectMap, "statusDate", p.StatusDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Participants.
func (p *Participants) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "email":
			err = unpopulate(val, &p.Email)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "statusDate":
			err = unpopulateTimeRFC3339(val, &p.StatusDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PaymentProperties - The properties of a payment.
type PaymentProperties struct {
	// The family of payment method.
	PaymentMethodFamily *PaymentMethodFamily `json:"paymentMethodFamily,omitempty"`

	// READ-ONLY; The paid amount.
	Amount *Amount `json:"amount,omitempty" azure:"ro"`

	// READ-ONLY; The date when the payment was made.
	Date *time.Time `json:"date,omitempty" azure:"ro"`

	// READ-ONLY; The type of payment method.
	PaymentMethodType *string `json:"paymentMethodType,omitempty" azure:"ro"`

	// READ-ONLY; The type of payment.
	PaymentType *string `json:"paymentType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PaymentProperties.
func (p PaymentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "amount", p.Amount)
	populateTimeRFC3339(objectMap, "date", p.Date)
	populate(objectMap, "paymentMethodFamily", p.PaymentMethodFamily)
	populate(objectMap, "paymentMethodType", p.PaymentMethodType)
	populate(objectMap, "paymentType", p.PaymentType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PaymentProperties.
func (p *PaymentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "amount":
			err = unpopulate(val, &p.Amount)
			delete(rawMsg, key)
		case "date":
			err = unpopulateTimeRFC3339(val, &p.Date)
			delete(rawMsg, key)
		case "paymentMethodFamily":
			err = unpopulate(val, &p.PaymentMethodFamily)
			delete(rawMsg, key)
		case "paymentMethodType":
			err = unpopulate(val, &p.PaymentMethodType)
			delete(rawMsg, key)
		case "paymentType":
			err = unpopulate(val, &p.PaymentType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PoliciesGetByBillingProfileOptions contains the optional parameters for the Policies.GetByBillingProfile method.
type PoliciesGetByBillingProfileOptions struct {
	// placeholder for future optional parameters
}

// PoliciesGetByCustomerOptions contains the optional parameters for the Policies.GetByCustomer method.
type PoliciesGetByCustomerOptions struct {
	// placeholder for future optional parameters
}

// PoliciesUpdateCustomerOptions contains the optional parameters for the Policies.UpdateCustomer method.
type PoliciesUpdateCustomerOptions struct {
	// placeholder for future optional parameters
}

// PoliciesUpdateOptions contains the optional parameters for the Policies.Update method.
type PoliciesUpdateOptions struct {
	// placeholder for future optional parameters
}

// Policy - A policy.
type Policy struct {
	Resource
	// The properties of a policy.
	Properties *PolicyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Policy.
func (p Policy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PolicyProperties - The properties of a policy.
type PolicyProperties struct {
	// The policy that controls whether Azure marketplace purchases are allowed for a billing profile.
	MarketplacePurchases *MarketplacePurchasesPolicy `json:"marketplacePurchases,omitempty"`

	// The policy that controls whether Azure reservation purchases are allowed for a billing profile.
	ReservationPurchases *ReservationPurchasesPolicy `json:"reservationPurchases,omitempty"`

	// The policy that controls whether users with Azure RBAC access to a subscription can view its charges.
	ViewCharges *ViewChargesPolicy `json:"viewCharges,omitempty"`
}

// Product - A product.
type Product struct {
	Resource
	// The properties of a product.
	Properties *ProductProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Product.
func (p Product) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// ProductProperties - The properties of a product.
type ProductProperties struct {
	// Indicates whether auto renewal is turned on or off for a product.
	AutoRenew *AutoRenew `json:"autoRenew,omitempty"`

	// The frequency at which the product will be billed.
	BillingFrequency *BillingFrequency `json:"billingFrequency,omitempty"`

	// The current status of the product.
	Status *ProductStatusType `json:"status,omitempty"`

	// READ-ONLY; The availability of the product.
	AvailabilityID *string `json:"availabilityId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the billing profile to which the product is billed.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile to which the product is billed.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerDisplayName *string `json:"customerDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerID *string `json:"customerId,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the product.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The date when the product will be renewed or canceled.
	EndDate *time.Time `json:"endDate,omitempty" azure:"ro"`

	// READ-ONLY; The name of the invoice section to which the product is billed.
	InvoiceSectionDisplayName *string `json:"invoiceSectionDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice section to which the product is billed.
	InvoiceSectionID *string `json:"invoiceSectionId,omitempty" azure:"ro"`

	// READ-ONLY; The last month charges.
	LastCharge *Amount `json:"lastCharge,omitempty" azure:"ro"`

	// READ-ONLY; The date of the last charge.
	LastChargeDate *time.Time `json:"lastChargeDate,omitempty" azure:"ro"`

	// READ-ONLY; The description of the type of product.
	ProductType *string `json:"productType,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the type of product.
	ProductTypeID *string `json:"productTypeId,omitempty" azure:"ro"`

	// READ-ONLY; The date when the product was purchased.
	PurchaseDate *time.Time `json:"purchaseDate,omitempty" azure:"ro"`

	// READ-ONLY; The quantity purchased for the product.
	Quantity *float32 `json:"quantity,omitempty" azure:"ro"`

	// READ-ONLY; Reseller for this product.
	Reseller *Reseller `json:"reseller,omitempty" azure:"ro"`

	// READ-ONLY; The sku description of the product.
	SKUDescription *string `json:"skuDescription,omitempty" azure:"ro"`

	// READ-ONLY; The sku ID of the product.
	SKUID *string `json:"skuId,omitempty" azure:"ro"`

	// READ-ONLY; The id of the tenant in which the product is used.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductProperties.
func (p ProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoRenew", p.AutoRenew)
	populate(objectMap, "availabilityId", p.AvailabilityID)
	populate(objectMap, "billingFrequency", p.BillingFrequency)
	populate(objectMap, "billingProfileDisplayName", p.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", p.BillingProfileID)
	populate(objectMap, "customerDisplayName", p.CustomerDisplayName)
	populate(objectMap, "customerId", p.CustomerID)
	populate(objectMap, "displayName", p.DisplayName)
	populateTimeRFC3339(objectMap, "endDate", p.EndDate)
	populate(objectMap, "invoiceSectionDisplayName", p.InvoiceSectionDisplayName)
	populate(objectMap, "invoiceSectionId", p.InvoiceSectionID)
	populate(objectMap, "lastCharge", p.LastCharge)
	populateTimeRFC3339(objectMap, "lastChargeDate", p.LastChargeDate)
	populate(objectMap, "productType", p.ProductType)
	populate(objectMap, "productTypeId", p.ProductTypeID)
	populateTimeRFC3339(objectMap, "purchaseDate", p.PurchaseDate)
	populate(objectMap, "quantity", p.Quantity)
	populate(objectMap, "reseller", p.Reseller)
	populate(objectMap, "skuDescription", p.SKUDescription)
	populate(objectMap, "skuId", p.SKUID)
	populate(objectMap, "status", p.Status)
	populate(objectMap, "tenantId", p.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProductProperties.
func (p *ProductProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoRenew":
			err = unpopulate(val, &p.AutoRenew)
			delete(rawMsg, key)
		case "availabilityId":
			err = unpopulate(val, &p.AvailabilityID)
			delete(rawMsg, key)
		case "billingFrequency":
			err = unpopulate(val, &p.BillingFrequency)
			delete(rawMsg, key)
		case "billingProfileDisplayName":
			err = unpopulate(val, &p.BillingProfileDisplayName)
			delete(rawMsg, key)
		case "billingProfileId":
			err = unpopulate(val, &p.BillingProfileID)
			delete(rawMsg, key)
		case "customerDisplayName":
			err = unpopulate(val, &p.CustomerDisplayName)
			delete(rawMsg, key)
		case "customerId":
			err = unpopulate(val, &p.CustomerID)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &p.DisplayName)
			delete(rawMsg, key)
		case "endDate":
			err = unpopulateTimeRFC3339(val, &p.EndDate)
			delete(rawMsg, key)
		case "invoiceSectionDisplayName":
			err = unpopulate(val, &p.InvoiceSectionDisplayName)
			delete(rawMsg, key)
		case "invoiceSectionId":
			err = unpopulate(val, &p.InvoiceSectionID)
			delete(rawMsg, key)
		case "lastCharge":
			err = unpopulate(val, &p.LastCharge)
			delete(rawMsg, key)
		case "lastChargeDate":
			err = unpopulateTimeRFC3339(val, &p.LastChargeDate)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &p.ProductType)
			delete(rawMsg, key)
		case "productTypeId":
			err = unpopulate(val, &p.ProductTypeID)
			delete(rawMsg, key)
		case "purchaseDate":
			err = unpopulateTimeRFC3339(val, &p.PurchaseDate)
			delete(rawMsg, key)
		case "quantity":
			err = unpopulate(val, &p.Quantity)
			delete(rawMsg, key)
		case "reseller":
			err = unpopulate(val, &p.Reseller)
			delete(rawMsg, key)
		case "skuDescription":
			err = unpopulate(val, &p.SKUDescription)
			delete(rawMsg, key)
		case "skuId":
			err = unpopulate(val, &p.SKUID)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, &p.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProductsGetOptions contains the optional parameters for the Products.Get method.
type ProductsGetOptions struct {
	// placeholder for future optional parameters
}

// ProductsListByBillingAccountOptions contains the optional parameters for the Products.ListByBillingAccount method.
type ProductsListByBillingAccountOptions struct {
	// May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
	// Tag filter is a key value pair string where key and value are separated by a colon (:).
	Filter *string
}

// ProductsListByBillingProfileOptions contains the optional parameters for the Products.ListByBillingProfile method.
type ProductsListByBillingProfileOptions struct {
	// May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
	// Tag filter is a key value pair string where key and value are separated by a colon (:).
	Filter *string
}

// ProductsListByCustomerOptions contains the optional parameters for the Products.ListByCustomer method.
type ProductsListByCustomerOptions struct {
	// placeholder for future optional parameters
}

// ProductsListByInvoiceSectionOptions contains the optional parameters for the Products.ListByInvoiceSection method.
type ProductsListByInvoiceSectionOptions struct {
	// May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'.
	// Tag filter is a key value pair string where key and value are separated by a colon (:).
	Filter *string
}

// ProductsListResult - The list of products. It contains a list of available product summaries in reverse chronological order by purchase date.
type ProductsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of products.
	Value []*Product `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProductsListResult.
func (p ProductsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "totalCount", p.TotalCount)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProductsMoveOptions contains the optional parameters for the Products.Move method.
type ProductsMoveOptions struct {
	// placeholder for future optional parameters
}

// ProductsUpdateOptions contains the optional parameters for the Products.Update method.
type ProductsUpdateOptions struct {
	// placeholder for future optional parameters
}

// ProductsValidateMoveOptions contains the optional parameters for the Products.ValidateMove method.
type ProductsValidateMoveOptions struct {
	// placeholder for future optional parameters
}

// RebillDetails - The rebill details of an invoice.
type RebillDetails struct {
	// READ-ONLY; The ID of credit note.
	CreditNoteDocumentID *string `json:"creditNoteDocumentId,omitempty" azure:"ro"`

	// READ-ONLY; The ID of invoice.
	InvoiceDocumentID *string `json:"invoiceDocumentId,omitempty" azure:"ro"`

	// READ-ONLY; Rebill details for an invoice.
	RebillDetails map[string]*RebillDetails `json:"rebillDetails,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RebillDetails.
func (r RebillDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creditNoteDocumentId", r.CreditNoteDocumentID)
	populate(objectMap, "invoiceDocumentId", r.InvoiceDocumentID)
	populate(objectMap, "rebillDetails", r.RebillDetails)
	return json.Marshal(objectMap)
}

// Reseller - Details of the reseller.
type Reseller struct {
	// READ-ONLY; The name of the reseller.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The MPN ID of the reseller.
	ResellerID *string `json:"resellerId,omitempty" azure:"ro"`
}

// Reservation - The definition of the reservation.
type Reservation struct {
	// The properties associated to this reservation
	Properties *ReservationProperty `json:"properties,omitempty"`

	// The sku information associated to this reservation
	SKU *ReservationSKUProperty `json:"sku,omitempty"`

	// READ-ONLY; The id of the reservation.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The location of the reservation.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; The name of the reservation.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the reservation.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ReservationProperty - The property of reservation object.
type ReservationProperty struct {
	// The array of applied scopes of a reservation. Will be null if the reservation is in Shared scope
	AppliedScopes []*string `json:"appliedScopes,omitempty"`

	// READ-ONLY; The applied scope type of the reservation.
	AppliedScopeType *string `json:"appliedScopeType,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the reservation
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the reservation for display, e.g. Succeeded
	DisplayProvisioningState *string `json:"displayProvisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The effective date time of the reservation
	EffectiveDateTime *string `json:"effectiveDateTime,omitempty" azure:"ro"`

	// READ-ONLY; The expiry date of the reservation
	ExpiryDate *string `json:"expiryDate,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the reservation, e.g. Succeeded
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the reservation, e.g. Succeeded
	ProvisioningSubState *string `json:"provisioningSubState,omitempty" azure:"ro"`

	// READ-ONLY; The number of the reservation.
	Quantity *float32 `json:"quantity,omitempty" azure:"ro"`

	// READ-ONLY; The renew state of the reservation
	Renew *bool `json:"renew,omitempty" azure:"ro"`

	// READ-ONLY; The renew source of the reservation
	RenewSource *string `json:"renewSource,omitempty" azure:"ro"`

	// READ-ONLY; The reserved source type of the reservation, e.g. virtual machine.
	ReservedResourceType *string `json:"reservedResourceType,omitempty" azure:"ro"`

	// READ-ONLY; The sku description of the reservation
	SKUDescription *string `json:"skuDescription,omitempty" azure:"ro"`

	// READ-ONLY; The term of the reservation, e.g. P1Y
	Term *string `json:"term,omitempty" azure:"ro"`

	// READ-ONLY; The applied scope type of the reservation for display, e.g. Shared
	UserFriendlyAppliedScopeType *string `json:"userFriendlyAppliedScopeType,omitempty" azure:"ro"`

	// READ-ONLY; The renew state of the reservation for display, e.g. On
	UserFriendlyRenewState *string `json:"userFriendlyRenewState,omitempty" azure:"ro"`

	// READ-ONLY; Reservation utilization
	Utilization *ReservationPropertyUtilization `json:"utilization,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ReservationProperty.
func (r ReservationProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appliedScopeType", r.AppliedScopeType)
	populate(objectMap, "appliedScopes", r.AppliedScopes)
	populate(objectMap, "displayName", r.DisplayName)
	populate(objectMap, "displayProvisioningState", r.DisplayProvisioningState)
	populate(objectMap, "effectiveDateTime", r.EffectiveDateTime)
	populate(objectMap, "expiryDate", r.ExpiryDate)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "provisioningSubState", r.ProvisioningSubState)
	populate(objectMap, "quantity", r.Quantity)
	populate(objectMap, "renew", r.Renew)
	populate(objectMap, "renewSource", r.RenewSource)
	populate(objectMap, "reservedResourceType", r.ReservedResourceType)
	populate(objectMap, "skuDescription", r.SKUDescription)
	populate(objectMap, "term", r.Term)
	populate(objectMap, "userFriendlyAppliedScopeType", r.UserFriendlyAppliedScopeType)
	populate(objectMap, "userFriendlyRenewState", r.UserFriendlyRenewState)
	populate(objectMap, "utilization", r.Utilization)
	return json.Marshal(objectMap)
}

// ReservationPropertyUtilization - Reservation utilization
type ReservationPropertyUtilization struct {
	// The array of aggregates of a reservation's utilization
	Aggregates []*ReservationUtilizationAggregates `json:"aggregates,omitempty"`

	// READ-ONLY; The number of days trend for a reservation
	Trend *string `json:"trend,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ReservationPropertyUtilization.
func (r ReservationPropertyUtilization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregates", r.Aggregates)
	populate(objectMap, "trend", r.Trend)
	return json.Marshal(objectMap)
}

// ReservationSKUProperty - The property of reservation sku object.
type ReservationSKUProperty struct {
	// READ-ONLY; The name of the reservation sku.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// ReservationSummary - The roll up count summary of reservations in each state
type ReservationSummary struct {
	// READ-ONLY; The number of reservation in Cancelled state
	CancelledCount *float32 `json:"cancelledCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of reservation in Expired state
	ExpiredCount *float32 `json:"expiredCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of reservation in Expiring state
	ExpiringCount *float32 `json:"expiringCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of reservation in Failed state
	FailedCount *float32 `json:"failedCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of reservation in Pending state
	PendingCount *float32 `json:"pendingCount,omitempty" azure:"ro"`

	// READ-ONLY; The number of reservation in Succeeded state
	SucceededCount *float32 `json:"succeededCount,omitempty" azure:"ro"`
}

// ReservationUtilizationAggregates - The aggregate values of reservation utilization
type ReservationUtilizationAggregates struct {
	// READ-ONLY; The grain of the aggregate
	Grain *float32 `json:"grain,omitempty" azure:"ro"`

	// READ-ONLY; The grain unit of the aggregate
	GrainUnit *string `json:"grainUnit,omitempty" azure:"ro"`

	// READ-ONLY; The aggregate value
	Value *float32 `json:"value,omitempty" azure:"ro"`

	// READ-ONLY; The aggregate value unit
	ValueUnit *string `json:"valueUnit,omitempty" azure:"ro"`
}

// ReservationsListByBillingAccountOptions contains the optional parameters for the Reservations.ListByBillingAccount method.
type ReservationsListByBillingAccountOptions struct {
	// May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
	// 'not'.
	Filter *string
	// May be used to sort order by reservation properties.
	Orderby *string
	// To indicate whether to refresh the roll up counts of the reservations group by provisioning states
	RefreshSummary *string
	// The selected provisioning state
	SelectedState *string
}

// ReservationsListByBillingProfileOptions contains the optional parameters for the Reservations.ListByBillingProfile method.
type ReservationsListByBillingProfileOptions struct {
	// May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
	// 'not'.
	Filter *string
	// May be used to sort order by reservation properties.
	Orderby *string
	// To indicate whether to refresh the roll up counts of the reservations group by provisioning state
	RefreshSummary *string
	// The selected provisioning state
	SelectedState *string
}

// ReservationsListResult - The list of reservations and summary of roll out count of reservations in each state.
type ReservationsListResult struct {
	// The roll out count summary of the reservations
	Summary *ReservationSummary `json:"summary,omitempty"`

	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of reservations.
	Value []*Reservation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ReservationsListResult.
func (r ReservationsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "summary", r.Summary)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// Resource - The Resource model definition.
type Resource struct {
	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// Transaction - A transaction.
type Transaction struct {
	Resource
	// The properties of a transaction.
	Properties *TransactionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Transaction.
func (t Transaction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TransactionListResult - The list of transactions.
type TransactionListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Total number of records.
	TotalCount *int32 `json:"totalCount,omitempty" azure:"ro"`

	// READ-ONLY; The list of transactions.
	Value []*Transaction `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TransactionListResult.
func (t TransactionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "totalCount", t.TotalCount)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TransactionProperties - The properties of a transaction.
type TransactionProperties struct {
	// The kind of transaction. Options are all or reservation.
	Kind *TransactionTypeKind `json:"kind,omitempty"`

	// The type of transaction.
	TransactionType *ReservationType `json:"transactionType,omitempty"`

	// READ-ONLY; The amount of any Azure credits automatically applied to this transaction.
	AzureCreditApplied *Amount `json:"azureCreditApplied,omitempty" azure:"ro"`

	// READ-ONLY; The type of azure plan of the subscription that was used for the transaction.
	AzurePlan *string `json:"azurePlan,omitempty" azure:"ro"`

	// READ-ONLY; The ISO 4217 code for the currency in which this transaction is billed.
	BillingCurrency *string `json:"billingCurrency,omitempty" azure:"ro"`

	// READ-ONLY; The name of the billing profile which will be billed for the transaction.
	BillingProfileDisplayName *string `json:"billingProfileDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the billing profile which will be billed for the transaction.
	BillingProfileID *string `json:"billingProfileId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerDisplayName *string `json:"customerDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
	CustomerID *string `json:"customerId,omitempty" azure:"ro"`

	// READ-ONLY; The date of transaction.
	Date *time.Time `json:"date,omitempty" azure:"ro"`

	// READ-ONLY; The percentage discount, if any, applied to this transaction.
	Discount *float32 `json:"discount,omitempty" azure:"ro"`

	// READ-ONLY; The price of the product after applying any discounts.
	EffectivePrice *Amount `json:"effectivePrice,omitempty" azure:"ro"`

	// READ-ONLY; The exchange rate used to convert charged amount to billing currency, if applicable.
	ExchangeRate *float32 `json:"exchangeRate,omitempty" azure:"ro"`

	// READ-ONLY; Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
	Invoice *string `json:"invoice,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
	InvoiceID *string `json:"invoiceId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the invoice section which will be billed for the transaction.
	InvoiceSectionDisplayName *string `json:"invoiceSectionDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the invoice section which will be billed for the transaction.
	InvoiceSectionID *string `json:"invoiceSectionId,omitempty" azure:"ro"`

	// READ-ONLY; The retail price of the product.
	MarketPrice *Amount `json:"marketPrice,omitempty" azure:"ro"`

	// READ-ONLY; The order ID of the reservation. The field is only applicable for transaction of kind reservation.
	OrderID *string `json:"orderId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the reservation order. The field is only applicable for transactions of kind reservation.
	OrderName *string `json:"orderName,omitempty" azure:"ro"`

	// READ-ONLY; The ISO 4217 code for the currency in which the product is priced.
	PricingCurrency *string `json:"pricingCurrency,omitempty" azure:"ro"`

	// READ-ONLY; The description of the product for which the transaction took place.
	ProductDescription *string `json:"productDescription,omitempty" azure:"ro"`

	// READ-ONLY; The family of the product for which the transaction took place.
	ProductFamily *string `json:"productFamily,omitempty" azure:"ro"`

	// READ-ONLY; The type of the product for which the transaction took place.
	ProductType *string `json:"productType,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the product type for which the transaction took place.
	ProductTypeID *string `json:"productTypeId,omitempty" azure:"ro"`

	// READ-ONLY; The quantity purchased in the transaction.
	Quantity *int32 `json:"quantity,omitempty" azure:"ro"`

	// READ-ONLY; The end date of the product term, or the end date of the month in which usage ended.
	ServicePeriodEndDate *time.Time `json:"servicePeriodEndDate,omitempty" azure:"ro"`

	// READ-ONLY; The date of the purchase of the product, or the start date of the month in which usage started.
	ServicePeriodStartDate *time.Time `json:"servicePeriodStartDate,omitempty" azure:"ro"`

	// READ-ONLY; The pre-tax charged amount for the transaction.
	SubTotal *Amount `json:"subTotal,omitempty" azure:"ro"`

	// READ-ONLY; The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
	SubscriptionName *string `json:"subscriptionName,omitempty" azure:"ro"`

	// READ-ONLY; The tax amount applied to the transaction.
	Tax *Amount `json:"tax,omitempty" azure:"ro"`

	// READ-ONLY; The charge associated with the transaction.
	TransactionAmount *Amount `json:"transactionAmount,omitempty" azure:"ro"`

	// READ-ONLY; The unit of measure used to bill for the product. For example, compute services are billed per hour.
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty" azure:"ro"`

	// READ-ONLY; The description for the unit of measure for a given product.
	UnitType *string `json:"unitType,omitempty" azure:"ro"`

	// READ-ONLY; The number of units used for a given product.
	Units *float32 `json:"units,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TransactionProperties.
func (t TransactionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureCreditApplied", t.AzureCreditApplied)
	populate(objectMap, "azurePlan", t.AzurePlan)
	populate(objectMap, "billingCurrency", t.BillingCurrency)
	populate(objectMap, "billingProfileDisplayName", t.BillingProfileDisplayName)
	populate(objectMap, "billingProfileId", t.BillingProfileID)
	populate(objectMap, "customerDisplayName", t.CustomerDisplayName)
	populate(objectMap, "customerId", t.CustomerID)
	populateTimeRFC3339(objectMap, "date", t.Date)
	populate(objectMap, "discount", t.Discount)
	populate(objectMap, "effectivePrice", t.EffectivePrice)
	populate(objectMap, "exchangeRate", t.ExchangeRate)
	populate(objectMap, "invoice", t.Invoice)
	populate(objectMap, "invoiceId", t.InvoiceID)
	populate(objectMap, "invoiceSectionDisplayName", t.InvoiceSectionDisplayName)
	populate(objectMap, "invoiceSectionId", t.InvoiceSectionID)
	populate(objectMap, "kind", t.Kind)
	populate(objectMap, "marketPrice", t.MarketPrice)
	populate(objectMap, "orderId", t.OrderID)
	populate(objectMap, "orderName", t.OrderName)
	populate(objectMap, "pricingCurrency", t.PricingCurrency)
	populate(objectMap, "productDescription", t.ProductDescription)
	populate(objectMap, "productFamily", t.ProductFamily)
	populate(objectMap, "productType", t.ProductType)
	populate(objectMap, "productTypeId", t.ProductTypeID)
	populate(objectMap, "quantity", t.Quantity)
	populateTimeRFC3339(objectMap, "servicePeriodEndDate", t.ServicePeriodEndDate)
	populateTimeRFC3339(objectMap, "servicePeriodStartDate", t.ServicePeriodStartDate)
	populate(objectMap, "subTotal", t.SubTotal)
	populate(objectMap, "subscriptionId", t.SubscriptionID)
	populate(objectMap, "subscriptionName", t.SubscriptionName)
	populate(objectMap, "tax", t.Tax)
	populate(objectMap, "transactionAmount", t.TransactionAmount)
	populate(objectMap, "transactionType", t.TransactionType)
	populate(objectMap, "unitOfMeasure", t.UnitOfMeasure)
	populate(objectMap, "unitType", t.UnitType)
	populate(objectMap, "units", t.Units)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TransactionProperties.
func (t *TransactionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureCreditApplied":
			err = unpopulate(val, &t.AzureCreditApplied)
			delete(rawMsg, key)
		case "azurePlan":
			err = unpopulate(val, &t.AzurePlan)
			delete(rawMsg, key)
		case "billingCurrency":
			err = unpopulate(val, &t.BillingCurrency)
			delete(rawMsg, key)
		case "billingProfileDisplayName":
			err = unpopulate(val, &t.BillingProfileDisplayName)
			delete(rawMsg, key)
		case "billingProfileId":
			err = unpopulate(val, &t.BillingProfileID)
			delete(rawMsg, key)
		case "customerDisplayName":
			err = unpopulate(val, &t.CustomerDisplayName)
			delete(rawMsg, key)
		case "customerId":
			err = unpopulate(val, &t.CustomerID)
			delete(rawMsg, key)
		case "date":
			err = unpopulateTimeRFC3339(val, &t.Date)
			delete(rawMsg, key)
		case "discount":
			err = unpopulate(val, &t.Discount)
			delete(rawMsg, key)
		case "effectivePrice":
			err = unpopulate(val, &t.EffectivePrice)
			delete(rawMsg, key)
		case "exchangeRate":
			err = unpopulate(val, &t.ExchangeRate)
			delete(rawMsg, key)
		case "invoice":
			err = unpopulate(val, &t.Invoice)
			delete(rawMsg, key)
		case "invoiceId":
			err = unpopulate(val, &t.InvoiceID)
			delete(rawMsg, key)
		case "invoiceSectionDisplayName":
			err = unpopulate(val, &t.InvoiceSectionDisplayName)
			delete(rawMsg, key)
		case "invoiceSectionId":
			err = unpopulate(val, &t.InvoiceSectionID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &t.Kind)
			delete(rawMsg, key)
		case "marketPrice":
			err = unpopulate(val, &t.MarketPrice)
			delete(rawMsg, key)
		case "orderId":
			err = unpopulate(val, &t.OrderID)
			delete(rawMsg, key)
		case "orderName":
			err = unpopulate(val, &t.OrderName)
			delete(rawMsg, key)
		case "pricingCurrency":
			err = unpopulate(val, &t.PricingCurrency)
			delete(rawMsg, key)
		case "productDescription":
			err = unpopulate(val, &t.ProductDescription)
			delete(rawMsg, key)
		case "productFamily":
			err = unpopulate(val, &t.ProductFamily)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &t.ProductType)
			delete(rawMsg, key)
		case "productTypeId":
			err = unpopulate(val, &t.ProductTypeID)
			delete(rawMsg, key)
		case "quantity":
			err = unpopulate(val, &t.Quantity)
			delete(rawMsg, key)
		case "servicePeriodEndDate":
			err = unpopulateTimeRFC3339(val, &t.ServicePeriodEndDate)
			delete(rawMsg, key)
		case "servicePeriodStartDate":
			err = unpopulateTimeRFC3339(val, &t.ServicePeriodStartDate)
			delete(rawMsg, key)
		case "subTotal":
			err = unpopulate(val, &t.SubTotal)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &t.SubscriptionID)
			delete(rawMsg, key)
		case "subscriptionName":
			err = unpopulate(val, &t.SubscriptionName)
			delete(rawMsg, key)
		case "tax":
			err = unpopulate(val, &t.Tax)
			delete(rawMsg, key)
		case "transactionAmount":
			err = unpopulate(val, &t.TransactionAmount)
			delete(rawMsg, key)
		case "transactionType":
			err = unpopulate(val, &t.TransactionType)
			delete(rawMsg, key)
		case "unitOfMeasure":
			err = unpopulate(val, &t.UnitOfMeasure)
			delete(rawMsg, key)
		case "unitType":
			err = unpopulate(val, &t.UnitType)
			delete(rawMsg, key)
		case "units":
			err = unpopulate(val, &t.Units)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TransactionsListByInvoiceOptions contains the optional parameters for the Transactions.ListByInvoice method.
type TransactionsListByInvoiceOptions struct {
	// placeholder for future optional parameters
}

// TransferBillingSubscriptionRequestProperties - Request parameters to transfer billing subscription.
type TransferBillingSubscriptionRequestProperties struct {
	// REQUIRED; The destination invoice section id.
	DestinationInvoiceSectionID *string `json:"destinationInvoiceSectionId,omitempty"`
}

// TransferProductRequestProperties - The properties of the product to initiate a transfer.
type TransferProductRequestProperties struct {
	// The destination invoice section id.
	DestinationInvoiceSectionID *string `json:"destinationInvoiceSectionId,omitempty"`
}

// ValidateAddressResponse - Result of the address validation
type ValidateAddressResponse struct {
	// status of the address validation.
	Status *AddressValidationStatus `json:"status,omitempty"`

	// The list of suggested addresses.
	SuggestedAddresses []*AddressDetails `json:"suggestedAddresses,omitempty"`

	// Validation error message.
	ValidationMessage *string `json:"validationMessage,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ValidateAddressResponse.
func (v ValidateAddressResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "status", v.Status)
	populate(objectMap, "suggestedAddresses", v.SuggestedAddresses)
	populate(objectMap, "validationMessage", v.ValidationMessage)
	return json.Marshal(objectMap)
}

// ValidateProductTransferEligibilityError - Error details of the product transfer eligibility validation.
type ValidateProductTransferEligibilityError struct {
	// Error code for the product transfer validation.
	Code *ProductTransferValidationErrorCode `json:"code,omitempty"`

	// Detailed error message explaining the error.
	Details *string `json:"details,omitempty"`

	// The error message.
	Message *string `json:"message,omitempty"`
}

// ValidateProductTransferEligibilityResult - Result of the product transfer eligibility validation.
type ValidateProductTransferEligibilityResult struct {
	// Validation error details.
	ErrorDetails *ValidateProductTransferEligibilityError `json:"errorDetails,omitempty"`

	// READ-ONLY; Specifies whether the transfer is eligible or not.
	IsMoveEligible *bool `json:"isMoveEligible,omitempty" azure:"ro"`
}

// ValidateSubscriptionTransferEligibilityError - Error details of the transfer eligibility validation
type ValidateSubscriptionTransferEligibilityError struct {
	// Error code for the product transfer validation.
	Code *SubscriptionTransferValidationErrorCode `json:"code,omitempty"`

	// Detailed error message explaining the error.
	Details *string `json:"details,omitempty"`

	// The error message.
	Message *string `json:"message,omitempty"`
}

// ValidateSubscriptionTransferEligibilityResult - Result of the transfer eligibility validation.
type ValidateSubscriptionTransferEligibilityResult struct {
	// Validation error details.
	ErrorDetails *ValidateSubscriptionTransferEligibilityError `json:"errorDetails,omitempty"`

	// READ-ONLY; Specifies whether the subscription is eligible to be transferred.
	IsMoveEligible *bool `json:"isMoveEligible,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
