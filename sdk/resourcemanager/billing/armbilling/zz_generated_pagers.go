//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AgreementsListByBillingAccountPager provides operations for iterating over paged responses.
type AgreementsListByBillingAccountPager struct {
	client    *AgreementsClient
	current   AgreementsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AgreementsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AgreementsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AgreementsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AgreementListResult.NextLink == nil || len(*p.current.AgreementListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AgreementsListByBillingAccountResponse page.
func (p *AgreementsListByBillingAccountPager) PageResponse() AgreementsListByBillingAccountResponse {
	return p.current
}

// BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager provides operations for iterating over paged responses.
type BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager struct {
	client    *BillingAccountsClient
	current   BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InvoiceSectionListWithCreateSubPermissionResult.NextLink == nil || len(*p.current.InvoiceSectionListWithCreateSubPermissionResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInvoiceSectionsByCreateSubscriptionPermissionHandleError(resp)
		return false
	}
	result, err := p.client.listInvoiceSectionsByCreateSubscriptionPermissionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse page.
func (p *BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionPager) PageResponse() BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse {
	return p.current
}

// BillingAccountsListPager provides operations for iterating over paged responses.
type BillingAccountsListPager struct {
	client    *BillingAccountsClient
	current   BillingAccountsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingAccountsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingAccountsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingAccountsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingAccountListResult.NextLink == nil || len(*p.current.BillingAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingAccountsListResponse page.
func (p *BillingAccountsListPager) PageResponse() BillingAccountsListResponse {
	return p.current
}

// BillingPeriodsListPager provides operations for iterating over paged responses.
type BillingPeriodsListPager struct {
	client    *BillingPeriodsClient
	current   BillingPeriodsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingPeriodsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingPeriodsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingPeriodsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingPeriodsListResult.NextLink == nil || len(*p.current.BillingPeriodsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingPeriodsListResponse page.
func (p *BillingPeriodsListPager) PageResponse() BillingPeriodsListResponse {
	return p.current
}

// BillingPermissionsListByBillingAccountPager provides operations for iterating over paged responses.
type BillingPermissionsListByBillingAccountPager struct {
	client    *BillingPermissionsClient
	current   BillingPermissionsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingPermissionsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingPermissionsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingPermissionsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingPermissionsListResult.NextLink == nil || len(*p.current.BillingPermissionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingPermissionsListByBillingAccountResponse page.
func (p *BillingPermissionsListByBillingAccountPager) PageResponse() BillingPermissionsListByBillingAccountResponse {
	return p.current
}

// BillingPermissionsListByBillingProfilePager provides operations for iterating over paged responses.
type BillingPermissionsListByBillingProfilePager struct {
	client    *BillingPermissionsClient
	current   BillingPermissionsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingPermissionsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingPermissionsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingPermissionsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingPermissionsListResult.NextLink == nil || len(*p.current.BillingPermissionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingPermissionsListByBillingProfileResponse page.
func (p *BillingPermissionsListByBillingProfilePager) PageResponse() BillingPermissionsListByBillingProfileResponse {
	return p.current
}

// BillingPermissionsListByCustomerPager provides operations for iterating over paged responses.
type BillingPermissionsListByCustomerPager struct {
	client    *BillingPermissionsClient
	current   BillingPermissionsListByCustomerResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingPermissionsListByCustomerResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingPermissionsListByCustomerPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingPermissionsListByCustomerPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingPermissionsListResult.NextLink == nil || len(*p.current.BillingPermissionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByCustomerHandleError(resp)
		return false
	}
	result, err := p.client.listByCustomerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingPermissionsListByCustomerResponse page.
func (p *BillingPermissionsListByCustomerPager) PageResponse() BillingPermissionsListByCustomerResponse {
	return p.current
}

// BillingPermissionsListByInvoiceSectionsPager provides operations for iterating over paged responses.
type BillingPermissionsListByInvoiceSectionsPager struct {
	client    *BillingPermissionsClient
	current   BillingPermissionsListByInvoiceSectionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingPermissionsListByInvoiceSectionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingPermissionsListByInvoiceSectionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingPermissionsListByInvoiceSectionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingPermissionsListResult.NextLink == nil || len(*p.current.BillingPermissionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceSectionsHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceSectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingPermissionsListByInvoiceSectionsResponse page.
func (p *BillingPermissionsListByInvoiceSectionsPager) PageResponse() BillingPermissionsListByInvoiceSectionsResponse {
	return p.current
}

// BillingProfilesListByBillingAccountPager provides operations for iterating over paged responses.
type BillingProfilesListByBillingAccountPager struct {
	client    *BillingProfilesClient
	current   BillingProfilesListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingProfilesListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingProfilesListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingProfilesListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingProfileListResult.NextLink == nil || len(*p.current.BillingProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingProfilesListByBillingAccountResponse page.
func (p *BillingProfilesListByBillingAccountPager) PageResponse() BillingProfilesListByBillingAccountResponse {
	return p.current
}

// BillingRoleAssignmentsListByBillingAccountPager provides operations for iterating over paged responses.
type BillingRoleAssignmentsListByBillingAccountPager struct {
	client    *BillingRoleAssignmentsClient
	current   BillingRoleAssignmentsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleAssignmentsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleAssignmentsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleAssignmentsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleAssignmentListResult.NextLink == nil || len(*p.current.BillingRoleAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleAssignmentsListByBillingAccountResponse page.
func (p *BillingRoleAssignmentsListByBillingAccountPager) PageResponse() BillingRoleAssignmentsListByBillingAccountResponse {
	return p.current
}

// BillingRoleAssignmentsListByBillingProfilePager provides operations for iterating over paged responses.
type BillingRoleAssignmentsListByBillingProfilePager struct {
	client    *BillingRoleAssignmentsClient
	current   BillingRoleAssignmentsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleAssignmentsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleAssignmentsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleAssignmentsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleAssignmentListResult.NextLink == nil || len(*p.current.BillingRoleAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleAssignmentsListByBillingProfileResponse page.
func (p *BillingRoleAssignmentsListByBillingProfilePager) PageResponse() BillingRoleAssignmentsListByBillingProfileResponse {
	return p.current
}

// BillingRoleAssignmentsListByInvoiceSectionPager provides operations for iterating over paged responses.
type BillingRoleAssignmentsListByInvoiceSectionPager struct {
	client    *BillingRoleAssignmentsClient
	current   BillingRoleAssignmentsListByInvoiceSectionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleAssignmentsListByInvoiceSectionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleAssignmentsListByInvoiceSectionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleAssignmentsListByInvoiceSectionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleAssignmentListResult.NextLink == nil || len(*p.current.BillingRoleAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceSectionHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceSectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleAssignmentsListByInvoiceSectionResponse page.
func (p *BillingRoleAssignmentsListByInvoiceSectionPager) PageResponse() BillingRoleAssignmentsListByInvoiceSectionResponse {
	return p.current
}

// BillingRoleDefinitionsListByBillingAccountPager provides operations for iterating over paged responses.
type BillingRoleDefinitionsListByBillingAccountPager struct {
	client    *BillingRoleDefinitionsClient
	current   BillingRoleDefinitionsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleDefinitionsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleDefinitionsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleDefinitionsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleDefinitionListResult.NextLink == nil || len(*p.current.BillingRoleDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleDefinitionsListByBillingAccountResponse page.
func (p *BillingRoleDefinitionsListByBillingAccountPager) PageResponse() BillingRoleDefinitionsListByBillingAccountResponse {
	return p.current
}

// BillingRoleDefinitionsListByBillingProfilePager provides operations for iterating over paged responses.
type BillingRoleDefinitionsListByBillingProfilePager struct {
	client    *BillingRoleDefinitionsClient
	current   BillingRoleDefinitionsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleDefinitionsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleDefinitionsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleDefinitionsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleDefinitionListResult.NextLink == nil || len(*p.current.BillingRoleDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleDefinitionsListByBillingProfileResponse page.
func (p *BillingRoleDefinitionsListByBillingProfilePager) PageResponse() BillingRoleDefinitionsListByBillingProfileResponse {
	return p.current
}

// BillingRoleDefinitionsListByInvoiceSectionPager provides operations for iterating over paged responses.
type BillingRoleDefinitionsListByInvoiceSectionPager struct {
	client    *BillingRoleDefinitionsClient
	current   BillingRoleDefinitionsListByInvoiceSectionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingRoleDefinitionsListByInvoiceSectionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingRoleDefinitionsListByInvoiceSectionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingRoleDefinitionsListByInvoiceSectionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingRoleDefinitionListResult.NextLink == nil || len(*p.current.BillingRoleDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceSectionHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceSectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingRoleDefinitionsListByInvoiceSectionResponse page.
func (p *BillingRoleDefinitionsListByInvoiceSectionPager) PageResponse() BillingRoleDefinitionsListByInvoiceSectionResponse {
	return p.current
}

// BillingSubscriptionsListByBillingAccountPager provides operations for iterating over paged responses.
type BillingSubscriptionsListByBillingAccountPager struct {
	client    *BillingSubscriptionsClient
	current   BillingSubscriptionsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingSubscriptionsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingSubscriptionsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingSubscriptionsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingSubscriptionsListResult.NextLink == nil || len(*p.current.BillingSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingSubscriptionsListByBillingAccountResponse page.
func (p *BillingSubscriptionsListByBillingAccountPager) PageResponse() BillingSubscriptionsListByBillingAccountResponse {
	return p.current
}

// BillingSubscriptionsListByBillingProfilePager provides operations for iterating over paged responses.
type BillingSubscriptionsListByBillingProfilePager struct {
	client    *BillingSubscriptionsClient
	current   BillingSubscriptionsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingSubscriptionsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingSubscriptionsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingSubscriptionsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingSubscriptionsListResult.NextLink == nil || len(*p.current.BillingSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingSubscriptionsListByBillingProfileResponse page.
func (p *BillingSubscriptionsListByBillingProfilePager) PageResponse() BillingSubscriptionsListByBillingProfileResponse {
	return p.current
}

// BillingSubscriptionsListByCustomerPager provides operations for iterating over paged responses.
type BillingSubscriptionsListByCustomerPager struct {
	client    *BillingSubscriptionsClient
	current   BillingSubscriptionsListByCustomerResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingSubscriptionsListByCustomerResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingSubscriptionsListByCustomerPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingSubscriptionsListByCustomerPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingSubscriptionsListResult.NextLink == nil || len(*p.current.BillingSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByCustomerHandleError(resp)
		return false
	}
	result, err := p.client.listByCustomerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingSubscriptionsListByCustomerResponse page.
func (p *BillingSubscriptionsListByCustomerPager) PageResponse() BillingSubscriptionsListByCustomerResponse {
	return p.current
}

// BillingSubscriptionsListByInvoiceSectionPager provides operations for iterating over paged responses.
type BillingSubscriptionsListByInvoiceSectionPager struct {
	client    *BillingSubscriptionsClient
	current   BillingSubscriptionsListByInvoiceSectionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BillingSubscriptionsListByInvoiceSectionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BillingSubscriptionsListByInvoiceSectionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BillingSubscriptionsListByInvoiceSectionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingSubscriptionsListResult.NextLink == nil || len(*p.current.BillingSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceSectionHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceSectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BillingSubscriptionsListByInvoiceSectionResponse page.
func (p *BillingSubscriptionsListByInvoiceSectionPager) PageResponse() BillingSubscriptionsListByInvoiceSectionResponse {
	return p.current
}

// CustomersListByBillingAccountPager provides operations for iterating over paged responses.
type CustomersListByBillingAccountPager struct {
	client    *CustomersClient
	current   CustomersListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomersListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomersListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomersListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomerListResult.NextLink == nil || len(*p.current.CustomerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomersListByBillingAccountResponse page.
func (p *CustomersListByBillingAccountPager) PageResponse() CustomersListByBillingAccountResponse {
	return p.current
}

// CustomersListByBillingProfilePager provides operations for iterating over paged responses.
type CustomersListByBillingProfilePager struct {
	client    *CustomersClient
	current   CustomersListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomersListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomersListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomersListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomerListResult.NextLink == nil || len(*p.current.CustomerListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomersListByBillingProfileResponse page.
func (p *CustomersListByBillingProfilePager) PageResponse() CustomersListByBillingProfileResponse {
	return p.current
}

// EnrollmentAccountsListPager provides operations for iterating over paged responses.
type EnrollmentAccountsListPager struct {
	client    *EnrollmentAccountsClient
	current   EnrollmentAccountsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EnrollmentAccountsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EnrollmentAccountsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EnrollmentAccountsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EnrollmentAccountListResult.NextLink == nil || len(*p.current.EnrollmentAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EnrollmentAccountsListResponse page.
func (p *EnrollmentAccountsListPager) PageResponse() EnrollmentAccountsListResponse {
	return p.current
}

// InstructionsListByBillingProfilePager provides operations for iterating over paged responses.
type InstructionsListByBillingProfilePager struct {
	client    *InstructionsClient
	current   InstructionsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InstructionsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InstructionsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InstructionsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InstructionListResult.NextLink == nil || len(*p.current.InstructionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InstructionsListByBillingProfileResponse page.
func (p *InstructionsListByBillingProfilePager) PageResponse() InstructionsListByBillingProfileResponse {
	return p.current
}

// InvoiceSectionsListByBillingProfilePager provides operations for iterating over paged responses.
type InvoiceSectionsListByBillingProfilePager struct {
	client    *InvoiceSectionsClient
	current   InvoiceSectionsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InvoiceSectionsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InvoiceSectionsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InvoiceSectionsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InvoiceSectionListResult.NextLink == nil || len(*p.current.InvoiceSectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InvoiceSectionsListByBillingProfileResponse page.
func (p *InvoiceSectionsListByBillingProfilePager) PageResponse() InvoiceSectionsListByBillingProfileResponse {
	return p.current
}

// InvoicesListByBillingAccountPager provides operations for iterating over paged responses.
type InvoicesListByBillingAccountPager struct {
	client    *InvoicesClient
	current   InvoicesListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InvoicesListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InvoicesListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InvoicesListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InvoiceListResult.NextLink == nil || len(*p.current.InvoiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InvoicesListByBillingAccountResponse page.
func (p *InvoicesListByBillingAccountPager) PageResponse() InvoicesListByBillingAccountResponse {
	return p.current
}

// InvoicesListByBillingProfilePager provides operations for iterating over paged responses.
type InvoicesListByBillingProfilePager struct {
	client    *InvoicesClient
	current   InvoicesListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InvoicesListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InvoicesListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InvoicesListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InvoiceListResult.NextLink == nil || len(*p.current.InvoiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InvoicesListByBillingProfileResponse page.
func (p *InvoicesListByBillingProfilePager) PageResponse() InvoicesListByBillingProfileResponse {
	return p.current
}

// InvoicesListByBillingSubscriptionPager provides operations for iterating over paged responses.
type InvoicesListByBillingSubscriptionPager struct {
	client    *InvoicesClient
	current   InvoicesListByBillingSubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, InvoicesListByBillingSubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *InvoicesListByBillingSubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *InvoicesListByBillingSubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InvoiceListResult.NextLink == nil || len(*p.current.InvoiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingSubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingSubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current InvoicesListByBillingSubscriptionResponse page.
func (p *InvoicesListByBillingSubscriptionPager) PageResponse() InvoicesListByBillingSubscriptionResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// ProductsListByBillingAccountPager provides operations for iterating over paged responses.
type ProductsListByBillingAccountPager struct {
	client    *ProductsClient
	current   ProductsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProductsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProductsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProductsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductsListResult.NextLink == nil || len(*p.current.ProductsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProductsListByBillingAccountResponse page.
func (p *ProductsListByBillingAccountPager) PageResponse() ProductsListByBillingAccountResponse {
	return p.current
}

// ProductsListByBillingProfilePager provides operations for iterating over paged responses.
type ProductsListByBillingProfilePager struct {
	client    *ProductsClient
	current   ProductsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProductsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProductsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProductsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductsListResult.NextLink == nil || len(*p.current.ProductsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProductsListByBillingProfileResponse page.
func (p *ProductsListByBillingProfilePager) PageResponse() ProductsListByBillingProfileResponse {
	return p.current
}

// ProductsListByCustomerPager provides operations for iterating over paged responses.
type ProductsListByCustomerPager struct {
	client    *ProductsClient
	current   ProductsListByCustomerResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProductsListByCustomerResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProductsListByCustomerPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProductsListByCustomerPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductsListResult.NextLink == nil || len(*p.current.ProductsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByCustomerHandleError(resp)
		return false
	}
	result, err := p.client.listByCustomerHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProductsListByCustomerResponse page.
func (p *ProductsListByCustomerPager) PageResponse() ProductsListByCustomerResponse {
	return p.current
}

// ProductsListByInvoiceSectionPager provides operations for iterating over paged responses.
type ProductsListByInvoiceSectionPager struct {
	client    *ProductsClient
	current   ProductsListByInvoiceSectionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProductsListByInvoiceSectionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProductsListByInvoiceSectionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProductsListByInvoiceSectionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductsListResult.NextLink == nil || len(*p.current.ProductsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceSectionHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceSectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProductsListByInvoiceSectionResponse page.
func (p *ProductsListByInvoiceSectionPager) PageResponse() ProductsListByInvoiceSectionResponse {
	return p.current
}

// ReservationsListByBillingAccountPager provides operations for iterating over paged responses.
type ReservationsListByBillingAccountPager struct {
	client    *ReservationsClient
	current   ReservationsListByBillingAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationsListByBillingAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationsListByBillingAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationsListByBillingAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationsListResult.NextLink == nil || len(*p.current.ReservationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationsListByBillingAccountResponse page.
func (p *ReservationsListByBillingAccountPager) PageResponse() ReservationsListByBillingAccountResponse {
	return p.current
}

// ReservationsListByBillingProfilePager provides operations for iterating over paged responses.
type ReservationsListByBillingProfilePager struct {
	client    *ReservationsClient
	current   ReservationsListByBillingProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationsListByBillingProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationsListByBillingProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationsListByBillingProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationsListResult.NextLink == nil || len(*p.current.ReservationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByBillingProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByBillingProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationsListByBillingProfileResponse page.
func (p *ReservationsListByBillingProfilePager) PageResponse() ReservationsListByBillingProfileResponse {
	return p.current
}

// TransactionsListByInvoicePager provides operations for iterating over paged responses.
type TransactionsListByInvoicePager struct {
	client    *TransactionsClient
	current   TransactionsListByInvoiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TransactionsListByInvoiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TransactionsListByInvoicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TransactionsListByInvoicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TransactionListResult.NextLink == nil || len(*p.current.TransactionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByInvoiceHandleError(resp)
		return false
	}
	result, err := p.client.listByInvoiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TransactionsListByInvoiceResponse page.
func (p *TransactionsListByInvoicePager) PageResponse() TransactionsListByInvoiceResponse {
	return p.current
}
