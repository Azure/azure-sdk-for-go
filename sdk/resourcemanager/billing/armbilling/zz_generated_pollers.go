//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// AccountsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type AccountsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AccountsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AccountsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AccountsClientUpdateResponse will be returned.
func (p *AccountsClientUpdatePoller) FinalResponse(ctx context.Context) (AccountsClientUpdateResponse, error) {
	respType := AccountsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Account)
	if err != nil {
		return AccountsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AccountsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoiceSectionsClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type InvoiceSectionsClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoiceSectionsClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoiceSectionsClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoiceSectionsClientCreateOrUpdateResponse will be returned.
func (p *InvoiceSectionsClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (InvoiceSectionsClientCreateOrUpdateResponse, error) {
	respType := InvoiceSectionsClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.InvoiceSection)
	if err != nil {
		return InvoiceSectionsClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoiceSectionsClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesClientDownloadBillingSubscriptionInvoicePoller provides polling facilities until the operation reaches a terminal state.
type InvoicesClientDownloadBillingSubscriptionInvoicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesClientDownloadBillingSubscriptionInvoicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesClientDownloadBillingSubscriptionInvoicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesClientDownloadBillingSubscriptionInvoiceResponse will be returned.
func (p *InvoicesClientDownloadBillingSubscriptionInvoicePoller) FinalResponse(ctx context.Context) (InvoicesClientDownloadBillingSubscriptionInvoiceResponse, error) {
	respType := InvoicesClientDownloadBillingSubscriptionInvoiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesClientDownloadBillingSubscriptionInvoiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesClientDownloadBillingSubscriptionInvoicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesClientDownloadInvoicePoller provides polling facilities until the operation reaches a terminal state.
type InvoicesClientDownloadInvoicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesClientDownloadInvoicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesClientDownloadInvoicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesClientDownloadInvoiceResponse will be returned.
func (p *InvoicesClientDownloadInvoicePoller) FinalResponse(ctx context.Context) (InvoicesClientDownloadInvoiceResponse, error) {
	respType := InvoicesClientDownloadInvoiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesClientDownloadInvoiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesClientDownloadInvoicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesClientDownloadMultipleBillingProfileInvoicesPoller provides polling facilities until the operation reaches a terminal state.
type InvoicesClientDownloadMultipleBillingProfileInvoicesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesClientDownloadMultipleBillingProfileInvoicesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesClientDownloadMultipleBillingProfileInvoicesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesClientDownloadMultipleBillingProfileInvoicesResponse will be returned.
func (p *InvoicesClientDownloadMultipleBillingProfileInvoicesPoller) FinalResponse(ctx context.Context) (InvoicesClientDownloadMultipleBillingProfileInvoicesResponse, error) {
	respType := InvoicesClientDownloadMultipleBillingProfileInvoicesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesClientDownloadMultipleBillingProfileInvoicesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesClientDownloadMultipleBillingProfileInvoicesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller provides polling facilities until the operation reaches a terminal state.
type InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesClientDownloadMultipleBillingSubscriptionInvoicesResponse will be returned.
func (p *InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller) FinalResponse(ctx context.Context) (InvoicesClientDownloadMultipleBillingSubscriptionInvoicesResponse, error) {
	respType := InvoicesClientDownloadMultipleBillingSubscriptionInvoicesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesClientDownloadMultipleBillingSubscriptionInvoicesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesClientDownloadMultipleBillingSubscriptionInvoicesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ProfilesClientCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ProfilesClientCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ProfilesClientCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ProfilesClientCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ProfilesClientCreateOrUpdateResponse will be returned.
func (p *ProfilesClientCreateOrUpdatePoller) FinalResponse(ctx context.Context) (ProfilesClientCreateOrUpdateResponse, error) {
	respType := ProfilesClientCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Profile)
	if err != nil {
		return ProfilesClientCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ProfilesClientCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SubscriptionsClientMovePoller provides polling facilities until the operation reaches a terminal state.
type SubscriptionsClientMovePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SubscriptionsClientMovePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SubscriptionsClientMovePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SubscriptionsClientMoveResponse will be returned.
func (p *SubscriptionsClientMovePoller) FinalResponse(ctx context.Context) (SubscriptionsClientMoveResponse, error) {
	respType := SubscriptionsClientMoveResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Subscription)
	if err != nil {
		return SubscriptionsClientMoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SubscriptionsClientMovePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
