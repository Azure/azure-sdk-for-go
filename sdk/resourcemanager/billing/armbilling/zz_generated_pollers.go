//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbilling

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// BillingAccountsUpdatePoller provides polling facilities until the operation reaches a terminal state.
type BillingAccountsUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BillingAccountsUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BillingAccountsUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BillingAccountsUpdateResponse will be returned.
func (p *BillingAccountsUpdatePoller) FinalResponse(ctx context.Context) (BillingAccountsUpdateResponse, error) {
	respType := BillingAccountsUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BillingAccount)
	if err != nil {
		return BillingAccountsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BillingAccountsUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BillingProfilesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type BillingProfilesCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BillingProfilesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BillingProfilesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BillingProfilesCreateOrUpdateResponse will be returned.
func (p *BillingProfilesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (BillingProfilesCreateOrUpdateResponse, error) {
	respType := BillingProfilesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BillingProfile)
	if err != nil {
		return BillingProfilesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BillingProfilesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BillingSubscriptionsMovePoller provides polling facilities until the operation reaches a terminal state.
type BillingSubscriptionsMovePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BillingSubscriptionsMovePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BillingSubscriptionsMovePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BillingSubscriptionsMoveResponse will be returned.
func (p *BillingSubscriptionsMovePoller) FinalResponse(ctx context.Context) (BillingSubscriptionsMoveResponse, error) {
	respType := BillingSubscriptionsMoveResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BillingSubscription)
	if err != nil {
		return BillingSubscriptionsMoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BillingSubscriptionsMovePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoiceSectionsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type InvoiceSectionsCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoiceSectionsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoiceSectionsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoiceSectionsCreateOrUpdateResponse will be returned.
func (p *InvoiceSectionsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (InvoiceSectionsCreateOrUpdateResponse, error) {
	respType := InvoiceSectionsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.InvoiceSection)
	if err != nil {
		return InvoiceSectionsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoiceSectionsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesDownloadBillingSubscriptionInvoicePoller provides polling facilities until the operation reaches a terminal state.
type InvoicesDownloadBillingSubscriptionInvoicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesDownloadBillingSubscriptionInvoicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesDownloadBillingSubscriptionInvoicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesDownloadBillingSubscriptionInvoiceResponse will be returned.
func (p *InvoicesDownloadBillingSubscriptionInvoicePoller) FinalResponse(ctx context.Context) (InvoicesDownloadBillingSubscriptionInvoiceResponse, error) {
	respType := InvoicesDownloadBillingSubscriptionInvoiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesDownloadBillingSubscriptionInvoiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesDownloadBillingSubscriptionInvoicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesDownloadInvoicePoller provides polling facilities until the operation reaches a terminal state.
type InvoicesDownloadInvoicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesDownloadInvoicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesDownloadInvoicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesDownloadInvoiceResponse will be returned.
func (p *InvoicesDownloadInvoicePoller) FinalResponse(ctx context.Context) (InvoicesDownloadInvoiceResponse, error) {
	respType := InvoicesDownloadInvoiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesDownloadInvoiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesDownloadInvoicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesDownloadMultipleBillingProfileInvoicesPoller provides polling facilities until the operation reaches a terminal state.
type InvoicesDownloadMultipleBillingProfileInvoicesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesDownloadMultipleBillingProfileInvoicesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesDownloadMultipleBillingProfileInvoicesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesDownloadMultipleBillingProfileInvoicesResponse will be returned.
func (p *InvoicesDownloadMultipleBillingProfileInvoicesPoller) FinalResponse(ctx context.Context) (InvoicesDownloadMultipleBillingProfileInvoicesResponse, error) {
	respType := InvoicesDownloadMultipleBillingProfileInvoicesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesDownloadMultipleBillingProfileInvoicesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesDownloadMultipleBillingProfileInvoicesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller provides polling facilities until the operation reaches a terminal state.
type InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse will be returned.
func (p *InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller) FinalResponse(ctx context.Context) (InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse, error) {
	respType := InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.DownloadURL)
	if err != nil {
		return InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *InvoicesDownloadMultipleBillingSubscriptionInvoicesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
