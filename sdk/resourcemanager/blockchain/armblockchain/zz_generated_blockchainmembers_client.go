//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblockchain

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BlockchainMembersClient contains the methods for the BlockchainMembers group.
// Don't use this type directly, use NewBlockchainMembersClient() instead.
type BlockchainMembersClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewBlockchainMembersClient creates a new instance of BlockchainMembersClient with the specified values.
func NewBlockchainMembersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *BlockchainMembersClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &BlockchainMembersClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginCreate - Create a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) BeginCreate(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginCreateOptions) (BlockchainMembersCreatePollerResponse, error) {
	resp, err := client.create(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersCreatePollerResponse{}, err
	}
	result := BlockchainMembersCreatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BlockchainMembersClient.Create", "", resp, client.pl, client.createHandleError)
	if err != nil {
		return BlockchainMembersCreatePollerResponse{}, err
	}
	result.Poller = &BlockchainMembersCreatePoller{
		pt: pt,
	}
	return result, nil
}

// Create - Create a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) create(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createHandleError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *BlockchainMembersClient) createCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BlockchainMember != nil {
		return req, runtime.MarshalAsJSON(req, *options.BlockchainMember)
	}
	return req, nil
}

// createHandleError handles the Create error response.
func (client *BlockchainMembersClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDelete - Delete a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) BeginDelete(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginDeleteOptions) (BlockchainMembersDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersDeletePollerResponse{}, err
	}
	result := BlockchainMembersDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("BlockchainMembersClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return BlockchainMembersDeletePollerResponse{}, err
	}
	result.Poller = &BlockchainMembersDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Delete a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) deleteOperation(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *BlockchainMembersClient) deleteCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *BlockchainMembersClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Get details about a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) Get(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersGetOptions) (BlockchainMembersGetResponse, error) {
	req, err := client.getCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BlockchainMembersGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BlockchainMembersGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *BlockchainMembersClient) getCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BlockchainMembersClient) getHandleResponse(resp *http.Response) (BlockchainMembersGetResponse, error) {
	result := BlockchainMembersGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlockchainMember); err != nil {
		return BlockchainMembersGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *BlockchainMembersClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// List - Lists the blockchain members for a resource group.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) List(resourceGroupName string, options *BlockchainMembersListOptions) *BlockchainMembersListPager {
	return &BlockchainMembersListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp BlockchainMembersListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BlockchainMemberCollection.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *BlockchainMembersClient) listCreateRequest(ctx context.Context, resourceGroupName string, options *BlockchainMembersListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *BlockchainMembersClient) listHandleResponse(resp *http.Response) (BlockchainMembersListResponse, error) {
	result := BlockchainMembersListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlockchainMemberCollection); err != nil {
		return BlockchainMembersListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *BlockchainMembersClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListAPIKeys - Lists the API keys for a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) ListAPIKeys(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListAPIKeysOptions) (BlockchainMembersListAPIKeysResponse, error) {
	req, err := client.listAPIKeysCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersListAPIKeysResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BlockchainMembersListAPIKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BlockchainMembersListAPIKeysResponse{}, client.listAPIKeysHandleError(resp)
	}
	return client.listAPIKeysHandleResponse(resp)
}

// listAPIKeysCreateRequest creates the ListAPIKeys request.
func (client *BlockchainMembersClient) listAPIKeysCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListAPIKeysOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/listApiKeys"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAPIKeysHandleResponse handles the ListAPIKeys response.
func (client *BlockchainMembersClient) listAPIKeysHandleResponse(resp *http.Response) (BlockchainMembersListAPIKeysResponse, error) {
	result := BlockchainMembersListAPIKeysResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.APIKeyCollection); err != nil {
		return BlockchainMembersListAPIKeysResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAPIKeysHandleError handles the ListAPIKeys error response.
func (client *BlockchainMembersClient) listAPIKeysHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListAll - Lists the blockchain members for a subscription.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) ListAll(options *BlockchainMembersListAllOptions) *BlockchainMembersListAllPager {
	return &BlockchainMembersListAllPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAllCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp BlockchainMembersListAllResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.BlockchainMemberCollection.NextLink)
		},
	}
}

// listAllCreateRequest creates the ListAll request.
func (client *BlockchainMembersClient) listAllCreateRequest(ctx context.Context, options *BlockchainMembersListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Blockchain/blockchainMembers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *BlockchainMembersClient) listAllHandleResponse(resp *http.Response) (BlockchainMembersListAllResponse, error) {
	result := BlockchainMembersListAllResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlockchainMemberCollection); err != nil {
		return BlockchainMembersListAllResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAllHandleError handles the ListAll error response.
func (client *BlockchainMembersClient) listAllHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListConsortiumMembers - Lists the consortium members for a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) ListConsortiumMembers(blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListConsortiumMembersOptions) *BlockchainMembersListConsortiumMembersPager {
	return &BlockchainMembersListConsortiumMembersPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listConsortiumMembersCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp BlockchainMembersListConsortiumMembersResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ConsortiumMemberCollection.NextLink)
		},
	}
}

// listConsortiumMembersCreateRequest creates the ListConsortiumMembers request.
func (client *BlockchainMembersClient) listConsortiumMembersCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListConsortiumMembersOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/consortiumMembers"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listConsortiumMembersHandleResponse handles the ListConsortiumMembers response.
func (client *BlockchainMembersClient) listConsortiumMembersHandleResponse(resp *http.Response) (BlockchainMembersListConsortiumMembersResponse, error) {
	result := BlockchainMembersListConsortiumMembersResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConsortiumMemberCollection); err != nil {
		return BlockchainMembersListConsortiumMembersResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listConsortiumMembersHandleError handles the ListConsortiumMembers error response.
func (client *BlockchainMembersClient) listConsortiumMembersHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListRegenerateAPIKeys - Regenerate the API keys for a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) ListRegenerateAPIKeys(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListRegenerateAPIKeysOptions) (BlockchainMembersListRegenerateAPIKeysResponse, error) {
	req, err := client.listRegenerateAPIKeysCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersListRegenerateAPIKeysResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BlockchainMembersListRegenerateAPIKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BlockchainMembersListRegenerateAPIKeysResponse{}, client.listRegenerateAPIKeysHandleError(resp)
	}
	return client.listRegenerateAPIKeysHandleResponse(resp)
}

// listRegenerateAPIKeysCreateRequest creates the ListRegenerateAPIKeys request.
func (client *BlockchainMembersClient) listRegenerateAPIKeysCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersListRegenerateAPIKeysOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}/regenerateApiKeys"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.APIKey != nil {
		return req, runtime.MarshalAsJSON(req, *options.APIKey)
	}
	return req, nil
}

// listRegenerateAPIKeysHandleResponse handles the ListRegenerateAPIKeys response.
func (client *BlockchainMembersClient) listRegenerateAPIKeysHandleResponse(resp *http.Response) (BlockchainMembersListRegenerateAPIKeysResponse, error) {
	result := BlockchainMembersListRegenerateAPIKeysResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.APIKeyCollection); err != nil {
		return BlockchainMembersListRegenerateAPIKeysResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listRegenerateAPIKeysHandleError handles the ListRegenerateAPIKeys error response.
func (client *BlockchainMembersClient) listRegenerateAPIKeysHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Update - Update a blockchain member.
// If the operation fails it returns a generic error.
func (client *BlockchainMembersClient) Update(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersUpdateOptions) (BlockchainMembersUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, blockchainMemberName, resourceGroupName, options)
	if err != nil {
		return BlockchainMembersUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return BlockchainMembersUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return BlockchainMembersUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *BlockchainMembersClient) updateCreateRequest(ctx context.Context, blockchainMemberName string, resourceGroupName string, options *BlockchainMembersUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Blockchain/blockchainMembers/{blockchainMemberName}"
	if blockchainMemberName == "" {
		return nil, errors.New("parameter blockchainMemberName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blockchainMemberName}", url.PathEscape(blockchainMemberName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.BlockchainMember != nil {
		return req, runtime.MarshalAsJSON(req, *options.BlockchainMember)
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *BlockchainMembersClient) updateHandleResponse(resp *http.Response) (BlockchainMembersUpdateResponse, error) {
	result := BlockchainMembersUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BlockchainMember); err != nil {
		return BlockchainMembersUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *BlockchainMembersClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
