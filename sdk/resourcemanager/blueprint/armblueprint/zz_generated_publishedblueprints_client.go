//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armblueprint

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PublishedBlueprintsClient contains the methods for the PublishedBlueprints group.
// Don't use this type directly, use NewPublishedBlueprintsClient() instead.
type PublishedBlueprintsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewPublishedBlueprintsClient creates a new instance of PublishedBlueprintsClient with the specified values.
func NewPublishedBlueprintsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *PublishedBlueprintsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &PublishedBlueprintsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Create - Publish a new version of the blueprint definition with the latest artifacts. Published blueprint definitions are immutable.
// If the operation fails it returns the *CloudError error type.
func (client *PublishedBlueprintsClient) Create(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsCreateOptions) (PublishedBlueprintsCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceScope, blueprintName, versionID, options)
	if err != nil {
		return PublishedBlueprintsCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PublishedBlueprintsCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return PublishedBlueprintsCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *PublishedBlueprintsClient) createCreateRequest(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsCreateOptions) (*policy.Request, error) {
	urlPath := "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceScope}", resourceScope)
	if blueprintName == "" {
		return nil, errors.New("parameter blueprintName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blueprintName}", url.PathEscape(blueprintName))
	if versionID == "" {
		return nil, errors.New("parameter versionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionId}", url.PathEscape(versionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.PublishedBlueprint != nil {
		return req, runtime.MarshalAsJSON(req, *options.PublishedBlueprint)
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *PublishedBlueprintsClient) createHandleResponse(resp *http.Response) (PublishedBlueprintsCreateResponse, error) {
	result := PublishedBlueprintsCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishedBlueprint); err != nil {
		return PublishedBlueprintsCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *PublishedBlueprintsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete a published version of a blueprint definition.
// If the operation fails it returns the *CloudError error type.
func (client *PublishedBlueprintsClient) Delete(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsDeleteOptions) (PublishedBlueprintsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceScope, blueprintName, versionID, options)
	if err != nil {
		return PublishedBlueprintsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PublishedBlueprintsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PublishedBlueprintsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *PublishedBlueprintsClient) deleteCreateRequest(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceScope}", resourceScope)
	if blueprintName == "" {
		return nil, errors.New("parameter blueprintName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blueprintName}", url.PathEscape(blueprintName))
	if versionID == "" {
		return nil, errors.New("parameter versionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionId}", url.PathEscape(versionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *PublishedBlueprintsClient) deleteHandleResponse(resp *http.Response) (PublishedBlueprintsDeleteResponse, error) {
	result := PublishedBlueprintsDeleteResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishedBlueprint); err != nil {
		return PublishedBlueprintsDeleteResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// deleteHandleError handles the Delete error response.
func (client *PublishedBlueprintsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get a published version of a blueprint definition.
// If the operation fails it returns the *CloudError error type.
func (client *PublishedBlueprintsClient) Get(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsGetOptions) (PublishedBlueprintsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceScope, blueprintName, versionID, options)
	if err != nil {
		return PublishedBlueprintsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PublishedBlueprintsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PublishedBlueprintsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PublishedBlueprintsClient) getCreateRequest(ctx context.Context, resourceScope string, blueprintName string, versionID string, options *PublishedBlueprintsGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceScope}", resourceScope)
	if blueprintName == "" {
		return nil, errors.New("parameter blueprintName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blueprintName}", url.PathEscape(blueprintName))
	if versionID == "" {
		return nil, errors.New("parameter versionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{versionId}", url.PathEscape(versionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PublishedBlueprintsClient) getHandleResponse(resp *http.Response) (PublishedBlueprintsGetResponse, error) {
	result := PublishedBlueprintsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishedBlueprint); err != nil {
		return PublishedBlueprintsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PublishedBlueprintsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List published versions of given blueprint definition.
// If the operation fails it returns the *CloudError error type.
func (client *PublishedBlueprintsClient) List(resourceScope string, blueprintName string, options *PublishedBlueprintsListOptions) *PublishedBlueprintsListPager {
	return &PublishedBlueprintsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceScope, blueprintName, options)
		},
		advancer: func(ctx context.Context, resp PublishedBlueprintsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PublishedBlueprintList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *PublishedBlueprintsClient) listCreateRequest(ctx context.Context, resourceScope string, blueprintName string, options *PublishedBlueprintsListOptions) (*policy.Request, error) {
	urlPath := "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions"
	urlPath = strings.ReplaceAll(urlPath, "{resourceScope}", resourceScope)
	if blueprintName == "" {
		return nil, errors.New("parameter blueprintName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{blueprintName}", url.PathEscape(blueprintName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-11-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PublishedBlueprintsClient) listHandleResponse(resp *http.Response) (PublishedBlueprintsListResponse, error) {
	result := PublishedBlueprintsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishedBlueprintList); err != nil {
		return PublishedBlueprintsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PublishedBlueprintsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
