//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armbotservice_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/botservice/armbotservice"
)

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListServiceProviders.json
func ExampleBotConnectionClient_ListServiceProviders() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	res, err := client.ListServiceProviders(ctx,
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BotConnectionClientListServiceProvidersResult)
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json
func ExampleBotConnectionClient_ListWithSecrets() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	res, err := client.ListWithSecrets(ctx,
		"<resource-group-name>",
		"<resource-name>",
		"<connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BotConnectionClientListWithSecretsResult)
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/PutConnection.json
func ExampleBotConnectionClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	res, err := client.Create(ctx,
		"<resource-group-name>",
		"<resource-name>",
		"<connection-name>",
		armbotservice.ConnectionSetting{
			Etag:     to.StringPtr("<etag>"),
			Location: to.StringPtr("<location>"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID:     to.StringPtr("<client-id>"),
				ClientSecret: to.StringPtr("<client-secret>"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.StringPtr("<key>"),
						Value: to.StringPtr("<value>"),
					},
					{
						Key:   to.StringPtr("<key>"),
						Value: to.StringPtr("<value>"),
					}},
				Scopes:            to.StringPtr("<scopes>"),
				ServiceProviderID: to.StringPtr("<service-provider-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BotConnectionClientCreateResult)
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/UpdateConnection.json
func ExampleBotConnectionClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		"<resource-name>",
		"<connection-name>",
		armbotservice.ConnectionSetting{
			Etag:     to.StringPtr("<etag>"),
			Location: to.StringPtr("<location>"),
			Properties: &armbotservice.ConnectionSettingProperties{
				ClientID:     to.StringPtr("<client-id>"),
				ClientSecret: to.StringPtr("<client-secret>"),
				Parameters: []*armbotservice.ConnectionSettingParameter{
					{
						Key:   to.StringPtr("<key>"),
						Value: to.StringPtr("<value>"),
					},
					{
						Key:   to.StringPtr("<key>"),
						Value: to.StringPtr("<value>"),
					}},
				Scopes:                     to.StringPtr("<scopes>"),
				ServiceProviderDisplayName: to.StringPtr("<service-provider-display-name>"),
				ServiceProviderID:          to.StringPtr("<service-provider-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BotConnectionClientUpdateResult)
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/GetConnection.json
func ExampleBotConnectionClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<resource-name>",
		"<connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BotConnectionClientGetResult)
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/DeleteConnection.json
func ExampleBotConnectionClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<resource-name>",
		"<connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/botservice/resource-manager/Microsoft.BotService/preview/2021-05-01-preview/examples/ListConnectionsByBotService.json
func ExampleBotConnectionClient_ListByBotService() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armbotservice.NewBotConnectionClient("<subscription-id>", cred, nil)
	pager := client.ListByBotService("<resource-group-name>",
		"<resource-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
