//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListByProfile.json
func ExampleEndpointsClient_ListByProfile() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.ListByProfile("<resource-group-name>",
		"<profile-name>",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
			return
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Get.json
func ExampleEndpointsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json
func ExampleEndpointsClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.Endpoint{
			Location: to.Ptr("<location>"),
			Tags: map[string]*string{
				"key1": to.Ptr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{
					to.Ptr("text/html"),
					to.Ptr("application/octet-stream")},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.Ptr("<id>"),
				},
				DeliveryPolicy: &armcdn.EndpointPropertiesUpdateParametersDeliveryPolicy{
					Description: to.Ptr("<description>"),
					Rules: []*armcdn.DeliveryRule{
						{
							Name: to.Ptr("<name>"),
							Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
								&armcdn.DeliveryRuleCacheExpirationAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionCacheExpiration),
									Parameters: &armcdn.CacheExpirationActionParameters{
										CacheBehavior: to.Ptr(armcdn.CacheBehaviorOverride),
										CacheDuration: to.Ptr("<cache-duration>"),
										CacheType:     to.Ptr(armcdn.CacheTypeAll),
										TypeName:      to.Ptr(armcdn.CacheExpirationActionParametersTypeNameDeliveryRuleCacheExpirationActionParameters),
									},
								},
								&armcdn.DeliveryRuleResponseHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyResponseHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("<header-name>"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("<value>"),
									},
								},
								&armcdn.DeliveryRuleRequestHeaderAction{
									Name: to.Ptr(armcdn.DeliveryRuleActionModifyRequestHeader),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: to.Ptr(armcdn.HeaderActionOverwrite),
										HeaderName:   to.Ptr("<header-name>"),
										TypeName:     to.Ptr(armcdn.HeaderActionParametersTypeNameDeliveryRuleHeaderActionParameters),
										Value:        to.Ptr("<value>"),
									},
								}},
							Conditions: []armcdn.DeliveryRuleConditionClassification{
								&armcdn.DeliveryRuleRemoteAddressCondition{
									Name: to.Ptr(armcdn.MatchVariableRemoteAddress),
									Parameters: &armcdn.RemoteAddressMatchConditionParameters{
										MatchValues: []*string{
											to.Ptr("192.168.1.0/24"),
											to.Ptr("10.0.0.0/24")},
										NegateCondition: to.Ptr(true),
										Operator:        to.Ptr(armcdn.RemoteAddressOperatorIPMatch),
										TypeName:        to.Ptr(armcdn.RemoteAddressMatchConditionParametersTypeNameDeliveryRuleRemoteAddressConditionParameters),
									},
								}},
							Order: to.Ptr[int32](1),
						}},
				},
				IsCompressionEnabled:       to.Ptr(true),
				IsHTTPAllowed:              to.Ptr(true),
				IsHTTPSAllowed:             to.Ptr(true),
				OriginHostHeader:           to.Ptr("<origin-host-header>"),
				OriginPath:                 to.Ptr("<origin-path>"),
				QueryStringCachingBehavior: to.Ptr(armcdn.QueryStringCachingBehaviorBypassCaching),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.Ptr("<name>"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Ptr[int32](120),
								ProbePath:              to.Ptr("<probe-path>"),
								ProbeProtocol:          to.Ptr(armcdn.ProbeProtocolHTTP),
								ProbeRequestType:       to.Ptr(armcdn.HealthProbeRequestTypeGET),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.Ptr("<id>"),
								},
								{
									ID: to.Ptr("<id>"),
								}},
							ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
								ResponseBasedDetectedErrorTypes:          to.Ptr(armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly),
								ResponseBasedFailoverThresholdPercentage: to.Ptr[int32](10),
							},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.Ptr("<name>"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("<host-name>"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("<origin-host-header>"),
							Priority:         to.Ptr[int32](1),
							Weight:           to.Ptr[int32](50),
						},
					},
					{
						Name: to.Ptr("<name>"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.Ptr(true),
							HostName:         to.Ptr("<host-name>"),
							HTTPPort:         to.Ptr[int32](80),
							HTTPSPort:        to.Ptr[int32](443),
							OriginHostHeader: to.Ptr("<origin-host-header>"),
							Priority:         to.Ptr[int32](2),
							Weight:           to.Ptr[int32](50),
						},
					}},
			},
		},
		&armcdn.EndpointsClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json
func ExampleEndpointsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.EndpointUpdateParameters{
			Tags: map[string]*string{
				"additionalProperties": to.Ptr("Tag1"),
			},
		},
		&armcdn.EndpointsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Delete.json
func ExampleEndpointsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		&armcdn.EndpointsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json
func ExampleEndpointsClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginStart(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		&armcdn.EndpointsClientBeginStartOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json
func ExampleEndpointsClient_BeginStop() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginStop(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		&armcdn.EndpointsClientBeginStopOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_PurgeContent.json
func ExampleEndpointsClient_BeginPurgeContent() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginPurgeContent(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.PurgeParameters{
			ContentPaths: []*string{
				to.Ptr("/folder1")},
		},
		&armcdn.EndpointsClientBeginPurgeContentOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_LoadContent.json
func ExampleEndpointsClient_BeginLoadContent() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginLoadContent(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.LoadParameters{
			ContentPaths: []*string{
				to.Ptr("/folder1")},
		},
		&armcdn.EndpointsClientBeginLoadContentOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ValidateCustomDomain.json
func ExampleEndpointsClient_ValidateCustomDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ValidateCustomDomain(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.ValidateCustomDomainInput{
			HostName: to.Ptr("<host-name>"),
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListResourceUsage.json
func ExampleEndpointsClient_ListResourceUsage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.ListResourceUsage("<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
			return
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}
