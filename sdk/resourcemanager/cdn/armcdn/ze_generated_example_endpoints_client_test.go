//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn"
)

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListByProfile.json
func ExampleEndpointsClient_ListByProfile() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	pager := client.ListByProfile("<resource-group-name>",
		"<profile-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Get.json
func ExampleEndpointsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientGetResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Create.json
func ExampleEndpointsClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.Endpoint{
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &armcdn.EndpointProperties{
				ContentTypesToCompress: []*string{
					to.StringPtr("text/html"),
					to.StringPtr("application/octet-stream")},
				DefaultOriginGroup: &armcdn.ResourceReference{
					ID: to.StringPtr("<id>"),
				},
				DeliveryPolicy: &armcdn.EndpointPropertiesUpdateParametersDeliveryPolicy{
					Description: to.StringPtr("<description>"),
					Rules: []*armcdn.DeliveryRule{
						{
							Name: to.StringPtr("<name>"),
							Actions: []armcdn.DeliveryRuleActionAutoGeneratedClassification{
								&armcdn.DeliveryRuleCacheExpirationAction{
									Name: armcdn.DeliveryRuleAction("CacheExpiration").ToPtr(),
									Parameters: &armcdn.CacheExpirationActionParameters{
										CacheBehavior: armcdn.CacheBehavior("Override").ToPtr(),
										CacheDuration: to.StringPtr("<cache-duration>"),
										CacheType:     armcdn.CacheType("All").ToPtr(),
										TypeName:      armcdn.CacheExpirationActionParametersTypeName("DeliveryRuleCacheExpirationActionParameters").ToPtr(),
									},
								},
								&armcdn.DeliveryRuleResponseHeaderAction{
									Name: armcdn.DeliveryRuleAction("ModifyResponseHeader").ToPtr(),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: armcdn.HeaderAction("Overwrite").ToPtr(),
										HeaderName:   to.StringPtr("<header-name>"),
										TypeName:     armcdn.HeaderActionParametersTypeName("DeliveryRuleHeaderActionParameters").ToPtr(),
										Value:        to.StringPtr("<value>"),
									},
								},
								&armcdn.DeliveryRuleRequestHeaderAction{
									Name: armcdn.DeliveryRuleAction("ModifyRequestHeader").ToPtr(),
									Parameters: &armcdn.HeaderActionParameters{
										HeaderAction: armcdn.HeaderAction("Overwrite").ToPtr(),
										HeaderName:   to.StringPtr("<header-name>"),
										TypeName:     armcdn.HeaderActionParametersTypeName("DeliveryRuleHeaderActionParameters").ToPtr(),
										Value:        to.StringPtr("<value>"),
									},
								}},
							Conditions: []armcdn.DeliveryRuleConditionClassification{
								&armcdn.DeliveryRuleRemoteAddressCondition{
									Name: armcdn.MatchVariable("RemoteAddress").ToPtr(),
									Parameters: &armcdn.RemoteAddressMatchConditionParameters{
										MatchValues: []*string{
											to.StringPtr("192.168.1.0/24"),
											to.StringPtr("10.0.0.0/24")},
										NegateCondition: to.BoolPtr(true),
										Operator:        armcdn.RemoteAddressOperator("IPMatch").ToPtr(),
										TypeName:        armcdn.RemoteAddressMatchConditionParametersTypeName("DeliveryRuleRemoteAddressConditionParameters").ToPtr(),
									},
								}},
							Order: to.Int32Ptr(1),
						}},
				},
				IsCompressionEnabled:       to.BoolPtr(true),
				IsHTTPAllowed:              to.BoolPtr(true),
				IsHTTPSAllowed:             to.BoolPtr(true),
				OriginHostHeader:           to.StringPtr("<origin-host-header>"),
				OriginPath:                 to.StringPtr("<origin-path>"),
				QueryStringCachingBehavior: armcdn.QueryStringCachingBehaviorBypassCaching.ToPtr(),
				OriginGroups: []*armcdn.DeepCreatedOriginGroup{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armcdn.DeepCreatedOriginGroupProperties{
							HealthProbeSettings: &armcdn.HealthProbeParameters{
								ProbeIntervalInSeconds: to.Int32Ptr(120),
								ProbePath:              to.StringPtr("<probe-path>"),
								ProbeProtocol:          armcdn.ProbeProtocolHTTP.ToPtr(),
								ProbeRequestType:       armcdn.HealthProbeRequestTypeGET.ToPtr(),
							},
							Origins: []*armcdn.ResourceReference{
								{
									ID: to.StringPtr("<id>"),
								},
								{
									ID: to.StringPtr("<id>"),
								}},
							ResponseBasedOriginErrorDetectionSettings: &armcdn.ResponseBasedOriginErrorDetectionParameters{
								ResponseBasedDetectedErrorTypes:          armcdn.ResponseBasedDetectedErrorTypesTCPErrorsOnly.ToPtr(),
								ResponseBasedFailoverThresholdPercentage: to.Int32Ptr(10),
							},
						},
					}},
				Origins: []*armcdn.DeepCreatedOrigin{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.BoolPtr(true),
							HostName:         to.StringPtr("<host-name>"),
							HTTPPort:         to.Int32Ptr(80),
							HTTPSPort:        to.Int32Ptr(443),
							OriginHostHeader: to.StringPtr("<origin-host-header>"),
							Priority:         to.Int32Ptr(1),
							Weight:           to.Int32Ptr(50),
						},
					},
					{
						Name: to.StringPtr("<name>"),
						Properties: &armcdn.DeepCreatedOriginProperties{
							Enabled:          to.BoolPtr(true),
							HostName:         to.StringPtr("<host-name>"),
							HTTPPort:         to.Int32Ptr(80),
							HTTPSPort:        to.Int32Ptr(443),
							OriginHostHeader: to.StringPtr("<origin-host-header>"),
							Priority:         to.Int32Ptr(2),
							Weight:           to.Int32Ptr(50),
						},
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientCreateResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Update.json
func ExampleEndpointsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.EndpointUpdateParameters{
			Tags: map[string]*string{
				"additionalProperties": to.StringPtr("Tag1"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientUpdateResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Delete.json
func ExampleEndpointsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Start.json
func ExampleEndpointsClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStart(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientStartResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_Stop.json
func ExampleEndpointsClient_BeginStop() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStop(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientStopResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_PurgeContent.json
func ExampleEndpointsClient_BeginPurgeContent() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPurgeContent(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.PurgeParameters{
			ContentPaths: []*string{
				to.StringPtr("/folder1")},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_LoadContent.json
func ExampleEndpointsClient_BeginLoadContent() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginLoadContent(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.LoadParameters{
			ContentPaths: []*string{
				to.StringPtr("/folder1")},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ValidateCustomDomain.json
func ExampleEndpointsClient_ValidateCustomDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	res, err := client.ValidateCustomDomain(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		armcdn.ValidateCustomDomainInput{
			HostName: to.StringPtr("<host-name>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.EndpointsClientValidateCustomDomainResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Endpoints_ListResourceUsage.json
func ExampleEndpointsClient_ListResourceUsage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewEndpointsClient("<subscription-id>", cred, nil)
	pager := client.ListResourceUsage("<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
