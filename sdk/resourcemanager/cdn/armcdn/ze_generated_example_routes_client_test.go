//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cdn/armcdn"
)

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_ListByEndpoint.json
func ExampleRoutesClient_ListByEndpoint() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewRoutesClient("<subscription-id>", cred, nil)
	pager := client.ListByEndpoint("<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Get.json
func ExampleRoutesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewRoutesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		"<route-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoutesClientGetResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Create.json
func ExampleRoutesClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewRoutesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		"<route-name>",
		armcdn.Route{
			Properties: &armcdn.RouteProperties{
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryParameters:            to.StringPtr("<query-parameters>"),
					QueryStringCachingBehavior: armcdn.AfdQueryStringCachingBehavior("IgnoreSpecifiedQueryStrings").ToPtr(),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.StringPtr("<id>"),
					}},
				EnabledState:        armcdn.EnabledState("Enabled").ToPtr(),
				ForwardingProtocol:  armcdn.ForwardingProtocol("MatchRequest").ToPtr(),
				HTTPSRedirect:       armcdn.HTTPSRedirect("Enabled").ToPtr(),
				LinkToDefaultDomain: armcdn.LinkToDefaultDomain("Enabled").ToPtr(),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.StringPtr("<id>"),
				},
				PatternsToMatch: []*string{
					to.StringPtr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.StringPtr("<id>"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					armcdn.AFDEndpointProtocols("Https").ToPtr(),
					armcdn.AFDEndpointProtocols("Http").ToPtr()},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoutesClientCreateResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Update.json
func ExampleRoutesClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewRoutesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		"<route-name>",
		armcdn.RouteUpdateParameters{
			Properties: &armcdn.RouteUpdatePropertiesParameters{
				CacheConfiguration: &armcdn.AfdRouteCacheConfiguration{
					CompressionSettings: map[string]interface{}{
						"contentTypesToCompress": []interface{}{
							"text/html",
							"application/octet-stream",
						},
						"isCompressionEnabled": true,
					},
					QueryStringCachingBehavior: armcdn.AfdQueryStringCachingBehavior("IgnoreQueryString").ToPtr(),
				},
				CustomDomains: []*armcdn.ActivatedResourceReference{
					{
						ID: to.StringPtr("<id>"),
					}},
				EnabledState:        armcdn.EnabledState("Enabled").ToPtr(),
				ForwardingProtocol:  armcdn.ForwardingProtocol("MatchRequest").ToPtr(),
				HTTPSRedirect:       armcdn.HTTPSRedirect("Enabled").ToPtr(),
				LinkToDefaultDomain: armcdn.LinkToDefaultDomain("Enabled").ToPtr(),
				OriginGroup: &armcdn.ResourceReference{
					ID: to.StringPtr("<id>"),
				},
				PatternsToMatch: []*string{
					to.StringPtr("/*")},
				RuleSets: []*armcdn.ResourceReference{
					{
						ID: to.StringPtr("<id>"),
					}},
				SupportedProtocols: []*armcdn.AFDEndpointProtocols{
					armcdn.AFDEndpointProtocols("Https").ToPtr(),
					armcdn.AFDEndpointProtocols("Http").ToPtr()},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.RoutesClientUpdateResult)
}

// x-ms-original-file: specification/cdn/resource-manager/Microsoft.Cdn/stable/2021-06-01/examples/Routes_Delete.json
func ExampleRoutesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcdn.NewRoutesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<profile-name>",
		"<endpoint-name>",
		"<route-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
