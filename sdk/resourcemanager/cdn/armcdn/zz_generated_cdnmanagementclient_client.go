//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CdnManagementClient contains the methods for the CdnManagementClient group.
// Don't use this type directly, use NewCdnManagementClient() instead.
type CdnManagementClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewCdnManagementClient creates a new instance of CdnManagementClient with the specified values.
func NewCdnManagementClient(con *arm.Connection, subscriptionID string) *CdnManagementClient {
	return &CdnManagementClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// CheckNameAvailability - Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CdnManagementClient) CheckNameAvailability(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *CdnManagementClientCheckNameAvailabilityOptions) (CdnManagementClientCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, checkNameAvailabilityInput, options)
	if err != nil {
		return CdnManagementClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CdnManagementClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CdnManagementClientCheckNameAvailabilityResponse{}, client.checkNameAvailabilityHandleError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *CdnManagementClient) checkNameAvailabilityCreateRequest(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *CdnManagementClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Cdn/checkNameAvailability"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, checkNameAvailabilityInput)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *CdnManagementClient) checkNameAvailabilityHandleResponse(resp *http.Response) (CdnManagementClientCheckNameAvailabilityResponse, error) {
	result := CdnManagementClientCheckNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityOutput); err != nil {
		return CdnManagementClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *CdnManagementClient) checkNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CheckNameAvailabilityWithSubscription - Check the availability of a resource name. This is needed for resources where name is globally unique, such as
// a CDN endpoint.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CdnManagementClient) CheckNameAvailabilityWithSubscription(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *CdnManagementClientCheckNameAvailabilityWithSubscriptionOptions) (CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse, error) {
	req, err := client.checkNameAvailabilityWithSubscriptionCreateRequest(ctx, checkNameAvailabilityInput, options)
	if err != nil {
		return CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse{}, client.checkNameAvailabilityWithSubscriptionHandleError(resp)
	}
	return client.checkNameAvailabilityWithSubscriptionHandleResponse(resp)
}

// checkNameAvailabilityWithSubscriptionCreateRequest creates the CheckNameAvailabilityWithSubscription request.
func (client *CdnManagementClient) checkNameAvailabilityWithSubscriptionCreateRequest(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *CdnManagementClientCheckNameAvailabilityWithSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, checkNameAvailabilityInput)
}

// checkNameAvailabilityWithSubscriptionHandleResponse handles the CheckNameAvailabilityWithSubscription response.
func (client *CdnManagementClient) checkNameAvailabilityWithSubscriptionHandleResponse(resp *http.Response) (CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse, error) {
	result := CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityOutput); err != nil {
		return CdnManagementClientCheckNameAvailabilityWithSubscriptionResponse{}, err
	}
	return result, nil
}

// checkNameAvailabilityWithSubscriptionHandleError handles the CheckNameAvailabilityWithSubscription error response.
func (client *CdnManagementClient) checkNameAvailabilityWithSubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ValidateProbe - Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to
// help accelerate the delivery of dynamic content via the CDN
// endpoint. This path is relative to the origin path specified in the endpoint configuration.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CdnManagementClient) ValidateProbe(ctx context.Context, validateProbeInput ValidateProbeInput, options *CdnManagementClientValidateProbeOptions) (CdnManagementClientValidateProbeResponse, error) {
	req, err := client.validateProbeCreateRequest(ctx, validateProbeInput, options)
	if err != nil {
		return CdnManagementClientValidateProbeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CdnManagementClientValidateProbeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CdnManagementClientValidateProbeResponse{}, client.validateProbeHandleError(resp)
	}
	return client.validateProbeHandleResponse(resp)
}

// validateProbeCreateRequest creates the ValidateProbe request.
func (client *CdnManagementClient) validateProbeCreateRequest(ctx context.Context, validateProbeInput ValidateProbeInput, options *CdnManagementClientValidateProbeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/validateProbe"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, validateProbeInput)
}

// validateProbeHandleResponse handles the ValidateProbe response.
func (client *CdnManagementClient) validateProbeHandleResponse(resp *http.Response) (CdnManagementClientValidateProbeResponse, error) {
	result := CdnManagementClientValidateProbeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ValidateProbeOutput); err != nil {
		return CdnManagementClientValidateProbeResponse{}, err
	}
	return result, nil
}

// validateProbeHandleError handles the ValidateProbe error response.
func (client *CdnManagementClient) validateProbeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
