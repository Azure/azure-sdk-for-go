//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn

const (
	module  = "armcdn"
	version = "v0.1.0"
)

// AFDEndpointProtocols - Supported protocols for the customer's endpoint.
type AFDEndpointProtocols string

const (
	AFDEndpointProtocolsHTTP  AFDEndpointProtocols = "Http"
	AFDEndpointProtocolsHTTPS AFDEndpointProtocols = "Https"
)

// PossibleAFDEndpointProtocolsValues returns the possible values for the AFDEndpointProtocols const type.
func PossibleAFDEndpointProtocolsValues() []AFDEndpointProtocols {
	return []AFDEndpointProtocols{
		AFDEndpointProtocolsHTTP,
		AFDEndpointProtocolsHTTPS,
	}
}

// ToPtr returns a *AFDEndpointProtocols pointing to the current value.
func (c AFDEndpointProtocols) ToPtr() *AFDEndpointProtocols {
	return &c
}

// ActionType - Defines the action to take on rule match.
type ActionType string

const (
	ActionTypeAllow    ActionType = "Allow"
	ActionTypeBlock    ActionType = "Block"
	ActionTypeLog      ActionType = "Log"
	ActionTypeRedirect ActionType = "Redirect"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeAllow,
		ActionTypeBlock,
		ActionTypeLog,
		ActionTypeRedirect,
	}
}

// ToPtr returns a *ActionType pointing to the current value.
func (c ActionType) ToPtr() *ActionType {
	return &c
}

// AfdCertificateType - Defines the source of the SSL certificate.
type AfdCertificateType string

const (
	AfdCertificateTypeCustomerCertificate AfdCertificateType = "CustomerCertificate"
	AfdCertificateTypeManagedCertificate  AfdCertificateType = "ManagedCertificate"
)

// PossibleAfdCertificateTypeValues returns the possible values for the AfdCertificateType const type.
func PossibleAfdCertificateTypeValues() []AfdCertificateType {
	return []AfdCertificateType{
		AfdCertificateTypeCustomerCertificate,
		AfdCertificateTypeManagedCertificate,
	}
}

// ToPtr returns a *AfdCertificateType pointing to the current value.
func (c AfdCertificateType) ToPtr() *AfdCertificateType {
	return &c
}

// AfdMinimumTLSVersion - TLS protocol version that will be used for Https
type AfdMinimumTLSVersion string

const (
	AfdMinimumTLSVersionTLS10 AfdMinimumTLSVersion = "TLS10"
	AfdMinimumTLSVersionTLS12 AfdMinimumTLSVersion = "TLS12"
)

// PossibleAfdMinimumTLSVersionValues returns the possible values for the AfdMinimumTLSVersion const type.
func PossibleAfdMinimumTLSVersionValues() []AfdMinimumTLSVersion {
	return []AfdMinimumTLSVersion{
		AfdMinimumTLSVersionTLS10,
		AfdMinimumTLSVersionTLS12,
	}
}

// ToPtr returns a *AfdMinimumTLSVersion pointing to the current value.
func (c AfdMinimumTLSVersion) ToPtr() *AfdMinimumTLSVersion {
	return &c
}

// AfdProvisioningState - Provisioning status
type AfdProvisioningState string

const (
	AfdProvisioningStateCreating  AfdProvisioningState = "Creating"
	AfdProvisioningStateDeleting  AfdProvisioningState = "Deleting"
	AfdProvisioningStateFailed    AfdProvisioningState = "Failed"
	AfdProvisioningStateSucceeded AfdProvisioningState = "Succeeded"
	AfdProvisioningStateUpdating  AfdProvisioningState = "Updating"
)

// PossibleAfdProvisioningStateValues returns the possible values for the AfdProvisioningState const type.
func PossibleAfdProvisioningStateValues() []AfdProvisioningState {
	return []AfdProvisioningState{
		AfdProvisioningStateCreating,
		AfdProvisioningStateDeleting,
		AfdProvisioningStateFailed,
		AfdProvisioningStateSucceeded,
		AfdProvisioningStateUpdating,
	}
}

// ToPtr returns a *AfdProvisioningState pointing to the current value.
func (c AfdProvisioningState) ToPtr() *AfdProvisioningState {
	return &c
}

// AfdQueryStringCachingBehavior - Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching
// to prevent requests that contain query strings from being cached, or cache
// every request with a unique URL.
type AfdQueryStringCachingBehavior string

const (
	AfdQueryStringCachingBehaviorIgnoreQueryString AfdQueryStringCachingBehavior = "IgnoreQueryString"
	AfdQueryStringCachingBehaviorUseQueryString    AfdQueryStringCachingBehavior = "UseQueryString"
	AfdQueryStringCachingBehaviorNotSet            AfdQueryStringCachingBehavior = "NotSet"
)

// PossibleAfdQueryStringCachingBehaviorValues returns the possible values for the AfdQueryStringCachingBehavior const type.
func PossibleAfdQueryStringCachingBehaviorValues() []AfdQueryStringCachingBehavior {
	return []AfdQueryStringCachingBehavior{
		AfdQueryStringCachingBehaviorIgnoreQueryString,
		AfdQueryStringCachingBehaviorUseQueryString,
		AfdQueryStringCachingBehaviorNotSet,
	}
}

// ToPtr returns a *AfdQueryStringCachingBehavior pointing to the current value.
func (c AfdQueryStringCachingBehavior) ToPtr() *AfdQueryStringCachingBehavior {
	return &c
}

// Algorithm - Algorithm to use for URL signing
type Algorithm string

const (
	AlgorithmSHA256 Algorithm = "SHA256"
)

// PossibleAlgorithmValues returns the possible values for the Algorithm const type.
func PossibleAlgorithmValues() []Algorithm {
	return []Algorithm{
		AlgorithmSHA256,
	}
}

// ToPtr returns a *Algorithm pointing to the current value.
func (c Algorithm) ToPtr() *Algorithm {
	return &c
}

// CacheBehavior - Caching behavior for the requests
type CacheBehavior string

const (
	CacheBehaviorBypassCache  CacheBehavior = "BypassCache"
	CacheBehaviorOverride     CacheBehavior = "Override"
	CacheBehaviorSetIfMissing CacheBehavior = "SetIfMissing"
)

// PossibleCacheBehaviorValues returns the possible values for the CacheBehavior const type.
func PossibleCacheBehaviorValues() []CacheBehavior {
	return []CacheBehavior{
		CacheBehaviorBypassCache,
		CacheBehaviorOverride,
		CacheBehaviorSetIfMissing,
	}
}

// ToPtr returns a *CacheBehavior pointing to the current value.
func (c CacheBehavior) ToPtr() *CacheBehavior {
	return &c
}

type CacheExpirationActionParametersODataType string

const (
	CacheExpirationActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCacheExpirationActionParameters CacheExpirationActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters"
)

// PossibleCacheExpirationActionParametersODataTypeValues returns the possible values for the CacheExpirationActionParametersODataType const type.
func PossibleCacheExpirationActionParametersODataTypeValues() []CacheExpirationActionParametersODataType {
	return []CacheExpirationActionParametersODataType{
		CacheExpirationActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCacheExpirationActionParameters,
	}
}

// ToPtr returns a *CacheExpirationActionParametersODataType pointing to the current value.
func (c CacheExpirationActionParametersODataType) ToPtr() *CacheExpirationActionParametersODataType {
	return &c
}

type CacheKeyQueryStringActionParametersODataType string

const (
	CacheKeyQueryStringActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCacheKeyQueryStringBehaviorActionParameters CacheKeyQueryStringActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters"
)

// PossibleCacheKeyQueryStringActionParametersODataTypeValues returns the possible values for the CacheKeyQueryStringActionParametersODataType const type.
func PossibleCacheKeyQueryStringActionParametersODataTypeValues() []CacheKeyQueryStringActionParametersODataType {
	return []CacheKeyQueryStringActionParametersODataType{
		CacheKeyQueryStringActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCacheKeyQueryStringBehaviorActionParameters,
	}
}

// ToPtr returns a *CacheKeyQueryStringActionParametersODataType pointing to the current value.
func (c CacheKeyQueryStringActionParametersODataType) ToPtr() *CacheKeyQueryStringActionParametersODataType {
	return &c
}

// CacheType - The level at which the content needs to be cached.
type CacheType string

const (
	CacheTypeAll CacheType = "All"
)

// PossibleCacheTypeValues returns the possible values for the CacheType const type.
func PossibleCacheTypeValues() []CacheType {
	return []CacheType{
		CacheTypeAll,
	}
}

// ToPtr returns a *CacheType pointing to the current value.
func (c CacheType) ToPtr() *CacheType {
	return &c
}

type CdnCertificateSourceParametersODataType string

const (
	CdnCertificateSourceParametersODataTypeMicrosoftAzureCdnModelsCdnCertificateSourceParameters CdnCertificateSourceParametersODataType = "#Microsoft.Azure.Cdn.Models.CdnCertificateSourceParameters"
)

// PossibleCdnCertificateSourceParametersODataTypeValues returns the possible values for the CdnCertificateSourceParametersODataType const type.
func PossibleCdnCertificateSourceParametersODataTypeValues() []CdnCertificateSourceParametersODataType {
	return []CdnCertificateSourceParametersODataType{
		CdnCertificateSourceParametersODataTypeMicrosoftAzureCdnModelsCdnCertificateSourceParameters,
	}
}

// ToPtr returns a *CdnCertificateSourceParametersODataType pointing to the current value.
func (c CdnCertificateSourceParametersODataType) ToPtr() *CdnCertificateSourceParametersODataType {
	return &c
}

// CertificateSource - Defines the source of the SSL certificate.
type CertificateSource string

const (
	CertificateSourceAzureKeyVault CertificateSource = "AzureKeyVault"
	CertificateSourceCdn           CertificateSource = "Cdn"
)

// PossibleCertificateSourceValues returns the possible values for the CertificateSource const type.
func PossibleCertificateSourceValues() []CertificateSource {
	return []CertificateSource{
		CertificateSourceAzureKeyVault,
		CertificateSourceCdn,
	}
}

// ToPtr returns a *CertificateSource pointing to the current value.
func (c CertificateSource) ToPtr() *CertificateSource {
	return &c
}

// CertificateType - Type of certificate used
type CertificateType string

const (
	CertificateTypeDedicated CertificateType = "Dedicated"
	CertificateTypeShared    CertificateType = "Shared"
)

// PossibleCertificateTypeValues returns the possible values for the CertificateType const type.
func PossibleCertificateTypeValues() []CertificateType {
	return []CertificateType{
		CertificateTypeDedicated,
		CertificateTypeShared,
	}
}

// ToPtr returns a *CertificateType pointing to the current value.
func (c CertificateType) ToPtr() *CertificateType {
	return &c
}

type CookiesMatchConditionParametersODataType string

const (
	CookiesMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCookiesConditionParameters CookiesMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleCookiesConditionParameters"
)

// PossibleCookiesMatchConditionParametersODataTypeValues returns the possible values for the CookiesMatchConditionParametersODataType const type.
func PossibleCookiesMatchConditionParametersODataTypeValues() []CookiesMatchConditionParametersODataType {
	return []CookiesMatchConditionParametersODataType{
		CookiesMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleCookiesConditionParameters,
	}
}

// ToPtr returns a *CookiesMatchConditionParametersODataType pointing to the current value.
func (c CookiesMatchConditionParametersODataType) ToPtr() *CookiesMatchConditionParametersODataType {
	return &c
}

// CookiesOperator - Describes operator to be matched
type CookiesOperator string

const (
	CookiesOperatorAny                CookiesOperator = "Any"
	CookiesOperatorBeginsWith         CookiesOperator = "BeginsWith"
	CookiesOperatorContains           CookiesOperator = "Contains"
	CookiesOperatorEndsWith           CookiesOperator = "EndsWith"
	CookiesOperatorEqual              CookiesOperator = "Equal"
	CookiesOperatorGreaterThan        CookiesOperator = "GreaterThan"
	CookiesOperatorGreaterThanOrEqual CookiesOperator = "GreaterThanOrEqual"
	CookiesOperatorLessThan           CookiesOperator = "LessThan"
	CookiesOperatorLessThanOrEqual    CookiesOperator = "LessThanOrEqual"
	CookiesOperatorRegEx              CookiesOperator = "RegEx"
)

// PossibleCookiesOperatorValues returns the possible values for the CookiesOperator const type.
func PossibleCookiesOperatorValues() []CookiesOperator {
	return []CookiesOperator{
		CookiesOperatorAny,
		CookiesOperatorBeginsWith,
		CookiesOperatorContains,
		CookiesOperatorEndsWith,
		CookiesOperatorEqual,
		CookiesOperatorGreaterThan,
		CookiesOperatorGreaterThanOrEqual,
		CookiesOperatorLessThan,
		CookiesOperatorLessThanOrEqual,
		CookiesOperatorRegEx,
	}
}

// ToPtr returns a *CookiesOperator pointing to the current value.
func (c CookiesOperator) ToPtr() *CookiesOperator {
	return &c
}

// CustomDomainResourceState - Resource status of the custom domain.
type CustomDomainResourceState string

const (
	CustomDomainResourceStateActive   CustomDomainResourceState = "Active"
	CustomDomainResourceStateCreating CustomDomainResourceState = "Creating"
	CustomDomainResourceStateDeleting CustomDomainResourceState = "Deleting"
)

// PossibleCustomDomainResourceStateValues returns the possible values for the CustomDomainResourceState const type.
func PossibleCustomDomainResourceStateValues() []CustomDomainResourceState {
	return []CustomDomainResourceState{
		CustomDomainResourceStateActive,
		CustomDomainResourceStateCreating,
		CustomDomainResourceStateDeleting,
	}
}

// ToPtr returns a *CustomDomainResourceState pointing to the current value.
func (c CustomDomainResourceState) ToPtr() *CustomDomainResourceState {
	return &c
}

// CustomHTTPSProvisioningState - Provisioning status of Custom Https of the custom domain.
type CustomHTTPSProvisioningState string

const (
	CustomHTTPSProvisioningStateDisabled  CustomHTTPSProvisioningState = "Disabled"
	CustomHTTPSProvisioningStateDisabling CustomHTTPSProvisioningState = "Disabling"
	CustomHTTPSProvisioningStateEnabled   CustomHTTPSProvisioningState = "Enabled"
	CustomHTTPSProvisioningStateEnabling  CustomHTTPSProvisioningState = "Enabling"
	CustomHTTPSProvisioningStateFailed    CustomHTTPSProvisioningState = "Failed"
)

// PossibleCustomHTTPSProvisioningStateValues returns the possible values for the CustomHTTPSProvisioningState const type.
func PossibleCustomHTTPSProvisioningStateValues() []CustomHTTPSProvisioningState {
	return []CustomHTTPSProvisioningState{
		CustomHTTPSProvisioningStateDisabled,
		CustomHTTPSProvisioningStateDisabling,
		CustomHTTPSProvisioningStateEnabled,
		CustomHTTPSProvisioningStateEnabling,
		CustomHTTPSProvisioningStateFailed,
	}
}

// ToPtr returns a *CustomHTTPSProvisioningState pointing to the current value.
func (c CustomHTTPSProvisioningState) ToPtr() *CustomHTTPSProvisioningState {
	return &c
}

// CustomHTTPSProvisioningSubstate - Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
type CustomHTTPSProvisioningSubstate string

const (
	CustomHTTPSProvisioningSubstateCertificateDeleted                            CustomHTTPSProvisioningSubstate = "CertificateDeleted"
	CustomHTTPSProvisioningSubstateCertificateDeployed                           CustomHTTPSProvisioningSubstate = "CertificateDeployed"
	CustomHTTPSProvisioningSubstateDeletingCertificate                           CustomHTTPSProvisioningSubstate = "DeletingCertificate"
	CustomHTTPSProvisioningSubstateDeployingCertificate                          CustomHTTPSProvisioningSubstate = "DeployingCertificate"
	CustomHTTPSProvisioningSubstateDomainControlValidationRequestApproved        CustomHTTPSProvisioningSubstate = "DomainControlValidationRequestApproved"
	CustomHTTPSProvisioningSubstateDomainControlValidationRequestRejected        CustomHTTPSProvisioningSubstate = "DomainControlValidationRequestRejected"
	CustomHTTPSProvisioningSubstateDomainControlValidationRequestTimedOut        CustomHTTPSProvisioningSubstate = "DomainControlValidationRequestTimedOut"
	CustomHTTPSProvisioningSubstateIssuingCertificate                            CustomHTTPSProvisioningSubstate = "IssuingCertificate"
	CustomHTTPSProvisioningSubstatePendingDomainControlValidationREquestApproval CustomHTTPSProvisioningSubstate = "PendingDomainControlValidationREquestApproval"
	CustomHTTPSProvisioningSubstateSubmittingDomainControlValidationRequest      CustomHTTPSProvisioningSubstate = "SubmittingDomainControlValidationRequest"
)

// PossibleCustomHTTPSProvisioningSubstateValues returns the possible values for the CustomHTTPSProvisioningSubstate const type.
func PossibleCustomHTTPSProvisioningSubstateValues() []CustomHTTPSProvisioningSubstate {
	return []CustomHTTPSProvisioningSubstate{
		CustomHTTPSProvisioningSubstateCertificateDeleted,
		CustomHTTPSProvisioningSubstateCertificateDeployed,
		CustomHTTPSProvisioningSubstateDeletingCertificate,
		CustomHTTPSProvisioningSubstateDeployingCertificate,
		CustomHTTPSProvisioningSubstateDomainControlValidationRequestApproved,
		CustomHTTPSProvisioningSubstateDomainControlValidationRequestRejected,
		CustomHTTPSProvisioningSubstateDomainControlValidationRequestTimedOut,
		CustomHTTPSProvisioningSubstateIssuingCertificate,
		CustomHTTPSProvisioningSubstatePendingDomainControlValidationREquestApproval,
		CustomHTTPSProvisioningSubstateSubmittingDomainControlValidationRequest,
	}
}

// ToPtr returns a *CustomHTTPSProvisioningSubstate pointing to the current value.
func (c CustomHTTPSProvisioningSubstate) ToPtr() *CustomHTTPSProvisioningSubstate {
	return &c
}

// CustomRuleEnabledState - Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
type CustomRuleEnabledState string

const (
	CustomRuleEnabledStateDisabled CustomRuleEnabledState = "Disabled"
	CustomRuleEnabledStateEnabled  CustomRuleEnabledState = "Enabled"
)

// PossibleCustomRuleEnabledStateValues returns the possible values for the CustomRuleEnabledState const type.
func PossibleCustomRuleEnabledStateValues() []CustomRuleEnabledState {
	return []CustomRuleEnabledState{
		CustomRuleEnabledStateDisabled,
		CustomRuleEnabledStateEnabled,
	}
}

// ToPtr returns a *CustomRuleEnabledState pointing to the current value.
func (c CustomRuleEnabledState) ToPtr() *CustomRuleEnabledState {
	return &c
}

// DeleteRule - Describes the action that shall be taken when the certificate is removed from Key Vault.
type DeleteRule string

const (
	DeleteRuleNoAction DeleteRule = "NoAction"
)

// PossibleDeleteRuleValues returns the possible values for the DeleteRule const type.
func PossibleDeleteRuleValues() []DeleteRule {
	return []DeleteRule{
		DeleteRuleNoAction,
	}
}

// ToPtr returns a *DeleteRule pointing to the current value.
func (c DeleteRule) ToPtr() *DeleteRule {
	return &c
}

// DeliveryRuleAction - The name of the action for the delivery rule.
type DeliveryRuleAction string

const (
	DeliveryRuleActionCacheExpiration      DeliveryRuleAction = "CacheExpiration"
	DeliveryRuleActionCacheKeyQueryString  DeliveryRuleAction = "CacheKeyQueryString"
	DeliveryRuleActionModifyRequestHeader  DeliveryRuleAction = "ModifyRequestHeader"
	DeliveryRuleActionModifyResponseHeader DeliveryRuleAction = "ModifyResponseHeader"
	DeliveryRuleActionOriginGroupOverride  DeliveryRuleAction = "OriginGroupOverride"
	DeliveryRuleActionURLRedirect          DeliveryRuleAction = "UrlRedirect"
	DeliveryRuleActionURLRewrite           DeliveryRuleAction = "UrlRewrite"
	DeliveryRuleActionURLSigning           DeliveryRuleAction = "UrlSigning"
)

// PossibleDeliveryRuleActionValues returns the possible values for the DeliveryRuleAction const type.
func PossibleDeliveryRuleActionValues() []DeliveryRuleAction {
	return []DeliveryRuleAction{
		DeliveryRuleActionCacheExpiration,
		DeliveryRuleActionCacheKeyQueryString,
		DeliveryRuleActionModifyRequestHeader,
		DeliveryRuleActionModifyResponseHeader,
		DeliveryRuleActionOriginGroupOverride,
		DeliveryRuleActionURLRedirect,
		DeliveryRuleActionURLRewrite,
		DeliveryRuleActionURLSigning,
	}
}

// ToPtr returns a *DeliveryRuleAction pointing to the current value.
func (c DeliveryRuleAction) ToPtr() *DeliveryRuleAction {
	return &c
}

type DeploymentStatus string

const (
	DeploymentStatusFailed     DeploymentStatus = "Failed"
	DeploymentStatusInProgress DeploymentStatus = "InProgress"
	DeploymentStatusNotStarted DeploymentStatus = "NotStarted"
	DeploymentStatusSucceeded  DeploymentStatus = "Succeeded"
)

// PossibleDeploymentStatusValues returns the possible values for the DeploymentStatus const type.
func PossibleDeploymentStatusValues() []DeploymentStatus {
	return []DeploymentStatus{
		DeploymentStatusFailed,
		DeploymentStatusInProgress,
		DeploymentStatusNotStarted,
		DeploymentStatusSucceeded,
	}
}

// ToPtr returns a *DeploymentStatus pointing to the current value.
func (c DeploymentStatus) ToPtr() *DeploymentStatus {
	return &c
}

// DestinationProtocol - Protocol to use for the redirect. The default value is MatchRequest
type DestinationProtocol string

const (
	DestinationProtocolHTTP         DestinationProtocol = "Http"
	DestinationProtocolHTTPS        DestinationProtocol = "Https"
	DestinationProtocolMatchRequest DestinationProtocol = "MatchRequest"
)

// PossibleDestinationProtocolValues returns the possible values for the DestinationProtocol const type.
func PossibleDestinationProtocolValues() []DestinationProtocol {
	return []DestinationProtocol{
		DestinationProtocolHTTP,
		DestinationProtocolHTTPS,
		DestinationProtocolMatchRequest,
	}
}

// ToPtr returns a *DestinationProtocol pointing to the current value.
func (c DestinationProtocol) ToPtr() *DestinationProtocol {
	return &c
}

// DomainValidationState - Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step. DCV stands for DomainControlValidation.
type DomainValidationState string

const (
	DomainValidationStateApproved            DomainValidationState = "Approved"
	DomainValidationStatePending             DomainValidationState = "Pending"
	DomainValidationStatePendingRevalidation DomainValidationState = "PendingRevalidation"
	DomainValidationStateSubmitting          DomainValidationState = "Submitting"
	DomainValidationStateTimedOut            DomainValidationState = "TimedOut"
	DomainValidationStateUnknown             DomainValidationState = "Unknown"
)

// PossibleDomainValidationStateValues returns the possible values for the DomainValidationState const type.
func PossibleDomainValidationStateValues() []DomainValidationState {
	return []DomainValidationState{
		DomainValidationStateApproved,
		DomainValidationStatePending,
		DomainValidationStatePendingRevalidation,
		DomainValidationStateSubmitting,
		DomainValidationStateTimedOut,
		DomainValidationStateUnknown,
	}
}

// ToPtr returns a *DomainValidationState pointing to the current value.
func (c DomainValidationState) ToPtr() *DomainValidationState {
	return &c
}

// EnabledState - Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
type EnabledState string

const (
	EnabledStateDisabled EnabledState = "Disabled"
	EnabledStateEnabled  EnabledState = "Enabled"
)

// PossibleEnabledStateValues returns the possible values for the EnabledState const type.
func PossibleEnabledStateValues() []EnabledState {
	return []EnabledState{
		EnabledStateDisabled,
		EnabledStateEnabled,
	}
}

// ToPtr returns a *EnabledState pointing to the current value.
func (c EnabledState) ToPtr() *EnabledState {
	return &c
}

// EndpointResourceState - Resource status of the endpoint.
type EndpointResourceState string

const (
	EndpointResourceStateCreating EndpointResourceState = "Creating"
	EndpointResourceStateDeleting EndpointResourceState = "Deleting"
	EndpointResourceStateRunning  EndpointResourceState = "Running"
	EndpointResourceStateStarting EndpointResourceState = "Starting"
	EndpointResourceStateStopped  EndpointResourceState = "Stopped"
	EndpointResourceStateStopping EndpointResourceState = "Stopping"
)

// PossibleEndpointResourceStateValues returns the possible values for the EndpointResourceState const type.
func PossibleEndpointResourceStateValues() []EndpointResourceState {
	return []EndpointResourceState{
		EndpointResourceStateCreating,
		EndpointResourceStateDeleting,
		EndpointResourceStateRunning,
		EndpointResourceStateStarting,
		EndpointResourceStateStopped,
		EndpointResourceStateStopping,
	}
}

// ToPtr returns a *EndpointResourceState pointing to the current value.
func (c EndpointResourceState) ToPtr() *EndpointResourceState {
	return &c
}

// ForwardingProtocol - Protocol this rule will use when forwarding traffic to backends.
type ForwardingProtocol string

const (
	ForwardingProtocolHTTPOnly     ForwardingProtocol = "HttpOnly"
	ForwardingProtocolHTTPSOnly    ForwardingProtocol = "HttpsOnly"
	ForwardingProtocolMatchRequest ForwardingProtocol = "MatchRequest"
)

// PossibleForwardingProtocolValues returns the possible values for the ForwardingProtocol const type.
func PossibleForwardingProtocolValues() []ForwardingProtocol {
	return []ForwardingProtocol{
		ForwardingProtocolHTTPOnly,
		ForwardingProtocolHTTPSOnly,
		ForwardingProtocolMatchRequest,
	}
}

// ToPtr returns a *ForwardingProtocol pointing to the current value.
func (c ForwardingProtocol) ToPtr() *ForwardingProtocol {
	return &c
}

// GeoFilterActions - Action of the geo filter, i.e. allow or block access.
type GeoFilterActions string

const (
	GeoFilterActionsBlock GeoFilterActions = "Block"
	GeoFilterActionsAllow GeoFilterActions = "Allow"
)

// PossibleGeoFilterActionsValues returns the possible values for the GeoFilterActions const type.
func PossibleGeoFilterActionsValues() []GeoFilterActions {
	return []GeoFilterActions{
		GeoFilterActionsBlock,
		GeoFilterActionsAllow,
	}
}

// ToPtr returns a *GeoFilterActions pointing to the current value.
func (c GeoFilterActions) ToPtr() *GeoFilterActions {
	return &c
}

// HTTPSRedirect - Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the
// first rule that gets executed.
type HTTPSRedirect string

const (
	HTTPSRedirectDisabled HTTPSRedirect = "Disabled"
	HTTPSRedirectEnabled  HTTPSRedirect = "Enabled"
)

// PossibleHTTPSRedirectValues returns the possible values for the HTTPSRedirect const type.
func PossibleHTTPSRedirectValues() []HTTPSRedirect {
	return []HTTPSRedirect{
		HTTPSRedirectDisabled,
		HTTPSRedirectEnabled,
	}
}

// ToPtr returns a *HTTPSRedirect pointing to the current value.
func (c HTTPSRedirect) ToPtr() *HTTPSRedirect {
	return &c
}

type HTTPVersionMatchConditionParametersODataType string

const (
	HTTPVersionMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleHTTPVersionConditionParameters HTTPVersionMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleHttpVersionConditionParameters"
)

// PossibleHTTPVersionMatchConditionParametersODataTypeValues returns the possible values for the HTTPVersionMatchConditionParametersODataType const type.
func PossibleHTTPVersionMatchConditionParametersODataTypeValues() []HTTPVersionMatchConditionParametersODataType {
	return []HTTPVersionMatchConditionParametersODataType{
		HTTPVersionMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleHTTPVersionConditionParameters,
	}
}

// ToPtr returns a *HTTPVersionMatchConditionParametersODataType pointing to the current value.
func (c HTTPVersionMatchConditionParametersODataType) ToPtr() *HTTPVersionMatchConditionParametersODataType {
	return &c
}

// HTTPVersionOperator - Describes operator to be matched
type HTTPVersionOperator string

const (
	HTTPVersionOperatorEqual HTTPVersionOperator = "Equal"
)

// PossibleHTTPVersionOperatorValues returns the possible values for the HTTPVersionOperator const type.
func PossibleHTTPVersionOperatorValues() []HTTPVersionOperator {
	return []HTTPVersionOperator{
		HTTPVersionOperatorEqual,
	}
}

// ToPtr returns a *HTTPVersionOperator pointing to the current value.
func (c HTTPVersionOperator) ToPtr() *HTTPVersionOperator {
	return &c
}

// HeaderAction - Action to perform
type HeaderAction string

const (
	HeaderActionAppend    HeaderAction = "Append"
	HeaderActionDelete    HeaderAction = "Delete"
	HeaderActionOverwrite HeaderAction = "Overwrite"
)

// PossibleHeaderActionValues returns the possible values for the HeaderAction const type.
func PossibleHeaderActionValues() []HeaderAction {
	return []HeaderAction{
		HeaderActionAppend,
		HeaderActionDelete,
		HeaderActionOverwrite,
	}
}

// ToPtr returns a *HeaderAction pointing to the current value.
func (c HeaderAction) ToPtr() *HeaderAction {
	return &c
}

type HeaderActionParametersODataType string

const (
	HeaderActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleHeaderActionParameters HeaderActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleHeaderActionParameters"
)

// PossibleHeaderActionParametersODataTypeValues returns the possible values for the HeaderActionParametersODataType const type.
func PossibleHeaderActionParametersODataTypeValues() []HeaderActionParametersODataType {
	return []HeaderActionParametersODataType{
		HeaderActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleHeaderActionParameters,
	}
}

// ToPtr returns a *HeaderActionParametersODataType pointing to the current value.
func (c HeaderActionParametersODataType) ToPtr() *HeaderActionParametersODataType {
	return &c
}

// HealthProbeRequestType - The type of health probe request that is made.
type HealthProbeRequestType string

const (
	HealthProbeRequestTypeNotSet HealthProbeRequestType = "NotSet"
	HealthProbeRequestTypeGET    HealthProbeRequestType = "GET"
	HealthProbeRequestTypeHEAD   HealthProbeRequestType = "HEAD"
)

// PossibleHealthProbeRequestTypeValues returns the possible values for the HealthProbeRequestType const type.
func PossibleHealthProbeRequestTypeValues() []HealthProbeRequestType {
	return []HealthProbeRequestType{
		HealthProbeRequestTypeNotSet,
		HealthProbeRequestTypeGET,
		HealthProbeRequestTypeHEAD,
	}
}

// ToPtr returns a *HealthProbeRequestType pointing to the current value.
func (c HealthProbeRequestType) ToPtr() *HealthProbeRequestType {
	return &c
}

// IdentityType - The type of identity that creates/modifies resources
type IdentityType string

const (
	IdentityTypeApplication     IdentityType = "application"
	IdentityTypeKey             IdentityType = "key"
	IdentityTypeManagedIdentity IdentityType = "managedIdentity"
	IdentityTypeUser            IdentityType = "user"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeApplication,
		IdentityTypeKey,
		IdentityTypeManagedIdentity,
		IdentityTypeUser,
	}
}

// ToPtr returns a *IdentityType pointing to the current value.
func (c IdentityType) ToPtr() *IdentityType {
	return &c
}

type IsDeviceMatchConditionParametersMatchValuesItem string

const (
	IsDeviceMatchConditionParametersMatchValuesItemDesktop IsDeviceMatchConditionParametersMatchValuesItem = "Desktop"
	IsDeviceMatchConditionParametersMatchValuesItemMobile  IsDeviceMatchConditionParametersMatchValuesItem = "Mobile"
)

// PossibleIsDeviceMatchConditionParametersMatchValuesItemValues returns the possible values for the IsDeviceMatchConditionParametersMatchValuesItem const type.
func PossibleIsDeviceMatchConditionParametersMatchValuesItemValues() []IsDeviceMatchConditionParametersMatchValuesItem {
	return []IsDeviceMatchConditionParametersMatchValuesItem{
		IsDeviceMatchConditionParametersMatchValuesItemDesktop,
		IsDeviceMatchConditionParametersMatchValuesItemMobile,
	}
}

// ToPtr returns a *IsDeviceMatchConditionParametersMatchValuesItem pointing to the current value.
func (c IsDeviceMatchConditionParametersMatchValuesItem) ToPtr() *IsDeviceMatchConditionParametersMatchValuesItem {
	return &c
}

type IsDeviceMatchConditionParametersODataType string

const (
	IsDeviceMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleIsDeviceConditionParameters IsDeviceMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleIsDeviceConditionParameters"
)

// PossibleIsDeviceMatchConditionParametersODataTypeValues returns the possible values for the IsDeviceMatchConditionParametersODataType const type.
func PossibleIsDeviceMatchConditionParametersODataTypeValues() []IsDeviceMatchConditionParametersODataType {
	return []IsDeviceMatchConditionParametersODataType{
		IsDeviceMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleIsDeviceConditionParameters,
	}
}

// ToPtr returns a *IsDeviceMatchConditionParametersODataType pointing to the current value.
func (c IsDeviceMatchConditionParametersODataType) ToPtr() *IsDeviceMatchConditionParametersODataType {
	return &c
}

// IsDeviceOperator - Describes operator to be matched
type IsDeviceOperator string

const (
	IsDeviceOperatorEqual IsDeviceOperator = "Equal"
)

// PossibleIsDeviceOperatorValues returns the possible values for the IsDeviceOperator const type.
func PossibleIsDeviceOperatorValues() []IsDeviceOperator {
	return []IsDeviceOperator{
		IsDeviceOperatorEqual,
	}
}

// ToPtr returns a *IsDeviceOperator pointing to the current value.
func (c IsDeviceOperator) ToPtr() *IsDeviceOperator {
	return &c
}

type KeyVaultCertificateSourceParametersODataType string

const (
	KeyVaultCertificateSourceParametersODataTypeMicrosoftAzureCdnModelsKeyVaultCertificateSourceParameters KeyVaultCertificateSourceParametersODataType = "#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters"
)

// PossibleKeyVaultCertificateSourceParametersODataTypeValues returns the possible values for the KeyVaultCertificateSourceParametersODataType const type.
func PossibleKeyVaultCertificateSourceParametersODataTypeValues() []KeyVaultCertificateSourceParametersODataType {
	return []KeyVaultCertificateSourceParametersODataType{
		KeyVaultCertificateSourceParametersODataTypeMicrosoftAzureCdnModelsKeyVaultCertificateSourceParameters,
	}
}

// ToPtr returns a *KeyVaultCertificateSourceParametersODataType pointing to the current value.
func (c KeyVaultCertificateSourceParametersODataType) ToPtr() *KeyVaultCertificateSourceParametersODataType {
	return &c
}

type KeyVaultSigningKeyParametersODataType string

const (
	KeyVaultSigningKeyParametersODataTypeMicrosoftAzureCdnModelsKeyVaultSigningKeyParameters KeyVaultSigningKeyParametersODataType = "#Microsoft.Azure.Cdn.Models.KeyVaultSigningKeyParameters"
)

// PossibleKeyVaultSigningKeyParametersODataTypeValues returns the possible values for the KeyVaultSigningKeyParametersODataType const type.
func PossibleKeyVaultSigningKeyParametersODataTypeValues() []KeyVaultSigningKeyParametersODataType {
	return []KeyVaultSigningKeyParametersODataType{
		KeyVaultSigningKeyParametersODataTypeMicrosoftAzureCdnModelsKeyVaultSigningKeyParameters,
	}
}

// ToPtr returns a *KeyVaultSigningKeyParametersODataType pointing to the current value.
func (c KeyVaultSigningKeyParametersODataType) ToPtr() *KeyVaultSigningKeyParametersODataType {
	return &c
}

// LinkToDefaultDomain - whether this route will be linked to the default endpoint domain.
type LinkToDefaultDomain string

const (
	LinkToDefaultDomainDisabled LinkToDefaultDomain = "Disabled"
	LinkToDefaultDomainEnabled  LinkToDefaultDomain = "Enabled"
)

// PossibleLinkToDefaultDomainValues returns the possible values for the LinkToDefaultDomain const type.
func PossibleLinkToDefaultDomainValues() []LinkToDefaultDomain {
	return []LinkToDefaultDomain{
		LinkToDefaultDomainDisabled,
		LinkToDefaultDomainEnabled,
	}
}

// ToPtr returns a *LinkToDefaultDomain pointing to the current value.
func (c LinkToDefaultDomain) ToPtr() *LinkToDefaultDomain {
	return &c
}

type LogMetric string

const (
	LogMetricClientRequestBandwidth LogMetric = "clientRequestBandwidth"
	LogMetricClientRequestCount     LogMetric = "clientRequestCount"
	LogMetricClientRequestTraffic   LogMetric = "clientRequestTraffic"
	LogMetricOriginRequestBandwidth LogMetric = "originRequestBandwidth"
	LogMetricOriginRequestTraffic   LogMetric = "originRequestTraffic"
	LogMetricTotalLatency           LogMetric = "totalLatency"
)

// PossibleLogMetricValues returns the possible values for the LogMetric const type.
func PossibleLogMetricValues() []LogMetric {
	return []LogMetric{
		LogMetricClientRequestBandwidth,
		LogMetricClientRequestCount,
		LogMetricClientRequestTraffic,
		LogMetricOriginRequestBandwidth,
		LogMetricOriginRequestTraffic,
		LogMetricTotalLatency,
	}
}

// ToPtr returns a *LogMetric pointing to the current value.
func (c LogMetric) ToPtr() *LogMetric {
	return &c
}

type LogMetricsGranularity string

const (
	LogMetricsGranularityP1D  LogMetricsGranularity = "P1D"
	LogMetricsGranularityPT1H LogMetricsGranularity = "PT1H"
	LogMetricsGranularityPT5M LogMetricsGranularity = "PT5M"
)

// PossibleLogMetricsGranularityValues returns the possible values for the LogMetricsGranularity const type.
func PossibleLogMetricsGranularityValues() []LogMetricsGranularity {
	return []LogMetricsGranularity{
		LogMetricsGranularityP1D,
		LogMetricsGranularityPT1H,
		LogMetricsGranularityPT5M,
	}
}

// ToPtr returns a *LogMetricsGranularity pointing to the current value.
func (c LogMetricsGranularity) ToPtr() *LogMetricsGranularity {
	return &c
}

type LogMetricsGroupBy string

const (
	LogMetricsGroupByCacheStatus    LogMetricsGroupBy = "cacheStatus"
	LogMetricsGroupByCountry        LogMetricsGroupBy = "country"
	LogMetricsGroupByCustomDomain   LogMetricsGroupBy = "customDomain"
	LogMetricsGroupByHTTPStatusCode LogMetricsGroupBy = "httpStatusCode"
	LogMetricsGroupByProtocol       LogMetricsGroupBy = "protocol"
)

// PossibleLogMetricsGroupByValues returns the possible values for the LogMetricsGroupBy const type.
func PossibleLogMetricsGroupByValues() []LogMetricsGroupBy {
	return []LogMetricsGroupBy{
		LogMetricsGroupByCacheStatus,
		LogMetricsGroupByCountry,
		LogMetricsGroupByCustomDomain,
		LogMetricsGroupByHTTPStatusCode,
		LogMetricsGroupByProtocol,
	}
}

// ToPtr returns a *LogMetricsGroupBy pointing to the current value.
func (c LogMetricsGroupBy) ToPtr() *LogMetricsGroupBy {
	return &c
}

type LogRanking string

const (
	LogRankingBrowser         LogRanking = "browser"
	LogRankingCountryOrRegion LogRanking = "countryOrRegion"
	LogRankingReferrer        LogRanking = "referrer"
	LogRankingURL             LogRanking = "url"
	LogRankingUserAgent       LogRanking = "userAgent"
)

// PossibleLogRankingValues returns the possible values for the LogRanking const type.
func PossibleLogRankingValues() []LogRanking {
	return []LogRanking{
		LogRankingBrowser,
		LogRankingCountryOrRegion,
		LogRankingReferrer,
		LogRankingURL,
		LogRankingUserAgent,
	}
}

// ToPtr returns a *LogRanking pointing to the current value.
func (c LogRanking) ToPtr() *LogRanking {
	return &c
}

type LogRankingMetric string

const (
	LogRankingMetricClientRequestCount   LogRankingMetric = "clientRequestCount"
	LogRankingMetricClientRequestTraffic LogRankingMetric = "clientRequestTraffic"
	LogRankingMetricErrorCount           LogRankingMetric = "errorCount"
	LogRankingMetricHitCount             LogRankingMetric = "hitCount"
	LogRankingMetricMissCount            LogRankingMetric = "missCount"
	LogRankingMetricUserErrorCount       LogRankingMetric = "userErrorCount"
)

// PossibleLogRankingMetricValues returns the possible values for the LogRankingMetric const type.
func PossibleLogRankingMetricValues() []LogRankingMetric {
	return []LogRankingMetric{
		LogRankingMetricClientRequestCount,
		LogRankingMetricClientRequestTraffic,
		LogRankingMetricErrorCount,
		LogRankingMetricHitCount,
		LogRankingMetricMissCount,
		LogRankingMetricUserErrorCount,
	}
}

// ToPtr returns a *LogRankingMetric pointing to the current value.
func (c LogRankingMetric) ToPtr() *LogRankingMetric {
	return &c
}

// ManagedRuleEnabledState - Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
type ManagedRuleEnabledState string

const (
	ManagedRuleEnabledStateDisabled ManagedRuleEnabledState = "Disabled"
	ManagedRuleEnabledStateEnabled  ManagedRuleEnabledState = "Enabled"
)

// PossibleManagedRuleEnabledStateValues returns the possible values for the ManagedRuleEnabledState const type.
func PossibleManagedRuleEnabledStateValues() []ManagedRuleEnabledState {
	return []ManagedRuleEnabledState{
		ManagedRuleEnabledStateDisabled,
		ManagedRuleEnabledStateEnabled,
	}
}

// ToPtr returns a *ManagedRuleEnabledState pointing to the current value.
func (c ManagedRuleEnabledState) ToPtr() *ManagedRuleEnabledState {
	return &c
}

// MatchProcessingBehavior - If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
type MatchProcessingBehavior string

const (
	MatchProcessingBehaviorContinue MatchProcessingBehavior = "Continue"
	MatchProcessingBehaviorStop     MatchProcessingBehavior = "Stop"
)

// PossibleMatchProcessingBehaviorValues returns the possible values for the MatchProcessingBehavior const type.
func PossibleMatchProcessingBehaviorValues() []MatchProcessingBehavior {
	return []MatchProcessingBehavior{
		MatchProcessingBehaviorContinue,
		MatchProcessingBehaviorStop,
	}
}

// ToPtr returns a *MatchProcessingBehavior pointing to the current value.
func (c MatchProcessingBehavior) ToPtr() *MatchProcessingBehavior {
	return &c
}

// MatchVariable - The name of the condition for the delivery rule.
type MatchVariable string

const (
	MatchVariableCookies          MatchVariable = "Cookies"
	MatchVariableHTTPVersion      MatchVariable = "HttpVersion"
	MatchVariableIsDevice         MatchVariable = "IsDevice"
	MatchVariablePostArgs         MatchVariable = "PostArgs"
	MatchVariableQueryString      MatchVariable = "QueryString"
	MatchVariableRemoteAddr       MatchVariable = "RemoteAddr"
	MatchVariableRemoteAddress    MatchVariable = "RemoteAddress"
	MatchVariableRequestBody      MatchVariable = "RequestBody"
	MatchVariableRequestHeader    MatchVariable = "RequestHeader"
	MatchVariableRequestMethod    MatchVariable = "RequestMethod"
	MatchVariableRequestScheme    MatchVariable = "RequestScheme"
	MatchVariableRequestURI       MatchVariable = "RequestUri"
	MatchVariableSocketAddr       MatchVariable = "SocketAddr"
	MatchVariableURLFileExtension MatchVariable = "UrlFileExtension"
	MatchVariableURLFileName      MatchVariable = "UrlFileName"
	MatchVariableURLPath          MatchVariable = "UrlPath"
)

// PossibleMatchVariableValues returns the possible values for the MatchVariable const type.
func PossibleMatchVariableValues() []MatchVariable {
	return []MatchVariable{
		MatchVariableCookies,
		MatchVariableHTTPVersion,
		MatchVariableIsDevice,
		MatchVariablePostArgs,
		MatchVariableQueryString,
		MatchVariableRemoteAddr,
		MatchVariableRemoteAddress,
		MatchVariableRequestBody,
		MatchVariableRequestHeader,
		MatchVariableRequestMethod,
		MatchVariableRequestScheme,
		MatchVariableRequestURI,
		MatchVariableSocketAddr,
		MatchVariableURLFileExtension,
		MatchVariableURLFileName,
		MatchVariableURLPath,
	}
}

// ToPtr returns a *MatchVariable pointing to the current value.
func (c MatchVariable) ToPtr() *MatchVariable {
	return &c
}

type MetricsResponseGranularity string

const (
	MetricsResponseGranularityP1D  MetricsResponseGranularity = "P1D"
	MetricsResponseGranularityPT1H MetricsResponseGranularity = "PT1H"
	MetricsResponseGranularityPT5M MetricsResponseGranularity = "PT5M"
)

// PossibleMetricsResponseGranularityValues returns the possible values for the MetricsResponseGranularity const type.
func PossibleMetricsResponseGranularityValues() []MetricsResponseGranularity {
	return []MetricsResponseGranularity{
		MetricsResponseGranularityP1D,
		MetricsResponseGranularityPT1H,
		MetricsResponseGranularityPT5M,
	}
}

// ToPtr returns a *MetricsResponseGranularity pointing to the current value.
func (c MetricsResponseGranularity) ToPtr() *MetricsResponseGranularity {
	return &c
}

type MetricsResponseSeriesItemUnit string

const (
	MetricsResponseSeriesItemUnitBitsPerSecond MetricsResponseSeriesItemUnit = "bitsPerSecond"
	MetricsResponseSeriesItemUnitBytes         MetricsResponseSeriesItemUnit = "bytes"
	MetricsResponseSeriesItemUnitCount         MetricsResponseSeriesItemUnit = "count"
)

// PossibleMetricsResponseSeriesItemUnitValues returns the possible values for the MetricsResponseSeriesItemUnit const type.
func PossibleMetricsResponseSeriesItemUnitValues() []MetricsResponseSeriesItemUnit {
	return []MetricsResponseSeriesItemUnit{
		MetricsResponseSeriesItemUnitBitsPerSecond,
		MetricsResponseSeriesItemUnitBytes,
		MetricsResponseSeriesItemUnitCount,
	}
}

// ToPtr returns a *MetricsResponseSeriesItemUnit pointing to the current value.
func (c MetricsResponseSeriesItemUnit) ToPtr() *MetricsResponseSeriesItemUnit {
	return &c
}

// MinimumTLSVersion - TLS protocol version that will be used for Https
type MinimumTLSVersion string

const (
	MinimumTLSVersionNone  MinimumTLSVersion = "None"
	MinimumTLSVersionTLS10 MinimumTLSVersion = "TLS10"
	MinimumTLSVersionTLS12 MinimumTLSVersion = "TLS12"
)

// PossibleMinimumTLSVersionValues returns the possible values for the MinimumTLSVersion const type.
func PossibleMinimumTLSVersionValues() []MinimumTLSVersion {
	return []MinimumTLSVersion{
		MinimumTLSVersionNone,
		MinimumTLSVersionTLS10,
		MinimumTLSVersionTLS12,
	}
}

// ToPtr returns a *MinimumTLSVersion pointing to the current value.
func (c MinimumTLSVersion) ToPtr() *MinimumTLSVersion {
	return &c
}

// Operator - Describes operator to be matched
type Operator string

const (
	OperatorAny                Operator = "Any"
	OperatorBeginsWith         Operator = "BeginsWith"
	OperatorContains           Operator = "Contains"
	OperatorEndsWith           Operator = "EndsWith"
	OperatorEqual              Operator = "Equal"
	OperatorGeoMatch           Operator = "GeoMatch"
	OperatorGreaterThan        Operator = "GreaterThan"
	OperatorGreaterThanOrEqual Operator = "GreaterThanOrEqual"
	OperatorIPMatch            Operator = "IPMatch"
	OperatorLessThan           Operator = "LessThan"
	OperatorLessThanOrEqual    Operator = "LessThanOrEqual"
	OperatorRegEx              Operator = "RegEx"
)

// PossibleOperatorValues returns the possible values for the Operator const type.
func PossibleOperatorValues() []Operator {
	return []Operator{
		OperatorAny,
		OperatorBeginsWith,
		OperatorContains,
		OperatorEndsWith,
		OperatorEqual,
		OperatorGeoMatch,
		OperatorGreaterThan,
		OperatorGreaterThanOrEqual,
		OperatorIPMatch,
		OperatorLessThan,
		OperatorLessThanOrEqual,
		OperatorRegEx,
	}
}

// ToPtr returns a *Operator pointing to the current value.
func (c Operator) ToPtr() *Operator {
	return &c
}

// OptimizationType - Specifies what scenario the customer wants this CDN endpoint to optimize, e.g. Download, Media services. With this information we
// can apply scenario driven optimization.
type OptimizationType string

const (
	OptimizationTypeDynamicSiteAcceleration     OptimizationType = "DynamicSiteAcceleration"
	OptimizationTypeGeneralMediaStreaming       OptimizationType = "GeneralMediaStreaming"
	OptimizationTypeGeneralWebDelivery          OptimizationType = "GeneralWebDelivery"
	OptimizationTypeLargeFileDownload           OptimizationType = "LargeFileDownload"
	OptimizationTypeVideoOnDemandMediaStreaming OptimizationType = "VideoOnDemandMediaStreaming"
)

// PossibleOptimizationTypeValues returns the possible values for the OptimizationType const type.
func PossibleOptimizationTypeValues() []OptimizationType {
	return []OptimizationType{
		OptimizationTypeDynamicSiteAcceleration,
		OptimizationTypeGeneralMediaStreaming,
		OptimizationTypeGeneralWebDelivery,
		OptimizationTypeLargeFileDownload,
		OptimizationTypeVideoOnDemandMediaStreaming,
	}
}

// ToPtr returns a *OptimizationType pointing to the current value.
func (c OptimizationType) ToPtr() *OptimizationType {
	return &c
}

type OriginGroupOverrideActionParametersODataType string

const (
	OriginGroupOverrideActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleOriginGroupOverrideActionParameters OriginGroupOverrideActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleOriginGroupOverrideActionParameters"
)

// PossibleOriginGroupOverrideActionParametersODataTypeValues returns the possible values for the OriginGroupOverrideActionParametersODataType const type.
func PossibleOriginGroupOverrideActionParametersODataTypeValues() []OriginGroupOverrideActionParametersODataType {
	return []OriginGroupOverrideActionParametersODataType{
		OriginGroupOverrideActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleOriginGroupOverrideActionParameters,
	}
}

// ToPtr returns a *OriginGroupOverrideActionParametersODataType pointing to the current value.
func (c OriginGroupOverrideActionParametersODataType) ToPtr() *OriginGroupOverrideActionParametersODataType {
	return &c
}

// OriginGroupResourceState - Resource status of the origin group.
type OriginGroupResourceState string

const (
	OriginGroupResourceStateActive   OriginGroupResourceState = "Active"
	OriginGroupResourceStateCreating OriginGroupResourceState = "Creating"
	OriginGroupResourceStateDeleting OriginGroupResourceState = "Deleting"
)

// PossibleOriginGroupResourceStateValues returns the possible values for the OriginGroupResourceState const type.
func PossibleOriginGroupResourceStateValues() []OriginGroupResourceState {
	return []OriginGroupResourceState{
		OriginGroupResourceStateActive,
		OriginGroupResourceStateCreating,
		OriginGroupResourceStateDeleting,
	}
}

// ToPtr returns a *OriginGroupResourceState pointing to the current value.
func (c OriginGroupResourceState) ToPtr() *OriginGroupResourceState {
	return &c
}

// OriginResourceState - Resource status of the origin.
type OriginResourceState string

const (
	OriginResourceStateActive   OriginResourceState = "Active"
	OriginResourceStateCreating OriginResourceState = "Creating"
	OriginResourceStateDeleting OriginResourceState = "Deleting"
)

// PossibleOriginResourceStateValues returns the possible values for the OriginResourceState const type.
func PossibleOriginResourceStateValues() []OriginResourceState {
	return []OriginResourceState{
		OriginResourceStateActive,
		OriginResourceStateCreating,
		OriginResourceStateDeleting,
	}
}

// ToPtr returns a *OriginResourceState pointing to the current value.
func (c OriginResourceState) ToPtr() *OriginResourceState {
	return &c
}

// ParamIndicator - Indicates the purpose of the parameter
type ParamIndicator string

const (
	ParamIndicatorExpires   ParamIndicator = "Expires"
	ParamIndicatorKeyID     ParamIndicator = "KeyId"
	ParamIndicatorSignature ParamIndicator = "Signature"
)

// PossibleParamIndicatorValues returns the possible values for the ParamIndicator const type.
func PossibleParamIndicatorValues() []ParamIndicator {
	return []ParamIndicator{
		ParamIndicatorExpires,
		ParamIndicatorKeyID,
		ParamIndicatorSignature,
	}
}

// ToPtr returns a *ParamIndicator pointing to the current value.
func (c ParamIndicator) ToPtr() *ParamIndicator {
	return &c
}

// PolicyEnabledState - describes if the policy is in enabled state or disabled state
type PolicyEnabledState string

const (
	PolicyEnabledStateDisabled PolicyEnabledState = "Disabled"
	PolicyEnabledStateEnabled  PolicyEnabledState = "Enabled"
)

// PossiblePolicyEnabledStateValues returns the possible values for the PolicyEnabledState const type.
func PossiblePolicyEnabledStateValues() []PolicyEnabledState {
	return []PolicyEnabledState{
		PolicyEnabledStateDisabled,
		PolicyEnabledStateEnabled,
	}
}

// ToPtr returns a *PolicyEnabledState pointing to the current value.
func (c PolicyEnabledState) ToPtr() *PolicyEnabledState {
	return &c
}

// PolicyMode - Describes if it is in detection mode or prevention mode at policy level.
type PolicyMode string

const (
	PolicyModeDetection  PolicyMode = "Detection"
	PolicyModePrevention PolicyMode = "Prevention"
)

// PossiblePolicyModeValues returns the possible values for the PolicyMode const type.
func PossiblePolicyModeValues() []PolicyMode {
	return []PolicyMode{
		PolicyModeDetection,
		PolicyModePrevention,
	}
}

// ToPtr returns a *PolicyMode pointing to the current value.
func (c PolicyMode) ToPtr() *PolicyMode {
	return &c
}

// PolicyResourceState - Resource status of the policy.
type PolicyResourceState string

const (
	PolicyResourceStateCreating  PolicyResourceState = "Creating"
	PolicyResourceStateDeleting  PolicyResourceState = "Deleting"
	PolicyResourceStateDisabled  PolicyResourceState = "Disabled"
	PolicyResourceStateDisabling PolicyResourceState = "Disabling"
	PolicyResourceStateEnabled   PolicyResourceState = "Enabled"
	PolicyResourceStateEnabling  PolicyResourceState = "Enabling"
)

// PossiblePolicyResourceStateValues returns the possible values for the PolicyResourceState const type.
func PossiblePolicyResourceStateValues() []PolicyResourceState {
	return []PolicyResourceState{
		PolicyResourceStateCreating,
		PolicyResourceStateDeleting,
		PolicyResourceStateDisabled,
		PolicyResourceStateDisabling,
		PolicyResourceStateEnabled,
		PolicyResourceStateEnabling,
	}
}

// ToPtr returns a *PolicyResourceState pointing to the current value.
func (c PolicyResourceState) ToPtr() *PolicyResourceState {
	return &c
}

// PolicySettingsDefaultCustomBlockResponseStatusCode - If the action type is block, this field defines the default customer overridable http response status
// code.
type PolicySettingsDefaultCustomBlockResponseStatusCode int32

const (
	PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredFive       PolicySettingsDefaultCustomBlockResponseStatusCode = 405
	PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredSix        PolicySettingsDefaultCustomBlockResponseStatusCode = 406
	PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredThree      PolicySettingsDefaultCustomBlockResponseStatusCode = 403
	PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredTwentyNine PolicySettingsDefaultCustomBlockResponseStatusCode = 429
	PolicySettingsDefaultCustomBlockResponseStatusCodeTwoHundred            PolicySettingsDefaultCustomBlockResponseStatusCode = 200
)

// PossiblePolicySettingsDefaultCustomBlockResponseStatusCodeValues returns the possible values for the PolicySettingsDefaultCustomBlockResponseStatusCode const type.
func PossiblePolicySettingsDefaultCustomBlockResponseStatusCodeValues() []PolicySettingsDefaultCustomBlockResponseStatusCode {
	return []PolicySettingsDefaultCustomBlockResponseStatusCode{
		PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredFive,
		PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredSix,
		PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredThree,
		PolicySettingsDefaultCustomBlockResponseStatusCodeFourHundredTwentyNine,
		PolicySettingsDefaultCustomBlockResponseStatusCodeTwoHundred,
	}
}

// ToPtr returns a *PolicySettingsDefaultCustomBlockResponseStatusCode pointing to the current value.
func (c PolicySettingsDefaultCustomBlockResponseStatusCode) ToPtr() *PolicySettingsDefaultCustomBlockResponseStatusCode {
	return &c
}

type PostArgsMatchConditionParametersODataType string

const (
	PostArgsMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRulePostArgsConditionParameters PostArgsMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRulePostArgsConditionParameters"
)

// PossiblePostArgsMatchConditionParametersODataTypeValues returns the possible values for the PostArgsMatchConditionParametersODataType const type.
func PossiblePostArgsMatchConditionParametersODataTypeValues() []PostArgsMatchConditionParametersODataType {
	return []PostArgsMatchConditionParametersODataType{
		PostArgsMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRulePostArgsConditionParameters,
	}
}

// ToPtr returns a *PostArgsMatchConditionParametersODataType pointing to the current value.
func (c PostArgsMatchConditionParametersODataType) ToPtr() *PostArgsMatchConditionParametersODataType {
	return &c
}

// PostArgsOperator - Describes operator to be matched
type PostArgsOperator string

const (
	PostArgsOperatorAny                PostArgsOperator = "Any"
	PostArgsOperatorBeginsWith         PostArgsOperator = "BeginsWith"
	PostArgsOperatorContains           PostArgsOperator = "Contains"
	PostArgsOperatorEndsWith           PostArgsOperator = "EndsWith"
	PostArgsOperatorEqual              PostArgsOperator = "Equal"
	PostArgsOperatorGreaterThan        PostArgsOperator = "GreaterThan"
	PostArgsOperatorGreaterThanOrEqual PostArgsOperator = "GreaterThanOrEqual"
	PostArgsOperatorLessThan           PostArgsOperator = "LessThan"
	PostArgsOperatorLessThanOrEqual    PostArgsOperator = "LessThanOrEqual"
	PostArgsOperatorRegEx              PostArgsOperator = "RegEx"
)

// PossiblePostArgsOperatorValues returns the possible values for the PostArgsOperator const type.
func PossiblePostArgsOperatorValues() []PostArgsOperator {
	return []PostArgsOperator{
		PostArgsOperatorAny,
		PostArgsOperatorBeginsWith,
		PostArgsOperatorContains,
		PostArgsOperatorEndsWith,
		PostArgsOperatorEqual,
		PostArgsOperatorGreaterThan,
		PostArgsOperatorGreaterThanOrEqual,
		PostArgsOperatorLessThan,
		PostArgsOperatorLessThanOrEqual,
		PostArgsOperatorRegEx,
	}
}

// ToPtr returns a *PostArgsOperator pointing to the current value.
func (c PostArgsOperator) ToPtr() *PostArgsOperator {
	return &c
}

// PrivateEndpointStatus - The approval status for the connection to the Private Link
type PrivateEndpointStatus string

const (
	PrivateEndpointStatusApproved     PrivateEndpointStatus = "Approved"
	PrivateEndpointStatusDisconnected PrivateEndpointStatus = "Disconnected"
	PrivateEndpointStatusPending      PrivateEndpointStatus = "Pending"
	PrivateEndpointStatusRejected     PrivateEndpointStatus = "Rejected"
	PrivateEndpointStatusTimeout      PrivateEndpointStatus = "Timeout"
)

// PossiblePrivateEndpointStatusValues returns the possible values for the PrivateEndpointStatus const type.
func PossiblePrivateEndpointStatusValues() []PrivateEndpointStatus {
	return []PrivateEndpointStatus{
		PrivateEndpointStatusApproved,
		PrivateEndpointStatusDisconnected,
		PrivateEndpointStatusPending,
		PrivateEndpointStatusRejected,
		PrivateEndpointStatusTimeout,
	}
}

// ToPtr returns a *PrivateEndpointStatus pointing to the current value.
func (c PrivateEndpointStatus) ToPtr() *PrivateEndpointStatus {
	return &c
}

// ProbeProtocol - Protocol to use for health probe.
type ProbeProtocol string

const (
	ProbeProtocolNotSet ProbeProtocol = "NotSet"
	ProbeProtocolHTTP   ProbeProtocol = "Http"
	ProbeProtocolHTTPS  ProbeProtocol = "Https"
)

// PossibleProbeProtocolValues returns the possible values for the ProbeProtocol const type.
func PossibleProbeProtocolValues() []ProbeProtocol {
	return []ProbeProtocol{
		ProbeProtocolNotSet,
		ProbeProtocolHTTP,
		ProbeProtocolHTTPS,
	}
}

// ToPtr returns a *ProbeProtocol pointing to the current value.
func (c ProbeProtocol) ToPtr() *ProbeProtocol {
	return &c
}

// ProfileResourceState - Resource status of the profile.
type ProfileResourceState string

const (
	ProfileResourceStateActive   ProfileResourceState = "Active"
	ProfileResourceStateCreating ProfileResourceState = "Creating"
	ProfileResourceStateDeleting ProfileResourceState = "Deleting"
	ProfileResourceStateDisabled ProfileResourceState = "Disabled"
)

// PossibleProfileResourceStateValues returns the possible values for the ProfileResourceState const type.
func PossibleProfileResourceStateValues() []ProfileResourceState {
	return []ProfileResourceState{
		ProfileResourceStateActive,
		ProfileResourceStateCreating,
		ProfileResourceStateDeleting,
		ProfileResourceStateDisabled,
	}
}

// ToPtr returns a *ProfileResourceState pointing to the current value.
func (c ProfileResourceState) ToPtr() *ProfileResourceState {
	return &c
}

// ProtocolType - Defines the TLS extension protocol that is used for secure delivery.
type ProtocolType string

const (
	ProtocolTypeIPBased              ProtocolType = "IPBased"
	ProtocolTypeServerNameIndication ProtocolType = "ServerNameIndication"
)

// PossibleProtocolTypeValues returns the possible values for the ProtocolType const type.
func PossibleProtocolTypeValues() []ProtocolType {
	return []ProtocolType{
		ProtocolTypeIPBased,
		ProtocolTypeServerNameIndication,
	}
}

// ToPtr returns a *ProtocolType pointing to the current value.
func (c ProtocolType) ToPtr() *ProtocolType {
	return &c
}

// ProvisioningState - Provisioning state of the WebApplicationFirewallPolicy.
type ProvisioningState string

const (
	ProvisioningStateCreating  ProvisioningState = "Creating"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCreating,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

// ToPtr returns a *ProvisioningState pointing to the current value.
func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// QueryStringBehavior - Caching behavior for the requests
type QueryStringBehavior string

const (
	QueryStringBehaviorExclude    QueryStringBehavior = "Exclude"
	QueryStringBehaviorExcludeAll QueryStringBehavior = "ExcludeAll"
	QueryStringBehaviorInclude    QueryStringBehavior = "Include"
	QueryStringBehaviorIncludeAll QueryStringBehavior = "IncludeAll"
)

// PossibleQueryStringBehaviorValues returns the possible values for the QueryStringBehavior const type.
func PossibleQueryStringBehaviorValues() []QueryStringBehavior {
	return []QueryStringBehavior{
		QueryStringBehaviorExclude,
		QueryStringBehaviorExcludeAll,
		QueryStringBehaviorInclude,
		QueryStringBehaviorIncludeAll,
	}
}

// ToPtr returns a *QueryStringBehavior pointing to the current value.
func (c QueryStringBehavior) ToPtr() *QueryStringBehavior {
	return &c
}

// QueryStringCachingBehavior - Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching
// to prevent requests that contain query strings from being cached, or cache
// every request with a unique URL.
type QueryStringCachingBehavior string

const (
	QueryStringCachingBehaviorIgnoreQueryString QueryStringCachingBehavior = "IgnoreQueryString"
	QueryStringCachingBehaviorBypassCaching     QueryStringCachingBehavior = "BypassCaching"
	QueryStringCachingBehaviorUseQueryString    QueryStringCachingBehavior = "UseQueryString"
	QueryStringCachingBehaviorNotSet            QueryStringCachingBehavior = "NotSet"
)

// PossibleQueryStringCachingBehaviorValues returns the possible values for the QueryStringCachingBehavior const type.
func PossibleQueryStringCachingBehaviorValues() []QueryStringCachingBehavior {
	return []QueryStringCachingBehavior{
		QueryStringCachingBehaviorIgnoreQueryString,
		QueryStringCachingBehaviorBypassCaching,
		QueryStringCachingBehaviorUseQueryString,
		QueryStringCachingBehaviorNotSet,
	}
}

// ToPtr returns a *QueryStringCachingBehavior pointing to the current value.
func (c QueryStringCachingBehavior) ToPtr() *QueryStringCachingBehavior {
	return &c
}

type QueryStringMatchConditionParametersODataType string

const (
	QueryStringMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleQueryStringConditionParameters QueryStringMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleQueryStringConditionParameters"
)

// PossibleQueryStringMatchConditionParametersODataTypeValues returns the possible values for the QueryStringMatchConditionParametersODataType const type.
func PossibleQueryStringMatchConditionParametersODataTypeValues() []QueryStringMatchConditionParametersODataType {
	return []QueryStringMatchConditionParametersODataType{
		QueryStringMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleQueryStringConditionParameters,
	}
}

// ToPtr returns a *QueryStringMatchConditionParametersODataType pointing to the current value.
func (c QueryStringMatchConditionParametersODataType) ToPtr() *QueryStringMatchConditionParametersODataType {
	return &c
}

// QueryStringOperator - Describes operator to be matched
type QueryStringOperator string

const (
	QueryStringOperatorAny                QueryStringOperator = "Any"
	QueryStringOperatorBeginsWith         QueryStringOperator = "BeginsWith"
	QueryStringOperatorContains           QueryStringOperator = "Contains"
	QueryStringOperatorEndsWith           QueryStringOperator = "EndsWith"
	QueryStringOperatorEqual              QueryStringOperator = "Equal"
	QueryStringOperatorGreaterThan        QueryStringOperator = "GreaterThan"
	QueryStringOperatorGreaterThanOrEqual QueryStringOperator = "GreaterThanOrEqual"
	QueryStringOperatorLessThan           QueryStringOperator = "LessThan"
	QueryStringOperatorLessThanOrEqual    QueryStringOperator = "LessThanOrEqual"
	QueryStringOperatorRegEx              QueryStringOperator = "RegEx"
)

// PossibleQueryStringOperatorValues returns the possible values for the QueryStringOperator const type.
func PossibleQueryStringOperatorValues() []QueryStringOperator {
	return []QueryStringOperator{
		QueryStringOperatorAny,
		QueryStringOperatorBeginsWith,
		QueryStringOperatorContains,
		QueryStringOperatorEndsWith,
		QueryStringOperatorEqual,
		QueryStringOperatorGreaterThan,
		QueryStringOperatorGreaterThanOrEqual,
		QueryStringOperatorLessThan,
		QueryStringOperatorLessThanOrEqual,
		QueryStringOperatorRegEx,
	}
}

// ToPtr returns a *QueryStringOperator pointing to the current value.
func (c QueryStringOperator) ToPtr() *QueryStringOperator {
	return &c
}

// RedirectType - The redirect type the rule will use when redirecting traffic.
type RedirectType string

const (
	RedirectTypeFound             RedirectType = "Found"
	RedirectTypeMoved             RedirectType = "Moved"
	RedirectTypePermanentRedirect RedirectType = "PermanentRedirect"
	RedirectTypeTemporaryRedirect RedirectType = "TemporaryRedirect"
)

// PossibleRedirectTypeValues returns the possible values for the RedirectType const type.
func PossibleRedirectTypeValues() []RedirectType {
	return []RedirectType{
		RedirectTypeFound,
		RedirectTypeMoved,
		RedirectTypePermanentRedirect,
		RedirectTypeTemporaryRedirect,
	}
}

// ToPtr returns a *RedirectType pointing to the current value.
func (c RedirectType) ToPtr() *RedirectType {
	return &c
}

type RemoteAddressMatchConditionParametersODataType string

const (
	RemoteAddressMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRemoteAddressConditionParameters RemoteAddressMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters"
)

// PossibleRemoteAddressMatchConditionParametersODataTypeValues returns the possible values for the RemoteAddressMatchConditionParametersODataType const type.
func PossibleRemoteAddressMatchConditionParametersODataTypeValues() []RemoteAddressMatchConditionParametersODataType {
	return []RemoteAddressMatchConditionParametersODataType{
		RemoteAddressMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRemoteAddressConditionParameters,
	}
}

// ToPtr returns a *RemoteAddressMatchConditionParametersODataType pointing to the current value.
func (c RemoteAddressMatchConditionParametersODataType) ToPtr() *RemoteAddressMatchConditionParametersODataType {
	return &c
}

// RemoteAddressOperator - Describes operator to be matched
type RemoteAddressOperator string

const (
	RemoteAddressOperatorAny      RemoteAddressOperator = "Any"
	RemoteAddressOperatorGeoMatch RemoteAddressOperator = "GeoMatch"
	RemoteAddressOperatorIPMatch  RemoteAddressOperator = "IPMatch"
)

// PossibleRemoteAddressOperatorValues returns the possible values for the RemoteAddressOperator const type.
func PossibleRemoteAddressOperatorValues() []RemoteAddressOperator {
	return []RemoteAddressOperator{
		RemoteAddressOperatorAny,
		RemoteAddressOperatorGeoMatch,
		RemoteAddressOperatorIPMatch,
	}
}

// ToPtr returns a *RemoteAddressOperator pointing to the current value.
func (c RemoteAddressOperator) ToPtr() *RemoteAddressOperator {
	return &c
}

type RequestBodyMatchConditionParametersODataType string

const (
	RequestBodyMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestBodyConditionParameters RequestBodyMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestBodyConditionParameters"
)

// PossibleRequestBodyMatchConditionParametersODataTypeValues returns the possible values for the RequestBodyMatchConditionParametersODataType const type.
func PossibleRequestBodyMatchConditionParametersODataTypeValues() []RequestBodyMatchConditionParametersODataType {
	return []RequestBodyMatchConditionParametersODataType{
		RequestBodyMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestBodyConditionParameters,
	}
}

// ToPtr returns a *RequestBodyMatchConditionParametersODataType pointing to the current value.
func (c RequestBodyMatchConditionParametersODataType) ToPtr() *RequestBodyMatchConditionParametersODataType {
	return &c
}

// RequestBodyOperator - Describes operator to be matched
type RequestBodyOperator string

const (
	RequestBodyOperatorAny                RequestBodyOperator = "Any"
	RequestBodyOperatorBeginsWith         RequestBodyOperator = "BeginsWith"
	RequestBodyOperatorContains           RequestBodyOperator = "Contains"
	RequestBodyOperatorEndsWith           RequestBodyOperator = "EndsWith"
	RequestBodyOperatorEqual              RequestBodyOperator = "Equal"
	RequestBodyOperatorGreaterThan        RequestBodyOperator = "GreaterThan"
	RequestBodyOperatorGreaterThanOrEqual RequestBodyOperator = "GreaterThanOrEqual"
	RequestBodyOperatorLessThan           RequestBodyOperator = "LessThan"
	RequestBodyOperatorLessThanOrEqual    RequestBodyOperator = "LessThanOrEqual"
	RequestBodyOperatorRegEx              RequestBodyOperator = "RegEx"
)

// PossibleRequestBodyOperatorValues returns the possible values for the RequestBodyOperator const type.
func PossibleRequestBodyOperatorValues() []RequestBodyOperator {
	return []RequestBodyOperator{
		RequestBodyOperatorAny,
		RequestBodyOperatorBeginsWith,
		RequestBodyOperatorContains,
		RequestBodyOperatorEndsWith,
		RequestBodyOperatorEqual,
		RequestBodyOperatorGreaterThan,
		RequestBodyOperatorGreaterThanOrEqual,
		RequestBodyOperatorLessThan,
		RequestBodyOperatorLessThanOrEqual,
		RequestBodyOperatorRegEx,
	}
}

// ToPtr returns a *RequestBodyOperator pointing to the current value.
func (c RequestBodyOperator) ToPtr() *RequestBodyOperator {
	return &c
}

type RequestHeaderMatchConditionParametersODataType string

const (
	RequestHeaderMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestHeaderConditionParameters RequestHeaderMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestHeaderConditionParameters"
)

// PossibleRequestHeaderMatchConditionParametersODataTypeValues returns the possible values for the RequestHeaderMatchConditionParametersODataType const type.
func PossibleRequestHeaderMatchConditionParametersODataTypeValues() []RequestHeaderMatchConditionParametersODataType {
	return []RequestHeaderMatchConditionParametersODataType{
		RequestHeaderMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestHeaderConditionParameters,
	}
}

// ToPtr returns a *RequestHeaderMatchConditionParametersODataType pointing to the current value.
func (c RequestHeaderMatchConditionParametersODataType) ToPtr() *RequestHeaderMatchConditionParametersODataType {
	return &c
}

// RequestHeaderOperator - Describes operator to be matched
type RequestHeaderOperator string

const (
	RequestHeaderOperatorAny                RequestHeaderOperator = "Any"
	RequestHeaderOperatorBeginsWith         RequestHeaderOperator = "BeginsWith"
	RequestHeaderOperatorContains           RequestHeaderOperator = "Contains"
	RequestHeaderOperatorEndsWith           RequestHeaderOperator = "EndsWith"
	RequestHeaderOperatorEqual              RequestHeaderOperator = "Equal"
	RequestHeaderOperatorGreaterThan        RequestHeaderOperator = "GreaterThan"
	RequestHeaderOperatorGreaterThanOrEqual RequestHeaderOperator = "GreaterThanOrEqual"
	RequestHeaderOperatorLessThan           RequestHeaderOperator = "LessThan"
	RequestHeaderOperatorLessThanOrEqual    RequestHeaderOperator = "LessThanOrEqual"
	RequestHeaderOperatorRegEx              RequestHeaderOperator = "RegEx"
)

// PossibleRequestHeaderOperatorValues returns the possible values for the RequestHeaderOperator const type.
func PossibleRequestHeaderOperatorValues() []RequestHeaderOperator {
	return []RequestHeaderOperator{
		RequestHeaderOperatorAny,
		RequestHeaderOperatorBeginsWith,
		RequestHeaderOperatorContains,
		RequestHeaderOperatorEndsWith,
		RequestHeaderOperatorEqual,
		RequestHeaderOperatorGreaterThan,
		RequestHeaderOperatorGreaterThanOrEqual,
		RequestHeaderOperatorLessThan,
		RequestHeaderOperatorLessThanOrEqual,
		RequestHeaderOperatorRegEx,
	}
}

// ToPtr returns a *RequestHeaderOperator pointing to the current value.
func (c RequestHeaderOperator) ToPtr() *RequestHeaderOperator {
	return &c
}

type RequestMethodMatchConditionParametersMatchValuesItem string

const (
	RequestMethodMatchConditionParametersMatchValuesItemDELETE  RequestMethodMatchConditionParametersMatchValuesItem = "DELETE"
	RequestMethodMatchConditionParametersMatchValuesItemGET     RequestMethodMatchConditionParametersMatchValuesItem = "GET"
	RequestMethodMatchConditionParametersMatchValuesItemHEAD    RequestMethodMatchConditionParametersMatchValuesItem = "HEAD"
	RequestMethodMatchConditionParametersMatchValuesItemOPTIONS RequestMethodMatchConditionParametersMatchValuesItem = "OPTIONS"
	RequestMethodMatchConditionParametersMatchValuesItemPOST    RequestMethodMatchConditionParametersMatchValuesItem = "POST"
	RequestMethodMatchConditionParametersMatchValuesItemPUT     RequestMethodMatchConditionParametersMatchValuesItem = "PUT"
	RequestMethodMatchConditionParametersMatchValuesItemTRACE   RequestMethodMatchConditionParametersMatchValuesItem = "TRACE"
)

// PossibleRequestMethodMatchConditionParametersMatchValuesItemValues returns the possible values for the RequestMethodMatchConditionParametersMatchValuesItem const type.
func PossibleRequestMethodMatchConditionParametersMatchValuesItemValues() []RequestMethodMatchConditionParametersMatchValuesItem {
	return []RequestMethodMatchConditionParametersMatchValuesItem{
		RequestMethodMatchConditionParametersMatchValuesItemDELETE,
		RequestMethodMatchConditionParametersMatchValuesItemGET,
		RequestMethodMatchConditionParametersMatchValuesItemHEAD,
		RequestMethodMatchConditionParametersMatchValuesItemOPTIONS,
		RequestMethodMatchConditionParametersMatchValuesItemPOST,
		RequestMethodMatchConditionParametersMatchValuesItemPUT,
		RequestMethodMatchConditionParametersMatchValuesItemTRACE,
	}
}

// ToPtr returns a *RequestMethodMatchConditionParametersMatchValuesItem pointing to the current value.
func (c RequestMethodMatchConditionParametersMatchValuesItem) ToPtr() *RequestMethodMatchConditionParametersMatchValuesItem {
	return &c
}

type RequestMethodMatchConditionParametersODataType string

const (
	RequestMethodMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestMethodConditionParameters RequestMethodMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestMethodConditionParameters"
)

// PossibleRequestMethodMatchConditionParametersODataTypeValues returns the possible values for the RequestMethodMatchConditionParametersODataType const type.
func PossibleRequestMethodMatchConditionParametersODataTypeValues() []RequestMethodMatchConditionParametersODataType {
	return []RequestMethodMatchConditionParametersODataType{
		RequestMethodMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestMethodConditionParameters,
	}
}

// ToPtr returns a *RequestMethodMatchConditionParametersODataType pointing to the current value.
func (c RequestMethodMatchConditionParametersODataType) ToPtr() *RequestMethodMatchConditionParametersODataType {
	return &c
}

// RequestMethodOperator - Describes operator to be matched
type RequestMethodOperator string

const (
	RequestMethodOperatorEqual RequestMethodOperator = "Equal"
)

// PossibleRequestMethodOperatorValues returns the possible values for the RequestMethodOperator const type.
func PossibleRequestMethodOperatorValues() []RequestMethodOperator {
	return []RequestMethodOperator{
		RequestMethodOperatorEqual,
	}
}

// ToPtr returns a *RequestMethodOperator pointing to the current value.
func (c RequestMethodOperator) ToPtr() *RequestMethodOperator {
	return &c
}

type RequestSchemeMatchConditionParametersMatchValuesItem string

const (
	RequestSchemeMatchConditionParametersMatchValuesItemHTTP  RequestSchemeMatchConditionParametersMatchValuesItem = "HTTP"
	RequestSchemeMatchConditionParametersMatchValuesItemHTTPS RequestSchemeMatchConditionParametersMatchValuesItem = "HTTPS"
)

// PossibleRequestSchemeMatchConditionParametersMatchValuesItemValues returns the possible values for the RequestSchemeMatchConditionParametersMatchValuesItem const type.
func PossibleRequestSchemeMatchConditionParametersMatchValuesItemValues() []RequestSchemeMatchConditionParametersMatchValuesItem {
	return []RequestSchemeMatchConditionParametersMatchValuesItem{
		RequestSchemeMatchConditionParametersMatchValuesItemHTTP,
		RequestSchemeMatchConditionParametersMatchValuesItemHTTPS,
	}
}

// ToPtr returns a *RequestSchemeMatchConditionParametersMatchValuesItem pointing to the current value.
func (c RequestSchemeMatchConditionParametersMatchValuesItem) ToPtr() *RequestSchemeMatchConditionParametersMatchValuesItem {
	return &c
}

type RequestSchemeMatchConditionParametersODataType string

const (
	RequestSchemeMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestSchemeConditionParameters RequestSchemeMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestSchemeConditionParameters"
)

// PossibleRequestSchemeMatchConditionParametersODataTypeValues returns the possible values for the RequestSchemeMatchConditionParametersODataType const type.
func PossibleRequestSchemeMatchConditionParametersODataTypeValues() []RequestSchemeMatchConditionParametersODataType {
	return []RequestSchemeMatchConditionParametersODataType{
		RequestSchemeMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestSchemeConditionParameters,
	}
}

// ToPtr returns a *RequestSchemeMatchConditionParametersODataType pointing to the current value.
func (c RequestSchemeMatchConditionParametersODataType) ToPtr() *RequestSchemeMatchConditionParametersODataType {
	return &c
}

// RequestSchemeMatchConditionParametersOperator - Describes operator to be matched
type RequestSchemeMatchConditionParametersOperator string

const (
	RequestSchemeMatchConditionParametersOperatorEqual RequestSchemeMatchConditionParametersOperator = "Equal"
)

// PossibleRequestSchemeMatchConditionParametersOperatorValues returns the possible values for the RequestSchemeMatchConditionParametersOperator const type.
func PossibleRequestSchemeMatchConditionParametersOperatorValues() []RequestSchemeMatchConditionParametersOperator {
	return []RequestSchemeMatchConditionParametersOperator{
		RequestSchemeMatchConditionParametersOperatorEqual,
	}
}

// ToPtr returns a *RequestSchemeMatchConditionParametersOperator pointing to the current value.
func (c RequestSchemeMatchConditionParametersOperator) ToPtr() *RequestSchemeMatchConditionParametersOperator {
	return &c
}

type RequestURIMatchConditionParametersODataType string

const (
	RequestURIMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestURIConditionParameters RequestURIMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestUriConditionParameters"
)

// PossibleRequestURIMatchConditionParametersODataTypeValues returns the possible values for the RequestURIMatchConditionParametersODataType const type.
func PossibleRequestURIMatchConditionParametersODataTypeValues() []RequestURIMatchConditionParametersODataType {
	return []RequestURIMatchConditionParametersODataType{
		RequestURIMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleRequestURIConditionParameters,
	}
}

// ToPtr returns a *RequestURIMatchConditionParametersODataType pointing to the current value.
func (c RequestURIMatchConditionParametersODataType) ToPtr() *RequestURIMatchConditionParametersODataType {
	return &c
}

// RequestURIOperator - Describes operator to be matched
type RequestURIOperator string

const (
	RequestURIOperatorAny                RequestURIOperator = "Any"
	RequestURIOperatorBeginsWith         RequestURIOperator = "BeginsWith"
	RequestURIOperatorContains           RequestURIOperator = "Contains"
	RequestURIOperatorEndsWith           RequestURIOperator = "EndsWith"
	RequestURIOperatorEqual              RequestURIOperator = "Equal"
	RequestURIOperatorGreaterThan        RequestURIOperator = "GreaterThan"
	RequestURIOperatorGreaterThanOrEqual RequestURIOperator = "GreaterThanOrEqual"
	RequestURIOperatorLessThan           RequestURIOperator = "LessThan"
	RequestURIOperatorLessThanOrEqual    RequestURIOperator = "LessThanOrEqual"
	RequestURIOperatorRegEx              RequestURIOperator = "RegEx"
)

// PossibleRequestURIOperatorValues returns the possible values for the RequestURIOperator const type.
func PossibleRequestURIOperatorValues() []RequestURIOperator {
	return []RequestURIOperator{
		RequestURIOperatorAny,
		RequestURIOperatorBeginsWith,
		RequestURIOperatorContains,
		RequestURIOperatorEndsWith,
		RequestURIOperatorEqual,
		RequestURIOperatorGreaterThan,
		RequestURIOperatorGreaterThanOrEqual,
		RequestURIOperatorLessThan,
		RequestURIOperatorLessThanOrEqual,
		RequestURIOperatorRegEx,
	}
}

// ToPtr returns a *RequestURIOperator pointing to the current value.
func (c RequestURIOperator) ToPtr() *RequestURIOperator {
	return &c
}

// ResponseBasedDetectedErrorTypes - Type of response errors for real user requests for which origin will be deemed unhealthy
type ResponseBasedDetectedErrorTypes string

const (
	ResponseBasedDetectedErrorTypesNone             ResponseBasedDetectedErrorTypes = "None"
	ResponseBasedDetectedErrorTypesTCPErrorsOnly    ResponseBasedDetectedErrorTypes = "TcpErrorsOnly"
	ResponseBasedDetectedErrorTypesTCPAndHTTPErrors ResponseBasedDetectedErrorTypes = "TcpAndHttpErrors"
)

// PossibleResponseBasedDetectedErrorTypesValues returns the possible values for the ResponseBasedDetectedErrorTypes const type.
func PossibleResponseBasedDetectedErrorTypesValues() []ResponseBasedDetectedErrorTypes {
	return []ResponseBasedDetectedErrorTypes{
		ResponseBasedDetectedErrorTypesNone,
		ResponseBasedDetectedErrorTypesTCPErrorsOnly,
		ResponseBasedDetectedErrorTypesTCPAndHTTPErrors,
	}
}

// ToPtr returns a *ResponseBasedDetectedErrorTypes pointing to the current value.
func (c ResponseBasedDetectedErrorTypes) ToPtr() *ResponseBasedDetectedErrorTypes {
	return &c
}

// SKUName - Name of the pricing tier.
type SKUName string

const (
	SKUNameCustomVerizon                    SKUName = "Custom_Verizon"
	SKUNamePremiumAzureFrontDoor            SKUName = "Premium_AzureFrontDoor"
	SKUNamePremiumChinaCdn                  SKUName = "Premium_ChinaCdn"
	SKUNamePremiumVerizon                   SKUName = "Premium_Verizon"
	SKUNameStandard955BandWidthChinaCdn     SKUName = "Standard_955BandWidth_ChinaCdn"
	SKUNameStandardAkamai                   SKUName = "Standard_Akamai"
	SKUNameStandardAvgBandWidthChinaCdn     SKUName = "Standard_AvgBandWidth_ChinaCdn"
	SKUNameStandardAzureFrontDoor           SKUName = "Standard_AzureFrontDoor"
	SKUNameStandardChinaCdn                 SKUName = "Standard_ChinaCdn"
	SKUNameStandardMicrosoft                SKUName = "Standard_Microsoft"
	SKUNameStandardPlus955BandWidthChinaCdn SKUName = "StandardPlus_955BandWidth_ChinaCdn"
	SKUNameStandardPlusAvgBandWidthChinaCdn SKUName = "StandardPlus_AvgBandWidth_ChinaCdn"
	SKUNameStandardPlusChinaCdn             SKUName = "StandardPlus_ChinaCdn"
	SKUNameStandardVerizon                  SKUName = "Standard_Verizon"
)

// PossibleSKUNameValues returns the possible values for the SKUName const type.
func PossibleSKUNameValues() []SKUName {
	return []SKUName{
		SKUNameCustomVerizon,
		SKUNamePremiumAzureFrontDoor,
		SKUNamePremiumChinaCdn,
		SKUNamePremiumVerizon,
		SKUNameStandard955BandWidthChinaCdn,
		SKUNameStandardAkamai,
		SKUNameStandardAvgBandWidthChinaCdn,
		SKUNameStandardAzureFrontDoor,
		SKUNameStandardChinaCdn,
		SKUNameStandardMicrosoft,
		SKUNameStandardPlus955BandWidthChinaCdn,
		SKUNameStandardPlusAvgBandWidthChinaCdn,
		SKUNameStandardPlusChinaCdn,
		SKUNameStandardVerizon,
	}
}

// ToPtr returns a *SKUName pointing to the current value.
func (c SKUName) ToPtr() *SKUName {
	return &c
}

// SecretType - The type of the Secret to create.
type SecretType string

const (
	SecretTypeCustomerCertificate SecretType = "CustomerCertificate"
	SecretTypeManagedCertificate  SecretType = "ManagedCertificate"
	SecretTypeURLSigningKey       SecretType = "UrlSigningKey"
)

// PossibleSecretTypeValues returns the possible values for the SecretType const type.
func PossibleSecretTypeValues() []SecretType {
	return []SecretType{
		SecretTypeCustomerCertificate,
		SecretTypeManagedCertificate,
		SecretTypeURLSigningKey,
	}
}

// ToPtr returns a *SecretType pointing to the current value.
func (c SecretType) ToPtr() *SecretType {
	return &c
}

// SecurityPolicyType - The type of the Security policy to create.
type SecurityPolicyType string

const (
	SecurityPolicyTypeWebApplicationFirewall SecurityPolicyType = "WebApplicationFirewall"
)

// PossibleSecurityPolicyTypeValues returns the possible values for the SecurityPolicyType const type.
func PossibleSecurityPolicyTypeValues() []SecurityPolicyType {
	return []SecurityPolicyType{
		SecurityPolicyTypeWebApplicationFirewall,
	}
}

// ToPtr returns a *SecurityPolicyType pointing to the current value.
func (c SecurityPolicyType) ToPtr() *SecurityPolicyType {
	return &c
}

// SharedPrivateLinkResourceStatus - Status of the shared private link resource. Can be Pending, Approved, Rejected, Disconnected, or Timeout.
type SharedPrivateLinkResourceStatus string

const (
	SharedPrivateLinkResourceStatusPending      SharedPrivateLinkResourceStatus = "Pending"
	SharedPrivateLinkResourceStatusApproved     SharedPrivateLinkResourceStatus = "Approved"
	SharedPrivateLinkResourceStatusRejected     SharedPrivateLinkResourceStatus = "Rejected"
	SharedPrivateLinkResourceStatusDisconnected SharedPrivateLinkResourceStatus = "Disconnected"
	SharedPrivateLinkResourceStatusTimeout      SharedPrivateLinkResourceStatus = "Timeout"
)

// PossibleSharedPrivateLinkResourceStatusValues returns the possible values for the SharedPrivateLinkResourceStatus const type.
func PossibleSharedPrivateLinkResourceStatusValues() []SharedPrivateLinkResourceStatus {
	return []SharedPrivateLinkResourceStatus{
		SharedPrivateLinkResourceStatusPending,
		SharedPrivateLinkResourceStatusApproved,
		SharedPrivateLinkResourceStatusRejected,
		SharedPrivateLinkResourceStatusDisconnected,
		SharedPrivateLinkResourceStatusTimeout,
	}
}

// ToPtr returns a *SharedPrivateLinkResourceStatus pointing to the current value.
func (c SharedPrivateLinkResourceStatus) ToPtr() *SharedPrivateLinkResourceStatus {
	return &c
}

// Status - The validation status.
type Status string

const (
	StatusAccessDenied       Status = "AccessDenied"
	StatusCertificateExpired Status = "CertificateExpired"
	StatusInvalid            Status = "Invalid"
	StatusValid              Status = "Valid"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusAccessDenied,
		StatusCertificateExpired,
		StatusInvalid,
		StatusValid,
	}
}

// ToPtr returns a *Status pointing to the current value.
func (c Status) ToPtr() *Status {
	return &c
}

// Transform - Describes what transforms are applied before matching
type Transform string

const (
	TransformLowercase Transform = "Lowercase"
	TransformUppercase Transform = "Uppercase"
)

// PossibleTransformValues returns the possible values for the Transform const type.
func PossibleTransformValues() []Transform {
	return []Transform{
		TransformLowercase,
		TransformUppercase,
	}
}

// ToPtr returns a *Transform pointing to the current value.
func (c Transform) ToPtr() *Transform {
	return &c
}

// TransformType - Describes what transforms were applied before matching.
type TransformType string

const (
	TransformTypeLowercase   TransformType = "Lowercase"
	TransformTypeRemoveNulls TransformType = "RemoveNulls"
	TransformTypeTrim        TransformType = "Trim"
	TransformTypeURLDecode   TransformType = "UrlDecode"
	TransformTypeURLEncode   TransformType = "UrlEncode"
	TransformTypeUppercase   TransformType = "Uppercase"
)

// PossibleTransformTypeValues returns the possible values for the TransformType const type.
func PossibleTransformTypeValues() []TransformType {
	return []TransformType{
		TransformTypeLowercase,
		TransformTypeRemoveNulls,
		TransformTypeTrim,
		TransformTypeURLDecode,
		TransformTypeURLEncode,
		TransformTypeUppercase,
	}
}

// ToPtr returns a *TransformType pointing to the current value.
func (c TransformType) ToPtr() *TransformType {
	return &c
}

type URLFileExtensionMatchConditionParametersODataType string

const (
	URLFileExtensionMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLFileExtensionMatchConditionParameters URLFileExtensionMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionMatchConditionParameters"
)

// PossibleURLFileExtensionMatchConditionParametersODataTypeValues returns the possible values for the URLFileExtensionMatchConditionParametersODataType const type.
func PossibleURLFileExtensionMatchConditionParametersODataTypeValues() []URLFileExtensionMatchConditionParametersODataType {
	return []URLFileExtensionMatchConditionParametersODataType{
		URLFileExtensionMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLFileExtensionMatchConditionParameters,
	}
}

// ToPtr returns a *URLFileExtensionMatchConditionParametersODataType pointing to the current value.
func (c URLFileExtensionMatchConditionParametersODataType) ToPtr() *URLFileExtensionMatchConditionParametersODataType {
	return &c
}

// URLFileExtensionOperator - Describes operator to be matched
type URLFileExtensionOperator string

const (
	URLFileExtensionOperatorAny                URLFileExtensionOperator = "Any"
	URLFileExtensionOperatorBeginsWith         URLFileExtensionOperator = "BeginsWith"
	URLFileExtensionOperatorContains           URLFileExtensionOperator = "Contains"
	URLFileExtensionOperatorEndsWith           URLFileExtensionOperator = "EndsWith"
	URLFileExtensionOperatorEqual              URLFileExtensionOperator = "Equal"
	URLFileExtensionOperatorGreaterThan        URLFileExtensionOperator = "GreaterThan"
	URLFileExtensionOperatorGreaterThanOrEqual URLFileExtensionOperator = "GreaterThanOrEqual"
	URLFileExtensionOperatorLessThan           URLFileExtensionOperator = "LessThan"
	URLFileExtensionOperatorLessThanOrEqual    URLFileExtensionOperator = "LessThanOrEqual"
	URLFileExtensionOperatorRegEx              URLFileExtensionOperator = "RegEx"
)

// PossibleURLFileExtensionOperatorValues returns the possible values for the URLFileExtensionOperator const type.
func PossibleURLFileExtensionOperatorValues() []URLFileExtensionOperator {
	return []URLFileExtensionOperator{
		URLFileExtensionOperatorAny,
		URLFileExtensionOperatorBeginsWith,
		URLFileExtensionOperatorContains,
		URLFileExtensionOperatorEndsWith,
		URLFileExtensionOperatorEqual,
		URLFileExtensionOperatorGreaterThan,
		URLFileExtensionOperatorGreaterThanOrEqual,
		URLFileExtensionOperatorLessThan,
		URLFileExtensionOperatorLessThanOrEqual,
		URLFileExtensionOperatorRegEx,
	}
}

// ToPtr returns a *URLFileExtensionOperator pointing to the current value.
func (c URLFileExtensionOperator) ToPtr() *URLFileExtensionOperator {
	return &c
}

type URLFileNameMatchConditionParametersODataType string

const (
	URLFileNameMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLFilenameConditionParameters URLFileNameMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFilenameConditionParameters"
)

// PossibleURLFileNameMatchConditionParametersODataTypeValues returns the possible values for the URLFileNameMatchConditionParametersODataType const type.
func PossibleURLFileNameMatchConditionParametersODataTypeValues() []URLFileNameMatchConditionParametersODataType {
	return []URLFileNameMatchConditionParametersODataType{
		URLFileNameMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLFilenameConditionParameters,
	}
}

// ToPtr returns a *URLFileNameMatchConditionParametersODataType pointing to the current value.
func (c URLFileNameMatchConditionParametersODataType) ToPtr() *URLFileNameMatchConditionParametersODataType {
	return &c
}

// URLFileNameOperator - Describes operator to be matched
type URLFileNameOperator string

const (
	URLFileNameOperatorAny                URLFileNameOperator = "Any"
	URLFileNameOperatorBeginsWith         URLFileNameOperator = "BeginsWith"
	URLFileNameOperatorContains           URLFileNameOperator = "Contains"
	URLFileNameOperatorEndsWith           URLFileNameOperator = "EndsWith"
	URLFileNameOperatorEqual              URLFileNameOperator = "Equal"
	URLFileNameOperatorGreaterThan        URLFileNameOperator = "GreaterThan"
	URLFileNameOperatorGreaterThanOrEqual URLFileNameOperator = "GreaterThanOrEqual"
	URLFileNameOperatorLessThan           URLFileNameOperator = "LessThan"
	URLFileNameOperatorLessThanOrEqual    URLFileNameOperator = "LessThanOrEqual"
	URLFileNameOperatorRegEx              URLFileNameOperator = "RegEx"
)

// PossibleURLFileNameOperatorValues returns the possible values for the URLFileNameOperator const type.
func PossibleURLFileNameOperatorValues() []URLFileNameOperator {
	return []URLFileNameOperator{
		URLFileNameOperatorAny,
		URLFileNameOperatorBeginsWith,
		URLFileNameOperatorContains,
		URLFileNameOperatorEndsWith,
		URLFileNameOperatorEqual,
		URLFileNameOperatorGreaterThan,
		URLFileNameOperatorGreaterThanOrEqual,
		URLFileNameOperatorLessThan,
		URLFileNameOperatorLessThanOrEqual,
		URLFileNameOperatorRegEx,
	}
}

// ToPtr returns a *URLFileNameOperator pointing to the current value.
func (c URLFileNameOperator) ToPtr() *URLFileNameOperator {
	return &c
}

type URLPathMatchConditionParametersODataType string

const (
	URLPathMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLPathMatchConditionParameters URLPathMatchConditionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathMatchConditionParameters"
)

// PossibleURLPathMatchConditionParametersODataTypeValues returns the possible values for the URLPathMatchConditionParametersODataType const type.
func PossibleURLPathMatchConditionParametersODataTypeValues() []URLPathMatchConditionParametersODataType {
	return []URLPathMatchConditionParametersODataType{
		URLPathMatchConditionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLPathMatchConditionParameters,
	}
}

// ToPtr returns a *URLPathMatchConditionParametersODataType pointing to the current value.
func (c URLPathMatchConditionParametersODataType) ToPtr() *URLPathMatchConditionParametersODataType {
	return &c
}

// URLPathOperator - Describes operator to be matched
type URLPathOperator string

const (
	URLPathOperatorAny                URLPathOperator = "Any"
	URLPathOperatorBeginsWith         URLPathOperator = "BeginsWith"
	URLPathOperatorContains           URLPathOperator = "Contains"
	URLPathOperatorEndsWith           URLPathOperator = "EndsWith"
	URLPathOperatorEqual              URLPathOperator = "Equal"
	URLPathOperatorGreaterThan        URLPathOperator = "GreaterThan"
	URLPathOperatorGreaterThanOrEqual URLPathOperator = "GreaterThanOrEqual"
	URLPathOperatorLessThan           URLPathOperator = "LessThan"
	URLPathOperatorLessThanOrEqual    URLPathOperator = "LessThanOrEqual"
	URLPathOperatorRegEx              URLPathOperator = "RegEx"
	URLPathOperatorWildcard           URLPathOperator = "Wildcard"
)

// PossibleURLPathOperatorValues returns the possible values for the URLPathOperator const type.
func PossibleURLPathOperatorValues() []URLPathOperator {
	return []URLPathOperator{
		URLPathOperatorAny,
		URLPathOperatorBeginsWith,
		URLPathOperatorContains,
		URLPathOperatorEndsWith,
		URLPathOperatorEqual,
		URLPathOperatorGreaterThan,
		URLPathOperatorGreaterThanOrEqual,
		URLPathOperatorLessThan,
		URLPathOperatorLessThanOrEqual,
		URLPathOperatorRegEx,
		URLPathOperatorWildcard,
	}
}

// ToPtr returns a *URLPathOperator pointing to the current value.
func (c URLPathOperator) ToPtr() *URLPathOperator {
	return &c
}

type URLRedirectActionParametersODataType string

const (
	URLRedirectActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLRedirectActionParameters URLRedirectActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters"
)

// PossibleURLRedirectActionParametersODataTypeValues returns the possible values for the URLRedirectActionParametersODataType const type.
func PossibleURLRedirectActionParametersODataTypeValues() []URLRedirectActionParametersODataType {
	return []URLRedirectActionParametersODataType{
		URLRedirectActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLRedirectActionParameters,
	}
}

// ToPtr returns a *URLRedirectActionParametersODataType pointing to the current value.
func (c URLRedirectActionParametersODataType) ToPtr() *URLRedirectActionParametersODataType {
	return &c
}

type URLRewriteActionParametersODataType string

const (
	URLRewriteActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLRewriteActionParameters URLRewriteActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRewriteActionParameters"
)

// PossibleURLRewriteActionParametersODataTypeValues returns the possible values for the URLRewriteActionParametersODataType const type.
func PossibleURLRewriteActionParametersODataTypeValues() []URLRewriteActionParametersODataType {
	return []URLRewriteActionParametersODataType{
		URLRewriteActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLRewriteActionParameters,
	}
}

// ToPtr returns a *URLRewriteActionParametersODataType pointing to the current value.
func (c URLRewriteActionParametersODataType) ToPtr() *URLRewriteActionParametersODataType {
	return &c
}

type URLSigningActionParametersODataType string

const (
	URLSigningActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLSigningActionParameters URLSigningActionParametersODataType = "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlSigningActionParameters"
)

// PossibleURLSigningActionParametersODataTypeValues returns the possible values for the URLSigningActionParametersODataType const type.
func PossibleURLSigningActionParametersODataTypeValues() []URLSigningActionParametersODataType {
	return []URLSigningActionParametersODataType{
		URLSigningActionParametersODataTypeMicrosoftAzureCdnModelsDeliveryRuleURLSigningActionParameters,
	}
}

// ToPtr returns a *URLSigningActionParametersODataType pointing to the current value.
func (c URLSigningActionParametersODataType) ToPtr() *URLSigningActionParametersODataType {
	return &c
}

// UpdateRule - Describes the action that shall be taken when the certificate is updated in Key Vault.
type UpdateRule string

const (
	UpdateRuleNoAction UpdateRule = "NoAction"
)

// PossibleUpdateRuleValues returns the possible values for the UpdateRule const type.
func PossibleUpdateRuleValues() []UpdateRule {
	return []UpdateRule{
		UpdateRuleNoAction,
	}
}

// ToPtr returns a *UpdateRule pointing to the current value.
func (c UpdateRule) ToPtr() *UpdateRule {
	return &c
}

// UsageUnit - An enum describing the unit of measurement.
type UsageUnit string

const (
	UsageUnitCount UsageUnit = "Count"
)

// PossibleUsageUnitValues returns the possible values for the UsageUnit const type.
func PossibleUsageUnitValues() []UsageUnit {
	return []UsageUnit{
		UsageUnitCount,
	}
}

// ToPtr returns a *UsageUnit pointing to the current value.
func (c UsageUnit) ToPtr() *UsageUnit {
	return &c
}

// ValidateSecretType - The secret type.
type ValidateSecretType string

const (
	ValidateSecretTypeCustomerCertificate ValidateSecretType = "CustomerCertificate"
	ValidateSecretTypeManagedCertificate  ValidateSecretType = "ManagedCertificate"
	ValidateSecretTypeURLSigningKey       ValidateSecretType = "UrlSigningKey"
)

// PossibleValidateSecretTypeValues returns the possible values for the ValidateSecretType const type.
func PossibleValidateSecretTypeValues() []ValidateSecretType {
	return []ValidateSecretType{
		ValidateSecretTypeCustomerCertificate,
		ValidateSecretTypeManagedCertificate,
		ValidateSecretTypeURLSigningKey,
	}
}

// ToPtr returns a *ValidateSecretType pointing to the current value.
func (c ValidateSecretType) ToPtr() *ValidateSecretType {
	return &c
}

type WafAction string

const (
	WafActionAllow    WafAction = "allow"
	WafActionBlock    WafAction = "block"
	WafActionLog      WafAction = "log"
	WafActionRedirect WafAction = "redirect"
)

// PossibleWafActionValues returns the possible values for the WafAction const type.
func PossibleWafActionValues() []WafAction {
	return []WafAction{
		WafActionAllow,
		WafActionBlock,
		WafActionLog,
		WafActionRedirect,
	}
}

// ToPtr returns a *WafAction pointing to the current value.
func (c WafAction) ToPtr() *WafAction {
	return &c
}

type WafGranularity string

const (
	WafGranularityP1D  WafGranularity = "P1D"
	WafGranularityPT1H WafGranularity = "PT1H"
	WafGranularityPT5M WafGranularity = "PT5M"
)

// PossibleWafGranularityValues returns the possible values for the WafGranularity const type.
func PossibleWafGranularityValues() []WafGranularity {
	return []WafGranularity{
		WafGranularityP1D,
		WafGranularityPT1H,
		WafGranularityPT5M,
	}
}

// ToPtr returns a *WafGranularity pointing to the current value.
func (c WafGranularity) ToPtr() *WafGranularity {
	return &c
}

type WafMetric string

const (
	WafMetricClientRequestCount WafMetric = "clientRequestCount"
)

// PossibleWafMetricValues returns the possible values for the WafMetric const type.
func PossibleWafMetricValues() []WafMetric {
	return []WafMetric{
		WafMetricClientRequestCount,
	}
}

// ToPtr returns a *WafMetric pointing to the current value.
func (c WafMetric) ToPtr() *WafMetric {
	return &c
}

type WafMetricsResponseGranularity string

const (
	WafMetricsResponseGranularityP1D  WafMetricsResponseGranularity = "P1D"
	WafMetricsResponseGranularityPT1H WafMetricsResponseGranularity = "PT1H"
	WafMetricsResponseGranularityPT5M WafMetricsResponseGranularity = "PT5M"
)

// PossibleWafMetricsResponseGranularityValues returns the possible values for the WafMetricsResponseGranularity const type.
func PossibleWafMetricsResponseGranularityValues() []WafMetricsResponseGranularity {
	return []WafMetricsResponseGranularity{
		WafMetricsResponseGranularityP1D,
		WafMetricsResponseGranularityPT1H,
		WafMetricsResponseGranularityPT5M,
	}
}

// ToPtr returns a *WafMetricsResponseGranularity pointing to the current value.
func (c WafMetricsResponseGranularity) ToPtr() *WafMetricsResponseGranularity {
	return &c
}

type WafMetricsResponseSeriesItemUnit string

const (
	WafMetricsResponseSeriesItemUnitCount WafMetricsResponseSeriesItemUnit = "count"
)

// PossibleWafMetricsResponseSeriesItemUnitValues returns the possible values for the WafMetricsResponseSeriesItemUnit const type.
func PossibleWafMetricsResponseSeriesItemUnitValues() []WafMetricsResponseSeriesItemUnit {
	return []WafMetricsResponseSeriesItemUnit{
		WafMetricsResponseSeriesItemUnitCount,
	}
}

// ToPtr returns a *WafMetricsResponseSeriesItemUnit pointing to the current value.
func (c WafMetricsResponseSeriesItemUnit) ToPtr() *WafMetricsResponseSeriesItemUnit {
	return &c
}

type WafRankingGroupBy string

const (
	WafRankingGroupByCustomDomain   WafRankingGroupBy = "customDomain"
	WafRankingGroupByHTTPStatusCode WafRankingGroupBy = "httpStatusCode"
)

// PossibleWafRankingGroupByValues returns the possible values for the WafRankingGroupBy const type.
func PossibleWafRankingGroupByValues() []WafRankingGroupBy {
	return []WafRankingGroupBy{
		WafRankingGroupByCustomDomain,
		WafRankingGroupByHTTPStatusCode,
	}
}

// ToPtr returns a *WafRankingGroupBy pointing to the current value.
func (c WafRankingGroupBy) ToPtr() *WafRankingGroupBy {
	return &c
}

type WafRankingType string

const (
	WafRankingTypeAction    WafRankingType = "action"
	WafRankingTypeClientIP  WafRankingType = "clientIp"
	WafRankingTypeCountry   WafRankingType = "country"
	WafRankingTypeRuleGroup WafRankingType = "ruleGroup"
	WafRankingTypeRuleID    WafRankingType = "ruleId"
	WafRankingTypeRuleType  WafRankingType = "ruleType"
	WafRankingTypeURL       WafRankingType = "url"
	WafRankingTypeUserAgent WafRankingType = "userAgent"
)

// PossibleWafRankingTypeValues returns the possible values for the WafRankingType const type.
func PossibleWafRankingTypeValues() []WafRankingType {
	return []WafRankingType{
		WafRankingTypeAction,
		WafRankingTypeClientIP,
		WafRankingTypeCountry,
		WafRankingTypeRuleGroup,
		WafRankingTypeRuleID,
		WafRankingTypeRuleType,
		WafRankingTypeURL,
		WafRankingTypeUserAgent,
	}
}

// ToPtr returns a *WafRankingType pointing to the current value.
func (c WafRankingType) ToPtr() *WafRankingType {
	return &c
}

type WafRuleType string

const (
	WafRuleTypeBot     WafRuleType = "bot"
	WafRuleTypeCustom  WafRuleType = "custom"
	WafRuleTypeManaged WafRuleType = "managed"
)

// PossibleWafRuleTypeValues returns the possible values for the WafRuleType const type.
func PossibleWafRuleTypeValues() []WafRuleType {
	return []WafRuleType{
		WafRuleTypeBot,
		WafRuleTypeCustom,
		WafRuleTypeManaged,
	}
}

// ToPtr returns a *WafRuleType pointing to the current value.
func (c WafRuleType) ToPtr() *WafRuleType {
	return &c
}
