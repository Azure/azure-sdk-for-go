//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcdn

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AFDCustomDomainsListByProfilePager provides operations for iterating over paged responses.
type AFDCustomDomainsListByProfilePager struct {
	client    *AFDCustomDomainsClient
	current   AFDCustomDomainsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDCustomDomainsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDCustomDomainsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDCustomDomainsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDDomainListResult.NextLink == nil || len(*p.current.AFDDomainListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDCustomDomainsListByProfileResponse page.
func (p *AFDCustomDomainsListByProfilePager) PageResponse() AFDCustomDomainsListByProfileResponse {
	return p.current
}

// AFDEndpointsListByProfilePager provides operations for iterating over paged responses.
type AFDEndpointsListByProfilePager struct {
	client    *AFDEndpointsClient
	current   AFDEndpointsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDEndpointsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDEndpointsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDEndpointsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDEndpointListResult.NextLink == nil || len(*p.current.AFDEndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDEndpointsListByProfileResponse page.
func (p *AFDEndpointsListByProfilePager) PageResponse() AFDEndpointsListByProfileResponse {
	return p.current
}

// AFDEndpointsListResourceUsagePager provides operations for iterating over paged responses.
type AFDEndpointsListResourceUsagePager struct {
	client    *AFDEndpointsClient
	current   AFDEndpointsListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDEndpointsListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDEndpointsListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDEndpointsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDEndpointsListResourceUsageResponse page.
func (p *AFDEndpointsListResourceUsagePager) PageResponse() AFDEndpointsListResourceUsageResponse {
	return p.current
}

// AFDOriginGroupsListByProfilePager provides operations for iterating over paged responses.
type AFDOriginGroupsListByProfilePager struct {
	client    *AFDOriginGroupsClient
	current   AFDOriginGroupsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDOriginGroupsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDOriginGroupsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDOriginGroupsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDOriginGroupListResult.NextLink == nil || len(*p.current.AFDOriginGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDOriginGroupsListByProfileResponse page.
func (p *AFDOriginGroupsListByProfilePager) PageResponse() AFDOriginGroupsListByProfileResponse {
	return p.current
}

// AFDOriginGroupsListResourceUsagePager provides operations for iterating over paged responses.
type AFDOriginGroupsListResourceUsagePager struct {
	client    *AFDOriginGroupsClient
	current   AFDOriginGroupsListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDOriginGroupsListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDOriginGroupsListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDOriginGroupsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDOriginGroupsListResourceUsageResponse page.
func (p *AFDOriginGroupsListResourceUsagePager) PageResponse() AFDOriginGroupsListResourceUsageResponse {
	return p.current
}

// AFDOriginsListByOriginGroupPager provides operations for iterating over paged responses.
type AFDOriginsListByOriginGroupPager struct {
	client    *AFDOriginsClient
	current   AFDOriginsListByOriginGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDOriginsListByOriginGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDOriginsListByOriginGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDOriginsListByOriginGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AFDOriginListResult.NextLink == nil || len(*p.current.AFDOriginListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByOriginGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByOriginGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDOriginsListByOriginGroupResponse page.
func (p *AFDOriginsListByOriginGroupPager) PageResponse() AFDOriginsListByOriginGroupResponse {
	return p.current
}

// AFDProfilesListResourceUsagePager provides operations for iterating over paged responses.
type AFDProfilesListResourceUsagePager struct {
	client    *AFDProfilesClient
	current   AFDProfilesListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AFDProfilesListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AFDProfilesListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AFDProfilesListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AFDProfilesListResourceUsageResponse page.
func (p *AFDProfilesListResourceUsagePager) PageResponse() AFDProfilesListResourceUsageResponse {
	return p.current
}

// CustomDomainsListByEndpointPager provides operations for iterating over paged responses.
type CustomDomainsListByEndpointPager struct {
	client    *CustomDomainsClient
	current   CustomDomainsListByEndpointResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomDomainsListByEndpointResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomDomainsListByEndpointPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomDomainsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomDomainListResult.NextLink == nil || len(*p.current.CustomDomainListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomDomainsListByEndpointResponse page.
func (p *CustomDomainsListByEndpointPager) PageResponse() CustomDomainsListByEndpointResponse {
	return p.current
}

// EdgeNodesListPager provides operations for iterating over paged responses.
type EdgeNodesListPager struct {
	client    *EdgeNodesClient
	current   EdgeNodesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeNodesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeNodesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeNodesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EdgenodeResult.NextLink == nil || len(*p.current.EdgenodeResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeNodesListResponse page.
func (p *EdgeNodesListPager) PageResponse() EdgeNodesListResponse {
	return p.current
}

// EndpointsListByProfilePager provides operations for iterating over paged responses.
type EndpointsListByProfilePager struct {
	client    *EndpointsClient
	current   EndpointsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EndpointsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EndpointsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EndpointsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EndpointListResult.NextLink == nil || len(*p.current.EndpointListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EndpointsListByProfileResponse page.
func (p *EndpointsListByProfilePager) PageResponse() EndpointsListByProfileResponse {
	return p.current
}

// EndpointsListResourceUsagePager provides operations for iterating over paged responses.
type EndpointsListResourceUsagePager struct {
	client    *EndpointsClient
	current   EndpointsListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EndpointsListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EndpointsListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EndpointsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EndpointsListResourceUsageResponse page.
func (p *EndpointsListResourceUsagePager) PageResponse() EndpointsListResourceUsageResponse {
	return p.current
}

// ManagedRuleSetsListPager provides operations for iterating over paged responses.
type ManagedRuleSetsListPager struct {
	client    *ManagedRuleSetsClient
	current   ManagedRuleSetsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedRuleSetsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagedRuleSetsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagedRuleSetsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedRuleSetDefinitionList.NextLink == nil || len(*p.current.ManagedRuleSetDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagedRuleSetsListResponse page.
func (p *ManagedRuleSetsListPager) PageResponse() ManagedRuleSetsListResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsListResult.NextLink == nil || len(*p.current.OperationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// OriginGroupsListByEndpointPager provides operations for iterating over paged responses.
type OriginGroupsListByEndpointPager struct {
	client    *OriginGroupsClient
	current   OriginGroupsListByEndpointResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OriginGroupsListByEndpointResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OriginGroupsListByEndpointPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OriginGroupsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OriginGroupListResult.NextLink == nil || len(*p.current.OriginGroupListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OriginGroupsListByEndpointResponse page.
func (p *OriginGroupsListByEndpointPager) PageResponse() OriginGroupsListByEndpointResponse {
	return p.current
}

// OriginsListByEndpointPager provides operations for iterating over paged responses.
type OriginsListByEndpointPager struct {
	client    *OriginsClient
	current   OriginsListByEndpointResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OriginsListByEndpointResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OriginsListByEndpointPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OriginsListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OriginListResult.NextLink == nil || len(*p.current.OriginListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OriginsListByEndpointResponse page.
func (p *OriginsListByEndpointPager) PageResponse() OriginsListByEndpointResponse {
	return p.current
}

// PoliciesListPager provides operations for iterating over paged responses.
type PoliciesListPager struct {
	client    *PoliciesClient
	current   PoliciesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PoliciesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PoliciesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PoliciesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CdnWebApplicationFirewallPolicyList.NextLink == nil || len(*p.current.CdnWebApplicationFirewallPolicyList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PoliciesListResponse page.
func (p *PoliciesListPager) PageResponse() PoliciesListResponse {
	return p.current
}

// ProfilesListByResourceGroupPager provides operations for iterating over paged responses.
type ProfilesListByResourceGroupPager struct {
	client    *ProfilesClient
	current   ProfilesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProfilesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProfilesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProfilesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileListResult.NextLink == nil || len(*p.current.ProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProfilesListByResourceGroupResponse page.
func (p *ProfilesListByResourceGroupPager) PageResponse() ProfilesListByResourceGroupResponse {
	return p.current
}

// ProfilesListPager provides operations for iterating over paged responses.
type ProfilesListPager struct {
	client    *ProfilesClient
	current   ProfilesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProfilesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProfilesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProfilesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProfileListResult.NextLink == nil || len(*p.current.ProfileListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProfilesListResponse page.
func (p *ProfilesListPager) PageResponse() ProfilesListResponse {
	return p.current
}

// ProfilesListResourceUsagePager provides operations for iterating over paged responses.
type ProfilesListResourceUsagePager struct {
	client    *ProfilesClient
	current   ProfilesListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProfilesListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProfilesListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProfilesListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProfilesListResourceUsageResponse page.
func (p *ProfilesListResourceUsagePager) PageResponse() ProfilesListResourceUsageResponse {
	return p.current
}

// ResourceUsageListPager provides operations for iterating over paged responses.
type ResourceUsageListPager struct {
	client    *ResourceUsageClient
	current   ResourceUsageListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceUsageListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceUsageListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceUsageListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceUsageListResult.NextLink == nil || len(*p.current.ResourceUsageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceUsageListResponse page.
func (p *ResourceUsageListPager) PageResponse() ResourceUsageListResponse {
	return p.current
}

// RoutesListByEndpointPager provides operations for iterating over paged responses.
type RoutesListByEndpointPager struct {
	client    *RoutesClient
	current   RoutesListByEndpointResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RoutesListByEndpointResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RoutesListByEndpointPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RoutesListByEndpointPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RouteListResult.NextLink == nil || len(*p.current.RouteListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByEndpointHandleError(resp)
		return false
	}
	result, err := p.client.listByEndpointHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RoutesListByEndpointResponse page.
func (p *RoutesListByEndpointPager) PageResponse() RoutesListByEndpointResponse {
	return p.current
}

// RuleSetsListByProfilePager provides operations for iterating over paged responses.
type RuleSetsListByProfilePager struct {
	client    *RuleSetsClient
	current   RuleSetsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RuleSetsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RuleSetsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RuleSetsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RuleSetListResult.NextLink == nil || len(*p.current.RuleSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RuleSetsListByProfileResponse page.
func (p *RuleSetsListByProfilePager) PageResponse() RuleSetsListByProfileResponse {
	return p.current
}

// RuleSetsListResourceUsagePager provides operations for iterating over paged responses.
type RuleSetsListResourceUsagePager struct {
	client    *RuleSetsClient
	current   RuleSetsListResourceUsageResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RuleSetsListResourceUsageResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RuleSetsListResourceUsagePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RuleSetsListResourceUsagePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsagesListResult.NextLink == nil || len(*p.current.UsagesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listResourceUsageHandleError(resp)
		return false
	}
	result, err := p.client.listResourceUsageHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RuleSetsListResourceUsageResponse page.
func (p *RuleSetsListResourceUsagePager) PageResponse() RuleSetsListResourceUsageResponse {
	return p.current
}

// RulesListByRuleSetPager provides operations for iterating over paged responses.
type RulesListByRuleSetPager struct {
	client    *RulesClient
	current   RulesListByRuleSetResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RulesListByRuleSetResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RulesListByRuleSetPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RulesListByRuleSetPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RuleListResult.NextLink == nil || len(*p.current.RuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByRuleSetHandleError(resp)
		return false
	}
	result, err := p.client.listByRuleSetHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RulesListByRuleSetResponse page.
func (p *RulesListByRuleSetPager) PageResponse() RulesListByRuleSetResponse {
	return p.current
}

// SecretsListByProfilePager provides operations for iterating over paged responses.
type SecretsListByProfilePager struct {
	client    *SecretsClient
	current   SecretsListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SecretsListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SecretsListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SecretsListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecretListResult.NextLink == nil || len(*p.current.SecretListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SecretsListByProfileResponse page.
func (p *SecretsListByProfilePager) PageResponse() SecretsListByProfileResponse {
	return p.current
}

// SecurityPoliciesListByProfilePager provides operations for iterating over paged responses.
type SecurityPoliciesListByProfilePager struct {
	client    *SecurityPoliciesClient
	current   SecurityPoliciesListByProfileResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SecurityPoliciesListByProfileResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SecurityPoliciesListByProfilePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SecurityPoliciesListByProfilePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SecurityPolicyListResult.NextLink == nil || len(*p.current.SecurityPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProfileHandleError(resp)
		return false
	}
	result, err := p.client.listByProfileHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SecurityPoliciesListByProfileResponse page.
func (p *SecurityPoliciesListByProfilePager) PageResponse() SecurityPoliciesListByProfileResponse {
	return p.current
}
