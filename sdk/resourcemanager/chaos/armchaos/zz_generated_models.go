//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// ActionClassification provides polymorphic access to related types.
// Call the interface's GetAction() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Action
type ActionClassification interface {
	// GetAction returns the Action content of the underlying type.
	GetAction() *Action
}

// Action - Model that represents the base action model.
type Action struct {
	// REQUIRED; String that represents a Capability URN.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Enum that discriminates between action models.
	Type *string `json:"type,omitempty"`
}

// GetAction implements the ActionClassification interface for type Action.
func (a *Action) GetAction() *Action { return a }

// ActionStatus - Model that represents the an action and its status.
type ActionStatus struct {
	// READ-ONLY; The id of the action status.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the action status.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The status of the action.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The array of targets.
	Targets []*ExperimentExecutionActionTargetDetailsProperties `json:"targets,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ActionStatus.
func (a ActionStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "targets", a.Targets)
	return json.Marshal(objectMap)
}

// Branch - Model that represents a branch in the step.
type Branch struct {
	// REQUIRED; List of actions.
	Actions []ActionClassification `json:"actions,omitempty"`

	// REQUIRED; String of the branch name.
	Name *string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Branch.
func (b Branch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", b.Actions)
	populate(objectMap, "name", b.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Branch.
func (b *Branch) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			b.Actions, err = unmarshalActionClassificationArray(val)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BranchStatus - Model that represents the a list of actions and action statuses.
type BranchStatus struct {
	// READ-ONLY; The array of actions.
	Actions []*ActionStatus `json:"actions,omitempty" azure:"ro"`

	// READ-ONLY; The id of the branch status.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the branch status.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The status of the branch.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BranchStatus.
func (b BranchStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", b.Actions)
	populate(objectMap, "id", b.ID)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "status", b.Status)
	return json.Marshal(objectMap)
}

// CapabilitiesCreateOrUpdateOptions contains the optional parameters for the Capabilities.CreateOrUpdate method.
type CapabilitiesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CapabilitiesDeleteOptions contains the optional parameters for the Capabilities.Delete method.
type CapabilitiesDeleteOptions struct {
	// placeholder for future optional parameters
}

// CapabilitiesGetOptions contains the optional parameters for the Capabilities.Get method.
type CapabilitiesGetOptions struct {
	// placeholder for future optional parameters
}

// CapabilitiesListOptions contains the optional parameters for the Capabilities.List method.
type CapabilitiesListOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
}

// Capability - Model that represents a Capability resource.
type Capability struct {
	Resource
	// READ-ONLY; The properties of a capability resource.
	Properties *CapabilityProperties `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; The standard system metadata of a resource type.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Capability.
func (c Capability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "systemData", c.SystemData)
	return json.Marshal(objectMap)
}

// CapabilityListResult - Model that represents a list of Capability resources and a link for pagination.
type CapabilityListResult struct {
	// READ-ONLY; URL to retrieve the next page of Capability resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Capability resources.
	Value []*Capability `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CapabilityListResult.
func (c CapabilityListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CapabilityProperties - Model that represents the Capability properties model.
type CapabilityProperties struct {
	// READ-ONLY; Localized string of the description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; URL to retrieve JSON schema of the Capability parameters.
	ParametersSchema *string `json:"parametersSchema,omitempty" azure:"ro"`

	// READ-ONLY; String of the Publisher that this Capability extends.
	Publisher *string `json:"publisher,omitempty" azure:"ro"`

	// READ-ONLY; String of the Target Type that this Capability extends.
	TargetType *string `json:"targetType,omitempty" azure:"ro"`

	// READ-ONLY; String of the URN for this Capability Type.
	Urn *string `json:"urn,omitempty" azure:"ro"`
}

// CapabilityType - Model that represents a Capability Type resource.
type CapabilityType struct {
	Resource
	// Location of the Capability Type resource.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; The properties of the capability type resource.
	Properties *CapabilityTypeProperties `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; The system metadata properties of the capability type resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CapabilityType.
func (c CapabilityType) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "systemData", c.SystemData)
	return json.Marshal(objectMap)
}

// CapabilityTypeListResult - Model that represents a list of Capability Type resources and a link for pagination.
type CapabilityTypeListResult struct {
	// READ-ONLY; URL to retrieve the next page of Capability Type resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Capability Type resources.
	Value []*CapabilityType `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CapabilityTypeListResult.
func (c CapabilityTypeListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CapabilityTypeProperties - Model that represents the Capability Type properties model.
type CapabilityTypeProperties struct {
	// READ-ONLY; Localized string of the description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Localized string of the display name.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; URL to retrieve JSON schema of the Capability Type parameters.
	ParametersSchema *string `json:"parametersSchema,omitempty" azure:"ro"`

	// READ-ONLY; String of the Publisher that this Capability Type extends.
	Publisher *string `json:"publisher,omitempty" azure:"ro"`

	// READ-ONLY; String of the Target Type that this Capability Type extends.
	TargetType *string `json:"targetType,omitempty" azure:"ro"`

	// READ-ONLY; String of the URN for this Capability Type.
	Urn *string `json:"urn,omitempty" azure:"ro"`
}

// CapabilityTypesGetOptions contains the optional parameters for the CapabilityTypes.Get method.
type CapabilityTypesGetOptions struct {
	// placeholder for future optional parameters
}

// CapabilityTypesListOptions contains the optional parameters for the CapabilityTypes.List method.
type CapabilityTypesListOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// Experiment - Model that represents a Experiment resource.
type Experiment struct {
	TrackedResource
	// REQUIRED; The properties of the experiment resource.
	Properties *ExperimentProperties `json:"properties,omitempty"`

	// The identity of the experiment resource.
	Identity *ResourceIdentity `json:"identity,omitempty"`

	// READ-ONLY; The system metadata of the experiment resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Experiment.
func (e Experiment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "identity", e.Identity)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "systemData", e.SystemData)
	return json.Marshal(objectMap)
}

// ExperimentCancelOperationResult - Model that represents the result of a cancel Experiment operation.
type ExperimentCancelOperationResult struct {
	// READ-ONLY; String of the Experiment name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; URL to retrieve the Experiment status.
	StatusURL *string `json:"statusUrl,omitempty" azure:"ro"`
}

// ExperimentExecutionActionTargetDetailsError - Model that represents the Experiment action target details error model.
type ExperimentExecutionActionTargetDetailsError struct {
	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error message
	Message *string `json:"message,omitempty" azure:"ro"`
}

// ExperimentExecutionActionTargetDetailsProperties - Model that represents the Experiment action target details properties model.
type ExperimentExecutionActionTargetDetailsProperties struct {
	// READ-ONLY; String that represents the completed date time.
	CompletedDateUTC *time.Time `json:"completedDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; The error of the action.
	Error *ExperimentExecutionActionTargetDetailsError `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the failed date time.
	FailedDateUTC *time.Time `json:"failedDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; The status of the execution.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The target for the action.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentExecutionActionTargetDetailsProperties.
func (e ExperimentExecutionActionTargetDetailsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "completedDateUtc", e.CompletedDateUTC)
	populate(objectMap, "error", e.Error)
	populateTimeRFC3339(objectMap, "failedDateUtc", e.FailedDateUTC)
	populate(objectMap, "status", e.Status)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExperimentExecutionActionTargetDetailsProperties.
func (e *ExperimentExecutionActionTargetDetailsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "completedDateUtc":
			err = unpopulateTimeRFC3339(val, &e.CompletedDateUTC)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &e.Error)
			delete(rawMsg, key)
		case "failedDateUtc":
			err = unpopulateTimeRFC3339(val, &e.FailedDateUTC)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		case "target":
			err = unpopulate(val, &e.Target)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ExperimentExecutionDetails - Model that represents the execution details of a Experiment.
type ExperimentExecutionDetails struct {
	// READ-ONLY; String of the fully qualified resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; String of the resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The properties of the experiment execution details.
	Properties *ExperimentExecutionDetailsProperties `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; String of the resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExperimentExecutionDetailsListResult - Model that represents a list of Experiment execution details and a link for pagination.
type ExperimentExecutionDetailsListResult struct {
	// READ-ONLY; URL to retrieve the next page of Experiment execution details.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Experiment execution details.
	Value []*ExperimentExecutionDetails `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentExecutionDetailsListResult.
func (e ExperimentExecutionDetailsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// ExperimentExecutionDetailsProperties - Model that represents the Experiment execution details properties model.
type ExperimentExecutionDetailsProperties struct {
	// READ-ONLY; String that represents the created date time.
	CreatedDateUTC *time.Time `json:"createdDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; The id of the experiment.
	ExperimentID *string `json:"experimentId,omitempty" azure:"ro"`

	// READ-ONLY; The reason why the execution failed.
	FailureReason *string `json:"failureReason,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the last action date time.
	LastActionDateUTC *time.Time `json:"lastActionDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; The information of the experiment run.
	RunInformation *ExperimentExecutionDetailsPropertiesRunInformation `json:"runInformation,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the start date time.
	StartDateUTC *time.Time `json:"startDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; The value of the status of the experiment execution.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the stop date time.
	StopDateUTC *time.Time `json:"stopDateUtc,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentExecutionDetailsProperties.
func (e ExperimentExecutionDetailsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdDateUtc", e.CreatedDateUTC)
	populate(objectMap, "experimentId", e.ExperimentID)
	populate(objectMap, "failureReason", e.FailureReason)
	populateTimeRFC3339(objectMap, "lastActionDateUtc", e.LastActionDateUTC)
	populate(objectMap, "runInformation", e.RunInformation)
	populateTimeRFC3339(objectMap, "startDateUtc", e.StartDateUTC)
	populate(objectMap, "status", e.Status)
	populateTimeRFC3339(objectMap, "stopDateUtc", e.StopDateUTC)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExperimentExecutionDetailsProperties.
func (e *ExperimentExecutionDetailsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateUtc":
			err = unpopulateTimeRFC3339(val, &e.CreatedDateUTC)
			delete(rawMsg, key)
		case "experimentId":
			err = unpopulate(val, &e.ExperimentID)
			delete(rawMsg, key)
		case "failureReason":
			err = unpopulate(val, &e.FailureReason)
			delete(rawMsg, key)
		case "lastActionDateUtc":
			err = unpopulateTimeRFC3339(val, &e.LastActionDateUTC)
			delete(rawMsg, key)
		case "runInformation":
			err = unpopulate(val, &e.RunInformation)
			delete(rawMsg, key)
		case "startDateUtc":
			err = unpopulateTimeRFC3339(val, &e.StartDateUTC)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		case "stopDateUtc":
			err = unpopulateTimeRFC3339(val, &e.StopDateUTC)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ExperimentExecutionDetailsPropertiesRunInformation - The information of the experiment run.
type ExperimentExecutionDetailsPropertiesRunInformation struct {
	// READ-ONLY; The steps of the experiment run.
	Steps []*StepStatus `json:"steps,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentExecutionDetailsPropertiesRunInformation.
func (e ExperimentExecutionDetailsPropertiesRunInformation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "steps", e.Steps)
	return json.Marshal(objectMap)
}

// ExperimentListResult - Model that represents a list of Experiment resources and a link for pagination.
type ExperimentListResult struct {
	// READ-ONLY; URL to retrieve the next page of Experiment resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Experiment resources.
	Value []*Experiment `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentListResult.
func (e ExperimentListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// ExperimentProperties - Model that represents the Experiment properties model.
type ExperimentProperties struct {
	// REQUIRED; List of selectors.
	Selectors []*Selector `json:"selectors,omitempty"`

	// REQUIRED; List of steps.
	Steps []*Step `json:"steps,omitempty"`

	// A boolean value that indicates if experiment should be started on creation or not.
	StartOnCreation *bool `json:"startOnCreation,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentProperties.
func (e ExperimentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "selectors", e.Selectors)
	populate(objectMap, "startOnCreation", e.StartOnCreation)
	populate(objectMap, "steps", e.Steps)
	return json.Marshal(objectMap)
}

// ExperimentStartOperationResult - Model that represents the result of a start Experiment operation.
type ExperimentStartOperationResult struct {
	// READ-ONLY; String of the Experiment name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; URL to retrieve the Experiment status.
	StatusURL *string `json:"statusUrl,omitempty" azure:"ro"`
}

// ExperimentStatus - Model that represents the status of a Experiment.
type ExperimentStatus struct {
	// The properties of experiment execution status.
	Properties *ExperimentStatusProperties `json:"properties,omitempty"`

	// READ-ONLY; String of the fully qualified resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; String of the resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; String of the resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExperimentStatusListResult - Model that represents a list of Experiment statuses and a link for pagination.
type ExperimentStatusListResult struct {
	// READ-ONLY; URL to retrieve the next page of Experiment statuses.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Experiment statuses.
	Value []*ExperimentStatus `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentStatusListResult.
func (e ExperimentStatusListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", e.NextLink)
	populate(objectMap, "value", e.Value)
	return json.Marshal(objectMap)
}

// ExperimentStatusProperties - Model that represents the Experiment status properties model.
type ExperimentStatusProperties struct {
	// READ-ONLY; String that represents the created date time of a Experiment.
	CreatedDateUTC *time.Time `json:"createdDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the end date time of a Experiment.
	EndDateUTC *time.Time `json:"endDateUtc,omitempty" azure:"ro"`

	// READ-ONLY; String that represents the status of a Experiment.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExperimentStatusProperties.
func (e ExperimentStatusProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdDateUtc", e.CreatedDateUTC)
	populateTimeRFC3339(objectMap, "endDateUtc", e.EndDateUTC)
	populate(objectMap, "status", e.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExperimentStatusProperties.
func (e *ExperimentStatusProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateUtc":
			err = unpopulateTimeRFC3339(val, &e.CreatedDateUTC)
			delete(rawMsg, key)
		case "endDateUtc":
			err = unpopulateTimeRFC3339(val, &e.EndDateUTC)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &e.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ExperimentsBeginCancelOptions contains the optional parameters for the Experiments.BeginCancel method.
type ExperimentsBeginCancelOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsBeginCreateOrUpdateOptions contains the optional parameters for the Experiments.BeginCreateOrUpdate method.
type ExperimentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsDeleteOptions contains the optional parameters for the Experiments.Delete method.
type ExperimentsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsGetExecutionDetailsOptions contains the optional parameters for the Experiments.GetExecutionDetails method.
type ExperimentsGetExecutionDetailsOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsGetOptions contains the optional parameters for the Experiments.Get method.
type ExperimentsGetOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsGetStatusOptions contains the optional parameters for the Experiments.GetStatus method.
type ExperimentsGetStatusOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsListAllOptions contains the optional parameters for the Experiments.ListAll method.
type ExperimentsListAllOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
	// Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered.
	Running *bool
}

// ExperimentsListAllStatusesOptions contains the optional parameters for the Experiments.ListAllStatuses method.
type ExperimentsListAllStatusesOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsListExecutionDetailsOptions contains the optional parameters for the Experiments.ListExecutionDetails method.
type ExperimentsListExecutionDetailsOptions struct {
	// placeholder for future optional parameters
}

// ExperimentsListOptions contains the optional parameters for the Experiments.List method.
type ExperimentsListOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
	// Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered.
	Running *bool
}

// ExperimentsStartOptions contains the optional parameters for the Experiments.Start method.
type ExperimentsStartOptions struct {
	// placeholder for future optional parameters
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType `json:"actionType,omitempty" azure:"ro"`

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
	Origin *Origin `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual
	// Machine".
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListAllOptions contains the optional parameters for the Operations.ListAll method.
type OperationsListAllOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ResourceIdentity - The managed identity of a resource.
type ResourceIdentity struct {
	// REQUIRED; String of the resource identity type.
	Type *ResourceIdentityType `json:"type,omitempty"`

	// READ-ONLY; GUID that represents the principal ID of this resource identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; GUID that represents the tenant ID of this resource identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// Selector - Model that represents a selector in the Experiment resource.
type Selector struct {
	// REQUIRED; String of the selector ID.
	ID *string `json:"id,omitempty"`

	// REQUIRED; List of Target references.
	Targets []*TargetReference `json:"targets,omitempty"`

	// REQUIRED; Enum of the selector type.
	Type *SelectorType `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Selector.
func (s Selector) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "targets", s.Targets)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// Step - Model that represents a step in the Experiment resource.
type Step struct {
	// REQUIRED; List of branches.
	Branches []*Branch `json:"branches,omitempty"`

	// REQUIRED; String of the step name.
	Name *string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Step.
func (s Step) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "branches", s.Branches)
	populate(objectMap, "name", s.Name)
	return json.Marshal(objectMap)
}

// StepStatus - Model that represents the a list of branches and branch statuses.
type StepStatus struct {
	// READ-ONLY; The array of branches.
	Branches []*BranchStatus `json:"branches,omitempty" azure:"ro"`

	// READ-ONLY; The id of the step.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the step.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The value of the status of the step.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StepStatus.
func (s StepStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "branches", s.Branches)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "status", s.Status)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Target - Model that represents a Target resource.
type Target struct {
	Resource
	// REQUIRED; The properties of the target resource.
	Properties map[string]interface{} `json:"properties,omitempty"`

	// Location of the target resource.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; The system metadata of the target resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Target.
func (t Target) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "systemData", t.SystemData)
	return json.Marshal(objectMap)
}

// TargetListResult - Model that represents a list of Target resources and a link for pagination.
type TargetListResult struct {
	// READ-ONLY; URL to retrieve the next page of Target resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Target resources.
	Value []*Target `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetListResult.
func (t TargetListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TargetReference - Model that represents a reference to a Target in the selector.
type TargetReference struct {
	// REQUIRED; String of the resource ID of a Target resource.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Enum of the Target reference type.
	Type *string `json:"type,omitempty"`
}

// TargetType - Model that represents a Target Type resource.
type TargetType struct {
	Resource
	// REQUIRED; The properties of the target type resource.
	Properties *TargetTypeProperties `json:"properties,omitempty"`

	// Location of the Target Type resource.
	Location *string `json:"location,omitempty"`

	// READ-ONLY; The system metadata properties of the target type resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetType.
func (t TargetType) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "systemData", t.SystemData)
	return json.Marshal(objectMap)
}

// TargetTypeListResult - Model that represents a list of Target Type resources and a link for pagination.
type TargetTypeListResult struct {
	// READ-ONLY; URL to retrieve the next page of Target Type resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Target Type resources.
	Value []*TargetType `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetTypeListResult.
func (t TargetTypeListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TargetTypeProperties - Model that represents the base Target Type properties model.
type TargetTypeProperties struct {
	// READ-ONLY; Localized string of the description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Localized string of the display name.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; URL to retrieve JSON schema of the Target Type properties.
	PropertiesSchema *string `json:"propertiesSchema,omitempty" azure:"ro"`

	// READ-ONLY; List of resource types this Target Type can extend.
	ResourceTypes []*string `json:"resourceTypes,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetTypeProperties.
func (t TargetTypeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", t.Description)
	populate(objectMap, "displayName", t.DisplayName)
	populate(objectMap, "propertiesSchema", t.PropertiesSchema)
	populate(objectMap, "resourceTypes", t.ResourceTypes)
	return json.Marshal(objectMap)
}

// TargetTypesGetOptions contains the optional parameters for the TargetTypes.Get method.
type TargetTypesGetOptions struct {
	// placeholder for future optional parameters
}

// TargetTypesListOptions contains the optional parameters for the TargetTypes.List method.
type TargetTypesListOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
}

// TargetsCreateOrUpdateOptions contains the optional parameters for the Targets.CreateOrUpdate method.
type TargetsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// TargetsDeleteOptions contains the optional parameters for the Targets.Delete method.
type TargetsDeleteOptions struct {
	// placeholder for future optional parameters
}

// TargetsGetOptions contains the optional parameters for the Targets.Get method.
type TargetsGetOptions struct {
	// placeholder for future optional parameters
}

// TargetsListOptions contains the optional parameters for the Targets.List method.
type TargetsListOptions struct {
	// String that sets the continuation token.
	ContinuationToken *string
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
