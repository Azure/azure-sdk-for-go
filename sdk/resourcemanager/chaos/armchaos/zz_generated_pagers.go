//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armchaos

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CapabilitiesListPager provides operations for iterating over paged responses.
type CapabilitiesListPager struct {
	client    *CapabilitiesClient
	current   CapabilitiesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CapabilitiesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CapabilitiesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CapabilitiesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilityListResult.NextLink == nil || len(*p.current.CapabilityListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CapabilitiesListResponse page.
func (p *CapabilitiesListPager) PageResponse() CapabilitiesListResponse {
	return p.current
}

// CapabilityTypesListPager provides operations for iterating over paged responses.
type CapabilityTypesListPager struct {
	client    *CapabilityTypesClient
	current   CapabilityTypesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CapabilityTypesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CapabilityTypesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CapabilityTypesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CapabilityTypeListResult.NextLink == nil || len(*p.current.CapabilityTypeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CapabilityTypesListResponse page.
func (p *CapabilityTypesListPager) PageResponse() CapabilityTypesListResponse {
	return p.current
}

// ExperimentsListAllPager provides operations for iterating over paged responses.
type ExperimentsListAllPager struct {
	client    *ExperimentsClient
	current   ExperimentsListAllResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsListAllResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ExperimentsListAllPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ExperimentsListAllPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentListResult.NextLink == nil || len(*p.current.ExperimentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ExperimentsListAllResponse page.
func (p *ExperimentsListAllPager) PageResponse() ExperimentsListAllResponse {
	return p.current
}

// ExperimentsListAllStatusesPager provides operations for iterating over paged responses.
type ExperimentsListAllStatusesPager struct {
	client    *ExperimentsClient
	current   ExperimentsListAllStatusesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsListAllStatusesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ExperimentsListAllStatusesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ExperimentsListAllStatusesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentStatusListResult.NextLink == nil || len(*p.current.ExperimentStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAllStatusesHandleError(resp)
		return false
	}
	result, err := p.client.listAllStatusesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ExperimentsListAllStatusesResponse page.
func (p *ExperimentsListAllStatusesPager) PageResponse() ExperimentsListAllStatusesResponse {
	return p.current
}

// ExperimentsListExecutionDetailsPager provides operations for iterating over paged responses.
type ExperimentsListExecutionDetailsPager struct {
	client    *ExperimentsClient
	current   ExperimentsListExecutionDetailsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsListExecutionDetailsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ExperimentsListExecutionDetailsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ExperimentsListExecutionDetailsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentExecutionDetailsListResult.NextLink == nil || len(*p.current.ExperimentExecutionDetailsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listExecutionDetailsHandleError(resp)
		return false
	}
	result, err := p.client.listExecutionDetailsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ExperimentsListExecutionDetailsResponse page.
func (p *ExperimentsListExecutionDetailsPager) PageResponse() ExperimentsListExecutionDetailsResponse {
	return p.current
}

// ExperimentsListPager provides operations for iterating over paged responses.
type ExperimentsListPager struct {
	client    *ExperimentsClient
	current   ExperimentsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ExperimentsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ExperimentsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ExperimentsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExperimentListResult.NextLink == nil || len(*p.current.ExperimentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ExperimentsListResponse page.
func (p *ExperimentsListPager) PageResponse() ExperimentsListResponse {
	return p.current
}

// OperationsListAllPager provides operations for iterating over paged responses.
type OperationsListAllPager struct {
	client    *OperationsClient
	current   OperationsListAllResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListAllResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListAllPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListAllPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListAllResponse page.
func (p *OperationsListAllPager) PageResponse() OperationsListAllResponse {
	return p.current
}

// TargetTypesListPager provides operations for iterating over paged responses.
type TargetTypesListPager struct {
	client    *TargetTypesClient
	current   TargetTypesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetTypesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TargetTypesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TargetTypesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetTypeListResult.NextLink == nil || len(*p.current.TargetTypeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TargetTypesListResponse page.
func (p *TargetTypesListPager) PageResponse() TargetTypesListResponse {
	return p.current
}

// TargetsListPager provides operations for iterating over paged responses.
type TargetsListPager struct {
	client    *TargetsClient
	current   TargetsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TargetsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TargetsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetListResult.NextLink == nil || len(*p.current.TargetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TargetsListResponse page.
func (p *TargetsListPager) PageResponse() TargetsListResponse {
	return p.current
}
