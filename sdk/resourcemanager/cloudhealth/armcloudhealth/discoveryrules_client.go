// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcloudhealth

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// DiscoveryRulesClient contains the methods for the DiscoveryRules group.
// Don't use this type directly, use NewDiscoveryRulesClient() instead.
type DiscoveryRulesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDiscoveryRulesClient creates a new instance of DiscoveryRulesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiscoveryRulesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DiscoveryRulesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiscoveryRulesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Create a DiscoveryRule
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - healthModelName - Name of health model resource
//   - discoveryRuleName - Name of the discovery rule. Must be unique within a health model.
//   - resource - Resource create parameters.
//   - options - DiscoveryRulesClientCreateOrUpdateOptions contains the optional parameters for the DiscoveryRulesClient.CreateOrUpdate
//     method.
func (client *DiscoveryRulesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, resource DiscoveryRule, options *DiscoveryRulesClientCreateOrUpdateOptions) (DiscoveryRulesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "DiscoveryRulesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, healthModelName, discoveryRuleName, resource, options)
	if err != nil {
		return DiscoveryRulesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoveryRulesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return DiscoveryRulesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DiscoveryRulesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, resource DiscoveryRule, _ *DiscoveryRulesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if healthModelName == "" {
		return nil, errors.New("parameter healthModelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{healthModelName}", url.PathEscape(healthModelName))
	if discoveryRuleName == "" {
		return nil, errors.New("parameter discoveryRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveryRuleName}", url.PathEscape(discoveryRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DiscoveryRulesClient) createOrUpdateHandleResponse(resp *http.Response) (DiscoveryRulesClientCreateOrUpdateResponse, error) {
	result := DiscoveryRulesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryRule); err != nil {
		return DiscoveryRulesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Delete a DiscoveryRule
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - healthModelName - Name of health model resource
//   - discoveryRuleName - Name of the discovery rule. Must be unique within a health model.
//   - options - DiscoveryRulesClientDeleteOptions contains the optional parameters for the DiscoveryRulesClient.Delete method.
func (client *DiscoveryRulesClient) Delete(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, options *DiscoveryRulesClientDeleteOptions) (DiscoveryRulesClientDeleteResponse, error) {
	var err error
	const operationName = "DiscoveryRulesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, healthModelName, discoveryRuleName, options)
	if err != nil {
		return DiscoveryRulesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoveryRulesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DiscoveryRulesClientDeleteResponse{}, err
	}
	return DiscoveryRulesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DiscoveryRulesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, _ *DiscoveryRulesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if healthModelName == "" {
		return nil, errors.New("parameter healthModelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{healthModelName}", url.PathEscape(healthModelName))
	if discoveryRuleName == "" {
		return nil, errors.New("parameter discoveryRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveryRuleName}", url.PathEscape(discoveryRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a DiscoveryRule
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - healthModelName - Name of health model resource
//   - discoveryRuleName - Name of the discovery rule. Must be unique within a health model.
//   - options - DiscoveryRulesClientGetOptions contains the optional parameters for the DiscoveryRulesClient.Get method.
func (client *DiscoveryRulesClient) Get(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, options *DiscoveryRulesClientGetOptions) (DiscoveryRulesClientGetResponse, error) {
	var err error
	const operationName = "DiscoveryRulesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, healthModelName, discoveryRuleName, options)
	if err != nil {
		return DiscoveryRulesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiscoveryRulesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DiscoveryRulesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DiscoveryRulesClient) getCreateRequest(ctx context.Context, resourceGroupName string, healthModelName string, discoveryRuleName string, _ *DiscoveryRulesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules/{discoveryRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if healthModelName == "" {
		return nil, errors.New("parameter healthModelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{healthModelName}", url.PathEscape(healthModelName))
	if discoveryRuleName == "" {
		return nil, errors.New("parameter discoveryRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{discoveryRuleName}", url.PathEscape(discoveryRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DiscoveryRulesClient) getHandleResponse(resp *http.Response) (DiscoveryRulesClientGetResponse, error) {
	result := DiscoveryRulesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryRule); err != nil {
		return DiscoveryRulesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByHealthModelPager - List DiscoveryRule resources by HealthModel
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - healthModelName - Name of health model resource
//   - options - DiscoveryRulesClientListByHealthModelOptions contains the optional parameters for the DiscoveryRulesClient.NewListByHealthModelPager
//     method.
func (client *DiscoveryRulesClient) NewListByHealthModelPager(resourceGroupName string, healthModelName string, options *DiscoveryRulesClientListByHealthModelOptions) *runtime.Pager[DiscoveryRulesClientListByHealthModelResponse] {
	return runtime.NewPager(runtime.PagingHandler[DiscoveryRulesClientListByHealthModelResponse]{
		More: func(page DiscoveryRulesClientListByHealthModelResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DiscoveryRulesClientListByHealthModelResponse) (DiscoveryRulesClientListByHealthModelResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DiscoveryRulesClient.NewListByHealthModelPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByHealthModelCreateRequest(ctx, resourceGroupName, healthModelName, options)
			}, nil)
			if err != nil {
				return DiscoveryRulesClientListByHealthModelResponse{}, err
			}
			return client.listByHealthModelHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByHealthModelCreateRequest creates the ListByHealthModel request.
func (client *DiscoveryRulesClient) listByHealthModelCreateRequest(ctx context.Context, resourceGroupName string, healthModelName string, options *DiscoveryRulesClientListByHealthModelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}/discoveryrules"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if healthModelName == "" {
		return nil, errors.New("parameter healthModelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{healthModelName}", url.PathEscape(healthModelName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	if options != nil && options.Timestamp != nil {
		reqQP.Set("timestamp", options.Timestamp.Format(time.RFC3339Nano))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByHealthModelHandleResponse handles the ListByHealthModel response.
func (client *DiscoveryRulesClient) listByHealthModelHandleResponse(resp *http.Response) (DiscoveryRulesClientListByHealthModelResponse, error) {
	result := DiscoveryRulesClientListByHealthModelResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiscoveryRuleListResult); err != nil {
		return DiscoveryRulesClientListByHealthModelResponse{}, err
	}
	return result, nil
}
