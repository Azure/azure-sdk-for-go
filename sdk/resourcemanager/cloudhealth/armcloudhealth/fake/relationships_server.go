// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cloudhealth/armcloudhealth"
	"net/http"
	"net/url"
	"regexp"
	"time"
)

// RelationshipsServer is a fake server for instances of the armcloudhealth.RelationshipsClient type.
type RelationshipsServer struct {
	// CreateOrUpdate is the fake for method RelationshipsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, healthModelName string, relationshipName string, resource armcloudhealth.Relationship, options *armcloudhealth.RelationshipsClientCreateOrUpdateOptions) (resp azfake.Responder[armcloudhealth.RelationshipsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method RelationshipsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, healthModelName string, relationshipName string, options *armcloudhealth.RelationshipsClientDeleteOptions) (resp azfake.Responder[armcloudhealth.RelationshipsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method RelationshipsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, healthModelName string, relationshipName string, options *armcloudhealth.RelationshipsClientGetOptions) (resp azfake.Responder[armcloudhealth.RelationshipsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByHealthModelPager is the fake for method RelationshipsClient.NewListByHealthModelPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByHealthModelPager func(resourceGroupName string, healthModelName string, options *armcloudhealth.RelationshipsClientListByHealthModelOptions) (resp azfake.PagerResponder[armcloudhealth.RelationshipsClientListByHealthModelResponse])
}

// NewRelationshipsServerTransport creates a new instance of RelationshipsServerTransport with the provided implementation.
// The returned RelationshipsServerTransport instance is connected to an instance of armcloudhealth.RelationshipsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRelationshipsServerTransport(srv *RelationshipsServer) *RelationshipsServerTransport {
	return &RelationshipsServerTransport{
		srv:                       srv,
		newListByHealthModelPager: newTracker[azfake.PagerResponder[armcloudhealth.RelationshipsClientListByHealthModelResponse]](),
	}
}

// RelationshipsServerTransport connects instances of armcloudhealth.RelationshipsClient to instances of RelationshipsServer.
// Don't use this type directly, use NewRelationshipsServerTransport instead.
type RelationshipsServerTransport struct {
	srv                       *RelationshipsServer
	newListByHealthModelPager *tracker[azfake.PagerResponder[armcloudhealth.RelationshipsClientListByHealthModelResponse]]
}

// Do implements the policy.Transporter interface for RelationshipsServerTransport.
func (r *RelationshipsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToMethodFake(req, method)
}

func (r *RelationshipsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if relationshipsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = relationshipsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "RelationshipsClient.CreateOrUpdate":
				res.resp, res.err = r.dispatchCreateOrUpdate(req)
			case "RelationshipsClient.Delete":
				res.resp, res.err = r.dispatchDelete(req)
			case "RelationshipsClient.Get":
				res.resp, res.err = r.dispatchGet(req)
			case "RelationshipsClient.NewListByHealthModelPager":
				res.resp, res.err = r.dispatchNewListByHealthModelPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *RelationshipsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/relationships/(?P<relationshipName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armcloudhealth.Relationship](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	relationshipNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("relationshipName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, healthModelNameParam, relationshipNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Relationship, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RelationshipsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if r.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/relationships/(?P<relationshipName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	relationshipNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("relationshipName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Delete(req.Context(), resourceGroupNameParam, healthModelNameParam, relationshipNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RelationshipsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/relationships/(?P<relationshipName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	relationshipNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("relationshipName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Get(req.Context(), resourceGroupNameParam, healthModelNameParam, relationshipNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Relationship, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RelationshipsServerTransport) dispatchNewListByHealthModelPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListByHealthModelPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByHealthModelPager not implemented")}
	}
	newListByHealthModelPager := r.newListByHealthModelPager.get(req)
	if newListByHealthModelPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/relationships`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		timestampUnescaped, err := url.QueryUnescape(qp.Get("timestamp"))
		if err != nil {
			return nil, err
		}
		timestampParam, err := parseOptional(timestampUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
		if err != nil {
			return nil, err
		}
		var options *armcloudhealth.RelationshipsClientListByHealthModelOptions
		if timestampParam != nil {
			options = &armcloudhealth.RelationshipsClientListByHealthModelOptions{
				Timestamp: timestampParam,
			}
		}
		resp := r.srv.NewListByHealthModelPager(resourceGroupNameParam, healthModelNameParam, options)
		newListByHealthModelPager = &resp
		r.newListByHealthModelPager.add(req, newListByHealthModelPager)
		server.PagerResponderInjectNextLinks(newListByHealthModelPager, req, func(page *armcloudhealth.RelationshipsClientListByHealthModelResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByHealthModelPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListByHealthModelPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByHealthModelPager) {
		r.newListByHealthModelPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to RelationshipsServerTransport
var relationshipsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
