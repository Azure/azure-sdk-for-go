// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armcloudhealth.ClientFactory type.
type ServerFactory struct {
	// AuthenticationSettingsServer contains the fakes for client AuthenticationSettingsClient
	AuthenticationSettingsServer AuthenticationSettingsServer

	// DiscoveryRulesServer contains the fakes for client DiscoveryRulesClient
	DiscoveryRulesServer DiscoveryRulesServer

	// EntitiesServer contains the fakes for client EntitiesClient
	EntitiesServer EntitiesServer

	// HealthModelsServer contains the fakes for client HealthModelsClient
	HealthModelsServer HealthModelsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// RelationshipsServer contains the fakes for client RelationshipsClient
	RelationshipsServer RelationshipsServer

	// SignalDefinitionsServer contains the fakes for client SignalDefinitionsClient
	SignalDefinitionsServer SignalDefinitionsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armcloudhealth.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armcloudhealth.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                            *ServerFactory
	trMu                           sync.Mutex
	trAuthenticationSettingsServer *AuthenticationSettingsServerTransport
	trDiscoveryRulesServer         *DiscoveryRulesServerTransport
	trEntitiesServer               *EntitiesServerTransport
	trHealthModelsServer           *HealthModelsServerTransport
	trOperationsServer             *OperationsServerTransport
	trRelationshipsServer          *RelationshipsServerTransport
	trSignalDefinitionsServer      *SignalDefinitionsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AuthenticationSettingsClient":
		initServer(s, &s.trAuthenticationSettingsServer, func() *AuthenticationSettingsServerTransport {
			return NewAuthenticationSettingsServerTransport(&s.srv.AuthenticationSettingsServer)
		})
		resp, err = s.trAuthenticationSettingsServer.Do(req)
	case "DiscoveryRulesClient":
		initServer(s, &s.trDiscoveryRulesServer, func() *DiscoveryRulesServerTransport {
			return NewDiscoveryRulesServerTransport(&s.srv.DiscoveryRulesServer)
		})
		resp, err = s.trDiscoveryRulesServer.Do(req)
	case "EntitiesClient":
		initServer(s, &s.trEntitiesServer, func() *EntitiesServerTransport { return NewEntitiesServerTransport(&s.srv.EntitiesServer) })
		resp, err = s.trEntitiesServer.Do(req)
	case "HealthModelsClient":
		initServer(s, &s.trHealthModelsServer, func() *HealthModelsServerTransport { return NewHealthModelsServerTransport(&s.srv.HealthModelsServer) })
		resp, err = s.trHealthModelsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "RelationshipsClient":
		initServer(s, &s.trRelationshipsServer, func() *RelationshipsServerTransport {
			return NewRelationshipsServerTransport(&s.srv.RelationshipsServer)
		})
		resp, err = s.trRelationshipsServer.Do(req)
	case "SignalDefinitionsClient":
		initServer(s, &s.trSignalDefinitionsServer, func() *SignalDefinitionsServerTransport {
			return NewSignalDefinitionsServerTransport(&s.srv.SignalDefinitionsServer)
		})
		resp, err = s.trSignalDefinitionsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
