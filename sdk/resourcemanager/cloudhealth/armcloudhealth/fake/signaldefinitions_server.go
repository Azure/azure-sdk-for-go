// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cloudhealth/armcloudhealth"
	"net/http"
	"net/url"
	"regexp"
	"time"
)

// SignalDefinitionsServer is a fake server for instances of the armcloudhealth.SignalDefinitionsClient type.
type SignalDefinitionsServer struct {
	// CreateOrUpdate is the fake for method SignalDefinitionsClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, healthModelName string, signalDefinitionName string, resource armcloudhealth.SignalDefinition, options *armcloudhealth.SignalDefinitionsClientCreateOrUpdateOptions) (resp azfake.Responder[armcloudhealth.SignalDefinitionsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SignalDefinitionsClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, healthModelName string, signalDefinitionName string, options *armcloudhealth.SignalDefinitionsClientDeleteOptions) (resp azfake.Responder[armcloudhealth.SignalDefinitionsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SignalDefinitionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, healthModelName string, signalDefinitionName string, options *armcloudhealth.SignalDefinitionsClientGetOptions) (resp azfake.Responder[armcloudhealth.SignalDefinitionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByHealthModelPager is the fake for method SignalDefinitionsClient.NewListByHealthModelPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByHealthModelPager func(resourceGroupName string, healthModelName string, options *armcloudhealth.SignalDefinitionsClientListByHealthModelOptions) (resp azfake.PagerResponder[armcloudhealth.SignalDefinitionsClientListByHealthModelResponse])
}

// NewSignalDefinitionsServerTransport creates a new instance of SignalDefinitionsServerTransport with the provided implementation.
// The returned SignalDefinitionsServerTransport instance is connected to an instance of armcloudhealth.SignalDefinitionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSignalDefinitionsServerTransport(srv *SignalDefinitionsServer) *SignalDefinitionsServerTransport {
	return &SignalDefinitionsServerTransport{
		srv:                       srv,
		newListByHealthModelPager: newTracker[azfake.PagerResponder[armcloudhealth.SignalDefinitionsClientListByHealthModelResponse]](),
	}
}

// SignalDefinitionsServerTransport connects instances of armcloudhealth.SignalDefinitionsClient to instances of SignalDefinitionsServer.
// Don't use this type directly, use NewSignalDefinitionsServerTransport instead.
type SignalDefinitionsServerTransport struct {
	srv                       *SignalDefinitionsServer
	newListByHealthModelPager *tracker[azfake.PagerResponder[armcloudhealth.SignalDefinitionsClientListByHealthModelResponse]]
}

// Do implements the policy.Transporter interface for SignalDefinitionsServerTransport.
func (s *SignalDefinitionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SignalDefinitionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if signalDefinitionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = signalDefinitionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SignalDefinitionsClient.CreateOrUpdate":
				res.resp, res.err = s.dispatchCreateOrUpdate(req)
			case "SignalDefinitionsClient.Delete":
				res.resp, res.err = s.dispatchDelete(req)
			case "SignalDefinitionsClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SignalDefinitionsClient.NewListByHealthModelPager":
				res.resp, res.err = s.dispatchNewListByHealthModelPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SignalDefinitionsServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/signaldefinitions/(?P<signalDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armcloudhealth.SignalDefinition](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	signalDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("signalDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, healthModelNameParam, signalDefinitionNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SignalDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SignalDefinitionsServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/signaldefinitions/(?P<signalDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	signalDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("signalDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), resourceGroupNameParam, healthModelNameParam, signalDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SignalDefinitionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/signaldefinitions/(?P<signalDefinitionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
	if err != nil {
		return nil, err
	}
	signalDefinitionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("signalDefinitionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, healthModelNameParam, signalDefinitionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SignalDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SignalDefinitionsServerTransport) dispatchNewListByHealthModelPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByHealthModelPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByHealthModelPager not implemented")}
	}
	newListByHealthModelPager := s.newListByHealthModelPager.get(req)
	if newListByHealthModelPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.CloudHealth/healthmodels/(?P<healthModelName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/signaldefinitions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		timestampUnescaped, err := url.QueryUnescape(qp.Get("timestamp"))
		if err != nil {
			return nil, err
		}
		timestampParam, err := parseOptional(timestampUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
		if err != nil {
			return nil, err
		}
		healthModelNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("healthModelName")])
		if err != nil {
			return nil, err
		}
		var options *armcloudhealth.SignalDefinitionsClientListByHealthModelOptions
		if timestampParam != nil {
			options = &armcloudhealth.SignalDefinitionsClientListByHealthModelOptions{
				Timestamp: timestampParam,
			}
		}
		resp := s.srv.NewListByHealthModelPager(resourceGroupNameParam, healthModelNameParam, options)
		newListByHealthModelPager = &resp
		s.newListByHealthModelPager.add(req, newListByHealthModelPager)
		server.PagerResponderInjectNextLinks(newListByHealthModelPager, req, func(page *armcloudhealth.SignalDefinitionsClientListByHealthModelResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByHealthModelPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByHealthModelPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByHealthModelPager) {
		s.newListByHealthModelPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SignalDefinitionsServerTransport
var signalDefinitionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
