//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armcognitiveservices.ClientFactory type.
type ServerFactory struct {
	AccountsServer                               AccountsServer
	CommitmentPlansServer                        CommitmentPlansServer
	CommitmentTiersServer                        CommitmentTiersServer
	DefenderForAISettingsServer                  DefenderForAISettingsServer
	DeletedAccountsServer                        DeletedAccountsServer
	DeploymentsServer                            DeploymentsServer
	EncryptionScopesServer                       EncryptionScopesServer
	LocationBasedModelCapacitiesServer           LocationBasedModelCapacitiesServer
	ManagementServer                             ManagementServer
	ModelCapacitiesServer                        ModelCapacitiesServer
	ModelsServer                                 ModelsServer
	NetworkSecurityPerimeterConfigurationsServer NetworkSecurityPerimeterConfigurationsServer
	OperationsServer                             OperationsServer
	PrivateEndpointConnectionsServer             PrivateEndpointConnectionsServer
	PrivateLinkResourcesServer                   PrivateLinkResourcesServer
	RaiBlocklistItemsServer                      RaiBlocklistItemsServer
	RaiBlocklistsServer                          RaiBlocklistsServer
	RaiContentFiltersServer                      RaiContentFiltersServer
	RaiPoliciesServer                            RaiPoliciesServer
	ResourceSKUsServer                           ResourceSKUsServer
	UsagesServer                                 UsagesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armcognitiveservices.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armcognitiveservices.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                            *ServerFactory
	trMu                                           sync.Mutex
	trAccountsServer                               *AccountsServerTransport
	trCommitmentPlansServer                        *CommitmentPlansServerTransport
	trCommitmentTiersServer                        *CommitmentTiersServerTransport
	trDefenderForAISettingsServer                  *DefenderForAISettingsServerTransport
	trDeletedAccountsServer                        *DeletedAccountsServerTransport
	trDeploymentsServer                            *DeploymentsServerTransport
	trEncryptionScopesServer                       *EncryptionScopesServerTransport
	trLocationBasedModelCapacitiesServer           *LocationBasedModelCapacitiesServerTransport
	trManagementServer                             *ManagementServerTransport
	trModelCapacitiesServer                        *ModelCapacitiesServerTransport
	trModelsServer                                 *ModelsServerTransport
	trNetworkSecurityPerimeterConfigurationsServer *NetworkSecurityPerimeterConfigurationsServerTransport
	trOperationsServer                             *OperationsServerTransport
	trPrivateEndpointConnectionsServer             *PrivateEndpointConnectionsServerTransport
	trPrivateLinkResourcesServer                   *PrivateLinkResourcesServerTransport
	trRaiBlocklistItemsServer                      *RaiBlocklistItemsServerTransport
	trRaiBlocklistsServer                          *RaiBlocklistsServerTransport
	trRaiContentFiltersServer                      *RaiContentFiltersServerTransport
	trRaiPoliciesServer                            *RaiPoliciesServerTransport
	trResourceSKUsServer                           *ResourceSKUsServerTransport
	trUsagesServer                                 *UsagesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AccountsClient":
		initServer(s, &s.trAccountsServer, func() *AccountsServerTransport { return NewAccountsServerTransport(&s.srv.AccountsServer) })
		resp, err = s.trAccountsServer.Do(req)
	case "CommitmentPlansClient":
		initServer(s, &s.trCommitmentPlansServer, func() *CommitmentPlansServerTransport {
			return NewCommitmentPlansServerTransport(&s.srv.CommitmentPlansServer)
		})
		resp, err = s.trCommitmentPlansServer.Do(req)
	case "CommitmentTiersClient":
		initServer(s, &s.trCommitmentTiersServer, func() *CommitmentTiersServerTransport {
			return NewCommitmentTiersServerTransport(&s.srv.CommitmentTiersServer)
		})
		resp, err = s.trCommitmentTiersServer.Do(req)
	case "DefenderForAISettingsClient":
		initServer(s, &s.trDefenderForAISettingsServer, func() *DefenderForAISettingsServerTransport {
			return NewDefenderForAISettingsServerTransport(&s.srv.DefenderForAISettingsServer)
		})
		resp, err = s.trDefenderForAISettingsServer.Do(req)
	case "DeletedAccountsClient":
		initServer(s, &s.trDeletedAccountsServer, func() *DeletedAccountsServerTransport {
			return NewDeletedAccountsServerTransport(&s.srv.DeletedAccountsServer)
		})
		resp, err = s.trDeletedAccountsServer.Do(req)
	case "DeploymentsClient":
		initServer(s, &s.trDeploymentsServer, func() *DeploymentsServerTransport { return NewDeploymentsServerTransport(&s.srv.DeploymentsServer) })
		resp, err = s.trDeploymentsServer.Do(req)
	case "EncryptionScopesClient":
		initServer(s, &s.trEncryptionScopesServer, func() *EncryptionScopesServerTransport {
			return NewEncryptionScopesServerTransport(&s.srv.EncryptionScopesServer)
		})
		resp, err = s.trEncryptionScopesServer.Do(req)
	case "LocationBasedModelCapacitiesClient":
		initServer(s, &s.trLocationBasedModelCapacitiesServer, func() *LocationBasedModelCapacitiesServerTransport {
			return NewLocationBasedModelCapacitiesServerTransport(&s.srv.LocationBasedModelCapacitiesServer)
		})
		resp, err = s.trLocationBasedModelCapacitiesServer.Do(req)
	case "ManagementClient":
		initServer(s, &s.trManagementServer, func() *ManagementServerTransport { return NewManagementServerTransport(&s.srv.ManagementServer) })
		resp, err = s.trManagementServer.Do(req)
	case "ModelCapacitiesClient":
		initServer(s, &s.trModelCapacitiesServer, func() *ModelCapacitiesServerTransport {
			return NewModelCapacitiesServerTransport(&s.srv.ModelCapacitiesServer)
		})
		resp, err = s.trModelCapacitiesServer.Do(req)
	case "ModelsClient":
		initServer(s, &s.trModelsServer, func() *ModelsServerTransport { return NewModelsServerTransport(&s.srv.ModelsServer) })
		resp, err = s.trModelsServer.Do(req)
	case "NetworkSecurityPerimeterConfigurationsClient":
		initServer(s, &s.trNetworkSecurityPerimeterConfigurationsServer, func() *NetworkSecurityPerimeterConfigurationsServerTransport {
			return NewNetworkSecurityPerimeterConfigurationsServerTransport(&s.srv.NetworkSecurityPerimeterConfigurationsServer)
		})
		resp, err = s.trNetworkSecurityPerimeterConfigurationsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionsClient":
		initServer(s, &s.trPrivateEndpointConnectionsServer, func() *PrivateEndpointConnectionsServerTransport {
			return NewPrivateEndpointConnectionsServerTransport(&s.srv.PrivateEndpointConnectionsServer)
		})
		resp, err = s.trPrivateEndpointConnectionsServer.Do(req)
	case "PrivateLinkResourcesClient":
		initServer(s, &s.trPrivateLinkResourcesServer, func() *PrivateLinkResourcesServerTransport {
			return NewPrivateLinkResourcesServerTransport(&s.srv.PrivateLinkResourcesServer)
		})
		resp, err = s.trPrivateLinkResourcesServer.Do(req)
	case "RaiBlocklistItemsClient":
		initServer(s, &s.trRaiBlocklistItemsServer, func() *RaiBlocklistItemsServerTransport {
			return NewRaiBlocklistItemsServerTransport(&s.srv.RaiBlocklistItemsServer)
		})
		resp, err = s.trRaiBlocklistItemsServer.Do(req)
	case "RaiBlocklistsClient":
		initServer(s, &s.trRaiBlocklistsServer, func() *RaiBlocklistsServerTransport {
			return NewRaiBlocklistsServerTransport(&s.srv.RaiBlocklistsServer)
		})
		resp, err = s.trRaiBlocklistsServer.Do(req)
	case "RaiContentFiltersClient":
		initServer(s, &s.trRaiContentFiltersServer, func() *RaiContentFiltersServerTransport {
			return NewRaiContentFiltersServerTransport(&s.srv.RaiContentFiltersServer)
		})
		resp, err = s.trRaiContentFiltersServer.Do(req)
	case "RaiPoliciesClient":
		initServer(s, &s.trRaiPoliciesServer, func() *RaiPoliciesServerTransport { return NewRaiPoliciesServerTransport(&s.srv.RaiPoliciesServer) })
		resp, err = s.trRaiPoliciesServer.Do(req)
	case "ResourceSKUsClient":
		initServer(s, &s.trResourceSKUsServer, func() *ResourceSKUsServerTransport { return NewResourceSKUsServerTransport(&s.srv.ResourceSKUsServer) })
		resp, err = s.trResourceSKUsServer.Do(req)
	case "UsagesClient":
		initServer(s, &s.trUsagesServer, func() *UsagesServerTransport { return NewUsagesServerTransport(&s.srv.UsagesServer) })
		resp, err = s.trUsagesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
