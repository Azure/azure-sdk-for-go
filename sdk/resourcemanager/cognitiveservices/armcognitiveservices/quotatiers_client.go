// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcognitiveservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// QuotaTiersClient contains the methods for the QuotaTiers group.
// Don't use this type directly, use NewQuotaTiersClient() instead.
type QuotaTiersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewQuotaTiersClient creates a new instance of QuotaTiersClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewQuotaTiersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*QuotaTiersClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &QuotaTiersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Update the Quota Tier information for the given subscription. QuotaTiers is a subscription wide resource
// type. It holds current tier information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - defaultParam - Default parameter. Leave the value as "default".
//   - tier - The parameters to provide for the quota tier resource.
//   - options - QuotaTiersClientCreateOrUpdateOptions contains the optional parameters for the QuotaTiersClient.CreateOrUpdate
//     method.
func (client *QuotaTiersClient) CreateOrUpdate(ctx context.Context, defaultParam string, tier QuotaTier, options *QuotaTiersClientCreateOrUpdateOptions) (QuotaTiersClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "QuotaTiersClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, defaultParam, tier, options)
	if err != nil {
		return QuotaTiersClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QuotaTiersClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return QuotaTiersClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *QuotaTiersClient) createOrUpdateCreateRequest(ctx context.Context, defaultParam string, tier QuotaTier, _ *QuotaTiersClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, tier); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *QuotaTiersClient) createOrUpdateHandleResponse(resp *http.Response) (QuotaTiersClientCreateOrUpdateResponse, error) {
	result := QuotaTiersClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaTier); err != nil {
		return QuotaTiersClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Get - Gets the Quota Tier information for the given subscription. QuotaTiers is a subscription wide resource type. It holds
// current tier information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - defaultParam - Default parameter. Leave the value as "default".
//   - options - QuotaTiersClientGetOptions contains the optional parameters for the QuotaTiersClient.Get method.
func (client *QuotaTiersClient) Get(ctx context.Context, defaultParam string, options *QuotaTiersClientGetOptions) (QuotaTiersClientGetResponse, error) {
	var err error
	const operationName = "QuotaTiersClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, defaultParam, options)
	if err != nil {
		return QuotaTiersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QuotaTiersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return QuotaTiersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *QuotaTiersClient) getCreateRequest(ctx context.Context, defaultParam string, _ *QuotaTiersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *QuotaTiersClient) getHandleResponse(resp *http.Response) (QuotaTiersClientGetResponse, error) {
	result := QuotaTiersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaTier); err != nil {
		return QuotaTiersClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Returns all the resources of a particular type belonging to a subscription.
//
// Generated from API version 2025-09-01
//   - options - QuotaTiersClientListBySubscriptionOptions contains the optional parameters for the QuotaTiersClient.NewListBySubscriptionPager
//     method.
func (client *QuotaTiersClient) NewListBySubscriptionPager(options *QuotaTiersClientListBySubscriptionOptions) *runtime.Pager[QuotaTiersClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[QuotaTiersClientListBySubscriptionResponse]{
		More: func(page QuotaTiersClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *QuotaTiersClientListBySubscriptionResponse) (QuotaTiersClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "QuotaTiersClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return QuotaTiersClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *QuotaTiersClient) listBySubscriptionCreateRequest(ctx context.Context, _ *QuotaTiersClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *QuotaTiersClient) listBySubscriptionHandleResponse(resp *http.Response) (QuotaTiersClientListBySubscriptionResponse, error) {
	result := QuotaTiersClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaTierListResult); err != nil {
		return QuotaTiersClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update the Quota Tier information for the given subscription. QuotaTiers is a subscription wide resource type.
// It holds current tier information.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-01
//   - defaultParam - Default parameter. Leave the value as "default".
//   - tier - The parameters to provide for the quota tier resource.
//   - options - QuotaTiersClientUpdateOptions contains the optional parameters for the QuotaTiersClient.Update method.
func (client *QuotaTiersClient) Update(ctx context.Context, defaultParam string, tier QuotaTier, options *QuotaTiersClientUpdateOptions) (QuotaTiersClientUpdateResponse, error) {
	var err error
	const operationName = "QuotaTiersClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, defaultParam, tier, options)
	if err != nil {
		return QuotaTiersClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return QuotaTiersClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return QuotaTiersClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *QuotaTiersClient) updateCreateRequest(ctx context.Context, defaultParam string, tier QuotaTier, _ *QuotaTiersClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/quotaTiers/{default}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, tier); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *QuotaTiersClient) updateHandleResponse(resp *http.Response) (QuotaTiersClientUpdateResponse, error) {
	result := QuotaTiersClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.QuotaTier); err != nil {
		return QuotaTiersClientUpdateResponse{}, err
	}
	return result, nil
}
