//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CommunicationServiceClient contains the methods for the CommunicationService group.
// Don't use this type directly, use NewCommunicationServiceClient() instead.
type CommunicationServiceClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewCommunicationServiceClient creates a new instance of CommunicationServiceClient with the specified values.
func NewCommunicationServiceClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *CommunicationServiceClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &CommunicationServiceClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CheckNameAvailability - Checks that the CommunicationService name is valid and is not already in use.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) CheckNameAvailability(ctx context.Context, options *CommunicationServiceCheckNameAvailabilityOptions) (CommunicationServiceCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, options)
	if err != nil {
		return CommunicationServiceCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceCheckNameAvailabilityResponse{}, client.checkNameAvailabilityHandleError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *CommunicationServiceClient) checkNameAvailabilityCreateRequest(ctx context.Context, options *CommunicationServiceCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.NameAvailabilityParameters != nil {
		return req, runtime.MarshalAsJSON(req, *options.NameAvailabilityParameters)
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *CommunicationServiceClient) checkNameAvailabilityHandleResponse(resp *http.Response) (CommunicationServiceCheckNameAvailabilityResponse, error) {
	result := CommunicationServiceCheckNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.NameAvailability); err != nil {
		return CommunicationServiceCheckNameAvailabilityResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *CommunicationServiceClient) checkNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreateOrUpdate - Create a new CommunicationService or update an existing CommunicationService.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginCreateOrUpdateOptions) (CommunicationServiceCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceCreateOrUpdatePollerResponse{}, err
	}
	result := CommunicationServiceCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("CommunicationServiceClient.CreateOrUpdate", "azure-async-operation", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return CommunicationServiceCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &CommunicationServiceCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Create a new CommunicationService or update an existing CommunicationService.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) createOrUpdate(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CommunicationServiceClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Parameters != nil {
		return req, runtime.MarshalAsJSON(req, *options.Parameters)
	}
	return req, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *CommunicationServiceClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Operation to delete a CommunicationService.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) BeginDelete(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginDeleteOptions) (CommunicationServiceDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceDeletePollerResponse{}, err
	}
	result := CommunicationServiceDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("CommunicationServiceClient.Delete", "location", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return CommunicationServiceDeletePollerResponse{}, err
	}
	result.Poller = &CommunicationServiceDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Operation to delete a CommunicationService.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) deleteOperation(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CommunicationServiceClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *CommunicationServiceClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get the CommunicationService and its properties.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) Get(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceGetOptions) (CommunicationServiceGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CommunicationServiceClient) getCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CommunicationServiceClient) getHandleResponse(resp *http.Response) (CommunicationServiceGetResponse, error) {
	result := CommunicationServiceGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceResource); err != nil {
		return CommunicationServiceGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *CommunicationServiceClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// LinkNotificationHub - Links an Azure Notification Hub to this communication service.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) LinkNotificationHub(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceLinkNotificationHubOptions) (CommunicationServiceLinkNotificationHubResponse, error) {
	req, err := client.linkNotificationHubCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceLinkNotificationHubResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceLinkNotificationHubResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceLinkNotificationHubResponse{}, client.linkNotificationHubHandleError(resp)
	}
	return client.linkNotificationHubHandleResponse(resp)
}

// linkNotificationHubCreateRequest creates the LinkNotificationHub request.
func (client *CommunicationServiceClient) linkNotificationHubCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceLinkNotificationHubOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/linkNotificationHub"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.LinkNotificationHubParameters != nil {
		return req, runtime.MarshalAsJSON(req, *options.LinkNotificationHubParameters)
	}
	return req, nil
}

// linkNotificationHubHandleResponse handles the LinkNotificationHub response.
func (client *CommunicationServiceClient) linkNotificationHubHandleResponse(resp *http.Response) (CommunicationServiceLinkNotificationHubResponse, error) {
	result := CommunicationServiceLinkNotificationHubResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LinkedNotificationHub); err != nil {
		return CommunicationServiceLinkNotificationHubResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// linkNotificationHubHandleError handles the LinkNotificationHub error response.
func (client *CommunicationServiceClient) linkNotificationHubHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - Handles requests to list all resources in a resource group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) ListByResourceGroup(resourceGroupName string, options *CommunicationServiceListByResourceGroupOptions) *CommunicationServiceListByResourceGroupPager {
	return &CommunicationServiceListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp CommunicationServiceListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.CommunicationServiceResourceList.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CommunicationServiceClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *CommunicationServiceListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CommunicationServiceClient) listByResourceGroupHandleResponse(resp *http.Response) (CommunicationServiceListByResourceGroupResponse, error) {
	result := CommunicationServiceListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceResourceList); err != nil {
		return CommunicationServiceListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *CommunicationServiceClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Handles requests to list all resources in a subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) ListBySubscription(options *CommunicationServiceListBySubscriptionOptions) *CommunicationServiceListBySubscriptionPager {
	return &CommunicationServiceListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp CommunicationServiceListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.CommunicationServiceResourceList.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CommunicationServiceClient) listBySubscriptionCreateRequest(ctx context.Context, options *CommunicationServiceListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CommunicationServiceClient) listBySubscriptionHandleResponse(resp *http.Response) (CommunicationServiceListBySubscriptionResponse, error) {
	result := CommunicationServiceListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceResourceList); err != nil {
		return CommunicationServiceListBySubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *CommunicationServiceClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListKeys - Get the access keys of the CommunicationService resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) ListKeys(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceListKeysOptions) (CommunicationServiceListKeysResponse, error) {
	req, err := client.listKeysCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceListKeysResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceListKeysResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceListKeysResponse{}, client.listKeysHandleError(resp)
	}
	return client.listKeysHandleResponse(resp)
}

// listKeysCreateRequest creates the ListKeys request.
func (client *CommunicationServiceClient) listKeysCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceListKeysOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/listKeys"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listKeysHandleResponse handles the ListKeys response.
func (client *CommunicationServiceClient) listKeysHandleResponse(resp *http.Response) (CommunicationServiceListKeysResponse, error) {
	result := CommunicationServiceListKeysResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceKeys); err != nil {
		return CommunicationServiceListKeysResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listKeysHandleError handles the ListKeys error response.
func (client *CommunicationServiceClient) listKeysHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// RegenerateKey - Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the same time.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) RegenerateKey(ctx context.Context, resourceGroupName string, communicationServiceName string, parameters RegenerateKeyParameters, options *CommunicationServiceRegenerateKeyOptions) (CommunicationServiceRegenerateKeyResponse, error) {
	req, err := client.regenerateKeyCreateRequest(ctx, resourceGroupName, communicationServiceName, parameters, options)
	if err != nil {
		return CommunicationServiceRegenerateKeyResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceRegenerateKeyResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceRegenerateKeyResponse{}, client.regenerateKeyHandleError(resp)
	}
	return client.regenerateKeyHandleResponse(resp)
}

// regenerateKeyCreateRequest creates the RegenerateKey request.
func (client *CommunicationServiceClient) regenerateKeyCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, parameters RegenerateKeyParameters, options *CommunicationServiceRegenerateKeyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/regenerateKey"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// regenerateKeyHandleResponse handles the RegenerateKey response.
func (client *CommunicationServiceClient) regenerateKeyHandleResponse(resp *http.Response) (CommunicationServiceRegenerateKeyResponse, error) {
	result := CommunicationServiceRegenerateKeyResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceKeys); err != nil {
		return CommunicationServiceRegenerateKeyResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// regenerateKeyHandleError handles the RegenerateKey error response.
func (client *CommunicationServiceClient) regenerateKeyHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Operation to update an existing CommunicationService.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CommunicationServiceClient) Update(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceUpdateOptions) (CommunicationServiceUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, communicationServiceName, options)
	if err != nil {
		return CommunicationServiceUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CommunicationServiceUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CommunicationServiceUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *CommunicationServiceClient) updateCreateRequest(ctx context.Context, resourceGroupName string, communicationServiceName string, options *CommunicationServiceUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationServiceName == "" {
		return nil, errors.New("parameter communicationServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationServiceName}", url.PathEscape(communicationServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-08-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Parameters != nil {
		return req, runtime.MarshalAsJSON(req, *options.Parameters)
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *CommunicationServiceClient) updateHandleResponse(resp *http.Response) (CommunicationServiceUpdateResponse, error) {
	result := CommunicationServiceUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunicationServiceResource); err != nil {
		return CommunicationServiceUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *CommunicationServiceClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
