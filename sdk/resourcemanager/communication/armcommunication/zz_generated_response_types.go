//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// ServiceClientCheckNameAvailabilityResponse contains the response from method ServiceClient.CheckNameAvailability.
type ServiceClientCheckNameAvailabilityResponse struct {
	ServiceClientCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientCheckNameAvailabilityResult contains the result from method ServiceClient.CheckNameAvailability.
type ServiceClientCheckNameAvailabilityResult struct {
	NameAvailability
}

// ServiceClientCreateOrUpdatePollerResponse contains the response from method ServiceClient.CreateOrUpdate.
type ServiceClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServiceClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServiceClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServiceClientCreateOrUpdateResponse, error) {
	respType := ServiceClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServiceResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServiceClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServiceClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServiceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServiceClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServiceClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServiceClientCreateOrUpdateResponse contains the response from method ServiceClient.CreateOrUpdate.
type ServiceClientCreateOrUpdateResponse struct {
	ServiceClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientCreateOrUpdateResult contains the result from method ServiceClient.CreateOrUpdate.
type ServiceClientCreateOrUpdateResult struct {
	ServiceResource
}

// ServiceClientDeletePollerResponse contains the response from method ServiceClient.Delete.
type ServiceClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServiceClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServiceClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServiceClientDeleteResponse, error) {
	respType := ServiceClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServiceClientDeletePollerResponse from the provided client and resume token.
func (l *ServiceClientDeletePollerResponse) Resume(ctx context.Context, client *ServiceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServiceClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServiceClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServiceClientDeleteResponse contains the response from method ServiceClient.Delete.
type ServiceClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientGetResponse contains the response from method ServiceClient.Get.
type ServiceClientGetResponse struct {
	ServiceClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientGetResult contains the result from method ServiceClient.Get.
type ServiceClientGetResult struct {
	ServiceResource
}

// ServiceClientLinkNotificationHubResponse contains the response from method ServiceClient.LinkNotificationHub.
type ServiceClientLinkNotificationHubResponse struct {
	ServiceClientLinkNotificationHubResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientLinkNotificationHubResult contains the result from method ServiceClient.LinkNotificationHub.
type ServiceClientLinkNotificationHubResult struct {
	LinkedNotificationHub
}

// ServiceClientListByResourceGroupResponse contains the response from method ServiceClient.ListByResourceGroup.
type ServiceClientListByResourceGroupResponse struct {
	ServiceClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientListByResourceGroupResult contains the result from method ServiceClient.ListByResourceGroup.
type ServiceClientListByResourceGroupResult struct {
	ServiceResourceList
}

// ServiceClientListBySubscriptionResponse contains the response from method ServiceClient.ListBySubscription.
type ServiceClientListBySubscriptionResponse struct {
	ServiceClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientListBySubscriptionResult contains the result from method ServiceClient.ListBySubscription.
type ServiceClientListBySubscriptionResult struct {
	ServiceResourceList
}

// ServiceClientListKeysResponse contains the response from method ServiceClient.ListKeys.
type ServiceClientListKeysResponse struct {
	ServiceClientListKeysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientListKeysResult contains the result from method ServiceClient.ListKeys.
type ServiceClientListKeysResult struct {
	ServiceKeys
}

// ServiceClientRegenerateKeyResponse contains the response from method ServiceClient.RegenerateKey.
type ServiceClientRegenerateKeyResponse struct {
	ServiceClientRegenerateKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientRegenerateKeyResult contains the result from method ServiceClient.RegenerateKey.
type ServiceClientRegenerateKeyResult struct {
	ServiceKeys
}

// ServiceClientUpdateResponse contains the response from method ServiceClient.Update.
type ServiceClientUpdateResponse struct {
	ServiceClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientUpdateResult contains the result from method ServiceClient.Update.
type ServiceClientUpdateResult struct {
	ServiceResource
}
