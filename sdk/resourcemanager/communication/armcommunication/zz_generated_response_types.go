//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcommunication

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// CommunicationServiceCheckNameAvailabilityResponse contains the response from method CommunicationService.CheckNameAvailability.
type CommunicationServiceCheckNameAvailabilityResponse struct {
	CommunicationServiceCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceCheckNameAvailabilityResult contains the result from method CommunicationService.CheckNameAvailability.
type CommunicationServiceCheckNameAvailabilityResult struct {
	NameAvailability
}

// CommunicationServiceCreateOrUpdatePollerResponse contains the response from method CommunicationService.CreateOrUpdate.
type CommunicationServiceCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CommunicationServiceCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CommunicationServiceCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CommunicationServiceCreateOrUpdateResponse, error) {
	respType := CommunicationServiceCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CommunicationServiceResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CommunicationServiceCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *CommunicationServiceCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *CommunicationServiceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CommunicationServiceClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &CommunicationServiceCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CommunicationServiceCreateOrUpdateResponse contains the response from method CommunicationService.CreateOrUpdate.
type CommunicationServiceCreateOrUpdateResponse struct {
	CommunicationServiceCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceCreateOrUpdateResult contains the result from method CommunicationService.CreateOrUpdate.
type CommunicationServiceCreateOrUpdateResult struct {
	CommunicationServiceResource
}

// CommunicationServiceDeletePollerResponse contains the response from method CommunicationService.Delete.
type CommunicationServiceDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CommunicationServiceDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CommunicationServiceDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CommunicationServiceDeleteResponse, error) {
	respType := CommunicationServiceDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CommunicationServiceDeletePollerResponse from the provided client and resume token.
func (l *CommunicationServiceDeletePollerResponse) Resume(ctx context.Context, client *CommunicationServiceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CommunicationServiceClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &CommunicationServiceDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CommunicationServiceDeleteResponse contains the response from method CommunicationService.Delete.
type CommunicationServiceDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceGetResponse contains the response from method CommunicationService.Get.
type CommunicationServiceGetResponse struct {
	CommunicationServiceGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceGetResult contains the result from method CommunicationService.Get.
type CommunicationServiceGetResult struct {
	CommunicationServiceResource
}

// CommunicationServiceLinkNotificationHubResponse contains the response from method CommunicationService.LinkNotificationHub.
type CommunicationServiceLinkNotificationHubResponse struct {
	CommunicationServiceLinkNotificationHubResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceLinkNotificationHubResult contains the result from method CommunicationService.LinkNotificationHub.
type CommunicationServiceLinkNotificationHubResult struct {
	LinkedNotificationHub
}

// CommunicationServiceListByResourceGroupResponse contains the response from method CommunicationService.ListByResourceGroup.
type CommunicationServiceListByResourceGroupResponse struct {
	CommunicationServiceListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceListByResourceGroupResult contains the result from method CommunicationService.ListByResourceGroup.
type CommunicationServiceListByResourceGroupResult struct {
	CommunicationServiceResourceList
}

// CommunicationServiceListBySubscriptionResponse contains the response from method CommunicationService.ListBySubscription.
type CommunicationServiceListBySubscriptionResponse struct {
	CommunicationServiceListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceListBySubscriptionResult contains the result from method CommunicationService.ListBySubscription.
type CommunicationServiceListBySubscriptionResult struct {
	CommunicationServiceResourceList
}

// CommunicationServiceListKeysResponse contains the response from method CommunicationService.ListKeys.
type CommunicationServiceListKeysResponse struct {
	CommunicationServiceListKeysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceListKeysResult contains the result from method CommunicationService.ListKeys.
type CommunicationServiceListKeysResult struct {
	CommunicationServiceKeys
}

// CommunicationServiceRegenerateKeyResponse contains the response from method CommunicationService.RegenerateKey.
type CommunicationServiceRegenerateKeyResponse struct {
	CommunicationServiceRegenerateKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceRegenerateKeyResult contains the result from method CommunicationService.RegenerateKey.
type CommunicationServiceRegenerateKeyResult struct {
	CommunicationServiceKeys
}

// CommunicationServiceUpdateResponse contains the response from method CommunicationService.Update.
type CommunicationServiceUpdateResponse struct {
	CommunicationServiceUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CommunicationServiceUpdateResult contains the result from method CommunicationService.Update.
type CommunicationServiceUpdateResult struct {
	CommunicationServiceResource
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}
