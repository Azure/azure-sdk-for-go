// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armcomputeschedule.ClientFactory type.
type ServerFactory struct {
	// OccurrenceExtensionServer contains the fakes for client OccurrenceExtensionClient
	OccurrenceExtensionServer OccurrenceExtensionServer

	// OccurrencesServer contains the fakes for client OccurrencesClient
	OccurrencesServer OccurrencesServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ScheduledActionExtensionServer contains the fakes for client ScheduledActionExtensionClient
	ScheduledActionExtensionServer ScheduledActionExtensionServer

	// ScheduledActionsServer contains the fakes for client ScheduledActionsClient
	ScheduledActionsServer ScheduledActionsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armcomputeschedule.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armcomputeschedule.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                              *ServerFactory
	trMu                             sync.Mutex
	trOccurrenceExtensionServer      *OccurrenceExtensionServerTransport
	trOccurrencesServer              *OccurrencesServerTransport
	trOperationsServer               *OperationsServerTransport
	trScheduledActionExtensionServer *ScheduledActionExtensionServerTransport
	trScheduledActionsServer         *ScheduledActionsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "OccurrenceExtensionClient":
		initServer(s, &s.trOccurrenceExtensionServer, func() *OccurrenceExtensionServerTransport {
			return NewOccurrenceExtensionServerTransport(&s.srv.OccurrenceExtensionServer)
		})
		resp, err = s.trOccurrenceExtensionServer.Do(req)
	case "OccurrencesClient":
		initServer(s, &s.trOccurrencesServer, func() *OccurrencesServerTransport { return NewOccurrencesServerTransport(&s.srv.OccurrencesServer) })
		resp, err = s.trOccurrencesServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "ScheduledActionExtensionClient":
		initServer(s, &s.trScheduledActionExtensionServer, func() *ScheduledActionExtensionServerTransport {
			return NewScheduledActionExtensionServerTransport(&s.srv.ScheduledActionExtensionServer)
		})
		resp, err = s.trScheduledActionExtensionServer.Do(req)
	case "ScheduledActionsClient":
		initServer(s, &s.trScheduledActionsServer, func() *ScheduledActionsServerTransport {
			return NewScheduledActionsServerTransport(&s.srv.ScheduledActionsServer)
		})
		resp, err = s.trScheduledActionsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
