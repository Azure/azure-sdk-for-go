//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcomputeschedule

import "time"

// CancelOperationsRequest - This is the request to cancel running operations in scheduled actions using the operation ids
type CancelOperationsRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The list of operation ids to cancel operations on
	OperationIDs []*string
}

// CancelOperationsResponse - This is the response from a cancel operations request
type CancelOperationsResponse struct {
	// REQUIRED; An array of resource operations that were successfully cancelled
	Results []*ResourceOperation
}

// DeallocateResourceOperationResponse - The response from a deallocate request
type DeallocateResourceOperationResponse struct {
	// REQUIRED; The description of the operation response
	Description *string

	// REQUIRED; The location of the deallocate request eg westus
	Location *string

	// REQUIRED; The type of resources used in the deallocate request eg virtual machines
	Type *string

	// The results from the deallocate request if no errors exist
	Results []*ResourceOperation
}

// ExecuteDeallocateRequest - The ExecuteDeallocateRequest request for executeDeallocate operations
type ExecuteDeallocateRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources
}

// ExecuteHibernateRequest - The ExecuteHibernateRequest request for executeHibernate operations
type ExecuteHibernateRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources
}

// ExecuteStartRequest - The ExecuteStartRequest request for executeStart operations
type ExecuteStartRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources
}

// ExecutionParameters - Extra details needed to run the user's request
type ExecutionParameters struct {
	// Details that could optimize the user's request
	OptimizationPreference *OptimizationPreference

	// Retry policy the user can pass
	RetryPolicy *RetryPolicy
}

// GetOperationErrorsRequest - This is the request to get errors per vm operations
type GetOperationErrorsRequest struct {
	// REQUIRED; The list of operation ids to query errors of
	OperationIDs []*string
}

// GetOperationErrorsResponse - This is the response from a get operations errors request
type GetOperationErrorsResponse struct {
	// REQUIRED; An array of operationids and their corresponding errors if any
	Results []*OperationErrorsResult
}

// GetOperationStatusRequest - This is the request to get operation status using operationids
type GetOperationStatusRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The list of operation ids to get the status of
	OperationIDs []*string
}

// GetOperationStatusResponse - This is the response from a get operations status request
type GetOperationStatusResponse struct {
	// REQUIRED; An array of resource operations based on their operation ids
	Results []*ResourceOperation
}

// HibernateResourceOperationResponse - The response from a Hibernate request
type HibernateResourceOperationResponse struct {
	// REQUIRED; The description of the operation response
	Description *string

	// REQUIRED; The location of the Hibernate request eg westus
	Location *string

	// REQUIRED; The type of resources used in the Hibernate request eg virtual machines
	Type *string

	// The results from the Hibernate request if no errors exist
	Results []*ResourceOperation
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationErrorDetails - This defines a list of operation errors associated with a unique operationId
type OperationErrorDetails struct {
	// REQUIRED; CRP operationid of the operation for deeper analysis
	CrpOperationID *string

	// REQUIRED; The error code of the operation
	ErrorCode *string

	// REQUIRED; The error details of the operation
	ErrorDetails *time.Time

	// REQUIRED; The timestamp of the error occurence
	TimeStamp *time.Time
}

// OperationErrorsResult - This is the first level of operation errors from the request when clients get errors per vm operation
type OperationErrorsResult struct {
	// The activation time of a vm operation
	ActivationTime *time.Time

	// The completion time of the operation if the operation was completed
	CompletedAt *time.Time

	// The creation time of the error result
	CreationTime *time.Time

	// A list of errors associated with the operationid
	OperationErrors []*OperationErrorDetails

	// The operationId identifying a vm operation
	OperationID *string

	// Request level error code
	RequestErrorCode *string

	// Request level error details
	RequestErrorDetails *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// ResourceOperation - High level response from an operation on a resource
type ResourceOperation struct {
	// Resource level error code if it exists
	ErrorCode *string

	// Resource level error details if they exist
	ErrorDetails *string

	// Details of the operation performed on a resource
	Operation *ResourceOperationDetails

	// Unique identifier for the resource involved in the operation, eg ArmId
	ResourceID *string
}

// ResourceOperationDetails - The details of a response from an operation on a resource
type ResourceOperationDetails struct {
	// REQUIRED; Deadline for the operation
	Deadline *time.Time

	// REQUIRED; Type of deadline of the operation
	DeadlineType *DeadlineType

	// REQUIRED; Type of operation performed on the resources
	OpType *ResourceOperationType

	// REQUIRED; Operation identifier for the unique operation
	OperationID *string

	// REQUIRED; Unique identifier for the resource involved in the operation, eg ArmId
	ResourceID *string

	// REQUIRED; Current state of the operation
	State *OperationState

	// REQUIRED; Subscription id attached to the request
	SubscriptionID *string

	// Time the operation was complete if errors are null
	CompletedAt *time.Time

	// Operation level errors if they exist
	ResourceOperationError *ResourceOperationError

	// Retry policy the user can pass
	RetryPolicy *RetryPolicy

	// Timezone for the operation
	TimeZone *string
}

// ResourceOperationError - These describe errors that occur at the resource level
type ResourceOperationError struct {
	// REQUIRED; Code for the error eg 404, 500
	ErrorCode *string

	// REQUIRED; Detailed message about the error
	ErrorDetails *string
}

// Resources - The resources needed for the user request
type Resources struct {
	// REQUIRED; The resource ids used for the request
	IDs []*string
}

// RetryPolicy - The retry policy for the user request
type RetryPolicy struct {
	// Retry count for user request
	RetryCount *int32

	// Retry window in minutes for user request
	RetryWindowInMinutes *int32
}

// Schedule - The schedule details for the user request
type Schedule struct {
	// REQUIRED; The deadline for the operation
	DeadLine *time.Time

	// REQUIRED; The deadlinetype of the operation, this can either be InitiateAt or CompleteBy
	DeadlineType *DeadlineType

	// REQUIRED; The timezone for the operation
	TimeZone *string
}

// StartResourceOperationResponse - The response from a start request
type StartResourceOperationResponse struct {
	// REQUIRED; The description of the operation response
	Description *string

	// REQUIRED; The location of the start request eg westus
	Location *string

	// REQUIRED; The type of resources used in the start request eg virtual machines
	Type *string

	// The results from the start request if no errors exist
	Results []*ResourceOperation
}

// SubmitDeallocateRequest - The deallocate request for resources
type SubmitDeallocateRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources

	// REQUIRED; The schedule for the request
	Schedule *Schedule
}

// SubmitHibernateRequest - This is the request for hibernate
type SubmitHibernateRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources

	// REQUIRED; The schedule for the request
	Schedule *Schedule
}

// SubmitStartRequest - This is the request for start
type SubmitStartRequest struct {
	// REQUIRED; Correlationid item
	Correlationid *string

	// REQUIRED; The execution parameters for the request
	ExecutionParameters *ExecutionParameters

	// REQUIRED; The resources for the request
	Resources *Resources

	// REQUIRED; The schedule for the request
	Schedule *Schedule
}
