//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfidentialledger

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AADBasedSecurityPrincipal - AAD based security principal with associated Ledger RoleName
type AADBasedSecurityPrincipal struct {
	// LedgerRole associated with the Security Principal of Ledger
	LedgerRoleName *LedgerRoleName `json:"ledgerRoleName,omitempty"`

	// UUID/GUID based Principal Id of the Security Principal
	PrincipalID *string `json:"principalId,omitempty"`

	// UUID/GUID based Tenant Id of the Security Principal
	TenantID *string `json:"tenantId,omitempty"`
}

// CertBasedSecurityPrincipal - Cert based security principal with Ledger RoleName
type CertBasedSecurityPrincipal struct {
	// Base64 encoded public key of the user cert (.pem or .cer)
	Cert *string `json:"cert,omitempty"`

	// LedgerRole associated with the Security Principal of Ledger
	LedgerRoleName *LedgerRoleName `json:"ledgerRoleName,omitempty"`
}

// CheckNameAvailabilityRequest - The check availability request body.
type CheckNameAvailabilityRequest struct {
	// The name of the resource for which availability needs to be checked.
	Name *string `json:"name,omitempty"`

	// The resource type.
	Type *string `json:"type,omitempty"`
}

// CheckNameAvailabilityResponse - The check availability result.
type CheckNameAvailabilityResponse struct {
	// Detailed reason why the given name is available.
	Message *string `json:"message,omitempty"`

	// Indicates if the resource name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// The reason why the given name is not available.
	Reason *CheckNameAvailabilityReason `json:"reason,omitempty"`
}

// ConfidentialLedger - Confidential Ledger. Contains the properties of Confidential Ledger Resource.
type ConfidentialLedger struct {
	Location
	Resource
	Tags
	// Properties of Confidential Ledger Resource.
	Properties *LedgerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfidentialLedger.
func (c ConfidentialLedger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	c.Location.marshalInternal(objectMap)
	c.Tags.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ConfidentialLedgerCheckNameAvailabilityOptions contains the optional parameters for the ConfidentialLedger.CheckNameAvailability method.
type ConfidentialLedgerCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// ConfidentialLedgerList - Object that includes an array of Confidential Ledgers and a possible link for next set.
type ConfidentialLedgerList struct {
	// The URL the client should use to fetch the next page (per server side paging).
	NextLink *string `json:"nextLink,omitempty"`

	// List of Confidential Ledgers
	Value []*ConfidentialLedger `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConfidentialLedgerList.
func (c ConfidentialLedgerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// LedgerBeginCreateOptions contains the optional parameters for the Ledger.BeginCreate method.
type LedgerBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// LedgerBeginDeleteOptions contains the optional parameters for the Ledger.BeginDelete method.
type LedgerBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// LedgerBeginUpdateOptions contains the optional parameters for the Ledger.BeginUpdate method.
type LedgerBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// LedgerGetOptions contains the optional parameters for the Ledger.Get method.
type LedgerGetOptions struct {
	// placeholder for future optional parameters
}

// LedgerListByResourceGroupOptions contains the optional parameters for the Ledger.ListByResourceGroup method.
type LedgerListByResourceGroupOptions struct {
	// The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'
	Filter *string
}

// LedgerListBySubscriptionOptions contains the optional parameters for the Ledger.ListBySubscription method.
type LedgerListBySubscriptionOptions struct {
	// The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'
	Filter *string
}

// LedgerProperties - Additional Confidential Ledger properties.
type LedgerProperties struct {
	// Array of all AAD based Security Principals.
	AADBasedSecurityPrincipals []*AADBasedSecurityPrincipal `json:"aadBasedSecurityPrincipals,omitempty"`

	// Array of all cert based Security Principals.
	CertBasedSecurityPrincipals []*CertBasedSecurityPrincipal `json:"certBasedSecurityPrincipals,omitempty"`

	// Type of Confidential Ledger
	LedgerType *LedgerType `json:"ledgerType,omitempty"`

	// READ-ONLY; Endpoint for accessing network identity.
	IdentityServiceURI *string `json:"identityServiceUri,omitempty" azure:"ro"`

	// READ-ONLY; Internal namespace for the Ledger
	LedgerInternalNamespace *string `json:"ledgerInternalNamespace,omitempty" azure:"ro"`

	// READ-ONLY; Unique name for the Confidential Ledger.
	LedgerName *string `json:"ledgerName,omitempty" azure:"ro"`

	// READ-ONLY; Endpoint for calling Ledger Service.
	LedgerURI *string `json:"ledgerUri,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of Ledger Resource
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LedgerProperties.
func (l LedgerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aadBasedSecurityPrincipals", l.AADBasedSecurityPrincipals)
	populate(objectMap, "certBasedSecurityPrincipals", l.CertBasedSecurityPrincipals)
	populate(objectMap, "identityServiceUri", l.IdentityServiceURI)
	populate(objectMap, "ledgerInternalNamespace", l.LedgerInternalNamespace)
	populate(objectMap, "ledgerName", l.LedgerName)
	populate(objectMap, "ledgerType", l.LedgerType)
	populate(objectMap, "ledgerUri", l.LedgerURI)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	return json.Marshal(objectMap)
}

// Location of the ARM Resource
type Location struct {
	// The Azure location where the Confidential Ledger is running.
	Location *string `json:"location,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Location.
func (l Location) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	l.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (l Location) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "location", l.Location)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Resource - An Azure resource.
type Resource struct {
	// READ-ONLY; Fully qualified resource Id for the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the Resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "type", r.Type)
}

// ResourceProviderOperationDefinition - Describes the Resource Provider Operation.
type ResourceProviderOperationDefinition struct {
	// Details about the operations
	Display *ResourceProviderOperationDisplay `json:"display,omitempty"`

	// Indicates whether the operation is data action or not.
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Resource provider operation name.
	Name *string `json:"name,omitempty"`
}

// ResourceProviderOperationDisplay - Describes the properties of the Operation.
type ResourceProviderOperationDisplay struct {
	// Description of the resource provider operation.
	Description *string `json:"description,omitempty"`

	// Name of the resource provider operation.
	Operation *string `json:"operation,omitempty"`

	// Name of the resource provider.
	Provider *string `json:"provider,omitempty"`

	// Name of the resource type.
	Resource *string `json:"resource,omitempty"`
}

// ResourceProviderOperationList - List containing this Resource Provider's available operations.
type ResourceProviderOperationList struct {
	// READ-ONLY; The URI that can be used to request the next page for list of Azure operations.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; Resource provider operations list.
	Value []*ResourceProviderOperationDefinition `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderOperationList.
func (r ResourceProviderOperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Tags for Confidential Ledger Resource
type Tags struct {
	// Additional tags for Confidential Ledger
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Tags.
func (t Tags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t Tags) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "tags", t.Tags)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
