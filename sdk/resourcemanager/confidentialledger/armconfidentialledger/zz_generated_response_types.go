//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfidentialledger

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// ConfidentialLedgerCheckNameAvailabilityResponse contains the response from method ConfidentialLedger.CheckNameAvailability.
type ConfidentialLedgerCheckNameAvailabilityResponse struct {
	ConfidentialLedgerCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfidentialLedgerCheckNameAvailabilityResult contains the result from method ConfidentialLedger.CheckNameAvailability.
type ConfidentialLedgerCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResponse
}

// LedgerCreatePollerResponse contains the response from method Ledger.Create.
type LedgerCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LedgerCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LedgerCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LedgerCreateResponse, error) {
	respType := LedgerCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ConfidentialLedger)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LedgerCreatePollerResponse from the provided client and resume token.
func (l *LedgerCreatePollerResponse) Resume(ctx context.Context, client *LedgerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LedgerClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &LedgerCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LedgerCreateResponse contains the response from method Ledger.Create.
type LedgerCreateResponse struct {
	LedgerCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerCreateResult contains the result from method Ledger.Create.
type LedgerCreateResult struct {
	ConfidentialLedger
}

// LedgerDeletePollerResponse contains the response from method Ledger.Delete.
type LedgerDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LedgerDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LedgerDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LedgerDeleteResponse, error) {
	respType := LedgerDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LedgerDeletePollerResponse from the provided client and resume token.
func (l *LedgerDeletePollerResponse) Resume(ctx context.Context, client *LedgerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LedgerClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &LedgerDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LedgerDeleteResponse contains the response from method Ledger.Delete.
type LedgerDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerGetResponse contains the response from method Ledger.Get.
type LedgerGetResponse struct {
	LedgerGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerGetResult contains the result from method Ledger.Get.
type LedgerGetResult struct {
	ConfidentialLedger
}

// LedgerListByResourceGroupResponse contains the response from method Ledger.ListByResourceGroup.
type LedgerListByResourceGroupResponse struct {
	LedgerListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerListByResourceGroupResult contains the result from method Ledger.ListByResourceGroup.
type LedgerListByResourceGroupResult struct {
	ConfidentialLedgerList
}

// LedgerListBySubscriptionResponse contains the response from method Ledger.ListBySubscription.
type LedgerListBySubscriptionResponse struct {
	LedgerListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerListBySubscriptionResult contains the result from method Ledger.ListBySubscription.
type LedgerListBySubscriptionResult struct {
	ConfidentialLedgerList
}

// LedgerUpdatePollerResponse contains the response from method Ledger.Update.
type LedgerUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LedgerUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LedgerUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LedgerUpdateResponse, error) {
	respType := LedgerUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ConfidentialLedger)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LedgerUpdatePollerResponse from the provided client and resume token.
func (l *LedgerUpdatePollerResponse) Resume(ctx context.Context, client *LedgerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LedgerClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &LedgerUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LedgerUpdateResponse contains the response from method Ledger.Update.
type LedgerUpdateResponse struct {
	LedgerUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LedgerUpdateResult contains the result from method Ledger.Update.
type LedgerUpdateResult struct {
	ConfidentialLedger
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	ResourceProviderOperationList
}
