//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconfluent

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// MarketplaceAgreementsCreateResponse contains the response from method MarketplaceAgreements.Create.
type MarketplaceAgreementsCreateResponse struct {
	MarketplaceAgreementsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceAgreementsCreateResult contains the result from method MarketplaceAgreements.Create.
type MarketplaceAgreementsCreateResult struct {
	ConfluentAgreementResource
}

// MarketplaceAgreementsListResponse contains the response from method MarketplaceAgreements.List.
type MarketplaceAgreementsListResponse struct {
	MarketplaceAgreementsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceAgreementsListResult contains the result from method MarketplaceAgreements.List.
type MarketplaceAgreementsListResult struct {
	ConfluentAgreementResourceListResponse
}

// OrganizationCreatePollerResponse contains the response from method Organization.Create.
type OrganizationCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *OrganizationCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l OrganizationCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (OrganizationCreateResponse, error) {
	respType := OrganizationCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OrganizationResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a OrganizationCreatePollerResponse from the provided client and resume token.
func (l *OrganizationCreatePollerResponse) Resume(ctx context.Context, client *OrganizationClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("OrganizationClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &OrganizationCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// OrganizationCreateResponse contains the response from method Organization.Create.
type OrganizationCreateResponse struct {
	OrganizationCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationCreateResult contains the result from method Organization.Create.
type OrganizationCreateResult struct {
	OrganizationResource
}

// OrganizationDeletePollerResponse contains the response from method Organization.Delete.
type OrganizationDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *OrganizationDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l OrganizationDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (OrganizationDeleteResponse, error) {
	respType := OrganizationDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a OrganizationDeletePollerResponse from the provided client and resume token.
func (l *OrganizationDeletePollerResponse) Resume(ctx context.Context, client *OrganizationClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("OrganizationClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &OrganizationDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// OrganizationDeleteResponse contains the response from method Organization.Delete.
type OrganizationDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationGetResponse contains the response from method Organization.Get.
type OrganizationGetResponse struct {
	OrganizationGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationGetResult contains the result from method Organization.Get.
type OrganizationGetResult struct {
	OrganizationResource
}

// OrganizationListByResourceGroupResponse contains the response from method Organization.ListByResourceGroup.
type OrganizationListByResourceGroupResponse struct {
	OrganizationListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationListByResourceGroupResult contains the result from method Organization.ListByResourceGroup.
type OrganizationListByResourceGroupResult struct {
	OrganizationResourceListResult
}

// OrganizationListBySubscriptionResponse contains the response from method Organization.ListBySubscription.
type OrganizationListBySubscriptionResponse struct {
	OrganizationListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationListBySubscriptionResult contains the result from method Organization.ListBySubscription.
type OrganizationListBySubscriptionResult struct {
	OrganizationResourceListResult
}

// OrganizationOperationsListResponse contains the response from method OrganizationOperations.List.
type OrganizationOperationsListResponse struct {
	OrganizationOperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationOperationsListResult contains the result from method OrganizationOperations.List.
type OrganizationOperationsListResult struct {
	OperationListResult
}

// OrganizationUpdateResponse contains the response from method Organization.Update.
type OrganizationUpdateResponse struct {
	OrganizationUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OrganizationUpdateResult contains the result from method Organization.Update.
type OrganizationUpdateResult struct {
	OrganizationResource
}

// ValidationsValidateOrganizationResponse contains the response from method Validations.ValidateOrganization.
type ValidationsValidateOrganizationResponse struct {
	ValidationsValidateOrganizationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ValidationsValidateOrganizationResult contains the result from method Validations.ValidateOrganization.
type ValidationsValidateOrganizationResult struct {
	OrganizationResource
}
