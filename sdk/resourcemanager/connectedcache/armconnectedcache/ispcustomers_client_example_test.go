//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armconnectedcache_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/connectedcache/armconnectedcache"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_ListBySubscription_MaximumSet_Gen.json
func ExampleIspCustomersClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewIspCustomersClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.IspCustomerResourceListResult = armconnectedcache.IspCustomerResourceListResult{
		// 	Value: []*armconnectedcache.IspCustomerResource{
		// 		{
		// 			Name: to.Ptr("MCCTPTest2"),
		// 			Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
		// 			ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rgConnectedCache/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest2"),
		// 			SystemData: &armconnectedcache.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				CreatedBy: to.Ptr("gambtqj"),
		// 				CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
		// 				LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key1878": to.Ptr("warz"),
		// 			},
		// 			Properties: &armconnectedcache.CustomerProperty{
		// 				AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
		// 					CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
		// 					CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
		// 					CustomerEmail: to.Ptr("zdjgibsidydyzm"),
		// 					CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
		// 					CustomerEntitlementSKUID: to.Ptr("b"),
		// 					CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
		// 					CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
		// 					CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
		// 					CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
		// 					CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
		// 					CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
		// 					CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
		// 					CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
		// 					CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
		// 					OptionalProperty1: to.Ptr("qhmwxza"),
		// 					OptionalProperty2: to.Ptr("l"),
		// 					OptionalProperty3: to.Ptr("mblwwvbie"),
		// 					OptionalProperty4: to.Ptr("vzuek"),
		// 					OptionalProperty5: to.Ptr("fzjodscdfcdr"),
		// 					PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					SignupPhaseStatusCode: to.Ptr[int32](4),
		// 					SignupPhaseStatusText: to.Ptr("q"),
		// 					SignupStatus: to.Ptr(true),
		// 					SignupStatusCode: to.Ptr[int32](21),
		// 					SignupStatusText: to.Ptr("dccv"),
		// 				},
		// 				Customer: &armconnectedcache.CustomerEntity{
		// 					ClientTenantID: to.Ptr("fproidkpgvpdnac"),
		// 					ContactEmail: to.Ptr("xquos"),
		// 					ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
		// 					ContactPhone: to.Ptr("vue"),
		// 					CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
		// 					CustomerID: to.Ptr("nqxuzybu"),
		// 					CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
		// 					DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
		// 					FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
		// 					IsEnterpriseManaged: to.Ptr(true),
		// 					IsEntitled: to.Ptr(true),
		// 					LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					ReleaseVersion: to.Ptr[int32](20),
		// 					ResendSignupCode: to.Ptr(true),
		// 					ShouldMigrate: to.Ptr(true),
		// 					SynchWithAzureAttemptsCount: to.Ptr[int32](17),
		// 					VerifySignupCode: to.Ptr(true),
		// 				},
		// 				Error: &armconnectedcache.ErrorDetail{
		// 					Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
		// 					Message: to.Ptr("okakgyfnmyob"),
		// 					Details: []*armconnectedcache.ErrorDetail{
		// 					},
		// 				},
		// 				ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
		// 				Status: to.Ptr("rhfjbcr"),
		// 				StatusCode: to.Ptr("jax"),
		// 				StatusDetails: to.Ptr("wmtksbahlbxrzaksogdbozfi"),
		// 				StatusText: to.Ptr("vsqydgruhuwuyipsplylgiqmkcv"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("MCCTPTest1"),
		// 			Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
		// 			ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/DoTest/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest1"),
		// 			SystemData: &armconnectedcache.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				CreatedBy: to.Ptr("gambtqj"),
		// 				CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
		// 				LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key2096": to.Ptr("uzoqqgqnnaiagdqilrjiezogx"),
		// 			},
		// 			Properties: &armconnectedcache.CustomerProperty{
		// 				AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
		// 					CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
		// 					CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
		// 					CustomerEmail: to.Ptr("zdjgibsidydyzm"),
		// 					CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
		// 					CustomerEntitlementSKUID: to.Ptr("b"),
		// 					CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
		// 					CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
		// 					CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
		// 					CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
		// 					CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
		// 					CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
		// 					CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
		// 					CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
		// 					CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
		// 					OptionalProperty1: to.Ptr("qhmwxza"),
		// 					OptionalProperty2: to.Ptr("l"),
		// 					OptionalProperty3: to.Ptr("mblwwvbie"),
		// 					OptionalProperty4: to.Ptr("vzuek"),
		// 					OptionalProperty5: to.Ptr("fzjodscdfcdr"),
		// 					PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					SignupPhaseStatusCode: to.Ptr[int32](4),
		// 					SignupPhaseStatusText: to.Ptr("q"),
		// 					SignupStatus: to.Ptr(true),
		// 					SignupStatusCode: to.Ptr[int32](21),
		// 					SignupStatusText: to.Ptr("dccv"),
		// 				},
		// 				Customer: &armconnectedcache.CustomerEntity{
		// 					ClientTenantID: to.Ptr("fproidkpgvpdnac"),
		// 					ContactEmail: to.Ptr("xquos"),
		// 					ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
		// 					ContactPhone: to.Ptr("vue"),
		// 					CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
		// 					CustomerID: to.Ptr("nqxuzybu"),
		// 					CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
		// 					DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
		// 					FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
		// 					IsEnterpriseManaged: to.Ptr(true),
		// 					IsEntitled: to.Ptr(true),
		// 					LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					ReleaseVersion: to.Ptr[int32](20),
		// 					ResendSignupCode: to.Ptr(true),
		// 					ShouldMigrate: to.Ptr(true),
		// 					SynchWithAzureAttemptsCount: to.Ptr[int32](17),
		// 					VerifySignupCode: to.Ptr(true),
		// 				},
		// 				Error: &armconnectedcache.ErrorDetail{
		// 					Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
		// 					Message: to.Ptr("okakgyfnmyob"),
		// 					Details: []*armconnectedcache.ErrorDetail{
		// 					},
		// 				},
		// 				ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
		// 				Status: to.Ptr("stwi"),
		// 				StatusCode: to.Ptr("oytrfgfhk"),
		// 				StatusDetails: to.Ptr("kvxqjbldcwqgslerajc"),
		// 				StatusText: to.Ptr("pqitblihwfrq"),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_ListByResourceGroup_MaximumSet_Gen.json
func ExampleIspCustomersClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewIspCustomersClient().NewListByResourceGroupPager("rgConnectedCache", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.IspCustomerResourceListResult = armconnectedcache.IspCustomerResourceListResult{
		// 	Value: []*armconnectedcache.IspCustomerResource{
		// 		{
		// 			Name: to.Ptr("MCCTPTest2"),
		// 			Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
		// 			ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rgConnectedCache/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest2"),
		// 			SystemData: &armconnectedcache.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				CreatedBy: to.Ptr("gambtqj"),
		// 				CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
		// 				LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key1878": to.Ptr("warz"),
		// 			},
		// 			Properties: &armconnectedcache.CustomerProperty{
		// 				AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
		// 					CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
		// 					CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
		// 					CustomerEmail: to.Ptr("zdjgibsidydyzm"),
		// 					CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
		// 					CustomerEntitlementSKUID: to.Ptr("b"),
		// 					CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
		// 					CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
		// 					CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
		// 					CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
		// 					CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
		// 					CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
		// 					CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
		// 					CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
		// 					CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
		// 					OptionalProperty1: to.Ptr("qhmwxza"),
		// 					OptionalProperty2: to.Ptr("l"),
		// 					OptionalProperty3: to.Ptr("mblwwvbie"),
		// 					OptionalProperty4: to.Ptr("vzuek"),
		// 					OptionalProperty5: to.Ptr("fzjodscdfcdr"),
		// 					PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					SignupPhaseStatusCode: to.Ptr[int32](4),
		// 					SignupPhaseStatusText: to.Ptr("q"),
		// 					SignupStatus: to.Ptr(true),
		// 					SignupStatusCode: to.Ptr[int32](21),
		// 					SignupStatusText: to.Ptr("dccv"),
		// 				},
		// 				Customer: &armconnectedcache.CustomerEntity{
		// 					ClientTenantID: to.Ptr("fproidkpgvpdnac"),
		// 					ContactEmail: to.Ptr("xquos"),
		// 					ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
		// 					ContactPhone: to.Ptr("vue"),
		// 					CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
		// 					CustomerID: to.Ptr("nqxuzybu"),
		// 					CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
		// 					DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
		// 					FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
		// 					IsEnterpriseManaged: to.Ptr(true),
		// 					IsEntitled: to.Ptr(true),
		// 					LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					ReleaseVersion: to.Ptr[int32](20),
		// 					ResendSignupCode: to.Ptr(true),
		// 					ShouldMigrate: to.Ptr(true),
		// 					SynchWithAzureAttemptsCount: to.Ptr[int32](17),
		// 					VerifySignupCode: to.Ptr(true),
		// 				},
		// 				Error: &armconnectedcache.ErrorDetail{
		// 					Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
		// 					Message: to.Ptr("okakgyfnmyob"),
		// 					Details: []*armconnectedcache.ErrorDetail{
		// 					},
		// 				},
		// 				ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
		// 				Status: to.Ptr("rhfjbcr"),
		// 				StatusCode: to.Ptr("jax"),
		// 				StatusDetails: to.Ptr("wmtksbahlbxrzaksogdbozfi"),
		// 				StatusText: to.Ptr("vsqydgruhuwuyipsplylgiqmkcv"),
		// 			},
		// 		},
		// 		{
		// 			Name: to.Ptr("MCCTPTest1"),
		// 			Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
		// 			ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/DoTest/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest1"),
		// 			SystemData: &armconnectedcache.SystemData{
		// 				CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				CreatedBy: to.Ptr("gambtqj"),
		// 				CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 				LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
		// 				LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
		// 				LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
		// 			},
		// 			Location: to.Ptr("westus"),
		// 			Tags: map[string]*string{
		// 				"key2096": to.Ptr("uzoqqgqnnaiagdqilrjiezogx"),
		// 			},
		// 			Properties: &armconnectedcache.CustomerProperty{
		// 				AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
		// 					CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
		// 					CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
		// 					CustomerEmail: to.Ptr("zdjgibsidydyzm"),
		// 					CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
		// 					CustomerEntitlementSKUID: to.Ptr("b"),
		// 					CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
		// 					CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
		// 					CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
		// 					CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
		// 					CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
		// 					CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
		// 					CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
		// 					CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
		// 					CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
		// 					CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
		// 					OptionalProperty1: to.Ptr("qhmwxza"),
		// 					OptionalProperty2: to.Ptr("l"),
		// 					OptionalProperty3: to.Ptr("mblwwvbie"),
		// 					OptionalProperty4: to.Ptr("vzuek"),
		// 					OptionalProperty5: to.Ptr("fzjodscdfcdr"),
		// 					PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					SignupPhaseStatusCode: to.Ptr[int32](4),
		// 					SignupPhaseStatusText: to.Ptr("q"),
		// 					SignupStatus: to.Ptr(true),
		// 					SignupStatusCode: to.Ptr[int32](21),
		// 					SignupStatusText: to.Ptr("dccv"),
		// 				},
		// 				Customer: &armconnectedcache.CustomerEntity{
		// 					ClientTenantID: to.Ptr("fproidkpgvpdnac"),
		// 					ContactEmail: to.Ptr("xquos"),
		// 					ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
		// 					ContactPhone: to.Ptr("vue"),
		// 					CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
		// 					CustomerID: to.Ptr("nqxuzybu"),
		// 					CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
		// 					DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
		// 					FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
		// 					IsEnterpriseManaged: to.Ptr(true),
		// 					IsEntitled: to.Ptr(true),
		// 					LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
		// 					ReleaseVersion: to.Ptr[int32](20),
		// 					ResendSignupCode: to.Ptr(true),
		// 					ShouldMigrate: to.Ptr(true),
		// 					SynchWithAzureAttemptsCount: to.Ptr[int32](17),
		// 					VerifySignupCode: to.Ptr(true),
		// 				},
		// 				Error: &armconnectedcache.ErrorDetail{
		// 					Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
		// 					Message: to.Ptr("okakgyfnmyob"),
		// 					Details: []*armconnectedcache.ErrorDetail{
		// 					},
		// 				},
		// 				ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
		// 				Status: to.Ptr("stwi"),
		// 				StatusCode: to.Ptr("oytrfgfhk"),
		// 				StatusDetails: to.Ptr("kvxqjbldcwqgslerajc"),
		// 				StatusText: to.Ptr("pqitblihwfrq"),
		// 			},
		// 	}},
		// }
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_Get_MaximumSet_Gen.json
func ExampleIspCustomersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewIspCustomersClient().Get(ctx, "rgConnectedCache", "cmcjfueweicolcjkwmsuvcj", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.IspCustomerResource = armconnectedcache.IspCustomerResource{
	// 	Name: to.Ptr("MCCTPTest2"),
	// 	Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
	// 	ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rgConnectedCache/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest2"),
	// 	SystemData: &armconnectedcache.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		CreatedBy: to.Ptr("gambtqj"),
	// 		CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
	// 		LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 		"key1878": to.Ptr("warz"),
	// 	},
	// 	Properties: &armconnectedcache.CustomerProperty{
	// 		AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
	// 			CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
	// 			CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
	// 			CustomerEmail: to.Ptr("zdjgibsidydyzm"),
	// 			CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
	// 			CustomerEntitlementSKUID: to.Ptr("b"),
	// 			CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
	// 			CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
	// 			CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
	// 			CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
	// 			CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
	// 			CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
	// 			CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
	// 			CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
	// 			CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
	// 			OptionalProperty1: to.Ptr("qhmwxza"),
	// 			OptionalProperty2: to.Ptr("l"),
	// 			OptionalProperty3: to.Ptr("mblwwvbie"),
	// 			OptionalProperty4: to.Ptr("vzuek"),
	// 			OptionalProperty5: to.Ptr("fzjodscdfcdr"),
	// 			PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			SignupPhaseStatusCode: to.Ptr[int32](4),
	// 			SignupPhaseStatusText: to.Ptr("q"),
	// 			SignupStatus: to.Ptr(true),
	// 			SignupStatusCode: to.Ptr[int32](21),
	// 			SignupStatusText: to.Ptr("dccv"),
	// 		},
	// 		Customer: &armconnectedcache.CustomerEntity{
	// 			ClientTenantID: to.Ptr("fproidkpgvpdnac"),
	// 			ContactEmail: to.Ptr("xquos"),
	// 			ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
	// 			ContactPhone: to.Ptr("vue"),
	// 			CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
	// 			CustomerID: to.Ptr("nqxuzybu"),
	// 			CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
	// 			DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
	// 			FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
	// 			IsEnterpriseManaged: to.Ptr(true),
	// 			IsEntitled: to.Ptr(true),
	// 			LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			ReleaseVersion: to.Ptr[int32](20),
	// 			ShouldMigrate: to.Ptr(true),
	// 			SynchWithAzureAttemptsCount: to.Ptr[int32](17),
	// 			VerifySignupCode: to.Ptr(true),
	// 		},
	// 		Error: &armconnectedcache.ErrorDetail{
	// 			Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
	// 			Message: to.Ptr("okakgyfnmyob"),
	// 			Details: []*armconnectedcache.ErrorDetail{
	// 			},
	// 		},
	// 		ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
	// 		Status: to.Ptr("rhfjbcr"),
	// 		StatusCode: to.Ptr("jax"),
	// 		StatusDetails: to.Ptr("wmtksbahlbxrzaksogdbozfi"),
	// 		StatusText: to.Ptr("vsqydgruhuwuyipsplylgiqmkcv"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_CreateOrUpdate_MaximumSet_Gen.json
func ExampleIspCustomersClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewIspCustomersClient().BeginCreateOrUpdate(ctx, "rgConnectedCache", "MccRPTest2", armconnectedcache.IspCustomerResource{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key1878": to.Ptr("warz"),
		},
		Properties: &armconnectedcache.CustomerProperty{
			AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
				CustomerAsn:                   to.Ptr("hgrelgnrtdkleisnepfolu"),
				CustomerEmail:                 to.Ptr("zdjgibsidydyzm"),
				CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t }()),
				CustomerEntitlementSKUGUID:    to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
				CustomerEntitlementSKUID:      to.Ptr("b"),
				CustomerEntitlementSKUName:    to.Ptr("waaqfijr"),
				CustomerTransitAsn:            to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
				CustomerTransitState:          to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
				OptionalProperty1:             to.Ptr("qhmwxza"),
				OptionalProperty2:             to.Ptr("l"),
				OptionalProperty3:             to.Ptr("mblwwvbie"),
				OptionalProperty4:             to.Ptr("vzuek"),
				OptionalProperty5:             to.Ptr("fzjodscdfcdr"),
			},
			Customer: &armconnectedcache.CustomerEntity{
				ClientTenantID:           to.Ptr("fproidkpgvpdnac"),
				ContactEmail:             to.Ptr("xquos"),
				ContactName:              to.Ptr("wxyqjoyoscmvimgwhpitxky"),
				ContactPhone:             to.Ptr("vue"),
				CustomerName:             to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
				FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
				IsEnterpriseManaged:      to.Ptr(true),
				IsEntitled:               to.Ptr(true),
				ReleaseVersion:           to.Ptr[int32](20),
				ResendSignupCode:         to.Ptr(true),
				ShouldMigrate:            to.Ptr(true),
				VerifySignupCode:         to.Ptr(true),
				VerifySignupPhrase:       to.Ptr("tprjvttkgmrqlsyicnidhm"),
			},
			Error: &armconnectedcache.ErrorDetail{},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.IspCustomerResource = armconnectedcache.IspCustomerResource{
	// 	Name: to.Ptr("MCCTPTest2"),
	// 	Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
	// 	ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rgConnectedCache/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest2"),
	// 	SystemData: &armconnectedcache.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		CreatedBy: to.Ptr("gambtqj"),
	// 		CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
	// 		LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 		"key1878": to.Ptr("warz"),
	// 	},
	// 	Properties: &armconnectedcache.CustomerProperty{
	// 		AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
	// 			CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
	// 			CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
	// 			CustomerEmail: to.Ptr("zdjgibsidydyzm"),
	// 			CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
	// 			CustomerEntitlementSKUID: to.Ptr("b"),
	// 			CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
	// 			CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
	// 			CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
	// 			CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
	// 			CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
	// 			CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
	// 			CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
	// 			CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
	// 			CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
	// 			OptionalProperty1: to.Ptr("qhmwxza"),
	// 			OptionalProperty2: to.Ptr("l"),
	// 			OptionalProperty3: to.Ptr("mblwwvbie"),
	// 			OptionalProperty4: to.Ptr("vzuek"),
	// 			OptionalProperty5: to.Ptr("fzjodscdfcdr"),
	// 			PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			SignupPhaseStatusCode: to.Ptr[int32](4),
	// 			SignupPhaseStatusText: to.Ptr("q"),
	// 			SignupStatus: to.Ptr(true),
	// 			SignupStatusCode: to.Ptr[int32](21),
	// 			SignupStatusText: to.Ptr("dccv"),
	// 		},
	// 		Customer: &armconnectedcache.CustomerEntity{
	// 			ClientTenantID: to.Ptr("fproidkpgvpdnac"),
	// 			ContactEmail: to.Ptr("xquos"),
	// 			ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
	// 			ContactPhone: to.Ptr("vue"),
	// 			CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
	// 			CustomerID: to.Ptr("nqxuzybu"),
	// 			CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
	// 			DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
	// 			FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
	// 			IsEnterpriseManaged: to.Ptr(true),
	// 			IsEntitled: to.Ptr(true),
	// 			LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			ReleaseVersion: to.Ptr[int32](20),
	// 			ResendSignupCode: to.Ptr(true),
	// 			ShouldMigrate: to.Ptr(true),
	// 			SynchWithAzureAttemptsCount: to.Ptr[int32](17),
	// 			VerifySignupCode: to.Ptr(true),
	// 		},
	// 		Error: &armconnectedcache.ErrorDetail{
	// 			Code: to.Ptr("dkvgvtftpsjsbhlnapvihefxneoggs"),
	// 			Message: to.Ptr("okakgyfnmyob"),
	// 			Details: []*armconnectedcache.ErrorDetail{
	// 			},
	// 		},
	// 		ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
	// 		Status: to.Ptr("rhfjbcr"),
	// 		StatusCode: to.Ptr("jax"),
	// 		StatusDetails: to.Ptr("wmtksbahlbxrzaksogdbozfi"),
	// 		StatusText: to.Ptr("vsqydgruhuwuyipsplylgiqmkcv"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_Update_MaximumSet_Gen.json
func ExampleIspCustomersClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewIspCustomersClient().Update(ctx, "rgConnectedCache", "MccRPTest2", armconnectedcache.PatchResource{
		Tags: map[string]*string{
			"key1653": to.Ptr("nzjczrhclhkndesgy"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.IspCustomerResource = armconnectedcache.IspCustomerResource{
	// 	Name: to.Ptr("MCCTPTest2"),
	// 	Type: to.Ptr("Microsoft.ConnectedCache/ispCustomers"),
	// 	ID: to.Ptr("/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/rgConnectedCache/providers/Microsoft.ConnectedCache/ispCustomers/MccRPTest2"),
	// 	SystemData: &armconnectedcache.SystemData{
	// 		CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		CreatedBy: to.Ptr("gambtqj"),
	// 		CreatedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 		LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.771Z"); return t}()),
	// 		LastModifiedBy: to.Ptr("qomgaceiessgnuogz"),
	// 		LastModifiedByType: to.Ptr(armconnectedcache.CreatedByTypeUser),
	// 	},
	// 	Location: to.Ptr("westus"),
	// 	Tags: map[string]*string{
	// 		"key1878": to.Ptr("warz"),
	// 	},
	// 	Properties: &armconnectedcache.CustomerProperty{
	// 		AdditionalCustomerProperties: &armconnectedcache.AdditionalCustomerProperties{
	// 			CustomerAsn: to.Ptr("hgrelgnrtdkleisnepfolu"),
	// 			CustomerAsnEstimatedEgressPeekGbps: to.Ptr[float32](10),
	// 			CustomerEmail: to.Ptr("zdjgibsidydyzm"),
	// 			CustomerEntitlementExpiration: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerEntitlementSKUGUID: to.Ptr("rvzmdpxyflgqetvpwupnfaxsweiiz"),
	// 			CustomerEntitlementSKUID: to.Ptr("b"),
	// 			CustomerEntitlementSKUName: to.Ptr("waaqfijr"),
	// 			CustomerOrgName: to.Ptr("nshrwjhhggmdaqlpc"),
	// 			CustomerPropertiesOverviewAverageEgressMbps: to.Ptr[float32](8),
	// 			CustomerPropertiesOverviewAverageMissMbps: to.Ptr[float32](19),
	// 			CustomerPropertiesOverviewCacheEfficiency: to.Ptr[float32](20),
	// 			CustomerPropertiesOverviewCacheNodesHealthyCount: to.Ptr[int32](24),
	// 			CustomerPropertiesOverviewCacheNodesUnhealthyCount: to.Ptr[int32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMax: to.Ptr[float32](15),
	// 			CustomerPropertiesOverviewEgressMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerPropertiesOverviewMissMbpsMax: to.Ptr[float32](28),
	// 			CustomerPropertiesOverviewMissMbpsMaxDateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			CustomerTransitAsn: to.Ptr("habgklnxqzmozqpazoyejwiphezpi"),
	// 			CustomerTransitState: to.Ptr(armconnectedcache.CustomerTransitState("voblixkxfejbmhxilb")),
	// 			OptionalProperty1: to.Ptr("qhmwxza"),
	// 			OptionalProperty2: to.Ptr("l"),
	// 			OptionalProperty3: to.Ptr("mblwwvbie"),
	// 			OptionalProperty4: to.Ptr("vzuek"),
	// 			OptionalProperty5: to.Ptr("fzjodscdfcdr"),
	// 			PeeringDbLastUpdateDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			PeeringDbLastUpdateTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.773Z"); return t}()),
	// 			SignupPhaseStatusCode: to.Ptr[int32](4),
	// 			SignupPhaseStatusText: to.Ptr("q"),
	// 			SignupStatus: to.Ptr(true),
	// 			SignupStatusCode: to.Ptr[int32](21),
	// 			SignupStatusText: to.Ptr("dccv"),
	// 		},
	// 		Customer: &armconnectedcache.CustomerEntity{
	// 			ClientTenantID: to.Ptr("fproidkpgvpdnac"),
	// 			ContactEmail: to.Ptr("xquos"),
	// 			ContactName: to.Ptr("wxyqjoyoscmvimgwhpitxky"),
	// 			ContactPhone: to.Ptr("vue"),
	// 			CreateAsyncOperationID: to.Ptr("zjpvgirzxecwmnfyofqkikst"),
	// 			CustomerID: to.Ptr("nqxuzybu"),
	// 			CustomerName: to.Ptr("mkpzynfqihnjfdbaqbqwyhd"),
	// 			DeleteAsyncOperationID: to.Ptr("ajtdyoyecybeaxzyztjkvvtx"),
	// 			FullyQualifiedResourceID: to.Ptr("uqsbtgae"),
	// 			IsEnterpriseManaged: to.Ptr(true),
	// 			IsEntitled: to.Ptr(true),
	// 			LastSyncWithAzureTimestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-30T00:54:04.777Z"); return t}()),
	// 			ReleaseVersion: to.Ptr[int32](20),
	// 			ResendSignupCode: to.Ptr(true),
	// 			ShouldMigrate: to.Ptr(true),
	// 			SynchWithAzureAttemptsCount: to.Ptr[int32](17),
	// 			VerifySignupCode: to.Ptr(true),
	// 		},
	// 		ProvisioningState: to.Ptr(armconnectedcache.ProvisioningStateSucceeded),
	// 		Status: to.Ptr("rhfjbcr"),
	// 		StatusCode: to.Ptr("jax"),
	// 		StatusDetails: to.Ptr("wmtksbahlbxrzaksogdbozfi"),
	// 		StatusText: to.Ptr("vsqydgruhuwuyipsplylgiqmkcv"),
	// 	},
	// }
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/ff7b8e12e78b352561e2e470dd045be310a313fa/specification/connectedcache/resource-manager/Microsoft.ConnectedCache/preview/2023-05-01-preview/examples/IspCustomers_Delete_MaximumSet_Gen.json
func ExampleIspCustomersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armconnectedcache.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewIspCustomersClient().BeginDelete(ctx, "rgConnectedCache", "hdontfoythjsaeyjhrakckgimgchxwzttbcnvntpvdsgeumxpgnjurptd", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}
