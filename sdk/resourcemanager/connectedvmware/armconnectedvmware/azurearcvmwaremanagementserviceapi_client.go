//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// DO NOT EDIT.

package armconnectedvmware

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AzureArcVMwareManagementServiceAPIClient contains the methods for the AzureArcVMwareManagementServiceAPI group.
// Don't use this type directly, use NewAzureArcVMwareManagementServiceAPIClient() instead.
type AzureArcVMwareManagementServiceAPIClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewAzureArcVMwareManagementServiceAPIClient creates a new instance of AzureArcVMwareManagementServiceAPIClient with the specified values.
// subscriptionID - The Subscription ID.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAzureArcVMwareManagementServiceAPIClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AzureArcVMwareManagementServiceAPIClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &AzureArcVMwareManagementServiceAPIClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginUpgradeExtensions - The operation to Upgrade Machine Extensions.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-07-15-preview
// resourceGroupName - The Resource Group Name.
// virtualMachineName - The name of the machine containing the extension.
// extensionUpgradeParameters - Parameters supplied to the Upgrade Extensions operation.
// options - AzureArcVMwareManagementServiceAPIClientBeginUpgradeExtensionsOptions contains the optional parameters for the
// AzureArcVMwareManagementServiceAPIClient.BeginUpgradeExtensions method.
func (client *AzureArcVMwareManagementServiceAPIClient) BeginUpgradeExtensions(ctx context.Context, resourceGroupName string, virtualMachineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *AzureArcVMwareManagementServiceAPIClientBeginUpgradeExtensionsOptions) (*runtime.Poller[AzureArcVMwareManagementServiceAPIClientUpgradeExtensionsResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.upgradeExtensions(ctx, resourceGroupName, virtualMachineName, extensionUpgradeParameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[AzureArcVMwareManagementServiceAPIClientUpgradeExtensionsResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[AzureArcVMwareManagementServiceAPIClientUpgradeExtensionsResponse](options.ResumeToken, client.pl, nil)
	}
}

// UpgradeExtensions - The operation to Upgrade Machine Extensions.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-07-15-preview
func (client *AzureArcVMwareManagementServiceAPIClient) upgradeExtensions(ctx context.Context, resourceGroupName string, virtualMachineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *AzureArcVMwareManagementServiceAPIClientBeginUpgradeExtensionsOptions) (*http.Response, error) {
	req, err := client.upgradeExtensionsCreateRequest(ctx, resourceGroupName, virtualMachineName, extensionUpgradeParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// upgradeExtensionsCreateRequest creates the UpgradeExtensions request.
func (client *AzureArcVMwareManagementServiceAPIClient) upgradeExtensionsCreateRequest(ctx context.Context, resourceGroupName string, virtualMachineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *AzureArcVMwareManagementServiceAPIClientBeginUpgradeExtensionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}/upgradeExtensions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualMachineName == "" {
		return nil, errors.New("parameter virtualMachineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualMachineName}", url.PathEscape(virtualMachineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-07-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, extensionUpgradeParameters)
}
