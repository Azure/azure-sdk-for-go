//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconsumption

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// CreditsClient contains the methods for the Credits group.
// Don't use this type directly, use NewCreditsClient() instead.
type CreditsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewCreditsClient creates a new instance of CreditsClient with the specified values.
func NewCreditsClient(con *arm.Connection) *CreditsClient {
	return &CreditsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version)}
}

// Get - The credit summary by billingAccountId and billingProfileId.
// If the operation fails it returns the *ErrorResponse error type.
func (client *CreditsClient) Get(ctx context.Context, billingAccountID string, billingProfileID string, options *CreditsGetOptions) (CreditsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, billingAccountID, billingProfileID, options)
	if err != nil {
		return CreditsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return CreditsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return CreditsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CreditsClient) getCreateRequest(ctx context.Context, billingAccountID string, billingProfileID string, options *CreditsGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.Consumption/credits/balanceSummary"
	if billingAccountID == "" {
		return nil, errors.New("parameter billingAccountID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountId}", url.PathEscape(billingAccountID))
	if billingProfileID == "" {
		return nil, errors.New("parameter billingProfileID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileId}", url.PathEscape(billingProfileID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CreditsClient) getHandleResponse(resp *http.Response) (CreditsGetResponse, error) {
	result := CreditsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CreditSummary); err != nil {
		return CreditsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *CreditsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
