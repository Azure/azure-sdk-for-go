//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconsumption

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ReservationRecommendationDetailsClient contains the methods for the ReservationRecommendationDetails group.
// Don't use this type directly, use NewReservationRecommendationDetailsClient() instead.
type ReservationRecommendationDetailsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewReservationRecommendationDetailsClient creates a new instance of ReservationRecommendationDetailsClient with the specified values.
func NewReservationRecommendationDetailsClient(con *arm.Connection) *ReservationRecommendationDetailsClient {
	return &ReservationRecommendationDetailsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version)}
}

// Get - Details of a reservation recommendation for what-if analysis of reserved instances.
// If the operation fails it returns the *HighCasedErrorResponse error type.
func (client *ReservationRecommendationDetailsClient) Get(ctx context.Context, scope string, region string, term Term, lookBackPeriod LookBackPeriod, product string, options *ReservationRecommendationDetailsGetOptions) (ReservationRecommendationDetailsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, region, term, lookBackPeriod, product, options)
	if err != nil {
		return ReservationRecommendationDetailsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ReservationRecommendationDetailsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ReservationRecommendationDetailsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ReservationRecommendationDetailsClient) getCreateRequest(ctx context.Context, scope string, region string, term Term, lookBackPeriod LookBackPeriod, product string, options *ReservationRecommendationDetailsGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Consumption/reservationRecommendationDetails"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	reqQP.Set("region", region)
	reqQP.Set("term", string(term))
	reqQP.Set("lookBackPeriod", string(lookBackPeriod))
	reqQP.Set("product", product)
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ReservationRecommendationDetailsClient) getHandleResponse(resp *http.Response) (ReservationRecommendationDetailsGetResponse, error) {
	result := ReservationRecommendationDetailsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReservationRecommendationDetailsModel); err != nil {
		return ReservationRecommendationDetailsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ReservationRecommendationDetailsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := HighCasedErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
