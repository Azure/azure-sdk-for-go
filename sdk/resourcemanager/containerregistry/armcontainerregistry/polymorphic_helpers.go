// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcontainerregistry

import "encoding/json"

func unmarshalRunRequestClassification(rawMsg json.RawMessage) (RunRequestClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RunRequestClassification
	switch m["type"] {
	case "DockerBuildRequest":
		b = &DockerBuildRequest{}
	case "EncodedTaskRunRequest":
		b = &EncodedTaskRunRequest{}
	case "FileTaskRunRequest":
		b = &FileTaskRunRequest{}
	case "TaskRunRequest":
		b = &TaskRunRequest{}
	default:
		b = &RunRequest{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalTaskStepPropertiesClassification(rawMsg json.RawMessage) (TaskStepPropertiesClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b TaskStepPropertiesClassification
	switch m["type"] {
	case string(StepTypeDocker):
		b = &DockerBuildStep{}
	case string(StepTypeFileTask):
		b = &FileTaskStep{}
	case string(StepTypeEncodedTask):
		b = &EncodedTaskStep{}
	default:
		b = &TaskStepProperties{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalTaskStepUpdateParametersClassification(rawMsg json.RawMessage) (TaskStepUpdateParametersClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b TaskStepUpdateParametersClassification
	switch m["type"] {
	case string(StepTypeDocker):
		b = &DockerBuildStepUpdateParameters{}
	case string(StepTypeFileTask):
		b = &FileTaskStepUpdateParameters{}
	case string(StepTypeEncodedTask):
		b = &EncodedTaskStepUpdateParameters{}
	default:
		b = &TaskStepUpdateParameters{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
