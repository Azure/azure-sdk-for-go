// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcontainerregistry_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerregistry/armcontainerregistry/v2"
	"log"
	"time"
)

// Generated from example definition: 2025-11-01/RegistryCheckNameAvailable.json
func ExampleRegistriesClient_CheckNameAvailability_registryCheckNameAvailable() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().CheckNameAvailability(ctx, armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr(armcontainerregistry.ResourceTypeMicrosoftContainerRegistryRegistries),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse{
	// 	RegistryNameStatus: &armcontainerregistry.RegistryNameStatus{
	// 		NameAvailable: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryCheckNameNotAvailable.json
func ExampleRegistriesClient_CheckNameAvailability_registryCheckNameNotAvailable() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().CheckNameAvailability(ctx, armcontainerregistry.RegistryNameCheckRequest{
		Name: to.Ptr("myRegistry"),
		Type: to.Ptr(armcontainerregistry.ResourceTypeMicrosoftContainerRegistryRegistries),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientCheckNameAvailabilityResponse{
	// 	RegistryNameStatus: &armcontainerregistry.RegistryNameStatus{
	// 		NameAvailable: to.Ptr(false),
	// 		Reason: to.Ptr("AlreadyExists"),
	// 		Message: to.Ptr("The registry myRegistry is already in use."),
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryCreate.json
func ExampleRegistriesClient_BeginCreate_registryCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginCreate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			AdminUserEnabled: to.Ptr(true),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientCreateResponse{
	// 	Registry: &armcontainerregistry.Registry{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
	// 		Name: to.Ptr("myRegistry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	// 		Location: to.Ptr("westus"),
	// 		Tags: map[string]*string{
	// 			"key": to.Ptr("value"),
	// 		},
	// 		SKU: &armcontainerregistry.SKU{
	// 			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
	// 			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
	// 		},
	// 		Properties: &armcontainerregistry.RegistryProperties{
	// 			LoginServer: to.Ptr("myRegistry.azurecr.io"),
	// 			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
	// 			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
	// 			AdminUserEnabled: to.Ptr(true),
	// 			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
	// 				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
	// 				IPRules: []*armcontainerregistry.IPRule{
	// 				},
	// 			},
	// 			Policies: &armcontainerregistry.Policies{
	// 				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				TrustPolicy: &armcontainerregistry.TrustPolicy{
	// 					Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
	// 					Days: to.Ptr[int32](7),
	// 					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				ExportPolicy: &armcontainerregistry.ExportPolicy{
	// 					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
	// 				},
	// 				AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
	// 					Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
	// 				},
	// 			},
	// 			Encryption: &armcontainerregistry.EncryptionProperty{
	// 				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
	// 			},
	// 			DataEndpointEnabled: to.Ptr(false),
	// 			DataEndpointHostNames: []*string{
	// 			},
	// 			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
	// 			},
	// 			PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
	// 			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
	// 			NetworkRuleBypassAllowedForTasks: to.Ptr(false),
	// 			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
	// 			AnonymousPullEnabled: to.Ptr(false),
	// 			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeLegacyRegistryPermissions),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryCreateAbac.json
func ExampleRegistriesClient_BeginCreate_registryCreateAbac() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginCreate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeAbacRepositoryPermissions),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientCreateResponse{
	// 	Registry: &armcontainerregistry.Registry{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
	// 		Name: to.Ptr("myRegistry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	// 		Location: to.Ptr("westus"),
	// 		Tags: map[string]*string{
	// 			"key": to.Ptr("value"),
	// 		},
	// 		SKU: &armcontainerregistry.SKU{
	// 			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
	// 			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
	// 		},
	// 		Properties: &armcontainerregistry.RegistryProperties{
	// 			LoginServer: to.Ptr("myRegistry.azurecr.io"),
	// 			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
	// 			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
	// 			AdminUserEnabled: to.Ptr(true),
	// 			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
	// 				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
	// 				IPRules: []*armcontainerregistry.IPRule{
	// 				},
	// 			},
	// 			Policies: &armcontainerregistry.Policies{
	// 				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				TrustPolicy: &armcontainerregistry.TrustPolicy{
	// 					Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
	// 					Days: to.Ptr[int32](7),
	// 					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				ExportPolicy: &armcontainerregistry.ExportPolicy{
	// 					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
	// 				},
	// 			},
	// 			Encryption: &armcontainerregistry.EncryptionProperty{
	// 				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
	// 			},
	// 			DataEndpointEnabled: to.Ptr(false),
	// 			DataEndpointHostNames: []*string{
	// 			},
	// 			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
	// 			},
	// 			PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
	// 			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
	// 			NetworkRuleBypassAllowedForTasks: to.Ptr(false),
	// 			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
	// 			AnonymousPullEnabled: to.Ptr(false),
	// 			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeAbacRepositoryPermissions),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryCreateZoneRedundant.json
func ExampleRegistriesClient_BeginCreate_registryCreateZoneRedundant() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginCreate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.Registry{
		Location: to.Ptr("westus"),
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Properties: &armcontainerregistry.RegistryProperties{
			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientCreateResponse{
	// 	Registry: &armcontainerregistry.Registry{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
	// 		Name: to.Ptr("myRegistry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	// 		Location: to.Ptr("westus"),
	// 		Tags: map[string]*string{
	// 			"key": to.Ptr("value"),
	// 		},
	// 		SKU: &armcontainerregistry.SKU{
	// 			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
	// 			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
	// 		},
	// 		Properties: &armcontainerregistry.RegistryProperties{
	// 			LoginServer: to.Ptr("myRegistry.azurecr.io"),
	// 			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
	// 			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
	// 			AdminUserEnabled: to.Ptr(false),
	// 			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
	// 				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
	// 				IPRules: []*armcontainerregistry.IPRule{
	// 				},
	// 			},
	// 			Policies: &armcontainerregistry.Policies{
	// 				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				TrustPolicy: &armcontainerregistry.TrustPolicy{
	// 					Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
	// 					Days: to.Ptr[int32](7),
	// 					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				ExportPolicy: &armcontainerregistry.ExportPolicy{
	// 					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
	// 				},
	// 				AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
	// 					Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
	// 				},
	// 			},
	// 			Encryption: &armcontainerregistry.EncryptionProperty{
	// 				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
	// 			},
	// 			DataEndpointEnabled: to.Ptr(false),
	// 			DataEndpointHostNames: []*string{
	// 			},
	// 			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
	// 			},
	// 			PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
	// 			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
	// 			NetworkRuleBypassAllowedForTasks: to.Ptr(false),
	// 			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyEnabled),
	// 			AnonymousPullEnabled: to.Ptr(false),
	// 			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeLegacyRegistryPermissions),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryDelete.json
func ExampleRegistriesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginDelete(ctx, "myResourceGroup", "myRegistry", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientDeleteResponse{
	// }
}

// Generated from example definition: 2025-11-01/RegistryGenerateCredentials.json
func ExampleRegistriesClient_BeginGenerateCredentials() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginGenerateCredentials(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.GenerateCredentialsParameters{
		TokenID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/tokens/myToken"),
		Expiry:  to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t }()),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientGenerateCredentialsResponse{
	// 	GenerateCredentialsResult: &armcontainerregistry.GenerateCredentialsResult{
	// 		Username: to.Ptr("myToken"),
	// 		Passwords: []*armcontainerregistry.TokenPassword{
	// 			{
	// 				Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t}()),
	// 				Name: to.Ptr(armcontainerregistry.TokenPasswordNamePassword1),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 			{
	// 				Expiry: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-31T15:59:59.0707808Z"); return t}()),
	// 				Name: to.Ptr(armcontainerregistry.TokenPasswordNamePassword2),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryGet.json
func ExampleRegistriesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().Get(ctx, "myResourceGroup", "myRegistry", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientGetResponse{
	// 	Registry: &armcontainerregistry.Registry{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
	// 		Name: to.Ptr("myRegistry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	// 		Location: to.Ptr("westus"),
	// 		Tags: map[string]*string{
	// 			"key": to.Ptr("value"),
	// 		},
	// 		SKU: &armcontainerregistry.SKU{
	// 			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
	// 			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
	// 		},
	// 		Properties: &armcontainerregistry.RegistryProperties{
	// 			LoginServer: to.Ptr("myRegistry.azurecr.io"),
	// 			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
	// 			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
	// 			AdminUserEnabled: to.Ptr(false),
	// 			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
	// 				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
	// 				IPRules: []*armcontainerregistry.IPRule{
	// 				},
	// 			},
	// 			Policies: &armcontainerregistry.Policies{
	// 				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				TrustPolicy: &armcontainerregistry.TrustPolicy{
	// 					Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
	// 					Days: to.Ptr[int32](7),
	// 					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				ExportPolicy: &armcontainerregistry.ExportPolicy{
	// 					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
	// 				},
	// 				AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
	// 					Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
	// 				},
	// 			},
	// 			Encryption: &armcontainerregistry.EncryptionProperty{
	// 				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
	// 			},
	// 			DataEndpointEnabled: to.Ptr(false),
	// 			DataEndpointHostNames: []*string{
	// 			},
	// 			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
	// 			},
	// 			PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
	// 			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
	// 			NetworkRuleBypassAllowedForTasks: to.Ptr(false),
	// 			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
	// 			AnonymousPullEnabled: to.Ptr(false),
	// 			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeLegacyRegistryPermissions),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryGetPrivateLinkResource.json
func ExampleRegistriesClient_GetPrivateLinkResource() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().GetPrivateLinkResource(ctx, "myResourceGroup", "myRegistry", "registry", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientGetPrivateLinkResourceResponse{
	// 	MyPrivateLinkResource: &armcontainerregistry.MyPrivateLinkResource{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
	// 		Name: to.Ptr("registry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
	// 		Properties: &armcontainerregistry.PrivateLinkResourceProperties{
	// 			GroupID: to.Ptr("registry"),
	// 			RequiredMembers: []*string{
	// 				to.Ptr("registry"),
	// 				to.Ptr("registry_data_myregion"),
	// 			},
	// 			RequiredZoneNames: []*string{
	// 				to.Ptr("privatelink.azurecr.io"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/ImportImageByManifestDigest.json
func ExampleRegistriesClient_BeginImportImage_importImageByManifestDigest() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository@sha256:0000000000000000000000000000000000000000000000000000000000000000"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag"),
		},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1"),
		},
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientImportImageResponse{
	// }
}

// Generated from example definition: 2025-11-01/ImportImageByTag.json
func ExampleRegistriesClient_BeginImportImage_importImageByTag() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Source: &armcontainerregistry.ImportSource{
			ResourceID:  to.Ptr("/subscriptions/10000000-0000-0000-0000-000000000000/resourceGroups/sourceResourceGroup/providers/Microsoft.ContainerRegistry/registries/sourceRegistry"),
			SourceImage: to.Ptr("sourceRepository:sourceTag"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag"),
		},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1"),
		},
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientImportImageResponse{
	// }
}

// Generated from example definition: 2025-11-01/ImportImageFromPublicRegistry.json
func ExampleRegistriesClient_BeginImportImage_importImageFromPublicRegistry() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginImportImage(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.ImportImageParameters{
		Source: &armcontainerregistry.ImportSource{
			RegistryURI: to.Ptr("registry.hub.docker.com"),
			SourceImage: to.Ptr("library/hello-world"),
		},
		TargetTags: []*string{
			to.Ptr("targetRepository:targetTag"),
		},
		UntaggedTargetRepositories: []*string{
			to.Ptr("targetRepository1"),
		},
		Mode: to.Ptr(armcontainerregistry.ImportModeForce),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientImportImageResponse{
	// }
}

// Generated from example definition: 2025-11-01/RegistryList.json
func ExampleRegistriesClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewRegistriesClient().NewListPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armcontainerregistry.RegistriesClientListResponse{
		// 	RegistryListResult: armcontainerregistry.RegistryListResult{
		// 		Value: []*armcontainerregistry.Registry{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		// 				Name: to.Ptr("myRegistry"),
		// 				Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
		// 				Location: to.Ptr("westus"),
		// 				Tags: map[string]*string{
		// 					"key": to.Ptr("value"),
		// 				},
		// 				SKU: &armcontainerregistry.SKU{
		// 					Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		// 					Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		// 				},
		// 				Properties: &armcontainerregistry.RegistryProperties{
		// 					LoginServer: to.Ptr("myRegistry.azurecr.io"),
		// 					CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
		// 					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		// 					AdminUserEnabled: to.Ptr(false),
		// 					NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
		// 						DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
		// 						IPRules: []*armcontainerregistry.IPRule{
		// 						},
		// 					},
		// 					Policies: &armcontainerregistry.Policies{
		// 						QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						TrustPolicy: &armcontainerregistry.TrustPolicy{
		// 							Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						RetentionPolicy: &armcontainerregistry.RetentionPolicy{
		// 							Days: to.Ptr[int32](7),
		// 							LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						ExportPolicy: &armcontainerregistry.ExportPolicy{
		// 							Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
		// 						},
		// 						AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
		// 							Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
		// 						},
		// 					},
		// 					Encryption: &armcontainerregistry.EncryptionProperty{
		// 						Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
		// 					},
		// 					DataEndpointEnabled: to.Ptr(false),
		// 					DataEndpointHostNames: []*string{
		// 					},
		// 					PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
		// 					},
		// 					PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
		// 					NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
		// 					NetworkRuleBypassAllowedForTasks: to.Ptr(false),
		// 					ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		// 					AnonymousPullEnabled: to.Ptr(false),
		// 					RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeLegacyRegistryPermissions),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-11-01/RegistryListByResourceGroup.json
func ExampleRegistriesClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewRegistriesClient().NewListByResourceGroupPager("myResourceGroup", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armcontainerregistry.RegistriesClientListByResourceGroupResponse{
		// 	RegistryListResult: armcontainerregistry.RegistryListResult{
		// 		Value: []*armcontainerregistry.Registry{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
		// 				Name: to.Ptr("myRegistry"),
		// 				Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
		// 				Location: to.Ptr("westus"),
		// 				Tags: map[string]*string{
		// 					"key": to.Ptr("value"),
		// 				},
		// 				SKU: &armcontainerregistry.SKU{
		// 					Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		// 					Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
		// 				},
		// 				Properties: &armcontainerregistry.RegistryProperties{
		// 					LoginServer: to.Ptr("myRegistry.azurecr.io"),
		// 					CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
		// 					ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
		// 					AdminUserEnabled: to.Ptr(false),
		// 					NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
		// 						DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
		// 						IPRules: []*armcontainerregistry.IPRule{
		// 						},
		// 					},
		// 					Policies: &armcontainerregistry.Policies{
		// 						QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						TrustPolicy: &armcontainerregistry.TrustPolicy{
		// 							Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						RetentionPolicy: &armcontainerregistry.RetentionPolicy{
		// 							Days: to.Ptr[int32](7),
		// 							LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
		// 							Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
		// 						},
		// 						ExportPolicy: &armcontainerregistry.ExportPolicy{
		// 							Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
		// 						},
		// 						AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
		// 							Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
		// 						},
		// 					},
		// 					Encryption: &armcontainerregistry.EncryptionProperty{
		// 						Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
		// 					},
		// 					DataEndpointEnabled: to.Ptr(false),
		// 					DataEndpointHostNames: []*string{
		// 					},
		// 					PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
		// 					},
		// 					PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
		// 					NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
		// 					NetworkRuleBypassAllowedForTasks: to.Ptr(false),
		// 					ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
		// 					AnonymousPullEnabled: to.Ptr(false),
		// 					RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeLegacyRegistryPermissions),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-11-01/RegistryListCredentials.json
func ExampleRegistriesClient_ListCredentials() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().ListCredentials(ctx, "myResourceGroup", "myRegistry", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientListCredentialsResponse{
	// 	RegistryListCredentialsResult: &armcontainerregistry.RegistryListCredentialsResult{
	// 		Username: to.Ptr("myRegistry"),
	// 		Passwords: []*armcontainerregistry.RegistryPassword{
	// 			{
	// 				Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 			{
	// 				Name: to.Ptr(armcontainerregistry.PasswordNamePassword2),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryListPrivateLinkResources.json
func ExampleRegistriesClient_NewListPrivateLinkResourcesPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewRegistriesClient().NewListPrivateLinkResourcesPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armcontainerregistry.RegistriesClientListPrivateLinkResourcesResponse{
		// 	PrivateLinkResourceListResult: armcontainerregistry.PrivateLinkResourceListResult{
		// 		Value: []*armcontainerregistry.PrivateLinkResource{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/privateLinkResources/registry"),
		// 				Name: to.Ptr("registry"),
		// 				Type: to.Ptr("Microsoft.ContainerRegistry/registries/privateLinkResources"),
		// 				Properties: &armcontainerregistry.PrivateLinkResourceProperties{
		// 					GroupID: to.Ptr("registry"),
		// 					RequiredMembers: []*string{
		// 						to.Ptr("registry"),
		// 						to.Ptr("registry_data_myregion"),
		// 					},
		// 					RequiredZoneNames: []*string{
		// 						to.Ptr("privatelink.azurecr.io"),
		// 					},
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-11-01/RegistryListUsages.json
func ExampleRegistriesClient_NewListUsagesPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewRegistriesClient().NewListUsagesPager("myResourceGroup", "myRegistry", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armcontainerregistry.RegistriesClientListUsagesResponse{
		// 	RegistryUsageListResult: armcontainerregistry.RegistryUsageListResult{
		// 		Value: []*armcontainerregistry.RegistryUsage{
		// 			{
		// 				Name: to.Ptr("Size"),
		// 				Limit: to.Ptr[int64](107374182400),
		// 				CurrentValue: to.Ptr[int64](12345678),
		// 				Unit: to.Ptr(armcontainerregistry.RegistryUsageUnitBytes),
		// 			},
		// 			{
		// 				Name: to.Ptr("Webhooks"),
		// 				Limit: to.Ptr[int64](10),
		// 				CurrentValue: to.Ptr[int64](2),
		// 				Unit: to.Ptr(armcontainerregistry.RegistryUsageUnitCount),
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-11-01/RegistryRegenerateCredential.json
func ExampleRegistriesClient_RegenerateCredential() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewRegistriesClient().RegenerateCredential(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.RegenerateCredentialParameters{
		Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientRegenerateCredentialResponse{
	// 	RegistryListCredentialsResult: &armcontainerregistry.RegistryListCredentialsResult{
	// 		Username: to.Ptr("myRegistry"),
	// 		Passwords: []*armcontainerregistry.RegistryPassword{
	// 			{
	// 				Name: to.Ptr(armcontainerregistry.PasswordNamePassword),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 			{
	// 				Name: to.Ptr(armcontainerregistry.PasswordNamePassword2),
	// 				Value: to.Ptr("00000000000000000000000000000000"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-11-01/RegistryUpdate.json
func ExampleRegistriesClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armcontainerregistry.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewRegistriesClient().BeginUpdate(ctx, "myResourceGroup", "myRegistry", armcontainerregistry.RegistryUpdateParameters{
		Tags: map[string]*string{
			"key": to.Ptr("value"),
		},
		SKU: &armcontainerregistry.SKU{
			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
		},
		Properties: &armcontainerregistry.RegistryPropertiesUpdateParameters{
			AdminUserEnabled:   to.Ptr(true),
			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeAbacRepositoryPermissions),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armcontainerregistry.RegistriesClientUpdateResponse{
	// 	Registry: &armcontainerregistry.Registry{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry"),
	// 		Name: to.Ptr("myRegistry"),
	// 		Type: to.Ptr("Microsoft.ContainerRegistry/registries"),
	// 		Location: to.Ptr("westus"),
	// 		Tags: map[string]*string{
	// 			"key": to.Ptr("value"),
	// 		},
	// 		SKU: &armcontainerregistry.SKU{
	// 			Name: to.Ptr(armcontainerregistry.SKUNameStandard),
	// 			Tier: to.Ptr(armcontainerregistry.SKUTierStandard),
	// 		},
	// 		Properties: &armcontainerregistry.RegistryProperties{
	// 			LoginServer: to.Ptr("myRegistry.azurecr.io"),
	// 			CreationDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:38:26.1537861Z"); return t}()),
	// 			ProvisioningState: to.Ptr(armcontainerregistry.ProvisioningStateSucceeded),
	// 			AdminUserEnabled: to.Ptr(true),
	// 			NetworkRuleSet: &armcontainerregistry.NetworkRuleSet{
	// 				DefaultAction: to.Ptr(armcontainerregistry.DefaultActionAllow),
	// 				IPRules: []*armcontainerregistry.IPRule{
	// 				},
	// 			},
	// 			Policies: &armcontainerregistry.Policies{
	// 				QuarantinePolicy: &armcontainerregistry.QuarantinePolicy{
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				TrustPolicy: &armcontainerregistry.TrustPolicy{
	// 					Type: to.Ptr(armcontainerregistry.TrustPolicyTypeNotary),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				RetentionPolicy: &armcontainerregistry.RetentionPolicy{
	// 					Days: to.Ptr[int32](7),
	// 					LastUpdatedTime: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-15T21:40:12.8506835+00:00"); return t}()),
	// 					Status: to.Ptr(armcontainerregistry.PolicyStatusDisabled),
	// 				},
	// 				ExportPolicy: &armcontainerregistry.ExportPolicy{
	// 					Status: to.Ptr(armcontainerregistry.ExportPolicyStatusEnabled),
	// 				},
	// 				AzureADAuthenticationAsArmPolicy: &armcontainerregistry.AzureADAuthenticationAsArmPolicy{
	// 					Status: to.Ptr(armcontainerregistry.AzureADAuthenticationAsArmPolicyStatusEnabled),
	// 				},
	// 			},
	// 			Encryption: &armcontainerregistry.EncryptionProperty{
	// 				Status: to.Ptr(armcontainerregistry.EncryptionStatusDisabled),
	// 			},
	// 			DataEndpointEnabled: to.Ptr(false),
	// 			DataEndpointHostNames: []*string{
	// 			},
	// 			PrivateEndpointConnections: []*armcontainerregistry.PrivateEndpointConnection{
	// 			},
	// 			PublicNetworkAccess: to.Ptr(armcontainerregistry.PublicNetworkAccessEnabled),
	// 			NetworkRuleBypassOptions: to.Ptr(armcontainerregistry.NetworkRuleBypassOptionsAzureServices),
	// 			NetworkRuleBypassAllowedForTasks: to.Ptr(false),
	// 			ZoneRedundancy: to.Ptr(armcontainerregistry.ZoneRedundancyDisabled),
	// 			AnonymousPullEnabled: to.Ptr(false),
	// 			RoleAssignmentMode: to.Ptr(armcontainerregistry.RoleAssignmentModeAbacRepositoryPermissions),
	// 		},
	// 	},
	// }
}
