// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcontainerregistrytasks

import "time"

// AgentPool - The agentpool that has the ARM resource and properties.
// The agentpool will have all information to create an agent pool.
type AgentPool struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The properties associated with the agent pool
	Properties *AgentPoolProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AgentPoolListResult - The collection of agent pools.
type AgentPoolListResult struct {
	// The URI that can be used to request the next set of paged results.
	NextLink *string

	// The collection value.
	Value []*AgentPool
}

// AgentPoolProperties - The properties of agent pool.
type AgentPoolProperties struct {
	// The count of agent machine
	Count *int32

	// The OS of agent machine
	OS *OS

	// The Tier of agent machine
	Tier *string

	// The Virtual Network Subnet Resource Id of the agent machine
	VirtualNetworkSubnetResourceID *string

	// READ-ONLY; The provisioning state of this agent pool
	ProvisioningState *ProvisioningState
}

type AgentPoolPropertiesUpdateParameters struct {
	// The count of agent machine
	Count *int32
}

// AgentPoolQueueStatus - The QueueStatus of Agent Pool
type AgentPoolQueueStatus struct {
	// The number of pending runs in the queue
	Count *int32
}

// AgentPoolUpdateParameters - The parameters for updating an agent pool.
type AgentPoolUpdateParameters struct {
	// The properties associated with the agent pool
	Properties *AgentPoolPropertiesUpdateParameters

	// The ARM resource tags.
	Tags map[string]*string
}

// AgentProperties - The properties that determine the run agent configuration.
type AgentProperties struct {
	// The CPU configuration in terms of number of cores required for the run.
	CPU *int32
}

// Argument - The properties of a run argument.
type Argument struct {
	// REQUIRED; The name of the argument.
	Name *string

	// REQUIRED; The value of the argument.
	Value *string

	// Flag to indicate whether the argument represents a secret and want to be removed from build logs.
	IsSecret *bool
}

// AuthInfo - The authorization properties for accessing the source code repository.
type AuthInfo struct {
	// REQUIRED; The access token used to access the source control provider.
	Token *string

	// REQUIRED; The type of Auth token.
	TokenType *TokenType

	// Time in seconds that the token remains valid
	ExpiresIn *int32

	// The refresh token used to refresh the access token.
	RefreshToken *string

	// The scope of the access token.
	Scope *string
}

// AuthInfoUpdateParameters - The authorization properties for accessing the source code repository.
type AuthInfoUpdateParameters struct {
	// Time in seconds that the token remains valid
	ExpiresIn *int32

	// The refresh token used to refresh the access token.
	RefreshToken *string

	// The scope of the access token.
	Scope *string

	// The access token used to access the source control provider.
	Token *string

	// The type of Auth token.
	TokenType *TokenType
}

// BaseImageDependency - Properties that describe a base image dependency.
type BaseImageDependency struct {
	// The sha256-based digest of the image manifest.
	Digest *string

	// The registry login server.
	Registry *string

	// The repository name.
	Repository *string

	// The tag name.
	Tag *string

	// The type of the base image dependency.
	Type *BaseImageDependencyType
}

// BaseImageTrigger - The trigger based on base image dependency.
type BaseImageTrigger struct {
	// REQUIRED; The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType *BaseImageTriggerType

	// REQUIRED; The name of the trigger.
	Name *string

	// The current status of trigger.
	Status *TriggerStatus

	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string

	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *UpdateTriggerPayloadType
}

// BaseImageTriggerUpdateParameters - The properties for updating base image dependency trigger.
type BaseImageTriggerUpdateParameters struct {
	// REQUIRED; The name of the trigger.
	Name *string

	// The type of the auto trigger for base image dependency updates.
	BaseImageTriggerType *BaseImageTriggerType

	// The current status of trigger.
	Status *TriggerStatus

	// The endpoint URL for receiving update triggers.
	UpdateTriggerEndpoint *string

	// Type of Payload body for Base image update triggers.
	UpdateTriggerPayloadType *UpdateTriggerPayloadType
}

// Credentials - The parameters that describes a set of credentials that will be used when a run is invoked.
type Credentials struct {
	// Describes the credential parameters for accessing other custom registries. The key
	// for the dictionary item will be the registry login server (myregistry.azurecr.io) and
	// the value of the item will be the registry credentials for accessing the registry.
	CustomRegistries map[string]*CustomRegistryCredentials

	// Describes the credential parameters for accessing the source registry.
	SourceRegistry *SourceRegistryCredentials
}

// CustomRegistryCredentials - Describes the credentials that will be used to access a custom registry during a run.
type CustomRegistryCredentials struct {
	// Indicates the managed identity assigned to the custom credential. If a user-assigned identity
	// this value is the Client ID. If a system-assigned identity, the value will be `system`. In
	// the case of a system-assigned identity, the Client ID will be determined by the runner. This
	// identity may be used to authenticate to key vault to retrieve credentials or it may be the only
	// source of authentication used for accessing the registry.
	Identity *string

	// The password for logging into the custom registry. The password is a secret
	// object that allows multiple ways of providing the value for it.
	Password *SecretObject

	// The username for logging into the custom registry.
	UserName *SecretObject
}

// DockerBuildRequest - The parameters for a docker quick build.
type DockerBuildRequest struct {
	// REQUIRED; The Docker file path relative to the source location.
	DockerFilePath *string

	// REQUIRED; The platform properties against which the run has to happen.
	Platform *PlatformProperties

	// CONSTANT; The type of the run request.
	// Field has constant value "DockerBuildRequest", any specified value is ignored.
	Type *string

	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The collection of override arguments to be used when executing the run.
	Arguments []*Argument

	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials

	// The fully qualified image names including the repository and tag.
	ImageNames []*string

	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool

	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool

	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string

	// The name of the target build stage for the docker build.
	Target *string

	// Run timeout in seconds.
	Timeout *int32
}

// GetRunRequest implements the RunRequestClassification interface for type DockerBuildRequest.
func (d *DockerBuildRequest) GetRunRequest() *RunRequest {
	return &RunRequest{
		AgentPoolName:    d.AgentPoolName,
		IsArchiveEnabled: d.IsArchiveEnabled,
		LogTemplate:      d.LogTemplate,
		Type:             d.Type,
	}
}

// DockerBuildStep - The Docker build step.
type DockerBuildStep struct {
	// REQUIRED; The Docker file path relative to the source context.
	DockerFilePath *string

	// CONSTANT; The type of the step.
	// Field has constant value StepTypeDocker, any specified value is ignored.
	Type *StepType

	// The collection of override arguments to be used when executing this build step.
	Arguments []*Argument

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// The fully qualified image names including the repository and tag.
	ImageNames []*string

	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool

	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool

	// The name of the target build stage for the docker build.
	Target *string

	// READ-ONLY; List of base image dependencies for a step.
	BaseImageDependencies []*BaseImageDependency
}

// GetTaskStepProperties implements the TaskStepPropertiesClassification interface for type DockerBuildStep.
func (d *DockerBuildStep) GetTaskStepProperties() *TaskStepProperties {
	return &TaskStepProperties{
		BaseImageDependencies: d.BaseImageDependencies,
		ContextAccessToken:    d.ContextAccessToken,
		ContextPath:           d.ContextPath,
		Type:                  d.Type,
	}
}

// DockerBuildStepUpdateParameters - The properties for updating a docker build step.
type DockerBuildStepUpdateParameters struct {
	// CONSTANT; The type of the step.
	// Field has constant value StepTypeDocker, any specified value is ignored.
	Type *StepType

	// The collection of override arguments to be used when executing this build step.
	Arguments []*Argument

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// The Docker file path relative to the source context.
	DockerFilePath *string

	// The fully qualified image names including the repository and tag.
	ImageNames []*string

	// The value of this property indicates whether the image built should be pushed to the registry or not.
	IsPushEnabled *bool

	// The value of this property indicates whether the image cache is enabled or not.
	NoCache *bool

	// The name of the target build stage for the docker build.
	Target *string
}

// GetTaskStepUpdateParameters implements the TaskStepUpdateParametersClassification interface for type DockerBuildStepUpdateParameters.
func (d *DockerBuildStepUpdateParameters) GetTaskStepUpdateParameters() *TaskStepUpdateParameters {
	return &TaskStepUpdateParameters{
		ContextAccessToken: d.ContextAccessToken,
		ContextPath:        d.ContextPath,
		Type:               d.Type,
	}
}

// EncodedTaskRunRequest - The parameters for a quick task run request.
type EncodedTaskRunRequest struct {
	// REQUIRED; Base64 encoded value of the template/definition file content.
	EncodedTaskContent *string

	// REQUIRED; The platform properties against which the run has to happen.
	Platform *PlatformProperties

	// CONSTANT; The type of the run request.
	// Field has constant value "EncodedTaskRunRequest", any specified value is ignored.
	Type *string

	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials

	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string

	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string

	// Run timeout in seconds.
	Timeout *int32

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue
}

// GetRunRequest implements the RunRequestClassification interface for type EncodedTaskRunRequest.
func (e *EncodedTaskRunRequest) GetRunRequest() *RunRequest {
	return &RunRequest{
		AgentPoolName:    e.AgentPoolName,
		IsArchiveEnabled: e.IsArchiveEnabled,
		LogTemplate:      e.LogTemplate,
		Type:             e.Type,
	}
}

// EncodedTaskStep - The properties of a encoded task step.
type EncodedTaskStep struct {
	// REQUIRED; Base64 encoded value of the template/definition file content.
	EncodedTaskContent *string

	// CONSTANT; The type of the step.
	// Field has constant value StepTypeEncodedTask, any specified value is ignored.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue

	// READ-ONLY; List of base image dependencies for a step.
	BaseImageDependencies []*BaseImageDependency
}

// GetTaskStepProperties implements the TaskStepPropertiesClassification interface for type EncodedTaskStep.
func (e *EncodedTaskStep) GetTaskStepProperties() *TaskStepProperties {
	return &TaskStepProperties{
		BaseImageDependencies: e.BaseImageDependencies,
		ContextAccessToken:    e.ContextAccessToken,
		ContextPath:           e.ContextPath,
		Type:                  e.Type,
	}
}

// EncodedTaskStepUpdateParameters - The properties for updating encoded task step.
type EncodedTaskStepUpdateParameters struct {
	// CONSTANT; The type of the step.
	// Field has constant value StepTypeEncodedTask, any specified value is ignored.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// Base64 encoded value of the template/definition file content.
	EncodedTaskContent *string

	// Base64 encoded value of the parameters/values file content.
	EncodedValuesContent *string

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue
}

// GetTaskStepUpdateParameters implements the TaskStepUpdateParametersClassification interface for type EncodedTaskStepUpdateParameters.
func (e *EncodedTaskStepUpdateParameters) GetTaskStepUpdateParameters() *TaskStepUpdateParameters {
	return &TaskStepUpdateParameters{
		ContextAccessToken: e.ContextAccessToken,
		ContextPath:        e.ContextPath,
		Type:               e.Type,
	}
}

// FileTaskRunRequest - The request parameters for a scheduling run against a task file.
type FileTaskRunRequest struct {
	// REQUIRED; The platform properties against which the run has to happen.
	Platform *PlatformProperties

	// REQUIRED; The template/definition file path relative to the source.
	TaskFilePath *string

	// CONSTANT; The type of the run request.
	// Field has constant value "FileTaskRunRequest", any specified value is ignored.
	Type *string

	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials

	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
	// If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
	SourceLocation *string

	// Run timeout in seconds.
	Timeout *int32

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue

	// The values/parameters file path relative to the source.
	ValuesFilePath *string
}

// GetRunRequest implements the RunRequestClassification interface for type FileTaskRunRequest.
func (f *FileTaskRunRequest) GetRunRequest() *RunRequest {
	return &RunRequest{
		AgentPoolName:    f.AgentPoolName,
		IsArchiveEnabled: f.IsArchiveEnabled,
		LogTemplate:      f.LogTemplate,
		Type:             f.Type,
	}
}

// FileTaskStep - The properties of a task step.
type FileTaskStep struct {
	// REQUIRED; The task template/definition file path relative to the source context.
	TaskFilePath *string

	// CONSTANT; The type of the step.
	// Field has constant value StepTypeFileTask, any specified value is ignored.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue

	// The task values/parameters file path relative to the source context.
	ValuesFilePath *string

	// READ-ONLY; List of base image dependencies for a step.
	BaseImageDependencies []*BaseImageDependency
}

// GetTaskStepProperties implements the TaskStepPropertiesClassification interface for type FileTaskStep.
func (f *FileTaskStep) GetTaskStepProperties() *TaskStepProperties {
	return &TaskStepProperties{
		BaseImageDependencies: f.BaseImageDependencies,
		ContextAccessToken:    f.ContextAccessToken,
		ContextPath:           f.ContextPath,
		Type:                  f.Type,
	}
}

// FileTaskStepUpdateParameters - The properties of updating a task step.
type FileTaskStepUpdateParameters struct {
	// CONSTANT; The type of the step.
	// Field has constant value StepTypeFileTask, any specified value is ignored.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// The task template/definition file path relative to the source context.
	TaskFilePath *string

	// The collection of overridable values that can be passed when running a task.
	Values []*SetValue

	// The values/parameters file path relative to the source context.
	ValuesFilePath *string
}

// GetTaskStepUpdateParameters implements the TaskStepUpdateParametersClassification interface for type FileTaskStepUpdateParameters.
func (f *FileTaskStepUpdateParameters) GetTaskStepUpdateParameters() *TaskStepUpdateParameters {
	return &TaskStepUpdateParameters{
		ContextAccessToken: f.ContextAccessToken,
		ContextPath:        f.ContextPath,
		Type:               f.Type,
	}
}

// IdentityProperties - Managed identity for the resource.
type IdentityProperties struct {
	// The identity type.
	Type *ResourceIdentityType

	// The list of user identities associated with the resource. The user identity
	// dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
	// providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserIdentityProperties

	// READ-ONLY; The principal ID of resource identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of resource.
	TenantID *string
}

// ImageDescriptor - Properties for a registry image.
type ImageDescriptor struct {
	// The sha256-based digest of the image manifest.
	Digest *string

	// The registry login server.
	Registry *string

	// The repository name.
	Repository *string

	// The tag name.
	Tag *string
}

// ImageUpdateTrigger - The image update trigger that caused a build.
type ImageUpdateTrigger struct {
	// The unique ID of the trigger.
	ID *string

	// The list of image updates that caused the build.
	Images []*ImageDescriptor

	// The timestamp when the image update happened.
	Timestamp *time.Time
}

type OverrideTaskStepProperties struct {
	// Gets or sets the collection of override arguments to be used when
	// executing a build step.
	Arguments []*Argument

	// The source context against which run has to be queued.
	ContextPath *string

	// The file against which run has to be queued.
	File *string

	// The name of the target build stage for the docker build.
	Target *string

	// Base64 encoded update trigger token that will be attached with the base image trigger webhook.
	UpdateTriggerToken *string

	// The collection of overridable values that can be passed when running a Task.
	Values []*SetValue
}

// PlatformProperties - The platform properties against which the run has to happen.
type PlatformProperties struct {
	// REQUIRED; The operating system type required for the run.
	OS *OS

	// The OS architecture.
	Architecture *Architecture

	// Variant of the CPU.
	Variant *Variant
}

// PlatformUpdateParameters - The properties for updating the platform configuration.
type PlatformUpdateParameters struct {
	// The OS architecture.
	Architecture *Architecture

	// The operating system type required for the run.
	OS *OS

	// Variant of the CPU.
	Variant *Variant
}

// Run resource properties
type Run struct {
	// The properties of a run.
	Properties *RunProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// RunGetLogResult - The result of get log link operation.
type RunGetLogResult struct {
	// The link to logs in registry for a run on a azure container registry.
	LogArtifactLink *string

	// The link to logs for a run on a azure container registry.
	LogLink *string
}

// RunListResult - The collection of runs.
type RunListResult struct {
	// The URI that can be used to request the next set of paged results.
	NextLink *string

	// The collection value.
	Value []*Run
}

// RunProperties - The properties for a run.
type RunProperties struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The time the run was scheduled.
	CreateTime *time.Time

	// The list of custom registries that were logged in during this run.
	CustomRegistries []*string

	// The time the run finished.
	FinishTime *time.Time

	// The image update trigger that caused the run. This is applicable if the task has base image trigger configured.
	ImageUpdateTrigger *ImageUpdateTrigger

	// The value that indicates whether archiving is enabled or not.
	IsArchiveEnabled *bool

	// The last updated time for the run.
	LastUpdatedTime *time.Time

	// The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.
	OutputImages []*ImageDescriptor

	// The platform properties against which the run will happen.
	Platform *PlatformProperties

	// The provisioning state of a run.
	ProvisioningState *ProvisioningState

	// The unique identifier for the run.
	RunID *string

	// The type of run.
	RunType *RunType

	// The scope of the credentials that were used to login to the source registry during this run.
	SourceRegistryAuth *string

	// The source trigger that caused the run.
	SourceTrigger *SourceTriggerDescriptor

	// The time the run started.
	StartTime *time.Time

	// The current status of the run.
	Status *RunStatus

	// The task against which run was scheduled.
	Task *string

	// The timer trigger that caused the run.
	TimerTrigger *TimerTriggerDescriptor

	// The update trigger token passed for the Run.
	UpdateTriggerToken *string

	// READ-ONLY; The image description for the log artifact.
	LogArtifact *ImageDescriptor

	// READ-ONLY; The error message received from backend systems after the run is scheduled.
	RunErrorMessage *string
}

// RunRequest - The request parameters for scheduling a run.
type RunRequest struct {
	// REQUIRED; The type of the run request.
	Type *string

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string
}

// GetRunRequest implements the RunRequestClassification interface for type RunRequest.
func (r *RunRequest) GetRunRequest() *RunRequest { return r }

// RunUpdateParameters - The set of run properties that can be updated.
type RunUpdateParameters struct {
	// The value that indicates whether archiving is enabled or not.
	IsArchiveEnabled *bool
}

// SecretObject - Describes the properties of a secret object value.
type SecretObject struct {
	// The type of the secret object which determines how the value of the secret object has to be
	// interpreted.
	Type *SecretObjectType

	// The value of the secret. The format of this value will be determined
	// based on the type of the secret object. If the type is Opaque, the value will be
	// used as is without any modification.
	Value *string
}

// SetValue - The properties of a overridable value that can be passed to a task template.
type SetValue struct {
	// REQUIRED; The name of the overridable value.
	Name *string

	// REQUIRED; The overridable value.
	Value *string

	// Flag to indicate whether the value represents a secret or not.
	IsSecret *bool
}

// SourceProperties - The properties of the source code repository.
type SourceProperties struct {
	// REQUIRED; The full URL to the source code repository
	RepositoryURL *string

	// REQUIRED; The type of source control service.
	SourceControlType *SourceControlType

	// The branch name of the source code.
	Branch *string

	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfo
}

// SourceRegistryCredentials - Describes the credential parameters for accessing the source registry.
type SourceRegistryCredentials struct {
	// The Entra identity used for source registry login.
	// The value is `[system]` for system-assigned managed identity, `[caller]` for caller identity,
	// and client ID for user-assigned managed identity.
	Identity *string

	// The authentication mode which determines the source registry login scope. The credentials for the source registry
	// will be generated using the given scope. These credentials will be used to login to
	// the source registry during the run.
	LoginMode *SourceRegistryLoginMode
}

// SourceTrigger - The properties of a source based trigger.
type SourceTrigger struct {
	// REQUIRED; The name of the trigger.
	Name *string

	// REQUIRED; The properties that describes the source(code) for the task.
	SourceRepository *SourceProperties

	// REQUIRED; The source event corresponding to the trigger.
	SourceTriggerEvents []*SourceTriggerEvent

	// The current status of trigger.
	Status *TriggerStatus
}

// SourceTriggerDescriptor - The source trigger that caused a run.
type SourceTriggerDescriptor struct {
	// The branch name in the repository.
	BranchName *string

	// The unique ID that identifies a commit.
	CommitID *string

	// The event type of the trigger.
	EventType *string

	// The unique ID of the trigger.
	ID *string

	// The source control provider type.
	ProviderType *string

	// The unique ID that identifies pull request.
	PullRequestID *string

	// The repository URL.
	RepositoryURL *string
}

// SourceTriggerUpdateParameters - The properties for updating a source based trigger.
type SourceTriggerUpdateParameters struct {
	// REQUIRED; The name of the trigger.
	Name *string

	// The properties that describes the source(code) for the task.
	SourceRepository *SourceUpdateParameters

	// The source event corresponding to the trigger.
	SourceTriggerEvents []*SourceTriggerEvent

	// The current status of trigger.
	Status *TriggerStatus
}

// SourceUpdateParameters - The properties for updating the source code repository.
type SourceUpdateParameters struct {
	// The branch name of the source code.
	Branch *string

	// The full URL to the source code repository
	RepositoryURL *string

	// The authorization properties for accessing the source code repository and to set up
	// webhooks for notifications.
	SourceControlAuthProperties *AuthInfoUpdateParameters

	// The type of source control service.
	SourceControlType *SourceControlType
}

// SourceUploadDefinition - The properties of a response to source upload request.
type SourceUploadDefinition struct {
	// The relative path to the source. This is used to submit the subsequent queue build request.
	RelativePath *string

	// The URL where the client can upload the source.
	UploadURL *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// Task - The task that has the ARM resource and task properties.
// The task will have all information to schedule a run against it.
type Task struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Identity for the resource.
	Identity *IdentityProperties

	// The properties of a task.
	Properties *TaskProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TaskListResult - The collection of tasks.
type TaskListResult struct {
	// The URI that can be used to request the next set of paged results.
	NextLink *string

	// The collection value.
	Value []*Task
}

// TaskProperties - The properties of a task.
type TaskProperties struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the task.
	AgentPoolName *string

	// The properties that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials

	// The value of this property indicates whether the task resource is system task or not.
	IsSystemTask *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// The platform properties against which the run has to happen.
	Platform *PlatformProperties

	// The current status of task.
	Status *TaskStatus

	// The properties of a task step.
	Step TaskStepPropertiesClassification

	// Run timeout in seconds.
	Timeout *int32

	// The properties that describe all triggers for the task.
	Trigger *TriggerProperties

	// READ-ONLY; The creation date of task.
	CreationDate *time.Time

	// READ-ONLY; The provisioning state of the task.
	ProvisioningState *ProvisioningState
}

// TaskPropertiesUpdateParameters - The properties for updating a task.
type TaskPropertiesUpdateParameters struct {
	// The machine configuration of the run agent.
	AgentConfiguration *AgentProperties

	// The dedicated agent pool for the task.
	AgentPoolName *string

	// The parameters that describes a set of credentials that will be used when this run is invoked.
	Credentials *Credentials

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// The platform properties against which the run has to happen.
	Platform *PlatformUpdateParameters

	// The current status of task.
	Status *TaskStatus

	// The properties for updating a task step.
	Step TaskStepUpdateParametersClassification

	// Run timeout in seconds.
	Timeout *int32

	// The properties for updating trigger properties.
	Trigger *TriggerUpdateParameters
}

// TaskRun - The task run that has the ARM resource and properties.
// The task run will have the information of request and result of a run.
type TaskRun struct {
	// Identity for the resource.
	Identity *IdentityProperties

	// The location of the resource
	Location *string

	// The properties associated with the task run, i.e., request and result of the run
	Properties *TaskRunProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TaskRunListResult - The collection of task runs.
type TaskRunListResult struct {
	// The URI that can be used to request the next set of paged results.
	NextLink *string

	// The collection value.
	Value []*TaskRun
}

// TaskRunProperties - The properties of task run.
type TaskRunProperties struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag *string

	// The request (parameters) for the run
	RunRequest RunRequestClassification

	// READ-ONLY; The provisioning state of this task run
	ProvisioningState *ProvisioningState

	// READ-ONLY; The result of this task run
	RunResult *Run
}

// TaskRunPropertiesUpdateParameters - The properties of a task run update parameters.
type TaskRunPropertiesUpdateParameters struct {
	// How the run should be forced to rerun even if the run request configuration has not changed
	ForceUpdateTag *string

	// The request (parameters) for the new run
	RunRequest RunRequestClassification
}

// TaskRunRequest - The parameters for a task run request.
type TaskRunRequest struct {
	// REQUIRED; The resource ID of task against which run has to be queued.
	TaskID *string

	// CONSTANT; The type of the run request.
	// Field has constant value "TaskRunRequest", any specified value is ignored.
	Type *string

	// The dedicated agent pool for the run.
	AgentPoolName *string

	// The value that indicates whether archiving is enabled for the run or not.
	IsArchiveEnabled *bool

	// The template that describes the repository and tag information for run log artifact.
	LogTemplate *string

	// Set of overridable parameters that can be passed when running a Task.
	OverrideTaskStepProperties *OverrideTaskStepProperties
}

// GetRunRequest implements the RunRequestClassification interface for type TaskRunRequest.
func (t *TaskRunRequest) GetRunRequest() *RunRequest {
	return &RunRequest{
		AgentPoolName:    t.AgentPoolName,
		IsArchiveEnabled: t.IsArchiveEnabled,
		LogTemplate:      t.LogTemplate,
		Type:             t.Type,
	}
}

// TaskRunUpdateParameters - The parameters for updating a task run.
type TaskRunUpdateParameters struct {
	// Identity for the resource.
	Identity *IdentityProperties

	// The location of the resource
	Location *string

	// The properties for updating a task run.
	Properties *TaskRunPropertiesUpdateParameters

	// The ARM resource tags.
	Tags map[string]*string
}

// TaskStepProperties - Base properties for any task step.
type TaskStepProperties struct {
	// REQUIRED; The type of the step.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string

	// READ-ONLY; List of base image dependencies for a step.
	BaseImageDependencies []*BaseImageDependency
}

// GetTaskStepProperties implements the TaskStepPropertiesClassification interface for type TaskStepProperties.
func (t *TaskStepProperties) GetTaskStepProperties() *TaskStepProperties { return t }

// TaskStepUpdateParameters - Base properties for updating any task step.
type TaskStepUpdateParameters struct {
	// REQUIRED; The type of the step.
	Type *StepType

	// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
	ContextAccessToken *string

	// The URL(absolute or relative) of the source context for the task step.
	ContextPath *string
}

// GetTaskStepUpdateParameters implements the TaskStepUpdateParametersClassification interface for type TaskStepUpdateParameters.
func (t *TaskStepUpdateParameters) GetTaskStepUpdateParameters() *TaskStepUpdateParameters { return t }

// TaskUpdateParameters - The parameters for updating a task.
type TaskUpdateParameters struct {
	// Identity for the resource.
	Identity *IdentityProperties

	// The properties for updating a task.
	Properties *TaskPropertiesUpdateParameters

	// The ARM resource tags.
	Tags map[string]*string
}

// TimerTrigger - The properties of a timer trigger.
type TimerTrigger struct {
	// REQUIRED; The name of the trigger.
	Name *string

	// REQUIRED; The CRON expression for the task schedule
	Schedule *string

	// The current status of trigger.
	Status *TriggerStatus
}

type TimerTriggerDescriptor struct {
	// The occurrence that triggered the run.
	ScheduleOccurrence *string

	// The timer trigger name that caused the run.
	TimerTriggerName *string
}

// TimerTriggerUpdateParameters - The properties for updating a timer trigger.
type TimerTriggerUpdateParameters struct {
	// REQUIRED; The name of the trigger.
	Name *string

	// The CRON expression for the task schedule
	Schedule *string

	// The current status of trigger.
	Status *TriggerStatus
}

// TriggerProperties - The properties of a trigger.
type TriggerProperties struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTrigger

	// The collection of triggers based on source code repository.
	SourceTriggers []*SourceTrigger

	// The collection of timer triggers.
	TimerTriggers []*TimerTrigger
}

// TriggerUpdateParameters - The properties for updating triggers.
type TriggerUpdateParameters struct {
	// The trigger based on base image dependencies.
	BaseImageTrigger *BaseImageTriggerUpdateParameters

	// The collection of triggers based on source code repository.
	SourceTriggers []*SourceTriggerUpdateParameters

	// The collection of timer triggers.
	TimerTriggers []*TimerTriggerUpdateParameters
}

type UserIdentityProperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}
