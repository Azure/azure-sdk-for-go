// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice/v7"
	"net/http"
	"net/url"
	"regexp"
)

// JWTAuthenticatorsServer is a fake server for instances of the armcontainerservice.JWTAuthenticatorsClient type.
type JWTAuthenticatorsServer struct {
	// BeginCreateOrUpdate is the fake for method JWTAuthenticatorsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, resourceName string, jwtAuthenticatorName string, parameters armcontainerservice.JWTAuthenticator, options *armcontainerservice.JWTAuthenticatorsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method JWTAuthenticatorsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, resourceName string, jwtAuthenticatorName string, options *armcontainerservice.JWTAuthenticatorsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method JWTAuthenticatorsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, resourceName string, jwtAuthenticatorName string, options *armcontainerservice.JWTAuthenticatorsClientGetOptions) (resp azfake.Responder[armcontainerservice.JWTAuthenticatorsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByManagedClusterPager is the fake for method JWTAuthenticatorsClient.NewListByManagedClusterPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByManagedClusterPager func(resourceGroupName string, resourceName string, options *armcontainerservice.JWTAuthenticatorsClientListByManagedClusterOptions) (resp azfake.PagerResponder[armcontainerservice.JWTAuthenticatorsClientListByManagedClusterResponse])
}

// NewJWTAuthenticatorsServerTransport creates a new instance of JWTAuthenticatorsServerTransport with the provided implementation.
// The returned JWTAuthenticatorsServerTransport instance is connected to an instance of armcontainerservice.JWTAuthenticatorsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewJWTAuthenticatorsServerTransport(srv *JWTAuthenticatorsServer) *JWTAuthenticatorsServerTransport {
	return &JWTAuthenticatorsServerTransport{
		srv:                          srv,
		beginCreateOrUpdate:          newTracker[azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientCreateOrUpdateResponse]](),
		beginDelete:                  newTracker[azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientDeleteResponse]](),
		newListByManagedClusterPager: newTracker[azfake.PagerResponder[armcontainerservice.JWTAuthenticatorsClientListByManagedClusterResponse]](),
	}
}

// JWTAuthenticatorsServerTransport connects instances of armcontainerservice.JWTAuthenticatorsClient to instances of JWTAuthenticatorsServer.
// Don't use this type directly, use NewJWTAuthenticatorsServerTransport instead.
type JWTAuthenticatorsServerTransport struct {
	srv                          *JWTAuthenticatorsServer
	beginCreateOrUpdate          *tracker[azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientCreateOrUpdateResponse]]
	beginDelete                  *tracker[azfake.PollerResponder[armcontainerservice.JWTAuthenticatorsClientDeleteResponse]]
	newListByManagedClusterPager *tracker[azfake.PagerResponder[armcontainerservice.JWTAuthenticatorsClientListByManagedClusterResponse]]
}

// Do implements the policy.Transporter interface for JWTAuthenticatorsServerTransport.
func (j *JWTAuthenticatorsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return j.dispatchToMethodFake(req, method)
}

func (j *JWTAuthenticatorsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if jwtAuthenticatorsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = jwtAuthenticatorsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "JWTAuthenticatorsClient.BeginCreateOrUpdate":
				res.resp, res.err = j.dispatchBeginCreateOrUpdate(req)
			case "JWTAuthenticatorsClient.BeginDelete":
				res.resp, res.err = j.dispatchBeginDelete(req)
			case "JWTAuthenticatorsClient.Get":
				res.resp, res.err = j.dispatchGet(req)
			case "JWTAuthenticatorsClient.NewListByManagedClusterPager":
				res.resp, res.err = j.dispatchNewListByManagedClusterPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (j *JWTAuthenticatorsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if j.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := j.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/managedClusters/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jwtAuthenticators/(?P<jwtAuthenticatorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armcontainerservice.JWTAuthenticator](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		jwtAuthenticatorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jwtAuthenticatorName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := j.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, resourceNameParam, jwtAuthenticatorNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		j.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		j.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		j.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (j *JWTAuthenticatorsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if j.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := j.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/managedClusters/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jwtAuthenticators/(?P<jwtAuthenticatorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		jwtAuthenticatorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jwtAuthenticatorName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := j.srv.BeginDelete(req.Context(), resourceGroupNameParam, resourceNameParam, jwtAuthenticatorNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		j.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		j.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		j.beginDelete.remove(req)
	}

	return resp, nil
}

func (j *JWTAuthenticatorsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if j.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/managedClusters/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jwtAuthenticators/(?P<jwtAuthenticatorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
	if err != nil {
		return nil, err
	}
	jwtAuthenticatorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("jwtAuthenticatorName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := j.srv.Get(req.Context(), resourceGroupNameParam, resourceNameParam, jwtAuthenticatorNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).JWTAuthenticator, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (j *JWTAuthenticatorsServerTransport) dispatchNewListByManagedClusterPager(req *http.Request) (*http.Response, error) {
	if j.srv.NewListByManagedClusterPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByManagedClusterPager not implemented")}
	}
	newListByManagedClusterPager := j.newListByManagedClusterPager.get(req)
	if newListByManagedClusterPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/managedClusters/(?P<resourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/jwtAuthenticators`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceName")])
		if err != nil {
			return nil, err
		}
		resp := j.srv.NewListByManagedClusterPager(resourceGroupNameParam, resourceNameParam, nil)
		newListByManagedClusterPager = &resp
		j.newListByManagedClusterPager.add(req, newListByManagedClusterPager)
		server.PagerResponderInjectNextLinks(newListByManagedClusterPager, req, func(page *armcontainerservice.JWTAuthenticatorsClientListByManagedClusterResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByManagedClusterPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		j.newListByManagedClusterPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByManagedClusterPager) {
		j.newListByManagedClusterPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to JWTAuthenticatorsServerTransport
var jwtAuthenticatorsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
