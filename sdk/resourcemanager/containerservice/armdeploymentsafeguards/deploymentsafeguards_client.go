// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdeploymentsafeguards

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// DeploymentSafeguardsClient contains the methods for the DeploymentSafeguards group.
// Don't use this type directly, use NewDeploymentSafeguardsClient() instead.
type DeploymentSafeguardsClient struct {
	internal *arm.Client
}

// NewDeploymentSafeguardsClient creates a new instance of DeploymentSafeguardsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDeploymentSafeguardsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*DeploymentSafeguardsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DeploymentSafeguardsClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreate - Creates or updates a deploymentSafeguard
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-02-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - resource - Resource create parameters.
//   - options - DeploymentSafeguardsClientBeginCreateOptions contains the optional parameters for the DeploymentSafeguardsClient.BeginCreate
//     method.
func (client *DeploymentSafeguardsClient) BeginCreate(ctx context.Context, resourceURI string, resource DeploymentSafeguard, options *DeploymentSafeguardsClientBeginCreateOptions) (*runtime.Poller[DeploymentSafeguardsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceURI, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DeploymentSafeguardsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DeploymentSafeguardsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Creates or updates a deploymentSafeguard
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-02-preview
func (client *DeploymentSafeguardsClient) create(ctx context.Context, resourceURI string, resource DeploymentSafeguard, options *DeploymentSafeguardsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "DeploymentSafeguardsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceURI, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *DeploymentSafeguardsClient) createCreateRequest(ctx context.Context, resourceURI string, resource DeploymentSafeguard, _ *DeploymentSafeguardsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ContainerService/deploymentSafeguards/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete DeploymentSafeguards
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-02-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - DeploymentSafeguardsClientBeginDeleteOptions contains the optional parameters for the DeploymentSafeguardsClient.BeginDelete
//     method.
func (client *DeploymentSafeguardsClient) BeginDelete(ctx context.Context, resourceURI string, options *DeploymentSafeguardsClientBeginDeleteOptions) (*runtime.Poller[DeploymentSafeguardsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceURI, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DeploymentSafeguardsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DeploymentSafeguardsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete DeploymentSafeguards
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-02-preview
func (client *DeploymentSafeguardsClient) deleteOperation(ctx context.Context, resourceURI string, options *DeploymentSafeguardsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DeploymentSafeguardsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceURI, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DeploymentSafeguardsClient) deleteCreateRequest(ctx context.Context, resourceURI string, _ *DeploymentSafeguardsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ContainerService/deploymentSafeguards/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Fetch a deployment safeguard by name
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-02-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - DeploymentSafeguardsClientGetOptions contains the optional parameters for the DeploymentSafeguardsClient.Get
//     method.
func (client *DeploymentSafeguardsClient) Get(ctx context.Context, resourceURI string, options *DeploymentSafeguardsClientGetOptions) (DeploymentSafeguardsClientGetResponse, error) {
	var err error
	const operationName = "DeploymentSafeguardsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, options)
	if err != nil {
		return DeploymentSafeguardsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DeploymentSafeguardsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DeploymentSafeguardsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DeploymentSafeguardsClient) getCreateRequest(ctx context.Context, resourceURI string, _ *DeploymentSafeguardsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ContainerService/deploymentSafeguards/default"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DeploymentSafeguardsClient) getHandleResponse(resp *http.Response) (DeploymentSafeguardsClientGetResponse, error) {
	result := DeploymentSafeguardsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentSafeguard); err != nil {
		return DeploymentSafeguardsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - List DeploymentSafeguards by parent resource
//
// Generated from API version 2025-05-02-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - DeploymentSafeguardsClientListOptions contains the optional parameters for the DeploymentSafeguardsClient.NewListPager
//     method.
func (client *DeploymentSafeguardsClient) NewListPager(resourceURI string, options *DeploymentSafeguardsClientListOptions) *runtime.Pager[DeploymentSafeguardsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DeploymentSafeguardsClientListResponse]{
		More: func(page DeploymentSafeguardsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DeploymentSafeguardsClientListResponse) (DeploymentSafeguardsClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DeploymentSafeguardsClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceURI, options)
			}, nil)
			if err != nil {
				return DeploymentSafeguardsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *DeploymentSafeguardsClient) listCreateRequest(ctx context.Context, resourceURI string, _ *DeploymentSafeguardsClientListOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.ContainerService/deploymentSafeguards"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DeploymentSafeguardsClient) listHandleResponse(resp *http.Response) (DeploymentSafeguardsClientListResponse, error) {
	result := DeploymentSafeguardsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentSafeguardListResult); err != nil {
		return DeploymentSafeguardsClientListResponse{}, err
	}
	return result, nil
}
