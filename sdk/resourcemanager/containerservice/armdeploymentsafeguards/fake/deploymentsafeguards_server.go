// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armdeploymentsafeguards"
	"net/http"
	"net/url"
	"regexp"
)

// DeploymentSafeguardsServer is a fake server for instances of the armdeploymentsafeguards.DeploymentSafeguardsClient type.
type DeploymentSafeguardsServer struct {
	// BeginCreate is the fake for method DeploymentSafeguardsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreate func(ctx context.Context, resourceURI string, resource armdeploymentsafeguards.DeploymentSafeguard, options *armdeploymentsafeguards.DeploymentSafeguardsClientBeginCreateOptions) (resp azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method DeploymentSafeguardsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceURI string, options *armdeploymentsafeguards.DeploymentSafeguardsClientBeginDeleteOptions) (resp azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method DeploymentSafeguardsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, options *armdeploymentsafeguards.DeploymentSafeguardsClientGetOptions) (resp azfake.Responder[armdeploymentsafeguards.DeploymentSafeguardsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method DeploymentSafeguardsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceURI string, options *armdeploymentsafeguards.DeploymentSafeguardsClientListOptions) (resp azfake.PagerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientListResponse])
}

// NewDeploymentSafeguardsServerTransport creates a new instance of DeploymentSafeguardsServerTransport with the provided implementation.
// The returned DeploymentSafeguardsServerTransport instance is connected to an instance of armdeploymentsafeguards.DeploymentSafeguardsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDeploymentSafeguardsServerTransport(srv *DeploymentSafeguardsServer) *DeploymentSafeguardsServerTransport {
	return &DeploymentSafeguardsServerTransport{
		srv:          srv,
		beginCreate:  newTracker[azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientCreateResponse]](),
		beginDelete:  newTracker[azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientDeleteResponse]](),
		newListPager: newTracker[azfake.PagerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientListResponse]](),
	}
}

// DeploymentSafeguardsServerTransport connects instances of armdeploymentsafeguards.DeploymentSafeguardsClient to instances of DeploymentSafeguardsServer.
// Don't use this type directly, use NewDeploymentSafeguardsServerTransport instead.
type DeploymentSafeguardsServerTransport struct {
	srv          *DeploymentSafeguardsServer
	beginCreate  *tracker[azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientCreateResponse]]
	beginDelete  *tracker[azfake.PollerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientDeleteResponse]]
	newListPager *tracker[azfake.PagerResponder[armdeploymentsafeguards.DeploymentSafeguardsClientListResponse]]
}

// Do implements the policy.Transporter interface for DeploymentSafeguardsServerTransport.
func (d *DeploymentSafeguardsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DeploymentSafeguardsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if deploymentSafeguardsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = deploymentSafeguardsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DeploymentSafeguardsClient.BeginCreate":
				res.resp, res.err = d.dispatchBeginCreate(req)
			case "DeploymentSafeguardsClient.BeginDelete":
				res.resp, res.err = d.dispatchBeginDelete(req)
			case "DeploymentSafeguardsClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DeploymentSafeguardsClient.NewListPager":
				res.resp, res.err = d.dispatchNewListPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DeploymentSafeguardsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := d.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/deploymentSafeguards/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeploymentsafeguards.DeploymentSafeguard](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreate(req.Context(), resourceURIParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		d.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		d.beginCreate.remove(req)
	}

	return resp, nil
}

func (d *DeploymentSafeguardsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := d.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/deploymentSafeguards/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginDelete(req.Context(), resourceURIParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		d.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		d.beginDelete.remove(req)
	}

	return resp, nil
}

func (d *DeploymentSafeguardsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/deploymentSafeguards/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceURIParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentSafeguard, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentSafeguardsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := d.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/deploymentSafeguards`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListPager(resourceURIParam, nil)
		newListPager = &resp
		d.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armdeploymentsafeguards.DeploymentSafeguardsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		d.newListPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DeploymentSafeguardsServerTransport
var deploymentSafeguardsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
