// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservicefleet/armcontainerservicefleet/v2"
	"net/http"
	"net/url"
	"regexp"
)

// AutoUpgradeProfileOperationsServer is a fake server for instances of the armcontainerservicefleet.AutoUpgradeProfileOperationsClient type.
type AutoUpgradeProfileOperationsServer struct {
	// BeginGenerateUpdateRun is the fake for method AutoUpgradeProfileOperationsClient.BeginGenerateUpdateRun
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginGenerateUpdateRun func(ctx context.Context, resourceGroupName string, fleetName string, autoUpgradeProfileName string, options *armcontainerservicefleet.AutoUpgradeProfileOperationsClientBeginGenerateUpdateRunOptions) (resp azfake.PollerResponder[armcontainerservicefleet.AutoUpgradeProfileOperationsClientGenerateUpdateRunResponse], errResp azfake.ErrorResponder)
}

// NewAutoUpgradeProfileOperationsServerTransport creates a new instance of AutoUpgradeProfileOperationsServerTransport with the provided implementation.
// The returned AutoUpgradeProfileOperationsServerTransport instance is connected to an instance of armcontainerservicefleet.AutoUpgradeProfileOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAutoUpgradeProfileOperationsServerTransport(srv *AutoUpgradeProfileOperationsServer) *AutoUpgradeProfileOperationsServerTransport {
	return &AutoUpgradeProfileOperationsServerTransport{
		srv:                    srv,
		beginGenerateUpdateRun: newTracker[azfake.PollerResponder[armcontainerservicefleet.AutoUpgradeProfileOperationsClientGenerateUpdateRunResponse]](),
	}
}

// AutoUpgradeProfileOperationsServerTransport connects instances of armcontainerservicefleet.AutoUpgradeProfileOperationsClient to instances of AutoUpgradeProfileOperationsServer.
// Don't use this type directly, use NewAutoUpgradeProfileOperationsServerTransport instead.
type AutoUpgradeProfileOperationsServerTransport struct {
	srv                    *AutoUpgradeProfileOperationsServer
	beginGenerateUpdateRun *tracker[azfake.PollerResponder[armcontainerservicefleet.AutoUpgradeProfileOperationsClientGenerateUpdateRunResponse]]
}

// Do implements the policy.Transporter interface for AutoUpgradeProfileOperationsServerTransport.
func (a *AutoUpgradeProfileOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AutoUpgradeProfileOperationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if autoUpgradeProfileOperationsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = autoUpgradeProfileOperationsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AutoUpgradeProfileOperationsClient.BeginGenerateUpdateRun":
				res.resp, res.err = a.dispatchBeginGenerateUpdateRun(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AutoUpgradeProfileOperationsServerTransport) dispatchBeginGenerateUpdateRun(req *http.Request) (*http.Response, error) {
	if a.srv.BeginGenerateUpdateRun == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginGenerateUpdateRun not implemented")}
	}
	beginGenerateUpdateRun := a.beginGenerateUpdateRun.get(req)
	if beginGenerateUpdateRun == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/fleets/(?P<fleetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/autoUpgradeProfiles/(?P<autoUpgradeProfileName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateUpdateRun`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		fleetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("fleetName")])
		if err != nil {
			return nil, err
		}
		autoUpgradeProfileNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("autoUpgradeProfileName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginGenerateUpdateRun(req.Context(), resourceGroupNameParam, fleetNameParam, autoUpgradeProfileNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginGenerateUpdateRun = &respr
		a.beginGenerateUpdateRun.add(req, beginGenerateUpdateRun)
	}

	resp, err := server.PollerResponderNext(beginGenerateUpdateRun, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginGenerateUpdateRun.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginGenerateUpdateRun) {
		a.beginGenerateUpdateRun.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to AutoUpgradeProfileOperationsServerTransport
var autoUpgradeProfileOperationsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
