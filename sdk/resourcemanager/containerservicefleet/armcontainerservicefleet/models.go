//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcontainerservicefleet

import "time"

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// Fleet - The Fleet resource.
type Fleet struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *FleetProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource.
	// HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range
	// (section 14.27) header fields.
	ETag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// FleetCredentialResult - One credential result item.
type FleetCredentialResult struct {
	// READ-ONLY; The name of the credential.
	Name *string

	// READ-ONLY; Base64-encoded Kubernetes configuration file.
	Value []byte
}

// FleetCredentialResults - The Credential results response.
type FleetCredentialResults struct {
	// READ-ONLY; Array of base64-encoded Kubernetes configuration files.
	Kubeconfigs []*FleetCredentialResult
}

// FleetHubProfile - The FleetHubProfile configures the fleet hub.
type FleetHubProfile struct {
	// DNS prefix used to create the FQDN for the Fleet hub.
	DNSPrefix *string

	// READ-ONLY; The FQDN of the Fleet hub.
	Fqdn *string

	// READ-ONLY; The Kubernetes version of the Fleet hub.
	KubernetesVersion *string
}

// FleetListResult - The response of a Fleet list operation.
type FleetListResult struct {
	// REQUIRED; The Fleet items on this page
	Value []*Fleet

	// The link to the next page of items
	NextLink *string
}

// FleetMember - A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.
type FleetMember struct {
	// The resource-specific properties for this resource.
	Properties *FleetMemberProperties

	// READ-ONLY; If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource.
	// HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range
	// (section 14.27) header fields.
	ETag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// FleetMemberListResult - The response of a FleetMember list operation.
type FleetMemberListResult struct {
	// REQUIRED; The FleetMember items on this page
	Value []*FleetMember

	// The link to the next page of items
	NextLink *string
}

// FleetMemberProperties - A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.
type FleetMemberProperties struct {
	// REQUIRED; The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
	ClusterResourceID *string

	// The group this member belongs to for multi-cluster update management.
	Group *string

	// READ-ONLY; The status of the last operation.
	ProvisioningState *FleetMemberProvisioningState
}

// FleetMemberUpdate - The type used for update operations of the FleetMember.
type FleetMemberUpdate struct {
	// The updatable properties of the FleetMember.
	Properties *FleetMemberUpdateProperties
}

// FleetMemberUpdateProperties - The updatable properties of the FleetMember.
type FleetMemberUpdateProperties struct {
	// The group this member belongs to for multi-cluster update management.
	Group *string
}

// FleetMembersClientBeginCreateOptions contains the optional parameters for the FleetMembersClient.BeginCreate method.
type FleetMembersClientBeginCreateOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// The request should only proceed if no entity matches this string.
	IfNoneMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// FleetMembersClientBeginDeleteOptions contains the optional parameters for the FleetMembersClient.BeginDelete method.
type FleetMembersClientBeginDeleteOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// FleetMembersClientGetOptions contains the optional parameters for the FleetMembersClient.Get method.
type FleetMembersClientGetOptions struct {
	// placeholder for future optional parameters
}

// FleetMembersClientListByFleetOptions contains the optional parameters for the FleetMembersClient.NewListByFleetPager method.
type FleetMembersClientListByFleetOptions struct {
	// placeholder for future optional parameters
}

// FleetMembersClientUpdateOptions contains the optional parameters for the FleetMembersClient.Update method.
type FleetMembersClientUpdateOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
}

// FleetPatch - Properties of a Fleet that can be patched.
type FleetPatch struct {
	// Resource tags.
	Tags map[string]*string
}

// FleetProperties - Fleet properties.
type FleetProperties struct {
	// The FleetHubProfile configures the Fleet's hub.
	HubProfile *FleetHubProfile

	// READ-ONLY; The status of the last operation.
	ProvisioningState *FleetProvisioningState
}

// FleetsClientBeginCreateOrUpdateOptions contains the optional parameters for the FleetsClient.BeginCreateOrUpdate method.
type FleetsClientBeginCreateOrUpdateOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// The request should only proceed if no entity matches this string.
	IfNoneMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// FleetsClientBeginDeleteOptions contains the optional parameters for the FleetsClient.BeginDelete method.
type FleetsClientBeginDeleteOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// FleetsClientGetOptions contains the optional parameters for the FleetsClient.Get method.
type FleetsClientGetOptions struct {
	// placeholder for future optional parameters
}

// FleetsClientListByResourceGroupOptions contains the optional parameters for the FleetsClient.NewListByResourceGroupPager
// method.
type FleetsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// FleetsClientListBySubscriptionOptions contains the optional parameters for the FleetsClient.NewListBySubscriptionPager
// method.
type FleetsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// FleetsClientListCredentialsOptions contains the optional parameters for the FleetsClient.ListCredentials method.
type FleetsClientListCredentialsOptions struct {
	// placeholder for future optional parameters
}

// FleetsClientUpdateOptions contains the optional parameters for the FleetsClient.Update method.
type FleetsClientUpdateOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
}

// ManagedClusterUpdate - The update to be applied to the ManagedClusters.
type ManagedClusterUpdate struct {
	// REQUIRED; The upgrade to apply to the ManagedClusters.
	Upgrade *ManagedClusterUpgradeSpec
}

// ManagedClusterUpgradeSpec - The upgrade to apply to a ManagedCluster.
type ManagedClusterUpgradeSpec struct {
	// REQUIRED; The upgrade type. Full requires the KubernetesVersion property to be set. NodeImageOnly requires the KubernetesVersion
	// property not to be set.
	Type *ManagedClusterUpgradeType

	// The Kubernetes version to upgrade the member clusters to.
	KubernetesVersion *string
}

// MemberUpdateStatus - The status of a member update operation.
type MemberUpdateStatus struct {
	// READ-ONLY; The Azure resource id of the target Kubernetes cluster.
	ClusterResourceID *string

	// READ-ONLY; The name of the FleetMember.
	Name *string

	// READ-ONLY; The operation resource id of the latest attempt to perform the operation.
	OperationID *string

	// READ-ONLY; The status of the MemberUpdate operation.
	Status *UpdateStatus
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UpdateGroup - A group to be updated.
type UpdateGroup struct {
	// REQUIRED; The name of the Fleet member group to update. It should match the name of an existing FleetMember group. A group
	// can only appear once across all UpdateStages in the UpdateRun.
	Name *string
}

// UpdateGroupStatus - The status of a UpdateGroup.
type UpdateGroupStatus struct {
	// READ-ONLY; The list of member this UpdateGroup updates.
	Members []*MemberUpdateStatus

	// READ-ONLY; The name of the UpdateGroup.
	Name *string

	// READ-ONLY; The status of the UpdateGroup.
	Status *UpdateStatus
}

// UpdateRun - An UpdateRun is a multi-stage process to perform update operations across members of a Fleet.
type UpdateRun struct {
	// The resource-specific properties for this resource.
	Properties *UpdateRunProperties

	// READ-ONLY; If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.
	// Entity tags are used for comparing two or more entities from the same requested resource.
	// HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range
	// (section 14.27) header fields.
	ETag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// UpdateRunListResult - The response of a UpdateRun list operation.
type UpdateRunListResult struct {
	// REQUIRED; The UpdateRun items on this page
	Value []*UpdateRun

	// The link to the next page of items
	NextLink *string
}

// UpdateRunProperties - The properties of the UpdateRun.
type UpdateRunProperties struct {
	// REQUIRED; The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the
	// run is started.
	ManagedClusterUpdate *ManagedClusterUpdate

	// The strategy defines the order in which the clusters will be updated. If not set, all members will be updated sequentially.
	// The UpdateRun status will show a single UpdateStage and a single UpdateGroup
	// targeting all members. The strategy of the UpdateRun can be modified until the run is started.
	Strategy *UpdateRunStrategy

	// READ-ONLY; The provisioning state of the UpdateRun resource.
	ProvisioningState *UpdateRunProvisioningState

	// READ-ONLY; The status of the UpdateRun.
	Status *UpdateRunStatus
}

// UpdateRunStatus - The status of a UpdateRun.
type UpdateRunStatus struct {
	// READ-ONLY; The stages composing an update run. Stages are run sequentially withing an UpdateRun.
	Stages []*UpdateStageStatus

	// READ-ONLY; The status of the UpdateRun.
	Status *UpdateStatus
}

// UpdateRunStrategy - The UpdateRunStrategy configures the sequence of Stages and Groups in which the clusters will be updated.
type UpdateRunStrategy struct {
	// REQUIRED; The list of stages that compose this update run.
	Stages []*UpdateStage
}

// UpdateRunsClientBeginCreateOrUpdateOptions contains the optional parameters for the UpdateRunsClient.BeginCreateOrUpdate
// method.
type UpdateRunsClientBeginCreateOrUpdateOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// The request should only proceed if no entity matches this string.
	IfNoneMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// UpdateRunsClientBeginDeleteOptions contains the optional parameters for the UpdateRunsClient.BeginDelete method.
type UpdateRunsClientBeginDeleteOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// UpdateRunsClientBeginStartOptions contains the optional parameters for the UpdateRunsClient.BeginStart method.
type UpdateRunsClientBeginStartOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// UpdateRunsClientBeginStopOptions contains the optional parameters for the UpdateRunsClient.BeginStop method.
type UpdateRunsClientBeginStopOptions struct {
	// The request should only proceed if an entity matches this string.
	IfMatch *string
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// UpdateRunsClientGetOptions contains the optional parameters for the UpdateRunsClient.Get method.
type UpdateRunsClientGetOptions struct {
	// placeholder for future optional parameters
}

// UpdateRunsClientListByFleetOptions contains the optional parameters for the UpdateRunsClient.NewListByFleetPager method.
type UpdateRunsClientListByFleetOptions struct {
	// placeholder for future optional parameters
}

// UpdateStage - Contains the groups to be updated by an UpdateRun. Update order:
// * Sequential between stages: Stages run sequentially. The previous stage must complete before the next one starts.
// * Parallel within a stage: Groups within a stage run in parallel.
// * Sequential within a group: Clusters within a group are updated sequentially.
type UpdateStage struct {
	// REQUIRED; The name of the stage. Must be unique within the UpdateRun.
	Name *string

	// The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified.
	AfterStageWaitInSeconds *int32

	// A list of group names that compose the stage. The groups will be updated in parallel. Each group name can only appear once
	// in the UpdateRun.
	Groups []*UpdateGroup
}

// UpdateStageStatus - The status of a UpdateStage.
type UpdateStageStatus struct {
	// READ-ONLY; The status of the wait period configured on the UpdateStage.
	AfterStageWaitStatus *WaitStatus

	// READ-ONLY; The list of groups to be updated as part of this UpdateStage.
	Groups []*UpdateGroupStatus

	// READ-ONLY; The name of the UpdateStage.
	Name *string

	// READ-ONLY; The status of the UpdateStage.
	Status *UpdateStatus
}

// UpdateStatus - The status for an operation or group of operations.
type UpdateStatus struct {
	// READ-ONLY; The time the operation or group was completed.
	CompletedTime *time.Time

	// READ-ONLY; The error details when a failure is encountered.
	Error *ErrorDetail

	// READ-ONLY; The time the operation or group was started.
	StartTime *time.Time

	// READ-ONLY; The State of the operation or group.
	State *UpdateState
}

// WaitStatus - The status of the wait duration.
type WaitStatus struct {
	// READ-ONLY; The status of the wait duration.
	Status *UpdateStatus

	// READ-ONLY; The wait duration configured in seconds.
	WaitDurationInSeconds *int32
}
