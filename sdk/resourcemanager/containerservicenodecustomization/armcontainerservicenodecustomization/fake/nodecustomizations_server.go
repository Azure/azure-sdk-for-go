// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservicenodecustomization/armcontainerservicenodecustomization"
	"net/http"
	"net/url"
	"regexp"
)

// NodeCustomizationsServer is a fake server for instances of the armcontainerservicenodecustomization.NodeCustomizationsClient type.
type NodeCustomizationsServer struct {
	// BeginCreateOrUpdate is the fake for method NodeCustomizationsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, resource armcontainerservicenodecustomization.NodeCustomization, options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method NodeCustomizationsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteResponse], errResp azfake.ErrorResponder)

	// BeginDeleteVersion is the fake for method NodeCustomizationsClient.BeginDeleteVersion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteVersion func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteVersionOptions) (resp azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteVersionResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method NodeCustomizationsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *armcontainerservicenodecustomization.NodeCustomizationsClientGetOptions) (resp azfake.Responder[armcontainerservicenodecustomization.NodeCustomizationsClientGetResponse], errResp azfake.ErrorResponder)

	// GetVersion is the fake for method NodeCustomizationsClient.GetVersion
	// HTTP status codes to indicate success: http.StatusOK
	GetVersion func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *armcontainerservicenodecustomization.NodeCustomizationsClientGetVersionOptions) (resp azfake.Responder[armcontainerservicenodecustomization.NodeCustomizationsClientGetVersionResponse], errResp azfake.ErrorResponder)

	// NewListByResourceGroupPager is the fake for method NodeCustomizationsClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armcontainerservicenodecustomization.NodeCustomizationsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListByResourceGroupResponse])

	// NewListBySubscriptionPager is the fake for method NodeCustomizationsClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(options *armcontainerservicenodecustomization.NodeCustomizationsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListBySubscriptionResponse])

	// NewListVersionsPager is the fake for method NodeCustomizationsClient.NewListVersionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListVersionsPager func(resourceGroupName string, nodeCustomizationName string, options *armcontainerservicenodecustomization.NodeCustomizationsClientListVersionsOptions) (resp azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListVersionsResponse])

	// BeginUpdate is the fake for method NodeCustomizationsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, nodeCustomizationName string, properties armcontainerservicenodecustomization.NodeCustomizationUpdate, options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewNodeCustomizationsServerTransport creates a new instance of NodeCustomizationsServerTransport with the provided implementation.
// The returned NodeCustomizationsServerTransport instance is connected to an instance of armcontainerservicenodecustomization.NodeCustomizationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewNodeCustomizationsServerTransport(srv *NodeCustomizationsServer) *NodeCustomizationsServerTransport {
	return &NodeCustomizationsServerTransport{
		srv:                         srv,
		beginCreateOrUpdate:         newTracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientCreateOrUpdateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteResponse]](),
		beginDeleteVersion:          newTracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteVersionResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListByResourceGroupResponse]](),
		newListBySubscriptionPager:  newTracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListBySubscriptionResponse]](),
		newListVersionsPager:        newTracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListVersionsResponse]](),
		beginUpdate:                 newTracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientUpdateResponse]](),
	}
}

// NodeCustomizationsServerTransport connects instances of armcontainerservicenodecustomization.NodeCustomizationsClient to instances of NodeCustomizationsServer.
// Don't use this type directly, use NewNodeCustomizationsServerTransport instead.
type NodeCustomizationsServerTransport struct {
	srv                         *NodeCustomizationsServer
	beginCreateOrUpdate         *tracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientCreateOrUpdateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteResponse]]
	beginDeleteVersion          *tracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientDeleteVersionResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListByResourceGroupResponse]]
	newListBySubscriptionPager  *tracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListBySubscriptionResponse]]
	newListVersionsPager        *tracker[azfake.PagerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientListVersionsResponse]]
	beginUpdate                 *tracker[azfake.PollerResponder[armcontainerservicenodecustomization.NodeCustomizationsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for NodeCustomizationsServerTransport.
func (n *NodeCustomizationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return n.dispatchToMethodFake(req, method)
}

func (n *NodeCustomizationsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if nodeCustomizationsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = nodeCustomizationsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "NodeCustomizationsClient.BeginCreateOrUpdate":
				res.resp, res.err = n.dispatchBeginCreateOrUpdate(req)
			case "NodeCustomizationsClient.BeginDelete":
				res.resp, res.err = n.dispatchBeginDelete(req)
			case "NodeCustomizationsClient.BeginDeleteVersion":
				res.resp, res.err = n.dispatchBeginDeleteVersion(req)
			case "NodeCustomizationsClient.Get":
				res.resp, res.err = n.dispatchGet(req)
			case "NodeCustomizationsClient.GetVersion":
				res.resp, res.err = n.dispatchGetVersion(req)
			case "NodeCustomizationsClient.NewListByResourceGroupPager":
				res.resp, res.err = n.dispatchNewListByResourceGroupPager(req)
			case "NodeCustomizationsClient.NewListBySubscriptionPager":
				res.resp, res.err = n.dispatchNewListBySubscriptionPager(req)
			case "NodeCustomizationsClient.NewListVersionsPager":
				res.resp, res.err = n.dispatchNewListVersionsPager(req)
			case "NodeCustomizationsClient.BeginUpdate":
				res.resp, res.err = n.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (n *NodeCustomizationsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if n.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := n.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armcontainerservicenodecustomization.NodeCustomization](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
		nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
		if err != nil {
			return nil, err
		}
		var options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginCreateOrUpdateOptions
		if ifMatchParam != nil || ifNoneMatchParam != nil {
			options = &armcontainerservicenodecustomization.NodeCustomizationsClientBeginCreateOrUpdateOptions{
				IfMatch:     ifMatchParam,
				IfNoneMatch: ifNoneMatchParam,
			}
		}
		respr, errRespr := n.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		n.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		n.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		n.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if n.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := n.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
		if err != nil {
			return nil, err
		}
		var options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteOptions
		if ifMatchParam != nil {
			options = &armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := n.srv.BeginDelete(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		n.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		n.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		n.beginDelete.remove(req)
	}

	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchBeginDeleteVersion(req *http.Request) (*http.Response, error) {
	if n.srv.BeginDeleteVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteVersion not implemented")}
	}
	beginDeleteVersion := n.beginDeleteVersion.get(req)
	if beginDeleteVersion == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
		if err != nil {
			return nil, err
		}
		versionParam, err := url.PathUnescape(matches[regex.SubexpIndex("version")])
		if err != nil {
			return nil, err
		}
		var options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteVersionOptions
		if ifMatchParam != nil {
			options = &armcontainerservicenodecustomization.NodeCustomizationsClientBeginDeleteVersionOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := n.srv.BeginDeleteVersion(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, versionParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteVersion = &respr
		n.beginDeleteVersion.add(req, beginDeleteVersion)
	}

	resp, err := server.PollerResponderNext(beginDeleteVersion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		n.beginDeleteVersion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteVersion) {
		n.beginDeleteVersion.remove(req)
	}

	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if n.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.Get(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NodeCustomization, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchGetVersion(req *http.Request) (*http.Response, error) {
	if n.srv.GetVersion == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetVersion not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<version>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
	if err != nil {
		return nil, err
	}
	versionParam, err := url.PathUnescape(matches[regex.SubexpIndex("version")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := n.srv.GetVersion(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, versionParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NodeCustomizationVersion, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if n.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := n.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := n.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		n.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armcontainerservicenodecustomization.NodeCustomizationsClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		n.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		n.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if n.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := n.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := n.srv.NewListBySubscriptionPager(nil)
		newListBySubscriptionPager = &resp
		n.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armcontainerservicenodecustomization.NodeCustomizationsClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		n.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		n.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchNewListVersionsPager(req *http.Request) (*http.Response, error) {
	if n.srv.NewListVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListVersionsPager not implemented")}
	}
	newListVersionsPager := n.newListVersionsPager.get(req)
	if newListVersionsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
		if err != nil {
			return nil, err
		}
		resp := n.srv.NewListVersionsPager(resourceGroupNameParam, nodeCustomizationNameParam, nil)
		newListVersionsPager = &resp
		n.newListVersionsPager.add(req, newListVersionsPager)
		server.PagerResponderInjectNextLinks(newListVersionsPager, req, func(page *armcontainerservicenodecustomization.NodeCustomizationsClientListVersionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListVersionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		n.newListVersionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListVersionsPager) {
		n.newListVersionsPager.remove(req)
	}
	return resp, nil
}

func (n *NodeCustomizationsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if n.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := n.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ContainerService/nodeCustomizations/(?P<nodeCustomizationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armcontainerservicenodecustomization.NodeCustomizationUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		nodeCustomizationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("nodeCustomizationName")])
		if err != nil {
			return nil, err
		}
		var options *armcontainerservicenodecustomization.NodeCustomizationsClientBeginUpdateOptions
		if ifMatchParam != nil {
			options = &armcontainerservicenodecustomization.NodeCustomizationsClientBeginUpdateOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := n.srv.BeginUpdate(req.Context(), resourceGroupNameParam, nodeCustomizationNameParam, body, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		n.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		n.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		n.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to NodeCustomizationsServerTransport
var nodeCustomizationsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
