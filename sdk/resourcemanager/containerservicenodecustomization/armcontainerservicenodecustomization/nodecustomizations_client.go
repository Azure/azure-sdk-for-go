// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcontainerservicenodecustomization

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NodeCustomizationsClient contains the methods for the NodeCustomizations group.
// Don't use this type directly, use NewNodeCustomizationsClient() instead.
type NodeCustomizationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNodeCustomizationsClient creates a new instance of NodeCustomizationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNodeCustomizationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NodeCustomizationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NodeCustomizationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update a node customization resource. This will create a new version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - resource - Resource create parameters.
//   - options - NodeCustomizationsClientBeginCreateOrUpdateOptions contains the optional parameters for the NodeCustomizationsClient.BeginCreateOrUpdate
//     method.
func (client *NodeCustomizationsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, nodeCustomizationName string, resource NodeCustomization, options *NodeCustomizationsClientBeginCreateOrUpdateOptions) (*runtime.Poller[NodeCustomizationsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, nodeCustomizationName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NodeCustomizationsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NodeCustomizationsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a node customization resource. This will create a new version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
func (client *NodeCustomizationsClient) createOrUpdate(ctx context.Context, resourceGroupName string, nodeCustomizationName string, resource NodeCustomization, options *NodeCustomizationsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "NodeCustomizationsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, nodeCustomizationName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *NodeCustomizationsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, resource NodeCustomization, options *NodeCustomizationsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a node customization. This operation will be blocked if the resource is in use.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - options - NodeCustomizationsClientBeginDeleteOptions contains the optional parameters for the NodeCustomizationsClient.BeginDelete
//     method.
func (client *NodeCustomizationsClient) BeginDelete(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *NodeCustomizationsClientBeginDeleteOptions) (*runtime.Poller[NodeCustomizationsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, nodeCustomizationName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NodeCustomizationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NodeCustomizationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a node customization. This operation will be blocked if the resource is in use.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
func (client *NodeCustomizationsClient) deleteOperation(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *NodeCustomizationsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "NodeCustomizationsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, nodeCustomizationName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *NodeCustomizationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *NodeCustomizationsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	return req, nil
}

// BeginDeleteVersion - Delete a node customization version. This operation will be blocked if the node customization version
// is in use.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - version - The version of the Node Customization.
//   - options - NodeCustomizationsClientBeginDeleteVersionOptions contains the optional parameters for the NodeCustomizationsClient.BeginDeleteVersion
//     method.
func (client *NodeCustomizationsClient) BeginDeleteVersion(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *NodeCustomizationsClientBeginDeleteVersionOptions) (*runtime.Poller[NodeCustomizationsClientDeleteVersionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteVersion(ctx, resourceGroupName, nodeCustomizationName, version, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NodeCustomizationsClientDeleteVersionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NodeCustomizationsClientDeleteVersionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// DeleteVersion - Delete a node customization version. This operation will be blocked if the node customization version is
// in use.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
func (client *NodeCustomizationsClient) deleteVersion(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *NodeCustomizationsClientBeginDeleteVersionOptions) (*http.Response, error) {
	var err error
	const operationName = "NodeCustomizationsClient.BeginDeleteVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteVersionCreateRequest(ctx, resourceGroupName, nodeCustomizationName, version, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteVersionCreateRequest creates the DeleteVersion request.
func (client *NodeCustomizationsClient) deleteVersionCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *NodeCustomizationsClientBeginDeleteVersionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	if version == "" {
		return nil, errors.New("parameter version cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	return req, nil
}

// Get - Get a node customization at the latest version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - options - NodeCustomizationsClientGetOptions contains the optional parameters for the NodeCustomizationsClient.Get method.
func (client *NodeCustomizationsClient) Get(ctx context.Context, resourceGroupName string, nodeCustomizationName string, options *NodeCustomizationsClientGetOptions) (NodeCustomizationsClientGetResponse, error) {
	var err error
	const operationName = "NodeCustomizationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, nodeCustomizationName, options)
	if err != nil {
		return NodeCustomizationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NodeCustomizationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NodeCustomizationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NodeCustomizationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, _ *NodeCustomizationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NodeCustomizationsClient) getHandleResponse(resp *http.Response) (NodeCustomizationsClientGetResponse, error) {
	result := NodeCustomizationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NodeCustomization); err != nil {
		return NodeCustomizationsClientGetResponse{}, err
	}
	return result, nil
}

// GetVersion - Get a node customization at a particular version.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - version - The version of the Node Customization.
//   - options - NodeCustomizationsClientGetVersionOptions contains the optional parameters for the NodeCustomizationsClient.GetVersion
//     method.
func (client *NodeCustomizationsClient) GetVersion(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, options *NodeCustomizationsClientGetVersionOptions) (NodeCustomizationsClientGetVersionResponse, error) {
	var err error
	const operationName = "NodeCustomizationsClient.GetVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getVersionCreateRequest(ctx, resourceGroupName, nodeCustomizationName, version, options)
	if err != nil {
		return NodeCustomizationsClientGetVersionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NodeCustomizationsClientGetVersionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NodeCustomizationsClientGetVersionResponse{}, err
	}
	resp, err := client.getVersionHandleResponse(httpResp)
	return resp, err
}

// getVersionCreateRequest creates the GetVersion request.
func (client *NodeCustomizationsClient) getVersionCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, version string, _ *NodeCustomizationsClientGetVersionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions/{version}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	if version == "" {
		return nil, errors.New("parameter version cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getVersionHandleResponse handles the GetVersion response.
func (client *NodeCustomizationsClient) getVersionHandleResponse(resp *http.Response) (NodeCustomizationsClientGetVersionResponse, error) {
	result := NodeCustomizationsClientGetVersionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NodeCustomizationVersion); err != nil {
		return NodeCustomizationsClientGetVersionResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List the node customizations in a resource group at the latest version.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - NodeCustomizationsClientListByResourceGroupOptions contains the optional parameters for the NodeCustomizationsClient.NewListByResourceGroupPager
//     method.
func (client *NodeCustomizationsClient) NewListByResourceGroupPager(resourceGroupName string, options *NodeCustomizationsClientListByResourceGroupOptions) *runtime.Pager[NodeCustomizationsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[NodeCustomizationsClientListByResourceGroupResponse]{
		More: func(page NodeCustomizationsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NodeCustomizationsClientListByResourceGroupResponse) (NodeCustomizationsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NodeCustomizationsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return NodeCustomizationsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *NodeCustomizationsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *NodeCustomizationsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *NodeCustomizationsClient) listByResourceGroupHandleResponse(resp *http.Response) (NodeCustomizationsClientListByResourceGroupResponse, error) {
	result := NodeCustomizationsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NodeCustomizationListResult); err != nil {
		return NodeCustomizationsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List the node customizations in a subscription at the latest version.
//
// Generated from API version 2025-09-02-preview
//   - options - NodeCustomizationsClientListBySubscriptionOptions contains the optional parameters for the NodeCustomizationsClient.NewListBySubscriptionPager
//     method.
func (client *NodeCustomizationsClient) NewListBySubscriptionPager(options *NodeCustomizationsClientListBySubscriptionOptions) *runtime.Pager[NodeCustomizationsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[NodeCustomizationsClientListBySubscriptionResponse]{
		More: func(page NodeCustomizationsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NodeCustomizationsClientListBySubscriptionResponse) (NodeCustomizationsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NodeCustomizationsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return NodeCustomizationsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *NodeCustomizationsClient) listBySubscriptionCreateRequest(ctx context.Context, _ *NodeCustomizationsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/nodeCustomizations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *NodeCustomizationsClient) listBySubscriptionHandleResponse(resp *http.Response) (NodeCustomizationsClientListBySubscriptionResponse, error) {
	result := NodeCustomizationsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NodeCustomizationListResult); err != nil {
		return NodeCustomizationsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// NewListVersionsPager - List all versions of a node customization.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - options - NodeCustomizationsClientListVersionsOptions contains the optional parameters for the NodeCustomizationsClient.NewListVersionsPager
//     method.
func (client *NodeCustomizationsClient) NewListVersionsPager(resourceGroupName string, nodeCustomizationName string, options *NodeCustomizationsClientListVersionsOptions) *runtime.Pager[NodeCustomizationsClientListVersionsResponse] {
	return runtime.NewPager(runtime.PagingHandler[NodeCustomizationsClientListVersionsResponse]{
		More: func(page NodeCustomizationsClientListVersionsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NodeCustomizationsClientListVersionsResponse) (NodeCustomizationsClientListVersionsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "NodeCustomizationsClient.NewListVersionsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listVersionsCreateRequest(ctx, resourceGroupName, nodeCustomizationName, options)
			}, nil)
			if err != nil {
				return NodeCustomizationsClientListVersionsResponse{}, err
			}
			return client.listVersionsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listVersionsCreateRequest creates the ListVersions request.
func (client *NodeCustomizationsClient) listVersionsCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, _ *NodeCustomizationsClientListVersionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}/versions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listVersionsHandleResponse handles the ListVersions response.
func (client *NodeCustomizationsClient) listVersionsHandleResponse(resp *http.Response) (NodeCustomizationsClientListVersionsResponse, error) {
	result := NodeCustomizationsClientListVersionsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NodeCustomizationVersionListResult); err != nil {
		return NodeCustomizationsClientListVersionsResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a NodeCustomization
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nodeCustomizationName - The name of the Node Customization resource.
//   - properties - The resource properties to be updated.
//   - options - NodeCustomizationsClientBeginUpdateOptions contains the optional parameters for the NodeCustomizationsClient.BeginUpdate
//     method.
func (client *NodeCustomizationsClient) BeginUpdate(ctx context.Context, resourceGroupName string, nodeCustomizationName string, properties NodeCustomizationUpdate, options *NodeCustomizationsClientBeginUpdateOptions) (*runtime.Poller[NodeCustomizationsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, nodeCustomizationName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[NodeCustomizationsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[NodeCustomizationsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a NodeCustomization
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-09-02-preview
func (client *NodeCustomizationsClient) update(ctx context.Context, resourceGroupName string, nodeCustomizationName string, properties NodeCustomizationUpdate, options *NodeCustomizationsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "NodeCustomizationsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, nodeCustomizationName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *NodeCustomizationsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, nodeCustomizationName string, properties NodeCustomizationUpdate, options *NodeCustomizationsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/nodeCustomizations/{nodeCustomizationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nodeCustomizationName == "" {
		return nil, errors.New("parameter nodeCustomizationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nodeCustomizationName}", url.PathEscape(nodeCustomizationName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-09-02-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
