//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armcontainerstorage

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// VolumeSnapshotsClient contains the methods for the VolumeSnapshots group.
// Don't use this type directly, use NewVolumeSnapshotsClient() instead.
type VolumeSnapshotsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewVolumeSnapshotsClient creates a new instance of VolumeSnapshotsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewVolumeSnapshotsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*VolumeSnapshotsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &VolumeSnapshotsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - poolName - Pool Object
//   - volumeSnapshotName - Volume Snapshot Resource
//   - resource - Resource create parameters.
//   - options - VolumeSnapshotsClientBeginCreateOrUpdateOptions contains the optional parameters for the VolumeSnapshotsClient.BeginCreateOrUpdate
//     method.
func (client *VolumeSnapshotsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, resource VolumeSnapshot, options *VolumeSnapshotsClientBeginCreateOrUpdateOptions) (*runtime.Poller[VolumeSnapshotsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, poolName, volumeSnapshotName, resource, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[VolumeSnapshotsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[VolumeSnapshotsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Create a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *VolumeSnapshotsClient) createOrUpdate(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, resource VolumeSnapshot, options *VolumeSnapshotsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, poolName, volumeSnapshotName, resource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *VolumeSnapshotsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, resource VolumeSnapshot, options *VolumeSnapshotsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots/{volumeSnapshotName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if poolName == "" {
		return nil, errors.New("parameter poolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{poolName}", url.PathEscape(poolName))
	if volumeSnapshotName == "" {
		return nil, errors.New("parameter volumeSnapshotName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeSnapshotName}", url.PathEscape(volumeSnapshotName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// BeginDelete - Delete a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - poolName - Pool Object
//   - volumeSnapshotName - Volume Snapshot Resource
//   - options - VolumeSnapshotsClientBeginDeleteOptions contains the optional parameters for the VolumeSnapshotsClient.BeginDelete
//     method.
func (client *VolumeSnapshotsClient) BeginDelete(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, options *VolumeSnapshotsClientBeginDeleteOptions) (*runtime.Poller[VolumeSnapshotsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, poolName, volumeSnapshotName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[VolumeSnapshotsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[VolumeSnapshotsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Delete a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *VolumeSnapshotsClient) deleteOperation(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, options *VolumeSnapshotsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, poolName, volumeSnapshotName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *VolumeSnapshotsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, options *VolumeSnapshotsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots/{volumeSnapshotName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if poolName == "" {
		return nil, errors.New("parameter poolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{poolName}", url.PathEscape(poolName))
	if volumeSnapshotName == "" {
		return nil, errors.New("parameter volumeSnapshotName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeSnapshotName}", url.PathEscape(volumeSnapshotName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - poolName - Pool Object
//   - volumeSnapshotName - Volume Snapshot Resource
//   - options - VolumeSnapshotsClientGetOptions contains the optional parameters for the VolumeSnapshotsClient.Get method.
func (client *VolumeSnapshotsClient) Get(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, options *VolumeSnapshotsClientGetOptions) (VolumeSnapshotsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, poolName, volumeSnapshotName, options)
	if err != nil {
		return VolumeSnapshotsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return VolumeSnapshotsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return VolumeSnapshotsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *VolumeSnapshotsClient) getCreateRequest(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, options *VolumeSnapshotsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots/{volumeSnapshotName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if poolName == "" {
		return nil, errors.New("parameter poolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{poolName}", url.PathEscape(poolName))
	if volumeSnapshotName == "" {
		return nil, errors.New("parameter volumeSnapshotName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeSnapshotName}", url.PathEscape(volumeSnapshotName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *VolumeSnapshotsClient) getHandleResponse(resp *http.Response) (VolumeSnapshotsClientGetResponse, error) {
	result := VolumeSnapshotsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VolumeSnapshot); err != nil {
		return VolumeSnapshotsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByPoolPager - List VolumeSnapshot resources by Pool
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - poolName - Pool Object
//   - options - VolumeSnapshotsClientListByPoolOptions contains the optional parameters for the VolumeSnapshotsClient.NewListByPoolPager
//     method.
func (client *VolumeSnapshotsClient) NewListByPoolPager(resourceGroupName string, poolName string, options *VolumeSnapshotsClientListByPoolOptions) *runtime.Pager[VolumeSnapshotsClientListByPoolResponse] {
	return runtime.NewPager(runtime.PagingHandler[VolumeSnapshotsClientListByPoolResponse]{
		More: func(page VolumeSnapshotsClientListByPoolResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *VolumeSnapshotsClientListByPoolResponse) (VolumeSnapshotsClientListByPoolResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByPoolCreateRequest(ctx, resourceGroupName, poolName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return VolumeSnapshotsClientListByPoolResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return VolumeSnapshotsClientListByPoolResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return VolumeSnapshotsClientListByPoolResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByPoolHandleResponse(resp)
		},
	})
}

// listByPoolCreateRequest creates the ListByPool request.
func (client *VolumeSnapshotsClient) listByPoolCreateRequest(ctx context.Context, resourceGroupName string, poolName string, options *VolumeSnapshotsClientListByPoolOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if poolName == "" {
		return nil, errors.New("parameter poolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{poolName}", url.PathEscape(poolName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByPoolHandleResponse handles the ListByPool response.
func (client *VolumeSnapshotsClient) listByPoolHandleResponse(resp *http.Response) (VolumeSnapshotsClientListByPoolResponse, error) {
	result := VolumeSnapshotsClientListByPoolResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VolumeSnapshotListResult); err != nil {
		return VolumeSnapshotsClientListByPoolResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - poolName - Pool Object
//   - volumeSnapshotName - Volume Snapshot Resource
//   - properties - The resource properties to be updated.
//   - options - VolumeSnapshotsClientBeginUpdateOptions contains the optional parameters for the VolumeSnapshotsClient.BeginUpdate
//     method.
func (client *VolumeSnapshotsClient) BeginUpdate(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, properties VolumeSnapshotUpdate, options *VolumeSnapshotsClientBeginUpdateOptions) (*runtime.Poller[VolumeSnapshotsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, poolName, volumeSnapshotName, properties, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[VolumeSnapshotsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[VolumeSnapshotsClientUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Update - Update a VolumeSnapshot
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-03-01-preview
func (client *VolumeSnapshotsClient) update(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, properties VolumeSnapshotUpdate, options *VolumeSnapshotsClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, poolName, volumeSnapshotName, properties, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *VolumeSnapshotsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, poolName string, volumeSnapshotName string, properties VolumeSnapshotUpdate, options *VolumeSnapshotsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerStorage/pools/{poolName}/volumeSnapshots/{volumeSnapshotName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if poolName == "" {
		return nil, errors.New("parameter poolName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{poolName}", url.PathEscape(poolName))
	if volumeSnapshotName == "" {
		return nil, errors.New("parameter volumeSnapshotName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{volumeSnapshotName}", url.PathEscape(volumeSnapshotName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, properties)
}
