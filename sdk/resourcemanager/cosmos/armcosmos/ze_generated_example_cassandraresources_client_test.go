//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos"
)

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceList.json
func ExampleCassandraResourcesClient_ListCassandraKeyspaces() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListCassandraKeyspaces(ctx,
		"<resource-group-name>",
		"<account-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientListCassandraKeyspacesResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceGet.json
func ExampleCassandraResourcesClient_GetCassandraKeyspace() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetCassandraKeyspace(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientGetCassandraKeyspaceResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceCreateUpdate.json
func ExampleCassandraResourcesClient_BeginCreateUpdateCassandraKeyspace() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateCassandraKeyspace(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		armcosmos.CassandraKeyspaceCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraKeyspaceCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.CassandraKeyspaceResource{
					ID: to.StringPtr("<id>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientCreateUpdateCassandraKeyspaceResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceDelete.json
func ExampleCassandraResourcesClient_BeginDeleteCassandraKeyspace() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteCassandraKeyspace(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputGet.json
func ExampleCassandraResourcesClient_GetCassandraKeyspaceThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetCassandraKeyspaceThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientGetCassandraKeyspaceThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceThroughputUpdate.json
func ExampleCassandraResourcesClient_BeginUpdateCassandraKeyspaceThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateCassandraKeyspaceThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientUpdateCassandraKeyspaceThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToAutoscale.json
func ExampleCassandraResourcesClient_BeginMigrateCassandraKeyspaceToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateCassandraKeyspaceToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientMigrateCassandraKeyspaceToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraKeyspaceMigrateToManualThroughput.json
func ExampleCassandraResourcesClient_BeginMigrateCassandraKeyspaceToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateCassandraKeyspaceToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientMigrateCassandraKeyspaceToManualThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableList.json
func ExampleCassandraResourcesClient_ListCassandraTables() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListCassandraTables(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientListCassandraTablesResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableGet.json
func ExampleCassandraResourcesClient_GetCassandraTable() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetCassandraTable(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientGetCassandraTableResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableCreateUpdate.json
func ExampleCassandraResourcesClient_BeginCreateUpdateCassandraTable() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateCassandraTable(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		armcosmos.CassandraTableCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.CassandraTableCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.CassandraTableResource{
					Schema: &armcosmos.CassandraSchema{
						ClusterKeys: []*armcosmos.ClusterKey{
							{
								Name:    to.StringPtr("<name>"),
								OrderBy: to.StringPtr("<order-by>"),
							}},
						Columns: []*armcosmos.Column{
							{
								Name: to.StringPtr("<name>"),
								Type: to.StringPtr("<type>"),
							}},
						PartitionKeys: []*armcosmos.CassandraPartitionKey{
							{
								Name: to.StringPtr("<name>"),
							}},
					},
					DefaultTTL: to.Int32Ptr(100),
					ID:         to.StringPtr("<id>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientCreateUpdateCassandraTableResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableDelete.json
func ExampleCassandraResourcesClient_BeginDeleteCassandraTable() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteCassandraTable(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputGet.json
func ExampleCassandraResourcesClient_GetCassandraTableThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetCassandraTableThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientGetCassandraTableThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableThroughputUpdate.json
func ExampleCassandraResourcesClient_BeginUpdateCassandraTableThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateCassandraTableThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientUpdateCassandraTableThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToAutoscale.json
func ExampleCassandraResourcesClient_BeginMigrateCassandraTableToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateCassandraTableToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientMigrateCassandraTableToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBCassandraTableMigrateToManualThroughput.json
func ExampleCassandraResourcesClient_BeginMigrateCassandraTableToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewCassandraResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateCassandraTableToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<keyspace-name>",
		"<table-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CassandraResourcesClientMigrateCassandraTableToManualThroughputResult)
}
