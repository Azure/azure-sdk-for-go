//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos"
)

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseList.json
func ExampleGremlinResourcesClient_ListGremlinDatabases() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListGremlinDatabases(ctx,
		"<resource-group-name>",
		"<account-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientListGremlinDatabasesResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseGet.json
func ExampleGremlinResourcesClient_GetGremlinDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetGremlinDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientGetGremlinDatabaseResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseCreateUpdate.json
func ExampleGremlinResourcesClient_BeginCreateUpdateGremlinDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateGremlinDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		armcosmos.GremlinDatabaseCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinDatabaseCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.GremlinDatabaseResource{
					ID: to.StringPtr("<id>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientCreateUpdateGremlinDatabaseResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseDelete.json
func ExampleGremlinResourcesClient_BeginDeleteGremlinDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteGremlinDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputGet.json
func ExampleGremlinResourcesClient_GetGremlinDatabaseThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetGremlinDatabaseThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientGetGremlinDatabaseThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseThroughputUpdate.json
func ExampleGremlinResourcesClient_BeginUpdateGremlinDatabaseThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateGremlinDatabaseThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientUpdateGremlinDatabaseThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToAutoscale.json
func ExampleGremlinResourcesClient_BeginMigrateGremlinDatabaseToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateGremlinDatabaseToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientMigrateGremlinDatabaseToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinDatabaseMigrateToManualThroughput.json
func ExampleGremlinResourcesClient_BeginMigrateGremlinDatabaseToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateGremlinDatabaseToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientMigrateGremlinDatabaseToManualThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphList.json
func ExampleGremlinResourcesClient_ListGremlinGraphs() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListGremlinGraphs(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientListGremlinGraphsResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphGet.json
func ExampleGremlinResourcesClient_GetGremlinGraph() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetGremlinGraph(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientGetGremlinGraphResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphCreateUpdate.json
func ExampleGremlinResourcesClient_BeginCreateUpdateGremlinGraph() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateGremlinGraph(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		armcosmos.GremlinGraphCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.GremlinGraphCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.GremlinGraphResource{
					ConflictResolutionPolicy: &armcosmos.ConflictResolutionPolicy{
						ConflictResolutionPath: to.StringPtr("<conflict-resolution-path>"),
						Mode:                   armcosmos.ConflictResolutionMode("LastWriterWins").ToPtr(),
					},
					DefaultTTL: to.Int32Ptr(100),
					ID:         to.StringPtr("<id>"),
					IndexingPolicy: &armcosmos.IndexingPolicy{
						Automatic:     to.BoolPtr(true),
						ExcludedPaths: []*armcosmos.ExcludedPath{},
						IncludedPaths: []*armcosmos.IncludedPath{
							{
								Path: to.StringPtr("<path>"),
								Indexes: []*armcosmos.Indexes{
									{
										DataType:  armcosmos.DataType("String").ToPtr(),
										Kind:      armcosmos.IndexKind("Range").ToPtr(),
										Precision: to.Int32Ptr(-1),
									},
									{
										DataType:  armcosmos.DataType("Number").ToPtr(),
										Kind:      armcosmos.IndexKind("Range").ToPtr(),
										Precision: to.Int32Ptr(-1),
									}},
							}},
						IndexingMode: armcosmos.IndexingMode("consistent").ToPtr(),
					},
					PartitionKey: &armcosmos.ContainerPartitionKey{
						Kind: armcosmos.PartitionKind("Hash").ToPtr(),
						Paths: []*string{
							to.StringPtr("/AccountNumber")},
					},
					UniqueKeyPolicy: &armcosmos.UniqueKeyPolicy{
						UniqueKeys: []*armcosmos.UniqueKey{
							{
								Paths: []*string{
									to.StringPtr("/testPath")},
							}},
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientCreateUpdateGremlinGraphResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphDelete.json
func ExampleGremlinResourcesClient_BeginDeleteGremlinGraph() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteGremlinGraph(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputGet.json
func ExampleGremlinResourcesClient_GetGremlinGraphThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetGremlinGraphThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientGetGremlinGraphThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphThroughputUpdate.json
func ExampleGremlinResourcesClient_BeginUpdateGremlinGraphThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateGremlinGraphThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientUpdateGremlinGraphThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToAutoscale.json
func ExampleGremlinResourcesClient_BeginMigrateGremlinGraphToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateGremlinGraphToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientMigrateGremlinGraphToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBGremlinGraphMigrateToManualThroughput.json
func ExampleGremlinResourcesClient_BeginMigrateGremlinGraphToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewGremlinResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateGremlinGraphToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<graph-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.GremlinResourcesClientMigrateGremlinGraphToManualThroughputResult)
}
