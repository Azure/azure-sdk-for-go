//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/cosmos/armcosmos"
)

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseList.json
func ExampleMongoDBResourcesClient_ListMongoDBDatabases() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListMongoDBDatabases(ctx,
		"<resource-group-name>",
		"<account-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientListMongoDBDatabasesResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseGet.json
func ExampleMongoDBResourcesClient_GetMongoDBDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetMongoDBDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientGetMongoDBDatabaseResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseCreateUpdate.json
func ExampleMongoDBResourcesClient_BeginCreateUpdateMongoDBDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateMongoDBDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		armcosmos.MongoDBDatabaseCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBDatabaseCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.MongoDBDatabaseResource{
					ID: to.StringPtr("<id>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientCreateUpdateMongoDBDatabaseResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseDelete.json
func ExampleMongoDBResourcesClient_BeginDeleteMongoDBDatabase() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteMongoDBDatabase(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputGet.json
func ExampleMongoDBResourcesClient_GetMongoDBDatabaseThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetMongoDBDatabaseThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientGetMongoDBDatabaseThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseThroughputUpdate.json
func ExampleMongoDBResourcesClient_BeginUpdateMongoDBDatabaseThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateMongoDBDatabaseThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientUpdateMongoDBDatabaseThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToAutoscale.json
func ExampleMongoDBResourcesClient_BeginMigrateMongoDBDatabaseToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateMongoDBDatabaseToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientMigrateMongoDBDatabaseToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBDatabaseMigrateToManualThroughput.json
func ExampleMongoDBResourcesClient_BeginMigrateMongoDBDatabaseToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateMongoDBDatabaseToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientMigrateMongoDBDatabaseToManualThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionList.json
func ExampleMongoDBResourcesClient_ListMongoDBCollections() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.ListMongoDBCollections(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientListMongoDBCollectionsResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionGet.json
func ExampleMongoDBResourcesClient_GetMongoDBCollection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetMongoDBCollection(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientGetMongoDBCollectionResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionCreateUpdate.json
func ExampleMongoDBResourcesClient_BeginCreateUpdateMongoDBCollection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateUpdateMongoDBCollection(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		armcosmos.MongoDBCollectionCreateUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.MongoDBCollectionCreateUpdateProperties{
				Options: &armcosmos.CreateUpdateOptions{},
				Resource: &armcosmos.MongoDBCollectionResource{
					ID: to.StringPtr("<id>"),
					Indexes: []*armcosmos.MongoIndex{
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.StringPtr("_ts")},
							},
							Options: &armcosmos.MongoIndexOptions{
								ExpireAfterSeconds: to.Int32Ptr(100),
								Unique:             to.BoolPtr(true),
							},
						},
						{
							Key: &armcosmos.MongoIndexKeys{
								Keys: []*string{
									to.StringPtr("_id")},
							},
						}},
					ShardKey: map[string]*string{
						"testKey": to.StringPtr("Hash"),
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientCreateUpdateMongoDBCollectionResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionDelete.json
func ExampleMongoDBResourcesClient_BeginDeleteMongoDBCollection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteMongoDBCollection(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputGet.json
func ExampleMongoDBResourcesClient_GetMongoDBCollectionThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	res, err := client.GetMongoDBCollectionThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientGetMongoDBCollectionThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionThroughputUpdate.json
func ExampleMongoDBResourcesClient_BeginUpdateMongoDBCollectionThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateMongoDBCollectionThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		armcosmos.ThroughputSettingsUpdateParameters{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armcosmos.ThroughputSettingsUpdateProperties{
				Resource: &armcosmos.ThroughputSettingsResource{
					Throughput: to.Int32Ptr(400),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientUpdateMongoDBCollectionThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToAutoscale.json
func ExampleMongoDBResourcesClient_BeginMigrateMongoDBCollectionToAutoscale() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateMongoDBCollectionToAutoscale(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientMigrateMongoDBCollectionToAutoscaleResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionMigrateToManualThroughput.json
func ExampleMongoDBResourcesClient_BeginMigrateMongoDBCollectionToManualThroughput() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMigrateMongoDBCollectionToManualThroughput(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientMigrateMongoDBCollectionToManualThroughputResult)
}

// x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2021-10-15/examples/CosmosDBMongoDBCollectionBackupInformation.json
func ExampleMongoDBResourcesClient_BeginRetrieveContinuousBackupInformation() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcosmos.NewMongoDBResourcesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRetrieveContinuousBackupInformation(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<database-name>",
		"<collection-name>",
		armcosmos.ContinuousBackupRestoreLocation{
			Location: to.StringPtr("<location>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.MongoDBResourcesClientRetrieveContinuousBackupInformationResult)
}
