//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// GraphResourcesClient contains the methods for the GraphResources group.
// Don't use this type directly, use NewGraphResourcesClient() instead.
type GraphResourcesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewGraphResourcesClient creates a new instance of GraphResourcesClient with the specified values.
func NewGraphResourcesClient(con *arm.Connection, subscriptionID string) *GraphResourcesClient {
	return &GraphResourcesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// BeginCreateUpdateGraph - Create or update an Azure Cosmos DB Graph.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) BeginCreateUpdateGraph(ctx context.Context, resourceGroupName string, accountName string, graphName string, createUpdateGraphParameters GraphResourceCreateUpdateParameters, options *GraphResourcesBeginCreateUpdateGraphOptions) (GraphResourcesCreateUpdateGraphPollerResponse, error) {
	resp, err := client.createUpdateGraph(ctx, resourceGroupName, accountName, graphName, createUpdateGraphParameters, options)
	if err != nil {
		return GraphResourcesCreateUpdateGraphPollerResponse{}, err
	}
	result := GraphResourcesCreateUpdateGraphPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("GraphResourcesClient.CreateUpdateGraph", "", resp, client.pl, client.createUpdateGraphHandleError)
	if err != nil {
		return GraphResourcesCreateUpdateGraphPollerResponse{}, err
	}
	result.Poller = &GraphResourcesCreateUpdateGraphPoller{
		pt: pt,
	}
	return result, nil
}

// CreateUpdateGraph - Create or update an Azure Cosmos DB Graph.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) createUpdateGraph(ctx context.Context, resourceGroupName string, accountName string, graphName string, createUpdateGraphParameters GraphResourceCreateUpdateParameters, options *GraphResourcesBeginCreateUpdateGraphOptions) (*http.Response, error) {
	req, err := client.createUpdateGraphCreateRequest(ctx, resourceGroupName, accountName, graphName, createUpdateGraphParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createUpdateGraphHandleError(resp)
	}
	return resp, nil
}

// createUpdateGraphCreateRequest creates the CreateUpdateGraph request.
func (client *GraphResourcesClient) createUpdateGraphCreateRequest(ctx context.Context, resourceGroupName string, accountName string, graphName string, createUpdateGraphParameters GraphResourceCreateUpdateParameters, options *GraphResourcesBeginCreateUpdateGraphOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/graphs/{graphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if graphName == "" {
		return nil, errors.New("parameter graphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{graphName}", url.PathEscape(graphName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, createUpdateGraphParameters)
}

// createUpdateGraphHandleError handles the CreateUpdateGraph error response.
func (client *GraphResourcesClient) createUpdateGraphHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDeleteGraphResource - Deletes an existing Azure Cosmos DB Graph Resource.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) BeginDeleteGraphResource(ctx context.Context, resourceGroupName string, accountName string, graphName string, options *GraphResourcesBeginDeleteGraphResourceOptions) (GraphResourcesDeleteGraphResourcePollerResponse, error) {
	resp, err := client.deleteGraphResource(ctx, resourceGroupName, accountName, graphName, options)
	if err != nil {
		return GraphResourcesDeleteGraphResourcePollerResponse{}, err
	}
	result := GraphResourcesDeleteGraphResourcePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("GraphResourcesClient.DeleteGraphResource", "", resp, client.pl, client.deleteGraphResourceHandleError)
	if err != nil {
		return GraphResourcesDeleteGraphResourcePollerResponse{}, err
	}
	result.Poller = &GraphResourcesDeleteGraphResourcePoller{
		pt: pt,
	}
	return result, nil
}

// DeleteGraphResource - Deletes an existing Azure Cosmos DB Graph Resource.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) deleteGraphResource(ctx context.Context, resourceGroupName string, accountName string, graphName string, options *GraphResourcesBeginDeleteGraphResourceOptions) (*http.Response, error) {
	req, err := client.deleteGraphResourceCreateRequest(ctx, resourceGroupName, accountName, graphName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteGraphResourceHandleError(resp)
	}
	return resp, nil
}

// deleteGraphResourceCreateRequest creates the DeleteGraphResource request.
func (client *GraphResourcesClient) deleteGraphResourceCreateRequest(ctx context.Context, resourceGroupName string, accountName string, graphName string, options *GraphResourcesBeginDeleteGraphResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/graphs/{graphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if graphName == "" {
		return nil, errors.New("parameter graphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{graphName}", url.PathEscape(graphName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteGraphResourceHandleError handles the DeleteGraphResource error response.
func (client *GraphResourcesClient) deleteGraphResourceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetGraph - Gets the Graph resource under an existing Azure Cosmos DB database account with the provided name.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) GetGraph(ctx context.Context, resourceGroupName string, accountName string, graphName string, options *GraphResourcesGetGraphOptions) (GraphResourcesGetGraphResponse, error) {
	req, err := client.getGraphCreateRequest(ctx, resourceGroupName, accountName, graphName, options)
	if err != nil {
		return GraphResourcesGetGraphResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GraphResourcesGetGraphResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GraphResourcesGetGraphResponse{}, client.getGraphHandleError(resp)
	}
	return client.getGraphHandleResponse(resp)
}

// getGraphCreateRequest creates the GetGraph request.
func (client *GraphResourcesClient) getGraphCreateRequest(ctx context.Context, resourceGroupName string, accountName string, graphName string, options *GraphResourcesGetGraphOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/graphs/{graphName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if graphName == "" {
		return nil, errors.New("parameter graphName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{graphName}", url.PathEscape(graphName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getGraphHandleResponse handles the GetGraph response.
func (client *GraphResourcesClient) getGraphHandleResponse(resp *http.Response) (GraphResourcesGetGraphResponse, error) {
	result := GraphResourcesGetGraphResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GraphResourceGetResults); err != nil {
		return GraphResourcesGetGraphResponse{}, err
	}
	return result, nil
}

// getGraphHandleError handles the GetGraph error response.
func (client *GraphResourcesClient) getGraphHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListGraphs - Lists the graphs under an existing Azure Cosmos DB database account.
// If the operation fails it returns a generic error.
func (client *GraphResourcesClient) ListGraphs(ctx context.Context, resourceGroupName string, accountName string, options *GraphResourcesListGraphsOptions) (GraphResourcesListGraphsResponse, error) {
	req, err := client.listGraphsCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return GraphResourcesListGraphsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GraphResourcesListGraphsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GraphResourcesListGraphsResponse{}, client.listGraphsHandleError(resp)
	}
	return client.listGraphsHandleResponse(resp)
}

// listGraphsCreateRequest creates the ListGraphs request.
func (client *GraphResourcesClient) listGraphsCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *GraphResourcesListGraphsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/graphs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listGraphsHandleResponse handles the ListGraphs response.
func (client *GraphResourcesClient) listGraphsHandleResponse(resp *http.Response) (GraphResourcesListGraphsResponse, error) {
	result := GraphResourcesListGraphsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GraphResourcesListResult); err != nil {
		return GraphResourcesListGraphsResponse{}, err
	}
	return result, nil
}

// listGraphsHandleError handles the ListGraphs error response.
func (client *GraphResourcesClient) listGraphsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
