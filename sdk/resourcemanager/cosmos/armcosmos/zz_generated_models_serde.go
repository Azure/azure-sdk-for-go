//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ARMResourceProperties.
func (a ARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AuthenticationMethodLdapProperties.
func (a AuthenticationMethodLdapProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "searchBaseDistinguishedName", a.SearchBaseDistinguishedName)
	populate(objectMap, "searchFilterTemplate", a.SearchFilterTemplate)
	populate(objectMap, "serverCertificates", a.ServerCertificates)
	populate(objectMap, "serverHostname", a.ServerHostname)
	populate(objectMap, "serverPort", a.ServerPort)
	populate(objectMap, "serviceUserDistinguishedName", a.ServiceUserDistinguishedName)
	populate(objectMap, "serviceUserPassword", a.ServiceUserPassword)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureBlobDataTransferDataSourceSink.
func (a AzureBlobDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentAzureBlobStorage
	populate(objectMap, "containerName", a.ContainerName)
	populate(objectMap, "endpointUrl", a.EndpointURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBlobDataTransferDataSourceSink.
func (a *AzureBlobDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, "Component", &a.Component)
			delete(rawMsg, key)
		case "containerName":
			err = unpopulate(val, "ContainerName", &a.ContainerName)
			delete(rawMsg, key)
		case "endpointUrl":
			err = unpopulate(val, "EndpointURL", &a.EndpointURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BackupPolicyMigrationState.
func (b BackupPolicyMigrationState) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "startTime", b.StartTime)
	populate(objectMap, "status", b.Status)
	populate(objectMap, "targetType", b.TargetType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupPolicyMigrationState.
func (b *BackupPolicyMigrationState) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &b.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &b.Status)
			delete(rawMsg, key)
		case "targetType":
			err = unpopulate(val, "TargetType", &b.TargetType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BackupResourceProperties.
func (b BackupResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "timestamp", b.Timestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupResourceProperties.
func (b *BackupResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "timestamp":
			err = unpopulateTimeRFC3339(val, "Timestamp", &b.Timestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CassandraDataTransferDataSourceSink.
func (c CassandraDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentCosmosDBCassandra
	populate(objectMap, "keyspaceName", c.KeyspaceName)
	populate(objectMap, "tableName", c.TableName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CassandraDataTransferDataSourceSink.
func (c *CassandraDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, "Component", &c.Component)
			delete(rawMsg, key)
		case "keyspaceName":
			err = unpopulate(val, "KeyspaceName", &c.KeyspaceName)
			delete(rawMsg, key)
		case "tableName":
			err = unpopulate(val, "TableName", &c.TableName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceCreateUpdateParameters.
func (c CassandraKeyspaceCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceGetResults.
func (c CassandraKeyspaceGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraSchema.
func (c CassandraSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterKeys", c.ClusterKeys)
	populate(objectMap, "columns", c.Columns)
	populate(objectMap, "partitionKeys", c.PartitionKeys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableCreateUpdateParameters.
func (c CassandraTableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableGetResults.
func (c CassandraTableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraViewCreateUpdateParameters.
func (c CassandraViewCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraViewGetResults.
func (c CassandraViewGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionKeyGetPropertiesResource.
func (c ClientEncryptionKeyGetPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionAlgorithm", c.EncryptionAlgorithm)
	populate(objectMap, "_etag", c.Etag)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "keyWrapMetadata", c.KeyWrapMetadata)
	populate(objectMap, "_rid", c.Rid)
	populate(objectMap, "_ts", c.Ts)
	populateByteArray(objectMap, "wrappedDataEncryptionKey", c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ClientEncryptionKeyGetPropertiesResource.
func (c *ClientEncryptionKeyGetPropertiesResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "encryptionAlgorithm":
			err = unpopulate(val, "EncryptionAlgorithm", &c.EncryptionAlgorithm)
			delete(rawMsg, key)
		case "_etag":
			err = unpopulate(val, "Etag", &c.Etag)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "keyWrapMetadata":
			err = unpopulate(val, "KeyWrapMetadata", &c.KeyWrapMetadata)
			delete(rawMsg, key)
		case "_rid":
			err = unpopulate(val, "Rid", &c.Rid)
			delete(rawMsg, key)
		case "_ts":
			err = unpopulate(val, "Ts", &c.Ts)
			delete(rawMsg, key)
		case "wrappedDataEncryptionKey":
			err = runtime.DecodeByteArray(string(val), &c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionKeyResource.
func (c ClientEncryptionKeyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionAlgorithm", c.EncryptionAlgorithm)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "keyWrapMetadata", c.KeyWrapMetadata)
	populateByteArray(objectMap, "wrappedDataEncryptionKey", c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ClientEncryptionKeyResource.
func (c *ClientEncryptionKeyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "encryptionAlgorithm":
			err = unpopulate(val, "EncryptionAlgorithm", &c.EncryptionAlgorithm)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &c.ID)
			delete(rawMsg, key)
		case "keyWrapMetadata":
			err = unpopulate(val, "KeyWrapMetadata", &c.KeyWrapMetadata)
			delete(rawMsg, key)
		case "wrappedDataEncryptionKey":
			err = runtime.DecodeByteArray(string(val), &c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionPolicy.
func (c ClientEncryptionPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "includedPaths", c.IncludedPaths)
	populate(objectMap, "policyFormatVersion", c.PolicyFormatVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClusterResource.
func (c ClusterResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClusterResourceProperties.
func (c ClusterResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationMethod", c.AuthenticationMethod)
	populate(objectMap, "cassandraAuditLoggingEnabled", c.CassandraAuditLoggingEnabled)
	populate(objectMap, "cassandraVersion", c.CassandraVersion)
	populate(objectMap, "clientCertificates", c.ClientCertificates)
	populate(objectMap, "clusterNameOverride", c.ClusterNameOverride)
	populate(objectMap, "deallocated", c.Deallocated)
	populate(objectMap, "delegatedManagementSubnetId", c.DelegatedManagementSubnetID)
	populate(objectMap, "externalGossipCertificates", c.ExternalGossipCertificates)
	populate(objectMap, "externalSeedNodes", c.ExternalSeedNodes)
	populate(objectMap, "gossipCertificates", c.GossipCertificates)
	populate(objectMap, "hoursBetweenBackups", c.HoursBetweenBackups)
	populate(objectMap, "initialCassandraAdminPassword", c.InitialCassandraAdminPassword)
	populate(objectMap, "prometheusEndpoint", c.PrometheusEndpoint)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "repairEnabled", c.RepairEnabled)
	populate(objectMap, "restoreFromBackupId", c.RestoreFromBackupID)
	populate(objectMap, "seedNodes", c.SeedNodes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CommandPostBody.
func (c CommandPostBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "arguments", c.Arguments)
	populate(objectMap, "cassandra-stop-start", c.CassandraStopStart)
	populate(objectMap, "command", c.Command)
	populate(objectMap, "host", c.Host)
	populate(objectMap, "readwrite", c.Readwrite)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerPartitionKey.
func (c ContainerPartitionKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "paths", c.Paths)
	populate(objectMap, "systemKey", c.SystemKey)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousModeBackupPolicy.
func (c ContinuousModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "continuousModeProperties", c.ContinuousModeProperties)
	populate(objectMap, "migrationState", c.MigrationState)
	objectMap["type"] = BackupPolicyTypeContinuous
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContinuousModeBackupPolicy.
func (c *ContinuousModeBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "continuousModeProperties":
			err = unpopulate(val, "ContinuousModeProperties", &c.ContinuousModeProperties)
			delete(rawMsg, key)
		case "migrationState":
			err = unpopulate(val, "MigrationState", &c.MigrationState)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataCenterResource.
func (d DataCenterResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataCenterResourceProperties.
func (d DataCenterResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationMethodLdapProperties", d.AuthenticationMethodLdapProperties)
	populate(objectMap, "availabilityZone", d.AvailabilityZone)
	populate(objectMap, "backupStorageCustomerKeyUri", d.BackupStorageCustomerKeyURI)
	populate(objectMap, "base64EncodedCassandraYamlFragment", d.Base64EncodedCassandraYamlFragment)
	populate(objectMap, "dataCenterLocation", d.DataCenterLocation)
	populate(objectMap, "delegatedSubnetId", d.DelegatedSubnetID)
	populate(objectMap, "diskCapacity", d.DiskCapacity)
	populate(objectMap, "diskSku", d.DiskSKU)
	populate(objectMap, "managedDiskCustomerKeyUri", d.ManagedDiskCustomerKeyURI)
	populate(objectMap, "nodeCount", d.NodeCount)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "sku", d.SKU)
	populate(objectMap, "seedNodes", d.SeedNodes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferJobProperties.
func (d DataTransferJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destination", d.Destination)
	populate(objectMap, "error", d.Error)
	populate(objectMap, "jobName", d.JobName)
	populateTimeRFC3339(objectMap, "lastUpdatedUtcTime", d.LastUpdatedUTCTime)
	populate(objectMap, "processedCount", d.ProcessedCount)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "totalCount", d.TotalCount)
	populate(objectMap, "workerCount", d.WorkerCount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferJobProperties.
func (d *DataTransferJobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destination":
			d.Destination, err = unmarshalDataTransferDataSourceSinkClassification(val)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, "Error", &d.Error)
			delete(rawMsg, key)
		case "jobName":
			err = unpopulate(val, "JobName", &d.JobName)
			delete(rawMsg, key)
		case "lastUpdatedUtcTime":
			err = unpopulateTimeRFC3339(val, "LastUpdatedUTCTime", &d.LastUpdatedUTCTime)
			delete(rawMsg, key)
		case "processedCount":
			err = unpopulate(val, "ProcessedCount", &d.ProcessedCount)
			delete(rawMsg, key)
		case "source":
			d.Source, err = unmarshalDataTransferDataSourceSinkClassification(val)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &d.Status)
			delete(rawMsg, key)
		case "totalCount":
			err = unpopulate(val, "TotalCount", &d.TotalCount)
			delete(rawMsg, key)
		case "workerCount":
			err = unpopulate(val, "WorkerCount", &d.WorkerCount)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferServiceResourceProperties.
func (d DataTransferServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", d.CreationTime)
	populate(objectMap, "instanceCount", d.InstanceCount)
	populate(objectMap, "instanceSize", d.InstanceSize)
	populate(objectMap, "locations", d.Locations)
	objectMap["serviceType"] = ServiceTypeDataTransfer
	populate(objectMap, "status", d.Status)
	if d.AdditionalProperties != nil {
		for key, val := range d.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferServiceResourceProperties.
func (d *DataTransferServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &d.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, "InstanceCount", &d.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, "InstanceSize", &d.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &d.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, "ServiceType", &d.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &d.Status)
			delete(rawMsg, key)
		default:
			if d.AdditionalProperties == nil {
				d.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				d.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateParameters.
func (d DatabaseAccountCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d DatabaseAccountCreateUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d *DatabaseAccountCreateUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, "APIProperties", &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, "AnalyticalStorageConfiguration", &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, "Capabilities", &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, "Capacity", &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, "ConnectorOffer", &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, "ConsistencyPolicy", &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, "Cors", &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, "CreateMode", &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, "DatabaseAccountOfferType", &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, "DefaultIdentity", &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, "DiagnosticLogSettings", &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, "DisableKeyBasedMetadataWriteAccess", &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, "DisableLocalAuth", &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, "EnableAnalyticalStorage", &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, "EnableAutomaticFailover", &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, "EnableCassandraConnector", &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, "EnableFreeTier", &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, "EnableMaterializedViews", &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, "EnableMultipleWriteLocations", &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, "IPRules", &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, "IsVirtualNetworkFilterEnabled", &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, "KeyVaultKeyURI", &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, "NetworkACLBypass", &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, "NetworkACLBypassResourceIDs", &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, "PublicNetworkAccess", &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, "RestoreParameters", &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, "VirtualNetworkRules", &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetProperties.
func (d DatabaseAccountGetProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "documentEndpoint", d.DocumentEndpoint)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "failoverPolicies", d.FailoverPolicies)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "instanceId", d.InstanceID)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "privateEndpointConnections", d.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "readLocations", d.ReadLocations)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	populate(objectMap, "writeLocations", d.WriteLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountGetProperties.
func (d *DatabaseAccountGetProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, "APIProperties", &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, "AnalyticalStorageConfiguration", &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, "Capabilities", &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, "Capacity", &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, "ConnectorOffer", &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, "ConsistencyPolicy", &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, "Cors", &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, "CreateMode", &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, "DatabaseAccountOfferType", &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, "DefaultIdentity", &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, "DiagnosticLogSettings", &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, "DisableKeyBasedMetadataWriteAccess", &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, "DisableLocalAuth", &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "documentEndpoint":
			err = unpopulate(val, "DocumentEndpoint", &d.DocumentEndpoint)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, "EnableAnalyticalStorage", &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, "EnableAutomaticFailover", &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, "EnableCassandraConnector", &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, "EnableFreeTier", &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, "EnableMaterializedViews", &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, "EnableMultipleWriteLocations", &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "failoverPolicies":
			err = unpopulate(val, "FailoverPolicies", &d.FailoverPolicies)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, "IPRules", &d.IPRules)
			delete(rawMsg, key)
		case "instanceId":
			err = unpopulate(val, "InstanceID", &d.InstanceID)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, "IsVirtualNetworkFilterEnabled", &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, "KeyVaultKeyURI", &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, "NetworkACLBypass", &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, "NetworkACLBypassResourceIDs", &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, "PrivateEndpointConnections", &d.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &d.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, "PublicNetworkAccess", &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "readLocations":
			err = unpopulate(val, "ReadLocations", &d.ReadLocations)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, "RestoreParameters", &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, "VirtualNetworkRules", &d.VirtualNetworkRules)
			delete(rawMsg, key)
		case "writeLocations":
			err = unpopulate(val, "WriteLocations", &d.WriteLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetResults.
func (d DatabaseAccountGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateParameters.
func (d DatabaseAccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateProperties.
func (d DatabaseAccountUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountUpdateProperties.
func (d *DatabaseAccountUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, "APIProperties", &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, "AnalyticalStorageConfiguration", &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, "Capabilities", &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, "Capacity", &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, "ConnectorOffer", &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, "ConsistencyPolicy", &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, "Cors", &d.Cors)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, "DefaultIdentity", &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, "DiagnosticLogSettings", &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, "DisableKeyBasedMetadataWriteAccess", &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, "DisableLocalAuth", &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, "EnableAnalyticalStorage", &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, "EnableAutomaticFailover", &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, "EnableCassandraConnector", &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, "EnableFreeTier", &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, "EnableMaterializedViews", &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, "EnableMultipleWriteLocations", &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, "IPRules", &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, "IsVirtualNetworkFilterEnabled", &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, "KeyVaultKeyURI", &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, "NetworkACLBypass", &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, "NetworkACLBypassResourceIDs", &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, "PublicNetworkAccess", &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, "VirtualNetworkRules", &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseRestoreResource.
func (d DatabaseRestoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "collectionNames", d.CollectionNames)
	populate(objectMap, "databaseName", d.DatabaseName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FailoverPolicies.
func (f FailoverPolicies) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "failoverPolicies", f.FailoverPolicies)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GraphAPIComputeServiceResourceProperties.
func (g GraphAPIComputeServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", g.CreationTime)
	populate(objectMap, "graphApiComputeEndpoint", g.GraphAPIComputeEndpoint)
	populate(objectMap, "instanceCount", g.InstanceCount)
	populate(objectMap, "instanceSize", g.InstanceSize)
	populate(objectMap, "locations", g.Locations)
	objectMap["serviceType"] = ServiceTypeGraphAPICompute
	populate(objectMap, "status", g.Status)
	if g.AdditionalProperties != nil {
		for key, val := range g.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GraphAPIComputeServiceResourceProperties.
func (g *GraphAPIComputeServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &g.CreationTime)
			delete(rawMsg, key)
		case "graphApiComputeEndpoint":
			err = unpopulate(val, "GraphAPIComputeEndpoint", &g.GraphAPIComputeEndpoint)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, "InstanceCount", &g.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, "InstanceSize", &g.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &g.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, "ServiceType", &g.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &g.Status)
			delete(rawMsg, key)
		default:
			if g.AdditionalProperties == nil {
				g.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				g.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GraphResourceCreateUpdateParameters.
func (g GraphResourceCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GraphResourceGetResults.
func (g GraphResourceGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseCreateUpdateParameters.
func (g GremlinDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseGetResults.
func (g GremlinDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseRestoreResource.
func (g GremlinDatabaseRestoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databaseName", g.DatabaseName)
	populate(objectMap, "graphNames", g.GraphNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphCreateUpdateParameters.
func (g GremlinGraphCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphGetResults.
func (g GremlinGraphGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IncludedPath.
func (i IncludedPath) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "indexes", i.Indexes)
	populate(objectMap, "path", i.Path)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IndexingPolicy.
func (i IndexingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "automatic", i.Automatic)
	populate(objectMap, "compositeIndexes", i.CompositeIndexes)
	populate(objectMap, "excludedPaths", i.ExcludedPaths)
	populate(objectMap, "includedPaths", i.IncludedPaths)
	populate(objectMap, "indexingMode", i.IndexingMode)
	populate(objectMap, "spatialIndexes", i.SpatialIndexes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LocationProperties.
func (l LocationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupStorageRedundancies", l.BackupStorageRedundancies)
	populate(objectMap, "isResidencyRestricted", l.IsResidencyRestricted)
	populate(objectMap, "status", l.Status)
	populate(objectMap, "supportsAvailabilityZone", l.SupportsAvailabilityZone)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedCassandraARMResourceProperties.
func (m ManagedCassandraARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MaterializedViewsBuilderServiceResourceProperties.
func (m MaterializedViewsBuilderServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", m.CreationTime)
	populate(objectMap, "instanceCount", m.InstanceCount)
	populate(objectMap, "instanceSize", m.InstanceSize)
	populate(objectMap, "locations", m.Locations)
	objectMap["serviceType"] = ServiceTypeMaterializedViewsBuilder
	populate(objectMap, "status", m.Status)
	if m.AdditionalProperties != nil {
		for key, val := range m.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MaterializedViewsBuilderServiceResourceProperties.
func (m *MaterializedViewsBuilderServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &m.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, "InstanceCount", &m.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, "InstanceSize", &m.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &m.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, "ServiceType", &m.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &m.Status)
			delete(rawMsg, key)
		default:
			if m.AdditionalProperties == nil {
				m.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				m.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Metric.
func (m *Metric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &m.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, "MetricValues", &m.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &m.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &m.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, "TimeGrain", &m.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, "Unit", &m.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MetricValue.
func (m *MetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "average":
			err = unpopulate(val, "Average", &m.Average)
			delete(rawMsg, key)
		case "_count":
			err = unpopulate(val, "Count", &m.Count)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, "Maximum", &m.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, "Minimum", &m.Minimum)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, "Timestamp", &m.Timestamp)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, "Total", &m.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionCreateUpdateParameters.
func (m MongoDBCollectionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionGetPropertiesResource.
func (m MongoDBCollectionGetPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analyticalStorageTtl", m.AnalyticalStorageTTL)
	populate(objectMap, "_etag", m.Etag)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "indexes", m.Indexes)
	populate(objectMap, "_rid", m.Rid)
	populate(objectMap, "shardKey", m.ShardKey)
	populate(objectMap, "_ts", m.Ts)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionGetResults.
func (m MongoDBCollectionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionResource.
func (m MongoDBCollectionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analyticalStorageTtl", m.AnalyticalStorageTTL)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "indexes", m.Indexes)
	populate(objectMap, "shardKey", m.ShardKey)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseCreateUpdateParameters.
func (m MongoDBDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseGetResults.
func (m MongoDBDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoIndexKeys.
func (m MongoIndexKeys) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "keys", m.Keys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoRoleDefinitionResource.
func (m MongoRoleDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databaseName", m.DatabaseName)
	populate(objectMap, "privileges", m.Privileges)
	populate(objectMap, "roleName", m.RoleName)
	populate(objectMap, "roles", m.Roles)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoUserDefinitionResource.
func (m MongoUserDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customData", m.CustomData)
	populate(objectMap, "databaseName", m.DatabaseName)
	populate(objectMap, "mechanisms", m.Mechanisms)
	populate(objectMap, "password", m.Password)
	populate(objectMap, "roles", m.Roles)
	populate(objectMap, "userName", m.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PartitionMetric.
func (p *PartitionMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &p.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, "MetricValues", &p.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "partitionId":
			err = unpopulate(val, "PartitionID", &p.PartitionID)
			delete(rawMsg, key)
		case "partitionKeyRangeId":
			err = unpopulate(val, "PartitionKeyRangeID", &p.PartitionKeyRangeID)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &p.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, "TimeGrain", &p.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, "Unit", &p.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetric.
func (p *PercentileMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &p.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, "MetricValues", &p.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &p.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, "TimeGrain", &p.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, "Unit", &p.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetricValue.
func (p *PercentileMetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "average":
			err = unpopulate(val, "Average", &p.Average)
			delete(rawMsg, key)
		case "_count":
			err = unpopulate(val, "Count", &p.Count)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, "Maximum", &p.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, "Minimum", &p.Minimum)
			delete(rawMsg, key)
		case "P10":
			err = unpopulate(val, "P10", &p.P10)
			delete(rawMsg, key)
		case "P25":
			err = unpopulate(val, "P25", &p.P25)
			delete(rawMsg, key)
		case "P50":
			err = unpopulate(val, "P50", &p.P50)
			delete(rawMsg, key)
		case "P75":
			err = unpopulate(val, "P75", &p.P75)
			delete(rawMsg, key)
		case "P90":
			err = unpopulate(val, "P90", &p.P90)
			delete(rawMsg, key)
		case "P95":
			err = unpopulate(val, "P95", &p.P95)
			delete(rawMsg, key)
		case "P99":
			err = unpopulate(val, "P99", &p.P99)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, "Timestamp", &p.Timestamp)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, "Total", &p.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PeriodicModeBackupPolicy.
func (p PeriodicModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "migrationState", p.MigrationState)
	populate(objectMap, "periodicModeProperties", p.PeriodicModeProperties)
	objectMap["type"] = BackupPolicyTypePeriodic
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PeriodicModeBackupPolicy.
func (p *PeriodicModeBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationState":
			err = unpopulate(val, "MigrationState", &p.MigrationState)
			delete(rawMsg, key)
		case "periodicModeProperties":
			err = unpopulate(val, "PeriodicModeProperties", &p.PeriodicModeProperties)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Permission.
func (p Permission) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataActions", p.DataActions)
	populate(objectMap, "notDataActions", p.NotDataActions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PhysicalPartitionThroughputInfoProperties.
func (p PhysicalPartitionThroughputInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPartitionThroughputInfo", p.PhysicalPartitionThroughputInfo)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PhysicalPartitionThroughputInfoResult.
func (p PhysicalPartitionThroughputInfoResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "identity", p.Identity)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PhysicalPartitionThroughputInfoResultPropertiesResource.
func (p PhysicalPartitionThroughputInfoResultPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPartitionThroughputInfo", p.PhysicalPartitionThroughputInfo)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Privilege.
func (p Privilege) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", p.Actions)
	populate(objectMap, "resource", p.Resource)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RedistributeThroughputParameters.
func (r RedistributeThroughputParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RedistributeThroughputPropertiesResource.
func (r RedistributeThroughputPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "sourcePhysicalPartitionThroughputInfo", r.SourcePhysicalPartitionThroughputInfo)
	populate(objectMap, "targetPhysicalPartitionThroughputInfo", r.TargetPhysicalPartitionThroughputInfo)
	populate(objectMap, "throughputPolicy", r.ThroughputPolicy)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableDatabaseAccountProperties.
func (r *RestorableDatabaseAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiType":
			err = unpopulate(val, "APIType", &r.APIType)
			delete(rawMsg, key)
		case "accountName":
			err = unpopulate(val, "AccountName", &r.AccountName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &r.CreationTime)
			delete(rawMsg, key)
		case "deletionTime":
			err = unpopulateTimeRFC3339(val, "DeletionTime", &r.DeletionTime)
			delete(rawMsg, key)
		case "oldestRestorableTime":
			err = unpopulateTimeRFC3339(val, "OldestRestorableTime", &r.OldestRestorableTime)
			delete(rawMsg, key)
		case "restorableLocations":
			err = unpopulate(val, "RestorableLocations", &r.RestorableLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableLocationResource.
func (r *RestorableLocationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &r.CreationTime)
			delete(rawMsg, key)
		case "deletionTime":
			err = unpopulateTimeRFC3339(val, "DeletionTime", &r.DeletionTime)
			delete(rawMsg, key)
		case "locationName":
			err = unpopulate(val, "LocationName", &r.LocationName)
			delete(rawMsg, key)
		case "regionalDatabaseAccountInstanceId":
			err = unpopulate(val, "RegionalDatabaseAccountInstanceID", &r.RegionalDatabaseAccountInstanceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RestoreParameters.
func (r RestoreParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databasesToRestore", r.DatabasesToRestore)
	populate(objectMap, "gremlinDatabasesToRestore", r.GremlinDatabasesToRestore)
	populate(objectMap, "restoreMode", r.RestoreMode)
	populate(objectMap, "restoreSource", r.RestoreSource)
	populateTimeRFC3339(objectMap, "restoreTimestampInUtc", r.RestoreTimestampInUTC)
	populate(objectMap, "tablesToRestore", r.TablesToRestore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreParameters.
func (r *RestoreParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "databasesToRestore":
			err = unpopulate(val, "DatabasesToRestore", &r.DatabasesToRestore)
			delete(rawMsg, key)
		case "gremlinDatabasesToRestore":
			err = unpopulate(val, "GremlinDatabasesToRestore", &r.GremlinDatabasesToRestore)
			delete(rawMsg, key)
		case "restoreMode":
			err = unpopulate(val, "RestoreMode", &r.RestoreMode)
			delete(rawMsg, key)
		case "restoreSource":
			err = unpopulate(val, "RestoreSource", &r.RestoreSource)
			delete(rawMsg, key)
		case "restoreTimestampInUtc":
			err = unpopulateTimeRFC3339(val, "RestoreTimestampInUTC", &r.RestoreTimestampInUTC)
			delete(rawMsg, key)
		case "tablesToRestore":
			err = unpopulate(val, "TablesToRestore", &r.TablesToRestore)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RetrieveThroughputParameters.
func (r RetrieveThroughputParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RetrieveThroughputPropertiesResource.
func (r RetrieveThroughputPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPartitionIds", r.PhysicalPartitionIDs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerCreateUpdateParameters.
func (s SQLContainerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerGetResults.
func (s SQLContainerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLDataTransferDataSourceSink.
func (s SQLDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentCosmosDBSQL
	populate(objectMap, "containerName", s.ContainerName)
	populate(objectMap, "databaseName", s.DatabaseName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDataTransferDataSourceSink.
func (s *SQLDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, "Component", &s.Component)
			delete(rawMsg, key)
		case "containerName":
			err = unpopulate(val, "ContainerName", &s.ContainerName)
			delete(rawMsg, key)
		case "databaseName":
			err = unpopulate(val, "DatabaseName", &s.DatabaseName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseCreateUpdateParameters.
func (s SQLDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseGetResults.
func (s SQLDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLDedicatedGatewayServiceResourceProperties.
func (s SQLDedicatedGatewayServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", s.CreationTime)
	populate(objectMap, "instanceCount", s.InstanceCount)
	populate(objectMap, "instanceSize", s.InstanceSize)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "sqlDedicatedGatewayEndpoint", s.SQLDedicatedGatewayEndpoint)
	objectMap["serviceType"] = ServiceTypeSQLDedicatedGateway
	populate(objectMap, "status", s.Status)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDedicatedGatewayServiceResourceProperties.
func (s *SQLDedicatedGatewayServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &s.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, "InstanceCount", &s.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, "InstanceSize", &s.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, "Locations", &s.Locations)
			delete(rawMsg, key)
		case "sqlDedicatedGatewayEndpoint":
			err = unpopulate(val, "SQLDedicatedGatewayEndpoint", &s.SQLDedicatedGatewayEndpoint)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, "ServiceType", &s.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &s.Status)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleDefinitionResource.
func (s SQLRoleDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assignableScopes", s.AssignableScopes)
	populate(objectMap, "permissions", s.Permissions)
	populate(objectMap, "roleName", s.RoleName)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureCreateUpdateParameters.
func (s SQLStoredProcedureCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureGetResults.
func (s SQLStoredProcedureGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerCreateUpdateParameters.
func (s SQLTriggerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerGetResults.
func (s SQLTriggerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionCreateUpdateParameters.
func (s SQLUserDefinedFunctionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionGetResults.
func (s SQLUserDefinedFunctionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResource.
func (s ServiceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceResource.
func (s *ServiceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &s.Name)
			delete(rawMsg, key)
		case "properties":
			s.Properties, err = unmarshalServiceResourcePropertiesClassification(val)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceProperties.
func (s ServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", s.CreationTime)
	populate(objectMap, "instanceCount", s.InstanceCount)
	populate(objectMap, "instanceSize", s.InstanceSize)
	objectMap["serviceType"] = s.ServiceType
	populate(objectMap, "status", s.Status)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceResourceProperties.
func (s *ServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, "CreationTime", &s.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, "InstanceCount", &s.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, "InstanceSize", &s.InstanceSize)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, "ServiceType", &s.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, "Status", &s.Status)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SpatialSpec.
func (s SpatialSpec) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "path", s.Path)
	populate(objectMap, "types", s.Types)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TableCreateUpdateParameters.
func (t TableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TableGetResults.
func (t TableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsGetResults.
func (t ThroughputSettingsGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsUpdateParameters.
func (t ThroughputSettingsUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKey.
func (u UniqueKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "paths", u.Paths)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKeyPolicy.
func (u UniqueKeyPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "uniqueKeys", u.UniqueKeys)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray(m map[string]interface{}, k string, b []byte, f runtime.Base64Encoding) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = runtime.EncodeByteArray(b, f)
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
