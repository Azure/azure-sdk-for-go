//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcosmos

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type ARMResourceProperties.
func (a ARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AuthenticationMethodLdapProperties.
func (a AuthenticationMethodLdapProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "searchBaseDistinguishedName", a.SearchBaseDistinguishedName)
	populate(objectMap, "searchFilterTemplate", a.SearchFilterTemplate)
	populate(objectMap, "serverCertificates", a.ServerCertificates)
	populate(objectMap, "serverHostname", a.ServerHostname)
	populate(objectMap, "serverPort", a.ServerPort)
	populate(objectMap, "serviceUserDistinguishedName", a.ServiceUserDistinguishedName)
	populate(objectMap, "serviceUserPassword", a.ServiceUserPassword)
	return json.Marshal(objectMap)
}

// GetDataTransferDataSourceSink implements the DataTransferDataSourceSinkClassification interface for type AzureBlobDataTransferDataSourceSink.
func (a *AzureBlobDataTransferDataSourceSink) GetDataTransferDataSourceSink() *DataTransferDataSourceSink {
	return &DataTransferDataSourceSink{
		Component: a.Component,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AzureBlobDataTransferDataSourceSink.
func (a AzureBlobDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentAzureBlobStorage
	populate(objectMap, "containerName", a.ContainerName)
	populate(objectMap, "endpointUrl", a.EndpointURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBlobDataTransferDataSourceSink.
func (a *AzureBlobDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, &a.Component)
			delete(rawMsg, key)
		case "containerName":
			err = unpopulate(val, &a.ContainerName)
			delete(rawMsg, key)
		case "endpointUrl":
			err = unpopulate(val, &a.EndpointURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetBackupPolicy implements the BackupPolicyClassification interface for type BackupPolicy.
func (b *BackupPolicy) GetBackupPolicy() *BackupPolicy { return b }

// MarshalJSON implements the json.Marshaller interface for type BackupPolicyMigrationState.
func (b BackupPolicyMigrationState) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "startTime", b.StartTime)
	populate(objectMap, "status", b.Status)
	populate(objectMap, "targetType", b.TargetType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupPolicyMigrationState.
func (b *BackupPolicyMigrationState) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "startTime":
			err = unpopulateTimeRFC3339(val, &b.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &b.Status)
			delete(rawMsg, key)
		case "targetType":
			err = unpopulate(val, &b.TargetType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BackupResourceProperties.
func (b BackupResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "timestamp", b.Timestamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupResourceProperties.
func (b *BackupResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &b.Timestamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CassandraClusterPublicStatus.
func (c CassandraClusterPublicStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionErrors", c.ConnectionErrors)
	populate(objectMap, "dataCenters", c.DataCenters)
	populate(objectMap, "eTag", c.ETag)
	populate(objectMap, "reaperStatus", c.ReaperStatus)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraClusterPublicStatusDataCentersItem.
func (c CassandraClusterPublicStatusDataCentersItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", c.Name)
	populate(objectMap, "nodes", c.Nodes)
	populate(objectMap, "seedNodes", c.SeedNodes)
	return json.Marshal(objectMap)
}

// GetDataTransferDataSourceSink implements the DataTransferDataSourceSinkClassification interface for type CassandraDataTransferDataSourceSink.
func (c *CassandraDataTransferDataSourceSink) GetDataTransferDataSourceSink() *DataTransferDataSourceSink {
	return &DataTransferDataSourceSink{
		Component: c.Component,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CassandraDataTransferDataSourceSink.
func (c CassandraDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentCosmosDBCassandra
	populate(objectMap, "keyspaceName", c.KeyspaceName)
	populate(objectMap, "tableName", c.TableName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CassandraDataTransferDataSourceSink.
func (c *CassandraDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, &c.Component)
			delete(rawMsg, key)
		case "keyspaceName":
			err = unpopulate(val, &c.KeyspaceName)
			delete(rawMsg, key)
		case "tableName":
			err = unpopulate(val, &c.TableName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceCreateUpdateParameters.
func (c CassandraKeyspaceCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceGetResults.
func (c CassandraKeyspaceGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraKeyspaceListResult.
func (c CassandraKeyspaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraSchema.
func (c CassandraSchema) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterKeys", c.ClusterKeys)
	populate(objectMap, "columns", c.Columns)
	populate(objectMap, "partitionKeys", c.PartitionKeys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableCreateUpdateParameters.
func (c CassandraTableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableGetResults.
func (c CassandraTableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraTableListResult.
func (c CassandraTableListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraViewCreateUpdateParameters.
func (c CassandraViewCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraViewGetResults.
func (c CassandraViewGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CassandraViewListResult.
func (c CassandraViewListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionKeyGetPropertiesResource.
func (c ClientEncryptionKeyGetPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionAlgorithm", c.EncryptionAlgorithm)
	populate(objectMap, "_etag", c.Etag)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "keyWrapMetadata", c.KeyWrapMetadata)
	populate(objectMap, "_rid", c.Rid)
	populate(objectMap, "_ts", c.Ts)
	populateByteArray(objectMap, "wrappedDataEncryptionKey", c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ClientEncryptionKeyGetPropertiesResource.
func (c *ClientEncryptionKeyGetPropertiesResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "encryptionAlgorithm":
			err = unpopulate(val, &c.EncryptionAlgorithm)
			delete(rawMsg, key)
		case "_etag":
			err = unpopulate(val, &c.Etag)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "keyWrapMetadata":
			err = unpopulate(val, &c.KeyWrapMetadata)
			delete(rawMsg, key)
		case "_rid":
			err = unpopulate(val, &c.Rid)
			delete(rawMsg, key)
		case "_ts":
			err = unpopulate(val, &c.Ts)
			delete(rawMsg, key)
		case "wrappedDataEncryptionKey":
			err = runtime.DecodeByteArray(string(val), &c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionKeyResource.
func (c ClientEncryptionKeyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionAlgorithm", c.EncryptionAlgorithm)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "keyWrapMetadata", c.KeyWrapMetadata)
	populateByteArray(objectMap, "wrappedDataEncryptionKey", c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ClientEncryptionKeyResource.
func (c *ClientEncryptionKeyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "encryptionAlgorithm":
			err = unpopulate(val, &c.EncryptionAlgorithm)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "keyWrapMetadata":
			err = unpopulate(val, &c.KeyWrapMetadata)
			delete(rawMsg, key)
		case "wrappedDataEncryptionKey":
			err = runtime.DecodeByteArray(string(val), &c.WrappedDataEncryptionKey, runtime.Base64StdFormat)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionKeysListResult.
func (c ClientEncryptionKeysListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClientEncryptionPolicy.
func (c ClientEncryptionPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "includedPaths", c.IncludedPaths)
	populate(objectMap, "policyFormatVersion", c.PolicyFormatVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClusterResource.
func (c ClusterResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ClusterResourceProperties.
func (c ClusterResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationMethod", c.AuthenticationMethod)
	populate(objectMap, "cassandraAuditLoggingEnabled", c.CassandraAuditLoggingEnabled)
	populate(objectMap, "cassandraVersion", c.CassandraVersion)
	populate(objectMap, "clientCertificates", c.ClientCertificates)
	populate(objectMap, "clusterNameOverride", c.ClusterNameOverride)
	populate(objectMap, "deallocated", c.Deallocated)
	populate(objectMap, "delegatedManagementSubnetId", c.DelegatedManagementSubnetID)
	populate(objectMap, "externalGossipCertificates", c.ExternalGossipCertificates)
	populate(objectMap, "externalSeedNodes", c.ExternalSeedNodes)
	populate(objectMap, "gossipCertificates", c.GossipCertificates)
	populate(objectMap, "hoursBetweenBackups", c.HoursBetweenBackups)
	populate(objectMap, "initialCassandraAdminPassword", c.InitialCassandraAdminPassword)
	populate(objectMap, "prometheusEndpoint", c.PrometheusEndpoint)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "repairEnabled", c.RepairEnabled)
	populate(objectMap, "restoreFromBackupId", c.RestoreFromBackupID)
	populate(objectMap, "seedNodes", c.SeedNodes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CommandPostBody.
func (c CommandPostBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "arguments", c.Arguments)
	populate(objectMap, "cassandra-stop-start", c.CassandraStopStart)
	populate(objectMap, "command", c.Command)
	populate(objectMap, "host", c.Host)
	populate(objectMap, "readwrite", c.Readwrite)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems.
func (c ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "address", c.Address)
	populate(objectMap, "cpuUsage", c.CPUUsage)
	populate(objectMap, "diskFreeKB", c.DiskFreeKB)
	populate(objectMap, "diskUsedKB", c.DiskUsedKB)
	populate(objectMap, "hostID", c.HostID)
	populate(objectMap, "load", c.Load)
	populate(objectMap, "memoryBuffersAndCachedKB", c.MemoryBuffersAndCachedKB)
	populate(objectMap, "memoryFreeKB", c.MemoryFreeKB)
	populate(objectMap, "memoryTotalKB", c.MemoryTotalKB)
	populate(objectMap, "memoryUsedKB", c.MemoryUsedKB)
	populate(objectMap, "rack", c.Rack)
	populate(objectMap, "size", c.Size)
	populate(objectMap, "state", c.State)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "timestamp", c.Timestamp)
	populate(objectMap, "tokens", c.Tokens)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerPartitionKey.
func (c ContainerPartitionKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "kind", c.Kind)
	populate(objectMap, "paths", c.Paths)
	populate(objectMap, "systemKey", c.SystemKey)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// GetBackupPolicy implements the BackupPolicyClassification interface for type ContinuousModeBackupPolicy.
func (c *ContinuousModeBackupPolicy) GetBackupPolicy() *BackupPolicy {
	return &BackupPolicy{
		Type:           c.Type,
		MigrationState: c.MigrationState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousModeBackupPolicy.
func (c ContinuousModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "continuousModeProperties", c.ContinuousModeProperties)
	populate(objectMap, "migrationState", c.MigrationState)
	objectMap["type"] = BackupPolicyTypeContinuous
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContinuousModeBackupPolicy.
func (c *ContinuousModeBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "continuousModeProperties":
			err = unpopulate(val, &c.ContinuousModeProperties)
			delete(rawMsg, key)
		case "migrationState":
			err = unpopulate(val, &c.MigrationState)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &c.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataCenterResource.
func (d DataCenterResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataCenterResourceProperties.
func (d DataCenterResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationMethodLdapProperties", d.AuthenticationMethodLdapProperties)
	populate(objectMap, "availabilityZone", d.AvailabilityZone)
	populate(objectMap, "backupStorageCustomerKeyUri", d.BackupStorageCustomerKeyURI)
	populate(objectMap, "base64EncodedCassandraYamlFragment", d.Base64EncodedCassandraYamlFragment)
	populate(objectMap, "dataCenterLocation", d.DataCenterLocation)
	populate(objectMap, "delegatedSubnetId", d.DelegatedSubnetID)
	populate(objectMap, "diskCapacity", d.DiskCapacity)
	populate(objectMap, "diskSku", d.DiskSKU)
	populate(objectMap, "managedDiskCustomerKeyUri", d.ManagedDiskCustomerKeyURI)
	populate(objectMap, "nodeCount", d.NodeCount)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "sku", d.SKU)
	populate(objectMap, "seedNodes", d.SeedNodes)
	return json.Marshal(objectMap)
}

// GetDataTransferDataSourceSink implements the DataTransferDataSourceSinkClassification interface for type DataTransferDataSourceSink.
func (d *DataTransferDataSourceSink) GetDataTransferDataSourceSink() *DataTransferDataSourceSink {
	return d
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferJobFeedResults.
func (d DataTransferJobFeedResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferJobProperties.
func (d DataTransferJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destination", d.Destination)
	populate(objectMap, "error", d.Error)
	populate(objectMap, "jobName", d.JobName)
	populateTimeRFC3339(objectMap, "lastUpdatedUtcTime", d.LastUpdatedUTCTime)
	populate(objectMap, "percentageComplete", d.PercentageComplete)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "workerCount", d.WorkerCount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferJobProperties.
func (d *DataTransferJobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destination":
			d.Destination, err = unmarshalDataTransferDataSourceSinkClassification(val)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &d.Error)
			delete(rawMsg, key)
		case "jobName":
			err = unpopulate(val, &d.JobName)
			delete(rawMsg, key)
		case "lastUpdatedUtcTime":
			err = unpopulateTimeRFC3339(val, &d.LastUpdatedUTCTime)
			delete(rawMsg, key)
		case "percentageComplete":
			err = unpopulate(val, &d.PercentageComplete)
			delete(rawMsg, key)
		case "source":
			d.Source, err = unmarshalDataTransferDataSourceSinkClassification(val)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "workerCount":
			err = unpopulate(val, &d.WorkerCount)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetServiceResourceProperties implements the ServiceResourcePropertiesClassification interface for type DataTransferServiceResourceProperties.
func (d *DataTransferServiceResourceProperties) GetServiceResourceProperties() *ServiceResourceProperties {
	return &ServiceResourceProperties{
		CreationTime:         d.CreationTime,
		InstanceSize:         d.InstanceSize,
		InstanceCount:        d.InstanceCount,
		ServiceType:          d.ServiceType,
		Status:               d.Status,
		AdditionalProperties: d.AdditionalProperties,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferServiceResourceProperties.
func (d DataTransferServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", d.CreationTime)
	populate(objectMap, "instanceCount", d.InstanceCount)
	populate(objectMap, "instanceSize", d.InstanceSize)
	populate(objectMap, "locations", d.Locations)
	objectMap["serviceType"] = ServiceTypeDataTransfer
	populate(objectMap, "status", d.Status)
	if d.AdditionalProperties != nil {
		for key, val := range d.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferServiceResourceProperties.
func (d *DataTransferServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &d.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, &d.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, &d.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, &d.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		default:
			if d.AdditionalProperties == nil {
				d.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				d.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateParameters.
func (d DatabaseAccountCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d DatabaseAccountCreateUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountCreateUpdateProperties.
func (d *DatabaseAccountCreateUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetProperties.
func (d DatabaseAccountGetProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "createMode", d.CreateMode)
	populate(objectMap, "databaseAccountOfferType", d.DatabaseAccountOfferType)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "documentEndpoint", d.DocumentEndpoint)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "failoverPolicies", d.FailoverPolicies)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "instanceId", d.InstanceID)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "privateEndpointConnections", d.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "readLocations", d.ReadLocations)
	populate(objectMap, "restoreParameters", d.RestoreParameters)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	populate(objectMap, "writeLocations", d.WriteLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountGetProperties.
func (d *DatabaseAccountGetProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, &d.CreateMode)
			delete(rawMsg, key)
		case "databaseAccountOfferType":
			err = unpopulate(val, &d.DatabaseAccountOfferType)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "documentEndpoint":
			err = unpopulate(val, &d.DocumentEndpoint)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "failoverPolicies":
			err = unpopulate(val, &d.FailoverPolicies)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "instanceId":
			err = unpopulate(val, &d.InstanceID)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &d.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "readLocations":
			err = unpopulate(val, &d.ReadLocations)
			delete(rawMsg, key)
		case "restoreParameters":
			err = unpopulate(val, &d.RestoreParameters)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		case "writeLocations":
			err = unpopulate(val, &d.WriteLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountGetResults.
func (d DatabaseAccountGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountListConnectionStringsResult.
func (d DatabaseAccountListConnectionStringsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionStrings", d.ConnectionStrings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateParameters.
func (d DatabaseAccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountUpdateProperties.
func (d DatabaseAccountUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiProperties", d.APIProperties)
	populate(objectMap, "analyticalStorageConfiguration", d.AnalyticalStorageConfiguration)
	populate(objectMap, "backupPolicy", d.BackupPolicy)
	populate(objectMap, "capabilities", d.Capabilities)
	populate(objectMap, "capacity", d.Capacity)
	populate(objectMap, "connectorOffer", d.ConnectorOffer)
	populate(objectMap, "consistencyPolicy", d.ConsistencyPolicy)
	populate(objectMap, "cors", d.Cors)
	populate(objectMap, "defaultIdentity", d.DefaultIdentity)
	populate(objectMap, "diagnosticLogSettings", d.DiagnosticLogSettings)
	populate(objectMap, "disableKeyBasedMetadataWriteAccess", d.DisableKeyBasedMetadataWriteAccess)
	populate(objectMap, "disableLocalAuth", d.DisableLocalAuth)
	populate(objectMap, "enableAnalyticalStorage", d.EnableAnalyticalStorage)
	populate(objectMap, "enableAutomaticFailover", d.EnableAutomaticFailover)
	populate(objectMap, "enableCassandraConnector", d.EnableCassandraConnector)
	populate(objectMap, "enableFreeTier", d.EnableFreeTier)
	populate(objectMap, "enableMaterializedViews", d.EnableMaterializedViews)
	populate(objectMap, "enableMultipleWriteLocations", d.EnableMultipleWriteLocations)
	populate(objectMap, "ipRules", d.IPRules)
	populate(objectMap, "isVirtualNetworkFilterEnabled", d.IsVirtualNetworkFilterEnabled)
	populate(objectMap, "keyVaultKeyUri", d.KeyVaultKeyURI)
	populate(objectMap, "locations", d.Locations)
	populate(objectMap, "networkAclBypass", d.NetworkACLBypass)
	populate(objectMap, "networkAclBypassResourceIds", d.NetworkACLBypassResourceIDs)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatabaseAccountUpdateProperties.
func (d *DatabaseAccountUpdateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiProperties":
			err = unpopulate(val, &d.APIProperties)
			delete(rawMsg, key)
		case "analyticalStorageConfiguration":
			err = unpopulate(val, &d.AnalyticalStorageConfiguration)
			delete(rawMsg, key)
		case "backupPolicy":
			d.BackupPolicy, err = unmarshalBackupPolicyClassification(val)
			delete(rawMsg, key)
		case "capabilities":
			err = unpopulate(val, &d.Capabilities)
			delete(rawMsg, key)
		case "capacity":
			err = unpopulate(val, &d.Capacity)
			delete(rawMsg, key)
		case "connectorOffer":
			err = unpopulate(val, &d.ConnectorOffer)
			delete(rawMsg, key)
		case "consistencyPolicy":
			err = unpopulate(val, &d.ConsistencyPolicy)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &d.Cors)
			delete(rawMsg, key)
		case "defaultIdentity":
			err = unpopulate(val, &d.DefaultIdentity)
			delete(rawMsg, key)
		case "diagnosticLogSettings":
			err = unpopulate(val, &d.DiagnosticLogSettings)
			delete(rawMsg, key)
		case "disableKeyBasedMetadataWriteAccess":
			err = unpopulate(val, &d.DisableKeyBasedMetadataWriteAccess)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &d.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableAnalyticalStorage":
			err = unpopulate(val, &d.EnableAnalyticalStorage)
			delete(rawMsg, key)
		case "enableAutomaticFailover":
			err = unpopulate(val, &d.EnableAutomaticFailover)
			delete(rawMsg, key)
		case "enableCassandraConnector":
			err = unpopulate(val, &d.EnableCassandraConnector)
			delete(rawMsg, key)
		case "enableFreeTier":
			err = unpopulate(val, &d.EnableFreeTier)
			delete(rawMsg, key)
		case "enableMaterializedViews":
			err = unpopulate(val, &d.EnableMaterializedViews)
			delete(rawMsg, key)
		case "enableMultipleWriteLocations":
			err = unpopulate(val, &d.EnableMultipleWriteLocations)
			delete(rawMsg, key)
		case "ipRules":
			err = unpopulate(val, &d.IPRules)
			delete(rawMsg, key)
		case "isVirtualNetworkFilterEnabled":
			err = unpopulate(val, &d.IsVirtualNetworkFilterEnabled)
			delete(rawMsg, key)
		case "keyVaultKeyUri":
			err = unpopulate(val, &d.KeyVaultKeyURI)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &d.Locations)
			delete(rawMsg, key)
		case "networkAclBypass":
			err = unpopulate(val, &d.NetworkACLBypass)
			delete(rawMsg, key)
		case "networkAclBypassResourceIds":
			err = unpopulate(val, &d.NetworkACLBypassResourceIDs)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseAccountsListResult.
func (d DatabaseAccountsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DatabaseRestoreResource.
func (d DatabaseRestoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "collectionNames", d.CollectionNames)
	populate(objectMap, "databaseName", d.DatabaseName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FailoverPolicies.
func (f FailoverPolicies) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "failoverPolicies", f.FailoverPolicies)
	return json.Marshal(objectMap)
}

// GetServiceResourceProperties implements the ServiceResourcePropertiesClassification interface for type GraphAPIComputeServiceResourceProperties.
func (g *GraphAPIComputeServiceResourceProperties) GetServiceResourceProperties() *ServiceResourceProperties {
	return &ServiceResourceProperties{
		CreationTime:         g.CreationTime,
		InstanceSize:         g.InstanceSize,
		InstanceCount:        g.InstanceCount,
		ServiceType:          g.ServiceType,
		Status:               g.Status,
		AdditionalProperties: g.AdditionalProperties,
	}
}

// MarshalJSON implements the json.Marshaller interface for type GraphAPIComputeServiceResourceProperties.
func (g GraphAPIComputeServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", g.CreationTime)
	populate(objectMap, "graphApiComputeEndpoint", g.GraphAPIComputeEndpoint)
	populate(objectMap, "instanceCount", g.InstanceCount)
	populate(objectMap, "instanceSize", g.InstanceSize)
	populate(objectMap, "locations", g.Locations)
	objectMap["serviceType"] = ServiceTypeGraphAPICompute
	populate(objectMap, "status", g.Status)
	if g.AdditionalProperties != nil {
		for key, val := range g.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GraphAPIComputeServiceResourceProperties.
func (g *GraphAPIComputeServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &g.CreationTime)
			delete(rawMsg, key)
		case "graphApiComputeEndpoint":
			err = unpopulate(val, &g.GraphAPIComputeEndpoint)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, &g.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, &g.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &g.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, &g.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &g.Status)
			delete(rawMsg, key)
		default:
			if g.AdditionalProperties == nil {
				g.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				g.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GraphResourceCreateUpdateParameters.
func (g GraphResourceCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GraphResourceGetResults.
func (g GraphResourceGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GraphResourcesListResult.
func (g GraphResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseCreateUpdateParameters.
func (g GremlinDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseGetResults.
func (g GremlinDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseListResult.
func (g GremlinDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinDatabaseRestoreResource.
func (g GremlinDatabaseRestoreResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databaseName", g.DatabaseName)
	populate(objectMap, "graphNames", g.GraphNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphCreateUpdateParameters.
func (g GremlinGraphCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphGetResults.
func (g GremlinGraphGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "identity", g.Identity)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GremlinGraphListResult.
func (g GremlinGraphListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IncludedPath.
func (i IncludedPath) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "indexes", i.Indexes)
	populate(objectMap, "path", i.Path)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IndexingPolicy.
func (i IndexingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "automatic", i.Automatic)
	populate(objectMap, "compositeIndexes", i.CompositeIndexes)
	populate(objectMap, "excludedPaths", i.ExcludedPaths)
	populate(objectMap, "includedPaths", i.IncludedPaths)
	populate(objectMap, "indexingMode", i.IndexingMode)
	populate(objectMap, "spatialIndexes", i.SpatialIndexes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ListBackups.
func (l ListBackups) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ListClusters.
func (l ListClusters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ListDataCenters.
func (l ListDataCenters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LocationListResult.
func (l LocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LocationProperties.
func (l LocationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupStorageRedundancies", l.BackupStorageRedundancies)
	populate(objectMap, "isResidencyRestricted", l.IsResidencyRestricted)
	populate(objectMap, "status", l.Status)
	populate(objectMap, "supportsAvailabilityZone", l.SupportsAvailabilityZone)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedCassandraARMResourceProperties.
func (m ManagedCassandraARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedCassandraReaperStatus.
func (m ManagedCassandraReaperStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "healthy", m.Healthy)
	populate(objectMap, "repairRunIds", m.RepairRunIDs)
	populate(objectMap, "repairSchedules", m.RepairSchedules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// GetServiceResourceProperties implements the ServiceResourcePropertiesClassification interface for type MaterializedViewsBuilderServiceResourceProperties.
func (m *MaterializedViewsBuilderServiceResourceProperties) GetServiceResourceProperties() *ServiceResourceProperties {
	return &ServiceResourceProperties{
		CreationTime:         m.CreationTime,
		InstanceSize:         m.InstanceSize,
		InstanceCount:        m.InstanceCount,
		ServiceType:          m.ServiceType,
		Status:               m.Status,
		AdditionalProperties: m.AdditionalProperties,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MaterializedViewsBuilderServiceResourceProperties.
func (m MaterializedViewsBuilderServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", m.CreationTime)
	populate(objectMap, "instanceCount", m.InstanceCount)
	populate(objectMap, "instanceSize", m.InstanceSize)
	populate(objectMap, "locations", m.Locations)
	objectMap["serviceType"] = ServiceTypeMaterializedViewsBuilder
	populate(objectMap, "status", m.Status)
	if m.AdditionalProperties != nil {
		for key, val := range m.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MaterializedViewsBuilderServiceResourceProperties.
func (m *MaterializedViewsBuilderServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &m.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, &m.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, &m.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &m.Locations)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, &m.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &m.Status)
			delete(rawMsg, key)
		default:
			if m.AdditionalProperties == nil {
				m.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				m.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Metric.
func (m Metric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", m.EndTime)
	populate(objectMap, "metricValues", m.MetricValues)
	populate(objectMap, "name", m.Name)
	populateTimeRFC3339(objectMap, "startTime", m.StartTime)
	populate(objectMap, "timeGrain", m.TimeGrain)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Metric.
func (m *Metric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &m.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, &m.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &m.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &m.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &m.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &m.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MetricDefinition.
func (m MetricDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metricAvailabilities", m.MetricAvailabilities)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "primaryAggregationType", m.PrimaryAggregationType)
	populate(objectMap, "resourceUri", m.ResourceURI)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MetricDefinitionsListResult.
func (m MetricDefinitionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MetricListResult.
func (m MetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MetricValue.
func (m MetricValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "average", m.Average)
	populate(objectMap, "_count", m.Count)
	populate(objectMap, "maximum", m.Maximum)
	populate(objectMap, "minimum", m.Minimum)
	populateTimeRFC3339(objectMap, "timestamp", m.Timestamp)
	populate(objectMap, "total", m.Total)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MetricValue.
func (m *MetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "average":
			err = unpopulate(val, &m.Average)
			delete(rawMsg, key)
		case "_count":
			err = unpopulate(val, &m.Count)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, &m.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, &m.Minimum)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &m.Timestamp)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &m.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionCreateUpdateParameters.
func (m MongoDBCollectionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionGetPropertiesResource.
func (m MongoDBCollectionGetPropertiesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analyticalStorageTtl", m.AnalyticalStorageTTL)
	populate(objectMap, "_etag", m.Etag)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "indexes", m.Indexes)
	populate(objectMap, "_rid", m.Rid)
	populate(objectMap, "shardKey", m.ShardKey)
	populate(objectMap, "_ts", m.Ts)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionGetResults.
func (m MongoDBCollectionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionListResult.
func (m MongoDBCollectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBCollectionResource.
func (m MongoDBCollectionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analyticalStorageTtl", m.AnalyticalStorageTTL)
	populate(objectMap, "id", m.ID)
	populate(objectMap, "indexes", m.Indexes)
	populate(objectMap, "shardKey", m.ShardKey)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseCreateUpdateParameters.
func (m MongoDBDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseGetResults.
func (m MongoDBDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "identity", m.Identity)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoDBDatabaseListResult.
func (m MongoDBDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoIndexKeys.
func (m MongoIndexKeys) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "keys", m.Keys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoRoleDefinitionListResult.
func (m MongoRoleDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoRoleDefinitionResource.
func (m MongoRoleDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databaseName", m.DatabaseName)
	populate(objectMap, "privileges", m.Privileges)
	populate(objectMap, "roleName", m.RoleName)
	populate(objectMap, "roles", m.Roles)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoUserDefinitionListResult.
func (m MongoUserDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MongoUserDefinitionResource.
func (m MongoUserDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customData", m.CustomData)
	populate(objectMap, "databaseName", m.DatabaseName)
	populate(objectMap, "mechanisms", m.Mechanisms)
	populate(objectMap, "password", m.Password)
	populate(objectMap, "roles", m.Roles)
	populate(objectMap, "userName", m.UserName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NotebookWorkspaceListResult.
func (n NotebookWorkspaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PartitionMetric.
func (p PartitionMetric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", p.EndTime)
	populate(objectMap, "metricValues", p.MetricValues)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "partitionId", p.PartitionID)
	populate(objectMap, "partitionKeyRangeId", p.PartitionKeyRangeID)
	populateTimeRFC3339(objectMap, "startTime", p.StartTime)
	populate(objectMap, "timeGrain", p.TimeGrain)
	populate(objectMap, "unit", p.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PartitionMetric.
func (p *PartitionMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &p.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, &p.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "partitionId":
			err = unpopulate(val, &p.PartitionID)
			delete(rawMsg, key)
		case "partitionKeyRangeId":
			err = unpopulate(val, &p.PartitionKeyRangeID)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &p.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &p.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &p.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PartitionMetricListResult.
func (p PartitionMetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PartitionUsagesResult.
func (p PartitionUsagesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetric.
func (p PercentileMetric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", p.EndTime)
	populate(objectMap, "metricValues", p.MetricValues)
	populate(objectMap, "name", p.Name)
	populateTimeRFC3339(objectMap, "startTime", p.StartTime)
	populate(objectMap, "timeGrain", p.TimeGrain)
	populate(objectMap, "unit", p.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetric.
func (p *PercentileMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &p.EndTime)
			delete(rawMsg, key)
		case "metricValues":
			err = unpopulate(val, &p.MetricValues)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &p.StartTime)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &p.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &p.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetricListResult.
func (p PercentileMetricListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PercentileMetricValue.
func (p PercentileMetricValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "average", p.Average)
	populate(objectMap, "_count", p.Count)
	populate(objectMap, "maximum", p.Maximum)
	populate(objectMap, "minimum", p.Minimum)
	populate(objectMap, "P10", p.P10)
	populate(objectMap, "P25", p.P25)
	populate(objectMap, "P50", p.P50)
	populate(objectMap, "P75", p.P75)
	populate(objectMap, "P90", p.P90)
	populate(objectMap, "P95", p.P95)
	populate(objectMap, "P99", p.P99)
	populateTimeRFC3339(objectMap, "timestamp", p.Timestamp)
	populate(objectMap, "total", p.Total)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PercentileMetricValue.
func (p *PercentileMetricValue) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "average":
			err = unpopulate(val, &p.Average)
			delete(rawMsg, key)
		case "_count":
			err = unpopulate(val, &p.Count)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, &p.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, &p.Minimum)
			delete(rawMsg, key)
		case "P10":
			err = unpopulate(val, &p.P10)
			delete(rawMsg, key)
		case "P25":
			err = unpopulate(val, &p.P25)
			delete(rawMsg, key)
		case "P50":
			err = unpopulate(val, &p.P50)
			delete(rawMsg, key)
		case "P75":
			err = unpopulate(val, &p.P75)
			delete(rawMsg, key)
		case "P90":
			err = unpopulate(val, &p.P90)
			delete(rawMsg, key)
		case "P95":
			err = unpopulate(val, &p.P95)
			delete(rawMsg, key)
		case "P99":
			err = unpopulate(val, &p.P99)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &p.Timestamp)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &p.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetBackupPolicy implements the BackupPolicyClassification interface for type PeriodicModeBackupPolicy.
func (p *PeriodicModeBackupPolicy) GetBackupPolicy() *BackupPolicy {
	return &BackupPolicy{
		Type:           p.Type,
		MigrationState: p.MigrationState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PeriodicModeBackupPolicy.
func (p PeriodicModeBackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "migrationState", p.MigrationState)
	populate(objectMap, "periodicModeProperties", p.PeriodicModeProperties)
	objectMap["type"] = BackupPolicyTypePeriodic
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PeriodicModeBackupPolicy.
func (p *PeriodicModeBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "migrationState":
			err = unpopulate(val, &p.MigrationState)
			delete(rawMsg, key)
		case "periodicModeProperties":
			err = unpopulate(val, &p.PeriodicModeProperties)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Permission.
func (p Permission) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataActions", p.DataActions)
	populate(objectMap, "notDataActions", p.NotDataActions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PhysicalPartitionStorageInfoCollection.
func (p PhysicalPartitionStorageInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPartitionStorageInfoCollection", p.PhysicalPartitionStorageInfoCollection)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Privilege.
func (p Privilege) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", p.Actions)
	populate(objectMap, "resource", p.Resource)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableDatabaseAccountProperties.
func (r RestorableDatabaseAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiType", r.APIType)
	populate(objectMap, "accountName", r.AccountName)
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populateTimeRFC3339(objectMap, "deletionTime", r.DeletionTime)
	populateTimeRFC3339(objectMap, "oldestRestorableTime", r.OldestRestorableTime)
	populate(objectMap, "restorableLocations", r.RestorableLocations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableDatabaseAccountProperties.
func (r *RestorableDatabaseAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiType":
			err = unpopulate(val, &r.APIType)
			delete(rawMsg, key)
		case "accountName":
			err = unpopulate(val, &r.AccountName)
			delete(rawMsg, key)
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "deletionTime":
			err = unpopulateTimeRFC3339(val, &r.DeletionTime)
			delete(rawMsg, key)
		case "oldestRestorableTime":
			err = unpopulateTimeRFC3339(val, &r.OldestRestorableTime)
			delete(rawMsg, key)
		case "restorableLocations":
			err = unpopulate(val, &r.RestorableLocations)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RestorableDatabaseAccountsListResult.
func (r RestorableDatabaseAccountsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableGremlinDatabasesListResult.
func (r RestorableGremlinDatabasesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableGremlinGraphsListResult.
func (r RestorableGremlinGraphsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableGremlinResourcesListResult.
func (r RestorableGremlinResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableLocationResource.
func (r RestorableLocationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populateTimeRFC3339(objectMap, "deletionTime", r.DeletionTime)
	populate(objectMap, "locationName", r.LocationName)
	populate(objectMap, "regionalDatabaseAccountInstanceId", r.RegionalDatabaseAccountInstanceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestorableLocationResource.
func (r *RestorableLocationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "deletionTime":
			err = unpopulateTimeRFC3339(val, &r.DeletionTime)
			delete(rawMsg, key)
		case "locationName":
			err = unpopulate(val, &r.LocationName)
			delete(rawMsg, key)
		case "regionalDatabaseAccountInstanceId":
			err = unpopulate(val, &r.RegionalDatabaseAccountInstanceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbCollectionsListResult.
func (r RestorableMongodbCollectionsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbDatabasesListResult.
func (r RestorableMongodbDatabasesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableMongodbResourcesListResult.
func (r RestorableMongodbResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLContainersListResult.
func (r RestorableSQLContainersListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLDatabasesListResult.
func (r RestorableSQLDatabasesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableSQLResourcesListResult.
func (r RestorableSQLResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableTableResourcesListResult.
func (r RestorableTableResourcesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestorableTablesListResult.
func (r RestorableTablesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RestoreParameters.
func (r RestoreParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "databasesToRestore", r.DatabasesToRestore)
	populate(objectMap, "gremlinDatabasesToRestore", r.GremlinDatabasesToRestore)
	populate(objectMap, "restoreMode", r.RestoreMode)
	populate(objectMap, "restoreSource", r.RestoreSource)
	populateTimeRFC3339(objectMap, "restoreTimestampInUtc", r.RestoreTimestampInUTC)
	populate(objectMap, "tablesToRestore", r.TablesToRestore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreParameters.
func (r *RestoreParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "databasesToRestore":
			err = unpopulate(val, &r.DatabasesToRestore)
			delete(rawMsg, key)
		case "gremlinDatabasesToRestore":
			err = unpopulate(val, &r.GremlinDatabasesToRestore)
			delete(rawMsg, key)
		case "restoreMode":
			err = unpopulate(val, &r.RestoreMode)
			delete(rawMsg, key)
		case "restoreSource":
			err = unpopulate(val, &r.RestoreSource)
			delete(rawMsg, key)
		case "restoreTimestampInUtc":
			err = unpopulateTimeRFC3339(val, &r.RestoreTimestampInUTC)
			delete(rawMsg, key)
		case "tablesToRestore":
			err = unpopulate(val, &r.TablesToRestore)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerCreateUpdateParameters.
func (s SQLContainerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerGetResults.
func (s SQLContainerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLContainerListResult.
func (s SQLContainerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// GetDataTransferDataSourceSink implements the DataTransferDataSourceSinkClassification interface for type SQLDataTransferDataSourceSink.
func (s *SQLDataTransferDataSourceSink) GetDataTransferDataSourceSink() *DataTransferDataSourceSink {
	return &DataTransferDataSourceSink{
		Component: s.Component,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDataTransferDataSourceSink.
func (s SQLDataTransferDataSourceSink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["component"] = DataTransferComponentCosmosDBSQL
	populate(objectMap, "containerName", s.ContainerName)
	populate(objectMap, "databaseName", s.DatabaseName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDataTransferDataSourceSink.
func (s *SQLDataTransferDataSourceSink) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "component":
			err = unpopulate(val, &s.Component)
			delete(rawMsg, key)
		case "containerName":
			err = unpopulate(val, &s.ContainerName)
			delete(rawMsg, key)
		case "databaseName":
			err = unpopulate(val, &s.DatabaseName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseCreateUpdateParameters.
func (s SQLDatabaseCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseGetResults.
func (s SQLDatabaseGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLDatabaseListResult.
func (s SQLDatabaseListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// GetServiceResourceProperties implements the ServiceResourcePropertiesClassification interface for type SQLDedicatedGatewayServiceResourceProperties.
func (s *SQLDedicatedGatewayServiceResourceProperties) GetServiceResourceProperties() *ServiceResourceProperties {
	return &ServiceResourceProperties{
		CreationTime:         s.CreationTime,
		InstanceSize:         s.InstanceSize,
		InstanceCount:        s.InstanceCount,
		ServiceType:          s.ServiceType,
		Status:               s.Status,
		AdditionalProperties: s.AdditionalProperties,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDedicatedGatewayServiceResourceProperties.
func (s SQLDedicatedGatewayServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", s.CreationTime)
	populate(objectMap, "instanceCount", s.InstanceCount)
	populate(objectMap, "instanceSize", s.InstanceSize)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "sqlDedicatedGatewayEndpoint", s.SQLDedicatedGatewayEndpoint)
	objectMap["serviceType"] = ServiceTypeSQLDedicatedGateway
	populate(objectMap, "status", s.Status)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDedicatedGatewayServiceResourceProperties.
func (s *SQLDedicatedGatewayServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &s.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, &s.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, &s.InstanceSize)
			delete(rawMsg, key)
		case "locations":
			err = unpopulate(val, &s.Locations)
			delete(rawMsg, key)
		case "sqlDedicatedGatewayEndpoint":
			err = unpopulate(val, &s.SQLDedicatedGatewayEndpoint)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, &s.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleAssignmentListResult.
func (s SQLRoleAssignmentListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleDefinitionListResult.
func (s SQLRoleDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLRoleDefinitionResource.
func (s SQLRoleDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "assignableScopes", s.AssignableScopes)
	populate(objectMap, "permissions", s.Permissions)
	populate(objectMap, "roleName", s.RoleName)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureCreateUpdateParameters.
func (s SQLStoredProcedureCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureGetResults.
func (s SQLStoredProcedureGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLStoredProcedureListResult.
func (s SQLStoredProcedureListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerCreateUpdateParameters.
func (s SQLTriggerCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerGetResults.
func (s SQLTriggerGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLTriggerListResult.
func (s SQLTriggerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionCreateUpdateParameters.
func (s SQLUserDefinedFunctionCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionGetResults.
func (s SQLUserDefinedFunctionGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SQLUserDefinedFunctionListResult.
func (s SQLUserDefinedFunctionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResource.
func (s ServiceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceResource.
func (s *ServiceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			s.Properties, err = unmarshalServiceResourcePropertiesClassification(val)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceListResult.
func (s ServiceResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// GetServiceResourceProperties implements the ServiceResourcePropertiesClassification interface for type ServiceResourceProperties.
func (s *ServiceResourceProperties) GetServiceResourceProperties() *ServiceResourceProperties {
	return s
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceProperties.
func (s ServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", s.CreationTime)
	populate(objectMap, "instanceCount", s.InstanceCount)
	populate(objectMap, "instanceSize", s.InstanceSize)
	objectMap["serviceType"] = s.ServiceType
	populate(objectMap, "status", s.Status)
	if s.AdditionalProperties != nil {
		for key, val := range s.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceResourceProperties.
func (s *ServiceResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &s.CreationTime)
			delete(rawMsg, key)
		case "instanceCount":
			err = unpopulate(val, &s.InstanceCount)
			delete(rawMsg, key)
		case "instanceSize":
			err = unpopulate(val, &s.InstanceSize)
			delete(rawMsg, key)
		case "serviceType":
			err = unpopulate(val, &s.ServiceType)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		default:
			if s.AdditionalProperties == nil {
				s.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				s.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SpatialSpec.
func (s SpatialSpec) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "path", s.Path)
	populate(objectMap, "types", s.Types)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TableCreateUpdateParameters.
func (t TableCreateUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TableGetResults.
func (t TableGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TableListResult.
func (t TableListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsGetResults.
func (t ThroughputSettingsGetResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ThroughputSettingsUpdateParameters.
func (t ThroughputSettingsUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "identity", t.Identity)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "properties", t.Properties)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKey.
func (u UniqueKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "paths", u.Paths)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UniqueKeyPolicy.
func (u UniqueKeyPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "uniqueKeys", u.UniqueKeys)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UsagesResult.
func (u UsagesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray(m map[string]interface{}, k string, b []byte, f runtime.Base64Encoding) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = runtime.EncodeByteArray(b, f)
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
