//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement"
)

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/BillingAccountQuery.json
func ExampleQueryClient_Usage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewQueryClient(cred, nil)
	res, err := client.Usage(ctx,
		"<scope>",
		armcostmanagement.QueryDefinition{
			Type: armcostmanagement.ExportType("Usage").ToPtr(),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimension: &armcostmanagement.QueryComparisonExpression{
										Name:     to.StringPtr("<name>"),
										Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
										Values: []*string{
											to.StringPtr("East US"),
											to.StringPtr("West Europe")},
									},
								},
								{
									Tag: &armcostmanagement.QueryComparisonExpression{
										Name:     to.StringPtr("<name>"),
										Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
										Values: []*string{
											to.StringPtr("UAT"),
											to.StringPtr("Prod")},
									},
								}},
						},
						{
							Dimension: &armcostmanagement.QueryComparisonExpression{
								Name:     to.StringPtr("<name>"),
								Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
								Values: []*string{
									to.StringPtr("API")},
							},
						}},
				},
				Granularity: armcostmanagement.GranularityType("Daily").ToPtr(),
			},
			Timeframe: armcostmanagement.TimeframeType("MonthToDate").ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.QueryClientUsageResult)
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ExternalBillingAccountsQuery.json
func ExampleQueryClient_UsageByExternalCloudProviderType() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewQueryClient(cred, nil)
	res, err := client.UsageByExternalCloudProviderType(ctx,
		armcostmanagement.ExternalCloudProviderType("externalBillingAccounts"),
		"<external-cloud-provider-id>",
		armcostmanagement.QueryDefinition{
			Type: armcostmanagement.ExportType("Usage").ToPtr(),
			Dataset: &armcostmanagement.QueryDataset{
				Filter: &armcostmanagement.QueryFilter{
					And: []*armcostmanagement.QueryFilter{
						{
							Or: []*armcostmanagement.QueryFilter{
								{
									Dimension: &armcostmanagement.QueryComparisonExpression{
										Name:     to.StringPtr("<name>"),
										Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
										Values: []*string{
											to.StringPtr("East US"),
											to.StringPtr("West Europe")},
									},
								},
								{
									Tag: &armcostmanagement.QueryComparisonExpression{
										Name:     to.StringPtr("<name>"),
										Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
										Values: []*string{
											to.StringPtr("UAT"),
											to.StringPtr("Prod")},
									},
								}},
						},
						{
							Dimension: &armcostmanagement.QueryComparisonExpression{
								Name:     to.StringPtr("<name>"),
								Operator: armcostmanagement.QueryOperatorType("In").ToPtr(),
								Values: []*string{
									to.StringPtr("API")},
							},
						}},
				},
				Granularity: armcostmanagement.GranularityType("Daily").ToPtr(),
			},
			Timeframe: armcostmanagement.TimeframeType("MonthToDate").ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.QueryClientUsageByExternalCloudProviderTypeResult)
}
