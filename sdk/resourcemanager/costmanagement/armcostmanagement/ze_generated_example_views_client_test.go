//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/costmanagement/armcostmanagement"
)

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewList.json
func ExampleViewsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewListByResourceGroup.json
func ExampleViewsClient_ListByScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	pager := client.ListByScope("<scope>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateView.json
func ExampleViewsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	res, err := client.Get(ctx,
		"<view-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ViewsClientGetResult)
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewCreateOrUpdate.json
func ExampleViewsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<view-name>",
		armcostmanagement.View{
			ETag: to.StringPtr("<etag>"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: armcostmanagement.AccumulatedType("true").ToPtr(),
				Chart:       armcostmanagement.ChartType("Table").ToPtr(),
				DisplayName: to.StringPtr("<display-name>"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    armcostmanagement.KpiType("Forecast").ToPtr(),
						Enabled: to.BoolPtr(true),
					},
					{
						Type:    armcostmanagement.KpiType("Budget").ToPtr(),
						Enabled: to.BoolPtr(true),
						ID:      to.StringPtr("<id>"),
					}},
				Metric: armcostmanagement.MetricType("ActualCost").ToPtr(),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("Dimension").ToPtr(),
					},
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("Dimension").ToPtr(),
					},
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("TagKey").ToPtr(),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: armcostmanagement.ReportType("Usage").ToPtr(),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.StringPtr("<name>"),
								Function: armcostmanagement.FunctionType("Sum").ToPtr(),
							},
						},
						Granularity: armcostmanagement.ReportGranularityType("Daily").ToPtr(),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.StringPtr("<name>"),
								Direction: armcostmanagement.ReportConfigSortingDirection("Ascending").ToPtr(),
							}},
					},
					Timeframe: armcostmanagement.ReportTimeframeType("MonthToDate").ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ViewsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/PrivateViewDelete.json
func ExampleViewsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	_, err = client.Delete(ctx,
		"<view-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewByResourceGroup.json
func ExampleViewsClient_GetByScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	res, err := client.GetByScope(ctx,
		"<scope>",
		"<view-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ViewsClientGetByScopeResult)
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewCreateOrUpdateByResourceGroup.json
func ExampleViewsClient_CreateOrUpdateByScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	res, err := client.CreateOrUpdateByScope(ctx,
		"<scope>",
		"<view-name>",
		armcostmanagement.View{
			ETag: to.StringPtr("<etag>"),
			Properties: &armcostmanagement.ViewProperties{
				Accumulated: armcostmanagement.AccumulatedType("true").ToPtr(),
				Chart:       armcostmanagement.ChartType("Table").ToPtr(),
				DisplayName: to.StringPtr("<display-name>"),
				Kpis: []*armcostmanagement.KpiProperties{
					{
						Type:    armcostmanagement.KpiType("Forecast").ToPtr(),
						Enabled: to.BoolPtr(true),
					},
					{
						Type:    armcostmanagement.KpiType("Budget").ToPtr(),
						Enabled: to.BoolPtr(true),
						ID:      to.StringPtr("<id>"),
					}},
				Metric: armcostmanagement.MetricType("ActualCost").ToPtr(),
				Pivots: []*armcostmanagement.PivotProperties{
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("Dimension").ToPtr(),
					},
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("Dimension").ToPtr(),
					},
					{
						Name: to.StringPtr("<name>"),
						Type: armcostmanagement.PivotType("TagKey").ToPtr(),
					}},
				Query: &armcostmanagement.ReportConfigDefinition{
					Type: armcostmanagement.ReportType("Usage").ToPtr(),
					DataSet: &armcostmanagement.ReportConfigDataset{
						Aggregation: map[string]*armcostmanagement.ReportConfigAggregation{
							"totalCost": {
								Name:     to.StringPtr("<name>"),
								Function: armcostmanagement.FunctionType("Sum").ToPtr(),
							},
						},
						Granularity: armcostmanagement.ReportGranularityType("Daily").ToPtr(),
						Grouping:    []*armcostmanagement.ReportConfigGrouping{},
						Sorting: []*armcostmanagement.ReportConfigSorting{
							{
								Name:      to.StringPtr("<name>"),
								Direction: armcostmanagement.ReportConfigSortingDirection("Ascending").ToPtr(),
							}},
					},
					Timeframe: armcostmanagement.ReportTimeframeType("MonthToDate").ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ViewsClientCreateOrUpdateByScopeResult)
}

// x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2021-10-01/examples/ViewDeleteByResourceGroup.json
func ExampleViewsClient_DeleteByScope() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armcostmanagement.NewViewsClient(cred, nil)
	_, err = client.DeleteByScope(ctx,
		"<scope>",
		"<view-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
