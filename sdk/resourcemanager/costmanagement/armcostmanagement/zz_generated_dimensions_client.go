//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// DimensionsClient contains the methods for the Dimensions group.
// Don't use this type directly, use NewDimensionsClient() instead.
type DimensionsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewDimensionsClient creates a new instance of DimensionsClient with the specified values.
func NewDimensionsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *DimensionsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &DimensionsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// ByExternalCloudProviderType - Lists the dimensions by the external cloud provider type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DimensionsClient) ByExternalCloudProviderType(ctx context.Context, externalCloudProviderType ExternalCloudProviderType, externalCloudProviderID string, options *DimensionsByExternalCloudProviderTypeOptions) (DimensionsByExternalCloudProviderTypeResponse, error) {
	req, err := client.byExternalCloudProviderTypeCreateRequest(ctx, externalCloudProviderType, externalCloudProviderID, options)
	if err != nil {
		return DimensionsByExternalCloudProviderTypeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DimensionsByExternalCloudProviderTypeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DimensionsByExternalCloudProviderTypeResponse{}, client.byExternalCloudProviderTypeHandleError(resp)
	}
	return client.byExternalCloudProviderTypeHandleResponse(resp)
}

// byExternalCloudProviderTypeCreateRequest creates the ByExternalCloudProviderType request.
func (client *DimensionsClient) byExternalCloudProviderTypeCreateRequest(ctx context.Context, externalCloudProviderType ExternalCloudProviderType, externalCloudProviderID string, options *DimensionsByExternalCloudProviderTypeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/dimensions"
	if externalCloudProviderType == "" {
		return nil, errors.New("parameter externalCloudProviderType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{externalCloudProviderType}", url.PathEscape(string(externalCloudProviderType)))
	if externalCloudProviderID == "" {
		return nil, errors.New("parameter externalCloudProviderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{externalCloudProviderId}", url.PathEscape(externalCloudProviderID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// byExternalCloudProviderTypeHandleResponse handles the ByExternalCloudProviderType response.
func (client *DimensionsClient) byExternalCloudProviderTypeHandleResponse(resp *http.Response) (DimensionsByExternalCloudProviderTypeResponse, error) {
	result := DimensionsByExternalCloudProviderTypeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DimensionsListResult); err != nil {
		return DimensionsByExternalCloudProviderTypeResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// byExternalCloudProviderTypeHandleError handles the ByExternalCloudProviderType error response.
func (client *DimensionsClient) byExternalCloudProviderTypeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Lists the dimensions by the defined scope.
// If the operation fails it returns the *ErrorResponse error type.
func (client *DimensionsClient) List(ctx context.Context, scope string, options *DimensionsListOptions) (DimensionsListResponse, error) {
	req, err := client.listCreateRequest(ctx, scope, options)
	if err != nil {
		return DimensionsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DimensionsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return DimensionsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *DimensionsClient) listCreateRequest(ctx context.Context, scope string, options *DimensionsListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/dimensions"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DimensionsClient) listHandleResponse(resp *http.Response) (DimensionsListResponse, error) {
	result := DimensionsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DimensionsListResult); err != nil {
		return DimensionsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *DimensionsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
