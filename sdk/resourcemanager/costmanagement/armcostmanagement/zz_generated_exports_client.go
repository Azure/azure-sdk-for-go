//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ExportsClient contains the methods for the Exports group.
// Don't use this type directly, use NewExportsClient() instead.
type ExportsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewExportsClient creates a new instance of ExportsClient with the specified values.
func NewExportsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ExportsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ExportsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - The operation to create or update a export. Update operation requires latest eTag to be set in the request. You may obtain the latest
// eTag by performing a get operation. Create operation does not
// require eTag.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) CreateOrUpdate(ctx context.Context, scope string, exportName string, parameters Export, options *ExportsCreateOrUpdateOptions) (ExportsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, scope, exportName, parameters, options)
	if err != nil {
		return ExportsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return ExportsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ExportsClient) createOrUpdateCreateRequest(ctx context.Context, scope string, exportName string, parameters Export, options *ExportsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if exportName == "" {
		return nil, errors.New("parameter exportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{exportName}", url.PathEscape(exportName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ExportsClient) createOrUpdateHandleResponse(resp *http.Response) (ExportsCreateOrUpdateResponse, error) {
	result := ExportsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Export); err != nil {
		return ExportsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *ExportsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - The operation to delete a export.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) Delete(ctx context.Context, scope string, exportName string, options *ExportsDeleteOptions) (ExportsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, scope, exportName, options)
	if err != nil {
		return ExportsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExportsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return ExportsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ExportsClient) deleteCreateRequest(ctx context.Context, scope string, exportName string, options *ExportsDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if exportName == "" {
		return nil, errors.New("parameter exportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{exportName}", url.PathEscape(exportName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ExportsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Execute - The operation to execute an export.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) Execute(ctx context.Context, scope string, exportName string, options *ExportsExecuteOptions) (ExportsExecuteResponse, error) {
	req, err := client.executeCreateRequest(ctx, scope, exportName, options)
	if err != nil {
		return ExportsExecuteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsExecuteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExportsExecuteResponse{}, client.executeHandleError(resp)
	}
	return ExportsExecuteResponse{RawResponse: resp}, nil
}

// executeCreateRequest creates the Execute request.
func (client *ExportsClient) executeCreateRequest(ctx context.Context, scope string, exportName string, options *ExportsExecuteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}/run"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if exportName == "" {
		return nil, errors.New("parameter exportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{exportName}", url.PathEscape(exportName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// executeHandleError handles the Execute error response.
func (client *ExportsClient) executeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - The operation to get the export for the defined scope by export name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) Get(ctx context.Context, scope string, exportName string, options *ExportsGetOptions) (ExportsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, exportName, options)
	if err != nil {
		return ExportsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExportsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ExportsClient) getCreateRequest(ctx context.Context, scope string, exportName string, options *ExportsGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if exportName == "" {
		return nil, errors.New("parameter exportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{exportName}", url.PathEscape(exportName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ExportsClient) getHandleResponse(resp *http.Response) (ExportsGetResponse, error) {
	result := ExportsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Export); err != nil {
		return ExportsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ExportsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetExecutionHistory - The operation to get the execution history of an export for the defined scope and export name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) GetExecutionHistory(ctx context.Context, scope string, exportName string, options *ExportsGetExecutionHistoryOptions) (ExportsGetExecutionHistoryResponse, error) {
	req, err := client.getExecutionHistoryCreateRequest(ctx, scope, exportName, options)
	if err != nil {
		return ExportsGetExecutionHistoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsGetExecutionHistoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExportsGetExecutionHistoryResponse{}, client.getExecutionHistoryHandleError(resp)
	}
	return client.getExecutionHistoryHandleResponse(resp)
}

// getExecutionHistoryCreateRequest creates the GetExecutionHistory request.
func (client *ExportsClient) getExecutionHistoryCreateRequest(ctx context.Context, scope string, exportName string, options *ExportsGetExecutionHistoryOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}/runHistory"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if exportName == "" {
		return nil, errors.New("parameter exportName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{exportName}", url.PathEscape(exportName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getExecutionHistoryHandleResponse handles the GetExecutionHistory response.
func (client *ExportsClient) getExecutionHistoryHandleResponse(resp *http.Response) (ExportsGetExecutionHistoryResponse, error) {
	result := ExportsGetExecutionHistoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExportExecutionListResult); err != nil {
		return ExportsGetExecutionHistoryResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getExecutionHistoryHandleError handles the GetExecutionHistory error response.
func (client *ExportsClient) getExecutionHistoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - The operation to list all exports at the given scope.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ExportsClient) List(ctx context.Context, scope string, options *ExportsListOptions) (ExportsListResponse, error) {
	req, err := client.listCreateRequest(ctx, scope, options)
	if err != nil {
		return ExportsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExportsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExportsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *ExportsClient) listCreateRequest(ctx context.Context, scope string, options *ExportsListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/exports"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ExportsClient) listHandleResponse(resp *http.Response) (ExportsListResponse, error) {
	result := ExportsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExportListResult); err != nil {
		return ExportsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *ExportsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
