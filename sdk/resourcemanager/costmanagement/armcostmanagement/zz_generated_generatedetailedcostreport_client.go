//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// GenerateDetailedCostReportClient contains the methods for the GenerateDetailedCostReport group.
// Don't use this type directly, use NewGenerateDetailedCostReportClient() instead.
type GenerateDetailedCostReportClient struct {
	ep string
	pl runtime.Pipeline
}

// NewGenerateDetailedCostReportClient creates a new instance of GenerateDetailedCostReportClient with the specified values.
func NewGenerateDetailedCostReportClient(credential azcore.TokenCredential, options *arm.ClientOptions) *GenerateDetailedCostReportClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &GenerateDetailedCostReportClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginCreateOperation - Generates the detailed cost report for provided date range, billing period(Only enterprise customers) or Invoice Id asynchronously
// at a certain scope. Call returns a 202 with header
// Azure-Consumption-AsyncOperation providing a link to the operation created. A call on the operation will provide the status and if the operation is completed
// the blob file where generated detailed
// cost report is being stored.
// If the operation fails it returns the *GenerateDetailedCostReportErrorResponse error type.
func (client *GenerateDetailedCostReportClient) BeginCreateOperation(ctx context.Context, scope string, parameters GenerateDetailedCostReportDefinition, options *GenerateDetailedCostReportBeginCreateOperationOptions) (GenerateDetailedCostReportCreateOperationPollerResponse, error) {
	resp, err := client.createOperation(ctx, scope, parameters, options)
	if err != nil {
		return GenerateDetailedCostReportCreateOperationPollerResponse{}, err
	}
	result := GenerateDetailedCostReportCreateOperationPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("GenerateDetailedCostReportClient.CreateOperation", "location", resp, client.pl, client.createOperationHandleError)
	if err != nil {
		return GenerateDetailedCostReportCreateOperationPollerResponse{}, err
	}
	result.Poller = &GenerateDetailedCostReportCreateOperationPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOperation - Generates the detailed cost report for provided date range, billing period(Only enterprise customers) or Invoice Id asynchronously
// at a certain scope. Call returns a 202 with header
// Azure-Consumption-AsyncOperation providing a link to the operation created. A call on the operation will provide the status and if the operation is completed
// the blob file where generated detailed
// cost report is being stored.
// If the operation fails it returns the *GenerateDetailedCostReportErrorResponse error type.
func (client *GenerateDetailedCostReportClient) createOperation(ctx context.Context, scope string, parameters GenerateDetailedCostReportDefinition, options *GenerateDetailedCostReportBeginCreateOperationOptions) (*http.Response, error) {
	req, err := client.createOperationCreateRequest(ctx, scope, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOperationHandleError(resp)
	}
	return resp, nil
}

// createOperationCreateRequest creates the CreateOperation request.
func (client *GenerateDetailedCostReportClient) createOperationCreateRequest(ctx context.Context, scope string, parameters GenerateDetailedCostReportDefinition, options *GenerateDetailedCostReportBeginCreateOperationOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/generateDetailedCostReport"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOperationHandleError handles the CreateOperation error response.
func (client *GenerateDetailedCostReportClient) createOperationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := GenerateDetailedCostReportErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
