//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcostmanagement

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// QueryClient contains the methods for the Query group.
// Don't use this type directly, use NewQueryClient() instead.
type QueryClient struct {
	ep string
	pl runtime.Pipeline
}

// NewQueryClient creates a new instance of QueryClient with the specified values.
func NewQueryClient(credential azcore.TokenCredential, options *arm.ClientOptions) *QueryClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &QueryClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Usage - Query the usage data for scope defined.
// If the operation fails it returns the *ErrorResponse error type.
func (client *QueryClient) Usage(ctx context.Context, scope string, parameters QueryDefinition, options *QueryUsageOptions) (QueryUsageResponse, error) {
	req, err := client.usageCreateRequest(ctx, scope, parameters, options)
	if err != nil {
		return QueryUsageResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueryUsageResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return QueryUsageResponse{}, client.usageHandleError(resp)
	}
	return client.usageHandleResponse(resp)
}

// usageCreateRequest creates the Usage request.
func (client *QueryClient) usageCreateRequest(ctx context.Context, scope string, parameters QueryDefinition, options *QueryUsageOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.CostManagement/query"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// usageHandleResponse handles the Usage response.
func (client *QueryClient) usageHandleResponse(resp *http.Response) (QueryUsageResponse, error) {
	result := QueryUsageResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResult); err != nil {
		return QueryUsageResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// usageHandleError handles the Usage error response.
func (client *QueryClient) usageHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UsageByExternalCloudProviderType - Query the usage data for external cloud provider type defined.
// If the operation fails it returns the *ErrorResponse error type.
func (client *QueryClient) UsageByExternalCloudProviderType(ctx context.Context, externalCloudProviderType ExternalCloudProviderType, externalCloudProviderID string, parameters QueryDefinition, options *QueryUsageByExternalCloudProviderTypeOptions) (QueryUsageByExternalCloudProviderTypeResponse, error) {
	req, err := client.usageByExternalCloudProviderTypeCreateRequest(ctx, externalCloudProviderType, externalCloudProviderID, parameters, options)
	if err != nil {
		return QueryUsageByExternalCloudProviderTypeResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return QueryUsageByExternalCloudProviderTypeResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return QueryUsageByExternalCloudProviderTypeResponse{}, client.usageByExternalCloudProviderTypeHandleError(resp)
	}
	return client.usageByExternalCloudProviderTypeHandleResponse(resp)
}

// usageByExternalCloudProviderTypeCreateRequest creates the UsageByExternalCloudProviderType request.
func (client *QueryClient) usageByExternalCloudProviderTypeCreateRequest(ctx context.Context, externalCloudProviderType ExternalCloudProviderType, externalCloudProviderID string, parameters QueryDefinition, options *QueryUsageByExternalCloudProviderTypeOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/query"
	if externalCloudProviderType == "" {
		return nil, errors.New("parameter externalCloudProviderType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{externalCloudProviderType}", url.PathEscape(string(externalCloudProviderType)))
	if externalCloudProviderID == "" {
		return nil, errors.New("parameter externalCloudProviderID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{externalCloudProviderId}", url.PathEscape(externalCloudProviderID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// usageByExternalCloudProviderTypeHandleResponse handles the UsageByExternalCloudProviderType response.
func (client *QueryClient) usageByExternalCloudProviderTypeHandleResponse(resp *http.Response) (QueryUsageByExternalCloudProviderTypeResponse, error) {
	result := QueryUsageByExternalCloudProviderTypeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResult); err != nil {
		return QueryUsageByExternalCloudProviderTypeResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// usageByExternalCloudProviderTypeHandleError handles the UsageByExternalCloudProviderType error response.
func (client *QueryClient) usageByExternalCloudProviderTypeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
