//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomproviders

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// Association - The resource definition of this association.
type Association struct {
	// The properties of the association.
	Properties *AssociationProperties `json:"properties,omitempty"`

	// READ-ONLY; The association id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The association name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The association type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// AssociationProperties - The properties of the association.
type AssociationProperties struct {
	// The REST resource instance of the target resource for this association.
	TargetResourceID *string `json:"targetResourceId,omitempty"`

	// READ-ONLY; The provisioning state of the association.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// AssociationsBeginCreateOrUpdateOptions contains the optional parameters for the Associations.BeginCreateOrUpdate method.
type AssociationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AssociationsBeginDeleteOptions contains the optional parameters for the Associations.BeginDelete method.
type AssociationsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// AssociationsGetOptions contains the optional parameters for the Associations.Get method.
type AssociationsGetOptions struct {
	// placeholder for future optional parameters
}

// AssociationsList - List of associations.
type AssociationsList struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The array of associations.
	Value []*Association `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AssociationsList.
func (a AssociationsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AssociationsListAllOptions contains the optional parameters for the Associations.ListAll method.
type AssociationsListAllOptions struct {
	// placeholder for future optional parameters
}

// CustomRPActionRouteDefinition - The route definition for an action implemented by the custom resource provider.
type CustomRPActionRouteDefinition struct {
	CustomRPRouteDefinition
	// The routing types that are supported for action requests.
	RoutingType *ActionRouting `json:"routingType,omitempty"`
}

// CustomRPManifest - A manifest file that defines the custom resource provider resources.
type CustomRPManifest struct {
	Resource
	// The manifest for the custom resource provider
	Properties *CustomRPManifestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomRPManifest.
func (c CustomRPManifest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CustomRPManifestProperties - The manifest for the custom resource provider
type CustomRPManifestProperties struct {
	// A list of actions that the custom resource provider implements.
	Actions []*CustomRPActionRouteDefinition `json:"actions,omitempty"`

	// A list of resource types that the custom resource provider implements.
	ResourceTypes []*CustomRPResourceTypeRouteDefinition `json:"resourceTypes,omitempty"`

	// A list of validations to run on the custom resource provider's requests.
	Validations []*CustomRPValidations `json:"validations,omitempty"`

	// READ-ONLY; The provisioning state of the resource provider.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomRPManifestProperties.
func (c CustomRPManifestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", c.Actions)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "resourceTypes", c.ResourceTypes)
	populate(objectMap, "validations", c.Validations)
	return json.Marshal(objectMap)
}

// CustomRPResourceTypeRouteDefinition - The route definition for a resource implemented by the custom resource provider.
type CustomRPResourceTypeRouteDefinition struct {
	CustomRPRouteDefinition
	// The routing types that are supported for resource requests.
	RoutingType *ResourceTypeRouting `json:"routingType,omitempty"`
}

// CustomRPRouteDefinition - A route definition that defines an action or resource that can be interacted with through the custom resource provider.
type CustomRPRouteDefinition struct {
	// REQUIRED; The route definition endpoint URI that the custom resource provider will proxy requests to. This can be in the form of a flat URI (e.g. 'https://testendpoint/')
	// or can specify to route via a path
	// (e.g. 'https://testendpoint/{requestPath}')
	Endpoint *string `json:"endpoint,omitempty"`

	// REQUIRED; The name of the route definition. This becomes the name for the ARM extension (e.g.
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomProviders/resourceProviders/{resourceProviderName}/{name}')
	Name *string `json:"name,omitempty"`
}

// CustomRPValidations - A validation to apply on custom resource provider requests.
type CustomRPValidations struct {
	// REQUIRED; A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
	Specification *string `json:"specification,omitempty"`

	// The type of validation to run against a matching request.
	ValidationType *ValidationType `json:"validationType,omitempty"`
}

// CustomResourceProviderBeginCreateOrUpdateOptions contains the optional parameters for the CustomResourceProvider.BeginCreateOrUpdate method.
type CustomResourceProviderBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomResourceProviderBeginDeleteOptions contains the optional parameters for the CustomResourceProvider.BeginDelete method.
type CustomResourceProviderBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// CustomResourceProviderGetOptions contains the optional parameters for the CustomResourceProvider.Get method.
type CustomResourceProviderGetOptions struct {
	// placeholder for future optional parameters
}

// CustomResourceProviderListByResourceGroupOptions contains the optional parameters for the CustomResourceProvider.ListByResourceGroup method.
type CustomResourceProviderListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// CustomResourceProviderListBySubscriptionOptions contains the optional parameters for the CustomResourceProvider.ListBySubscription method.
type CustomResourceProviderListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// CustomResourceProviderUpdateOptions contains the optional parameters for the CustomResourceProvider.Update method.
type CustomResourceProviderUpdateOptions struct {
	// placeholder for future optional parameters
}

// ErrorDefinition - Error definition.
type ErrorDefinition struct {
	// READ-ONLY; Service specific error code which serves as the substatus for the HTTP error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Internal error details.
	Details []*ErrorDefinition `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Description of the error.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDefinition.
func (e ErrorDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// ErrorResponse - Error response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error details.
	InnerError *ErrorDefinition `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ListByCustomRPManifest - List of custom resource providers.
type ListByCustomRPManifest struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The array of custom resource provider manifests.
	Value []*CustomRPManifest `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ListByCustomRPManifest.
func (l ListByCustomRPManifest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Resource - The resource definition.
type Resource struct {
	// REQUIRED; Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

// ResourceProviderOperation - Supported operations of this resource provider.
type ResourceProviderOperation struct {
	// Display metadata associated with the operation.
	Display *ResourceProviderOperationDisplay `json:"display,omitempty"`

	// Operation name, in format of {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// ResourceProviderOperationDisplay - Display metadata associated with the operation.
type ResourceProviderOperationDisplay struct {
	// Description of this operation.
	Description *string `json:"description,omitempty"`

	// Type of operation: get, read, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Resource provider: Microsoft Custom Providers.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// ResourceProviderOperationList - Results of the request to list operations.
type ResourceProviderOperationList struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// List of operations supported by this resource provider.
	Value []*ResourceProviderOperation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderOperationList.
func (r ResourceProviderOperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceProvidersUpdate - custom resource provider update information.
type ResourceProvidersUpdate struct {
	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProvidersUpdate.
func (r ResourceProvidersUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
