//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcustomproviders

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AssociationsCreateOrUpdatePollerResponse contains the response from method Associations.CreateOrUpdate.
type AssociationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AssociationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AssociationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AssociationsCreateOrUpdateResponse, error) {
	respType := AssociationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Association)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AssociationsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AssociationsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AssociationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AssociationsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &AssociationsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AssociationsCreateOrUpdateResponse contains the response from method Associations.CreateOrUpdate.
type AssociationsCreateOrUpdateResponse struct {
	AssociationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssociationsCreateOrUpdateResult contains the result from method Associations.CreateOrUpdate.
type AssociationsCreateOrUpdateResult struct {
	Association
}

// AssociationsDeletePollerResponse contains the response from method Associations.Delete.
type AssociationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AssociationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AssociationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AssociationsDeleteResponse, error) {
	respType := AssociationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AssociationsDeletePollerResponse from the provided client and resume token.
func (l *AssociationsDeletePollerResponse) Resume(ctx context.Context, client *AssociationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AssociationsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &AssociationsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AssociationsDeleteResponse contains the response from method Associations.Delete.
type AssociationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssociationsGetResponse contains the response from method Associations.Get.
type AssociationsGetResponse struct {
	AssociationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssociationsGetResult contains the result from method Associations.Get.
type AssociationsGetResult struct {
	Association
}

// AssociationsListAllResponse contains the response from method Associations.ListAll.
type AssociationsListAllResponse struct {
	AssociationsListAllResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssociationsListAllResult contains the result from method Associations.ListAll.
type AssociationsListAllResult struct {
	AssociationsList
}

// CustomResourceProviderCreateOrUpdatePollerResponse contains the response from method CustomResourceProvider.CreateOrUpdate.
type CustomResourceProviderCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomResourceProviderCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomResourceProviderCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomResourceProviderCreateOrUpdateResponse, error) {
	respType := CustomResourceProviderCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CustomRPManifest)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomResourceProviderCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *CustomResourceProviderCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *CustomResourceProviderClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomResourceProviderClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &CustomResourceProviderCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomResourceProviderCreateOrUpdateResponse contains the response from method CustomResourceProvider.CreateOrUpdate.
type CustomResourceProviderCreateOrUpdateResponse struct {
	CustomResourceProviderCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderCreateOrUpdateResult contains the result from method CustomResourceProvider.CreateOrUpdate.
type CustomResourceProviderCreateOrUpdateResult struct {
	CustomRPManifest
}

// CustomResourceProviderDeletePollerResponse contains the response from method CustomResourceProvider.Delete.
type CustomResourceProviderDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomResourceProviderDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomResourceProviderDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomResourceProviderDeleteResponse, error) {
	respType := CustomResourceProviderDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomResourceProviderDeletePollerResponse from the provided client and resume token.
func (l *CustomResourceProviderDeletePollerResponse) Resume(ctx context.Context, client *CustomResourceProviderClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomResourceProviderClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &CustomResourceProviderDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomResourceProviderDeleteResponse contains the response from method CustomResourceProvider.Delete.
type CustomResourceProviderDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderGetResponse contains the response from method CustomResourceProvider.Get.
type CustomResourceProviderGetResponse struct {
	CustomResourceProviderGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderGetResult contains the result from method CustomResourceProvider.Get.
type CustomResourceProviderGetResult struct {
	CustomRPManifest
}

// CustomResourceProviderListByResourceGroupResponse contains the response from method CustomResourceProvider.ListByResourceGroup.
type CustomResourceProviderListByResourceGroupResponse struct {
	CustomResourceProviderListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderListByResourceGroupResult contains the result from method CustomResourceProvider.ListByResourceGroup.
type CustomResourceProviderListByResourceGroupResult struct {
	ListByCustomRPManifest
}

// CustomResourceProviderListBySubscriptionResponse contains the response from method CustomResourceProvider.ListBySubscription.
type CustomResourceProviderListBySubscriptionResponse struct {
	CustomResourceProviderListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderListBySubscriptionResult contains the result from method CustomResourceProvider.ListBySubscription.
type CustomResourceProviderListBySubscriptionResult struct {
	ListByCustomRPManifest
}

// CustomResourceProviderUpdateResponse contains the response from method CustomResourceProvider.Update.
type CustomResourceProviderUpdateResponse struct {
	CustomResourceProviderUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomResourceProviderUpdateResult contains the result from method CustomResourceProvider.Update.
type CustomResourceProviderUpdateResult struct {
	CustomRPManifest
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	ResourceProviderOperationList
}
