// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armdashboard.ClientFactory type.
type ServerFactory struct {
	// IntegrationFabricsServer contains the fakes for client IntegrationFabricsClient
	IntegrationFabricsServer IntegrationFabricsServer

	// ManagedDashboardsServer contains the fakes for client ManagedDashboardsClient
	ManagedDashboardsServer ManagedDashboardsServer

	// ManagedGrafanasServer contains the fakes for client ManagedGrafanasClient
	ManagedGrafanasServer ManagedGrafanasServer

	// ManagedPrivateEndpointModelsServer contains the fakes for client ManagedPrivateEndpointModelsClient
	ManagedPrivateEndpointModelsServer ManagedPrivateEndpointModelsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// PrivateEndpointConnectionsServer contains the fakes for client PrivateEndpointConnectionsClient
	PrivateEndpointConnectionsServer PrivateEndpointConnectionsServer

	// PrivateLinkResourcesServer contains the fakes for client PrivateLinkResourcesClient
	PrivateLinkResourcesServer PrivateLinkResourcesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armdashboard.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armdashboard.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                  *ServerFactory
	trMu                                 sync.Mutex
	trIntegrationFabricsServer           *IntegrationFabricsServerTransport
	trManagedDashboardsServer            *ManagedDashboardsServerTransport
	trManagedGrafanasServer              *ManagedGrafanasServerTransport
	trManagedPrivateEndpointModelsServer *ManagedPrivateEndpointModelsServerTransport
	trOperationsServer                   *OperationsServerTransport
	trPrivateEndpointConnectionsServer   *PrivateEndpointConnectionsServerTransport
	trPrivateLinkResourcesServer         *PrivateLinkResourcesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "IntegrationFabricsClient":
		initServer(s, &s.trIntegrationFabricsServer, func() *IntegrationFabricsServerTransport {
			return NewIntegrationFabricsServerTransport(&s.srv.IntegrationFabricsServer)
		})
		resp, err = s.trIntegrationFabricsServer.Do(req)
	case "ManagedDashboardsClient":
		initServer(s, &s.trManagedDashboardsServer, func() *ManagedDashboardsServerTransport {
			return NewManagedDashboardsServerTransport(&s.srv.ManagedDashboardsServer)
		})
		resp, err = s.trManagedDashboardsServer.Do(req)
	case "ManagedGrafanasClient":
		initServer(s, &s.trManagedGrafanasServer, func() *ManagedGrafanasServerTransport {
			return NewManagedGrafanasServerTransport(&s.srv.ManagedGrafanasServer)
		})
		resp, err = s.trManagedGrafanasServer.Do(req)
	case "ManagedPrivateEndpointModelsClient":
		initServer(s, &s.trManagedPrivateEndpointModelsServer, func() *ManagedPrivateEndpointModelsServerTransport {
			return NewManagedPrivateEndpointModelsServerTransport(&s.srv.ManagedPrivateEndpointModelsServer)
		})
		resp, err = s.trManagedPrivateEndpointModelsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "PrivateEndpointConnectionsClient":
		initServer(s, &s.trPrivateEndpointConnectionsServer, func() *PrivateEndpointConnectionsServerTransport {
			return NewPrivateEndpointConnectionsServerTransport(&s.srv.PrivateEndpointConnectionsServer)
		})
		resp, err = s.trPrivateEndpointConnectionsServer.Do(req)
	case "PrivateLinkResourcesClient":
		initServer(s, &s.trPrivateLinkResourcesServer, func() *PrivateLinkResourcesServerTransport {
			return NewPrivateLinkResourcesServerTransport(&s.srv.PrivateLinkResourcesServer)
		})
		resp, err = s.trPrivateLinkResourcesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
