//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdashboard

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// GrafanaClientCreatePollerResponse contains the response from method GrafanaClient.Create.
type GrafanaClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GrafanaClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l GrafanaClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GrafanaClientCreateResponse, error) {
	respType := GrafanaClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.GrafanaResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a GrafanaClientCreatePollerResponse from the provided client and resume token.
func (l *GrafanaClientCreatePollerResponse) Resume(ctx context.Context, client *GrafanaClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("GrafanaClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &GrafanaClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// GrafanaClientCreateResponse contains the response from method GrafanaClient.Create.
type GrafanaClientCreateResponse struct {
	GrafanaClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientCreateResult contains the result from method GrafanaClient.Create.
type GrafanaClientCreateResult struct {
	GrafanaResource
}

// GrafanaClientDeletePollerResponse contains the response from method GrafanaClient.Delete.
type GrafanaClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *GrafanaClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l GrafanaClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (GrafanaClientDeleteResponse, error) {
	respType := GrafanaClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a GrafanaClientDeletePollerResponse from the provided client and resume token.
func (l *GrafanaClientDeletePollerResponse) Resume(ctx context.Context, client *GrafanaClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("GrafanaClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &GrafanaClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// GrafanaClientDeleteResponse contains the response from method GrafanaClient.Delete.
type GrafanaClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientGetResponse contains the response from method GrafanaClient.Get.
type GrafanaClientGetResponse struct {
	GrafanaClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientGetResult contains the result from method GrafanaClient.Get.
type GrafanaClientGetResult struct {
	GrafanaResource
}

// GrafanaClientListByResourceGroupResponse contains the response from method GrafanaClient.ListByResourceGroup.
type GrafanaClientListByResourceGroupResponse struct {
	GrafanaClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientListByResourceGroupResult contains the result from method GrafanaClient.ListByResourceGroup.
type GrafanaClientListByResourceGroupResult struct {
	GrafanaResourceListResponse
}

// GrafanaClientListResponse contains the response from method GrafanaClient.List.
type GrafanaClientListResponse struct {
	GrafanaClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientListResult contains the result from method GrafanaClient.List.
type GrafanaClientListResult struct {
	GrafanaResourceListResponse
}

// GrafanaClientUpdateResponse contains the response from method GrafanaClient.Update.
type GrafanaClientUpdateResponse struct {
	GrafanaClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// GrafanaClientUpdateResult contains the result from method GrafanaClient.Update.
type GrafanaClientUpdateResult struct {
	GrafanaResource
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}
