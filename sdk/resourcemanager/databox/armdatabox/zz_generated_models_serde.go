//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabox

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// GetCopyLogDetails implements the CopyLogDetailsClassification interface for type AccountCopyLogDetails.
func (a *AccountCopyLogDetails) GetCopyLogDetails() *CopyLogDetails {
	return &CopyLogDetails{
		CopyLogDetailsType: a.CopyLogDetailsType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AccountCopyLogDetails.
func (a AccountCopyLogDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountName", a.AccountName)
	objectMap["copyLogDetailsType"] = ClassDiscriminatorDataBox
	populate(objectMap, "copyLogLink", a.CopyLogLink)
	populate(objectMap, "copyVerboseLogLink", a.CopyVerboseLogLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccountCopyLogDetails.
func (a *AccountCopyLogDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountName":
			err = unpopulate(val, &a.AccountName)
			delete(rawMsg, key)
		case "copyLogDetailsType":
			err = unpopulate(val, &a.CopyLogDetailsType)
			delete(rawMsg, key)
		case "copyLogLink":
			err = unpopulate(val, &a.CopyLogLink)
			delete(rawMsg, key)
		case "copyVerboseLogLink":
			err = unpopulate(val, &a.CopyVerboseLogLink)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccountCredentialDetails.
func (a AccountCredentialDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountConnectionString", a.AccountConnectionString)
	populate(objectMap, "accountName", a.AccountName)
	populate(objectMap, "dataAccountType", a.DataAccountType)
	populate(objectMap, "shareCredentialDetails", a.ShareCredentialDetails)
	return json.Marshal(objectMap)
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type AddressValidationProperties.
func (a *AddressValidationProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: a.ValidationType,
		Error:          a.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AddressValidationProperties.
func (a AddressValidationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alternateAddresses", a.AlternateAddresses)
	populate(objectMap, "error", a.Error)
	populate(objectMap, "validationStatus", a.ValidationStatus)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateAddress
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddressValidationProperties.
func (a *AddressValidationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "alternateAddresses":
			err = unpopulate(val, &a.AlternateAddresses)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &a.Error)
			delete(rawMsg, key)
		case "validationStatus":
			err = unpopulate(val, &a.ValidationStatus)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &a.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AvailableSKURequest.
func (a AvailableSKURequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "country", a.Country)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "skuNames", a.SKUNames)
	populate(objectMap, "transferType", a.TransferType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AvailableSKUsResult.
func (a AvailableSKUsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFileFilterDetails.
func (a AzureFileFilterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filePathList", a.FilePathList)
	populate(objectMap, "filePrefixList", a.FilePrefixList)
	populate(objectMap, "fileShareList", a.FileShareList)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BlobFilterDetails.
func (b BlobFilterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blobPathList", b.BlobPathList)
	populate(objectMap, "blobPrefixList", b.BlobPrefixList)
	populate(objectMap, "containerList", b.ContainerList)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CloudError.
func (c CloudError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", c.AdditionalInfo)
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// GetCommonJobDetails implements the CommonJobDetailsClassification interface for type CommonJobDetails.
func (c *CommonJobDetails) GetCommonJobDetails() *CommonJobDetails { return c }

// MarshalJSON implements the json.Marshaller interface for type CommonJobDetails.
func (c CommonJobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", c.Actions)
	populate(objectMap, "chainOfCustodySasKey", c.ChainOfCustodySasKey)
	populate(objectMap, "contactDetails", c.ContactDetails)
	populate(objectMap, "copyLogDetails", c.CopyLogDetails)
	populate(objectMap, "dataCenterCode", c.DataCenterCode)
	populate(objectMap, "dataExportDetails", c.DataExportDetails)
	populate(objectMap, "dataImportDetails", c.DataImportDetails)
	populate(objectMap, "datacenterAddress", c.DatacenterAddress)
	populate(objectMap, "deliveryPackage", c.DeliveryPackage)
	populate(objectMap, "expectedDataSizeInTeraBytes", c.ExpectedDataSizeInTeraBytes)
	objectMap["jobDetailsType"] = c.JobDetailsType
	populate(objectMap, "jobStages", c.JobStages)
	populate(objectMap, "keyEncryptionKey", c.KeyEncryptionKey)
	populate(objectMap, "lastMitigationActionOnJob", c.LastMitigationActionOnJob)
	populate(objectMap, "preferences", c.Preferences)
	populate(objectMap, "returnPackage", c.ReturnPackage)
	populate(objectMap, "reverseShipmentLabelSasKey", c.ReverseShipmentLabelSasKey)
	populate(objectMap, "shippingAddress", c.ShippingAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommonJobDetails.
func (c *CommonJobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			err = unpopulate(val, &c.Actions)
			delete(rawMsg, key)
		case "chainOfCustodySasKey":
			err = unpopulate(val, &c.ChainOfCustodySasKey)
			delete(rawMsg, key)
		case "contactDetails":
			err = unpopulate(val, &c.ContactDetails)
			delete(rawMsg, key)
		case "copyLogDetails":
			c.CopyLogDetails, err = unmarshalCopyLogDetailsClassificationArray(val)
			delete(rawMsg, key)
		case "dataCenterCode":
			err = unpopulate(val, &c.DataCenterCode)
			delete(rawMsg, key)
		case "dataExportDetails":
			err = unpopulate(val, &c.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &c.DataImportDetails)
			delete(rawMsg, key)
		case "datacenterAddress":
			c.DatacenterAddress, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "deliveryPackage":
			err = unpopulate(val, &c.DeliveryPackage)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &c.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "jobDetailsType":
			err = unpopulate(val, &c.JobDetailsType)
			delete(rawMsg, key)
		case "jobStages":
			err = unpopulate(val, &c.JobStages)
			delete(rawMsg, key)
		case "keyEncryptionKey":
			err = unpopulate(val, &c.KeyEncryptionKey)
			delete(rawMsg, key)
		case "lastMitigationActionOnJob":
			err = unpopulate(val, &c.LastMitigationActionOnJob)
			delete(rawMsg, key)
		case "preferences":
			err = unpopulate(val, &c.Preferences)
			delete(rawMsg, key)
		case "returnPackage":
			err = unpopulate(val, &c.ReturnPackage)
			delete(rawMsg, key)
		case "reverseShipmentLabelSasKey":
			err = unpopulate(val, &c.ReverseShipmentLabelSasKey)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &c.ShippingAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobSecrets implements the CommonJobSecretsClassification interface for type CommonJobSecrets.
func (c *CommonJobSecrets) GetCommonJobSecrets() *CommonJobSecrets { return c }

// GetCommonScheduleAvailabilityRequest implements the CommonScheduleAvailabilityRequestClassification interface for type
// CommonScheduleAvailabilityRequest.
func (c *CommonScheduleAvailabilityRequest) GetCommonScheduleAvailabilityRequest() *CommonScheduleAvailabilityRequest {
	return c
}

// MarshalJSON implements the json.Marshaller interface for type ContactDetails.
func (c ContactDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contactName", c.ContactName)
	populate(objectMap, "emailList", c.EmailList)
	populate(objectMap, "mobile", c.Mobile)
	populate(objectMap, "notificationPreference", c.NotificationPreference)
	populate(objectMap, "phone", c.Phone)
	populate(objectMap, "phoneExtension", c.PhoneExtension)
	return json.Marshal(objectMap)
}

// GetCopyLogDetails implements the CopyLogDetailsClassification interface for type CopyLogDetails.
func (c *CopyLogDetails) GetCopyLogDetails() *CopyLogDetails { return c }

// GetValidationRequest implements the ValidationRequestClassification interface for type CreateJobValidations.
func (c *CreateJobValidations) GetValidationRequest() *ValidationRequest {
	return &ValidationRequest{
		ValidationCategory:       c.ValidationCategory,
		IndividualRequestDetails: c.IndividualRequestDetails,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CreateJobValidations.
func (c CreateJobValidations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "individualRequestDetails", c.IndividualRequestDetails)
	objectMap["validationCategory"] = "JobCreationValidation"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateJobValidations.
func (c *CreateJobValidations) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "individualRequestDetails":
			c.IndividualRequestDetails, err = unmarshalValidationInputRequestClassificationArray(val)
			delete(rawMsg, key)
		case "validationCategory":
			err = unpopulate(val, &c.ValidationCategory)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type CreateOrderLimitForSubscriptionValidationRequest.
func (c *CreateOrderLimitForSubscriptionValidationRequest) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: c.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CreateOrderLimitForSubscriptionValidationRequest.
func (c CreateOrderLimitForSubscriptionValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deviceType", c.DeviceType)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateCreateOrderLimit
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateOrderLimitForSubscriptionValidationRequest.
func (c *CreateOrderLimitForSubscriptionValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceType":
			err = unpopulate(val, &c.DeviceType)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &c.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type CreateOrderLimitForSubscriptionValidationResponseProperties.
func (c *CreateOrderLimitForSubscriptionValidationResponseProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: c.ValidationType,
		Error:          c.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CreateOrderLimitForSubscriptionValidationResponseProperties.
func (c CreateOrderLimitForSubscriptionValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", c.Error)
	populate(objectMap, "status", c.Status)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateCreateOrderLimit
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateOrderLimitForSubscriptionValidationResponseProperties.
func (c *CreateOrderLimitForSubscriptionValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &c.Error)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &c.Status)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &c.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCopyLogDetails implements the CopyLogDetailsClassification interface for type CustomerDiskCopyLogDetails.
func (c *CustomerDiskCopyLogDetails) GetCopyLogDetails() *CopyLogDetails {
	return &CopyLogDetails{
		CopyLogDetailsType: c.CopyLogDetailsType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CustomerDiskCopyLogDetails.
func (c CustomerDiskCopyLogDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["copyLogDetailsType"] = ClassDiscriminatorDataBoxCustomerDisk
	populate(objectMap, "errorLogLink", c.ErrorLogLink)
	populate(objectMap, "serialNumber", c.SerialNumber)
	populate(objectMap, "verboseLogLink", c.VerboseLogLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomerDiskCopyLogDetails.
func (c *CustomerDiskCopyLogDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "copyLogDetailsType":
			err = unpopulate(val, &c.CopyLogDetailsType)
			delete(rawMsg, key)
		case "errorLogLink":
			err = unpopulate(val, &c.ErrorLogLink)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &c.SerialNumber)
			delete(rawMsg, key)
		case "verboseLogLink":
			err = unpopulate(val, &c.VerboseLogLink)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobDetails implements the CommonJobDetailsClassification interface for type CustomerDiskJobDetails.
func (c *CustomerDiskJobDetails) GetCommonJobDetails() *CommonJobDetails {
	return &CommonJobDetails{
		JobStages:                   c.JobStages,
		ContactDetails:              c.ContactDetails,
		ShippingAddress:             c.ShippingAddress,
		DeliveryPackage:             c.DeliveryPackage,
		ReturnPackage:               c.ReturnPackage,
		DataImportDetails:           c.DataImportDetails,
		DataExportDetails:           c.DataExportDetails,
		JobDetailsType:              c.JobDetailsType,
		Preferences:                 c.Preferences,
		CopyLogDetails:              c.CopyLogDetails,
		ReverseShipmentLabelSasKey:  c.ReverseShipmentLabelSasKey,
		ChainOfCustodySasKey:        c.ChainOfCustodySasKey,
		KeyEncryptionKey:            c.KeyEncryptionKey,
		ExpectedDataSizeInTeraBytes: c.ExpectedDataSizeInTeraBytes,
		Actions:                     c.Actions,
		LastMitigationActionOnJob:   c.LastMitigationActionOnJob,
		DatacenterAddress:           c.DatacenterAddress,
		DataCenterCode:              c.DataCenterCode,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CustomerDiskJobDetails.
func (c CustomerDiskJobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", c.Actions)
	populate(objectMap, "chainOfCustodySasKey", c.ChainOfCustodySasKey)
	populate(objectMap, "contactDetails", c.ContactDetails)
	populate(objectMap, "copyLogDetails", c.CopyLogDetails)
	populate(objectMap, "copyProgress", c.CopyProgress)
	populate(objectMap, "dataCenterCode", c.DataCenterCode)
	populate(objectMap, "dataExportDetails", c.DataExportDetails)
	populate(objectMap, "dataImportDetails", c.DataImportDetails)
	populate(objectMap, "datacenterAddress", c.DatacenterAddress)
	populate(objectMap, "deliverToDcPackageDetails", c.DeliverToDcPackageDetails)
	populate(objectMap, "deliveryPackage", c.DeliveryPackage)
	populate(objectMap, "enableManifestBackup", c.EnableManifestBackup)
	populate(objectMap, "expectedDataSizeInTeraBytes", c.ExpectedDataSizeInTeraBytes)
	populate(objectMap, "exportDiskDetailsCollection", c.ExportDiskDetailsCollection)
	populate(objectMap, "importDiskDetailsCollection", c.ImportDiskDetailsCollection)
	objectMap["jobDetailsType"] = ClassDiscriminatorDataBoxCustomerDisk
	populate(objectMap, "jobStages", c.JobStages)
	populate(objectMap, "keyEncryptionKey", c.KeyEncryptionKey)
	populate(objectMap, "lastMitigationActionOnJob", c.LastMitigationActionOnJob)
	populate(objectMap, "preferences", c.Preferences)
	populate(objectMap, "returnPackage", c.ReturnPackage)
	populate(objectMap, "returnToCustomerPackageDetails", c.ReturnToCustomerPackageDetails)
	populate(objectMap, "reverseShipmentLabelSasKey", c.ReverseShipmentLabelSasKey)
	populate(objectMap, "shippingAddress", c.ShippingAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomerDiskJobDetails.
func (c *CustomerDiskJobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			err = unpopulate(val, &c.Actions)
			delete(rawMsg, key)
		case "chainOfCustodySasKey":
			err = unpopulate(val, &c.ChainOfCustodySasKey)
			delete(rawMsg, key)
		case "contactDetails":
			err = unpopulate(val, &c.ContactDetails)
			delete(rawMsg, key)
		case "copyLogDetails":
			c.CopyLogDetails, err = unmarshalCopyLogDetailsClassificationArray(val)
			delete(rawMsg, key)
		case "copyProgress":
			err = unpopulate(val, &c.CopyProgress)
			delete(rawMsg, key)
		case "dataCenterCode":
			err = unpopulate(val, &c.DataCenterCode)
			delete(rawMsg, key)
		case "dataExportDetails":
			err = unpopulate(val, &c.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &c.DataImportDetails)
			delete(rawMsg, key)
		case "datacenterAddress":
			c.DatacenterAddress, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "deliverToDcPackageDetails":
			err = unpopulate(val, &c.DeliverToDcPackageDetails)
			delete(rawMsg, key)
		case "deliveryPackage":
			err = unpopulate(val, &c.DeliveryPackage)
			delete(rawMsg, key)
		case "enableManifestBackup":
			err = unpopulate(val, &c.EnableManifestBackup)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &c.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "exportDiskDetailsCollection":
			err = unpopulate(val, &c.ExportDiskDetailsCollection)
			delete(rawMsg, key)
		case "importDiskDetailsCollection":
			err = unpopulate(val, &c.ImportDiskDetailsCollection)
			delete(rawMsg, key)
		case "jobDetailsType":
			err = unpopulate(val, &c.JobDetailsType)
			delete(rawMsg, key)
		case "jobStages":
			err = unpopulate(val, &c.JobStages)
			delete(rawMsg, key)
		case "keyEncryptionKey":
			err = unpopulate(val, &c.KeyEncryptionKey)
			delete(rawMsg, key)
		case "lastMitigationActionOnJob":
			err = unpopulate(val, &c.LastMitigationActionOnJob)
			delete(rawMsg, key)
		case "preferences":
			err = unpopulate(val, &c.Preferences)
			delete(rawMsg, key)
		case "returnPackage":
			err = unpopulate(val, &c.ReturnPackage)
			delete(rawMsg, key)
		case "returnToCustomerPackageDetails":
			err = unpopulate(val, &c.ReturnToCustomerPackageDetails)
			delete(rawMsg, key)
		case "reverseShipmentLabelSasKey":
			err = unpopulate(val, &c.ReverseShipmentLabelSasKey)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &c.ShippingAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobSecrets implements the CommonJobSecretsClassification interface for type CustomerDiskJobSecrets.
func (c *CustomerDiskJobSecrets) GetCommonJobSecrets() *CommonJobSecrets {
	return &CommonJobSecrets{
		JobSecretsType:       c.JobSecretsType,
		DcAccessSecurityCode: c.DcAccessSecurityCode,
		Error:                c.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type CustomerDiskJobSecrets.
func (c CustomerDiskJobSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "carrierAccountNumber", c.CarrierAccountNumber)
	populate(objectMap, "dcAccessSecurityCode", c.DcAccessSecurityCode)
	populate(objectMap, "diskSecrets", c.DiskSecrets)
	populate(objectMap, "error", c.Error)
	objectMap["jobSecretsType"] = ClassDiscriminatorDataBoxCustomerDisk
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomerDiskJobSecrets.
func (c *CustomerDiskJobSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "carrierAccountNumber":
			err = unpopulate(val, &c.CarrierAccountNumber)
			delete(rawMsg, key)
		case "dcAccessSecurityCode":
			err = unpopulate(val, &c.DcAccessSecurityCode)
			delete(rawMsg, key)
		case "diskSecrets":
			err = unpopulate(val, &c.DiskSecrets)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &c.Error)
			delete(rawMsg, key)
		case "jobSecretsType":
			err = unpopulate(val, &c.JobSecretsType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataAccountDetails implements the DataAccountDetailsClassification interface for type DataAccountDetails.
func (d *DataAccountDetails) GetDataAccountDetails() *DataAccountDetails { return d }

// MarshalJSON implements the json.Marshaller interface for type DataExportDetails.
func (d DataExportDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountDetails", d.AccountDetails)
	populate(objectMap, "logCollectionLevel", d.LogCollectionLevel)
	populate(objectMap, "transferConfiguration", d.TransferConfiguration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataExportDetails.
func (d *DataExportDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountDetails":
			d.AccountDetails, err = unmarshalDataAccountDetailsClassification(val)
			delete(rawMsg, key)
		case "logCollectionLevel":
			err = unpopulate(val, &d.LogCollectionLevel)
			delete(rawMsg, key)
		case "transferConfiguration":
			err = unpopulate(val, &d.TransferConfiguration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DataImportDetails.
func (d DataImportDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountDetails", d.AccountDetails)
	populate(objectMap, "logCollectionLevel", d.LogCollectionLevel)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataImportDetails.
func (d *DataImportDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountDetails":
			d.AccountDetails, err = unmarshalDataAccountDetailsClassification(val)
			delete(rawMsg, key)
		case "logCollectionLevel":
			err = unpopulate(val, &d.LogCollectionLevel)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type DataTransferDetailsValidationRequest.
func (d *DataTransferDetailsValidationRequest) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: d.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferDetailsValidationRequest.
func (d DataTransferDetailsValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataExportDetails", d.DataExportDetails)
	populate(objectMap, "dataImportDetails", d.DataImportDetails)
	populate(objectMap, "deviceType", d.DeviceType)
	populate(objectMap, "transferType", d.TransferType)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateDataTransferDetails
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferDetailsValidationRequest.
func (d *DataTransferDetailsValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataExportDetails":
			err = unpopulate(val, &d.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &d.DataImportDetails)
			delete(rawMsg, key)
		case "deviceType":
			err = unpopulate(val, &d.DeviceType)
			delete(rawMsg, key)
		case "transferType":
			err = unpopulate(val, &d.TransferType)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &d.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type DataTransferDetailsValidationResponseProperties.
func (d *DataTransferDetailsValidationResponseProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: d.ValidationType,
		Error:          d.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DataTransferDetailsValidationResponseProperties.
func (d DataTransferDetailsValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", d.Error)
	populate(objectMap, "status", d.Status)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateDataTransferDetails
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataTransferDetailsValidationResponseProperties.
func (d *DataTransferDetailsValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &d.Error)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &d.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDatacenterAddressResponse implements the DatacenterAddressResponseClassification interface for type DatacenterAddressInstructionResponse.
func (d *DatacenterAddressInstructionResponse) GetDatacenterAddressResponse() *DatacenterAddressResponse {
	return &DatacenterAddressResponse{
		DatacenterAddressType:              d.DatacenterAddressType,
		SupportedCarriersForReturnShipment: d.SupportedCarriersForReturnShipment,
		DataCenterAzureLocation:            d.DataCenterAzureLocation,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DatacenterAddressInstructionResponse.
func (d DatacenterAddressInstructionResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "communicationInstruction", d.CommunicationInstruction)
	populate(objectMap, "dataCenterAzureLocation", d.DataCenterAzureLocation)
	objectMap["datacenterAddressType"] = DatacenterAddressTypeDatacenterAddressInstruction
	populate(objectMap, "supportedCarriersForReturnShipment", d.SupportedCarriersForReturnShipment)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatacenterAddressInstructionResponse.
func (d *DatacenterAddressInstructionResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "communicationInstruction":
			err = unpopulate(val, &d.CommunicationInstruction)
			delete(rawMsg, key)
		case "dataCenterAzureLocation":
			err = unpopulate(val, &d.DataCenterAzureLocation)
			delete(rawMsg, key)
		case "datacenterAddressType":
			err = unpopulate(val, &d.DatacenterAddressType)
			delete(rawMsg, key)
		case "supportedCarriersForReturnShipment":
			err = unpopulate(val, &d.SupportedCarriersForReturnShipment)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDatacenterAddressResponse implements the DatacenterAddressResponseClassification interface for type DatacenterAddressLocationResponse.
func (d *DatacenterAddressLocationResponse) GetDatacenterAddressResponse() *DatacenterAddressResponse {
	return &DatacenterAddressResponse{
		DatacenterAddressType:              d.DatacenterAddressType,
		SupportedCarriersForReturnShipment: d.SupportedCarriersForReturnShipment,
		DataCenterAzureLocation:            d.DataCenterAzureLocation,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DatacenterAddressLocationResponse.
func (d DatacenterAddressLocationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalShippingInformation", d.AdditionalShippingInformation)
	populate(objectMap, "addressType", d.AddressType)
	populate(objectMap, "city", d.City)
	populate(objectMap, "company", d.Company)
	populate(objectMap, "contactPersonName", d.ContactPersonName)
	populate(objectMap, "country", d.Country)
	populate(objectMap, "dataCenterAzureLocation", d.DataCenterAzureLocation)
	objectMap["datacenterAddressType"] = DatacenterAddressTypeDatacenterAddressLocation
	populate(objectMap, "phone", d.Phone)
	populate(objectMap, "phoneExtension", d.PhoneExtension)
	populate(objectMap, "state", d.State)
	populate(objectMap, "street1", d.Street1)
	populate(objectMap, "street2", d.Street2)
	populate(objectMap, "street3", d.Street3)
	populate(objectMap, "supportedCarriersForReturnShipment", d.SupportedCarriersForReturnShipment)
	populate(objectMap, "zip", d.Zip)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DatacenterAddressLocationResponse.
func (d *DatacenterAddressLocationResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalShippingInformation":
			err = unpopulate(val, &d.AdditionalShippingInformation)
			delete(rawMsg, key)
		case "addressType":
			err = unpopulate(val, &d.AddressType)
			delete(rawMsg, key)
		case "city":
			err = unpopulate(val, &d.City)
			delete(rawMsg, key)
		case "company":
			err = unpopulate(val, &d.Company)
			delete(rawMsg, key)
		case "contactPersonName":
			err = unpopulate(val, &d.ContactPersonName)
			delete(rawMsg, key)
		case "country":
			err = unpopulate(val, &d.Country)
			delete(rawMsg, key)
		case "dataCenterAzureLocation":
			err = unpopulate(val, &d.DataCenterAzureLocation)
			delete(rawMsg, key)
		case "datacenterAddressType":
			err = unpopulate(val, &d.DatacenterAddressType)
			delete(rawMsg, key)
		case "phone":
			err = unpopulate(val, &d.Phone)
			delete(rawMsg, key)
		case "phoneExtension":
			err = unpopulate(val, &d.PhoneExtension)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &d.State)
			delete(rawMsg, key)
		case "street1":
			err = unpopulate(val, &d.Street1)
			delete(rawMsg, key)
		case "street2":
			err = unpopulate(val, &d.Street2)
			delete(rawMsg, key)
		case "street3":
			err = unpopulate(val, &d.Street3)
			delete(rawMsg, key)
		case "supportedCarriersForReturnShipment":
			err = unpopulate(val, &d.SupportedCarriersForReturnShipment)
			delete(rawMsg, key)
		case "zip":
			err = unpopulate(val, &d.Zip)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDatacenterAddressResponse implements the DatacenterAddressResponseClassification interface for type DatacenterAddressResponse.
func (d *DatacenterAddressResponse) GetDatacenterAddressResponse() *DatacenterAddressResponse {
	return d
}

// MarshalJSON implements the json.Marshaller interface for type DatacenterAddressResponse.
func (d DatacenterAddressResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataCenterAzureLocation", d.DataCenterAzureLocation)
	objectMap["datacenterAddressType"] = d.DatacenterAddressType
	populate(objectMap, "supportedCarriersForReturnShipment", d.SupportedCarriersForReturnShipment)
	return json.Marshal(objectMap)
}

// GetCopyLogDetails implements the CopyLogDetailsClassification interface for type DiskCopyLogDetails.
func (d *DiskCopyLogDetails) GetCopyLogDetails() *CopyLogDetails {
	return &CopyLogDetails{
		CopyLogDetailsType: d.CopyLogDetailsType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DiskCopyLogDetails.
func (d DiskCopyLogDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["copyLogDetailsType"] = ClassDiscriminatorDataBoxDisk
	populate(objectMap, "diskSerialNumber", d.DiskSerialNumber)
	populate(objectMap, "errorLogLink", d.ErrorLogLink)
	populate(objectMap, "verboseLogLink", d.VerboseLogLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskCopyLogDetails.
func (d *DiskCopyLogDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "copyLogDetailsType":
			err = unpopulate(val, &d.CopyLogDetailsType)
			delete(rawMsg, key)
		case "diskSerialNumber":
			err = unpopulate(val, &d.DiskSerialNumber)
			delete(rawMsg, key)
		case "errorLogLink":
			err = unpopulate(val, &d.ErrorLogLink)
			delete(rawMsg, key)
		case "verboseLogLink":
			err = unpopulate(val, &d.VerboseLogLink)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetGranularCopyLogDetails implements the GranularCopyLogDetailsClassification interface for type DiskGranularCopyLogDetails.
func (d *DiskGranularCopyLogDetails) GetGranularCopyLogDetails() *GranularCopyLogDetails {
	return &GranularCopyLogDetails{
		CopyLogDetailsType: d.CopyLogDetailsType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DiskGranularCopyLogDetails.
func (d DiskGranularCopyLogDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountName", d.AccountName)
	objectMap["copyLogDetailsType"] = ClassDiscriminatorDataBoxCustomerDisk
	populate(objectMap, "errorLogLink", d.ErrorLogLink)
	populate(objectMap, "serialNumber", d.SerialNumber)
	populate(objectMap, "verboseLogLink", d.VerboseLogLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskGranularCopyLogDetails.
func (d *DiskGranularCopyLogDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountName":
			err = unpopulate(val, &d.AccountName)
			delete(rawMsg, key)
		case "copyLogDetailsType":
			err = unpopulate(val, &d.CopyLogDetailsType)
			delete(rawMsg, key)
		case "errorLogLink":
			err = unpopulate(val, &d.ErrorLogLink)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &d.SerialNumber)
			delete(rawMsg, key)
		case "verboseLogLink":
			err = unpopulate(val, &d.VerboseLogLink)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobDetails implements the CommonJobDetailsClassification interface for type DiskJobDetails.
func (d *DiskJobDetails) GetCommonJobDetails() *CommonJobDetails {
	return &CommonJobDetails{
		JobStages:                   d.JobStages,
		ContactDetails:              d.ContactDetails,
		ShippingAddress:             d.ShippingAddress,
		DeliveryPackage:             d.DeliveryPackage,
		ReturnPackage:               d.ReturnPackage,
		DataImportDetails:           d.DataImportDetails,
		DataExportDetails:           d.DataExportDetails,
		JobDetailsType:              d.JobDetailsType,
		Preferences:                 d.Preferences,
		CopyLogDetails:              d.CopyLogDetails,
		ReverseShipmentLabelSasKey:  d.ReverseShipmentLabelSasKey,
		ChainOfCustodySasKey:        d.ChainOfCustodySasKey,
		KeyEncryptionKey:            d.KeyEncryptionKey,
		ExpectedDataSizeInTeraBytes: d.ExpectedDataSizeInTeraBytes,
		Actions:                     d.Actions,
		LastMitigationActionOnJob:   d.LastMitigationActionOnJob,
		DatacenterAddress:           d.DatacenterAddress,
		DataCenterCode:              d.DataCenterCode,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DiskJobDetails.
func (d DiskJobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", d.Actions)
	populate(objectMap, "chainOfCustodySasKey", d.ChainOfCustodySasKey)
	populate(objectMap, "contactDetails", d.ContactDetails)
	populate(objectMap, "copyLogDetails", d.CopyLogDetails)
	populate(objectMap, "copyProgress", d.CopyProgress)
	populate(objectMap, "dataCenterCode", d.DataCenterCode)
	populate(objectMap, "dataExportDetails", d.DataExportDetails)
	populate(objectMap, "dataImportDetails", d.DataImportDetails)
	populate(objectMap, "datacenterAddress", d.DatacenterAddress)
	populate(objectMap, "deliveryPackage", d.DeliveryPackage)
	populate(objectMap, "disksAndSizeDetails", d.DisksAndSizeDetails)
	populate(objectMap, "expectedDataSizeInTeraBytes", d.ExpectedDataSizeInTeraBytes)
	populate(objectMap, "granularCopyProgress", d.GranularCopyProgress)
	objectMap["jobDetailsType"] = ClassDiscriminatorDataBoxDisk
	populate(objectMap, "jobStages", d.JobStages)
	populate(objectMap, "keyEncryptionKey", d.KeyEncryptionKey)
	populate(objectMap, "lastMitigationActionOnJob", d.LastMitigationActionOnJob)
	populate(objectMap, "passkey", d.Passkey)
	populate(objectMap, "preferences", d.Preferences)
	populate(objectMap, "preferredDisks", d.PreferredDisks)
	populate(objectMap, "returnPackage", d.ReturnPackage)
	populate(objectMap, "reverseShipmentLabelSasKey", d.ReverseShipmentLabelSasKey)
	populate(objectMap, "shippingAddress", d.ShippingAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskJobDetails.
func (d *DiskJobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			err = unpopulate(val, &d.Actions)
			delete(rawMsg, key)
		case "chainOfCustodySasKey":
			err = unpopulate(val, &d.ChainOfCustodySasKey)
			delete(rawMsg, key)
		case "contactDetails":
			err = unpopulate(val, &d.ContactDetails)
			delete(rawMsg, key)
		case "copyLogDetails":
			d.CopyLogDetails, err = unmarshalCopyLogDetailsClassificationArray(val)
			delete(rawMsg, key)
		case "copyProgress":
			err = unpopulate(val, &d.CopyProgress)
			delete(rawMsg, key)
		case "dataCenterCode":
			err = unpopulate(val, &d.DataCenterCode)
			delete(rawMsg, key)
		case "dataExportDetails":
			err = unpopulate(val, &d.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &d.DataImportDetails)
			delete(rawMsg, key)
		case "datacenterAddress":
			d.DatacenterAddress, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "deliveryPackage":
			err = unpopulate(val, &d.DeliveryPackage)
			delete(rawMsg, key)
		case "disksAndSizeDetails":
			err = unpopulate(val, &d.DisksAndSizeDetails)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &d.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "granularCopyProgress":
			err = unpopulate(val, &d.GranularCopyProgress)
			delete(rawMsg, key)
		case "jobDetailsType":
			err = unpopulate(val, &d.JobDetailsType)
			delete(rawMsg, key)
		case "jobStages":
			err = unpopulate(val, &d.JobStages)
			delete(rawMsg, key)
		case "keyEncryptionKey":
			err = unpopulate(val, &d.KeyEncryptionKey)
			delete(rawMsg, key)
		case "lastMitigationActionOnJob":
			err = unpopulate(val, &d.LastMitigationActionOnJob)
			delete(rawMsg, key)
		case "passkey":
			err = unpopulate(val, &d.Passkey)
			delete(rawMsg, key)
		case "preferences":
			err = unpopulate(val, &d.Preferences)
			delete(rawMsg, key)
		case "preferredDisks":
			err = unpopulate(val, &d.PreferredDisks)
			delete(rawMsg, key)
		case "returnPackage":
			err = unpopulate(val, &d.ReturnPackage)
			delete(rawMsg, key)
		case "reverseShipmentLabelSasKey":
			err = unpopulate(val, &d.ReverseShipmentLabelSasKey)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &d.ShippingAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobSecrets implements the CommonJobSecretsClassification interface for type DiskJobSecrets.
func (d *DiskJobSecrets) GetCommonJobSecrets() *CommonJobSecrets {
	return &CommonJobSecrets{
		JobSecretsType:       d.JobSecretsType,
		DcAccessSecurityCode: d.DcAccessSecurityCode,
		Error:                d.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DiskJobSecrets.
func (d DiskJobSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dcAccessSecurityCode", d.DcAccessSecurityCode)
	populate(objectMap, "diskSecrets", d.DiskSecrets)
	populate(objectMap, "error", d.Error)
	populate(objectMap, "isPasskeyUserDefined", d.IsPasskeyUserDefined)
	objectMap["jobSecretsType"] = ClassDiscriminatorDataBoxDisk
	populate(objectMap, "passKey", d.PassKey)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskJobSecrets.
func (d *DiskJobSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dcAccessSecurityCode":
			err = unpopulate(val, &d.DcAccessSecurityCode)
			delete(rawMsg, key)
		case "diskSecrets":
			err = unpopulate(val, &d.DiskSecrets)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &d.Error)
			delete(rawMsg, key)
		case "isPasskeyUserDefined":
			err = unpopulate(val, &d.IsPasskeyUserDefined)
			delete(rawMsg, key)
		case "jobSecretsType":
			err = unpopulate(val, &d.JobSecretsType)
			delete(rawMsg, key)
		case "passKey":
			err = unpopulate(val, &d.PassKey)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonScheduleAvailabilityRequest implements the CommonScheduleAvailabilityRequestClassification interface for type
// DiskScheduleAvailabilityRequest.
func (d *DiskScheduleAvailabilityRequest) GetCommonScheduleAvailabilityRequest() *CommonScheduleAvailabilityRequest {
	return &CommonScheduleAvailabilityRequest{
		StorageLocation: d.StorageLocation,
		SKUName:         d.SKUName,
		Country:         d.Country,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DiskScheduleAvailabilityRequest.
func (d DiskScheduleAvailabilityRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "country", d.Country)
	populate(objectMap, "expectedDataSizeInTeraBytes", d.ExpectedDataSizeInTeraBytes)
	objectMap["skuName"] = SKUNameDataBoxDisk
	populate(objectMap, "storageLocation", d.StorageLocation)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiskScheduleAvailabilityRequest.
func (d *DiskScheduleAvailabilityRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "country":
			err = unpopulate(val, &d.Country)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &d.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "skuName":
			err = unpopulate(val, &d.SKUName)
			delete(rawMsg, key)
		case "storageLocation":
			err = unpopulate(val, &d.StorageLocation)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// GetGranularCopyLogDetails implements the GranularCopyLogDetailsClassification interface for type GranularCopyLogDetails.
func (g *GranularCopyLogDetails) GetGranularCopyLogDetails() *GranularCopyLogDetails { return g }

// GetCopyLogDetails implements the CopyLogDetailsClassification interface for type HeavyAccountCopyLogDetails.
func (h *HeavyAccountCopyLogDetails) GetCopyLogDetails() *CopyLogDetails {
	return &CopyLogDetails{
		CopyLogDetailsType: h.CopyLogDetailsType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type HeavyAccountCopyLogDetails.
func (h HeavyAccountCopyLogDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountName", h.AccountName)
	objectMap["copyLogDetailsType"] = ClassDiscriminatorDataBoxHeavy
	populate(objectMap, "copyLogLink", h.CopyLogLink)
	populate(objectMap, "copyVerboseLogLink", h.CopyVerboseLogLink)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HeavyAccountCopyLogDetails.
func (h *HeavyAccountCopyLogDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountName":
			err = unpopulate(val, &h.AccountName)
			delete(rawMsg, key)
		case "copyLogDetailsType":
			err = unpopulate(val, &h.CopyLogDetailsType)
			delete(rawMsg, key)
		case "copyLogLink":
			err = unpopulate(val, &h.CopyLogLink)
			delete(rawMsg, key)
		case "copyVerboseLogLink":
			err = unpopulate(val, &h.CopyVerboseLogLink)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobDetails implements the CommonJobDetailsClassification interface for type HeavyJobDetails.
func (h *HeavyJobDetails) GetCommonJobDetails() *CommonJobDetails {
	return &CommonJobDetails{
		JobStages:                   h.JobStages,
		ContactDetails:              h.ContactDetails,
		ShippingAddress:             h.ShippingAddress,
		DeliveryPackage:             h.DeliveryPackage,
		ReturnPackage:               h.ReturnPackage,
		DataImportDetails:           h.DataImportDetails,
		DataExportDetails:           h.DataExportDetails,
		JobDetailsType:              h.JobDetailsType,
		Preferences:                 h.Preferences,
		CopyLogDetails:              h.CopyLogDetails,
		ReverseShipmentLabelSasKey:  h.ReverseShipmentLabelSasKey,
		ChainOfCustodySasKey:        h.ChainOfCustodySasKey,
		KeyEncryptionKey:            h.KeyEncryptionKey,
		ExpectedDataSizeInTeraBytes: h.ExpectedDataSizeInTeraBytes,
		Actions:                     h.Actions,
		LastMitigationActionOnJob:   h.LastMitigationActionOnJob,
		DatacenterAddress:           h.DatacenterAddress,
		DataCenterCode:              h.DataCenterCode,
	}
}

// MarshalJSON implements the json.Marshaller interface for type HeavyJobDetails.
func (h HeavyJobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", h.Actions)
	populate(objectMap, "chainOfCustodySasKey", h.ChainOfCustodySasKey)
	populate(objectMap, "contactDetails", h.ContactDetails)
	populate(objectMap, "copyLogDetails", h.CopyLogDetails)
	populate(objectMap, "copyProgress", h.CopyProgress)
	populate(objectMap, "dataCenterCode", h.DataCenterCode)
	populate(objectMap, "dataExportDetails", h.DataExportDetails)
	populate(objectMap, "dataImportDetails", h.DataImportDetails)
	populate(objectMap, "datacenterAddress", h.DatacenterAddress)
	populate(objectMap, "deliveryPackage", h.DeliveryPackage)
	populate(objectMap, "devicePassword", h.DevicePassword)
	populate(objectMap, "expectedDataSizeInTeraBytes", h.ExpectedDataSizeInTeraBytes)
	objectMap["jobDetailsType"] = ClassDiscriminatorDataBoxHeavy
	populate(objectMap, "jobStages", h.JobStages)
	populate(objectMap, "keyEncryptionKey", h.KeyEncryptionKey)
	populate(objectMap, "lastMitigationActionOnJob", h.LastMitigationActionOnJob)
	populate(objectMap, "preferences", h.Preferences)
	populate(objectMap, "returnPackage", h.ReturnPackage)
	populate(objectMap, "reverseShipmentLabelSasKey", h.ReverseShipmentLabelSasKey)
	populate(objectMap, "shippingAddress", h.ShippingAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HeavyJobDetails.
func (h *HeavyJobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			err = unpopulate(val, &h.Actions)
			delete(rawMsg, key)
		case "chainOfCustodySasKey":
			err = unpopulate(val, &h.ChainOfCustodySasKey)
			delete(rawMsg, key)
		case "contactDetails":
			err = unpopulate(val, &h.ContactDetails)
			delete(rawMsg, key)
		case "copyLogDetails":
			h.CopyLogDetails, err = unmarshalCopyLogDetailsClassificationArray(val)
			delete(rawMsg, key)
		case "copyProgress":
			err = unpopulate(val, &h.CopyProgress)
			delete(rawMsg, key)
		case "dataCenterCode":
			err = unpopulate(val, &h.DataCenterCode)
			delete(rawMsg, key)
		case "dataExportDetails":
			err = unpopulate(val, &h.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &h.DataImportDetails)
			delete(rawMsg, key)
		case "datacenterAddress":
			h.DatacenterAddress, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "deliveryPackage":
			err = unpopulate(val, &h.DeliveryPackage)
			delete(rawMsg, key)
		case "devicePassword":
			err = unpopulate(val, &h.DevicePassword)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &h.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "jobDetailsType":
			err = unpopulate(val, &h.JobDetailsType)
			delete(rawMsg, key)
		case "jobStages":
			err = unpopulate(val, &h.JobStages)
			delete(rawMsg, key)
		case "keyEncryptionKey":
			err = unpopulate(val, &h.KeyEncryptionKey)
			delete(rawMsg, key)
		case "lastMitigationActionOnJob":
			err = unpopulate(val, &h.LastMitigationActionOnJob)
			delete(rawMsg, key)
		case "preferences":
			err = unpopulate(val, &h.Preferences)
			delete(rawMsg, key)
		case "returnPackage":
			err = unpopulate(val, &h.ReturnPackage)
			delete(rawMsg, key)
		case "reverseShipmentLabelSasKey":
			err = unpopulate(val, &h.ReverseShipmentLabelSasKey)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &h.ShippingAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobSecrets implements the CommonJobSecretsClassification interface for type HeavyJobSecrets.
func (h *HeavyJobSecrets) GetCommonJobSecrets() *CommonJobSecrets {
	return &CommonJobSecrets{
		JobSecretsType:       h.JobSecretsType,
		DcAccessSecurityCode: h.DcAccessSecurityCode,
		Error:                h.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type HeavyJobSecrets.
func (h HeavyJobSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cabinetPodSecrets", h.CabinetPodSecrets)
	populate(objectMap, "dcAccessSecurityCode", h.DcAccessSecurityCode)
	populate(objectMap, "error", h.Error)
	objectMap["jobSecretsType"] = ClassDiscriminatorDataBoxHeavy
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HeavyJobSecrets.
func (h *HeavyJobSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "cabinetPodSecrets":
			err = unpopulate(val, &h.CabinetPodSecrets)
			delete(rawMsg, key)
		case "dcAccessSecurityCode":
			err = unpopulate(val, &h.DcAccessSecurityCode)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &h.Error)
			delete(rawMsg, key)
		case "jobSecretsType":
			err = unpopulate(val, &h.JobSecretsType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonScheduleAvailabilityRequest implements the CommonScheduleAvailabilityRequestClassification interface for type
// HeavyScheduleAvailabilityRequest.
func (h *HeavyScheduleAvailabilityRequest) GetCommonScheduleAvailabilityRequest() *CommonScheduleAvailabilityRequest {
	return &CommonScheduleAvailabilityRequest{
		StorageLocation: h.StorageLocation,
		SKUName:         h.SKUName,
		Country:         h.Country,
	}
}

// MarshalJSON implements the json.Marshaller interface for type HeavyScheduleAvailabilityRequest.
func (h HeavyScheduleAvailabilityRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "country", h.Country)
	objectMap["skuName"] = SKUNameDataBoxHeavy
	populate(objectMap, "storageLocation", h.StorageLocation)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HeavyScheduleAvailabilityRequest.
func (h *HeavyScheduleAvailabilityRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "country":
			err = unpopulate(val, &h.Country)
			delete(rawMsg, key)
		case "skuName":
			err = unpopulate(val, &h.SKUName)
			delete(rawMsg, key)
		case "storageLocation":
			err = unpopulate(val, &h.StorageLocation)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type HeavySecret.
func (h HeavySecret) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountCredentialDetails", h.AccountCredentialDetails)
	populate(objectMap, "devicePassword", h.DevicePassword)
	populate(objectMap, "deviceSerialNumber", h.DeviceSerialNumber)
	populate(objectMap, "encodedValidationCertPubKey", h.EncodedValidationCertPubKey)
	populate(objectMap, "networkConfigurations", h.NetworkConfigurations)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type JobDeliveryInfo.
func (j JobDeliveryInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "scheduledDateTime", j.ScheduledDateTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobDeliveryInfo.
func (j *JobDeliveryInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "scheduledDateTime":
			err = unpopulateTimeRFC3339(val, &j.ScheduledDateTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetCommonJobDetails implements the CommonJobDetailsClassification interface for type JobDetails.
func (j *JobDetails) GetCommonJobDetails() *CommonJobDetails {
	return &CommonJobDetails{
		JobStages:                   j.JobStages,
		ContactDetails:              j.ContactDetails,
		ShippingAddress:             j.ShippingAddress,
		DeliveryPackage:             j.DeliveryPackage,
		ReturnPackage:               j.ReturnPackage,
		DataImportDetails:           j.DataImportDetails,
		DataExportDetails:           j.DataExportDetails,
		JobDetailsType:              j.JobDetailsType,
		Preferences:                 j.Preferences,
		CopyLogDetails:              j.CopyLogDetails,
		ReverseShipmentLabelSasKey:  j.ReverseShipmentLabelSasKey,
		ChainOfCustodySasKey:        j.ChainOfCustodySasKey,
		KeyEncryptionKey:            j.KeyEncryptionKey,
		ExpectedDataSizeInTeraBytes: j.ExpectedDataSizeInTeraBytes,
		Actions:                     j.Actions,
		LastMitigationActionOnJob:   j.LastMitigationActionOnJob,
		DatacenterAddress:           j.DatacenterAddress,
		DataCenterCode:              j.DataCenterCode,
	}
}

// MarshalJSON implements the json.Marshaller interface for type JobDetails.
func (j JobDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", j.Actions)
	populate(objectMap, "chainOfCustodySasKey", j.ChainOfCustodySasKey)
	populate(objectMap, "contactDetails", j.ContactDetails)
	populate(objectMap, "copyLogDetails", j.CopyLogDetails)
	populate(objectMap, "copyProgress", j.CopyProgress)
	populate(objectMap, "dataCenterCode", j.DataCenterCode)
	populate(objectMap, "dataExportDetails", j.DataExportDetails)
	populate(objectMap, "dataImportDetails", j.DataImportDetails)
	populate(objectMap, "datacenterAddress", j.DatacenterAddress)
	populate(objectMap, "deliveryPackage", j.DeliveryPackage)
	populate(objectMap, "devicePassword", j.DevicePassword)
	populate(objectMap, "expectedDataSizeInTeraBytes", j.ExpectedDataSizeInTeraBytes)
	objectMap["jobDetailsType"] = ClassDiscriminatorDataBox
	populate(objectMap, "jobStages", j.JobStages)
	populate(objectMap, "keyEncryptionKey", j.KeyEncryptionKey)
	populate(objectMap, "lastMitigationActionOnJob", j.LastMitigationActionOnJob)
	populate(objectMap, "preferences", j.Preferences)
	populate(objectMap, "returnPackage", j.ReturnPackage)
	populate(objectMap, "reverseShipmentLabelSasKey", j.ReverseShipmentLabelSasKey)
	populate(objectMap, "shippingAddress", j.ShippingAddress)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobDetails.
func (j *JobDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actions":
			err = unpopulate(val, &j.Actions)
			delete(rawMsg, key)
		case "chainOfCustodySasKey":
			err = unpopulate(val, &j.ChainOfCustodySasKey)
			delete(rawMsg, key)
		case "contactDetails":
			err = unpopulate(val, &j.ContactDetails)
			delete(rawMsg, key)
		case "copyLogDetails":
			j.CopyLogDetails, err = unmarshalCopyLogDetailsClassificationArray(val)
			delete(rawMsg, key)
		case "copyProgress":
			err = unpopulate(val, &j.CopyProgress)
			delete(rawMsg, key)
		case "dataCenterCode":
			err = unpopulate(val, &j.DataCenterCode)
			delete(rawMsg, key)
		case "dataExportDetails":
			err = unpopulate(val, &j.DataExportDetails)
			delete(rawMsg, key)
		case "dataImportDetails":
			err = unpopulate(val, &j.DataImportDetails)
			delete(rawMsg, key)
		case "datacenterAddress":
			j.DatacenterAddress, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "deliveryPackage":
			err = unpopulate(val, &j.DeliveryPackage)
			delete(rawMsg, key)
		case "devicePassword":
			err = unpopulate(val, &j.DevicePassword)
			delete(rawMsg, key)
		case "expectedDataSizeInTeraBytes":
			err = unpopulate(val, &j.ExpectedDataSizeInTeraBytes)
			delete(rawMsg, key)
		case "jobDetailsType":
			err = unpopulate(val, &j.JobDetailsType)
			delete(rawMsg, key)
		case "jobStages":
			err = unpopulate(val, &j.JobStages)
			delete(rawMsg, key)
		case "keyEncryptionKey":
			err = unpopulate(val, &j.KeyEncryptionKey)
			delete(rawMsg, key)
		case "lastMitigationActionOnJob":
			err = unpopulate(val, &j.LastMitigationActionOnJob)
			delete(rawMsg, key)
		case "preferences":
			err = unpopulate(val, &j.Preferences)
			delete(rawMsg, key)
		case "returnPackage":
			err = unpopulate(val, &j.ReturnPackage)
			delete(rawMsg, key)
		case "reverseShipmentLabelSasKey":
			err = unpopulate(val, &j.ReverseShipmentLabelSasKey)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &j.ShippingAddress)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JobProperties.
func (j JobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cancellationReason", j.CancellationReason)
	populate(objectMap, "deliveryInfo", j.DeliveryInfo)
	populate(objectMap, "deliveryType", j.DeliveryType)
	populate(objectMap, "details", j.Details)
	populate(objectMap, "error", j.Error)
	populate(objectMap, "isCancellable", j.IsCancellable)
	populate(objectMap, "isCancellableWithoutFee", j.IsCancellableWithoutFee)
	populate(objectMap, "isDeletable", j.IsDeletable)
	populate(objectMap, "isPrepareToShipEnabled", j.IsPrepareToShipEnabled)
	populate(objectMap, "isShippingAddressEditable", j.IsShippingAddressEditable)
	populateTimeRFC3339(objectMap, "startTime", j.StartTime)
	populate(objectMap, "status", j.Status)
	populate(objectMap, "transferType", j.TransferType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobProperties.
func (j *JobProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "cancellationReason":
			err = unpopulate(val, &j.CancellationReason)
			delete(rawMsg, key)
		case "deliveryInfo":
			err = unpopulate(val, &j.DeliveryInfo)
			delete(rawMsg, key)
		case "deliveryType":
			err = unpopulate(val, &j.DeliveryType)
			delete(rawMsg, key)
		case "details":
			j.Details, err = unmarshalCommonJobDetailsClassification(val)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &j.Error)
			delete(rawMsg, key)
		case "isCancellable":
			err = unpopulate(val, &j.IsCancellable)
			delete(rawMsg, key)
		case "isCancellableWithoutFee":
			err = unpopulate(val, &j.IsCancellableWithoutFee)
			delete(rawMsg, key)
		case "isDeletable":
			err = unpopulate(val, &j.IsDeletable)
			delete(rawMsg, key)
		case "isPrepareToShipEnabled":
			err = unpopulate(val, &j.IsPrepareToShipEnabled)
			delete(rawMsg, key)
		case "isShippingAddressEditable":
			err = unpopulate(val, &j.IsShippingAddressEditable)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &j.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &j.Status)
			delete(rawMsg, key)
		case "transferType":
			err = unpopulate(val, &j.TransferType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JobResource.
func (j JobResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", j.ID)
	populate(objectMap, "identity", j.Identity)
	populate(objectMap, "location", j.Location)
	populate(objectMap, "name", j.Name)
	populate(objectMap, "properties", j.Properties)
	populate(objectMap, "sku", j.SKU)
	populate(objectMap, "systemData", j.SystemData)
	populate(objectMap, "tags", j.Tags)
	populate(objectMap, "type", j.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type JobResourceList.
func (j JobResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", j.NextLink)
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type JobResourceUpdateParameter.
func (j JobResourceUpdateParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", j.Identity)
	populate(objectMap, "properties", j.Properties)
	populate(objectMap, "tags", j.Tags)
	return json.Marshal(objectMap)
}

// GetCommonJobSecrets implements the CommonJobSecretsClassification interface for type JobSecrets.
func (j *JobSecrets) GetCommonJobSecrets() *CommonJobSecrets {
	return &CommonJobSecrets{
		JobSecretsType:       j.JobSecretsType,
		DcAccessSecurityCode: j.DcAccessSecurityCode,
		Error:                j.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type JobSecrets.
func (j JobSecrets) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dcAccessSecurityCode", j.DcAccessSecurityCode)
	populate(objectMap, "error", j.Error)
	objectMap["jobSecretsType"] = ClassDiscriminatorDataBox
	populate(objectMap, "podSecrets", j.PodSecrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobSecrets.
func (j *JobSecrets) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dcAccessSecurityCode":
			err = unpopulate(val, &j.DcAccessSecurityCode)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &j.Error)
			delete(rawMsg, key)
		case "jobSecretsType":
			err = unpopulate(val, &j.JobSecretsType)
			delete(rawMsg, key)
		case "podSecrets":
			err = unpopulate(val, &j.PodSecrets)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type JobStages.
func (j JobStages) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", j.DisplayName)
	populate(objectMap, "jobStageDetails", &j.JobStageDetails)
	populate(objectMap, "stageName", j.StageName)
	populate(objectMap, "stageStatus", j.StageStatus)
	populateTimeRFC3339(objectMap, "stageTime", j.StageTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JobStages.
func (j *JobStages) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, &j.DisplayName)
			delete(rawMsg, key)
		case "jobStageDetails":
			err = unpopulate(val, &j.JobStageDetails)
			delete(rawMsg, key)
		case "stageName":
			err = unpopulate(val, &j.StageName)
			delete(rawMsg, key)
		case "stageStatus":
			err = unpopulate(val, &j.StageStatus)
			delete(rawMsg, key)
		case "stageTime":
			err = unpopulateTimeRFC3339(val, &j.StageTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LastMitigationActionOnJob.
func (l LastMitigationActionOnJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "actionDateTimeInUtc", l.ActionDateTimeInUTC)
	populate(objectMap, "customerResolution", l.CustomerResolution)
	populate(objectMap, "isPerformedByCustomer", l.IsPerformedByCustomer)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LastMitigationActionOnJob.
func (l *LastMitigationActionOnJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionDateTimeInUtc":
			err = unpopulateTimeRFC3339(val, &l.ActionDateTimeInUTC)
			delete(rawMsg, key)
		case "customerResolution":
			err = unpopulate(val, &l.CustomerResolution)
			delete(rawMsg, key)
		case "isPerformedByCustomer":
			err = unpopulate(val, &l.IsPerformedByCustomer)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataAccountDetails implements the DataAccountDetailsClassification interface for type ManagedDiskDetails.
func (m *ManagedDiskDetails) GetDataAccountDetails() *DataAccountDetails {
	return &DataAccountDetails{
		DataAccountType: m.DataAccountType,
		SharePassword:   m.SharePassword,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ManagedDiskDetails.
func (m ManagedDiskDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["dataAccountType"] = DataAccountTypeManagedDisk
	populate(objectMap, "resourceGroupId", m.ResourceGroupID)
	populate(objectMap, "sharePassword", m.SharePassword)
	populate(objectMap, "stagingStorageAccountId", m.StagingStorageAccountID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagedDiskDetails.
func (m *ManagedDiskDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataAccountType":
			err = unpopulate(val, &m.DataAccountType)
			delete(rawMsg, key)
		case "resourceGroupId":
			err = unpopulate(val, &m.ResourceGroupID)
			delete(rawMsg, key)
		case "sharePassword":
			err = unpopulate(val, &m.SharePassword)
			delete(rawMsg, key)
		case "stagingStorageAccountId":
			err = unpopulate(val, &m.StagingStorageAccountID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Preferences.
func (p Preferences) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionPreferences", p.EncryptionPreferences)
	populate(objectMap, "preferredDataCenterRegion", p.PreferredDataCenterRegion)
	populate(objectMap, "storageAccountAccessTierPreferences", p.StorageAccountAccessTierPreferences)
	populate(objectMap, "transportPreferences", p.TransportPreferences)
	return json.Marshal(objectMap)
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type PreferencesValidationRequest.
func (p *PreferencesValidationRequest) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: p.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PreferencesValidationRequest.
func (p PreferencesValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deviceType", p.DeviceType)
	populate(objectMap, "preference", p.Preference)
	objectMap["validationType"] = ValidationInputDiscriminatorValidatePreferences
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PreferencesValidationRequest.
func (p *PreferencesValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceType":
			err = unpopulate(val, &p.DeviceType)
			delete(rawMsg, key)
		case "preference":
			err = unpopulate(val, &p.Preference)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &p.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type PreferencesValidationResponseProperties.
func (p *PreferencesValidationResponseProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: p.ValidationType,
		Error:          p.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PreferencesValidationResponseProperties.
func (p PreferencesValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", p.Error)
	populate(objectMap, "status", p.Status)
	objectMap["validationType"] = ValidationInputDiscriminatorValidatePreferences
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PreferencesValidationResponseProperties.
func (p *PreferencesValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &p.Error)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &p.Status)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &p.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RegionConfigurationRequest.
func (r RegionConfigurationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "datacenterAddressRequest", r.DatacenterAddressRequest)
	populate(objectMap, "scheduleAvailabilityRequest", r.ScheduleAvailabilityRequest)
	populate(objectMap, "transportAvailabilityRequest", r.TransportAvailabilityRequest)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RegionConfigurationRequest.
func (r *RegionConfigurationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "datacenterAddressRequest":
			err = unpopulate(val, &r.DatacenterAddressRequest)
			delete(rawMsg, key)
		case "scheduleAvailabilityRequest":
			r.ScheduleAvailabilityRequest, err = unmarshalCommonScheduleAvailabilityRequestClassification(val)
			delete(rawMsg, key)
		case "transportAvailabilityRequest":
			err = unpopulate(val, &r.TransportAvailabilityRequest)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type RegionConfigurationResponse.
func (r RegionConfigurationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "datacenterAddressResponse", r.DatacenterAddressResponse)
	populate(objectMap, "scheduleAvailabilityResponse", r.ScheduleAvailabilityResponse)
	populate(objectMap, "transportAvailabilityResponse", r.TransportAvailabilityResponse)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RegionConfigurationResponse.
func (r *RegionConfigurationResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "datacenterAddressResponse":
			r.DatacenterAddressResponse, err = unmarshalDatacenterAddressResponseClassification(val)
			delete(rawMsg, key)
		case "scheduleAvailabilityResponse":
			err = unpopulate(val, &r.ScheduleAvailabilityResponse)
			delete(rawMsg, key)
		case "transportAvailabilityResponse":
			err = unpopulate(val, &r.TransportAvailabilityResponse)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "sku", r.SKU)
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceIdentity.
func (r ResourceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", r.PrincipalID)
	populate(objectMap, "tenantId", r.TenantID)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "userAssignedIdentities", r.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type SKUAvailabilityValidationRequest.
func (s *SKUAvailabilityValidationRequest) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: s.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SKUAvailabilityValidationRequest.
func (s SKUAvailabilityValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "country", s.Country)
	populate(objectMap, "deviceType", s.DeviceType)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "transferType", s.TransferType)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateSKUAvailability
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SKUAvailabilityValidationRequest.
func (s *SKUAvailabilityValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "country":
			err = unpopulate(val, &s.Country)
			delete(rawMsg, key)
		case "deviceType":
			err = unpopulate(val, &s.DeviceType)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &s.Location)
			delete(rawMsg, key)
		case "transferType":
			err = unpopulate(val, &s.TransferType)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &s.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type SKUAvailabilityValidationResponseProperties.
func (s *SKUAvailabilityValidationResponseProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: s.ValidationType,
		Error:          s.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SKUAvailabilityValidationResponseProperties.
func (s SKUAvailabilityValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", s.Error)
	populate(objectMap, "status", s.Status)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateSKUAvailability
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SKUAvailabilityValidationResponseProperties.
func (s *SKUAvailabilityValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &s.Error)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &s.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SKUProperties.
func (s SKUProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiVersions", s.APIVersions)
	populate(objectMap, "capacity", s.Capacity)
	populate(objectMap, "costs", s.Costs)
	populate(objectMap, "dataLocationToServiceLocationMap", s.DataLocationToServiceLocationMap)
	populate(objectMap, "disabledReason", s.DisabledReason)
	populate(objectMap, "disabledReasonMessage", s.DisabledReasonMessage)
	populate(objectMap, "requiredFeature", s.RequiredFeature)
	return json.Marshal(objectMap)
}

// GetCommonScheduleAvailabilityRequest implements the CommonScheduleAvailabilityRequestClassification interface for type
// ScheduleAvailabilityRequest.
func (s *ScheduleAvailabilityRequest) GetCommonScheduleAvailabilityRequest() *CommonScheduleAvailabilityRequest {
	return &CommonScheduleAvailabilityRequest{
		StorageLocation: s.StorageLocation,
		SKUName:         s.SKUName,
		Country:         s.Country,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleAvailabilityRequest.
func (s ScheduleAvailabilityRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "country", s.Country)
	objectMap["skuName"] = SKUNameDataBox
	populate(objectMap, "storageLocation", s.StorageLocation)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleAvailabilityRequest.
func (s *ScheduleAvailabilityRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "country":
			err = unpopulate(val, &s.Country)
			delete(rawMsg, key)
		case "skuName":
			err = unpopulate(val, &s.SKUName)
			delete(rawMsg, key)
		case "storageLocation":
			err = unpopulate(val, &s.StorageLocation)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleAvailabilityResponse.
func (s ScheduleAvailabilityResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	aux := make([]*timeRFC3339, len(s.AvailableDates), len(s.AvailableDates))
	for i := 0; i < len(s.AvailableDates); i++ {
		aux[i] = (*timeRFC3339)(s.AvailableDates[i])
	}
	populate(objectMap, "availableDates", aux)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Secret.
func (s Secret) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountCredentialDetails", s.AccountCredentialDetails)
	populate(objectMap, "devicePassword", s.DevicePassword)
	populate(objectMap, "deviceSerialNumber", s.DeviceSerialNumber)
	populate(objectMap, "encodedValidationCertPubKey", s.EncodedValidationCertPubKey)
	populate(objectMap, "networkConfigurations", s.NetworkConfigurations)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ShareCredentialDetails.
func (s ShareCredentialDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "password", s.Password)
	populate(objectMap, "shareName", s.ShareName)
	populate(objectMap, "shareType", s.ShareType)
	populate(objectMap, "supportedAccessProtocols", s.SupportedAccessProtocols)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ShipmentPickUpRequest.
func (s ShipmentPickUpRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "shipmentLocation", s.ShipmentLocation)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShipmentPickUpRequest.
func (s *ShipmentPickUpRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "shipmentLocation":
			err = unpopulate(val, &s.ShipmentLocation)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShipmentPickUpResponse.
func (s ShipmentPickUpResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "confirmationNumber", s.ConfirmationNumber)
	populateTimeRFC3339(objectMap, "readyByTime", s.ReadyByTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShipmentPickUpResponse.
func (s *ShipmentPickUpResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "confirmationNumber":
			err = unpopulate(val, &s.ConfirmationNumber)
			delete(rawMsg, key)
		case "readyByTime":
			err = unpopulateTimeRFC3339(val, &s.ReadyByTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataAccountDetails implements the DataAccountDetailsClassification interface for type StorageAccountDetails.
func (s *StorageAccountDetails) GetDataAccountDetails() *DataAccountDetails {
	return &DataAccountDetails{
		DataAccountType: s.DataAccountType,
		SharePassword:   s.SharePassword,
	}
}

// MarshalJSON implements the json.Marshaller interface for type StorageAccountDetails.
func (s StorageAccountDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["dataAccountType"] = DataAccountTypeStorageAccount
	populate(objectMap, "sharePassword", s.SharePassword)
	populate(objectMap, "storageAccountId", s.StorageAccountID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StorageAccountDetails.
func (s *StorageAccountDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataAccountType":
			err = unpopulate(val, &s.DataAccountType)
			delete(rawMsg, key)
		case "sharePassword":
			err = unpopulate(val, &s.SharePassword)
			delete(rawMsg, key)
		case "storageAccountId":
			err = unpopulate(val, &s.StorageAccountID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type SubscriptionIsAllowedToCreateJobValidationRequest.
func (s *SubscriptionIsAllowedToCreateJobValidationRequest) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: s.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionIsAllowedToCreateJobValidationRequest.
func (s SubscriptionIsAllowedToCreateJobValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["validationType"] = ValidationInputDiscriminatorValidateSubscriptionIsAllowedToCreateJob
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriptionIsAllowedToCreateJobValidationRequest.
func (s *SubscriptionIsAllowedToCreateJobValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "validationType":
			err = unpopulate(val, &s.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type SubscriptionIsAllowedToCreateJobValidationResponseProperties.
func (s *SubscriptionIsAllowedToCreateJobValidationResponseProperties) GetValidationInputResponse() *ValidationInputResponse {
	return &ValidationInputResponse{
		ValidationType: s.ValidationType,
		Error:          s.Error,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionIsAllowedToCreateJobValidationResponseProperties.
func (s SubscriptionIsAllowedToCreateJobValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", s.Error)
	populate(objectMap, "status", s.Status)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateSubscriptionIsAllowedToCreateJob
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SubscriptionIsAllowedToCreateJobValidationResponseProperties.
func (s *SubscriptionIsAllowedToCreateJobValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "error":
			err = unpopulate(val, &s.Error)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &s.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TransferFilterDetails.
func (t TransferFilterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureFileFilterDetails", t.AzureFileFilterDetails)
	populate(objectMap, "blobFilterDetails", t.BlobFilterDetails)
	populate(objectMap, "dataAccountType", t.DataAccountType)
	populate(objectMap, "filterFileDetails", t.FilterFileDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TransportAvailabilityResponse.
func (t TransportAvailabilityResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "transportAvailabilityDetails", t.TransportAvailabilityDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UnencryptedCredentials.
func (u UnencryptedCredentials) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jobName", u.JobName)
	populate(objectMap, "jobSecrets", u.JobSecrets)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UnencryptedCredentials.
func (u *UnencryptedCredentials) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jobName":
			err = unpopulate(val, &u.JobName)
			delete(rawMsg, key)
		case "jobSecrets":
			u.JobSecrets, err = unmarshalCommonJobSecretsClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UnencryptedCredentialsList.
func (u UnencryptedCredentialsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", u.NextLink)
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type ValidateAddress.
func (v *ValidateAddress) GetValidationInputRequest() *ValidationInputRequest {
	return &ValidationInputRequest{
		ValidationType: v.ValidationType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ValidateAddress.
func (v ValidateAddress) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deviceType", v.DeviceType)
	populate(objectMap, "shippingAddress", v.ShippingAddress)
	populate(objectMap, "transportPreferences", v.TransportPreferences)
	objectMap["validationType"] = ValidationInputDiscriminatorValidateAddress
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ValidateAddress.
func (v *ValidateAddress) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceType":
			err = unpopulate(val, &v.DeviceType)
			delete(rawMsg, key)
		case "shippingAddress":
			err = unpopulate(val, &v.ShippingAddress)
			delete(rawMsg, key)
		case "transportPreferences":
			err = unpopulate(val, &v.TransportPreferences)
			delete(rawMsg, key)
		case "validationType":
			err = unpopulate(val, &v.ValidationType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetValidationInputRequest implements the ValidationInputRequestClassification interface for type ValidationInputRequest.
func (v *ValidationInputRequest) GetValidationInputRequest() *ValidationInputRequest { return v }

// GetValidationInputResponse implements the ValidationInputResponseClassification interface for type ValidationInputResponse.
func (v *ValidationInputResponse) GetValidationInputResponse() *ValidationInputResponse { return v }

// GetValidationRequest implements the ValidationRequestClassification interface for type ValidationRequest.
func (v *ValidationRequest) GetValidationRequest() *ValidationRequest { return v }

// MarshalJSON implements the json.Marshaller interface for type ValidationRequest.
func (v ValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "individualRequestDetails", v.IndividualRequestDetails)
	objectMap["validationCategory"] = v.ValidationCategory
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ValidationRequest.
func (v *ValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "individualRequestDetails":
			v.IndividualRequestDetails, err = unmarshalValidationInputRequestClassificationArray(val)
			delete(rawMsg, key)
		case "validationCategory":
			err = unpopulate(val, &v.ValidationCategory)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ValidationResponseProperties.
func (v ValidationResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "individualResponseDetails", v.IndividualResponseDetails)
	populate(objectMap, "status", v.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ValidationResponseProperties.
func (v *ValidationResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "individualResponseDetails":
			v.IndividualResponseDetails, err = unmarshalValidationInputResponseClassificationArray(val)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &v.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
