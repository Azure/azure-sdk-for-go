//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabox

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// DataBoxManagementClientMitigateResponse contains the response from method DataBoxManagementClient.Mitigate.
type DataBoxManagementClientMitigateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsBookShipmentPickUpResponse contains the response from method Jobs.BookShipmentPickUp.
type JobsBookShipmentPickUpResponse struct {
	JobsBookShipmentPickUpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsBookShipmentPickUpResult contains the result from method Jobs.BookShipmentPickUp.
type JobsBookShipmentPickUpResult struct {
	ShipmentPickUpResponse
}

// JobsCancelResponse contains the response from method Jobs.Cancel.
type JobsCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsCreatePollerResponse contains the response from method Jobs.Create.
type JobsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsCreateResponse, error) {
	respType := JobsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.JobResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsCreatePollerResponse from the provided client and resume token.
func (l *JobsCreatePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &JobsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsCreateResponse contains the response from method Jobs.Create.
type JobsCreateResponse struct {
	JobsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsCreateResult contains the result from method Jobs.Create.
type JobsCreateResult struct {
	JobResource
}

// JobsDeletePollerResponse contains the response from method Jobs.Delete.
type JobsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsDeleteResponse, error) {
	respType := JobsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsDeletePollerResponse from the provided client and resume token.
func (l *JobsDeletePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &JobsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsDeleteResponse contains the response from method Jobs.Delete.
type JobsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResponse contains the response from method Jobs.Get.
type JobsGetResponse struct {
	JobsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResult contains the result from method Jobs.Get.
type JobsGetResult struct {
	JobResource
}

// JobsListByResourceGroupResponse contains the response from method Jobs.ListByResourceGroup.
type JobsListByResourceGroupResponse struct {
	JobsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListByResourceGroupResult contains the result from method Jobs.ListByResourceGroup.
type JobsListByResourceGroupResult struct {
	JobResourceList
}

// JobsListCredentialsResponse contains the response from method Jobs.ListCredentials.
type JobsListCredentialsResponse struct {
	JobsListCredentialsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListCredentialsResult contains the result from method Jobs.ListCredentials.
type JobsListCredentialsResult struct {
	UnencryptedCredentialsList
}

// JobsListResponse contains the response from method Jobs.List.
type JobsListResponse struct {
	JobsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListResult contains the result from method Jobs.List.
type JobsListResult struct {
	JobResourceList
}

// JobsMarkDevicesShippedResponse contains the response from method Jobs.MarkDevicesShipped.
type JobsMarkDevicesShippedResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsUpdatePollerResponse contains the response from method Jobs.Update.
type JobsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsUpdateResponse, error) {
	respType := JobsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.JobResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsUpdatePollerResponse from the provided client and resume token.
func (l *JobsUpdatePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &JobsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsUpdateResponse contains the response from method Jobs.Update.
type JobsUpdateResponse struct {
	JobsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsUpdateResult contains the result from method Jobs.Update.
type JobsUpdateResult struct {
	JobResource
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationList
}

// ServiceListAvailableSKUsByResourceGroupResponse contains the response from method Service.ListAvailableSKUsByResourceGroup.
type ServiceListAvailableSKUsByResourceGroupResponse struct {
	ServiceListAvailableSKUsByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceListAvailableSKUsByResourceGroupResult contains the result from method Service.ListAvailableSKUsByResourceGroup.
type ServiceListAvailableSKUsByResourceGroupResult struct {
	AvailableSKUsResult
}

// ServiceRegionConfigurationByResourceGroupResponse contains the response from method Service.RegionConfigurationByResourceGroup.
type ServiceRegionConfigurationByResourceGroupResponse struct {
	ServiceRegionConfigurationByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceRegionConfigurationByResourceGroupResult contains the result from method Service.RegionConfigurationByResourceGroup.
type ServiceRegionConfigurationByResourceGroupResult struct {
	RegionConfigurationResponse
}

// ServiceRegionConfigurationResponse contains the response from method Service.RegionConfiguration.
type ServiceRegionConfigurationResponse struct {
	ServiceRegionConfigurationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceRegionConfigurationResult contains the result from method Service.RegionConfiguration.
type ServiceRegionConfigurationResult struct {
	RegionConfigurationResponse
}

// ServiceValidateAddressResponse contains the response from method Service.ValidateAddress.
type ServiceValidateAddressResponse struct {
	ServiceValidateAddressResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceValidateAddressResult contains the result from method Service.ValidateAddress.
type ServiceValidateAddressResult struct {
	AddressValidationOutput
}

// ServiceValidateInputsByResourceGroupResponse contains the response from method Service.ValidateInputsByResourceGroup.
type ServiceValidateInputsByResourceGroupResponse struct {
	ServiceValidateInputsByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceValidateInputsByResourceGroupResult contains the result from method Service.ValidateInputsByResourceGroup.
type ServiceValidateInputsByResourceGroupResult struct {
	ValidationResponse
}

// ServiceValidateInputsResponse contains the response from method Service.ValidateInputs.
type ServiceValidateInputsResponse struct {
	ServiceValidateInputsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceValidateInputsResult contains the result from method Service.ValidateInputs.
type ServiceValidateInputsResult struct {
	ValidationResponse
}
