//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatabox

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// JobsClientBookShipmentPickUpResponse contains the response from method JobsClient.BookShipmentPickUp.
type JobsClientBookShipmentPickUpResponse struct {
	JobsClientBookShipmentPickUpResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientBookShipmentPickUpResult contains the result from method JobsClient.BookShipmentPickUp.
type JobsClientBookShipmentPickUpResult struct {
	ShipmentPickUpResponse
}

// JobsClientCancelResponse contains the response from method JobsClient.Cancel.
type JobsClientCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientCreatePollerResponse contains the response from method JobsClient.Create.
type JobsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsClientCreateResponse, error) {
	respType := JobsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.JobResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsClientCreatePollerResponse from the provided client and resume token.
func (l *JobsClientCreatePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsClientCreateResponse contains the response from method JobsClient.Create.
type JobsClientCreateResponse struct {
	JobsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientCreateResult contains the result from method JobsClient.Create.
type JobsClientCreateResult struct {
	JobResource
}

// JobsClientDeletePollerResponse contains the response from method JobsClient.Delete.
type JobsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsClientDeleteResponse, error) {
	respType := JobsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsClientDeletePollerResponse from the provided client and resume token.
func (l *JobsClientDeletePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsClientDeleteResponse contains the response from method JobsClient.Delete.
type JobsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientGetResponse contains the response from method JobsClient.Get.
type JobsClientGetResponse struct {
	JobsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientGetResult contains the result from method JobsClient.Get.
type JobsClientGetResult struct {
	JobResource
}

// JobsClientListByResourceGroupResponse contains the response from method JobsClient.ListByResourceGroup.
type JobsClientListByResourceGroupResponse struct {
	JobsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListByResourceGroupResult contains the result from method JobsClient.ListByResourceGroup.
type JobsClientListByResourceGroupResult struct {
	JobResourceList
}

// JobsClientListCredentialsResponse contains the response from method JobsClient.ListCredentials.
type JobsClientListCredentialsResponse struct {
	JobsClientListCredentialsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListCredentialsResult contains the result from method JobsClient.ListCredentials.
type JobsClientListCredentialsResult struct {
	UnencryptedCredentialsList
}

// JobsClientListResponse contains the response from method JobsClient.List.
type JobsClientListResponse struct {
	JobsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListResult contains the result from method JobsClient.List.
type JobsClientListResult struct {
	JobResourceList
}

// JobsClientMarkDevicesShippedResponse contains the response from method JobsClient.MarkDevicesShipped.
type JobsClientMarkDevicesShippedResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientUpdatePollerResponse contains the response from method JobsClient.Update.
type JobsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsClientUpdateResponse, error) {
	respType := JobsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.JobResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsClientUpdatePollerResponse from the provided client and resume token.
func (l *JobsClientUpdatePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsClientUpdateResponse contains the response from method JobsClient.Update.
type JobsClientUpdateResponse struct {
	JobsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientUpdateResult contains the result from method JobsClient.Update.
type JobsClientUpdateResult struct {
	JobResource
}

// ManagementClientMitigateResponse contains the response from method ManagementClient.Mitigate.
type ManagementClientMitigateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationList
}

// ServiceClientListAvailableSKUsByResourceGroupResponse contains the response from method ServiceClient.ListAvailableSKUsByResourceGroup.
type ServiceClientListAvailableSKUsByResourceGroupResponse struct {
	ServiceClientListAvailableSKUsByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientListAvailableSKUsByResourceGroupResult contains the result from method ServiceClient.ListAvailableSKUsByResourceGroup.
type ServiceClientListAvailableSKUsByResourceGroupResult struct {
	AvailableSKUsResult
}

// ServiceClientRegionConfigurationByResourceGroupResponse contains the response from method ServiceClient.RegionConfigurationByResourceGroup.
type ServiceClientRegionConfigurationByResourceGroupResponse struct {
	ServiceClientRegionConfigurationByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientRegionConfigurationByResourceGroupResult contains the result from method ServiceClient.RegionConfigurationByResourceGroup.
type ServiceClientRegionConfigurationByResourceGroupResult struct {
	RegionConfigurationResponse
}

// ServiceClientRegionConfigurationResponse contains the response from method ServiceClient.RegionConfiguration.
type ServiceClientRegionConfigurationResponse struct {
	ServiceClientRegionConfigurationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientRegionConfigurationResult contains the result from method ServiceClient.RegionConfiguration.
type ServiceClientRegionConfigurationResult struct {
	RegionConfigurationResponse
}

// ServiceClientValidateAddressResponse contains the response from method ServiceClient.ValidateAddress.
type ServiceClientValidateAddressResponse struct {
	ServiceClientValidateAddressResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientValidateAddressResult contains the result from method ServiceClient.ValidateAddress.
type ServiceClientValidateAddressResult struct {
	AddressValidationOutput
}

// ServiceClientValidateInputsByResourceGroupResponse contains the response from method ServiceClient.ValidateInputsByResourceGroup.
type ServiceClientValidateInputsByResourceGroupResponse struct {
	ServiceClientValidateInputsByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientValidateInputsByResourceGroupResult contains the result from method ServiceClient.ValidateInputsByResourceGroup.
type ServiceClientValidateInputsByResourceGroupResult struct {
	ValidationResponse
}

// ServiceClientValidateInputsResponse contains the response from method ServiceClient.ValidateInputs.
type ServiceClientValidateInputsResponse struct {
	ServiceClientValidateInputsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceClientValidateInputsResult contains the result from method ServiceClient.ValidateInputs.
type ServiceClientValidateInputsResult struct {
	ValidationResponse
}
