//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataboxedge

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AddonsClientListByRolePager provides operations for iterating over paged responses.
type AddonsClientListByRolePager struct {
	client    *AddonsClient
	current   AddonsClientListByRoleResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AddonsClientListByRoleResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AddonsClientListByRolePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AddonsClientListByRolePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AddonList.NextLink == nil || len(*p.current.AddonList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByRoleHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AddonsClientListByRoleResponse page.
func (p *AddonsClientListByRolePager) PageResponse() AddonsClientListByRoleResponse {
	return p.current
}

// AlertsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type AlertsClientListByDataBoxEdgeDevicePager struct {
	client    *AlertsClient
	current   AlertsClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AlertsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AlertsClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AlertsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertList.NextLink == nil || len(*p.current.AlertList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AlertsClientListByDataBoxEdgeDeviceResponse page.
func (p *AlertsClientListByDataBoxEdgeDevicePager) PageResponse() AlertsClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// AvailableSKUsClientListPager provides operations for iterating over paged responses.
type AvailableSKUsClientListPager struct {
	client    *AvailableSKUsClient
	current   AvailableSKUsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailableSKUsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AvailableSKUsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AvailableSKUsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUList.NextLink == nil || len(*p.current.SKUList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AvailableSKUsClientListResponse page.
func (p *AvailableSKUsClientListPager) PageResponse() AvailableSKUsClientListResponse {
	return p.current
}

// BandwidthSchedulesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type BandwidthSchedulesClientListByDataBoxEdgeDevicePager struct {
	client    *BandwidthSchedulesClient
	current   BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BandwidthSchedulesClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BandwidthSchedulesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BandwidthSchedulesList.NextLink == nil || len(*p.current.BandwidthSchedulesList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse page.
func (p *BandwidthSchedulesClientListByDataBoxEdgeDevicePager) PageResponse() BandwidthSchedulesClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// ContainersClientListByStorageAccountPager provides operations for iterating over paged responses.
type ContainersClientListByStorageAccountPager struct {
	client    *ContainersClient
	current   ContainersClientListByStorageAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ContainersClientListByStorageAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ContainersClientListByStorageAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ContainersClientListByStorageAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContainerList.NextLink == nil || len(*p.current.ContainerList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByStorageAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ContainersClientListByStorageAccountResponse page.
func (p *ContainersClientListByStorageAccountPager) PageResponse() ContainersClientListByStorageAccountResponse {
	return p.current
}

// DevicesClientListByResourceGroupPager provides operations for iterating over paged responses.
type DevicesClientListByResourceGroupPager struct {
	client    *DevicesClient
	current   DevicesClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DevicesClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DevicesClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceList.NextLink == nil || len(*p.current.DeviceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DevicesClientListByResourceGroupResponse page.
func (p *DevicesClientListByResourceGroupPager) PageResponse() DevicesClientListByResourceGroupResponse {
	return p.current
}

// DevicesClientListBySubscriptionPager provides operations for iterating over paged responses.
type DevicesClientListBySubscriptionPager struct {
	client    *DevicesClient
	current   DevicesClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DevicesClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DevicesClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceList.NextLink == nil || len(*p.current.DeviceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DevicesClientListBySubscriptionResponse page.
func (p *DevicesClientListBySubscriptionPager) PageResponse() DevicesClientListBySubscriptionResponse {
	return p.current
}

// MonitoringConfigClientListPager provides operations for iterating over paged responses.
type MonitoringConfigClientListPager struct {
	client    *MonitoringConfigClient
	current   MonitoringConfigClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitoringConfigClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitoringConfigClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitoringConfigClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringMetricConfigurationList.NextLink == nil || len(*p.current.MonitoringMetricConfigurationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitoringConfigClientListResponse page.
func (p *MonitoringConfigClientListPager) PageResponse() MonitoringConfigClientListResponse {
	return p.current
}

// NodesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type NodesClientListByDataBoxEdgeDevicePager struct {
	client    *NodesClient
	current   NodesClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NodesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NodesClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NodesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NodeList.NextLink == nil || len(*p.current.NodeList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NodesClientListByDataBoxEdgeDeviceResponse page.
func (p *NodesClientListByDataBoxEdgeDevicePager) PageResponse() NodesClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsList.NextLink == nil || len(*p.current.OperationsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// OrdersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type OrdersClientListByDataBoxEdgeDevicePager struct {
	client    *OrdersClient
	current   OrdersClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OrdersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OrdersClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OrdersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderList.NextLink == nil || len(*p.current.OrderList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OrdersClientListByDataBoxEdgeDeviceResponse page.
func (p *OrdersClientListByDataBoxEdgeDevicePager) PageResponse() OrdersClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// RolesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type RolesClientListByDataBoxEdgeDevicePager struct {
	client    *RolesClient
	current   RolesClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RolesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RolesClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RolesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RoleList.NextLink == nil || len(*p.current.RoleList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RolesClientListByDataBoxEdgeDeviceResponse page.
func (p *RolesClientListByDataBoxEdgeDevicePager) PageResponse() RolesClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// SharesClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type SharesClientListByDataBoxEdgeDevicePager struct {
	client    *SharesClient
	current   SharesClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SharesClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SharesClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SharesClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ShareList.NextLink == nil || len(*p.current.ShareList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SharesClientListByDataBoxEdgeDeviceResponse page.
func (p *SharesClientListByDataBoxEdgeDevicePager) PageResponse() SharesClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// StorageAccountCredentialsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type StorageAccountCredentialsClientListByDataBoxEdgeDevicePager struct {
	client    *StorageAccountCredentialsClient
	current   StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StorageAccountCredentialsClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StorageAccountCredentialsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageAccountCredentialList.NextLink == nil || len(*p.current.StorageAccountCredentialList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse page.
func (p *StorageAccountCredentialsClientListByDataBoxEdgeDevicePager) PageResponse() StorageAccountCredentialsClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// StorageAccountsClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type StorageAccountsClientListByDataBoxEdgeDevicePager struct {
	client    *StorageAccountsClient
	current   StorageAccountsClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StorageAccountsClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StorageAccountsClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StorageAccountsClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageAccountList.NextLink == nil || len(*p.current.StorageAccountList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StorageAccountsClientListByDataBoxEdgeDeviceResponse page.
func (p *StorageAccountsClientListByDataBoxEdgeDevicePager) PageResponse() StorageAccountsClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// TriggersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type TriggersClientListByDataBoxEdgeDevicePager struct {
	client    *TriggersClient
	current   TriggersClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TriggersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TriggersClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TriggersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerList.NextLink == nil || len(*p.current.TriggerList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TriggersClientListByDataBoxEdgeDeviceResponse page.
func (p *TriggersClientListByDataBoxEdgeDevicePager) PageResponse() TriggersClientListByDataBoxEdgeDeviceResponse {
	return p.current
}

// UsersClientListByDataBoxEdgeDevicePager provides operations for iterating over paged responses.
type UsersClientListByDataBoxEdgeDevicePager struct {
	client    *UsersClient
	current   UsersClientListByDataBoxEdgeDeviceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsersClientListByDataBoxEdgeDeviceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *UsersClientListByDataBoxEdgeDevicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *UsersClientListByDataBoxEdgeDevicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserList.NextLink == nil || len(*p.current.UserList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDataBoxEdgeDeviceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current UsersClientListByDataBoxEdgeDeviceResponse page.
func (p *UsersClientListByDataBoxEdgeDevicePager) PageResponse() UsersClientListByDataBoxEdgeDeviceResponse {
	return p.current
}
