//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datacatalog/armdatacatalog"
)

// x-ms-original-file: specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/ListADCCatalogsByResourceGroup.json
func ExampleADCCatalogsClient_ListtByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatacatalog.NewADCCatalogsClient("<subscription-id>",
		"<catalog-name>", cred, nil)
	_, err = client.ListtByResourceGroup(ctx,
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/CreateOrUpdateADCCatalog.json
func ExampleADCCatalogsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatacatalog.NewADCCatalogsClient("<subscription-id>",
		"<catalog-name>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		armdatacatalog.ADCCatalog{
			Resource: armdatacatalog.Resource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"mykey":  to.StringPtr("myvalue"),
					"mykey2": to.StringPtr("myvalue2"),
				},
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Upn:      to.StringPtr("<upn>"),
					}},
				EnableAutomaticUnitAdjustment: to.BoolPtr(false),
				SKU:                           armdatacatalog.SKUTypeStandard.ToPtr(),
				Units:                         to.Int32Ptr(1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Upn:      to.StringPtr("<upn>"),
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("ADCCatalog.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/GetADCCatalog.json
func ExampleADCCatalogsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatacatalog.NewADCCatalogsClient("<subscription-id>",
		"<catalog-name>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("ADCCatalog.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/DeleteADCCatalog.json
func ExampleADCCatalogsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatacatalog.NewADCCatalogsClient("<subscription-id>",
		"<catalog-name>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/datacatalog/resource-manager/Microsoft.DataCatalog/stable/2016-03-30/examples/UpdateADCCatalog.json
func ExampleADCCatalogsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatacatalog.NewADCCatalogsClient("<subscription-id>",
		"<catalog-name>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		armdatacatalog.ADCCatalog{
			Resource: armdatacatalog.Resource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"mykey":  to.StringPtr("myvalue"),
					"mykey2": to.StringPtr("myvalue2"),
				},
			},
			Properties: &armdatacatalog.ADCCatalogProperties{
				Admins: []*armdatacatalog.Principals{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Upn:      to.StringPtr("<upn>"),
					}},
				EnableAutomaticUnitAdjustment: to.BoolPtr(false),
				SKU:                           armdatacatalog.SKUTypeStandard.ToPtr(),
				Units:                         to.Int32Ptr(1),
				Users: []*armdatacatalog.Principals{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Upn:      to.StringPtr("<upn>"),
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("ADCCatalog.ID: %s\n", *res.ID)
}
