//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ADCCatalogsClient contains the methods for the ADCCatalogs group.
// Don't use this type directly, use NewADCCatalogsClient() instead.
type ADCCatalogsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
	catalogName    string
}

// NewADCCatalogsClient creates a new instance of ADCCatalogsClient with the specified values.
func NewADCCatalogsClient(subscriptionID string, catalogName string, credential azcore.TokenCredential, options *arm.ClientOptions) *ADCCatalogsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ADCCatalogsClient{subscriptionID: subscriptionID, catalogName: catalogName, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - The Create Azure Data Catalog service operation creates a new data catalog service with the specified parameters. If the specific service
// already exists, then any patchable properties will be updated
// and any immutable properties will remain unchanged.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, properties ADCCatalog, options *ADCCatalogsCreateOrUpdateOptions) (ADCCatalogsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, properties, options)
	if err != nil {
		return ADCCatalogsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ADCCatalogsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return ADCCatalogsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ADCCatalogsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, properties ADCCatalog, options *ADCCatalogsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.catalogName == "" {
		return nil, errors.New("parameter client.catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(client.catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ADCCatalogsClient) createOrUpdateHandleResponse(resp *http.Response) (ADCCatalogsCreateOrUpdateResponse, error) {
	result := ADCCatalogsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ADCCatalog); err != nil {
		return ADCCatalogsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *ADCCatalogsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// BeginDelete - The Delete Azure Data Catalog Service operation deletes an existing data catalog.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) BeginDelete(ctx context.Context, resourceGroupName string, options *ADCCatalogsBeginDeleteOptions) (ADCCatalogsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, options)
	if err != nil {
		return ADCCatalogsDeletePollerResponse{}, err
	}
	result := ADCCatalogsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ADCCatalogsClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return ADCCatalogsDeletePollerResponse{}, err
	}
	result.Poller = &ADCCatalogsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - The Delete Azure Data Catalog Service operation deletes an existing data catalog.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) deleteOperation(ctx context.Context, resourceGroupName string, options *ADCCatalogsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ADCCatalogsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *ADCCatalogsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.catalogName == "" {
		return nil, errors.New("parameter client.catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(client.catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ADCCatalogsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - The Get Azure Data Catalog Service operation retrieves a json representation of the data catalog.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) Get(ctx context.Context, resourceGroupName string, options *ADCCatalogsGetOptions) (ADCCatalogsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return ADCCatalogsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ADCCatalogsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ADCCatalogsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ADCCatalogsClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *ADCCatalogsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.catalogName == "" {
		return nil, errors.New("parameter client.catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(client.catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ADCCatalogsClient) getHandleResponse(resp *http.Response) (ADCCatalogsGetResponse, error) {
	result := ADCCatalogsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ADCCatalog); err != nil {
		return ADCCatalogsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ADCCatalogsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListtByResourceGroup - The List catalogs in Resource Group operation lists all the Azure Data Catalogs available under the given resource group.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) ListtByResourceGroup(ctx context.Context, resourceGroupName string, options *ADCCatalogsListtByResourceGroupOptions) (ADCCatalogsListtByResourceGroupResponse, error) {
	req, err := client.listtByResourceGroupCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return ADCCatalogsListtByResourceGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ADCCatalogsListtByResourceGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ADCCatalogsListtByResourceGroupResponse{}, client.listtByResourceGroupHandleError(resp)
	}
	return client.listtByResourceGroupHandleResponse(resp)
}

// listtByResourceGroupCreateRequest creates the ListtByResourceGroup request.
func (client *ADCCatalogsClient) listtByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *ADCCatalogsListtByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listtByResourceGroupHandleResponse handles the ListtByResourceGroup response.
func (client *ADCCatalogsClient) listtByResourceGroupHandleResponse(resp *http.Response) (ADCCatalogsListtByResourceGroupResponse, error) {
	result := ADCCatalogsListtByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ADCCatalogsListResult); err != nil {
		return ADCCatalogsListtByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listtByResourceGroupHandleError handles the ListtByResourceGroup error response.
func (client *ADCCatalogsClient) listtByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Update - The Update Azure Data Catalog Service operation can be used to update the existing deployment. The update call only supports the properties
// listed in the PATCH body.
// If the operation fails it returns a generic error.
func (client *ADCCatalogsClient) Update(ctx context.Context, resourceGroupName string, properties ADCCatalog, options *ADCCatalogsUpdateOptions) (ADCCatalogsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, properties, options)
	if err != nil {
		return ADCCatalogsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ADCCatalogsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ADCCatalogsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *ADCCatalogsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, properties ADCCatalog, options *ADCCatalogsUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCatalog/catalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.catalogName == "" {
		return nil, errors.New("parameter client.catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(client.catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// updateHandleResponse handles the Update response.
func (client *ADCCatalogsClient) updateHandleResponse(resp *http.Response) (ADCCatalogsUpdateResponse, error) {
	result := ADCCatalogsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ADCCatalog); err != nil {
		return ADCCatalogsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *ADCCatalogsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
