//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ADCOperationsClient contains the methods for the ADCOperations group.
// Don't use this type directly, use NewADCOperationsClient() instead.
type ADCOperationsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewADCOperationsClient creates a new instance of ADCOperationsClient with the specified values.
func NewADCOperationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ADCOperationsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ADCOperationsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// List - Lists all the available Azure Data Catalog service operations.
// If the operation fails it returns a generic error.
func (client *ADCOperationsClient) List(ctx context.Context, options *ADCOperationsListOptions) (ADCOperationsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return ADCOperationsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ADCOperationsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ADCOperationsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *ADCOperationsClient) listCreateRequest(ctx context.Context, options *ADCOperationsListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataCatalog/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-03-30")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ADCOperationsClient) listHandleResponse(resp *http.Response) (ADCOperationsListResponse, error) {
	result := ADCOperationsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationEntityListResult); err != nil {
		return ADCOperationsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *ADCOperationsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
