//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatacatalog

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// ADCCatalog - Azure Data Catalog.
type ADCCatalog struct {
	Resource
	// Azure Data Catalog properties.
	Properties *ADCCatalogProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADCCatalog.
func (a ADCCatalog) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// ADCCatalogProperties - Properties of the data catalog.
type ADCCatalogProperties struct {
	// Azure data catalog admin list.
	Admins []*Principals `json:"admins,omitempty"`

	// Automatic unit adjustment enabled or not.
	EnableAutomaticUnitAdjustment *bool `json:"enableAutomaticUnitAdjustment,omitempty"`

	// Azure data catalog SKU.
	SKU *SKUType `json:"sku,omitempty"`

	// Azure data catalog provision status.
	SuccessfullyProvisioned *bool `json:"successfullyProvisioned,omitempty"`

	// Azure data catalog units.
	Units *int32 `json:"units,omitempty"`

	// Azure data catalog user list.
	Users []*Principals `json:"users,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADCCatalogProperties.
func (a ADCCatalogProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "admins", a.Admins)
	populate(objectMap, "enableAutomaticUnitAdjustment", a.EnableAutomaticUnitAdjustment)
	populate(objectMap, "sku", a.SKU)
	populate(objectMap, "successfullyProvisioned", a.SuccessfullyProvisioned)
	populate(objectMap, "units", a.Units)
	populate(objectMap, "users", a.Users)
	return json.Marshal(objectMap)
}

// ADCCatalogsBeginDeleteOptions contains the optional parameters for the ADCCatalogs.BeginDelete method.
type ADCCatalogsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ADCCatalogsCreateOrUpdateOptions contains the optional parameters for the ADCCatalogs.CreateOrUpdate method.
type ADCCatalogsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ADCCatalogsGetOptions contains the optional parameters for the ADCCatalogs.Get method.
type ADCCatalogsGetOptions struct {
	// placeholder for future optional parameters
}

// ADCCatalogsListResult - The response from the List Azure Data Catalog operation.
type ADCCatalogsListResult struct {
	// the list of Azure Data Catalogs.
	Value []*ADCCatalog `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADCCatalogsListResult.
func (a ADCCatalogsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ADCCatalogsListtByResourceGroupOptions contains the optional parameters for the ADCCatalogs.ListtByResourceGroup method.
type ADCCatalogsListtByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ADCCatalogsUpdateOptions contains the optional parameters for the ADCCatalogs.Update method.
type ADCCatalogsUpdateOptions struct {
	// placeholder for future optional parameters
}

// ADCOperationsListOptions contains the optional parameters for the ADCOperations.List method.
type ADCOperationsListOptions struct {
	// placeholder for future optional parameters
}

// OperationDisplayInfo - The operation supported by Azure Data Catalog Service.
type OperationDisplayInfo struct {
	// The description of the operation.
	Description *string `json:"description,omitempty"`

	// The action that users can perform, based on their permission level.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Azure Data Catalog Service.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationEntity - The operation supported by Azure Data Catalog Service.
type OperationEntity struct {
	// The operation supported by Azure Data Catalog Service.
	Display *OperationDisplayInfo `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`
}

// OperationEntityListResult - The list of Azure data catalog service operation response.
type OperationEntityListResult struct {
	// The list of operations.
	Value []*OperationEntity `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationEntityListResult.
func (o OperationEntityListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// Principals - User principals.
type Principals struct {
	// Object Id for the user
	ObjectID *string `json:"objectId,omitempty"`

	// UPN of the user.
	Upn *string `json:"upn,omitempty"`
}

// Resource - The Resource model definition.
type Resource struct {
	// Resource etag
	Etag *string `json:"etag,omitempty"`

	// Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "etag", r.Etag)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
