//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatadog

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MarketplaceAgreementsListPager provides operations for iterating over paged responses.
type MarketplaceAgreementsListPager struct {
	client    *MarketplaceAgreementsClient
	current   MarketplaceAgreementsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MarketplaceAgreementsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MarketplaceAgreementsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MarketplaceAgreementsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogAgreementResourceListResponse.NextLink == nil || len(*p.current.DatadogAgreementResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MarketplaceAgreementsListResponse page.
func (p *MarketplaceAgreementsListPager) PageResponse() MarketplaceAgreementsListResponse {
	return p.current
}

// MonitorsListAPIKeysPager provides operations for iterating over paged responses.
type MonitorsListAPIKeysPager struct {
	client    *MonitorsClient
	current   MonitorsListAPIKeysResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListAPIKeysResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListAPIKeysPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListAPIKeysPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogAPIKeyListResponse.NextLink == nil || len(*p.current.DatadogAPIKeyListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAPIKeysHandleError(resp)
		return false
	}
	result, err := p.client.listAPIKeysHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListAPIKeysResponse page.
func (p *MonitorsListAPIKeysPager) PageResponse() MonitorsListAPIKeysResponse {
	return p.current
}

// MonitorsListByResourceGroupPager provides operations for iterating over paged responses.
type MonitorsListByResourceGroupPager struct {
	client    *MonitorsClient
	current   MonitorsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogMonitorResourceListResponse.NextLink == nil || len(*p.current.DatadogMonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListByResourceGroupResponse page.
func (p *MonitorsListByResourceGroupPager) PageResponse() MonitorsListByResourceGroupResponse {
	return p.current
}

// MonitorsListHostsPager provides operations for iterating over paged responses.
type MonitorsListHostsPager struct {
	client    *MonitorsClient
	current   MonitorsListHostsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListHostsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListHostsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListHostsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogHostListResponse.NextLink == nil || len(*p.current.DatadogHostListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHostsHandleError(resp)
		return false
	}
	result, err := p.client.listHostsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListHostsResponse page.
func (p *MonitorsListHostsPager) PageResponse() MonitorsListHostsResponse {
	return p.current
}

// MonitorsListLinkedResourcesPager provides operations for iterating over paged responses.
type MonitorsListLinkedResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsListLinkedResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListLinkedResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListLinkedResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListLinkedResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedResourceListResponse.NextLink == nil || len(*p.current.LinkedResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listLinkedResourcesHandleError(resp)
		return false
	}
	result, err := p.client.listLinkedResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListLinkedResourcesResponse page.
func (p *MonitorsListLinkedResourcesPager) PageResponse() MonitorsListLinkedResourcesResponse {
	return p.current
}

// MonitorsListMonitoredResourcesPager provides operations for iterating over paged responses.
type MonitorsListMonitoredResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsListMonitoredResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListMonitoredResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListMonitoredResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListMonitoredResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMonitoredResourcesHandleError(resp)
		return false
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListMonitoredResourcesResponse page.
func (p *MonitorsListMonitoredResourcesPager) PageResponse() MonitorsListMonitoredResourcesResponse {
	return p.current
}

// MonitorsListPager provides operations for iterating over paged responses.
type MonitorsListPager struct {
	client    *MonitorsClient
	current   MonitorsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogMonitorResourceListResponse.NextLink == nil || len(*p.current.DatadogMonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListResponse page.
func (p *MonitorsListPager) PageResponse() MonitorsListResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// SingleSignOnConfigurationsListPager provides operations for iterating over paged responses.
type SingleSignOnConfigurationsListPager struct {
	client    *SingleSignOnConfigurationsClient
	current   SingleSignOnConfigurationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SingleSignOnConfigurationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SingleSignOnConfigurationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SingleSignOnConfigurationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatadogSingleSignOnResourceListResponse.NextLink == nil || len(*p.current.DatadogSingleSignOnResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SingleSignOnConfigurationsListResponse page.
func (p *SingleSignOnConfigurationsListPager) PageResponse() SingleSignOnConfigurationsListResponse {
	return p.current
}

// TagRulesListPager provides operations for iterating over paged responses.
type TagRulesListPager struct {
	client    *TagRulesClient
	current   TagRulesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TagRulesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TagRulesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TagRulesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TagRulesListResponse page.
func (p *TagRulesListPager) PageResponse() TagRulesListResponse {
	return p.current
}
