//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

// ActivityRunsClientQueryByPipelineRunOptions contains the optional parameters for the ActivityRunsClient.QueryByPipelineRun
// method.
type ActivityRunsClientQueryByPipelineRunOptions struct {
	// placeholder for future optional parameters
}

// ChangeDataCaptureClientCreateOrUpdateOptions contains the optional parameters for the ChangeDataCaptureClient.CreateOrUpdate
// method.
type ChangeDataCaptureClientCreateOrUpdateOptions struct {
	// ETag of the change data capture entity. Should only be specified for update, for which it should match existing entity
	// or can be * for unconditional update.
	IfMatch *string
}

// ChangeDataCaptureClientDeleteOptions contains the optional parameters for the ChangeDataCaptureClient.Delete method.
type ChangeDataCaptureClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ChangeDataCaptureClientGetOptions contains the optional parameters for the ChangeDataCaptureClient.Get method.
type ChangeDataCaptureClientGetOptions struct {
	// ETag of the change data capture entity. Should only be specified for get. If the ETag matches the existing entity tag,
	// or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// ChangeDataCaptureClientListByFactoryOptions contains the optional parameters for the ChangeDataCaptureClient.NewListByFactoryPager
// method.
type ChangeDataCaptureClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// ChangeDataCaptureClientStartOptions contains the optional parameters for the ChangeDataCaptureClient.Start method.
type ChangeDataCaptureClientStartOptions struct {
	// placeholder for future optional parameters
}

// ChangeDataCaptureClientStatusOptions contains the optional parameters for the ChangeDataCaptureClient.Status method.
type ChangeDataCaptureClientStatusOptions struct {
	// placeholder for future optional parameters
}

// ChangeDataCaptureClientStopOptions contains the optional parameters for the ChangeDataCaptureClient.Stop method.
type ChangeDataCaptureClientStopOptions struct {
	// placeholder for future optional parameters
}

// CredentialOperationsClientCreateOrUpdateOptions contains the optional parameters for the CredentialOperationsClient.CreateOrUpdate
// method.
type CredentialOperationsClientCreateOrUpdateOptions struct {
	// ETag of the credential entity. Should only be specified for update, for which it should match existing entity or can be
	// * for unconditional update.
	IfMatch *string
}

// CredentialOperationsClientDeleteOptions contains the optional parameters for the CredentialOperationsClient.Delete method.
type CredentialOperationsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// CredentialOperationsClientGetOptions contains the optional parameters for the CredentialOperationsClient.Get method.
type CredentialOperationsClientGetOptions struct {
	// ETag of the credential entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// CredentialOperationsClientListByFactoryOptions contains the optional parameters for the CredentialOperationsClient.NewListByFactoryPager
// method.
type CredentialOperationsClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientAddDataFlowOptions contains the optional parameters for the DataFlowDebugSessionClient.AddDataFlow
// method.
type DataFlowDebugSessionClientAddDataFlowOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientBeginCreateOptions contains the optional parameters for the DataFlowDebugSessionClient.BeginCreate
// method.
type DataFlowDebugSessionClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DataFlowDebugSessionClientBeginExecuteCommandOptions contains the optional parameters for the DataFlowDebugSessionClient.BeginExecuteCommand
// method.
type DataFlowDebugSessionClientBeginExecuteCommandOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DataFlowDebugSessionClientDeleteOptions contains the optional parameters for the DataFlowDebugSessionClient.Delete method.
type DataFlowDebugSessionClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataFlowDebugSessionClientQueryByFactoryOptions contains the optional parameters for the DataFlowDebugSessionClient.NewQueryByFactoryPager
// method.
type DataFlowDebugSessionClientQueryByFactoryOptions struct {
	// placeholder for future optional parameters
}

// DataFlowsClientCreateOrUpdateOptions contains the optional parameters for the DataFlowsClient.CreateOrUpdate method.
type DataFlowsClientCreateOrUpdateOptions struct {
	// ETag of the data flow entity. Should only be specified for update, for which it should match existing entity or can be
	// * for unconditional update.
	IfMatch *string
}

// DataFlowsClientDeleteOptions contains the optional parameters for the DataFlowsClient.Delete method.
type DataFlowsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataFlowsClientGetOptions contains the optional parameters for the DataFlowsClient.Get method.
type DataFlowsClientGetOptions struct {
	// ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// DataFlowsClientListByFactoryOptions contains the optional parameters for the DataFlowsClient.NewListByFactoryPager method.
type DataFlowsClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// DatasetsClientCreateOrUpdateOptions contains the optional parameters for the DatasetsClient.CreateOrUpdate method.
type DatasetsClientCreateOrUpdateOptions struct {
	// ETag of the dataset entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string
}

// DatasetsClientDeleteOptions contains the optional parameters for the DatasetsClient.Delete method.
type DatasetsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DatasetsClientGetOptions contains the optional parameters for the DatasetsClient.Get method.
type DatasetsClientGetOptions struct {
	// ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// DatasetsClientListByFactoryOptions contains the optional parameters for the DatasetsClient.NewListByFactoryPager method.
type DatasetsClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// ExposureControlClientGetFeatureValueByFactoryOptions contains the optional parameters for the ExposureControlClient.GetFeatureValueByFactory
// method.
type ExposureControlClientGetFeatureValueByFactoryOptions struct {
	// placeholder for future optional parameters
}

// ExposureControlClientGetFeatureValueOptions contains the optional parameters for the ExposureControlClient.GetFeatureValue
// method.
type ExposureControlClientGetFeatureValueOptions struct {
	// placeholder for future optional parameters
}

// ExposureControlClientQueryFeatureValuesByFactoryOptions contains the optional parameters for the ExposureControlClient.QueryFeatureValuesByFactory
// method.
type ExposureControlClientQueryFeatureValuesByFactoryOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientConfigureFactoryRepoOptions contains the optional parameters for the FactoriesClient.ConfigureFactoryRepo
// method.
type FactoriesClientConfigureFactoryRepoOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientCreateOrUpdateOptions contains the optional parameters for the FactoriesClient.CreateOrUpdate method.
type FactoriesClientCreateOrUpdateOptions struct {
	// ETag of the factory entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string
}

// FactoriesClientDeleteOptions contains the optional parameters for the FactoriesClient.Delete method.
type FactoriesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientGetDataPlaneAccessOptions contains the optional parameters for the FactoriesClient.GetDataPlaneAccess method.
type FactoriesClientGetDataPlaneAccessOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientGetGitHubAccessTokenOptions contains the optional parameters for the FactoriesClient.GetGitHubAccessToken
// method.
type FactoriesClientGetGitHubAccessTokenOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientGetOptions contains the optional parameters for the FactoriesClient.Get method.
type FactoriesClientGetOptions struct {
	// ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// FactoriesClientListByResourceGroupOptions contains the optional parameters for the FactoriesClient.NewListByResourceGroupPager
// method.
type FactoriesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientListOptions contains the optional parameters for the FactoriesClient.NewListPager method.
type FactoriesClientListOptions struct {
	// placeholder for future optional parameters
}

// FactoriesClientUpdateOptions contains the optional parameters for the FactoriesClient.Update method.
type FactoriesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// GlobalParametersClientCreateOrUpdateOptions contains the optional parameters for the GlobalParametersClient.CreateOrUpdate
// method.
type GlobalParametersClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// GlobalParametersClientDeleteOptions contains the optional parameters for the GlobalParametersClient.Delete method.
type GlobalParametersClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// GlobalParametersClientGetOptions contains the optional parameters for the GlobalParametersClient.Get method.
type GlobalParametersClientGetOptions struct {
	// placeholder for future optional parameters
}

// GlobalParametersClientListByFactoryOptions contains the optional parameters for the GlobalParametersClient.NewListByFactoryPager
// method.
type GlobalParametersClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimeNodesClientDeleteOptions contains the optional parameters for the IntegrationRuntimeNodesClient.Delete
// method.
type IntegrationRuntimeNodesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimeNodesClientGetIPAddressOptions contains the optional parameters for the IntegrationRuntimeNodesClient.GetIPAddress
// method.
type IntegrationRuntimeNodesClientGetIPAddressOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimeNodesClientGetOptions contains the optional parameters for the IntegrationRuntimeNodesClient.Get method.
type IntegrationRuntimeNodesClientGetOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimeNodesClientUpdateOptions contains the optional parameters for the IntegrationRuntimeNodesClient.Update
// method.
type IntegrationRuntimeNodesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimeObjectMetadataClientBeginRefreshOptions contains the optional parameters for the IntegrationRuntimeObjectMetadataClient.BeginRefresh
// method.
type IntegrationRuntimeObjectMetadataClientBeginRefreshOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IntegrationRuntimeObjectMetadataClientGetOptions contains the optional parameters for the IntegrationRuntimeObjectMetadataClient.Get
// method.
type IntegrationRuntimeObjectMetadataClientGetOptions struct {
	// The parameters for getting a SSIS object metadata.
	GetMetadataRequest *GetSsisObjectMetadataRequest
}

// IntegrationRuntimesClientBeginStartOptions contains the optional parameters for the IntegrationRuntimesClient.BeginStart
// method.
type IntegrationRuntimesClientBeginStartOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IntegrationRuntimesClientBeginStopOptions contains the optional parameters for the IntegrationRuntimesClient.BeginStop
// method.
type IntegrationRuntimesClientBeginStopOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IntegrationRuntimesClientCreateLinkedIntegrationRuntimeOptions contains the optional parameters for the IntegrationRuntimesClient.CreateLinkedIntegrationRuntime
// method.
type IntegrationRuntimesClientCreateLinkedIntegrationRuntimeOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientCreateOrUpdateOptions contains the optional parameters for the IntegrationRuntimesClient.CreateOrUpdate
// method.
type IntegrationRuntimesClientCreateOrUpdateOptions struct {
	// ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity
	// or can be * for unconditional update.
	IfMatch *string
}

// IntegrationRuntimesClientDeleteOptions contains the optional parameters for the IntegrationRuntimesClient.Delete method.
type IntegrationRuntimesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientGetConnectionInfoOptions contains the optional parameters for the IntegrationRuntimesClient.GetConnectionInfo
// method.
type IntegrationRuntimesClientGetConnectionInfoOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientGetMonitoringDataOptions contains the optional parameters for the IntegrationRuntimesClient.GetMonitoringData
// method.
type IntegrationRuntimesClientGetMonitoringDataOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientGetOptions contains the optional parameters for the IntegrationRuntimesClient.Get method.
type IntegrationRuntimesClientGetOptions struct {
	// ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag,
	// or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// IntegrationRuntimesClientGetStatusOptions contains the optional parameters for the IntegrationRuntimesClient.GetStatus
// method.
type IntegrationRuntimesClientGetStatusOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientListAuthKeysOptions contains the optional parameters for the IntegrationRuntimesClient.ListAuthKeys
// method.
type IntegrationRuntimesClientListAuthKeysOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientListByFactoryOptions contains the optional parameters for the IntegrationRuntimesClient.NewListByFactoryPager
// method.
type IntegrationRuntimesClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientListOutboundNetworkDependenciesEndpointsOptions contains the optional parameters for the IntegrationRuntimesClient.ListOutboundNetworkDependenciesEndpoints
// method.
type IntegrationRuntimesClientListOutboundNetworkDependenciesEndpointsOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientRegenerateAuthKeyOptions contains the optional parameters for the IntegrationRuntimesClient.RegenerateAuthKey
// method.
type IntegrationRuntimesClientRegenerateAuthKeyOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientRemoveLinksOptions contains the optional parameters for the IntegrationRuntimesClient.RemoveLinks
// method.
type IntegrationRuntimesClientRemoveLinksOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientSyncCredentialsOptions contains the optional parameters for the IntegrationRuntimesClient.SyncCredentials
// method.
type IntegrationRuntimesClientSyncCredentialsOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientUpdateOptions contains the optional parameters for the IntegrationRuntimesClient.Update method.
type IntegrationRuntimesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// IntegrationRuntimesClientUpgradeOptions contains the optional parameters for the IntegrationRuntimesClient.Upgrade method.
type IntegrationRuntimesClientUpgradeOptions struct {
	// placeholder for future optional parameters
}

// LinkedServicesClientCreateOrUpdateOptions contains the optional parameters for the LinkedServicesClient.CreateOrUpdate
// method.
type LinkedServicesClientCreateOrUpdateOptions struct {
	// ETag of the linkedService entity. Should only be specified for update, for which it should match existing entity or can
	// be * for unconditional update.
	IfMatch *string
}

// LinkedServicesClientDeleteOptions contains the optional parameters for the LinkedServicesClient.Delete method.
type LinkedServicesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedServicesClientGetOptions contains the optional parameters for the LinkedServicesClient.Get method.
type LinkedServicesClientGetOptions struct {
	// ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if
	// * was provided, then no content will be returned.
	IfNoneMatch *string
}

// LinkedServicesClientListByFactoryOptions contains the optional parameters for the LinkedServicesClient.NewListByFactoryPager
// method.
type LinkedServicesClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// ManagedPrivateEndpointsClientCreateOrUpdateOptions contains the optional parameters for the ManagedPrivateEndpointsClient.CreateOrUpdate
// method.
type ManagedPrivateEndpointsClientCreateOrUpdateOptions struct {
	// ETag of the managed private endpoint entity. Should only be specified for update, for which it should match existing entity
	// or can be * for unconditional update.
	IfMatch *string
}

// ManagedPrivateEndpointsClientDeleteOptions contains the optional parameters for the ManagedPrivateEndpointsClient.Delete
// method.
type ManagedPrivateEndpointsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ManagedPrivateEndpointsClientGetOptions contains the optional parameters for the ManagedPrivateEndpointsClient.Get method.
type ManagedPrivateEndpointsClientGetOptions struct {
	// ETag of the managed private endpoint entity. Should only be specified for get. If the ETag matches the existing entity
	// tag, or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// ManagedPrivateEndpointsClientListByFactoryOptions contains the optional parameters for the ManagedPrivateEndpointsClient.NewListByFactoryPager
// method.
type ManagedPrivateEndpointsClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// ManagedVirtualNetworksClientCreateOrUpdateOptions contains the optional parameters for the ManagedVirtualNetworksClient.CreateOrUpdate
// method.
type ManagedVirtualNetworksClientCreateOrUpdateOptions struct {
	// ETag of the managed Virtual Network entity. Should only be specified for update, for which it should match existing entity
	// or can be * for unconditional update.
	IfMatch *string
}

// ManagedVirtualNetworksClientGetOptions contains the optional parameters for the ManagedVirtualNetworksClient.Get method.
type ManagedVirtualNetworksClientGetOptions struct {
	// ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag,
	// or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// ManagedVirtualNetworksClientListByFactoryOptions contains the optional parameters for the ManagedVirtualNetworksClient.NewListByFactoryPager
// method.
type ManagedVirtualNetworksClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// PipelineRunsClientCancelOptions contains the optional parameters for the PipelineRunsClient.Cancel method.
type PipelineRunsClientCancelOptions struct {
	// If true, cancel all the Child pipelines that are triggered by the current pipeline.
	IsRecursive *bool
}

// PipelineRunsClientGetOptions contains the optional parameters for the PipelineRunsClient.Get method.
type PipelineRunsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PipelineRunsClientQueryByFactoryOptions contains the optional parameters for the PipelineRunsClient.QueryByFactory method.
type PipelineRunsClientQueryByFactoryOptions struct {
	// placeholder for future optional parameters
}

// PipelinesClientCreateOrUpdateOptions contains the optional parameters for the PipelinesClient.CreateOrUpdate method.
type PipelinesClientCreateOrUpdateOptions struct {
	// ETag of the pipeline entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string
}

// PipelinesClientCreateRunOptions contains the optional parameters for the PipelinesClient.CreateRun method.
type PipelinesClientCreateRunOptions struct {
	// Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped
	// under the same groupId.
	IsRecovery *bool

	// Parameters of the pipeline run. These parameters will be used only if the runId is not specified.
	Parameters map[string]any

	// The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run.
	ReferencePipelineRunID *string

	// In recovery mode, the rerun will start from this activity. If not specified, all activities will run.
	StartActivityName *string

	// In recovery mode, if set to true, the rerun will start from failed activities. The property will be used only if startActivityName
	// is not specified.
	StartFromFailure *bool
}

// PipelinesClientDeleteOptions contains the optional parameters for the PipelinesClient.Delete method.
type PipelinesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PipelinesClientGetOptions contains the optional parameters for the PipelinesClient.Get method.
type PipelinesClientGetOptions struct {
	// ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// PipelinesClientListByFactoryOptions contains the optional parameters for the PipelinesClient.NewListByFactoryPager method.
type PipelinesClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndPointConnectionsClientListByFactoryOptions contains the optional parameters for the PrivateEndPointConnectionsClient.NewListByFactoryPager
// method.
type PrivateEndPointConnectionsClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionClientCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnectionClient.CreateOrUpdate
// method.
type PrivateEndpointConnectionClientCreateOrUpdateOptions struct {
	// ETag of the private endpoint connection entity. Should only be specified for update, for which it should match existing
	// entity or can be * for unconditional update.
	IfMatch *string
}

// PrivateEndpointConnectionClientDeleteOptions contains the optional parameters for the PrivateEndpointConnectionClient.Delete
// method.
type PrivateEndpointConnectionClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionClientGetOptions contains the optional parameters for the PrivateEndpointConnectionClient.Get
// method.
type PrivateEndpointConnectionClientGetOptions struct {
	// ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity
	// tag, or if * was provided, then no content will be returned.
	IfNoneMatch *string
}

// PrivateLinkResourcesClientGetOptions contains the optional parameters for the PrivateLinkResourcesClient.Get method.
type PrivateLinkResourcesClientGetOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunsClientCancelOptions contains the optional parameters for the TriggerRunsClient.Cancel method.
type TriggerRunsClientCancelOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunsClientQueryByFactoryOptions contains the optional parameters for the TriggerRunsClient.QueryByFactory method.
type TriggerRunsClientQueryByFactoryOptions struct {
	// placeholder for future optional parameters
}

// TriggerRunsClientRerunOptions contains the optional parameters for the TriggerRunsClient.Rerun method.
type TriggerRunsClientRerunOptions struct {
	// placeholder for future optional parameters
}

// TriggersClientBeginStartOptions contains the optional parameters for the TriggersClient.BeginStart method.
type TriggersClientBeginStartOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TriggersClientBeginStopOptions contains the optional parameters for the TriggersClient.BeginStop method.
type TriggersClientBeginStopOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TriggersClientBeginSubscribeToEventsOptions contains the optional parameters for the TriggersClient.BeginSubscribeToEvents
// method.
type TriggersClientBeginSubscribeToEventsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TriggersClientBeginUnsubscribeFromEventsOptions contains the optional parameters for the TriggersClient.BeginUnsubscribeFromEvents
// method.
type TriggersClientBeginUnsubscribeFromEventsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TriggersClientCreateOrUpdateOptions contains the optional parameters for the TriggersClient.CreateOrUpdate method.
type TriggersClientCreateOrUpdateOptions struct {
	// ETag of the trigger entity. Should only be specified for update, for which it should match existing entity or can be *
	// for unconditional update.
	IfMatch *string
}

// TriggersClientDeleteOptions contains the optional parameters for the TriggersClient.Delete method.
type TriggersClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// TriggersClientGetEventSubscriptionStatusOptions contains the optional parameters for the TriggersClient.GetEventSubscriptionStatus
// method.
type TriggersClientGetEventSubscriptionStatusOptions struct {
	// placeholder for future optional parameters
}

// TriggersClientGetOptions contains the optional parameters for the TriggersClient.Get method.
type TriggersClientGetOptions struct {
	// ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was
	// provided, then no content will be returned.
	IfNoneMatch *string
}

// TriggersClientListByFactoryOptions contains the optional parameters for the TriggersClient.NewListByFactoryPager method.
type TriggersClientListByFactoryOptions struct {
	// placeholder for future optional parameters
}

// TriggersClientQueryByFactoryOptions contains the optional parameters for the TriggersClient.QueryByFactory method.
type TriggersClientQueryByFactoryOptions struct {
	// placeholder for future optional parameters
}
