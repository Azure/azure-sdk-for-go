//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datafactory/armdatafactory"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Create.json
func ExampleDataFlowDebugSessionClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armdatafactory.NewDataFlowDebugSessionClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<factory-name>",
		armdatafactory.CreateDataFlowDebugSessionRequest{
			IntegrationRuntime: &armdatafactory.IntegrationRuntimeDebugResource{
				Name: to.Ptr("<name>"),
				Properties: &armdatafactory.ManagedIntegrationRuntime{
					Type: to.Ptr(armdatafactory.IntegrationRuntimeTypeManaged),
					TypeProperties: &armdatafactory.ManagedIntegrationRuntimeTypeProperties{
						ComputeProperties: &armdatafactory.IntegrationRuntimeComputeProperties{
							DataFlowProperties: &armdatafactory.IntegrationRuntimeDataFlowProperties{
								ComputeType: to.Ptr(armdatafactory.DataFlowComputeTypeGeneral),
								CoreCount:   to.Ptr[int32](48),
								TimeToLive:  to.Ptr[int32](10),
							},
							Location: to.Ptr("<location>"),
						},
					},
				},
			},
			TimeToLive: to.Ptr[int32](60),
		},
		&armdatafactory.DataFlowDebugSessionClientBeginCreateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_QueryByFactory.json
func ExampleDataFlowDebugSessionClient_QueryByFactory() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armdatafactory.NewDataFlowDebugSessionClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	pager := client.QueryByFactory("<resource-group-name>",
		"<factory-name>",
		nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
			return
		}
		for _, v := range nextResult.Value {
			// TODO: use page item
			_ = v
		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_AddDataFlow.json
func ExampleDataFlowDebugSessionClient_AddDataFlow() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armdatafactory.NewDataFlowDebugSessionClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.AddDataFlow(ctx,
		"<resource-group-name>",
		"<factory-name>",
		armdatafactory.DataFlowDebugPackage{
			DataFlow: &armdatafactory.DataFlowDebugResource{
				Name: to.Ptr("<name>"),
				Properties: &armdatafactory.MappingDataFlow{
					Type: to.Ptr("<type>"),
					TypeProperties: &armdatafactory.MappingDataFlowTypeProperties{
						Script: to.Ptr("<script>"),
						Sinks:  []*armdatafactory.DataFlowSink{},
						Sources: []*armdatafactory.DataFlowSource{
							{
								Name: to.Ptr("<name>"),
								Dataset: &armdatafactory.DatasetReference{
									Type:          to.Ptr(armdatafactory.DatasetReferenceTypeDatasetReference),
									ReferenceName: to.Ptr("<reference-name>"),
								},
							}},
						Transformations: []*armdatafactory.Transformation{},
					},
				},
			},
			Datasets: []*armdatafactory.DatasetDebugResource{
				{
					Name: to.Ptr("<name>"),
					Properties: &armdatafactory.DelimitedTextDataset{
						Type: to.Ptr("<type>"),
						Schema: []interface{}{
							map[string]interface{}{
								"type": "String",
							},
						},
						Annotations: []interface{}{},
						LinkedServiceName: &armdatafactory.LinkedServiceReference{
							Type:          to.Ptr(armdatafactory.LinkedServiceReferenceTypeLinkedServiceReference),
							ReferenceName: to.Ptr("<reference-name>"),
						},
						TypeProperties: &armdatafactory.DelimitedTextDatasetTypeProperties{
							ColumnDelimiter:  ",",
							EscapeChar:       "\\",
							FirstRowAsHeader: true,
							Location: &armdatafactory.AzureBlobStorageLocation{
								Type:      to.Ptr("<type>"),
								FileName:  "Ansiencoding.csv",
								Container: "dataflow-sample-data",
							},
							QuoteChar: "\"",
						},
					},
				}},
			DebugSettings: &armdatafactory.DataFlowDebugPackageDebugSettings{
				DatasetParameters: map[string]interface{}{
					"Movies": map[string]interface{}{
						"path": "abc",
					},
					"Output": map[string]interface{}{
						"time": "def",
					},
				},
				Parameters: map[string]interface{}{
					"sourcePath": "Toy",
				},
				SourceSettings: []*armdatafactory.DataFlowSourceSetting{
					{
						RowLimit:   to.Ptr[int32](1000),
						SourceName: to.Ptr("<source-name>"),
					},
					{
						RowLimit:   to.Ptr[int32](222),
						SourceName: to.Ptr("<source-name>"),
					}},
			},
			LinkedServices: []*armdatafactory.LinkedServiceDebugResource{
				{
					Name: to.Ptr("<name>"),
					Properties: &armdatafactory.AzureBlobStorageLinkedService{
						Type:        to.Ptr("<type>"),
						Annotations: []interface{}{},
						TypeProperties: &armdatafactory.AzureBlobStorageLinkedServiceTypeProperties{
							ConnectionString:    "DefaultEndpointsProtocol=https;AccountName=<storageName>;EndpointSuffix=core.windows.net;",
							EncryptedCredential: to.Ptr("<encrypted-credential>"),
						},
					},
				}},
			SessionID: to.Ptr("<session-id>"),
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_Delete.json
func ExampleDataFlowDebugSessionClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armdatafactory.NewDataFlowDebugSessionClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<factory-name>",
		armdatafactory.DeleteDataFlowDebugSessionRequest{
			SessionID: to.Ptr("<session-id>"),
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/datafactory/resource-manager/Microsoft.DataFactory/stable/2018-06-01/examples/DataFlowDebugSession_ExecuteCommand.json
func ExampleDataFlowDebugSessionClient_BeginExecuteCommand() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armdatafactory.NewDataFlowDebugSessionClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginExecuteCommand(ctx,
		"<resource-group-name>",
		"<factory-name>",
		armdatafactory.DataFlowDebugCommandRequest{
			Command: to.Ptr(armdatafactory.DataFlowDebugCommandTypeExecutePreviewQuery),
			CommandPayload: &armdatafactory.DataFlowDebugCommandPayload{
				RowLimits:  to.Ptr[int32](100),
				StreamName: to.Ptr("<stream-name>"),
			},
			SessionID: to.Ptr("<session-id>"),
		},
		&armdatafactory.DataFlowDebugSessionClientBeginExecuteCommandOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}
