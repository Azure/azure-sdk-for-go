//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

const (
	module  = "armdatafactory"
	version = "v0.1.0"
)

type AmazonRdsForOraclePartitionOption string

const (
	AmazonRdsForOraclePartitionOptionDynamicRange              AmazonRdsForOraclePartitionOption = "DynamicRange"
	AmazonRdsForOraclePartitionOptionNone                      AmazonRdsForOraclePartitionOption = "None"
	AmazonRdsForOraclePartitionOptionPhysicalPartitionsOfTable AmazonRdsForOraclePartitionOption = "PhysicalPartitionsOfTable"
)

// PossibleAmazonRdsForOraclePartitionOptionValues returns the possible values for the AmazonRdsForOraclePartitionOption const type.
func PossibleAmazonRdsForOraclePartitionOptionValues() []AmazonRdsForOraclePartitionOption {
	return []AmazonRdsForOraclePartitionOption{
		AmazonRdsForOraclePartitionOptionDynamicRange,
		AmazonRdsForOraclePartitionOptionNone,
		AmazonRdsForOraclePartitionOptionPhysicalPartitionsOfTable,
	}
}

// ToPtr returns a *AmazonRdsForOraclePartitionOption pointing to the current value.
func (c AmazonRdsForOraclePartitionOption) ToPtr() *AmazonRdsForOraclePartitionOption {
	return &c
}

type AvroCompressionCodec string

const (
	AvroCompressionCodecBzip2   AvroCompressionCodec = "bzip2"
	AvroCompressionCodecDeflate AvroCompressionCodec = "deflate"
	AvroCompressionCodecNone    AvroCompressionCodec = "none"
	AvroCompressionCodecSnappy  AvroCompressionCodec = "snappy"
	AvroCompressionCodecXz      AvroCompressionCodec = "xz"
)

// PossibleAvroCompressionCodecValues returns the possible values for the AvroCompressionCodec const type.
func PossibleAvroCompressionCodecValues() []AvroCompressionCodec {
	return []AvroCompressionCodec{
		AvroCompressionCodecBzip2,
		AvroCompressionCodecDeflate,
		AvroCompressionCodecNone,
		AvroCompressionCodecSnappy,
		AvroCompressionCodecXz,
	}
}

// ToPtr returns a *AvroCompressionCodec pointing to the current value.
func (c AvroCompressionCodec) ToPtr() *AvroCompressionCodec {
	return &c
}

// AzureFunctionActivityMethod - The list of HTTP methods supported by a AzureFunctionActivity.
type AzureFunctionActivityMethod string

const (
	AzureFunctionActivityMethodDELETE  AzureFunctionActivityMethod = "DELETE"
	AzureFunctionActivityMethodGET     AzureFunctionActivityMethod = "GET"
	AzureFunctionActivityMethodHEAD    AzureFunctionActivityMethod = "HEAD"
	AzureFunctionActivityMethodOPTIONS AzureFunctionActivityMethod = "OPTIONS"
	AzureFunctionActivityMethodPOST    AzureFunctionActivityMethod = "POST"
	AzureFunctionActivityMethodPUT     AzureFunctionActivityMethod = "PUT"
	AzureFunctionActivityMethodTRACE   AzureFunctionActivityMethod = "TRACE"
)

// PossibleAzureFunctionActivityMethodValues returns the possible values for the AzureFunctionActivityMethod const type.
func PossibleAzureFunctionActivityMethodValues() []AzureFunctionActivityMethod {
	return []AzureFunctionActivityMethod{
		AzureFunctionActivityMethodDELETE,
		AzureFunctionActivityMethodGET,
		AzureFunctionActivityMethodHEAD,
		AzureFunctionActivityMethodOPTIONS,
		AzureFunctionActivityMethodPOST,
		AzureFunctionActivityMethodPUT,
		AzureFunctionActivityMethodTRACE,
	}
}

// ToPtr returns a *AzureFunctionActivityMethod pointing to the current value.
func (c AzureFunctionActivityMethod) ToPtr() *AzureFunctionActivityMethod {
	return &c
}

// AzureSearchIndexWriteBehaviorType - Specify the write behavior when upserting documents into Azure Search Index.
type AzureSearchIndexWriteBehaviorType string

const (
	AzureSearchIndexWriteBehaviorTypeMerge  AzureSearchIndexWriteBehaviorType = "Merge"
	AzureSearchIndexWriteBehaviorTypeUpload AzureSearchIndexWriteBehaviorType = "Upload"
)

// PossibleAzureSearchIndexWriteBehaviorTypeValues returns the possible values for the AzureSearchIndexWriteBehaviorType const type.
func PossibleAzureSearchIndexWriteBehaviorTypeValues() []AzureSearchIndexWriteBehaviorType {
	return []AzureSearchIndexWriteBehaviorType{
		AzureSearchIndexWriteBehaviorTypeMerge,
		AzureSearchIndexWriteBehaviorTypeUpload,
	}
}

// ToPtr returns a *AzureSearchIndexWriteBehaviorType pointing to the current value.
func (c AzureSearchIndexWriteBehaviorType) ToPtr() *AzureSearchIndexWriteBehaviorType {
	return &c
}

type BlobEventTypes string

const (
	BlobEventTypesMicrosoftStorageBlobCreated BlobEventTypes = "Microsoft.Storage.BlobCreated"
	BlobEventTypesMicrosoftStorageBlobDeleted BlobEventTypes = "Microsoft.Storage.BlobDeleted"
)

// PossibleBlobEventTypesValues returns the possible values for the BlobEventTypes const type.
func PossibleBlobEventTypesValues() []BlobEventTypes {
	return []BlobEventTypes{
		BlobEventTypesMicrosoftStorageBlobCreated,
		BlobEventTypesMicrosoftStorageBlobDeleted,
	}
}

// ToPtr returns a *BlobEventTypes pointing to the current value.
func (c BlobEventTypes) ToPtr() *BlobEventTypes {
	return &c
}

// CassandraSourceReadConsistencyLevels - The consistency level specifies how many Cassandra servers must respond to a read request before returning data
// to the client application. Cassandra checks the specified number of Cassandra servers
// for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'. It is case-insensitive.
type CassandraSourceReadConsistencyLevels string

const (
	CassandraSourceReadConsistencyLevelsALL         CassandraSourceReadConsistencyLevels = "ALL"
	CassandraSourceReadConsistencyLevelsEACHQUORUM  CassandraSourceReadConsistencyLevels = "EACH_QUORUM"
	CassandraSourceReadConsistencyLevelsLOCALONE    CassandraSourceReadConsistencyLevels = "LOCAL_ONE"
	CassandraSourceReadConsistencyLevelsLOCALQUORUM CassandraSourceReadConsistencyLevels = "LOCAL_QUORUM"
	CassandraSourceReadConsistencyLevelsLOCALSERIAL CassandraSourceReadConsistencyLevels = "LOCAL_SERIAL"
	CassandraSourceReadConsistencyLevelsONE         CassandraSourceReadConsistencyLevels = "ONE"
	CassandraSourceReadConsistencyLevelsQUORUM      CassandraSourceReadConsistencyLevels = "QUORUM"
	CassandraSourceReadConsistencyLevelsSERIAL      CassandraSourceReadConsistencyLevels = "SERIAL"
	CassandraSourceReadConsistencyLevelsTHREE       CassandraSourceReadConsistencyLevels = "THREE"
	CassandraSourceReadConsistencyLevelsTWO         CassandraSourceReadConsistencyLevels = "TWO"
)

// PossibleCassandraSourceReadConsistencyLevelsValues returns the possible values for the CassandraSourceReadConsistencyLevels const type.
func PossibleCassandraSourceReadConsistencyLevelsValues() []CassandraSourceReadConsistencyLevels {
	return []CassandraSourceReadConsistencyLevels{
		CassandraSourceReadConsistencyLevelsALL,
		CassandraSourceReadConsistencyLevelsEACHQUORUM,
		CassandraSourceReadConsistencyLevelsLOCALONE,
		CassandraSourceReadConsistencyLevelsLOCALQUORUM,
		CassandraSourceReadConsistencyLevelsLOCALSERIAL,
		CassandraSourceReadConsistencyLevelsONE,
		CassandraSourceReadConsistencyLevelsQUORUM,
		CassandraSourceReadConsistencyLevelsSERIAL,
		CassandraSourceReadConsistencyLevelsTHREE,
		CassandraSourceReadConsistencyLevelsTWO,
	}
}

// ToPtr returns a *CassandraSourceReadConsistencyLevels pointing to the current value.
func (c CassandraSourceReadConsistencyLevels) ToPtr() *CassandraSourceReadConsistencyLevels {
	return &c
}

// CompressionCodec - All available compressionCodec values.
type CompressionCodec string

const (
	CompressionCodecBzip2      CompressionCodec = "bzip2"
	CompressionCodecDeflate    CompressionCodec = "deflate"
	CompressionCodecGzip       CompressionCodec = "gzip"
	CompressionCodecLz4        CompressionCodec = "lz4"
	CompressionCodecLzo        CompressionCodec = "lzo"
	CompressionCodecNone       CompressionCodec = "none"
	CompressionCodecSnappy     CompressionCodec = "snappy"
	CompressionCodecTar        CompressionCodec = "tar"
	CompressionCodecTarGZip    CompressionCodec = "tarGZip"
	CompressionCodecZipDeflate CompressionCodec = "zipDeflate"
)

// PossibleCompressionCodecValues returns the possible values for the CompressionCodec const type.
func PossibleCompressionCodecValues() []CompressionCodec {
	return []CompressionCodec{
		CompressionCodecBzip2,
		CompressionCodecDeflate,
		CompressionCodecGzip,
		CompressionCodecLz4,
		CompressionCodecLzo,
		CompressionCodecNone,
		CompressionCodecSnappy,
		CompressionCodecTar,
		CompressionCodecTarGZip,
		CompressionCodecZipDeflate,
	}
}

// ToPtr returns a *CompressionCodec pointing to the current value.
func (c CompressionCodec) ToPtr() *CompressionCodec {
	return &c
}

// CopyBehaviorType - All available types of copy behavior.
type CopyBehaviorType string

const (
	CopyBehaviorTypeFlattenHierarchy  CopyBehaviorType = "FlattenHierarchy"
	CopyBehaviorTypeMergeFiles        CopyBehaviorType = "MergeFiles"
	CopyBehaviorTypePreserveHierarchy CopyBehaviorType = "PreserveHierarchy"
)

// PossibleCopyBehaviorTypeValues returns the possible values for the CopyBehaviorType const type.
func PossibleCopyBehaviorTypeValues() []CopyBehaviorType {
	return []CopyBehaviorType{
		CopyBehaviorTypeFlattenHierarchy,
		CopyBehaviorTypeMergeFiles,
		CopyBehaviorTypePreserveHierarchy,
	}
}

// ToPtr returns a *CopyBehaviorType pointing to the current value.
func (c CopyBehaviorType) ToPtr() *CopyBehaviorType {
	return &c
}

// CosmosDbConnectionMode - The connection mode used to access CosmosDB account. Type: string (or Expression with resultType string).
type CosmosDbConnectionMode string

const (
	CosmosDbConnectionModeDirect  CosmosDbConnectionMode = "Direct"
	CosmosDbConnectionModeGateway CosmosDbConnectionMode = "Gateway"
)

// PossibleCosmosDbConnectionModeValues returns the possible values for the CosmosDbConnectionMode const type.
func PossibleCosmosDbConnectionModeValues() []CosmosDbConnectionMode {
	return []CosmosDbConnectionMode{
		CosmosDbConnectionModeDirect,
		CosmosDbConnectionModeGateway,
	}
}

// ToPtr returns a *CosmosDbConnectionMode pointing to the current value.
func (c CosmosDbConnectionMode) ToPtr() *CosmosDbConnectionMode {
	return &c
}

// CosmosDbServicePrincipalCredentialType - The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret,
// 'ServicePrincipalCert' for certificate. Type: string (or Expression with
// resultType string).
type CosmosDbServicePrincipalCredentialType string

const (
	CosmosDbServicePrincipalCredentialTypeServicePrincipalCert CosmosDbServicePrincipalCredentialType = "ServicePrincipalCert"
	CosmosDbServicePrincipalCredentialTypeServicePrincipalKey  CosmosDbServicePrincipalCredentialType = "ServicePrincipalKey"
)

// PossibleCosmosDbServicePrincipalCredentialTypeValues returns the possible values for the CosmosDbServicePrincipalCredentialType const type.
func PossibleCosmosDbServicePrincipalCredentialTypeValues() []CosmosDbServicePrincipalCredentialType {
	return []CosmosDbServicePrincipalCredentialType{
		CosmosDbServicePrincipalCredentialTypeServicePrincipalCert,
		CosmosDbServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

// ToPtr returns a *CosmosDbServicePrincipalCredentialType pointing to the current value.
func (c CosmosDbServicePrincipalCredentialType) ToPtr() *CosmosDbServicePrincipalCredentialType {
	return &c
}

// CredentialReferenceType - Credential reference type.
type CredentialReferenceType string

const (
	CredentialReferenceTypeCredentialReference CredentialReferenceType = "CredentialReference"
)

// PossibleCredentialReferenceTypeValues returns the possible values for the CredentialReferenceType const type.
func PossibleCredentialReferenceTypeValues() []CredentialReferenceType {
	return []CredentialReferenceType{
		CredentialReferenceTypeCredentialReference,
	}
}

// ToPtr returns a *CredentialReferenceType pointing to the current value.
func (c CredentialReferenceType) ToPtr() *CredentialReferenceType {
	return &c
}

// DataFlowComputeType - Compute type of the cluster which will execute data flow job.
type DataFlowComputeType string

const (
	DataFlowComputeTypeComputeOptimized DataFlowComputeType = "ComputeOptimized"
	DataFlowComputeTypeGeneral          DataFlowComputeType = "General"
	DataFlowComputeTypeMemoryOptimized  DataFlowComputeType = "MemoryOptimized"
)

// PossibleDataFlowComputeTypeValues returns the possible values for the DataFlowComputeType const type.
func PossibleDataFlowComputeTypeValues() []DataFlowComputeType {
	return []DataFlowComputeType{
		DataFlowComputeTypeComputeOptimized,
		DataFlowComputeTypeGeneral,
		DataFlowComputeTypeMemoryOptimized,
	}
}

// ToPtr returns a *DataFlowComputeType pointing to the current value.
func (c DataFlowComputeType) ToPtr() *DataFlowComputeType {
	return &c
}

// DataFlowDebugCommandType - The command type.
type DataFlowDebugCommandType string

const (
	DataFlowDebugCommandTypeExecuteExpressionQuery DataFlowDebugCommandType = "executeExpressionQuery"
	DataFlowDebugCommandTypeExecutePreviewQuery    DataFlowDebugCommandType = "executePreviewQuery"
	DataFlowDebugCommandTypeExecuteStatisticsQuery DataFlowDebugCommandType = "executeStatisticsQuery"
)

// PossibleDataFlowDebugCommandTypeValues returns the possible values for the DataFlowDebugCommandType const type.
func PossibleDataFlowDebugCommandTypeValues() []DataFlowDebugCommandType {
	return []DataFlowDebugCommandType{
		DataFlowDebugCommandTypeExecuteExpressionQuery,
		DataFlowDebugCommandTypeExecutePreviewQuery,
		DataFlowDebugCommandTypeExecuteStatisticsQuery,
	}
}

// ToPtr returns a *DataFlowDebugCommandType pointing to the current value.
func (c DataFlowDebugCommandType) ToPtr() *DataFlowDebugCommandType {
	return &c
}

// DataFlowReferenceType - Data flow reference type.
type DataFlowReferenceType string

const (
	DataFlowReferenceTypeDataFlowReference DataFlowReferenceType = "DataFlowReference"
)

// PossibleDataFlowReferenceTypeValues returns the possible values for the DataFlowReferenceType const type.
func PossibleDataFlowReferenceTypeValues() []DataFlowReferenceType {
	return []DataFlowReferenceType{
		DataFlowReferenceTypeDataFlowReference,
	}
}

// ToPtr returns a *DataFlowReferenceType pointing to the current value.
func (c DataFlowReferenceType) ToPtr() *DataFlowReferenceType {
	return &c
}

// DatasetCompressionLevel - All available compression levels.
type DatasetCompressionLevel string

const (
	DatasetCompressionLevelFastest DatasetCompressionLevel = "Fastest"
	DatasetCompressionLevelOptimal DatasetCompressionLevel = "Optimal"
)

// PossibleDatasetCompressionLevelValues returns the possible values for the DatasetCompressionLevel const type.
func PossibleDatasetCompressionLevelValues() []DatasetCompressionLevel {
	return []DatasetCompressionLevel{
		DatasetCompressionLevelFastest,
		DatasetCompressionLevelOptimal,
	}
}

// ToPtr returns a *DatasetCompressionLevel pointing to the current value.
func (c DatasetCompressionLevel) ToPtr() *DatasetCompressionLevel {
	return &c
}

// DatasetReferenceType - Dataset reference type.
type DatasetReferenceType string

const (
	DatasetReferenceTypeDatasetReference DatasetReferenceType = "DatasetReference"
)

// PossibleDatasetReferenceTypeValues returns the possible values for the DatasetReferenceType const type.
func PossibleDatasetReferenceTypeValues() []DatasetReferenceType {
	return []DatasetReferenceType{
		DatasetReferenceTypeDatasetReference,
	}
}

// ToPtr returns a *DatasetReferenceType pointing to the current value.
func (c DatasetReferenceType) ToPtr() *DatasetReferenceType {
	return &c
}

// DayOfWeek - The days of the week.
type DayOfWeek string

const (
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekSunday,
		DayOfWeekMonday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
		DayOfWeekThursday,
		DayOfWeekFriday,
		DayOfWeekSaturday,
	}
}

// ToPtr returns a *DayOfWeek pointing to the current value.
func (c DayOfWeek) ToPtr() *DayOfWeek {
	return &c
}

type DaysOfWeek string

const (
	DaysOfWeekSunday    DaysOfWeek = "Sunday"
	DaysOfWeekMonday    DaysOfWeek = "Monday"
	DaysOfWeekTuesday   DaysOfWeek = "Tuesday"
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
	DaysOfWeekThursday  DaysOfWeek = "Thursday"
	DaysOfWeekFriday    DaysOfWeek = "Friday"
	DaysOfWeekSaturday  DaysOfWeek = "Saturday"
)

// PossibleDaysOfWeekValues returns the possible values for the DaysOfWeek const type.
func PossibleDaysOfWeekValues() []DaysOfWeek {
	return []DaysOfWeek{
		DaysOfWeekSunday,
		DaysOfWeekMonday,
		DaysOfWeekTuesday,
		DaysOfWeekWednesday,
		DaysOfWeekThursday,
		DaysOfWeekFriday,
		DaysOfWeekSaturday,
	}
}

// ToPtr returns a *DaysOfWeek pointing to the current value.
func (c DaysOfWeek) ToPtr() *DaysOfWeek {
	return &c
}

// Db2AuthenticationType - AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
type Db2AuthenticationType string

const (
	Db2AuthenticationTypeBasic Db2AuthenticationType = "Basic"
)

// PossibleDb2AuthenticationTypeValues returns the possible values for the Db2AuthenticationType const type.
func PossibleDb2AuthenticationTypeValues() []Db2AuthenticationType {
	return []Db2AuthenticationType{
		Db2AuthenticationTypeBasic,
	}
}

// ToPtr returns a *Db2AuthenticationType pointing to the current value.
func (c Db2AuthenticationType) ToPtr() *Db2AuthenticationType {
	return &c
}

type DependencyCondition string

const (
	DependencyConditionCompleted DependencyCondition = "Completed"
	DependencyConditionFailed    DependencyCondition = "Failed"
	DependencyConditionSkipped   DependencyCondition = "Skipped"
	DependencyConditionSucceeded DependencyCondition = "Succeeded"
)

// PossibleDependencyConditionValues returns the possible values for the DependencyCondition const type.
func PossibleDependencyConditionValues() []DependencyCondition {
	return []DependencyCondition{
		DependencyConditionCompleted,
		DependencyConditionFailed,
		DependencyConditionSkipped,
		DependencyConditionSucceeded,
	}
}

// ToPtr returns a *DependencyCondition pointing to the current value.
func (c DependencyCondition) ToPtr() *DependencyCondition {
	return &c
}

// DynamicsAuthenticationType - All available dynamicsAuthenticationType values.
type DynamicsAuthenticationType string

const (
	DynamicsAuthenticationTypeAADServicePrincipal DynamicsAuthenticationType = "AADServicePrincipal"
	DynamicsAuthenticationTypeIfd                 DynamicsAuthenticationType = "Ifd"
	DynamicsAuthenticationTypeOffice365           DynamicsAuthenticationType = "Office365"
)

// PossibleDynamicsAuthenticationTypeValues returns the possible values for the DynamicsAuthenticationType const type.
func PossibleDynamicsAuthenticationTypeValues() []DynamicsAuthenticationType {
	return []DynamicsAuthenticationType{
		DynamicsAuthenticationTypeAADServicePrincipal,
		DynamicsAuthenticationTypeIfd,
		DynamicsAuthenticationTypeOffice365,
	}
}

// ToPtr returns a *DynamicsAuthenticationType pointing to the current value.
func (c DynamicsAuthenticationType) ToPtr() *DynamicsAuthenticationType {
	return &c
}

// DynamicsDeploymentType - All available dynamicsDeploymentType values.
type DynamicsDeploymentType string

const (
	DynamicsDeploymentTypeOnPremisesWithIfd DynamicsDeploymentType = "OnPremisesWithIfd"
	DynamicsDeploymentTypeOnline            DynamicsDeploymentType = "Online"
)

// PossibleDynamicsDeploymentTypeValues returns the possible values for the DynamicsDeploymentType const type.
func PossibleDynamicsDeploymentTypeValues() []DynamicsDeploymentType {
	return []DynamicsDeploymentType{
		DynamicsDeploymentTypeOnPremisesWithIfd,
		DynamicsDeploymentTypeOnline,
	}
}

// ToPtr returns a *DynamicsDeploymentType pointing to the current value.
func (c DynamicsDeploymentType) ToPtr() *DynamicsDeploymentType {
	return &c
}

// DynamicsSinkWriteBehavior - Defines values for DynamicsSinkWriteBehavior.
type DynamicsSinkWriteBehavior string

const (
	DynamicsSinkWriteBehaviorUpsert DynamicsSinkWriteBehavior = "Upsert"
)

// PossibleDynamicsSinkWriteBehaviorValues returns the possible values for the DynamicsSinkWriteBehavior const type.
func PossibleDynamicsSinkWriteBehaviorValues() []DynamicsSinkWriteBehavior {
	return []DynamicsSinkWriteBehavior{
		DynamicsSinkWriteBehaviorUpsert,
	}
}

// ToPtr returns a *DynamicsSinkWriteBehavior pointing to the current value.
func (c DynamicsSinkWriteBehavior) ToPtr() *DynamicsSinkWriteBehavior {
	return &c
}

// EventSubscriptionStatus - Event Subscription Status.
type EventSubscriptionStatus string

const (
	EventSubscriptionStatusDeprovisioning EventSubscriptionStatus = "Deprovisioning"
	EventSubscriptionStatusDisabled       EventSubscriptionStatus = "Disabled"
	EventSubscriptionStatusEnabled        EventSubscriptionStatus = "Enabled"
	EventSubscriptionStatusProvisioning   EventSubscriptionStatus = "Provisioning"
	EventSubscriptionStatusUnknown        EventSubscriptionStatus = "Unknown"
)

// PossibleEventSubscriptionStatusValues returns the possible values for the EventSubscriptionStatus const type.
func PossibleEventSubscriptionStatusValues() []EventSubscriptionStatus {
	return []EventSubscriptionStatus{
		EventSubscriptionStatusDeprovisioning,
		EventSubscriptionStatusDisabled,
		EventSubscriptionStatusEnabled,
		EventSubscriptionStatusProvisioning,
		EventSubscriptionStatusUnknown,
	}
}

// ToPtr returns a *EventSubscriptionStatus pointing to the current value.
func (c EventSubscriptionStatus) ToPtr() *EventSubscriptionStatus {
	return &c
}

// ExpressionType - Expression type.
type ExpressionType string

const (
	ExpressionTypeExpression ExpressionType = "Expression"
)

// PossibleExpressionTypeValues returns the possible values for the ExpressionType const type.
func PossibleExpressionTypeValues() []ExpressionType {
	return []ExpressionType{
		ExpressionTypeExpression,
	}
}

// ToPtr returns a *ExpressionType pointing to the current value.
func (c ExpressionType) ToPtr() *ExpressionType {
	return &c
}

// FactoryIdentityType - The identity type.
type FactoryIdentityType string

const (
	FactoryIdentityTypeSystemAssigned             FactoryIdentityType = "SystemAssigned"
	FactoryIdentityTypeSystemAssignedUserAssigned FactoryIdentityType = "SystemAssigned,UserAssigned"
	FactoryIdentityTypeUserAssigned               FactoryIdentityType = "UserAssigned"
)

// PossibleFactoryIdentityTypeValues returns the possible values for the FactoryIdentityType const type.
func PossibleFactoryIdentityTypeValues() []FactoryIdentityType {
	return []FactoryIdentityType{
		FactoryIdentityTypeSystemAssigned,
		FactoryIdentityTypeSystemAssignedUserAssigned,
		FactoryIdentityTypeUserAssigned,
	}
}

// ToPtr returns a *FactoryIdentityType pointing to the current value.
func (c FactoryIdentityType) ToPtr() *FactoryIdentityType {
	return &c
}

// FtpAuthenticationType - The authentication type to be used to connect to the FTP server.
type FtpAuthenticationType string

const (
	FtpAuthenticationTypeAnonymous FtpAuthenticationType = "Anonymous"
	FtpAuthenticationTypeBasic     FtpAuthenticationType = "Basic"
)

// PossibleFtpAuthenticationTypeValues returns the possible values for the FtpAuthenticationType const type.
func PossibleFtpAuthenticationTypeValues() []FtpAuthenticationType {
	return []FtpAuthenticationType{
		FtpAuthenticationTypeAnonymous,
		FtpAuthenticationTypeBasic,
	}
}

// ToPtr returns a *FtpAuthenticationType pointing to the current value.
func (c FtpAuthenticationType) ToPtr() *FtpAuthenticationType {
	return &c
}

// GlobalParameterType - Global Parameter type.
type GlobalParameterType string

const (
	GlobalParameterTypeArray  GlobalParameterType = "Array"
	GlobalParameterTypeBool   GlobalParameterType = "Bool"
	GlobalParameterTypeFloat  GlobalParameterType = "Float"
	GlobalParameterTypeInt    GlobalParameterType = "Int"
	GlobalParameterTypeObject GlobalParameterType = "Object"
	GlobalParameterTypeString GlobalParameterType = "String"
)

// PossibleGlobalParameterTypeValues returns the possible values for the GlobalParameterType const type.
func PossibleGlobalParameterTypeValues() []GlobalParameterType {
	return []GlobalParameterType{
		GlobalParameterTypeArray,
		GlobalParameterTypeBool,
		GlobalParameterTypeFloat,
		GlobalParameterTypeInt,
		GlobalParameterTypeObject,
		GlobalParameterTypeString,
	}
}

// ToPtr returns a *GlobalParameterType pointing to the current value.
func (c GlobalParameterType) ToPtr() *GlobalParameterType {
	return &c
}

// GoogleAdWordsAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted
// IR.
type GoogleAdWordsAuthenticationType string

const (
	GoogleAdWordsAuthenticationTypeServiceAuthentication GoogleAdWordsAuthenticationType = "ServiceAuthentication"
	GoogleAdWordsAuthenticationTypeUserAuthentication    GoogleAdWordsAuthenticationType = "UserAuthentication"
)

// PossibleGoogleAdWordsAuthenticationTypeValues returns the possible values for the GoogleAdWordsAuthenticationType const type.
func PossibleGoogleAdWordsAuthenticationTypeValues() []GoogleAdWordsAuthenticationType {
	return []GoogleAdWordsAuthenticationType{
		GoogleAdWordsAuthenticationTypeServiceAuthentication,
		GoogleAdWordsAuthenticationTypeUserAuthentication,
	}
}

// ToPtr returns a *GoogleAdWordsAuthenticationType pointing to the current value.
func (c GoogleAdWordsAuthenticationType) ToPtr() *GoogleAdWordsAuthenticationType {
	return &c
}

// GoogleBigQueryAuthenticationType - The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted
// IR.
type GoogleBigQueryAuthenticationType string

const (
	GoogleBigQueryAuthenticationTypeServiceAuthentication GoogleBigQueryAuthenticationType = "ServiceAuthentication"
	GoogleBigQueryAuthenticationTypeUserAuthentication    GoogleBigQueryAuthenticationType = "UserAuthentication"
)

// PossibleGoogleBigQueryAuthenticationTypeValues returns the possible values for the GoogleBigQueryAuthenticationType const type.
func PossibleGoogleBigQueryAuthenticationTypeValues() []GoogleBigQueryAuthenticationType {
	return []GoogleBigQueryAuthenticationType{
		GoogleBigQueryAuthenticationTypeServiceAuthentication,
		GoogleBigQueryAuthenticationTypeUserAuthentication,
	}
}

// ToPtr returns a *GoogleBigQueryAuthenticationType pointing to the current value.
func (c GoogleBigQueryAuthenticationType) ToPtr() *GoogleBigQueryAuthenticationType {
	return &c
}

// HBaseAuthenticationType - The authentication mechanism to use to connect to the HBase server.
type HBaseAuthenticationType string

const (
	HBaseAuthenticationTypeAnonymous HBaseAuthenticationType = "Anonymous"
	HBaseAuthenticationTypeBasic     HBaseAuthenticationType = "Basic"
)

// PossibleHBaseAuthenticationTypeValues returns the possible values for the HBaseAuthenticationType const type.
func PossibleHBaseAuthenticationTypeValues() []HBaseAuthenticationType {
	return []HBaseAuthenticationType{
		HBaseAuthenticationTypeAnonymous,
		HBaseAuthenticationTypeBasic,
	}
}

// ToPtr returns a *HBaseAuthenticationType pointing to the current value.
func (c HBaseAuthenticationType) ToPtr() *HBaseAuthenticationType {
	return &c
}

// HDInsightActivityDebugInfoOption - The HDInsightActivityDebugInfoOption settings to use.
type HDInsightActivityDebugInfoOption string

const (
	HDInsightActivityDebugInfoOptionAlways  HDInsightActivityDebugInfoOption = "Always"
	HDInsightActivityDebugInfoOptionFailure HDInsightActivityDebugInfoOption = "Failure"
	HDInsightActivityDebugInfoOptionNone    HDInsightActivityDebugInfoOption = "None"
)

// PossibleHDInsightActivityDebugInfoOptionValues returns the possible values for the HDInsightActivityDebugInfoOption const type.
func PossibleHDInsightActivityDebugInfoOptionValues() []HDInsightActivityDebugInfoOption {
	return []HDInsightActivityDebugInfoOption{
		HDInsightActivityDebugInfoOptionAlways,
		HDInsightActivityDebugInfoOptionFailure,
		HDInsightActivityDebugInfoOptionNone,
	}
}

// ToPtr returns a *HDInsightActivityDebugInfoOption pointing to the current value.
func (c HDInsightActivityDebugInfoOption) ToPtr() *HDInsightActivityDebugInfoOption {
	return &c
}

// HTTPAuthenticationType - The authentication type to be used to connect to the HTTP server.
type HTTPAuthenticationType string

const (
	HTTPAuthenticationTypeAnonymous         HTTPAuthenticationType = "Anonymous"
	HTTPAuthenticationTypeBasic             HTTPAuthenticationType = "Basic"
	HTTPAuthenticationTypeClientCertificate HTTPAuthenticationType = "ClientCertificate"
	HTTPAuthenticationTypeDigest            HTTPAuthenticationType = "Digest"
	HTTPAuthenticationTypeWindows           HTTPAuthenticationType = "Windows"
)

// PossibleHTTPAuthenticationTypeValues returns the possible values for the HTTPAuthenticationType const type.
func PossibleHTTPAuthenticationTypeValues() []HTTPAuthenticationType {
	return []HTTPAuthenticationType{
		HTTPAuthenticationTypeAnonymous,
		HTTPAuthenticationTypeBasic,
		HTTPAuthenticationTypeClientCertificate,
		HTTPAuthenticationTypeDigest,
		HTTPAuthenticationTypeWindows,
	}
}

// ToPtr returns a *HTTPAuthenticationType pointing to the current value.
func (c HTTPAuthenticationType) ToPtr() *HTTPAuthenticationType {
	return &c
}

// HdiNodeTypes - All available HdiNodeTypes values.
type HdiNodeTypes string

const (
	HdiNodeTypesHeadnode   HdiNodeTypes = "Headnode"
	HdiNodeTypesWorkernode HdiNodeTypes = "Workernode"
	HdiNodeTypesZookeeper  HdiNodeTypes = "Zookeeper"
)

// PossibleHdiNodeTypesValues returns the possible values for the HdiNodeTypes const type.
func PossibleHdiNodeTypesValues() []HdiNodeTypes {
	return []HdiNodeTypes{
		HdiNodeTypesHeadnode,
		HdiNodeTypesWorkernode,
		HdiNodeTypesZookeeper,
	}
}

// ToPtr returns a *HdiNodeTypes pointing to the current value.
func (c HdiNodeTypes) ToPtr() *HdiNodeTypes {
	return &c
}

// HiveAuthenticationType - The authentication method used to access the Hive server.
type HiveAuthenticationType string

const (
	HiveAuthenticationTypeAnonymous                    HiveAuthenticationType = "Anonymous"
	HiveAuthenticationTypeUsername                     HiveAuthenticationType = "Username"
	HiveAuthenticationTypeUsernameAndPassword          HiveAuthenticationType = "UsernameAndPassword"
	HiveAuthenticationTypeWindowsAzureHDInsightService HiveAuthenticationType = "WindowsAzureHDInsightService"
)

// PossibleHiveAuthenticationTypeValues returns the possible values for the HiveAuthenticationType const type.
func PossibleHiveAuthenticationTypeValues() []HiveAuthenticationType {
	return []HiveAuthenticationType{
		HiveAuthenticationTypeAnonymous,
		HiveAuthenticationTypeUsername,
		HiveAuthenticationTypeUsernameAndPassword,
		HiveAuthenticationTypeWindowsAzureHDInsightService,
	}
}

// ToPtr returns a *HiveAuthenticationType pointing to the current value.
func (c HiveAuthenticationType) ToPtr() *HiveAuthenticationType {
	return &c
}

// HiveServerType - The type of Hive server.
type HiveServerType string

const (
	HiveServerTypeHiveServer1      HiveServerType = "HiveServer1"
	HiveServerTypeHiveServer2      HiveServerType = "HiveServer2"
	HiveServerTypeHiveThriftServer HiveServerType = "HiveThriftServer"
)

// PossibleHiveServerTypeValues returns the possible values for the HiveServerType const type.
func PossibleHiveServerTypeValues() []HiveServerType {
	return []HiveServerType{
		HiveServerTypeHiveServer1,
		HiveServerTypeHiveServer2,
		HiveServerTypeHiveThriftServer,
	}
}

// ToPtr returns a *HiveServerType pointing to the current value.
func (c HiveServerType) ToPtr() *HiveServerType {
	return &c
}

// HiveThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type HiveThriftTransportProtocol string

const (
	HiveThriftTransportProtocolBinary HiveThriftTransportProtocol = "Binary"
	HiveThriftTransportProtocolHTTP   HiveThriftTransportProtocol = "HTTP "
	HiveThriftTransportProtocolSASL   HiveThriftTransportProtocol = "SASL"
)

// PossibleHiveThriftTransportProtocolValues returns the possible values for the HiveThriftTransportProtocol const type.
func PossibleHiveThriftTransportProtocolValues() []HiveThriftTransportProtocol {
	return []HiveThriftTransportProtocol{
		HiveThriftTransportProtocolBinary,
		HiveThriftTransportProtocolHTTP,
		HiveThriftTransportProtocolSASL,
	}
}

// ToPtr returns a *HiveThriftTransportProtocol pointing to the current value.
func (c HiveThriftTransportProtocol) ToPtr() *HiveThriftTransportProtocol {
	return &c
}

// ImpalaAuthenticationType - The authentication type to use.
type ImpalaAuthenticationType string

const (
	ImpalaAuthenticationTypeAnonymous           ImpalaAuthenticationType = "Anonymous"
	ImpalaAuthenticationTypeSASLUsername        ImpalaAuthenticationType = "SASLUsername"
	ImpalaAuthenticationTypeUsernameAndPassword ImpalaAuthenticationType = "UsernameAndPassword"
)

// PossibleImpalaAuthenticationTypeValues returns the possible values for the ImpalaAuthenticationType const type.
func PossibleImpalaAuthenticationTypeValues() []ImpalaAuthenticationType {
	return []ImpalaAuthenticationType{
		ImpalaAuthenticationTypeAnonymous,
		ImpalaAuthenticationTypeSASLUsername,
		ImpalaAuthenticationTypeUsernameAndPassword,
	}
}

// ToPtr returns a *ImpalaAuthenticationType pointing to the current value.
func (c ImpalaAuthenticationType) ToPtr() *ImpalaAuthenticationType {
	return &c
}

// IntegrationRuntimeAuthKeyName - The name of the authentication key to regenerate.
type IntegrationRuntimeAuthKeyName string

const (
	IntegrationRuntimeAuthKeyNameAuthKey1 IntegrationRuntimeAuthKeyName = "authKey1"
	IntegrationRuntimeAuthKeyNameAuthKey2 IntegrationRuntimeAuthKeyName = "authKey2"
)

// PossibleIntegrationRuntimeAuthKeyNameValues returns the possible values for the IntegrationRuntimeAuthKeyName const type.
func PossibleIntegrationRuntimeAuthKeyNameValues() []IntegrationRuntimeAuthKeyName {
	return []IntegrationRuntimeAuthKeyName{
		IntegrationRuntimeAuthKeyNameAuthKey1,
		IntegrationRuntimeAuthKeyNameAuthKey2,
	}
}

// ToPtr returns a *IntegrationRuntimeAuthKeyName pointing to the current value.
func (c IntegrationRuntimeAuthKeyName) ToPtr() *IntegrationRuntimeAuthKeyName {
	return &c
}

// IntegrationRuntimeAutoUpdate - The state of integration runtime auto update.
type IntegrationRuntimeAutoUpdate string

const (
	IntegrationRuntimeAutoUpdateOff IntegrationRuntimeAutoUpdate = "Off"
	IntegrationRuntimeAutoUpdateOn  IntegrationRuntimeAutoUpdate = "On"
)

// PossibleIntegrationRuntimeAutoUpdateValues returns the possible values for the IntegrationRuntimeAutoUpdate const type.
func PossibleIntegrationRuntimeAutoUpdateValues() []IntegrationRuntimeAutoUpdate {
	return []IntegrationRuntimeAutoUpdate{
		IntegrationRuntimeAutoUpdateOff,
		IntegrationRuntimeAutoUpdateOn,
	}
}

// ToPtr returns a *IntegrationRuntimeAutoUpdate pointing to the current value.
func (c IntegrationRuntimeAutoUpdate) ToPtr() *IntegrationRuntimeAutoUpdate {
	return &c
}

// IntegrationRuntimeEdition - The edition for the SSIS Integration Runtime
type IntegrationRuntimeEdition string

const (
	IntegrationRuntimeEditionEnterprise IntegrationRuntimeEdition = "Enterprise"
	IntegrationRuntimeEditionStandard   IntegrationRuntimeEdition = "Standard"
)

// PossibleIntegrationRuntimeEditionValues returns the possible values for the IntegrationRuntimeEdition const type.
func PossibleIntegrationRuntimeEditionValues() []IntegrationRuntimeEdition {
	return []IntegrationRuntimeEdition{
		IntegrationRuntimeEditionEnterprise,
		IntegrationRuntimeEditionStandard,
	}
}

// ToPtr returns a *IntegrationRuntimeEdition pointing to the current value.
func (c IntegrationRuntimeEdition) ToPtr() *IntegrationRuntimeEdition {
	return &c
}

// IntegrationRuntimeEntityReferenceType - The type of this referenced entity.
type IntegrationRuntimeEntityReferenceType string

const (
	IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference IntegrationRuntimeEntityReferenceType = "IntegrationRuntimeReference"
	IntegrationRuntimeEntityReferenceTypeLinkedServiceReference      IntegrationRuntimeEntityReferenceType = "LinkedServiceReference"
)

// PossibleIntegrationRuntimeEntityReferenceTypeValues returns the possible values for the IntegrationRuntimeEntityReferenceType const type.
func PossibleIntegrationRuntimeEntityReferenceTypeValues() []IntegrationRuntimeEntityReferenceType {
	return []IntegrationRuntimeEntityReferenceType{
		IntegrationRuntimeEntityReferenceTypeIntegrationRuntimeReference,
		IntegrationRuntimeEntityReferenceTypeLinkedServiceReference,
	}
}

// ToPtr returns a *IntegrationRuntimeEntityReferenceType pointing to the current value.
func (c IntegrationRuntimeEntityReferenceType) ToPtr() *IntegrationRuntimeEntityReferenceType {
	return &c
}

// IntegrationRuntimeInternalChannelEncryptionMode - It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted
// integration runtime nodes exist).
type IntegrationRuntimeInternalChannelEncryptionMode string

const (
	IntegrationRuntimeInternalChannelEncryptionModeNotEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "NotEncrypted"
	IntegrationRuntimeInternalChannelEncryptionModeNotSet       IntegrationRuntimeInternalChannelEncryptionMode = "NotSet"
	IntegrationRuntimeInternalChannelEncryptionModeSSLEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "SslEncrypted"
)

// PossibleIntegrationRuntimeInternalChannelEncryptionModeValues returns the possible values for the IntegrationRuntimeInternalChannelEncryptionMode const type.
func PossibleIntegrationRuntimeInternalChannelEncryptionModeValues() []IntegrationRuntimeInternalChannelEncryptionMode {
	return []IntegrationRuntimeInternalChannelEncryptionMode{
		IntegrationRuntimeInternalChannelEncryptionModeNotEncrypted,
		IntegrationRuntimeInternalChannelEncryptionModeNotSet,
		IntegrationRuntimeInternalChannelEncryptionModeSSLEncrypted,
	}
}

// ToPtr returns a *IntegrationRuntimeInternalChannelEncryptionMode pointing to the current value.
func (c IntegrationRuntimeInternalChannelEncryptionMode) ToPtr() *IntegrationRuntimeInternalChannelEncryptionMode {
	return &c
}

// IntegrationRuntimeLicenseType - License type for bringing your own license scenario.
type IntegrationRuntimeLicenseType string

const (
	IntegrationRuntimeLicenseTypeBasePrice       IntegrationRuntimeLicenseType = "BasePrice"
	IntegrationRuntimeLicenseTypeLicenseIncluded IntegrationRuntimeLicenseType = "LicenseIncluded"
)

// PossibleIntegrationRuntimeLicenseTypeValues returns the possible values for the IntegrationRuntimeLicenseType const type.
func PossibleIntegrationRuntimeLicenseTypeValues() []IntegrationRuntimeLicenseType {
	return []IntegrationRuntimeLicenseType{
		IntegrationRuntimeLicenseTypeBasePrice,
		IntegrationRuntimeLicenseTypeLicenseIncluded,
	}
}

// ToPtr returns a *IntegrationRuntimeLicenseType pointing to the current value.
func (c IntegrationRuntimeLicenseType) ToPtr() *IntegrationRuntimeLicenseType {
	return &c
}

// IntegrationRuntimeReferenceType - Type of integration runtime.
type IntegrationRuntimeReferenceType string

const (
	IntegrationRuntimeReferenceTypeIntegrationRuntimeReference IntegrationRuntimeReferenceType = "IntegrationRuntimeReference"
)

// PossibleIntegrationRuntimeReferenceTypeValues returns the possible values for the IntegrationRuntimeReferenceType const type.
func PossibleIntegrationRuntimeReferenceTypeValues() []IntegrationRuntimeReferenceType {
	return []IntegrationRuntimeReferenceType{
		IntegrationRuntimeReferenceTypeIntegrationRuntimeReference,
	}
}

// ToPtr returns a *IntegrationRuntimeReferenceType pointing to the current value.
func (c IntegrationRuntimeReferenceType) ToPtr() *IntegrationRuntimeReferenceType {
	return &c
}

// IntegrationRuntimeSsisCatalogPricingTier - The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
type IntegrationRuntimeSsisCatalogPricingTier string

const (
	IntegrationRuntimeSsisCatalogPricingTierBasic     IntegrationRuntimeSsisCatalogPricingTier = "Basic"
	IntegrationRuntimeSsisCatalogPricingTierPremium   IntegrationRuntimeSsisCatalogPricingTier = "Premium"
	IntegrationRuntimeSsisCatalogPricingTierPremiumRS IntegrationRuntimeSsisCatalogPricingTier = "PremiumRS"
	IntegrationRuntimeSsisCatalogPricingTierStandard  IntegrationRuntimeSsisCatalogPricingTier = "Standard"
)

// PossibleIntegrationRuntimeSsisCatalogPricingTierValues returns the possible values for the IntegrationRuntimeSsisCatalogPricingTier const type.
func PossibleIntegrationRuntimeSsisCatalogPricingTierValues() []IntegrationRuntimeSsisCatalogPricingTier {
	return []IntegrationRuntimeSsisCatalogPricingTier{
		IntegrationRuntimeSsisCatalogPricingTierBasic,
		IntegrationRuntimeSsisCatalogPricingTierPremium,
		IntegrationRuntimeSsisCatalogPricingTierPremiumRS,
		IntegrationRuntimeSsisCatalogPricingTierStandard,
	}
}

// ToPtr returns a *IntegrationRuntimeSsisCatalogPricingTier pointing to the current value.
func (c IntegrationRuntimeSsisCatalogPricingTier) ToPtr() *IntegrationRuntimeSsisCatalogPricingTier {
	return &c
}

// IntegrationRuntimeState - The state of integration runtime.
type IntegrationRuntimeState string

const (
	IntegrationRuntimeStateAccessDenied     IntegrationRuntimeState = "AccessDenied"
	IntegrationRuntimeStateInitial          IntegrationRuntimeState = "Initial"
	IntegrationRuntimeStateLimited          IntegrationRuntimeState = "Limited"
	IntegrationRuntimeStateNeedRegistration IntegrationRuntimeState = "NeedRegistration"
	IntegrationRuntimeStateOffline          IntegrationRuntimeState = "Offline"
	IntegrationRuntimeStateOnline           IntegrationRuntimeState = "Online"
	IntegrationRuntimeStateStarted          IntegrationRuntimeState = "Started"
	IntegrationRuntimeStateStarting         IntegrationRuntimeState = "Starting"
	IntegrationRuntimeStateStopped          IntegrationRuntimeState = "Stopped"
	IntegrationRuntimeStateStopping         IntegrationRuntimeState = "Stopping"
)

// PossibleIntegrationRuntimeStateValues returns the possible values for the IntegrationRuntimeState const type.
func PossibleIntegrationRuntimeStateValues() []IntegrationRuntimeState {
	return []IntegrationRuntimeState{
		IntegrationRuntimeStateAccessDenied,
		IntegrationRuntimeStateInitial,
		IntegrationRuntimeStateLimited,
		IntegrationRuntimeStateNeedRegistration,
		IntegrationRuntimeStateOffline,
		IntegrationRuntimeStateOnline,
		IntegrationRuntimeStateStarted,
		IntegrationRuntimeStateStarting,
		IntegrationRuntimeStateStopped,
		IntegrationRuntimeStateStopping,
	}
}

// ToPtr returns a *IntegrationRuntimeState pointing to the current value.
func (c IntegrationRuntimeState) ToPtr() *IntegrationRuntimeState {
	return &c
}

// IntegrationRuntimeType - The type of integration runtime.
type IntegrationRuntimeType string

const (
	IntegrationRuntimeTypeManaged    IntegrationRuntimeType = "Managed"
	IntegrationRuntimeTypeSelfHosted IntegrationRuntimeType = "SelfHosted"
)

// PossibleIntegrationRuntimeTypeValues returns the possible values for the IntegrationRuntimeType const type.
func PossibleIntegrationRuntimeTypeValues() []IntegrationRuntimeType {
	return []IntegrationRuntimeType{
		IntegrationRuntimeTypeManaged,
		IntegrationRuntimeTypeSelfHosted,
	}
}

// ToPtr returns a *IntegrationRuntimeType pointing to the current value.
func (c IntegrationRuntimeType) ToPtr() *IntegrationRuntimeType {
	return &c
}

// IntegrationRuntimeUpdateResult - The result of the last integration runtime node update.
type IntegrationRuntimeUpdateResult string

const (
	IntegrationRuntimeUpdateResultFail    IntegrationRuntimeUpdateResult = "Fail"
	IntegrationRuntimeUpdateResultNone    IntegrationRuntimeUpdateResult = "None"
	IntegrationRuntimeUpdateResultSucceed IntegrationRuntimeUpdateResult = "Succeed"
)

// PossibleIntegrationRuntimeUpdateResultValues returns the possible values for the IntegrationRuntimeUpdateResult const type.
func PossibleIntegrationRuntimeUpdateResultValues() []IntegrationRuntimeUpdateResult {
	return []IntegrationRuntimeUpdateResult{
		IntegrationRuntimeUpdateResultFail,
		IntegrationRuntimeUpdateResultNone,
		IntegrationRuntimeUpdateResultSucceed,
	}
}

// ToPtr returns a *IntegrationRuntimeUpdateResult pointing to the current value.
func (c IntegrationRuntimeUpdateResult) ToPtr() *IntegrationRuntimeUpdateResult {
	return &c
}

// JSONFormatFilePattern - JSON format file pattern. A property of JsonFormat.
type JSONFormatFilePattern string

const (
	JSONFormatFilePatternArrayOfObjects JSONFormatFilePattern = "arrayOfObjects"
	JSONFormatFilePatternSetOfObjects   JSONFormatFilePattern = "setOfObjects"
)

// PossibleJSONFormatFilePatternValues returns the possible values for the JSONFormatFilePattern const type.
func PossibleJSONFormatFilePatternValues() []JSONFormatFilePattern {
	return []JSONFormatFilePattern{
		JSONFormatFilePatternArrayOfObjects,
		JSONFormatFilePatternSetOfObjects,
	}
}

// ToPtr returns a *JSONFormatFilePattern pointing to the current value.
func (c JSONFormatFilePattern) ToPtr() *JSONFormatFilePattern {
	return &c
}

// JSONWriteFilePattern - All available filePatterns.
type JSONWriteFilePattern string

const (
	JSONWriteFilePatternArrayOfObjects JSONWriteFilePattern = "arrayOfObjects"
	JSONWriteFilePatternSetOfObjects   JSONWriteFilePattern = "setOfObjects"
)

// PossibleJSONWriteFilePatternValues returns the possible values for the JSONWriteFilePattern const type.
func PossibleJSONWriteFilePatternValues() []JSONWriteFilePattern {
	return []JSONWriteFilePattern{
		JSONWriteFilePatternArrayOfObjects,
		JSONWriteFilePatternSetOfObjects,
	}
}

// ToPtr returns a *JSONWriteFilePattern pointing to the current value.
func (c JSONWriteFilePattern) ToPtr() *JSONWriteFilePattern {
	return &c
}

// LinkedServiceReferenceType - Linked service reference type.
type LinkedServiceReferenceType string

const (
	LinkedServiceReferenceTypeLinkedServiceReference LinkedServiceReferenceType = "LinkedServiceReference"
)

// PossibleLinkedServiceReferenceTypeValues returns the possible values for the LinkedServiceReferenceType const type.
func PossibleLinkedServiceReferenceTypeValues() []LinkedServiceReferenceType {
	return []LinkedServiceReferenceType{
		LinkedServiceReferenceTypeLinkedServiceReference,
	}
}

// ToPtr returns a *LinkedServiceReferenceType pointing to the current value.
func (c LinkedServiceReferenceType) ToPtr() *LinkedServiceReferenceType {
	return &c
}

// ManagedIntegrationRuntimeNodeStatus - The managed integration runtime node status.
type ManagedIntegrationRuntimeNodeStatus string

const (
	ManagedIntegrationRuntimeNodeStatusAvailable   ManagedIntegrationRuntimeNodeStatus = "Available"
	ManagedIntegrationRuntimeNodeStatusRecycling   ManagedIntegrationRuntimeNodeStatus = "Recycling"
	ManagedIntegrationRuntimeNodeStatusStarting    ManagedIntegrationRuntimeNodeStatus = "Starting"
	ManagedIntegrationRuntimeNodeStatusUnavailable ManagedIntegrationRuntimeNodeStatus = "Unavailable"
)

// PossibleManagedIntegrationRuntimeNodeStatusValues returns the possible values for the ManagedIntegrationRuntimeNodeStatus const type.
func PossibleManagedIntegrationRuntimeNodeStatusValues() []ManagedIntegrationRuntimeNodeStatus {
	return []ManagedIntegrationRuntimeNodeStatus{
		ManagedIntegrationRuntimeNodeStatusAvailable,
		ManagedIntegrationRuntimeNodeStatusRecycling,
		ManagedIntegrationRuntimeNodeStatusStarting,
		ManagedIntegrationRuntimeNodeStatusUnavailable,
	}
}

// ToPtr returns a *ManagedIntegrationRuntimeNodeStatus pointing to the current value.
func (c ManagedIntegrationRuntimeNodeStatus) ToPtr() *ManagedIntegrationRuntimeNodeStatus {
	return &c
}

// ManagedVirtualNetworkReferenceType - Managed Virtual Network reference type.
type ManagedVirtualNetworkReferenceType string

const (
	ManagedVirtualNetworkReferenceTypeManagedVirtualNetworkReference ManagedVirtualNetworkReferenceType = "ManagedVirtualNetworkReference"
)

// PossibleManagedVirtualNetworkReferenceTypeValues returns the possible values for the ManagedVirtualNetworkReferenceType const type.
func PossibleManagedVirtualNetworkReferenceTypeValues() []ManagedVirtualNetworkReferenceType {
	return []ManagedVirtualNetworkReferenceType{
		ManagedVirtualNetworkReferenceTypeManagedVirtualNetworkReference,
	}
}

// ToPtr returns a *ManagedVirtualNetworkReferenceType pointing to the current value.
func (c ManagedVirtualNetworkReferenceType) ToPtr() *ManagedVirtualNetworkReferenceType {
	return &c
}

// MongoDbAuthenticationType - The authentication type to be used to connect to the MongoDB database.
type MongoDbAuthenticationType string

const (
	MongoDbAuthenticationTypeAnonymous MongoDbAuthenticationType = "Anonymous"
	MongoDbAuthenticationTypeBasic     MongoDbAuthenticationType = "Basic"
)

// PossibleMongoDbAuthenticationTypeValues returns the possible values for the MongoDbAuthenticationType const type.
func PossibleMongoDbAuthenticationTypeValues() []MongoDbAuthenticationType {
	return []MongoDbAuthenticationType{
		MongoDbAuthenticationTypeAnonymous,
		MongoDbAuthenticationTypeBasic,
	}
}

// ToPtr returns a *MongoDbAuthenticationType pointing to the current value.
func (c MongoDbAuthenticationType) ToPtr() *MongoDbAuthenticationType {
	return &c
}

// NetezzaPartitionOption - The partition mechanism that will be used for Netezza read in parallel.
type NetezzaPartitionOption string

const (
	NetezzaPartitionOptionDataSlice    NetezzaPartitionOption = "DataSlice"
	NetezzaPartitionOptionDynamicRange NetezzaPartitionOption = "DynamicRange"
	NetezzaPartitionOptionNone         NetezzaPartitionOption = "None"
)

// PossibleNetezzaPartitionOptionValues returns the possible values for the NetezzaPartitionOption const type.
func PossibleNetezzaPartitionOptionValues() []NetezzaPartitionOption {
	return []NetezzaPartitionOption{
		NetezzaPartitionOptionDataSlice,
		NetezzaPartitionOptionDynamicRange,
		NetezzaPartitionOptionNone,
	}
}

// ToPtr returns a *NetezzaPartitionOption pointing to the current value.
func (c NetezzaPartitionOption) ToPtr() *NetezzaPartitionOption {
	return &c
}

// ODataAADServicePrincipalCredentialType - Specify the credential type (key or cert) is used for service principal.
type ODataAADServicePrincipalCredentialType string

const (
	ODataAADServicePrincipalCredentialTypeServicePrincipalCert ODataAADServicePrincipalCredentialType = "ServicePrincipalCert"
	ODataAADServicePrincipalCredentialTypeServicePrincipalKey  ODataAADServicePrincipalCredentialType = "ServicePrincipalKey"
)

// PossibleODataAADServicePrincipalCredentialTypeValues returns the possible values for the ODataAADServicePrincipalCredentialType const type.
func PossibleODataAADServicePrincipalCredentialTypeValues() []ODataAADServicePrincipalCredentialType {
	return []ODataAADServicePrincipalCredentialType{
		ODataAADServicePrincipalCredentialTypeServicePrincipalCert,
		ODataAADServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

// ToPtr returns a *ODataAADServicePrincipalCredentialType pointing to the current value.
func (c ODataAADServicePrincipalCredentialType) ToPtr() *ODataAADServicePrincipalCredentialType {
	return &c
}

// ODataAuthenticationType - Type of authentication used to connect to the OData service.
type ODataAuthenticationType string

const (
	ODataAuthenticationTypeAADServicePrincipal    ODataAuthenticationType = "AadServicePrincipal"
	ODataAuthenticationTypeAnonymous              ODataAuthenticationType = "Anonymous"
	ODataAuthenticationTypeBasic                  ODataAuthenticationType = "Basic"
	ODataAuthenticationTypeManagedServiceIdentity ODataAuthenticationType = "ManagedServiceIdentity"
	ODataAuthenticationTypeWindows                ODataAuthenticationType = "Windows"
)

// PossibleODataAuthenticationTypeValues returns the possible values for the ODataAuthenticationType const type.
func PossibleODataAuthenticationTypeValues() []ODataAuthenticationType {
	return []ODataAuthenticationType{
		ODataAuthenticationTypeAADServicePrincipal,
		ODataAuthenticationTypeAnonymous,
		ODataAuthenticationTypeBasic,
		ODataAuthenticationTypeManagedServiceIdentity,
		ODataAuthenticationTypeWindows,
	}
}

// ToPtr returns a *ODataAuthenticationType pointing to the current value.
func (c ODataAuthenticationType) ToPtr() *ODataAuthenticationType {
	return &c
}

// OraclePartitionOption - The partition mechanism that will be used for Oracle read in parallel.
type OraclePartitionOption string

const (
	OraclePartitionOptionDynamicRange              OraclePartitionOption = "DynamicRange"
	OraclePartitionOptionNone                      OraclePartitionOption = "None"
	OraclePartitionOptionPhysicalPartitionsOfTable OraclePartitionOption = "PhysicalPartitionsOfTable"
)

// PossibleOraclePartitionOptionValues returns the possible values for the OraclePartitionOption const type.
func PossibleOraclePartitionOptionValues() []OraclePartitionOption {
	return []OraclePartitionOption{
		OraclePartitionOptionDynamicRange,
		OraclePartitionOptionNone,
		OraclePartitionOptionPhysicalPartitionsOfTable,
	}
}

// ToPtr returns a *OraclePartitionOption pointing to the current value.
func (c OraclePartitionOption) ToPtr() *OraclePartitionOption {
	return &c
}

type OrcCompressionCodec string

const (
	OrcCompressionCodecLzo    OrcCompressionCodec = "lzo"
	OrcCompressionCodecNone   OrcCompressionCodec = "none"
	OrcCompressionCodecSnappy OrcCompressionCodec = "snappy"
	OrcCompressionCodecZlib   OrcCompressionCodec = "zlib"
)

// PossibleOrcCompressionCodecValues returns the possible values for the OrcCompressionCodec const type.
func PossibleOrcCompressionCodecValues() []OrcCompressionCodec {
	return []OrcCompressionCodec{
		OrcCompressionCodecLzo,
		OrcCompressionCodecNone,
		OrcCompressionCodecSnappy,
		OrcCompressionCodecZlib,
	}
}

// ToPtr returns a *OrcCompressionCodec pointing to the current value.
func (c OrcCompressionCodec) ToPtr() *OrcCompressionCodec {
	return &c
}

// ParameterType - Parameter type.
type ParameterType string

const (
	ParameterTypeArray        ParameterType = "Array"
	ParameterTypeBool         ParameterType = "Bool"
	ParameterTypeFloat        ParameterType = "Float"
	ParameterTypeInt          ParameterType = "Int"
	ParameterTypeObject       ParameterType = "Object"
	ParameterTypeSecureString ParameterType = "SecureString"
	ParameterTypeString       ParameterType = "String"
)

// PossibleParameterTypeValues returns the possible values for the ParameterType const type.
func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{
		ParameterTypeArray,
		ParameterTypeBool,
		ParameterTypeFloat,
		ParameterTypeInt,
		ParameterTypeObject,
		ParameterTypeSecureString,
		ParameterTypeString,
	}
}

// ToPtr returns a *ParameterType pointing to the current value.
func (c ParameterType) ToPtr() *ParameterType {
	return &c
}

// PhoenixAuthenticationType - The authentication mechanism used to connect to the Phoenix server.
type PhoenixAuthenticationType string

const (
	PhoenixAuthenticationTypeAnonymous                    PhoenixAuthenticationType = "Anonymous"
	PhoenixAuthenticationTypeUsernameAndPassword          PhoenixAuthenticationType = "UsernameAndPassword"
	PhoenixAuthenticationTypeWindowsAzureHDInsightService PhoenixAuthenticationType = "WindowsAzureHDInsightService"
)

// PossiblePhoenixAuthenticationTypeValues returns the possible values for the PhoenixAuthenticationType const type.
func PossiblePhoenixAuthenticationTypeValues() []PhoenixAuthenticationType {
	return []PhoenixAuthenticationType{
		PhoenixAuthenticationTypeAnonymous,
		PhoenixAuthenticationTypeUsernameAndPassword,
		PhoenixAuthenticationTypeWindowsAzureHDInsightService,
	}
}

// ToPtr returns a *PhoenixAuthenticationType pointing to the current value.
func (c PhoenixAuthenticationType) ToPtr() *PhoenixAuthenticationType {
	return &c
}

// PipelineReferenceType - Pipeline reference type.
type PipelineReferenceType string

const (
	PipelineReferenceTypePipelineReference PipelineReferenceType = "PipelineReference"
)

// PossiblePipelineReferenceTypeValues returns the possible values for the PipelineReferenceType const type.
func PossiblePipelineReferenceTypeValues() []PipelineReferenceType {
	return []PipelineReferenceType{
		PipelineReferenceTypePipelineReference,
	}
}

// ToPtr returns a *PipelineReferenceType pointing to the current value.
func (c PipelineReferenceType) ToPtr() *PipelineReferenceType {
	return &c
}

// PolybaseSettingsRejectType - Indicates whether the RejectValue property is specified as a literal value or a percentage.
type PolybaseSettingsRejectType string

const (
	PolybaseSettingsRejectTypePercentage PolybaseSettingsRejectType = "percentage"
	PolybaseSettingsRejectTypeValue      PolybaseSettingsRejectType = "value"
)

// PossiblePolybaseSettingsRejectTypeValues returns the possible values for the PolybaseSettingsRejectType const type.
func PossiblePolybaseSettingsRejectTypeValues() []PolybaseSettingsRejectType {
	return []PolybaseSettingsRejectType{
		PolybaseSettingsRejectTypePercentage,
		PolybaseSettingsRejectTypeValue,
	}
}

// ToPtr returns a *PolybaseSettingsRejectType pointing to the current value.
func (c PolybaseSettingsRejectType) ToPtr() *PolybaseSettingsRejectType {
	return &c
}

// PrestoAuthenticationType - The authentication mechanism used to connect to the Presto server.
type PrestoAuthenticationType string

const (
	PrestoAuthenticationTypeAnonymous PrestoAuthenticationType = "Anonymous"
	PrestoAuthenticationTypeLDAP      PrestoAuthenticationType = "LDAP"
)

// PossiblePrestoAuthenticationTypeValues returns the possible values for the PrestoAuthenticationType const type.
func PossiblePrestoAuthenticationTypeValues() []PrestoAuthenticationType {
	return []PrestoAuthenticationType{
		PrestoAuthenticationTypeAnonymous,
		PrestoAuthenticationTypeLDAP,
	}
}

// ToPtr returns a *PrestoAuthenticationType pointing to the current value.
func (c PrestoAuthenticationType) ToPtr() *PrestoAuthenticationType {
	return &c
}

// PublicNetworkAccess - Whether or not public network access is allowed for the data factory.
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled  PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// ToPtr returns a *PublicNetworkAccess pointing to the current value.
func (c PublicNetworkAccess) ToPtr() *PublicNetworkAccess {
	return &c
}

// RecurrenceFrequency - Enumerates possible frequency option for the schedule trigger.
type RecurrenceFrequency string

const (
	RecurrenceFrequencyDay          RecurrenceFrequency = "Day"
	RecurrenceFrequencyHour         RecurrenceFrequency = "Hour"
	RecurrenceFrequencyMinute       RecurrenceFrequency = "Minute"
	RecurrenceFrequencyMonth        RecurrenceFrequency = "Month"
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	RecurrenceFrequencyWeek         RecurrenceFrequency = "Week"
	RecurrenceFrequencyYear         RecurrenceFrequency = "Year"
)

// PossibleRecurrenceFrequencyValues returns the possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{
		RecurrenceFrequencyDay,
		RecurrenceFrequencyHour,
		RecurrenceFrequencyMinute,
		RecurrenceFrequencyMonth,
		RecurrenceFrequencyNotSpecified,
		RecurrenceFrequencyWeek,
		RecurrenceFrequencyYear,
	}
}

// ToPtr returns a *RecurrenceFrequency pointing to the current value.
func (c RecurrenceFrequency) ToPtr() *RecurrenceFrequency {
	return &c
}

// RestServiceAuthenticationType - Type of authentication used to connect to the REST service.
type RestServiceAuthenticationType string

const (
	RestServiceAuthenticationTypeAADServicePrincipal    RestServiceAuthenticationType = "AadServicePrincipal"
	RestServiceAuthenticationTypeAnonymous              RestServiceAuthenticationType = "Anonymous"
	RestServiceAuthenticationTypeBasic                  RestServiceAuthenticationType = "Basic"
	RestServiceAuthenticationTypeManagedServiceIdentity RestServiceAuthenticationType = "ManagedServiceIdentity"
)

// PossibleRestServiceAuthenticationTypeValues returns the possible values for the RestServiceAuthenticationType const type.
func PossibleRestServiceAuthenticationTypeValues() []RestServiceAuthenticationType {
	return []RestServiceAuthenticationType{
		RestServiceAuthenticationTypeAADServicePrincipal,
		RestServiceAuthenticationTypeAnonymous,
		RestServiceAuthenticationTypeBasic,
		RestServiceAuthenticationTypeManagedServiceIdentity,
	}
}

// ToPtr returns a *RestServiceAuthenticationType pointing to the current value.
func (c RestServiceAuthenticationType) ToPtr() *RestServiceAuthenticationType {
	return &c
}

// RunQueryFilterOperand - Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status;
// to query activity runs are ActivityName, ActivityRunStart,
// ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryFilterOperand string

const (
	RunQueryFilterOperandActivityName        RunQueryFilterOperand = "ActivityName"
	RunQueryFilterOperandActivityRunEnd      RunQueryFilterOperand = "ActivityRunEnd"
	RunQueryFilterOperandActivityRunStart    RunQueryFilterOperand = "ActivityRunStart"
	RunQueryFilterOperandActivityType        RunQueryFilterOperand = "ActivityType"
	RunQueryFilterOperandLatestOnly          RunQueryFilterOperand = "LatestOnly"
	RunQueryFilterOperandPipelineName        RunQueryFilterOperand = "PipelineName"
	RunQueryFilterOperandRunEnd              RunQueryFilterOperand = "RunEnd"
	RunQueryFilterOperandRunGroupID          RunQueryFilterOperand = "RunGroupId"
	RunQueryFilterOperandRunStart            RunQueryFilterOperand = "RunStart"
	RunQueryFilterOperandStatus              RunQueryFilterOperand = "Status"
	RunQueryFilterOperandTriggerName         RunQueryFilterOperand = "TriggerName"
	RunQueryFilterOperandTriggerRunTimestamp RunQueryFilterOperand = "TriggerRunTimestamp"
)

// PossibleRunQueryFilterOperandValues returns the possible values for the RunQueryFilterOperand const type.
func PossibleRunQueryFilterOperandValues() []RunQueryFilterOperand {
	return []RunQueryFilterOperand{
		RunQueryFilterOperandActivityName,
		RunQueryFilterOperandActivityRunEnd,
		RunQueryFilterOperandActivityRunStart,
		RunQueryFilterOperandActivityType,
		RunQueryFilterOperandLatestOnly,
		RunQueryFilterOperandPipelineName,
		RunQueryFilterOperandRunEnd,
		RunQueryFilterOperandRunGroupID,
		RunQueryFilterOperandRunStart,
		RunQueryFilterOperandStatus,
		RunQueryFilterOperandTriggerName,
		RunQueryFilterOperandTriggerRunTimestamp,
	}
}

// ToPtr returns a *RunQueryFilterOperand pointing to the current value.
func (c RunQueryFilterOperand) ToPtr() *RunQueryFilterOperand {
	return &c
}

// RunQueryFilterOperator - Operator to be used for filter.
type RunQueryFilterOperator string

const (
	RunQueryFilterOperatorEquals    RunQueryFilterOperator = "Equals"
	RunQueryFilterOperatorIn        RunQueryFilterOperator = "In"
	RunQueryFilterOperatorNotEquals RunQueryFilterOperator = "NotEquals"
	RunQueryFilterOperatorNotIn     RunQueryFilterOperator = "NotIn"
)

// PossibleRunQueryFilterOperatorValues returns the possible values for the RunQueryFilterOperator const type.
func PossibleRunQueryFilterOperatorValues() []RunQueryFilterOperator {
	return []RunQueryFilterOperator{
		RunQueryFilterOperatorEquals,
		RunQueryFilterOperatorIn,
		RunQueryFilterOperatorNotEquals,
		RunQueryFilterOperatorNotIn,
	}
}

// ToPtr returns a *RunQueryFilterOperator pointing to the current value.
func (c RunQueryFilterOperator) ToPtr() *RunQueryFilterOperator {
	return &c
}

// RunQueryOrder - Sorting order of the parameter.
type RunQueryOrder string

const (
	RunQueryOrderASC  RunQueryOrder = "ASC"
	RunQueryOrderDESC RunQueryOrder = "DESC"
)

// PossibleRunQueryOrderValues returns the possible values for the RunQueryOrder const type.
func PossibleRunQueryOrderValues() []RunQueryOrder {
	return []RunQueryOrder{
		RunQueryOrderASC,
		RunQueryOrderDESC,
	}
}

// ToPtr returns a *RunQueryOrder pointing to the current value.
func (c RunQueryOrder) ToPtr() *RunQueryOrder {
	return &c
}

// RunQueryOrderByField - Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd
// and Status; for activity runs are ActivityName, ActivityRunStart,
// ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.
type RunQueryOrderByField string

const (
	RunQueryOrderByFieldActivityName        RunQueryOrderByField = "ActivityName"
	RunQueryOrderByFieldActivityRunEnd      RunQueryOrderByField = "ActivityRunEnd"
	RunQueryOrderByFieldActivityRunStart    RunQueryOrderByField = "ActivityRunStart"
	RunQueryOrderByFieldPipelineName        RunQueryOrderByField = "PipelineName"
	RunQueryOrderByFieldRunEnd              RunQueryOrderByField = "RunEnd"
	RunQueryOrderByFieldRunStart            RunQueryOrderByField = "RunStart"
	RunQueryOrderByFieldStatus              RunQueryOrderByField = "Status"
	RunQueryOrderByFieldTriggerName         RunQueryOrderByField = "TriggerName"
	RunQueryOrderByFieldTriggerRunTimestamp RunQueryOrderByField = "TriggerRunTimestamp"
)

// PossibleRunQueryOrderByFieldValues returns the possible values for the RunQueryOrderByField const type.
func PossibleRunQueryOrderByFieldValues() []RunQueryOrderByField {
	return []RunQueryOrderByField{
		RunQueryOrderByFieldActivityName,
		RunQueryOrderByFieldActivityRunEnd,
		RunQueryOrderByFieldActivityRunStart,
		RunQueryOrderByFieldPipelineName,
		RunQueryOrderByFieldRunEnd,
		RunQueryOrderByFieldRunStart,
		RunQueryOrderByFieldStatus,
		RunQueryOrderByFieldTriggerName,
		RunQueryOrderByFieldTriggerRunTimestamp,
	}
}

// ToPtr returns a *RunQueryOrderByField pointing to the current value.
func (c RunQueryOrderByField) ToPtr() *RunQueryOrderByField {
	return &c
}

// SQLAlwaysEncryptedAkvAuthType - Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
type SQLAlwaysEncryptedAkvAuthType string

const (
	SQLAlwaysEncryptedAkvAuthTypeManagedIdentity             SQLAlwaysEncryptedAkvAuthType = "ManagedIdentity"
	SQLAlwaysEncryptedAkvAuthTypeServicePrincipal            SQLAlwaysEncryptedAkvAuthType = "ServicePrincipal"
	SQLAlwaysEncryptedAkvAuthTypeUserAssignedManagedIdentity SQLAlwaysEncryptedAkvAuthType = "UserAssignedManagedIdentity"
)

// PossibleSQLAlwaysEncryptedAkvAuthTypeValues returns the possible values for the SQLAlwaysEncryptedAkvAuthType const type.
func PossibleSQLAlwaysEncryptedAkvAuthTypeValues() []SQLAlwaysEncryptedAkvAuthType {
	return []SQLAlwaysEncryptedAkvAuthType{
		SQLAlwaysEncryptedAkvAuthTypeManagedIdentity,
		SQLAlwaysEncryptedAkvAuthTypeServicePrincipal,
		SQLAlwaysEncryptedAkvAuthTypeUserAssignedManagedIdentity,
	}
}

// ToPtr returns a *SQLAlwaysEncryptedAkvAuthType pointing to the current value.
func (c SQLAlwaysEncryptedAkvAuthType) ToPtr() *SQLAlwaysEncryptedAkvAuthType {
	return &c
}

// SQLDWWriteBehaviorEnum - Specify the write behavior when copying data into sql dw.
type SQLDWWriteBehaviorEnum string

const (
	SQLDWWriteBehaviorEnumInsert SQLDWWriteBehaviorEnum = "Insert"
	SQLDWWriteBehaviorEnumUpsert SQLDWWriteBehaviorEnum = "Upsert"
)

// PossibleSQLDWWriteBehaviorEnumValues returns the possible values for the SQLDWWriteBehaviorEnum const type.
func PossibleSQLDWWriteBehaviorEnumValues() []SQLDWWriteBehaviorEnum {
	return []SQLDWWriteBehaviorEnum{
		SQLDWWriteBehaviorEnumInsert,
		SQLDWWriteBehaviorEnumUpsert,
	}
}

// ToPtr returns a *SQLDWWriteBehaviorEnum pointing to the current value.
func (c SQLDWWriteBehaviorEnum) ToPtr() *SQLDWWriteBehaviorEnum {
	return &c
}

// SQLPartitionOption - The partition mechanism that will be used for Sql read in parallel.
type SQLPartitionOption string

const (
	SQLPartitionOptionDynamicRange              SQLPartitionOption = "DynamicRange"
	SQLPartitionOptionNone                      SQLPartitionOption = "None"
	SQLPartitionOptionPhysicalPartitionsOfTable SQLPartitionOption = "PhysicalPartitionsOfTable"
)

// PossibleSQLPartitionOptionValues returns the possible values for the SQLPartitionOption const type.
func PossibleSQLPartitionOptionValues() []SQLPartitionOption {
	return []SQLPartitionOption{
		SQLPartitionOptionDynamicRange,
		SQLPartitionOptionNone,
		SQLPartitionOptionPhysicalPartitionsOfTable,
	}
}

// ToPtr returns a *SQLPartitionOption pointing to the current value.
func (c SQLPartitionOption) ToPtr() *SQLPartitionOption {
	return &c
}

// SQLWriteBehaviorEnum - Specify the write behavior when copying data into sql.
type SQLWriteBehaviorEnum string

const (
	SQLWriteBehaviorEnumInsert          SQLWriteBehaviorEnum = "Insert"
	SQLWriteBehaviorEnumStoredProcedure SQLWriteBehaviorEnum = "StoredProcedure"
	SQLWriteBehaviorEnumUpsert          SQLWriteBehaviorEnum = "Upsert"
)

// PossibleSQLWriteBehaviorEnumValues returns the possible values for the SQLWriteBehaviorEnum const type.
func PossibleSQLWriteBehaviorEnumValues() []SQLWriteBehaviorEnum {
	return []SQLWriteBehaviorEnum{
		SQLWriteBehaviorEnumInsert,
		SQLWriteBehaviorEnumStoredProcedure,
		SQLWriteBehaviorEnumUpsert,
	}
}

// ToPtr returns a *SQLWriteBehaviorEnum pointing to the current value.
func (c SQLWriteBehaviorEnum) ToPtr() *SQLWriteBehaviorEnum {
	return &c
}

// SalesforceSinkWriteBehavior - The write behavior for the operation. Default is Insert.
type SalesforceSinkWriteBehavior string

const (
	SalesforceSinkWriteBehaviorInsert SalesforceSinkWriteBehavior = "Insert"
	SalesforceSinkWriteBehaviorUpsert SalesforceSinkWriteBehavior = "Upsert"
)

// PossibleSalesforceSinkWriteBehaviorValues returns the possible values for the SalesforceSinkWriteBehavior const type.
func PossibleSalesforceSinkWriteBehaviorValues() []SalesforceSinkWriteBehavior {
	return []SalesforceSinkWriteBehavior{
		SalesforceSinkWriteBehaviorInsert,
		SalesforceSinkWriteBehaviorUpsert,
	}
}

// ToPtr returns a *SalesforceSinkWriteBehavior pointing to the current value.
func (c SalesforceSinkWriteBehavior) ToPtr() *SalesforceSinkWriteBehavior {
	return &c
}

// SalesforceSourceReadBehavior - The read behavior for the operation. Default is Query.
type SalesforceSourceReadBehavior string

const (
	SalesforceSourceReadBehaviorQuery    SalesforceSourceReadBehavior = "Query"
	SalesforceSourceReadBehaviorQueryAll SalesforceSourceReadBehavior = "QueryAll"
)

// PossibleSalesforceSourceReadBehaviorValues returns the possible values for the SalesforceSourceReadBehavior const type.
func PossibleSalesforceSourceReadBehaviorValues() []SalesforceSourceReadBehavior {
	return []SalesforceSourceReadBehavior{
		SalesforceSourceReadBehaviorQuery,
		SalesforceSourceReadBehaviorQueryAll,
	}
}

// ToPtr returns a *SalesforceSourceReadBehavior pointing to the current value.
func (c SalesforceSourceReadBehavior) ToPtr() *SalesforceSourceReadBehavior {
	return &c
}

// SapCloudForCustomerSinkWriteBehavior - The write behavior for the operation. Default is 'Insert'.
type SapCloudForCustomerSinkWriteBehavior string

const (
	SapCloudForCustomerSinkWriteBehaviorInsert SapCloudForCustomerSinkWriteBehavior = "Insert"
	SapCloudForCustomerSinkWriteBehaviorUpdate SapCloudForCustomerSinkWriteBehavior = "Update"
)

// PossibleSapCloudForCustomerSinkWriteBehaviorValues returns the possible values for the SapCloudForCustomerSinkWriteBehavior const type.
func PossibleSapCloudForCustomerSinkWriteBehaviorValues() []SapCloudForCustomerSinkWriteBehavior {
	return []SapCloudForCustomerSinkWriteBehavior{
		SapCloudForCustomerSinkWriteBehaviorInsert,
		SapCloudForCustomerSinkWriteBehaviorUpdate,
	}
}

// ToPtr returns a *SapCloudForCustomerSinkWriteBehavior pointing to the current value.
func (c SapCloudForCustomerSinkWriteBehavior) ToPtr() *SapCloudForCustomerSinkWriteBehavior {
	return &c
}

// SapHanaAuthenticationType - The authentication type to be used to connect to the SAP HANA server.
type SapHanaAuthenticationType string

const (
	SapHanaAuthenticationTypeBasic   SapHanaAuthenticationType = "Basic"
	SapHanaAuthenticationTypeWindows SapHanaAuthenticationType = "Windows"
)

// PossibleSapHanaAuthenticationTypeValues returns the possible values for the SapHanaAuthenticationType const type.
func PossibleSapHanaAuthenticationTypeValues() []SapHanaAuthenticationType {
	return []SapHanaAuthenticationType{
		SapHanaAuthenticationTypeBasic,
		SapHanaAuthenticationTypeWindows,
	}
}

// ToPtr returns a *SapHanaAuthenticationType pointing to the current value.
func (c SapHanaAuthenticationType) ToPtr() *SapHanaAuthenticationType {
	return &c
}

// SapHanaPartitionOption - The partition mechanism that will be used for SAP HANA read in parallel.
type SapHanaPartitionOption string

const (
	SapHanaPartitionOptionNone                      SapHanaPartitionOption = "None"
	SapHanaPartitionOptionPhysicalPartitionsOfTable SapHanaPartitionOption = "PhysicalPartitionsOfTable"
	SapHanaPartitionOptionSapHanaDynamicRange       SapHanaPartitionOption = "SapHanaDynamicRange"
)

// PossibleSapHanaPartitionOptionValues returns the possible values for the SapHanaPartitionOption const type.
func PossibleSapHanaPartitionOptionValues() []SapHanaPartitionOption {
	return []SapHanaPartitionOption{
		SapHanaPartitionOptionNone,
		SapHanaPartitionOptionPhysicalPartitionsOfTable,
		SapHanaPartitionOptionSapHanaDynamicRange,
	}
}

// ToPtr returns a *SapHanaPartitionOption pointing to the current value.
func (c SapHanaPartitionOption) ToPtr() *SapHanaPartitionOption {
	return &c
}

// SapTablePartitionOption - The partition mechanism that will be used for SAP table read in parallel.
type SapTablePartitionOption string

const (
	SapTablePartitionOptionNone                     SapTablePartitionOption = "None"
	SapTablePartitionOptionPartitionOnCalendarDate  SapTablePartitionOption = "PartitionOnCalendarDate"
	SapTablePartitionOptionPartitionOnCalendarMonth SapTablePartitionOption = "PartitionOnCalendarMonth"
	SapTablePartitionOptionPartitionOnCalendarYear  SapTablePartitionOption = "PartitionOnCalendarYear"
	SapTablePartitionOptionPartitionOnInt           SapTablePartitionOption = "PartitionOnInt"
	SapTablePartitionOptionPartitionOnTime          SapTablePartitionOption = "PartitionOnTime"
)

// PossibleSapTablePartitionOptionValues returns the possible values for the SapTablePartitionOption const type.
func PossibleSapTablePartitionOptionValues() []SapTablePartitionOption {
	return []SapTablePartitionOption{
		SapTablePartitionOptionNone,
		SapTablePartitionOptionPartitionOnCalendarDate,
		SapTablePartitionOptionPartitionOnCalendarMonth,
		SapTablePartitionOptionPartitionOnCalendarYear,
		SapTablePartitionOptionPartitionOnInt,
		SapTablePartitionOptionPartitionOnTime,
	}
}

// ToPtr returns a *SapTablePartitionOption pointing to the current value.
func (c SapTablePartitionOption) ToPtr() *SapTablePartitionOption {
	return &c
}

// SelfHostedIntegrationRuntimeNodeStatus - Status of the integration runtime node.
type SelfHostedIntegrationRuntimeNodeStatus string

const (
	SelfHostedIntegrationRuntimeNodeStatusInitializeFailed SelfHostedIntegrationRuntimeNodeStatus = "InitializeFailed"
	SelfHostedIntegrationRuntimeNodeStatusInitializing     SelfHostedIntegrationRuntimeNodeStatus = "Initializing"
	SelfHostedIntegrationRuntimeNodeStatusLimited          SelfHostedIntegrationRuntimeNodeStatus = "Limited"
	SelfHostedIntegrationRuntimeNodeStatusNeedRegistration SelfHostedIntegrationRuntimeNodeStatus = "NeedRegistration"
	SelfHostedIntegrationRuntimeNodeStatusOffline          SelfHostedIntegrationRuntimeNodeStatus = "Offline"
	SelfHostedIntegrationRuntimeNodeStatusOnline           SelfHostedIntegrationRuntimeNodeStatus = "Online"
	SelfHostedIntegrationRuntimeNodeStatusUpgrading        SelfHostedIntegrationRuntimeNodeStatus = "Upgrading"
)

// PossibleSelfHostedIntegrationRuntimeNodeStatusValues returns the possible values for the SelfHostedIntegrationRuntimeNodeStatus const type.
func PossibleSelfHostedIntegrationRuntimeNodeStatusValues() []SelfHostedIntegrationRuntimeNodeStatus {
	return []SelfHostedIntegrationRuntimeNodeStatus{
		SelfHostedIntegrationRuntimeNodeStatusInitializeFailed,
		SelfHostedIntegrationRuntimeNodeStatusInitializing,
		SelfHostedIntegrationRuntimeNodeStatusLimited,
		SelfHostedIntegrationRuntimeNodeStatusNeedRegistration,
		SelfHostedIntegrationRuntimeNodeStatusOffline,
		SelfHostedIntegrationRuntimeNodeStatusOnline,
		SelfHostedIntegrationRuntimeNodeStatusUpgrading,
	}
}

// ToPtr returns a *SelfHostedIntegrationRuntimeNodeStatus pointing to the current value.
func (c SelfHostedIntegrationRuntimeNodeStatus) ToPtr() *SelfHostedIntegrationRuntimeNodeStatus {
	return &c
}

// ServiceNowAuthenticationType - The authentication type to use.
type ServiceNowAuthenticationType string

const (
	ServiceNowAuthenticationTypeBasic  ServiceNowAuthenticationType = "Basic"
	ServiceNowAuthenticationTypeOAuth2 ServiceNowAuthenticationType = "OAuth2"
)

// PossibleServiceNowAuthenticationTypeValues returns the possible values for the ServiceNowAuthenticationType const type.
func PossibleServiceNowAuthenticationTypeValues() []ServiceNowAuthenticationType {
	return []ServiceNowAuthenticationType{
		ServiceNowAuthenticationTypeBasic,
		ServiceNowAuthenticationTypeOAuth2,
	}
}

// ToPtr returns a *ServiceNowAuthenticationType pointing to the current value.
func (c ServiceNowAuthenticationType) ToPtr() *ServiceNowAuthenticationType {
	return &c
}

// ServicePrincipalCredentialType - All available servicePrincipalCredentialType values.
type ServicePrincipalCredentialType string

const (
	ServicePrincipalCredentialTypeServicePrincipalCert ServicePrincipalCredentialType = "ServicePrincipalCert"
	ServicePrincipalCredentialTypeServicePrincipalKey  ServicePrincipalCredentialType = "ServicePrincipalKey"
)

// PossibleServicePrincipalCredentialTypeValues returns the possible values for the ServicePrincipalCredentialType const type.
func PossibleServicePrincipalCredentialTypeValues() []ServicePrincipalCredentialType {
	return []ServicePrincipalCredentialType{
		ServicePrincipalCredentialTypeServicePrincipalCert,
		ServicePrincipalCredentialTypeServicePrincipalKey,
	}
}

// ToPtr returns a *ServicePrincipalCredentialType pointing to the current value.
func (c ServicePrincipalCredentialType) ToPtr() *ServicePrincipalCredentialType {
	return &c
}

// SftpAuthenticationType - The authentication type to be used to connect to the FTP server.
type SftpAuthenticationType string

const (
	SftpAuthenticationTypeBasic        SftpAuthenticationType = "Basic"
	SftpAuthenticationTypeMultiFactor  SftpAuthenticationType = "MultiFactor"
	SftpAuthenticationTypeSSHPublicKey SftpAuthenticationType = "SshPublicKey"
)

// PossibleSftpAuthenticationTypeValues returns the possible values for the SftpAuthenticationType const type.
func PossibleSftpAuthenticationTypeValues() []SftpAuthenticationType {
	return []SftpAuthenticationType{
		SftpAuthenticationTypeBasic,
		SftpAuthenticationTypeMultiFactor,
		SftpAuthenticationTypeSSHPublicKey,
	}
}

// ToPtr returns a *SftpAuthenticationType pointing to the current value.
func (c SftpAuthenticationType) ToPtr() *SftpAuthenticationType {
	return &c
}

// SparkAuthenticationType - The authentication method used to access the Spark server.
type SparkAuthenticationType string

const (
	SparkAuthenticationTypeAnonymous                    SparkAuthenticationType = "Anonymous"
	SparkAuthenticationTypeUsername                     SparkAuthenticationType = "Username"
	SparkAuthenticationTypeUsernameAndPassword          SparkAuthenticationType = "UsernameAndPassword"
	SparkAuthenticationTypeWindowsAzureHDInsightService SparkAuthenticationType = "WindowsAzureHDInsightService"
)

// PossibleSparkAuthenticationTypeValues returns the possible values for the SparkAuthenticationType const type.
func PossibleSparkAuthenticationTypeValues() []SparkAuthenticationType {
	return []SparkAuthenticationType{
		SparkAuthenticationTypeAnonymous,
		SparkAuthenticationTypeUsername,
		SparkAuthenticationTypeUsernameAndPassword,
		SparkAuthenticationTypeWindowsAzureHDInsightService,
	}
}

// ToPtr returns a *SparkAuthenticationType pointing to the current value.
func (c SparkAuthenticationType) ToPtr() *SparkAuthenticationType {
	return &c
}

// SparkServerType - The type of Spark server.
type SparkServerType string

const (
	SparkServerTypeSharkServer       SparkServerType = "SharkServer"
	SparkServerTypeSharkServer2      SparkServerType = "SharkServer2"
	SparkServerTypeSparkThriftServer SparkServerType = "SparkThriftServer"
)

// PossibleSparkServerTypeValues returns the possible values for the SparkServerType const type.
func PossibleSparkServerTypeValues() []SparkServerType {
	return []SparkServerType{
		SparkServerTypeSharkServer,
		SparkServerTypeSharkServer2,
		SparkServerTypeSparkThriftServer,
	}
}

// ToPtr returns a *SparkServerType pointing to the current value.
func (c SparkServerType) ToPtr() *SparkServerType {
	return &c
}

// SparkThriftTransportProtocol - The transport protocol to use in the Thrift layer.
type SparkThriftTransportProtocol string

const (
	SparkThriftTransportProtocolBinary SparkThriftTransportProtocol = "Binary"
	SparkThriftTransportProtocolHTTP   SparkThriftTransportProtocol = "HTTP "
	SparkThriftTransportProtocolSASL   SparkThriftTransportProtocol = "SASL"
)

// PossibleSparkThriftTransportProtocolValues returns the possible values for the SparkThriftTransportProtocol const type.
func PossibleSparkThriftTransportProtocolValues() []SparkThriftTransportProtocol {
	return []SparkThriftTransportProtocol{
		SparkThriftTransportProtocolBinary,
		SparkThriftTransportProtocolHTTP,
		SparkThriftTransportProtocolSASL,
	}
}

// ToPtr returns a *SparkThriftTransportProtocol pointing to the current value.
func (c SparkThriftTransportProtocol) ToPtr() *SparkThriftTransportProtocol {
	return &c
}

// SsisLogLocationType - The type of SSIS log location.
type SsisLogLocationType string

const (
	SsisLogLocationTypeFile SsisLogLocationType = "File"
)

// PossibleSsisLogLocationTypeValues returns the possible values for the SsisLogLocationType const type.
func PossibleSsisLogLocationTypeValues() []SsisLogLocationType {
	return []SsisLogLocationType{
		SsisLogLocationTypeFile,
	}
}

// ToPtr returns a *SsisLogLocationType pointing to the current value.
func (c SsisLogLocationType) ToPtr() *SsisLogLocationType {
	return &c
}

// SsisObjectMetadataType - The type of SSIS object metadata.
type SsisObjectMetadataType string

const (
	SsisObjectMetadataTypeEnvironment SsisObjectMetadataType = "Environment"
	SsisObjectMetadataTypeFolder      SsisObjectMetadataType = "Folder"
	SsisObjectMetadataTypePackage     SsisObjectMetadataType = "Package"
	SsisObjectMetadataTypeProject     SsisObjectMetadataType = "Project"
)

// PossibleSsisObjectMetadataTypeValues returns the possible values for the SsisObjectMetadataType const type.
func PossibleSsisObjectMetadataTypeValues() []SsisObjectMetadataType {
	return []SsisObjectMetadataType{
		SsisObjectMetadataTypeEnvironment,
		SsisObjectMetadataTypeFolder,
		SsisObjectMetadataTypePackage,
		SsisObjectMetadataTypeProject,
	}
}

// ToPtr returns a *SsisObjectMetadataType pointing to the current value.
func (c SsisObjectMetadataType) ToPtr() *SsisObjectMetadataType {
	return &c
}

// SsisPackageLocationType - The type of SSIS package location.
type SsisPackageLocationType string

const (
	SsisPackageLocationTypeFile          SsisPackageLocationType = "File"
	SsisPackageLocationTypeInlinePackage SsisPackageLocationType = "InlinePackage"
	SsisPackageLocationTypePackageStore  SsisPackageLocationType = "PackageStore"
	SsisPackageLocationTypeSSISDB        SsisPackageLocationType = "SSISDB"
)

// PossibleSsisPackageLocationTypeValues returns the possible values for the SsisPackageLocationType const type.
func PossibleSsisPackageLocationTypeValues() []SsisPackageLocationType {
	return []SsisPackageLocationType{
		SsisPackageLocationTypeFile,
		SsisPackageLocationTypeInlinePackage,
		SsisPackageLocationTypePackageStore,
		SsisPackageLocationTypeSSISDB,
	}
}

// ToPtr returns a *SsisPackageLocationType pointing to the current value.
func (c SsisPackageLocationType) ToPtr() *SsisPackageLocationType {
	return &c
}

// StoredProcedureParameterType - Stored procedure parameter type.
type StoredProcedureParameterType string

const (
	StoredProcedureParameterTypeBoolean StoredProcedureParameterType = "Boolean"
	StoredProcedureParameterTypeDate    StoredProcedureParameterType = "Date"
	StoredProcedureParameterTypeDecimal StoredProcedureParameterType = "Decimal"
	StoredProcedureParameterTypeGUID    StoredProcedureParameterType = "Guid"
	StoredProcedureParameterTypeInt     StoredProcedureParameterType = "Int"
	StoredProcedureParameterTypeInt64   StoredProcedureParameterType = "Int64"
	StoredProcedureParameterTypeString  StoredProcedureParameterType = "String"
)

// PossibleStoredProcedureParameterTypeValues returns the possible values for the StoredProcedureParameterType const type.
func PossibleStoredProcedureParameterTypeValues() []StoredProcedureParameterType {
	return []StoredProcedureParameterType{
		StoredProcedureParameterTypeBoolean,
		StoredProcedureParameterTypeDate,
		StoredProcedureParameterTypeDecimal,
		StoredProcedureParameterTypeGUID,
		StoredProcedureParameterTypeInt,
		StoredProcedureParameterTypeInt64,
		StoredProcedureParameterTypeString,
	}
}

// ToPtr returns a *StoredProcedureParameterType pointing to the current value.
func (c StoredProcedureParameterType) ToPtr() *StoredProcedureParameterType {
	return &c
}

// SybaseAuthenticationType - AuthenticationType to be used for connection.
type SybaseAuthenticationType string

const (
	SybaseAuthenticationTypeBasic   SybaseAuthenticationType = "Basic"
	SybaseAuthenticationTypeWindows SybaseAuthenticationType = "Windows"
)

// PossibleSybaseAuthenticationTypeValues returns the possible values for the SybaseAuthenticationType const type.
func PossibleSybaseAuthenticationTypeValues() []SybaseAuthenticationType {
	return []SybaseAuthenticationType{
		SybaseAuthenticationTypeBasic,
		SybaseAuthenticationTypeWindows,
	}
}

// ToPtr returns a *SybaseAuthenticationType pointing to the current value.
func (c SybaseAuthenticationType) ToPtr() *SybaseAuthenticationType {
	return &c
}

// TeradataAuthenticationType - AuthenticationType to be used for connection.
type TeradataAuthenticationType string

const (
	TeradataAuthenticationTypeBasic   TeradataAuthenticationType = "Basic"
	TeradataAuthenticationTypeWindows TeradataAuthenticationType = "Windows"
)

// PossibleTeradataAuthenticationTypeValues returns the possible values for the TeradataAuthenticationType const type.
func PossibleTeradataAuthenticationTypeValues() []TeradataAuthenticationType {
	return []TeradataAuthenticationType{
		TeradataAuthenticationTypeBasic,
		TeradataAuthenticationTypeWindows,
	}
}

// ToPtr returns a *TeradataAuthenticationType pointing to the current value.
func (c TeradataAuthenticationType) ToPtr() *TeradataAuthenticationType {
	return &c
}

// TeradataPartitionOption - The partition mechanism that will be used for teradata read in parallel.
type TeradataPartitionOption string

const (
	TeradataPartitionOptionDynamicRange TeradataPartitionOption = "DynamicRange"
	TeradataPartitionOptionHash         TeradataPartitionOption = "Hash"
	TeradataPartitionOptionNone         TeradataPartitionOption = "None"
)

// PossibleTeradataPartitionOptionValues returns the possible values for the TeradataPartitionOption const type.
func PossibleTeradataPartitionOptionValues() []TeradataPartitionOption {
	return []TeradataPartitionOption{
		TeradataPartitionOptionDynamicRange,
		TeradataPartitionOptionHash,
		TeradataPartitionOptionNone,
	}
}

// ToPtr returns a *TeradataPartitionOption pointing to the current value.
func (c TeradataPartitionOption) ToPtr() *TeradataPartitionOption {
	return &c
}

// TriggerReferenceType - Trigger reference type.
type TriggerReferenceType string

const (
	TriggerReferenceTypeTriggerReference TriggerReferenceType = "TriggerReference"
)

// PossibleTriggerReferenceTypeValues returns the possible values for the TriggerReferenceType const type.
func PossibleTriggerReferenceTypeValues() []TriggerReferenceType {
	return []TriggerReferenceType{
		TriggerReferenceTypeTriggerReference,
	}
}

// ToPtr returns a *TriggerReferenceType pointing to the current value.
func (c TriggerReferenceType) ToPtr() *TriggerReferenceType {
	return &c
}

// TriggerRunStatus - Trigger run status.
type TriggerRunStatus string

const (
	TriggerRunStatusFailed     TriggerRunStatus = "Failed"
	TriggerRunStatusInprogress TriggerRunStatus = "Inprogress"
	TriggerRunStatusSucceeded  TriggerRunStatus = "Succeeded"
)

// PossibleTriggerRunStatusValues returns the possible values for the TriggerRunStatus const type.
func PossibleTriggerRunStatusValues() []TriggerRunStatus {
	return []TriggerRunStatus{
		TriggerRunStatusFailed,
		TriggerRunStatusInprogress,
		TriggerRunStatusSucceeded,
	}
}

// ToPtr returns a *TriggerRunStatus pointing to the current value.
func (c TriggerRunStatus) ToPtr() *TriggerRunStatus {
	return &c
}

// TriggerRuntimeState - Enumerates possible state of Triggers.
type TriggerRuntimeState string

const (
	TriggerRuntimeStateDisabled TriggerRuntimeState = "Disabled"
	TriggerRuntimeStateStarted  TriggerRuntimeState = "Started"
	TriggerRuntimeStateStopped  TriggerRuntimeState = "Stopped"
)

// PossibleTriggerRuntimeStateValues returns the possible values for the TriggerRuntimeState const type.
func PossibleTriggerRuntimeStateValues() []TriggerRuntimeState {
	return []TriggerRuntimeState{
		TriggerRuntimeStateDisabled,
		TriggerRuntimeStateStarted,
		TriggerRuntimeStateStopped,
	}
}

// ToPtr returns a *TriggerRuntimeState pointing to the current value.
func (c TriggerRuntimeState) ToPtr() *TriggerRuntimeState {
	return &c
}

// TumblingWindowFrequency - Enumerates possible frequency option for the tumbling window trigger.
type TumblingWindowFrequency string

const (
	TumblingWindowFrequencyHour   TumblingWindowFrequency = "Hour"
	TumblingWindowFrequencyMinute TumblingWindowFrequency = "Minute"
	TumblingWindowFrequencyMonth  TumblingWindowFrequency = "Month"
)

// PossibleTumblingWindowFrequencyValues returns the possible values for the TumblingWindowFrequency const type.
func PossibleTumblingWindowFrequencyValues() []TumblingWindowFrequency {
	return []TumblingWindowFrequency{
		TumblingWindowFrequencyHour,
		TumblingWindowFrequencyMinute,
		TumblingWindowFrequencyMonth,
	}
}

// ToPtr returns a *TumblingWindowFrequency pointing to the current value.
func (c TumblingWindowFrequency) ToPtr() *TumblingWindowFrequency {
	return &c
}

// VariableType - Variable type.
type VariableType string

const (
	VariableTypeArray  VariableType = "Array"
	VariableTypeBool   VariableType = "Bool"
	VariableTypeString VariableType = "String"
)

// PossibleVariableTypeValues returns the possible values for the VariableType const type.
func PossibleVariableTypeValues() []VariableType {
	return []VariableType{
		VariableTypeArray,
		VariableTypeBool,
		VariableTypeString,
	}
}

// ToPtr returns a *VariableType pointing to the current value.
func (c VariableType) ToPtr() *VariableType {
	return &c
}

// WebActivityMethod - The list of HTTP methods supported by a WebActivity.
type WebActivityMethod string

const (
	WebActivityMethodDELETE WebActivityMethod = "DELETE"
	WebActivityMethodGET    WebActivityMethod = "GET"
	WebActivityMethodPOST   WebActivityMethod = "POST"
	WebActivityMethodPUT    WebActivityMethod = "PUT"
)

// PossibleWebActivityMethodValues returns the possible values for the WebActivityMethod const type.
func PossibleWebActivityMethodValues() []WebActivityMethod {
	return []WebActivityMethod{
		WebActivityMethodDELETE,
		WebActivityMethodGET,
		WebActivityMethodPOST,
		WebActivityMethodPUT,
	}
}

// ToPtr returns a *WebActivityMethod pointing to the current value.
func (c WebActivityMethod) ToPtr() *WebActivityMethod {
	return &c
}

// WebAuthenticationType - Type of authentication used to connect to the web table source.
type WebAuthenticationType string

const (
	WebAuthenticationTypeAnonymous         WebAuthenticationType = "Anonymous"
	WebAuthenticationTypeBasic             WebAuthenticationType = "Basic"
	WebAuthenticationTypeClientCertificate WebAuthenticationType = "ClientCertificate"
)

// PossibleWebAuthenticationTypeValues returns the possible values for the WebAuthenticationType const type.
func PossibleWebAuthenticationTypeValues() []WebAuthenticationType {
	return []WebAuthenticationType{
		WebAuthenticationTypeAnonymous,
		WebAuthenticationTypeBasic,
		WebAuthenticationTypeClientCertificate,
	}
}

// ToPtr returns a *WebAuthenticationType pointing to the current value.
func (c WebAuthenticationType) ToPtr() *WebAuthenticationType {
	return &c
}

// WebHookActivityMethod - The list of HTTP methods supported by a WebHook activity.
type WebHookActivityMethod string

const (
	WebHookActivityMethodPOST WebHookActivityMethod = "POST"
)

// PossibleWebHookActivityMethodValues returns the possible values for the WebHookActivityMethod const type.
func PossibleWebHookActivityMethodValues() []WebHookActivityMethod {
	return []WebHookActivityMethod{
		WebHookActivityMethodPOST,
	}
}

// ToPtr returns a *WebHookActivityMethod pointing to the current value.
func (c WebHookActivityMethod) ToPtr() *WebHookActivityMethod {
	return &c
}
