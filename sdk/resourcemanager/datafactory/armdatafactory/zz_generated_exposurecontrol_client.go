//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ExposureControlClient contains the methods for the ExposureControl group.
// Don't use this type directly, use NewExposureControlClient() instead.
type ExposureControlClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewExposureControlClient creates a new instance of ExposureControlClient with the specified values.
func NewExposureControlClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ExposureControlClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ExposureControlClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// GetFeatureValue - Get exposure control feature for specific location.
// If the operation fails it returns the *CloudError error type.
func (client *ExposureControlClient) GetFeatureValue(ctx context.Context, locationID string, exposureControlRequest ExposureControlRequest, options *ExposureControlGetFeatureValueOptions) (ExposureControlGetFeatureValueResponse, error) {
	req, err := client.getFeatureValueCreateRequest(ctx, locationID, exposureControlRequest, options)
	if err != nil {
		return ExposureControlGetFeatureValueResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExposureControlGetFeatureValueResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExposureControlGetFeatureValueResponse{}, client.getFeatureValueHandleError(resp)
	}
	return client.getFeatureValueHandleResponse(resp)
}

// getFeatureValueCreateRequest creates the GetFeatureValue request.
func (client *ExposureControlClient) getFeatureValueCreateRequest(ctx context.Context, locationID string, exposureControlRequest ExposureControlRequest, options *ExposureControlGetFeatureValueOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DataFactory/locations/{locationId}/getFeatureValue"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if locationID == "" {
		return nil, errors.New("parameter locationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationId}", url.PathEscape(locationID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, exposureControlRequest)
}

// getFeatureValueHandleResponse handles the GetFeatureValue response.
func (client *ExposureControlClient) getFeatureValueHandleResponse(resp *http.Response) (ExposureControlGetFeatureValueResponse, error) {
	result := ExposureControlGetFeatureValueResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExposureControlResponse); err != nil {
		return ExposureControlGetFeatureValueResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFeatureValueHandleError handles the GetFeatureValue error response.
func (client *ExposureControlClient) getFeatureValueHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFeatureValueByFactory - Get exposure control feature for specific factory.
// If the operation fails it returns the *CloudError error type.
func (client *ExposureControlClient) GetFeatureValueByFactory(ctx context.Context, resourceGroupName string, factoryName string, exposureControlRequest ExposureControlRequest, options *ExposureControlGetFeatureValueByFactoryOptions) (ExposureControlGetFeatureValueByFactoryResponse, error) {
	req, err := client.getFeatureValueByFactoryCreateRequest(ctx, resourceGroupName, factoryName, exposureControlRequest, options)
	if err != nil {
		return ExposureControlGetFeatureValueByFactoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExposureControlGetFeatureValueByFactoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExposureControlGetFeatureValueByFactoryResponse{}, client.getFeatureValueByFactoryHandleError(resp)
	}
	return client.getFeatureValueByFactoryHandleResponse(resp)
}

// getFeatureValueByFactoryCreateRequest creates the GetFeatureValueByFactory request.
func (client *ExposureControlClient) getFeatureValueByFactoryCreateRequest(ctx context.Context, resourceGroupName string, factoryName string, exposureControlRequest ExposureControlRequest, options *ExposureControlGetFeatureValueByFactoryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if factoryName == "" {
		return nil, errors.New("parameter factoryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{factoryName}", url.PathEscape(factoryName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, exposureControlRequest)
}

// getFeatureValueByFactoryHandleResponse handles the GetFeatureValueByFactory response.
func (client *ExposureControlClient) getFeatureValueByFactoryHandleResponse(resp *http.Response) (ExposureControlGetFeatureValueByFactoryResponse, error) {
	result := ExposureControlGetFeatureValueByFactoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExposureControlResponse); err != nil {
		return ExposureControlGetFeatureValueByFactoryResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFeatureValueByFactoryHandleError handles the GetFeatureValueByFactory error response.
func (client *ExposureControlClient) getFeatureValueByFactoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// QueryFeatureValuesByFactory - Get list of exposure control features for specific factory.
// If the operation fails it returns the *CloudError error type.
func (client *ExposureControlClient) QueryFeatureValuesByFactory(ctx context.Context, resourceGroupName string, factoryName string, exposureControlBatchRequest ExposureControlBatchRequest, options *ExposureControlQueryFeatureValuesByFactoryOptions) (ExposureControlQueryFeatureValuesByFactoryResponse, error) {
	req, err := client.queryFeatureValuesByFactoryCreateRequest(ctx, resourceGroupName, factoryName, exposureControlBatchRequest, options)
	if err != nil {
		return ExposureControlQueryFeatureValuesByFactoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ExposureControlQueryFeatureValuesByFactoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ExposureControlQueryFeatureValuesByFactoryResponse{}, client.queryFeatureValuesByFactoryHandleError(resp)
	}
	return client.queryFeatureValuesByFactoryHandleResponse(resp)
}

// queryFeatureValuesByFactoryCreateRequest creates the QueryFeatureValuesByFactory request.
func (client *ExposureControlClient) queryFeatureValuesByFactoryCreateRequest(ctx context.Context, resourceGroupName string, factoryName string, exposureControlBatchRequest ExposureControlBatchRequest, options *ExposureControlQueryFeatureValuesByFactoryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if factoryName == "" {
		return nil, errors.New("parameter factoryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{factoryName}", url.PathEscape(factoryName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, exposureControlBatchRequest)
}

// queryFeatureValuesByFactoryHandleResponse handles the QueryFeatureValuesByFactory response.
func (client *ExposureControlClient) queryFeatureValuesByFactoryHandleResponse(resp *http.Response) (ExposureControlQueryFeatureValuesByFactoryResponse, error) {
	result := ExposureControlQueryFeatureValuesByFactoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ExposureControlBatchResponse); err != nil {
		return ExposureControlQueryFeatureValuesByFactoryResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// queryFeatureValuesByFactoryHandleError handles the QueryFeatureValuesByFactory error response.
func (client *ExposureControlClient) queryFeatureValuesByFactoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
