//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DataFlowDebugSessionClientQueryByFactoryPager provides operations for iterating over paged responses.
type DataFlowDebugSessionClientQueryByFactoryPager struct {
	client    *DataFlowDebugSessionClient
	current   DataFlowDebugSessionClientQueryByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataFlowDebugSessionClientQueryByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataFlowDebugSessionClientQueryByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataFlowDebugSessionClientQueryByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QueryDataFlowDebugSessionsResponse.NextLink == nil || len(*p.current.QueryDataFlowDebugSessionsResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.queryByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataFlowDebugSessionClientQueryByFactoryResponse page.
func (p *DataFlowDebugSessionClientQueryByFactoryPager) PageResponse() DataFlowDebugSessionClientQueryByFactoryResponse {
	return p.current
}

// DataFlowsClientListByFactoryPager provides operations for iterating over paged responses.
type DataFlowsClientListByFactoryPager struct {
	client    *DataFlowsClient
	current   DataFlowsClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataFlowsClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataFlowsClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataFlowsClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataFlowListResponse.NextLink == nil || len(*p.current.DataFlowListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataFlowsClientListByFactoryResponse page.
func (p *DataFlowsClientListByFactoryPager) PageResponse() DataFlowsClientListByFactoryResponse {
	return p.current
}

// DatasetsClientListByFactoryPager provides operations for iterating over paged responses.
type DatasetsClientListByFactoryPager struct {
	client    *DatasetsClient
	current   DatasetsClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DatasetsClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DatasetsClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DatasetsClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DatasetsClientListByFactoryResponse page.
func (p *DatasetsClientListByFactoryPager) PageResponse() DatasetsClientListByFactoryResponse {
	return p.current
}

// FactoriesClientListByResourceGroupPager provides operations for iterating over paged responses.
type FactoriesClientListByResourceGroupPager struct {
	client    *FactoriesClient
	current   FactoriesClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FactoriesClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FactoriesClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FactoriesClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FactoriesClientListByResourceGroupResponse page.
func (p *FactoriesClientListByResourceGroupPager) PageResponse() FactoriesClientListByResourceGroupResponse {
	return p.current
}

// FactoriesClientListPager provides operations for iterating over paged responses.
type FactoriesClientListPager struct {
	client    *FactoriesClient
	current   FactoriesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FactoriesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FactoriesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FactoriesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FactoriesClientListResponse page.
func (p *FactoriesClientListPager) PageResponse() FactoriesClientListResponse {
	return p.current
}

// IntegrationRuntimesClientListByFactoryPager provides operations for iterating over paged responses.
type IntegrationRuntimesClientListByFactoryPager struct {
	client    *IntegrationRuntimesClient
	current   IntegrationRuntimesClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IntegrationRuntimesClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IntegrationRuntimesClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IntegrationRuntimesClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationRuntimeListResponse.NextLink == nil || len(*p.current.IntegrationRuntimeListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IntegrationRuntimesClientListByFactoryResponse page.
func (p *IntegrationRuntimesClientListByFactoryPager) PageResponse() IntegrationRuntimesClientListByFactoryResponse {
	return p.current
}

// LinkedServicesClientListByFactoryPager provides operations for iterating over paged responses.
type LinkedServicesClientListByFactoryPager struct {
	client    *LinkedServicesClient
	current   LinkedServicesClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LinkedServicesClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *LinkedServicesClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *LinkedServicesClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedServiceListResponse.NextLink == nil || len(*p.current.LinkedServiceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current LinkedServicesClientListByFactoryResponse page.
func (p *LinkedServicesClientListByFactoryPager) PageResponse() LinkedServicesClientListByFactoryResponse {
	return p.current
}

// ManagedPrivateEndpointsClientListByFactoryPager provides operations for iterating over paged responses.
type ManagedPrivateEndpointsClientListByFactoryPager struct {
	client    *ManagedPrivateEndpointsClient
	current   ManagedPrivateEndpointsClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedPrivateEndpointsClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagedPrivateEndpointsClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagedPrivateEndpointsClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedPrivateEndpointListResponse.NextLink == nil || len(*p.current.ManagedPrivateEndpointListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagedPrivateEndpointsClientListByFactoryResponse page.
func (p *ManagedPrivateEndpointsClientListByFactoryPager) PageResponse() ManagedPrivateEndpointsClientListByFactoryResponse {
	return p.current
}

// ManagedVirtualNetworksClientListByFactoryPager provides operations for iterating over paged responses.
type ManagedVirtualNetworksClientListByFactoryPager struct {
	client    *ManagedVirtualNetworksClient
	current   ManagedVirtualNetworksClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedVirtualNetworksClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagedVirtualNetworksClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagedVirtualNetworksClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedVirtualNetworkListResponse.NextLink == nil || len(*p.current.ManagedVirtualNetworkListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagedVirtualNetworksClientListByFactoryResponse page.
func (p *ManagedVirtualNetworksClientListByFactoryPager) PageResponse() ManagedVirtualNetworksClientListByFactoryResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResponse.NextLink == nil || len(*p.current.OperationListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// PipelinesClientListByFactoryPager provides operations for iterating over paged responses.
type PipelinesClientListByFactoryPager struct {
	client    *PipelinesClient
	current   PipelinesClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PipelinesClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PipelinesClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PipelinesClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineListResponse.NextLink == nil || len(*p.current.PipelineListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PipelinesClientListByFactoryResponse page.
func (p *PipelinesClientListByFactoryPager) PageResponse() PipelinesClientListByFactoryResponse {
	return p.current
}

// PrivateEndPointConnectionsClientListByFactoryPager provides operations for iterating over paged responses.
type PrivateEndPointConnectionsClientListByFactoryPager struct {
	client    *PrivateEndPointConnectionsClient
	current   PrivateEndPointConnectionsClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndPointConnectionsClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndPointConnectionsClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndPointConnectionsClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResponse.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndPointConnectionsClientListByFactoryResponse page.
func (p *PrivateEndPointConnectionsClientListByFactoryPager) PageResponse() PrivateEndPointConnectionsClientListByFactoryResponse {
	return p.current
}

// TriggersClientListByFactoryPager provides operations for iterating over paged responses.
type TriggersClientListByFactoryPager struct {
	client    *TriggersClient
	current   TriggersClientListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TriggersClientListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TriggersClientListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TriggersClientListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerListResponse.NextLink == nil || len(*p.current.TriggerListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TriggersClientListByFactoryResponse page.
func (p *TriggersClientListByFactoryPager) PageResponse() TriggersClientListByFactoryResponse {
	return p.current
}
