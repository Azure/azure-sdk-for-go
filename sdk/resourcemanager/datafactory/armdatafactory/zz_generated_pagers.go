//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatafactory

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DataFlowDebugSessionQueryByFactoryPager provides operations for iterating over paged responses.
type DataFlowDebugSessionQueryByFactoryPager struct {
	client    *DataFlowDebugSessionClient
	current   DataFlowDebugSessionQueryByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataFlowDebugSessionQueryByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataFlowDebugSessionQueryByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataFlowDebugSessionQueryByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QueryDataFlowDebugSessionsResponse.NextLink == nil || len(*p.current.QueryDataFlowDebugSessionsResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.queryByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.queryByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataFlowDebugSessionQueryByFactoryResponse page.
func (p *DataFlowDebugSessionQueryByFactoryPager) PageResponse() DataFlowDebugSessionQueryByFactoryResponse {
	return p.current
}

// DataFlowsListByFactoryPager provides operations for iterating over paged responses.
type DataFlowsListByFactoryPager struct {
	client    *DataFlowsClient
	current   DataFlowsListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataFlowsListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataFlowsListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataFlowsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataFlowListResponse.NextLink == nil || len(*p.current.DataFlowListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataFlowsListByFactoryResponse page.
func (p *DataFlowsListByFactoryPager) PageResponse() DataFlowsListByFactoryResponse {
	return p.current
}

// DatasetsListByFactoryPager provides operations for iterating over paged responses.
type DatasetsListByFactoryPager struct {
	client    *DatasetsClient
	current   DatasetsListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DatasetsListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DatasetsListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DatasetsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DatasetsListByFactoryResponse page.
func (p *DatasetsListByFactoryPager) PageResponse() DatasetsListByFactoryResponse {
	return p.current
}

// FactoriesListByResourceGroupPager provides operations for iterating over paged responses.
type FactoriesListByResourceGroupPager struct {
	client    *FactoriesClient
	current   FactoriesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FactoriesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FactoriesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FactoriesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FactoriesListByResourceGroupResponse page.
func (p *FactoriesListByResourceGroupPager) PageResponse() FactoriesListByResourceGroupResponse {
	return p.current
}

// FactoriesListPager provides operations for iterating over paged responses.
type FactoriesListPager struct {
	client    *FactoriesClient
	current   FactoriesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FactoriesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FactoriesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FactoriesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FactoryListResponse.NextLink == nil || len(*p.current.FactoryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FactoriesListResponse page.
func (p *FactoriesListPager) PageResponse() FactoriesListResponse {
	return p.current
}

// IntegrationRuntimesListByFactoryPager provides operations for iterating over paged responses.
type IntegrationRuntimesListByFactoryPager struct {
	client    *IntegrationRuntimesClient
	current   IntegrationRuntimesListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IntegrationRuntimesListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IntegrationRuntimesListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IntegrationRuntimesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IntegrationRuntimeListResponse.NextLink == nil || len(*p.current.IntegrationRuntimeListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IntegrationRuntimesListByFactoryResponse page.
func (p *IntegrationRuntimesListByFactoryPager) PageResponse() IntegrationRuntimesListByFactoryResponse {
	return p.current
}

// LinkedServicesListByFactoryPager provides operations for iterating over paged responses.
type LinkedServicesListByFactoryPager struct {
	client    *LinkedServicesClient
	current   LinkedServicesListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LinkedServicesListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *LinkedServicesListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *LinkedServicesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedServiceListResponse.NextLink == nil || len(*p.current.LinkedServiceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current LinkedServicesListByFactoryResponse page.
func (p *LinkedServicesListByFactoryPager) PageResponse() LinkedServicesListByFactoryResponse {
	return p.current
}

// ManagedPrivateEndpointsListByFactoryPager provides operations for iterating over paged responses.
type ManagedPrivateEndpointsListByFactoryPager struct {
	client    *ManagedPrivateEndpointsClient
	current   ManagedPrivateEndpointsListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedPrivateEndpointsListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagedPrivateEndpointsListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagedPrivateEndpointsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedPrivateEndpointListResponse.NextLink == nil || len(*p.current.ManagedPrivateEndpointListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagedPrivateEndpointsListByFactoryResponse page.
func (p *ManagedPrivateEndpointsListByFactoryPager) PageResponse() ManagedPrivateEndpointsListByFactoryResponse {
	return p.current
}

// ManagedVirtualNetworksListByFactoryPager provides operations for iterating over paged responses.
type ManagedVirtualNetworksListByFactoryPager struct {
	client    *ManagedVirtualNetworksClient
	current   ManagedVirtualNetworksListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagedVirtualNetworksListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagedVirtualNetworksListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagedVirtualNetworksListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagedVirtualNetworkListResponse.NextLink == nil || len(*p.current.ManagedVirtualNetworkListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagedVirtualNetworksListByFactoryResponse page.
func (p *ManagedVirtualNetworksListByFactoryPager) PageResponse() ManagedVirtualNetworksListByFactoryResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResponse.NextLink == nil || len(*p.current.OperationListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// PipelinesListByFactoryPager provides operations for iterating over paged responses.
type PipelinesListByFactoryPager struct {
	client    *PipelinesClient
	current   PipelinesListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PipelinesListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PipelinesListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PipelinesListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineListResponse.NextLink == nil || len(*p.current.PipelineListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PipelinesListByFactoryResponse page.
func (p *PipelinesListByFactoryPager) PageResponse() PipelinesListByFactoryResponse {
	return p.current
}

// PrivateEndPointConnectionsListByFactoryPager provides operations for iterating over paged responses.
type PrivateEndPointConnectionsListByFactoryPager struct {
	client    *PrivateEndPointConnectionsClient
	current   PrivateEndPointConnectionsListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndPointConnectionsListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndPointConnectionsListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndPointConnectionsListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResponse.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndPointConnectionsListByFactoryResponse page.
func (p *PrivateEndPointConnectionsListByFactoryPager) PageResponse() PrivateEndPointConnectionsListByFactoryResponse {
	return p.current
}

// TriggersListByFactoryPager provides operations for iterating over paged responses.
type TriggersListByFactoryPager struct {
	client    *TriggersClient
	current   TriggersListByFactoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TriggersListByFactoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TriggersListByFactoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TriggersListByFactoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerListResponse.NextLink == nil || len(*p.current.TriggerListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByFactoryHandleError(resp)
		return false
	}
	result, err := p.client.listByFactoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TriggersListByFactoryResponse page.
func (p *TriggersListByFactoryPager) PageResponse() TriggersListByFactoryResponse {
	return p.current
}
