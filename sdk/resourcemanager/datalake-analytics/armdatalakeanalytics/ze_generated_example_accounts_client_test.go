//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakeanalytics_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datalake-analytics/armdatalakeanalytics"
)

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_List.json
func ExampleAccountsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	pager := client.List(&armdatalakeanalytics.AccountsClientListOptions{Filter: to.StringPtr("<filter>"),
		Top:     to.Int32Ptr(1),
		Skip:    to.Int32Ptr(1),
		Select:  to.StringPtr("<select>"),
		Orderby: to.StringPtr("<orderby>"),
		Count:   to.BoolPtr(false),
	})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_ListByResourceGroup.json
func ExampleAccountsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		&armdatalakeanalytics.AccountsClientListByResourceGroupOptions{Filter: to.StringPtr("<filter>"),
			Top:     to.Int32Ptr(1),
			Skip:    to.Int32Ptr(1),
			Select:  to.StringPtr("<select>"),
			Orderby: to.StringPtr("<orderby>"),
			Count:   to.BoolPtr(false),
		})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Create.json
func ExampleAccountsClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<account-name>",
		armdatalakeanalytics.CreateDataLakeAnalyticsAccountParameters{
			Location: to.StringPtr("<location>"),
			Properties: &armdatalakeanalytics.CreateDataLakeAnalyticsAccountProperties{
				ComputePolicies: []*armdatalakeanalytics.CreateComputePolicyWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.CreateOrUpdateComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Int32Ptr(1),
							MinPriorityPerJob:            to.Int32Ptr(1),
							ObjectID:                     to.StringPtr("<object-id>"),
							ObjectType:                   armdatalakeanalytics.AADObjectType("User").ToPtr(),
						},
					}},
				DataLakeStoreAccounts: []*armdatalakeanalytics.AddDataLakeStoreWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.AddDataLakeStoreProperties{
							Suffix: to.StringPtr("<suffix>"),
						},
					}},
				DefaultDataLakeStoreAccount: to.StringPtr("<default-data-lake-store-account>"),
				FirewallAllowAzureIPs:       armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled.ToPtr(),
				FirewallRules: []*armdatalakeanalytics.CreateFirewallRuleWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.CreateOrUpdateFirewallRuleProperties{
							EndIPAddress:   to.StringPtr("<end-ipaddress>"),
							StartIPAddress: to.StringPtr("<start-ipaddress>"),
						},
					}},
				FirewallState:                armdatalakeanalytics.FirewallStateEnabled.ToPtr(),
				MaxDegreeOfParallelism:       to.Int32Ptr(30),
				MaxDegreeOfParallelismPerJob: to.Int32Ptr(1),
				MaxJobCount:                  to.Int32Ptr(3),
				MinPriorityPerJob:            to.Int32Ptr(1),
				NewTier:                      armdatalakeanalytics.TierTypeConsumption.ToPtr(),
				QueryStoreRetention:          to.Int32Ptr(30),
				StorageAccounts: []*armdatalakeanalytics.AddStorageAccountWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.AddStorageAccountProperties{
							AccessKey: to.StringPtr("<access-key>"),
							Suffix:    to.StringPtr("<suffix>"),
						},
					}},
			},
			Tags: map[string]*string{
				"test_key": to.StringPtr("test_value"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AccountsClientCreateResult)
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Get.json
func ExampleAccountsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<account-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AccountsClientGetResult)
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Update.json
func ExampleAccountsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<account-name>",
		&armdatalakeanalytics.AccountsClientBeginUpdateOptions{Parameters: &armdatalakeanalytics.UpdateDataLakeAnalyticsAccountParameters{
			Properties: &armdatalakeanalytics.UpdateDataLakeAnalyticsAccountProperties{
				ComputePolicies: []*armdatalakeanalytics.UpdateComputePolicyWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.UpdateComputePolicyProperties{
							MaxDegreeOfParallelismPerJob: to.Int32Ptr(1),
							MinPriorityPerJob:            to.Int32Ptr(1),
							ObjectID:                     to.StringPtr("<object-id>"),
							ObjectType:                   armdatalakeanalytics.AADObjectType("User").ToPtr(),
						},
					}},
				FirewallAllowAzureIPs: armdatalakeanalytics.FirewallAllowAzureIPsStateEnabled.ToPtr(),
				FirewallRules: []*armdatalakeanalytics.UpdateFirewallRuleWithAccountParameters{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armdatalakeanalytics.UpdateFirewallRuleProperties{
							EndIPAddress:   to.StringPtr("<end-ipaddress>"),
							StartIPAddress: to.StringPtr("<start-ipaddress>"),
						},
					}},
				FirewallState:                armdatalakeanalytics.FirewallStateEnabled.ToPtr(),
				MaxDegreeOfParallelism:       to.Int32Ptr(1),
				MaxDegreeOfParallelismPerJob: to.Int32Ptr(1),
				MaxJobCount:                  to.Int32Ptr(1),
				MinPriorityPerJob:            to.Int32Ptr(1),
				NewTier:                      armdatalakeanalytics.TierTypeConsumption.ToPtr(),
				QueryStoreRetention:          to.Int32Ptr(1),
			},
			Tags: map[string]*string{
				"test_key": to.StringPtr("test_value"),
			},
		},
		})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AccountsClientUpdateResult)
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_Delete.json
func ExampleAccountsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<account-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/datalake-analytics/resource-manager/Microsoft.DataLakeAnalytics/preview/2019-11-01-preview/examples/Accounts_CheckNameAvailability.json
func ExampleAccountsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatalakeanalytics.NewAccountsClient("<subscription-id>", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
		"<location>",
		armdatalakeanalytics.CheckNameAvailabilityParameters{
			Name: to.StringPtr("<name>"),
			Type: armdatalakeanalytics.CheckNameAvailabilityParametersType("Microsoft.DataLakeAnalytics/accounts").ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AccountsClientCheckNameAvailabilityResult)
}
