//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatalakestore

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AccountsBeginCreateOptions contains the optional parameters for the Accounts.BeginCreate method.
type AccountsBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// AccountsBeginDeleteOptions contains the optional parameters for the Accounts.BeginDelete method.
type AccountsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// AccountsBeginUpdateOptions contains the optional parameters for the Accounts.BeginUpdate method.
type AccountsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// AccountsCheckNameAvailabilityOptions contains the optional parameters for the Accounts.CheckNameAvailability method.
type AccountsCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// AccountsEnableKeyVaultOptions contains the optional parameters for the Accounts.EnableKeyVault method.
type AccountsEnableKeyVaultOptions struct {
	// placeholder for future optional parameters
}

// AccountsGetOptions contains the optional parameters for the Accounts.Get method.
type AccountsGetOptions struct {
	// placeholder for future optional parameters
}

// AccountsListByResourceGroupOptions contains the optional parameters for the Accounts.ListByResourceGroup method.
type AccountsListByResourceGroupOptions struct {
	// A Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true.
	// Optional.
	Count *bool
	// OData filter. Optional.
	Filter *string
	// OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted,
	// e.g. Categories?$orderby=CategoryName desc. Optional.
	Orderby *string
	// OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
	Select *string
	// The number of items to skip over before returning elements. Optional.
	Skip *int32
	// The number of items to return. Optional.
	Top *int32
}

// AccountsListOptions contains the optional parameters for the Accounts.List method.
type AccountsListOptions struct {
	// The Boolean value of true or false to request a count of the matching resources included with the resources in the response, e.g. Categories?$count=true.
	// Optional.
	Count *bool
	// OData filter. Optional.
	Filter *string
	// OrderBy clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted,
	// e.g. Categories?$orderby=CategoryName desc. Optional.
	Orderby *string
	// OData Select statement. Limits the properties on each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional.
	Select *string
	// The number of items to skip over before returning elements. Optional.
	Skip *int32
	// The number of items to return. Optional.
	Top *int32
}

// CapabilityInformation - Subscription-level properties and limits for Data Lake Store.
type CapabilityInformation struct {
	// READ-ONLY; The current number of accounts under this subscription.
	AccountCount *int32 `json:"accountCount,omitempty" azure:"ro"`

	// READ-ONLY; The maximum supported number of accounts under this subscription.
	MaxAccountCount *int32 `json:"maxAccountCount,omitempty" azure:"ro"`

	// READ-ONLY; The Boolean value of true or false to indicate the maintenance state.
	MigrationState *bool `json:"migrationState,omitempty" azure:"ro"`

	// READ-ONLY; The subscription state.
	State *SubscriptionState `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; The subscription credentials that uniquely identifies the subscription.
	SubscriptionID *string `json:"subscriptionId,omitempty" azure:"ro"`
}

// CheckNameAvailabilityParameters - Data Lake Store account name availability check parameters.
type CheckNameAvailabilityParameters struct {
	// REQUIRED; The Data Lake Store name to check availability for.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeStore/accounts
	Type *CheckNameAvailabilityParametersType `json:"type,omitempty"`
}

type CreateDataLakeStoreAccountParameters struct {
	// REQUIRED; The resource location.
	Location *string `json:"location,omitempty"`

	// The Key Vault encryption identity, if any.
	Identity *EncryptionIdentity `json:"identity,omitempty"`

	// The Data Lake Store account properties to use for creating.
	Properties *CreateDataLakeStoreAccountProperties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CreateDataLakeStoreAccountParameters.
func (c CreateDataLakeStoreAccountParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	return json.Marshal(objectMap)
}

type CreateDataLakeStoreAccountProperties struct {
	// The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`

	// The Key Vault encryption configuration.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`

	// The current state of encryption for this Data Lake Store account.
	EncryptionState *EncryptionState `json:"encryptionState,omitempty"`

	// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
	FirewallAllowAzureIPs *FirewallAllowAzureIPsState `json:"firewallAllowAzureIps,omitempty"`

	// The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []*CreateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`

	// The current state of the IP address firewall for this Data Lake Store account.
	FirewallState *FirewallState `json:"firewallState,omitempty"`

	// The commitment tier to use for next month.
	NewTier *TierType `json:"newTier,omitempty"`

	// The current state of the trusted identity provider feature for this Data Lake Store account.
	TrustedIDProviderState *TrustedIDProviderState `json:"trustedIdProviderState,omitempty"`

	// The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []*CreateTrustedIDProviderWithAccountParameters `json:"trustedIdProviders,omitempty"`

	// The list of virtual network rules associated with this Data Lake Store account.
	VirtualNetworkRules []*CreateVirtualNetworkRuleWithAccountParameters `json:"virtualNetworkRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CreateDataLakeStoreAccountProperties.
func (c CreateDataLakeStoreAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultGroup", c.DefaultGroup)
	populate(objectMap, "encryptionConfig", c.EncryptionConfig)
	populate(objectMap, "encryptionState", c.EncryptionState)
	populate(objectMap, "firewallAllowAzureIps", c.FirewallAllowAzureIPs)
	populate(objectMap, "firewallRules", c.FirewallRules)
	populate(objectMap, "firewallState", c.FirewallState)
	populate(objectMap, "newTier", c.NewTier)
	populate(objectMap, "trustedIdProviderState", c.TrustedIDProviderState)
	populate(objectMap, "trustedIdProviders", c.TrustedIDProviders)
	populate(objectMap, "virtualNetworkRules", c.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// CreateFirewallRuleWithAccountParameters - The parameters used to create a new firewall rule while creating a new Data Lake Store account.
type CreateFirewallRuleWithAccountParameters struct {
	// REQUIRED; The unique name of the firewall rule to create.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The firewall rule properties to use when creating a new firewall rule.
	Properties *CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateFirewallRuleParameters - The parameters used to create a new firewall rule.
type CreateOrUpdateFirewallRuleParameters struct {
	// REQUIRED; The firewall rule properties to use when creating a new firewall rule.
	Properties *CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateFirewallRuleProperties - The firewall rule properties to use when creating a new firewall rule.
type CreateOrUpdateFirewallRuleProperties struct {
	// REQUIRED; The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`

	// REQUIRED; The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
}

// CreateOrUpdateTrustedIDProviderParameters - The parameters used to create a new trusted identity provider.
type CreateOrUpdateTrustedIDProviderParameters struct {
	// REQUIRED; The trusted identity provider properties to use when creating a new trusted identity provider.
	Properties *CreateOrUpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// CreateOrUpdateTrustedIDProviderProperties - The trusted identity provider properties to use when creating a new trusted identity provider.
type CreateOrUpdateTrustedIDProviderProperties struct {
	// REQUIRED; The URL of this trusted identity provider.
	IDProvider *string `json:"idProvider,omitempty"`
}

// CreateOrUpdateVirtualNetworkRuleParameters - The parameters used to create a new virtual network rule.
type CreateOrUpdateVirtualNetworkRuleParameters struct {
	// REQUIRED; The virtual network rule properties to use when creating a new virtual network rule.
	Properties *CreateOrUpdateVirtualNetworkRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateVirtualNetworkRuleProperties - The virtual network rule properties to use when creating a new virtual network rule.
type CreateOrUpdateVirtualNetworkRuleProperties struct {
	// REQUIRED; The resource identifier for the subnet.
	SubnetID *string `json:"subnetId,omitempty"`
}

// CreateTrustedIDProviderWithAccountParameters - The parameters used to create a new trusted identity provider while creating a new Data Lake Store account.
type CreateTrustedIDProviderWithAccountParameters struct {
	// REQUIRED; The unique name of the trusted identity provider to create.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The trusted identity provider properties to use when creating a new trusted identity provider.
	Properties *CreateOrUpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// CreateVirtualNetworkRuleWithAccountParameters - The parameters used to create a new virtual network rule while creating a new Data Lake Store account.
type CreateVirtualNetworkRuleWithAccountParameters struct {
	// REQUIRED; The unique name of the virtual network rule to create.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The virtual network rule properties to use when creating a new virtual network rule.
	Properties *CreateOrUpdateVirtualNetworkRuleProperties `json:"properties,omitempty"`
}

// DataLakeStoreAccount - Data Lake Store account information.
type DataLakeStoreAccount struct {
	Resource
	// READ-ONLY; The Key Vault encryption identity, if any.
	Identity *EncryptionIdentity `json:"identity,omitempty" azure:"ro"`

	// READ-ONLY; The Data Lake Store account properties.
	Properties *DataLakeStoreAccountProperties `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataLakeStoreAccount.
func (d DataLakeStoreAccount) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.Resource.marshalInternal(objectMap)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DataLakeStoreAccountBasic - Basic Data Lake Store account information, returned on list calls.
type DataLakeStoreAccountBasic struct {
	Resource
	// READ-ONLY; The basic Data Lake Store account properties.
	Properties *DataLakeStoreAccountPropertiesBasic `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataLakeStoreAccountBasic.
func (d DataLakeStoreAccountBasic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DataLakeStoreAccountListResult - Data Lake Store account list information response.
type DataLakeStoreAccountListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The results of the list operation.
	Value []*DataLakeStoreAccountBasic `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataLakeStoreAccountListResult.
func (d DataLakeStoreAccountListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DataLakeStoreAccountProperties - Data Lake Store account properties information.
type DataLakeStoreAccountProperties struct {
	DataLakeStoreAccountPropertiesBasic
	// READ-ONLY; The commitment tier in use for the current month.
	CurrentTier *TierType `json:"currentTier,omitempty" azure:"ro"`

	// READ-ONLY; The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty" azure:"ro"`

	// READ-ONLY; The Key Vault encryption configuration.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty" azure:"ro"`

	// READ-ONLY; The current state of encryption provisioning for this Data Lake Store account.
	EncryptionProvisioningState *EncryptionProvisioningState `json:"encryptionProvisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The current state of encryption for this Data Lake Store account.
	EncryptionState *EncryptionState `json:"encryptionState,omitempty" azure:"ro"`

	// READ-ONLY; The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
	FirewallAllowAzureIPs *FirewallAllowAzureIPsState `json:"firewallAllowAzureIps,omitempty" azure:"ro"`

	// READ-ONLY; The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []*FirewallRule `json:"firewallRules,omitempty" azure:"ro"`

	// READ-ONLY; The current state of the IP address firewall for this Data Lake Store account.
	FirewallState *FirewallState `json:"firewallState,omitempty" azure:"ro"`

	// READ-ONLY; The commitment tier to use for next month.
	NewTier *TierType `json:"newTier,omitempty" azure:"ro"`

	// READ-ONLY; The current state of the trusted identity provider feature for this Data Lake Store account.
	TrustedIDProviderState *TrustedIDProviderState `json:"trustedIdProviderState,omitempty" azure:"ro"`

	// READ-ONLY; The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []*TrustedIDProvider `json:"trustedIdProviders,omitempty" azure:"ro"`

	// READ-ONLY; The list of virtual network rules associated with this Data Lake Store account.
	VirtualNetworkRules []*VirtualNetworkRule `json:"virtualNetworkRules,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataLakeStoreAccountProperties.
func (d DataLakeStoreAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DataLakeStoreAccountPropertiesBasic.marshalInternal(objectMap)
	populate(objectMap, "currentTier", d.CurrentTier)
	populate(objectMap, "defaultGroup", d.DefaultGroup)
	populate(objectMap, "encryptionConfig", d.EncryptionConfig)
	populate(objectMap, "encryptionProvisioningState", d.EncryptionProvisioningState)
	populate(objectMap, "encryptionState", d.EncryptionState)
	populate(objectMap, "firewallAllowAzureIps", d.FirewallAllowAzureIPs)
	populate(objectMap, "firewallRules", d.FirewallRules)
	populate(objectMap, "firewallState", d.FirewallState)
	populate(objectMap, "newTier", d.NewTier)
	populate(objectMap, "trustedIdProviderState", d.TrustedIDProviderState)
	populate(objectMap, "trustedIdProviders", d.TrustedIDProviders)
	populate(objectMap, "virtualNetworkRules", d.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataLakeStoreAccountProperties.
func (d *DataLakeStoreAccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentTier":
			err = unpopulate(val, &d.CurrentTier)
			delete(rawMsg, key)
		case "defaultGroup":
			err = unpopulate(val, &d.DefaultGroup)
			delete(rawMsg, key)
		case "encryptionConfig":
			err = unpopulate(val, &d.EncryptionConfig)
			delete(rawMsg, key)
		case "encryptionProvisioningState":
			err = unpopulate(val, &d.EncryptionProvisioningState)
			delete(rawMsg, key)
		case "encryptionState":
			err = unpopulate(val, &d.EncryptionState)
			delete(rawMsg, key)
		case "firewallAllowAzureIps":
			err = unpopulate(val, &d.FirewallAllowAzureIPs)
			delete(rawMsg, key)
		case "firewallRules":
			err = unpopulate(val, &d.FirewallRules)
			delete(rawMsg, key)
		case "firewallState":
			err = unpopulate(val, &d.FirewallState)
			delete(rawMsg, key)
		case "newTier":
			err = unpopulate(val, &d.NewTier)
			delete(rawMsg, key)
		case "trustedIdProviderState":
			err = unpopulate(val, &d.TrustedIDProviderState)
			delete(rawMsg, key)
		case "trustedIdProviders":
			err = unpopulate(val, &d.TrustedIDProviders)
			delete(rawMsg, key)
		case "virtualNetworkRules":
			err = unpopulate(val, &d.VirtualNetworkRules)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.DataLakeStoreAccountPropertiesBasic.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DataLakeStoreAccountPropertiesBasic - The basic account specific properties that are associated with an underlying Data Lake Store account.
type DataLakeStoreAccountPropertiesBasic struct {
	// READ-ONLY; The unique identifier associated with this Data Lake Store account.
	AccountID *string `json:"accountId,omitempty" azure:"ro"`

	// READ-ONLY; The account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty" azure:"ro"`

	// READ-ONLY; The full CName endpoint for this account.
	Endpoint *string `json:"endpoint,omitempty" azure:"ro"`

	// READ-ONLY; The account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning status of the Data Lake Store account.
	ProvisioningState *DataLakeStoreAccountStatus `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The state of the Data Lake Store account.
	State *DataLakeStoreAccountState `json:"state,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataLakeStoreAccountPropertiesBasic.
func (d DataLakeStoreAccountPropertiesBasic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataLakeStoreAccountPropertiesBasic.
func (d *DataLakeStoreAccountPropertiesBasic) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DataLakeStoreAccountPropertiesBasic) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "accountId", d.AccountID)
	populate(objectMap, "creationTime", (*timeRFC3339)(d.CreationTime))
	populate(objectMap, "endpoint", d.Endpoint)
	populate(objectMap, "lastModifiedTime", (*timeRFC3339)(d.LastModifiedTime))
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "state", d.State)
}

func (d *DataLakeStoreAccountPropertiesBasic) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountId":
			err = unpopulate(val, &d.AccountID)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "endpoint":
			err = unpopulate(val, &d.Endpoint)
			delete(rawMsg, key)
		case "lastModifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &d.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EncryptionConfig - The encryption configuration for the account.
type EncryptionConfig struct {
	// REQUIRED; The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'.
	Type *EncryptionConfigType `json:"type,omitempty"`

	// The Key Vault information for connecting to user managed encryption keys.
	KeyVaultMetaInfo *KeyVaultMetaInfo `json:"keyVaultMetaInfo,omitempty"`
}

// EncryptionIdentity - The encryption identity properties.
type EncryptionIdentity struct {
	// REQUIRED; The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
	Type *string `json:"type,omitempty"`

	// READ-ONLY; The principal identifier associated with the encryption.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant identifier associated with the encryption.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// FirewallRule - Data Lake Store firewall rule information.
type FirewallRule struct {
	SubResource
	// READ-ONLY; The firewall rule properties.
	Properties *FirewallRuleProperties `json:"properties,omitempty" azure:"ro"`
}

// FirewallRuleListResult - Data Lake Store firewall rule list information.
type FirewallRuleListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The results of the list operation.
	Value []*FirewallRule `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRuleListResult.
func (f FirewallRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FirewallRuleProperties - The firewall rule properties.
type FirewallRuleProperties struct {
	// READ-ONLY; The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty" azure:"ro"`

	// READ-ONLY; The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty" azure:"ro"`
}

// FirewallRulesCreateOrUpdateOptions contains the optional parameters for the FirewallRules.CreateOrUpdate method.
type FirewallRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesDeleteOptions contains the optional parameters for the FirewallRules.Delete method.
type FirewallRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesGetOptions contains the optional parameters for the FirewallRules.Get method.
type FirewallRulesGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesListByAccountOptions contains the optional parameters for the FirewallRules.ListByAccount method.
type FirewallRulesListByAccountOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesUpdateOptions contains the optional parameters for the FirewallRules.Update method.
type FirewallRulesUpdateOptions struct {
	// Parameters supplied to update the firewall rule.
	Parameters *UpdateFirewallRuleParameters
}

// KeyVaultMetaInfo - Metadata information used by account encryption.
type KeyVaultMetaInfo struct {
	// REQUIRED; The name of the user managed encryption key.
	EncryptionKeyName *string `json:"encryptionKeyName,omitempty"`

	// REQUIRED; The version of the user managed encryption key.
	EncryptionKeyVersion *string `json:"encryptionKeyVersion,omitempty"`

	// REQUIRED; The resource identifier for the user managed Key Vault being used to encrypt.
	KeyVaultResourceID *string `json:"keyVaultResourceId,omitempty"`
}

// LocationsGetCapabilityOptions contains the optional parameters for the Locations.GetCapability method.
type LocationsGetCapabilityOptions struct {
	// placeholder for future optional parameters
}

// LocationsGetUsageOptions contains the optional parameters for the Locations.GetUsage method.
type LocationsGetUsageOptions struct {
	// placeholder for future optional parameters
}

// NameAvailabilityInformation - Data Lake Store account name availability result information.
type NameAvailabilityInformation struct {
	// READ-ONLY; The message describing why the Data Lake Store account name is not available, if nameAvailable is false.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The Boolean value of true or false to indicate whether the Data Lake Store account name is available or not.
	NameAvailable *bool `json:"nameAvailable,omitempty" azure:"ro"`

	// READ-ONLY; The reason why the Data Lake Store account name is not available, if nameAvailable is false.
	Reason *string `json:"reason,omitempty" azure:"ro"`
}

// Operation - An available operation for Data Lake Store.
type Operation struct {
	// The display information for the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; The name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation.
	Origin *OperationOrigin `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - The display information for a particular operation.
type OperationDisplay struct {
	// READ-ONLY; A friendly description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; A friendly name of the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The resource provider of the operation.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The resource type of the operation.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - The list of available operations for Data Lake Store.
type OperationListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The results of the list operation.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Resource - The resource model definition.
type Resource struct {
	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The resource location.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; The resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource tags.
	Tags map[string]*string `json:"tags,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

// SubResource - The resource model definition for a nested resource.
type SubResource struct {
	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// TrustedIDProvider - Data Lake Store trusted identity provider information.
type TrustedIDProvider struct {
	SubResource
	// READ-ONLY; The trusted identity provider properties.
	Properties *TrustedIDProviderProperties `json:"properties,omitempty" azure:"ro"`
}

// TrustedIDProviderListResult - Data Lake Store trusted identity provider list information.
type TrustedIDProviderListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The results of the list operation.
	Value []*TrustedIDProvider `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrustedIDProviderListResult.
func (t TrustedIDProviderListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TrustedIDProviderProperties - The trusted identity provider properties.
type TrustedIDProviderProperties struct {
	// READ-ONLY; The URL of this trusted identity provider.
	IDProvider *string `json:"idProvider,omitempty" azure:"ro"`
}

// TrustedIDProvidersCreateOrUpdateOptions contains the optional parameters for the TrustedIDProviders.CreateOrUpdate method.
type TrustedIDProvidersCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// TrustedIDProvidersDeleteOptions contains the optional parameters for the TrustedIDProviders.Delete method.
type TrustedIDProvidersDeleteOptions struct {
	// placeholder for future optional parameters
}

// TrustedIDProvidersGetOptions contains the optional parameters for the TrustedIDProviders.Get method.
type TrustedIDProvidersGetOptions struct {
	// placeholder for future optional parameters
}

// TrustedIDProvidersListByAccountOptions contains the optional parameters for the TrustedIDProviders.ListByAccount method.
type TrustedIDProvidersListByAccountOptions struct {
	// placeholder for future optional parameters
}

// TrustedIDProvidersUpdateOptions contains the optional parameters for the TrustedIDProviders.Update method.
type TrustedIDProvidersUpdateOptions struct {
	// Parameters supplied to update the trusted identity provider.
	Parameters *UpdateTrustedIDProviderParameters
}

// UpdateDataLakeStoreAccountParameters - Data Lake Store account information to update.
type UpdateDataLakeStoreAccountParameters struct {
	// The Data Lake Store account properties to update.
	Properties *UpdateDataLakeStoreAccountProperties `json:"properties,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateDataLakeStoreAccountParameters.
func (u UpdateDataLakeStoreAccountParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", u.Properties)
	populate(objectMap, "tags", u.Tags)
	return json.Marshal(objectMap)
}

// UpdateDataLakeStoreAccountProperties - Data Lake Store account properties information to be updated.
type UpdateDataLakeStoreAccountProperties struct {
	// The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`

	// Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key.
	EncryptionConfig *UpdateEncryptionConfig `json:"encryptionConfig,omitempty"`

	// The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
	FirewallAllowAzureIPs *FirewallAllowAzureIPsState `json:"firewallAllowAzureIps,omitempty"`

	// The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []*UpdateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`

	// The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just
	// be ignored until the firewall is re-enabled.
	FirewallState *FirewallState `json:"firewallState,omitempty"`

	// The commitment tier to use for next month.
	NewTier *TierType `json:"newTier,omitempty"`

	// The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not
	// remove the providers, they will just be ignored
	// until this feature is re-enabled.
	TrustedIDProviderState *TrustedIDProviderState `json:"trustedIdProviderState,omitempty"`

	// The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []*UpdateTrustedIDProviderWithAccountParameters `json:"trustedIdProviders,omitempty"`

	// The list of virtual network rules associated with this Data Lake Store account.
	VirtualNetworkRules []*UpdateVirtualNetworkRuleWithAccountParameters `json:"virtualNetworkRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateDataLakeStoreAccountProperties.
func (u UpdateDataLakeStoreAccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultGroup", u.DefaultGroup)
	populate(objectMap, "encryptionConfig", u.EncryptionConfig)
	populate(objectMap, "firewallAllowAzureIps", u.FirewallAllowAzureIPs)
	populate(objectMap, "firewallRules", u.FirewallRules)
	populate(objectMap, "firewallState", u.FirewallState)
	populate(objectMap, "newTier", u.NewTier)
	populate(objectMap, "trustedIdProviderState", u.TrustedIDProviderState)
	populate(objectMap, "trustedIdProviders", u.TrustedIDProviders)
	populate(objectMap, "virtualNetworkRules", u.VirtualNetworkRules)
	return json.Marshal(objectMap)
}

// UpdateEncryptionConfig - The encryption configuration used to update a user managed Key Vault key.
type UpdateEncryptionConfig struct {
	// The updated Key Vault key to use in user managed key rotation.
	KeyVaultMetaInfo *UpdateKeyVaultMetaInfo `json:"keyVaultMetaInfo,omitempty"`
}

// UpdateFirewallRuleParameters - The parameters used to update a firewall rule.
type UpdateFirewallRuleParameters struct {
	// The firewall rule properties to use when updating a firewall rule.
	Properties *UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateFirewallRuleParameters.
func (u UpdateFirewallRuleParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", u.Properties)
	return json.Marshal(objectMap)
}

// UpdateFirewallRuleProperties - The firewall rule properties to use when updating a firewall rule.
type UpdateFirewallRuleProperties struct {
	// The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`

	// The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
}

// UpdateFirewallRuleWithAccountParameters - The parameters used to update a firewall rule while updating a Data Lake Store account.
type UpdateFirewallRuleWithAccountParameters struct {
	// REQUIRED; The unique name of the firewall rule to update.
	Name *string `json:"name,omitempty"`

	// The firewall rule properties to use when updating a firewall rule.
	Properties *UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// UpdateKeyVaultMetaInfo - The Key Vault update information used for user managed key rotation.
type UpdateKeyVaultMetaInfo struct {
	// The version of the user managed encryption key to update through a key rotation.
	EncryptionKeyVersion *string `json:"encryptionKeyVersion,omitempty"`
}

// UpdateTrustedIDProviderParameters - The parameters used to update a trusted identity provider.
type UpdateTrustedIDProviderParameters struct {
	// The trusted identity provider properties to use when updating a trusted identity provider.
	Properties *UpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateTrustedIDProviderParameters.
func (u UpdateTrustedIDProviderParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", u.Properties)
	return json.Marshal(objectMap)
}

// UpdateTrustedIDProviderProperties - The trusted identity provider properties to use when updating a trusted identity provider.
type UpdateTrustedIDProviderProperties struct {
	// The URL of this trusted identity provider.
	IDProvider *string `json:"idProvider,omitempty"`
}

// UpdateTrustedIDProviderWithAccountParameters - The parameters used to update a trusted identity provider while updating a Data Lake Store account.
type UpdateTrustedIDProviderWithAccountParameters struct {
	// REQUIRED; The unique name of the trusted identity provider to update.
	Name *string `json:"name,omitempty"`

	// The trusted identity provider properties to use when updating a trusted identity provider.
	Properties *UpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// UpdateVirtualNetworkRuleParameters - The parameters used to update a virtual network rule.
type UpdateVirtualNetworkRuleParameters struct {
	// The virtual network rule properties to use when updating a virtual network rule.
	Properties *UpdateVirtualNetworkRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateVirtualNetworkRuleParameters.
func (u UpdateVirtualNetworkRuleParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", u.Properties)
	return json.Marshal(objectMap)
}

// UpdateVirtualNetworkRuleProperties - The virtual network rule properties to use when updating a virtual network rule.
type UpdateVirtualNetworkRuleProperties struct {
	// The resource identifier for the subnet.
	SubnetID *string `json:"subnetId,omitempty"`
}

// UpdateVirtualNetworkRuleWithAccountParameters - The parameters used to update a virtual network rule while updating a Data Lake Store account.
type UpdateVirtualNetworkRuleWithAccountParameters struct {
	// REQUIRED; The unique name of the virtual network rule to update.
	Name *string `json:"name,omitempty"`

	// The virtual network rule properties to use when updating a virtual network rule.
	Properties *UpdateVirtualNetworkRuleProperties `json:"properties,omitempty"`
}

// Usage - Describes the Resource Usage.
type Usage struct {
	// READ-ONLY; Gets the current count of the allocated resources in the subscription.
	CurrentValue *int32 `json:"currentValue,omitempty" azure:"ro"`

	// READ-ONLY; Resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Gets the maximum count of the resources that can be allocated in the subscription.
	Limit *int32 `json:"limit,omitempty" azure:"ro"`

	// READ-ONLY; Gets the name of the type of usage.
	Name *UsageName `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Gets the unit of measurement.
	Unit *UsageUnit `json:"unit,omitempty" azure:"ro"`
}

// UsageListResult - The response from the List Usages operation.
type UsageListResult struct {
	// Gets or sets the list of Storage Resource Usages.
	Value []*Usage `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UsageListResult.
func (u UsageListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// UsageName - The usage names that can be used.
type UsageName struct {
	// READ-ONLY; Gets a localized string describing the resource name.
	LocalizedValue *string `json:"localizedValue,omitempty" azure:"ro"`

	// READ-ONLY; Gets a string describing the resource name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// VirtualNetworkRule - Data Lake Store virtual network rule information.
type VirtualNetworkRule struct {
	SubResource
	// READ-ONLY; The virtual network rule properties.
	Properties *VirtualNetworkRuleProperties `json:"properties,omitempty" azure:"ro"`
}

// VirtualNetworkRuleListResult - Data Lake Store virtual network rule list information.
type VirtualNetworkRuleListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The results of the list operation.
	Value []*VirtualNetworkRule `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkRuleListResult.
func (v VirtualNetworkRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VirtualNetworkRuleProperties - The virtual network rule properties.
type VirtualNetworkRuleProperties struct {
	// READ-ONLY; The resource identifier for the subnet.
	SubnetID *string `json:"subnetId,omitempty" azure:"ro"`
}

// VirtualNetworkRulesCreateOrUpdateOptions contains the optional parameters for the VirtualNetworkRules.CreateOrUpdate method.
type VirtualNetworkRulesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesDeleteOptions contains the optional parameters for the VirtualNetworkRules.Delete method.
type VirtualNetworkRulesDeleteOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesGetOptions contains the optional parameters for the VirtualNetworkRules.Get method.
type VirtualNetworkRulesGetOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesListByAccountOptions contains the optional parameters for the VirtualNetworkRules.ListByAccount method.
type VirtualNetworkRulesListByAccountOptions struct {
	// placeholder for future optional parameters
}

// VirtualNetworkRulesUpdateOptions contains the optional parameters for the VirtualNetworkRules.Update method.
type VirtualNetworkRulesUpdateOptions struct {
	// Parameters supplied to update the virtual network rule.
	Parameters *UpdateVirtualNetworkRuleParameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
