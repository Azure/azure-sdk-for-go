//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dataprotection/armdataprotection"
)

// x-ms-original-file: specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/ListBackupPolicy.json
func ExampleBackupPoliciesClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdataprotection.NewBackupPoliciesClient("<subscription-id>", cred, nil)
	pager := client.List("<vault-name>",
		"<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/GetBackupPolicy.json
func ExampleBackupPoliciesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdataprotection.NewBackupPoliciesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<vault-name>",
		"<resource-group-name>",
		"<backup-policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BackupPoliciesClientGetResult)
}

// x-ms-original-file: specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/CreateOrUpdateBackupPolicy.json
func ExampleBackupPoliciesClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdataprotection.NewBackupPoliciesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<vault-name>",
		"<resource-group-name>",
		"<backup-policy-name>",
		armdataprotection.BaseBackupPolicyResource{
			Properties: &armdataprotection.BackupPolicy{
				DatasourceTypes: []*string{
					to.StringPtr("OssDB")},
				ObjectType: to.StringPtr("<object-type>"),
				PolicyRules: []armdataprotection.BasePolicyRuleClassification{
					&armdataprotection.AzureBackupRule{
						Name:       to.StringPtr("<name>"),
						ObjectType: to.StringPtr("<object-type>"),
						BackupParameters: &armdataprotection.AzureBackupParams{
							ObjectType: to.StringPtr("<object-type>"),
							BackupType: to.StringPtr("<backup-type>"),
						},
						DataStore: &armdataprotection.DataStoreInfoBase{
							DataStoreType: armdataprotection.DataStoreTypes("VaultStore").ToPtr(),
							ObjectType:    to.StringPtr("<object-type>"),
						},
						Trigger: &armdataprotection.ScheduleBasedTriggerContext{
							ObjectType: to.StringPtr("<object-type>"),
							Schedule: &armdataprotection.BackupSchedule{
								RepeatingTimeIntervals: []*string{
									to.StringPtr("R/2019-11-20T08:00:00-08:00/P1W")},
							},
							TaggingCriteria: []*armdataprotection.TaggingCriteria{
								{
									IsDefault: to.BoolPtr(true),
									TagInfo: &armdataprotection.RetentionTag{
										TagName: to.StringPtr("<tag-name>"),
									},
									TaggingPriority: to.Int64Ptr(99),
								},
								{
									Criteria: []armdataprotection.BackupCriteriaClassification{
										&armdataprotection.ScheduleBasedBackupCriteria{
											ObjectType: to.StringPtr("<object-type>"),
											DaysOfTheWeek: []*armdataprotection.DayOfWeek{
												armdataprotection.DayOfWeek("Sunday").ToPtr()},
											ScheduleTimes: []*time.Time{
												to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-03-01T13:00:00Z"); return t }())},
										}},
									IsDefault: to.BoolPtr(false),
									TagInfo: &armdataprotection.RetentionTag{
										TagName: to.StringPtr("<tag-name>"),
									},
									TaggingPriority: to.Int64Ptr(20),
								}},
						},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.StringPtr("<name>"),
						ObjectType: to.StringPtr("<object-type>"),
						IsDefault:  to.BoolPtr(true),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.StringPtr("<duration>"),
									ObjectType: to.StringPtr("<object-type>"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: armdataprotection.DataStoreTypes("VaultStore").ToPtr(),
									ObjectType:    to.StringPtr("<object-type>"),
								},
							}},
					},
					&armdataprotection.AzureRetentionRule{
						Name:       to.StringPtr("<name>"),
						ObjectType: to.StringPtr("<object-type>"),
						IsDefault:  to.BoolPtr(false),
						Lifecycles: []*armdataprotection.SourceLifeCycle{
							{
								DeleteAfter: &armdataprotection.AbsoluteDeleteOption{
									Duration:   to.StringPtr("<duration>"),
									ObjectType: to.StringPtr("<object-type>"),
								},
								SourceDataStore: &armdataprotection.DataStoreInfoBase{
									DataStoreType: armdataprotection.DataStoreTypes("VaultStore").ToPtr(),
									ObjectType:    to.StringPtr("<object-type>"),
								},
							}},
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.BackupPoliciesClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/dataprotection/resource-manager/Microsoft.DataProtection/stable/2021-07-01/examples/PolicyCRUD/DeleteBackupPolicy.json
func ExampleBackupPoliciesClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdataprotection.NewBackupPoliciesClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<vault-name>",
		"<resource-group-name>",
		"<backup-policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
