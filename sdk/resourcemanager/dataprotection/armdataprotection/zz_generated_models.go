//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AbsoluteDeleteOption - Delete option with duration
type AbsoluteDeleteOption struct {
	DeleteOption
}

// MarshalJSON implements the json.Marshaller interface for type AbsoluteDeleteOption.
func (a AbsoluteDeleteOption) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DeleteOption.marshalInternal(objectMap, "AbsoluteDeleteOption")
	return json.Marshal(objectMap)
}

// AdHocBackupRuleOptions - Adhoc backup rules
type AdHocBackupRuleOptions struct {
	// REQUIRED
	RuleName *string `json:"ruleName,omitempty"`

	// REQUIRED; Adhoc backup trigger option
	TriggerOption *AdhocBackupTriggerOption `json:"triggerOption,omitempty"`
}

// AdhocBackupTriggerOption - Adhoc backup trigger option
type AdhocBackupTriggerOption struct {
	RetentionTagOverride *string `json:"retentionTagOverride,omitempty"`
}

// AdhocBasedTaggingCriteria - Adhoc backup tagging criteria
type AdhocBasedTaggingCriteria struct {
	// Retention tag information
	TagInfo *RetentionTag `json:"tagInfo,omitempty"`
}

// AdhocBasedTriggerContext - Adhoc trigger context
type AdhocBasedTriggerContext struct {
	TriggerContext
	// REQUIRED; Tagging Criteria containing retention tag for adhoc backup.
	TaggingCriteria *AdhocBasedTaggingCriteria `json:"taggingCriteria,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AdhocBasedTriggerContext.
func (a AdhocBasedTriggerContext) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.TriggerContext.marshalInternal(objectMap, "AdhocBasedTriggerContext")
	populate(objectMap, "taggingCriteria", a.TaggingCriteria)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AdhocBasedTriggerContext.
func (a *AdhocBasedTriggerContext) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "taggingCriteria":
			err = unpopulate(val, &a.TaggingCriteria)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.TriggerContext.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AuthCredentialsClassification provides polymorphic access to related types.
// Call the interface's GetAuthCredentials() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AuthCredentials, *SecretStoreBasedAuthCredentials
type AuthCredentialsClassification interface {
	// GetAuthCredentials returns the AuthCredentials content of the underlying type.
	GetAuthCredentials() *AuthCredentials
}

// AuthCredentials - Base class for different types of authentication credentials.
type AuthCredentials struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetAuthCredentials implements the AuthCredentialsClassification interface for type AuthCredentials.
func (a *AuthCredentials) GetAuthCredentials() *AuthCredentials { return a }

// UnmarshalJSON implements the json.Unmarshaller interface for type AuthCredentials.
func (a *AuthCredentials) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AuthCredentials) marshalInternal(objectMap map[string]interface{}, discValue string) {
	a.ObjectType = &discValue
	objectMap["objectType"] = a.ObjectType
}

func (a *AuthCredentials) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &a.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureBackupDiscreteRecoveryPoint - Azure backup discrete RecoveryPoint
type AzureBackupDiscreteRecoveryPoint struct {
	AzureBackupRecoveryPoint
	// REQUIRED
	RecoveryPointTime              *time.Time                       `json:"recoveryPointTime,omitempty"`
	FriendlyName                   *string                          `json:"friendlyName,omitempty"`
	PolicyName                     *string                          `json:"policyName,omitempty"`
	PolicyVersion                  *string                          `json:"policyVersion,omitempty"`
	RecoveryPointDataStoresDetails []*RecoveryPointDataStoreDetails `json:"recoveryPointDataStoresDetails,omitempty"`
	RecoveryPointID                *string                          `json:"recoveryPointId,omitempty"`
	RecoveryPointType              *string                          `json:"recoveryPointType,omitempty"`
	RetentionTagName               *string                          `json:"retentionTagName,omitempty"`
	RetentionTagVersion            *string                          `json:"retentionTagVersion,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupDiscreteRecoveryPoint.
func (a AzureBackupDiscreteRecoveryPoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.AzureBackupRecoveryPoint.marshalInternal(objectMap, "AzureBackupDiscreteRecoveryPoint")
	populate(objectMap, "friendlyName", a.FriendlyName)
	populate(objectMap, "policyName", a.PolicyName)
	populate(objectMap, "policyVersion", a.PolicyVersion)
	populate(objectMap, "recoveryPointDataStoresDetails", a.RecoveryPointDataStoresDetails)
	populate(objectMap, "recoveryPointId", a.RecoveryPointID)
	populateTimeRFC3339(objectMap, "recoveryPointTime", a.RecoveryPointTime)
	populate(objectMap, "recoveryPointType", a.RecoveryPointType)
	populate(objectMap, "retentionTagName", a.RetentionTagName)
	populate(objectMap, "retentionTagVersion", a.RetentionTagVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupDiscreteRecoveryPoint.
func (a *AzureBackupDiscreteRecoveryPoint) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "friendlyName":
			err = unpopulate(val, &a.FriendlyName)
			delete(rawMsg, key)
		case "policyName":
			err = unpopulate(val, &a.PolicyName)
			delete(rawMsg, key)
		case "policyVersion":
			err = unpopulate(val, &a.PolicyVersion)
			delete(rawMsg, key)
		case "recoveryPointDataStoresDetails":
			err = unpopulate(val, &a.RecoveryPointDataStoresDetails)
			delete(rawMsg, key)
		case "recoveryPointId":
			err = unpopulate(val, &a.RecoveryPointID)
			delete(rawMsg, key)
		case "recoveryPointTime":
			err = unpopulateTimeRFC3339(val, &a.RecoveryPointTime)
			delete(rawMsg, key)
		case "recoveryPointType":
			err = unpopulate(val, &a.RecoveryPointType)
			delete(rawMsg, key)
		case "retentionTagName":
			err = unpopulate(val, &a.RetentionTagName)
			delete(rawMsg, key)
		case "retentionTagVersion":
			err = unpopulate(val, &a.RetentionTagVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.AzureBackupRecoveryPoint.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupFindRestorableTimeRangesRequest - List Restore Ranges Request
type AzureBackupFindRestorableTimeRangesRequest struct {
	// REQUIRED; Gets or sets the type of the source data store.
	SourceDataStoreType *RestoreSourceDataStoreType `json:"sourceDataStoreType,omitempty"`

	// End time for the List Restore Ranges request. ISO 8601 format.
	EndTime *string `json:"endTime,omitempty"`

	// Start time for the List Restore Ranges request. ISO 8601 format.
	StartTime *string `json:"startTime,omitempty"`
}

// AzureBackupFindRestorableTimeRangesRequestResource - List Restore Ranges Request
type AzureBackupFindRestorableTimeRangesRequestResource struct {
	DppWorkerRequest
	// AzureBackupFindRestorableTimeRangesRequestResource content
	Content *AzureBackupFindRestorableTimeRangesRequest `json:"content,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupFindRestorableTimeRangesRequestResource.
func (a AzureBackupFindRestorableTimeRangesRequestResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppWorkerRequest.marshalInternal(objectMap)
	populate(objectMap, "content", a.Content)
	return json.Marshal(objectMap)
}

// AzureBackupFindRestorableTimeRangesResponse - List Restore Ranges Response
type AzureBackupFindRestorableTimeRangesResponse struct {
	ObjectType *string `json:"objectType,omitempty"`

	// Returns the Restore Ranges available on the Backup Instance.
	RestorableTimeRanges []*RestorableTimeRange `json:"restorableTimeRanges,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupFindRestorableTimeRangesResponse.
func (a AzureBackupFindRestorableTimeRangesResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "objectType", a.ObjectType)
	populate(objectMap, "restorableTimeRanges", a.RestorableTimeRanges)
	return json.Marshal(objectMap)
}

// AzureBackupFindRestorableTimeRangesResponseResource - List Restore Ranges Response
type AzureBackupFindRestorableTimeRangesResponseResource struct {
	DppResource
	// AzureBackupFindRestorableTimeRangesResponseResource properties
	Properties *AzureBackupFindRestorableTimeRangesResponse `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupFindRestorableTimeRangesResponseResource.
func (a AzureBackupFindRestorableTimeRangesResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupFindRestorableTimeRangesResponseResource.
func (a *AzureBackupFindRestorableTimeRangesResponseResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DppResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupJob - AzureBackup Job Class
type AzureBackupJob struct {
	// REQUIRED; Job Activity Id
	ActivityID *string `json:"activityID,omitempty"`

	// REQUIRED; Name of the Backup Instance
	BackupInstanceFriendlyName *string `json:"backupInstanceFriendlyName,omitempty"`

	// REQUIRED; ARM ID of the DataSource
	DataSourceID *string `json:"dataSourceId,omitempty"`

	// REQUIRED; Location of the DataSource
	DataSourceLocation *string `json:"dataSourceLocation,omitempty"`

	// REQUIRED; User Friendly Name of the DataSource
	DataSourceName *string `json:"dataSourceName,omitempty"`

	// REQUIRED; Type of DataSource
	DataSourceType *string `json:"dataSourceType,omitempty"`

	// REQUIRED; Indicated that whether the job is adhoc(true) or scheduled(false)
	IsUserTriggered *bool `json:"isUserTriggered,omitempty"`

	// REQUIRED; It indicates the type of Job i.e. Backup:full/log/diff ;Restore:ALR/OLR; Tiering:Backup/Archive ; Management:ConfigureProtection/UnConfigure
	Operation *string `json:"operation,omitempty"`

	// REQUIRED; It indicates the type of Job i.e. Backup/Restore/Tiering/Management
	OperationCategory *string `json:"operationCategory,omitempty"`

	// REQUIRED; Indicated whether progress is enabled for the job
	ProgressEnabled *bool `json:"progressEnabled,omitempty"`

	// REQUIRED; Resource Group Name of the Datasource
	SourceResourceGroup *string `json:"sourceResourceGroup,omitempty"`

	// REQUIRED; SubscriptionId corresponding to the DataSource
	SourceSubscriptionID *string `json:"sourceSubscriptionID,omitempty"`

	// REQUIRED; StartTime of the job(in UTC)
	StartTime *time.Time `json:"startTime,omitempty"`

	// REQUIRED; Status of the job like InProgress/Success/Failed/Cancelled/SuccessWithWarning
	Status *string `json:"status,omitempty"`

	// REQUIRED; Subscription Id of the corresponding backup vault
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// REQUIRED; List of supported actions
	SupportedActions []*string `json:"supportedActions,omitempty"`

	// REQUIRED; Name of the vault
	VaultName *string `json:"vaultName,omitempty"`

	// Data Source Set Name of the DataSource
	DataSourceSetName        *string `json:"dataSourceSetName,omitempty"`
	DestinationDataStoreName *string `json:"destinationDataStoreName,omitempty"`

	// Total run time of the job. ISO 8601 format.
	Duration            *string `json:"duration,omitempty"`
	Etag                *string `json:"etag,omitempty"`
	SourceDataStoreName *string `json:"sourceDataStoreName,omitempty"`

	// READ-ONLY; ARM ID of the Backup Instance
	BackupInstanceID *string `json:"backupInstanceId,omitempty" azure:"ro"`

	// READ-ONLY; EndTime of the job(in UTC)
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; A List, detailing the errors related to the job
	ErrorDetails []*UserFacingError `json:"errorDetails,omitempty" azure:"ro"`

	// READ-ONLY; Extended Information about the job
	ExtendedInfo *JobExtendedInfo `json:"extendedInfo,omitempty" azure:"ro"`

	// READ-ONLY; ARM ID of the policy
	PolicyID *string `json:"policyId,omitempty" azure:"ro"`

	// READ-ONLY; Name of the policy
	PolicyName *string `json:"policyName,omitempty" azure:"ro"`

	// READ-ONLY; Url which contains job's progress
	ProgressURL *string `json:"progressUrl,omitempty" azure:"ro"`

	// READ-ONLY; It indicates the sub type of operation i.e. in case of Restore it can be ALR/OLR
	RestoreType *string `json:"restoreType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupJob.
func (a AzureBackupJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activityID", a.ActivityID)
	populate(objectMap, "backupInstanceFriendlyName", a.BackupInstanceFriendlyName)
	populate(objectMap, "backupInstanceId", a.BackupInstanceID)
	populate(objectMap, "dataSourceId", a.DataSourceID)
	populate(objectMap, "dataSourceLocation", a.DataSourceLocation)
	populate(objectMap, "dataSourceName", a.DataSourceName)
	populate(objectMap, "dataSourceSetName", a.DataSourceSetName)
	populate(objectMap, "dataSourceType", a.DataSourceType)
	populate(objectMap, "destinationDataStoreName", a.DestinationDataStoreName)
	populate(objectMap, "duration", a.Duration)
	populateTimeRFC3339(objectMap, "endTime", a.EndTime)
	populate(objectMap, "errorDetails", a.ErrorDetails)
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "extendedInfo", a.ExtendedInfo)
	populate(objectMap, "isUserTriggered", a.IsUserTriggered)
	populate(objectMap, "operation", a.Operation)
	populate(objectMap, "operationCategory", a.OperationCategory)
	populate(objectMap, "policyId", a.PolicyID)
	populate(objectMap, "policyName", a.PolicyName)
	populate(objectMap, "progressEnabled", a.ProgressEnabled)
	populate(objectMap, "progressUrl", a.ProgressURL)
	populate(objectMap, "restoreType", a.RestoreType)
	populate(objectMap, "sourceDataStoreName", a.SourceDataStoreName)
	populate(objectMap, "sourceResourceGroup", a.SourceResourceGroup)
	populate(objectMap, "sourceSubscriptionID", a.SourceSubscriptionID)
	populateTimeRFC3339(objectMap, "startTime", a.StartTime)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "subscriptionId", a.SubscriptionID)
	populate(objectMap, "supportedActions", a.SupportedActions)
	populate(objectMap, "vaultName", a.VaultName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupJob.
func (a *AzureBackupJob) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activityID":
			err = unpopulate(val, &a.ActivityID)
			delete(rawMsg, key)
		case "backupInstanceFriendlyName":
			err = unpopulate(val, &a.BackupInstanceFriendlyName)
			delete(rawMsg, key)
		case "backupInstanceId":
			err = unpopulate(val, &a.BackupInstanceID)
			delete(rawMsg, key)
		case "dataSourceId":
			err = unpopulate(val, &a.DataSourceID)
			delete(rawMsg, key)
		case "dataSourceLocation":
			err = unpopulate(val, &a.DataSourceLocation)
			delete(rawMsg, key)
		case "dataSourceName":
			err = unpopulate(val, &a.DataSourceName)
			delete(rawMsg, key)
		case "dataSourceSetName":
			err = unpopulate(val, &a.DataSourceSetName)
			delete(rawMsg, key)
		case "dataSourceType":
			err = unpopulate(val, &a.DataSourceType)
			delete(rawMsg, key)
		case "destinationDataStoreName":
			err = unpopulate(val, &a.DestinationDataStoreName)
			delete(rawMsg, key)
		case "duration":
			err = unpopulate(val, &a.Duration)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &a.EndTime)
			delete(rawMsg, key)
		case "errorDetails":
			err = unpopulate(val, &a.ErrorDetails)
			delete(rawMsg, key)
		case "etag":
			err = unpopulate(val, &a.Etag)
			delete(rawMsg, key)
		case "extendedInfo":
			err = unpopulate(val, &a.ExtendedInfo)
			delete(rawMsg, key)
		case "isUserTriggered":
			err = unpopulate(val, &a.IsUserTriggered)
			delete(rawMsg, key)
		case "operation":
			err = unpopulate(val, &a.Operation)
			delete(rawMsg, key)
		case "operationCategory":
			err = unpopulate(val, &a.OperationCategory)
			delete(rawMsg, key)
		case "policyId":
			err = unpopulate(val, &a.PolicyID)
			delete(rawMsg, key)
		case "policyName":
			err = unpopulate(val, &a.PolicyName)
			delete(rawMsg, key)
		case "progressEnabled":
			err = unpopulate(val, &a.ProgressEnabled)
			delete(rawMsg, key)
		case "progressUrl":
			err = unpopulate(val, &a.ProgressURL)
			delete(rawMsg, key)
		case "restoreType":
			err = unpopulate(val, &a.RestoreType)
			delete(rawMsg, key)
		case "sourceDataStoreName":
			err = unpopulate(val, &a.SourceDataStoreName)
			delete(rawMsg, key)
		case "sourceResourceGroup":
			err = unpopulate(val, &a.SourceResourceGroup)
			delete(rawMsg, key)
		case "sourceSubscriptionID":
			err = unpopulate(val, &a.SourceSubscriptionID)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &a.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &a.SubscriptionID)
			delete(rawMsg, key)
		case "supportedActions":
			err = unpopulate(val, &a.SupportedActions)
			delete(rawMsg, key)
		case "vaultName":
			err = unpopulate(val, &a.VaultName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureBackupJobResource - AzureBackup Job Resource Class
type AzureBackupJobResource struct {
	DppResource
	// AzureBackupJobResource properties
	Properties *AzureBackupJob `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupJobResource.
func (a AzureBackupJobResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupJobResource.
func (a *AzureBackupJobResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DppResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupJobResourceList - List of AzureBackup Job resources
type AzureBackupJobResourceList struct {
	DppResourceList
	// List of resources.
	Value []*AzureBackupJobResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupJobResourceList.
func (a AzureBackupJobResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AzureBackupParams - Azure backup parameters
type AzureBackupParams struct {
	BackupParameters
	// REQUIRED; BackupType ; Full/Incremental etc
	BackupType *string `json:"backupType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupParams.
func (a AzureBackupParams) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.BackupParameters.marshalInternal(objectMap, "AzureBackupParams")
	populate(objectMap, "backupType", a.BackupType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupParams.
func (a *AzureBackupParams) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "backupType":
			err = unpopulate(val, &a.BackupType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.BackupParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupRecoveryPointClassification provides polymorphic access to related types.
// Call the interface's GetAzureBackupRecoveryPoint() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupDiscreteRecoveryPoint, *AzureBackupRecoveryPoint
type AzureBackupRecoveryPointClassification interface {
	// GetAzureBackupRecoveryPoint returns the AzureBackupRecoveryPoint content of the underlying type.
	GetAzureBackupRecoveryPoint() *AzureBackupRecoveryPoint
}

// AzureBackupRecoveryPoint - Azure backup recoveryPoint
type AzureBackupRecoveryPoint struct {
	// REQUIRED
	ObjectType *string `json:"objectType,omitempty"`
}

// GetAzureBackupRecoveryPoint implements the AzureBackupRecoveryPointClassification interface for type AzureBackupRecoveryPoint.
func (a *AzureBackupRecoveryPoint) GetAzureBackupRecoveryPoint() *AzureBackupRecoveryPoint { return a }

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRecoveryPoint.
func (a *AzureBackupRecoveryPoint) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AzureBackupRecoveryPoint) marshalInternal(objectMap map[string]interface{}, discValue string) {
	a.ObjectType = &discValue
	objectMap["objectType"] = a.ObjectType
}

func (a *AzureBackupRecoveryPoint) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &a.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureBackupRecoveryPointBasedRestoreRequestClassification provides polymorphic access to related types.
// Call the interface's GetAzureBackupRecoveryPointBasedRestoreRequest() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupRecoveryPointBasedRestoreRequest, *AzureBackupRestoreWithRehydrationRequest
type AzureBackupRecoveryPointBasedRestoreRequestClassification interface {
	AzureBackupRestoreRequestClassification
	// GetAzureBackupRecoveryPointBasedRestoreRequest returns the AzureBackupRecoveryPointBasedRestoreRequest content of the underlying type.
	GetAzureBackupRecoveryPointBasedRestoreRequest() *AzureBackupRecoveryPointBasedRestoreRequest
}

// AzureBackupRecoveryPointBasedRestoreRequest - Azure backup recoveryPoint based restore request
type AzureBackupRecoveryPointBasedRestoreRequest struct {
	AzureBackupRestoreRequest
	// REQUIRED
	RecoveryPointID *string `json:"recoveryPointId,omitempty"`
}

// GetAzureBackupRecoveryPointBasedRestoreRequest implements the AzureBackupRecoveryPointBasedRestoreRequestClassification interface for type AzureBackupRecoveryPointBasedRestoreRequest.
func (a *AzureBackupRecoveryPointBasedRestoreRequest) GetAzureBackupRecoveryPointBasedRestoreRequest() *AzureBackupRecoveryPointBasedRestoreRequest {
	return a
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRecoveryPointBasedRestoreRequest.
func (a AzureBackupRecoveryPointBasedRestoreRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.marshalInternal(objectMap, "AzureBackupRecoveryPointBasedRestoreRequest")
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRecoveryPointBasedRestoreRequest.
func (a *AzureBackupRecoveryPointBasedRestoreRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AzureBackupRecoveryPointBasedRestoreRequest) marshalInternal(objectMap map[string]interface{}, discValue string) {
	a.AzureBackupRestoreRequest.marshalInternal(objectMap, discValue)
	populate(objectMap, "recoveryPointId", a.RecoveryPointID)
}

func (a *AzureBackupRecoveryPointBasedRestoreRequest) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recoveryPointId":
			err = unpopulate(val, &a.RecoveryPointID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.AzureBackupRestoreRequest.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupRecoveryPointResource - Azure backup recoveryPoint resource
type AzureBackupRecoveryPointResource struct {
	DppResource
	// AzureBackupRecoveryPointResource properties
	Properties AzureBackupRecoveryPointClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRecoveryPointResource.
func (a AzureBackupRecoveryPointResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRecoveryPointResource.
func (a *AzureBackupRecoveryPointResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			a.Properties, err = unmarshalAzureBackupRecoveryPointClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DppResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupRecoveryPointResourceList - Azure backup recoveryPoint resource list
type AzureBackupRecoveryPointResourceList struct {
	DppResourceList
	// List of resources.
	Value []*AzureBackupRecoveryPointResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRecoveryPointResourceList.
func (a AzureBackupRecoveryPointResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DppResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AzureBackupRecoveryTimeBasedRestoreRequest - AzureBackup RecoveryPointTime Based Restore Request
type AzureBackupRecoveryTimeBasedRestoreRequest struct {
	AzureBackupRestoreRequest
	// REQUIRED; The recovery time in ISO 8601 format example - 2020-08-14T17:30:00.0000000Z.
	RecoveryPointTime *string `json:"recoveryPointTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRecoveryTimeBasedRestoreRequest.
func (a AzureBackupRecoveryTimeBasedRestoreRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.AzureBackupRestoreRequest.marshalInternal(objectMap, "AzureBackupRecoveryTimeBasedRestoreRequest")
	populate(objectMap, "recoveryPointTime", a.RecoveryPointTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRecoveryTimeBasedRestoreRequest.
func (a *AzureBackupRecoveryTimeBasedRestoreRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recoveryPointTime":
			err = unpopulate(val, &a.RecoveryPointTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.AzureBackupRestoreRequest.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupRehydrationRequest - Azure Backup Rehydrate Request
type AzureBackupRehydrationRequest struct {
	// REQUIRED; Id of the recovery point to be recovered
	RecoveryPointID *string `json:"recoveryPointId,omitempty"`

	// REQUIRED; Retention duration in ISO 8601 format i.e P10D .
	RehydrationRetentionDuration *string `json:"rehydrationRetentionDuration,omitempty"`

	// Priority to be used for rehydration. Values High or Standard
	RehydrationPriority *RehydrationPriority `json:"rehydrationPriority,omitempty"`
}

// AzureBackupRestoreRequestClassification provides polymorphic access to related types.
// Call the interface's GetAzureBackupRestoreRequest() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupRecoveryPointBasedRestoreRequest, *AzureBackupRecoveryTimeBasedRestoreRequest, *AzureBackupRestoreRequest,
// - *AzureBackupRestoreWithRehydrationRequest
type AzureBackupRestoreRequestClassification interface {
	// GetAzureBackupRestoreRequest returns the AzureBackupRestoreRequest content of the underlying type.
	GetAzureBackupRestoreRequest() *AzureBackupRestoreRequest
}

// AzureBackupRestoreRequest - Azure backup restore request
type AzureBackupRestoreRequest struct {
	// REQUIRED
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Gets or sets the restore target information.
	RestoreTargetInfo RestoreTargetInfoBaseClassification `json:"restoreTargetInfo,omitempty"`

	// REQUIRED; Gets or sets the type of the source data store.
	SourceDataStoreType *SourceDataStoreType `json:"sourceDataStoreType,omitempty"`
}

// GetAzureBackupRestoreRequest implements the AzureBackupRestoreRequestClassification interface for type AzureBackupRestoreRequest.
func (a *AzureBackupRestoreRequest) GetAzureBackupRestoreRequest() *AzureBackupRestoreRequest {
	return a
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRestoreRequest.
func (a *AzureBackupRestoreRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AzureBackupRestoreRequest) marshalInternal(objectMap map[string]interface{}, discValue string) {
	a.ObjectType = &discValue
	objectMap["objectType"] = a.ObjectType
	populate(objectMap, "restoreTargetInfo", a.RestoreTargetInfo)
	populate(objectMap, "sourceDataStoreType", a.SourceDataStoreType)
}

func (a *AzureBackupRestoreRequest) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &a.ObjectType)
			delete(rawMsg, key)
		case "restoreTargetInfo":
			a.RestoreTargetInfo, err = unmarshalRestoreTargetInfoBaseClassification(val)
			delete(rawMsg, key)
		case "sourceDataStoreType":
			err = unpopulate(val, &a.SourceDataStoreType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureBackupRestoreWithRehydrationRequest - AzureBackup Restore with Rehydration Request
type AzureBackupRestoreWithRehydrationRequest struct {
	AzureBackupRecoveryPointBasedRestoreRequest
	// REQUIRED; Priority to be used for rehydration. Values High or Standard
	RehydrationPriority *RehydrationPriority `json:"rehydrationPriority,omitempty"`

	// REQUIRED; Retention duration in ISO 8601 format i.e P10D .
	RehydrationRetentionDuration *string `json:"rehydrationRetentionDuration,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRestoreWithRehydrationRequest.
func (a AzureBackupRestoreWithRehydrationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.AzureBackupRecoveryPointBasedRestoreRequest.marshalInternal(objectMap, "AzureBackupRestoreWithRehydrationRequest")
	populate(objectMap, "rehydrationPriority", a.RehydrationPriority)
	populate(objectMap, "rehydrationRetentionDuration", a.RehydrationRetentionDuration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRestoreWithRehydrationRequest.
func (a *AzureBackupRestoreWithRehydrationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "rehydrationPriority":
			err = unpopulate(val, &a.RehydrationPriority)
			delete(rawMsg, key)
		case "rehydrationRetentionDuration":
			err = unpopulate(val, &a.RehydrationRetentionDuration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.AzureBackupRecoveryPointBasedRestoreRequest.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureBackupRule - Azure backup rule
type AzureBackupRule struct {
	BasePolicyRule
	// REQUIRED; DataStoreInfo base
	DataStore *DataStoreInfoBase `json:"dataStore,omitempty"`

	// REQUIRED; Trigger context
	Trigger TriggerContextClassification `json:"trigger,omitempty"`

	// BackupParameters base
	BackupParameters BackupParametersClassification `json:"backupParameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureBackupRule.
func (a AzureBackupRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.BasePolicyRule.marshalInternal(objectMap, "AzureBackupRule")
	populate(objectMap, "backupParameters", a.BackupParameters)
	populate(objectMap, "dataStore", a.DataStore)
	populate(objectMap, "trigger", a.Trigger)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureBackupRule.
func (a *AzureBackupRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "backupParameters":
			a.BackupParameters, err = unmarshalBackupParametersClassification(val)
			delete(rawMsg, key)
		case "dataStore":
			err = unpopulate(val, &a.DataStore)
			delete(rawMsg, key)
		case "trigger":
			a.Trigger, err = unmarshalTriggerContextClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.BasePolicyRule.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureOperationalStoreParameters - Parameters for Operational-Tier DataStore
type AzureOperationalStoreParameters struct {
	DataStoreParameters
	// Gets or sets the Snapshot Resource Group Uri.
	ResourceGroupID *string `json:"resourceGroupId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureOperationalStoreParameters.
func (a AzureOperationalStoreParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataStoreParameters.marshalInternal(objectMap, "AzureOperationalStoreParameters")
	populate(objectMap, "resourceGroupId", a.ResourceGroupID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureOperationalStoreParameters.
func (a *AzureOperationalStoreParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "resourceGroupId":
			err = unpopulate(val, &a.ResourceGroupID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataStoreParameters.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AzureRetentionRule - Azure retention rule
type AzureRetentionRule struct {
	BasePolicyRule
	// REQUIRED
	Lifecycles []*SourceLifeCycle `json:"lifecycles,omitempty"`
	IsDefault  *bool              `json:"isDefault,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureRetentionRule.
func (a AzureRetentionRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.BasePolicyRule.marshalInternal(objectMap, "AzureRetentionRule")
	populate(objectMap, "isDefault", a.IsDefault)
	populate(objectMap, "lifecycles", a.Lifecycles)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureRetentionRule.
func (a *AzureRetentionRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "isDefault":
			err = unpopulate(val, &a.IsDefault)
			delete(rawMsg, key)
		case "lifecycles":
			err = unpopulate(val, &a.Lifecycles)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.BasePolicyRule.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BackupCriteriaClassification provides polymorphic access to related types.
// Call the interface's GetBackupCriteria() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BackupCriteria, *ScheduleBasedBackupCriteria
type BackupCriteriaClassification interface {
	// GetBackupCriteria returns the BackupCriteria content of the underlying type.
	GetBackupCriteria() *BackupCriteria
}

// BackupCriteria base class
type BackupCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBackupCriteria implements the BackupCriteriaClassification interface for type BackupCriteria.
func (b *BackupCriteria) GetBackupCriteria() *BackupCriteria { return b }

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupCriteria.
func (b *BackupCriteria) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BackupCriteria) marshalInternal(objectMap map[string]interface{}, discValue string) {
	b.ObjectType = &discValue
	objectMap["objectType"] = b.ObjectType
}

func (b *BackupCriteria) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &b.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BackupInstance - Backup Instance
type BackupInstance struct {
	// REQUIRED; Gets or sets the data source information.
	DataSourceInfo *Datasource `json:"dataSourceInfo,omitempty"`

	// REQUIRED
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Gets or sets the policy information.
	PolicyInfo *PolicyInfo `json:"policyInfo,omitempty"`

	// Gets or sets the data source set information.
	DataSourceSetInfo *DatasourceSet `json:"dataSourceSetInfo,omitempty"`

	// Credentials to use to authenticate with data source provider.
	DatasourceAuthCredentials AuthCredentialsClassification `json:"datasourceAuthCredentials,omitempty"`

	// Gets or sets the Backup Instance friendly name.
	FriendlyName *string `json:"friendlyName,omitempty"`

	// READ-ONLY; Specifies the current protection state of the resource
	CurrentProtectionState *CurrentProtectionState `json:"currentProtectionState,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the protection error of the resource
	ProtectionErrorDetails *UserFacingError `json:"protectionErrorDetails,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the protection status of the resource
	ProtectionStatus *ProtectionStatusDetails `json:"protectionStatus,omitempty" azure:"ro"`

	// READ-ONLY; Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupInstance.
func (b BackupInstance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentProtectionState", b.CurrentProtectionState)
	populate(objectMap, "dataSourceInfo", b.DataSourceInfo)
	populate(objectMap, "dataSourceSetInfo", b.DataSourceSetInfo)
	populate(objectMap, "datasourceAuthCredentials", b.DatasourceAuthCredentials)
	populate(objectMap, "friendlyName", b.FriendlyName)
	populate(objectMap, "objectType", b.ObjectType)
	populate(objectMap, "policyInfo", b.PolicyInfo)
	populate(objectMap, "protectionErrorDetails", b.ProtectionErrorDetails)
	populate(objectMap, "protectionStatus", b.ProtectionStatus)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupInstance.
func (b *BackupInstance) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentProtectionState":
			err = unpopulate(val, &b.CurrentProtectionState)
			delete(rawMsg, key)
		case "dataSourceInfo":
			err = unpopulate(val, &b.DataSourceInfo)
			delete(rawMsg, key)
		case "dataSourceSetInfo":
			err = unpopulate(val, &b.DataSourceSetInfo)
			delete(rawMsg, key)
		case "datasourceAuthCredentials":
			b.DatasourceAuthCredentials, err = unmarshalAuthCredentialsClassification(val)
			delete(rawMsg, key)
		case "friendlyName":
			err = unpopulate(val, &b.FriendlyName)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, &b.ObjectType)
			delete(rawMsg, key)
		case "policyInfo":
			err = unpopulate(val, &b.PolicyInfo)
			delete(rawMsg, key)
		case "protectionErrorDetails":
			err = unpopulate(val, &b.ProtectionErrorDetails)
			delete(rawMsg, key)
		case "protectionStatus":
			err = unpopulate(val, &b.ProtectionStatus)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &b.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BackupInstanceResource - BackupInstance Resource
type BackupInstanceResource struct {
	DppResource
	// BackupInstanceResource properties
	Properties *BackupInstance `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupInstanceResource.
func (b BackupInstanceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupInstanceResource.
func (b *BackupInstanceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DppResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BackupInstanceResourceList - BackupInstance Resource list response
type BackupInstanceResourceList struct {
	DppResourceList
	// List of resources.
	Value []*BackupInstanceResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupInstanceResourceList.
func (b BackupInstanceResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BackupInstancesBeginAdhocBackupOptions contains the optional parameters for the BackupInstances.BeginAdhocBackup method.
type BackupInstancesBeginAdhocBackupOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginCreateOrUpdateOptions contains the optional parameters for the BackupInstances.BeginCreateOrUpdate method.
type BackupInstancesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginDeleteOptions contains the optional parameters for the BackupInstances.BeginDelete method.
type BackupInstancesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginTriggerRehydrateOptions contains the optional parameters for the BackupInstances.BeginTriggerRehydrate method.
type BackupInstancesBeginTriggerRehydrateOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginTriggerRestoreOptions contains the optional parameters for the BackupInstances.BeginTriggerRestore method.
type BackupInstancesBeginTriggerRestoreOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginValidateForBackupOptions contains the optional parameters for the BackupInstances.BeginValidateForBackup method.
type BackupInstancesBeginValidateForBackupOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesBeginValidateForRestoreOptions contains the optional parameters for the BackupInstances.BeginValidateForRestore method.
type BackupInstancesBeginValidateForRestoreOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesGetOptions contains the optional parameters for the BackupInstances.Get method.
type BackupInstancesGetOptions struct {
	// placeholder for future optional parameters
}

// BackupInstancesListOptions contains the optional parameters for the BackupInstances.List method.
type BackupInstancesListOptions struct {
	// placeholder for future optional parameters
}

// BackupParametersClassification provides polymorphic access to related types.
// Call the interface's GetBackupParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupParams, *BackupParameters
type BackupParametersClassification interface {
	// GetBackupParameters returns the BackupParameters content of the underlying type.
	GetBackupParameters() *BackupParameters
}

// BackupParameters base
type BackupParameters struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBackupParameters implements the BackupParametersClassification interface for type BackupParameters.
func (b *BackupParameters) GetBackupParameters() *BackupParameters { return b }

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupParameters.
func (b *BackupParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BackupParameters) marshalInternal(objectMap map[string]interface{}, discValue string) {
	b.ObjectType = &discValue
	objectMap["objectType"] = b.ObjectType
}

func (b *BackupParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &b.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BackupPoliciesCreateOrUpdateOptions contains the optional parameters for the BackupPolicies.CreateOrUpdate method.
type BackupPoliciesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BackupPoliciesDeleteOptions contains the optional parameters for the BackupPolicies.Delete method.
type BackupPoliciesDeleteOptions struct {
	// placeholder for future optional parameters
}

// BackupPoliciesGetOptions contains the optional parameters for the BackupPolicies.Get method.
type BackupPoliciesGetOptions struct {
	// placeholder for future optional parameters
}

// BackupPoliciesListOptions contains the optional parameters for the BackupPolicies.List method.
type BackupPoliciesListOptions struct {
	// placeholder for future optional parameters
}

// BackupPolicy - Rule based backup policy
type BackupPolicy struct {
	BaseBackupPolicy
	// REQUIRED; Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
	PolicyRules []BasePolicyRuleClassification `json:"policyRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupPolicy.
func (b BackupPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.BaseBackupPolicy.marshalInternal(objectMap, "BackupPolicy")
	populate(objectMap, "policyRules", b.PolicyRules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupPolicy.
func (b *BackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "policyRules":
			b.PolicyRules, err = unmarshalBasePolicyRuleClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.BaseBackupPolicy.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BackupSchedule - Schedule for backup
type BackupSchedule struct {
	// REQUIRED; ISO 8601 repeating time interval format
	RepeatingTimeIntervals []*string `json:"repeatingTimeIntervals,omitempty"`

	// Time zone for a schedule. Example: Pacific Standard Time
	TimeZone *string `json:"timeZone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupSchedule.
func (b BackupSchedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "repeatingTimeIntervals", b.RepeatingTimeIntervals)
	populate(objectMap, "timeZone", b.TimeZone)
	return json.Marshal(objectMap)
}

// BackupVault - Backup Vault
type BackupVault struct {
	// REQUIRED; Storage Settings
	StorageSettings []*StorageSetting `json:"storageSettings,omitempty"`

	// READ-ONLY; Provisioning state of the BackupVault resource
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Resource move details for backup vault
	ResourceMoveDetails *ResourceMoveDetails `json:"resourceMoveDetails,omitempty" azure:"ro"`

	// READ-ONLY; Resource move state for backup vault
	ResourceMoveState *ResourceMoveState `json:"resourceMoveState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupVault.
func (b BackupVault) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", b.ProvisioningState)
	populate(objectMap, "resourceMoveDetails", b.ResourceMoveDetails)
	populate(objectMap, "resourceMoveState", b.ResourceMoveState)
	populate(objectMap, "storageSettings", b.StorageSettings)
	return json.Marshal(objectMap)
}

// BackupVaultOperationResultsGetOptions contains the optional parameters for the BackupVaultOperationResults.Get method.
type BackupVaultOperationResultsGetOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultResource - Backup Vault Resource
type BackupVaultResource struct {
	DppTrackedResource
	// REQUIRED; BackupVaultResource properties
	Properties *BackupVault `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupVaultResource.
func (b BackupVaultResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppTrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BackupVaultResourceList - List of BackupVault resources
type BackupVaultResourceList struct {
	DppResourceList
	// List of resources.
	Value []*BackupVaultResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupVaultResourceList.
func (b BackupVaultResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BackupVaultsBeginCreateOrUpdateOptions contains the optional parameters for the BackupVaults.BeginCreateOrUpdate method.
type BackupVaultsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsBeginUpdateOptions contains the optional parameters for the BackupVaults.BeginUpdate method.
type BackupVaultsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsCheckNameAvailabilityOptions contains the optional parameters for the BackupVaults.CheckNameAvailability method.
type BackupVaultsCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsDeleteOptions contains the optional parameters for the BackupVaults.Delete method.
type BackupVaultsDeleteOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsGetInResourceGroupOptions contains the optional parameters for the BackupVaults.GetInResourceGroup method.
type BackupVaultsGetInResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsGetInSubscriptionOptions contains the optional parameters for the BackupVaults.GetInSubscription method.
type BackupVaultsGetInSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// BackupVaultsGetOptions contains the optional parameters for the BackupVaults.Get method.
type BackupVaultsGetOptions struct {
	// placeholder for future optional parameters
}

// BaseBackupPolicyClassification provides polymorphic access to related types.
// Call the interface's GetBaseBackupPolicy() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BackupPolicy, *BaseBackupPolicy
type BaseBackupPolicyClassification interface {
	// GetBaseBackupPolicy returns the BaseBackupPolicy content of the underlying type.
	GetBaseBackupPolicy() *BaseBackupPolicy
}

// BaseBackupPolicy - BackupPolicy base
type BaseBackupPolicy struct {
	// REQUIRED; Type of datasource for the backup management
	DatasourceTypes []*string `json:"datasourceTypes,omitempty"`

	// REQUIRED
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBaseBackupPolicy implements the BaseBackupPolicyClassification interface for type BaseBackupPolicy.
func (b *BaseBackupPolicy) GetBaseBackupPolicy() *BaseBackupPolicy { return b }

// UnmarshalJSON implements the json.Unmarshaller interface for type BaseBackupPolicy.
func (b *BaseBackupPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BaseBackupPolicy) marshalInternal(objectMap map[string]interface{}, discValue string) {
	populate(objectMap, "datasourceTypes", b.DatasourceTypes)
	b.ObjectType = &discValue
	objectMap["objectType"] = b.ObjectType
}

func (b *BaseBackupPolicy) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "datasourceTypes":
			err = unpopulate(val, &b.DatasourceTypes)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, &b.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BaseBackupPolicyResource - BaseBackupPolicy resource
type BaseBackupPolicyResource struct {
	DppResource
	// BaseBackupPolicyResource properties
	Properties BaseBackupPolicyClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BaseBackupPolicyResource.
func (b BaseBackupPolicyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BaseBackupPolicyResource.
func (b *BaseBackupPolicyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			b.Properties, err = unmarshalBaseBackupPolicyClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DppResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BaseBackupPolicyResourceList - List of BaseBackupPolicy resources
type BaseBackupPolicyResourceList struct {
	DppResourceList
	// List of resources.
	Value []*BaseBackupPolicyResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BaseBackupPolicyResourceList.
func (b BaseBackupPolicyResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DppResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BasePolicyRuleClassification provides polymorphic access to related types.
// Call the interface's GetBasePolicyRule() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupRule, *AzureRetentionRule, *BasePolicyRule
type BasePolicyRuleClassification interface {
	// GetBasePolicyRule returns the BasePolicyRule content of the underlying type.
	GetBasePolicyRule() *BasePolicyRule
}

// BasePolicyRule - BasePolicy Rule
type BasePolicyRule struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBasePolicyRule implements the BasePolicyRuleClassification interface for type BasePolicyRule.
func (b *BasePolicyRule) GetBasePolicyRule() *BasePolicyRule { return b }

// UnmarshalJSON implements the json.Unmarshaller interface for type BasePolicyRule.
func (b *BasePolicyRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return b.unmarshalInternal(rawMsg)
}

func (b BasePolicyRule) marshalInternal(objectMap map[string]interface{}, discValue string) {
	populate(objectMap, "name", b.Name)
	b.ObjectType = &discValue
	objectMap["objectType"] = b.ObjectType
}

func (b *BasePolicyRule) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, &b.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CheckNameAvailabilityRequest - CheckNameAvailability Request
type CheckNameAvailabilityRequest struct {
	// Resource name for which availability needs to be checked
	Name *string `json:"name,omitempty"`

	// Describes the Resource type: Microsoft.DataProtection/BackupVaults
	Type *string `json:"type,omitempty"`
}

// CheckNameAvailabilityResult - CheckNameAvailability Result
type CheckNameAvailabilityResult struct {
	// Gets or sets the message.
	Message *string `json:"message,omitempty"`

	// Gets or sets a value indicating whether [name available].
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Gets or sets the reason.
	Reason *string `json:"reason,omitempty"`
}

// ClientDiscoveryDisplay - Localized display information of an operation.
type ClientDiscoveryDisplay struct {
	// Description of the operation having details of what operation is about.
	Description *string `json:"description,omitempty"`

	// Operations Name itself.
	Operation *string `json:"operation,omitempty"`

	// Name of the provider for display purposes
	Provider *string `json:"provider,omitempty"`

	// ResourceType for which this Operation can be performed.
	Resource *string `json:"resource,omitempty"`
}

// ClientDiscoveryForLogSpecification - Class to represent shoebox log specification in json client discovery.
type ClientDiscoveryForLogSpecification struct {
	// blob duration of shoebox log specification
	BlobDuration *string `json:"blobDuration,omitempty"`

	// Localized display name
	DisplayName *string `json:"displayName,omitempty"`

	// Name for shoebox log specification.
	Name *string `json:"name,omitempty"`
}

// ClientDiscoveryForProperties - Class to represent shoebox properties in json client discovery.
type ClientDiscoveryForProperties struct {
	// Operation properties.
	ServiceSpecification *ClientDiscoveryForServiceSpecification `json:"serviceSpecification,omitempty"`
}

// ClientDiscoveryForServiceSpecification - Class to represent shoebox service specification in json client discovery.
type ClientDiscoveryForServiceSpecification struct {
	// List of log specifications of this operation.
	LogSpecifications []*ClientDiscoveryForLogSpecification `json:"logSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ClientDiscoveryForServiceSpecification.
func (c ClientDiscoveryForServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", c.LogSpecifications)
	return json.Marshal(objectMap)
}

// ClientDiscoveryResponse - Operations List response which contains list of available APIs.
type ClientDiscoveryResponse struct {
	// Link to the next chunk of Response.
	NextLink *string `json:"nextLink,omitempty"`

	// List of available operations.
	Value []*ClientDiscoveryValueForSingleAPI `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ClientDiscoveryResponse.
func (c ClientDiscoveryResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ClientDiscoveryValueForSingleAPI - Available operation details.
type ClientDiscoveryValueForSingleAPI struct {
	// Contains the localized display information for this particular operation
	Display *ClientDiscoveryDisplay `json:"display,omitempty"`

	// Indicates whether the operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Name of the Operation.
	Name *string `json:"name,omitempty"`

	// The intended executor of the operation;governs the display of the operation in the RBAC UX and the audit logs UX
	Origin *string `json:"origin,omitempty"`

	// Properties for the given operation.
	Properties *ClientDiscoveryForProperties `json:"properties,omitempty"`
}

// CloudError - An error response from Azure Backup.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// The resource management error response.
	InnerError *Error `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CopyOnExpiryOption - Copy on Expiry Option
type CopyOnExpiryOption struct {
	CopyOption
}

// MarshalJSON implements the json.Marshaller interface for type CopyOnExpiryOption.
func (c CopyOnExpiryOption) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.CopyOption.marshalInternal(objectMap, "CopyOnExpiryOption")
	return json.Marshal(objectMap)
}

// CopyOptionClassification provides polymorphic access to related types.
// Call the interface's GetCopyOption() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *CopyOnExpiryOption, *CopyOption, *CustomCopyOption, *ImmediateCopyOption
type CopyOptionClassification interface {
	// GetCopyOption returns the CopyOption content of the underlying type.
	GetCopyOption() *CopyOption
}

// CopyOption - Options to copy
type CopyOption struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetCopyOption implements the CopyOptionClassification interface for type CopyOption.
func (c *CopyOption) GetCopyOption() *CopyOption { return c }

// UnmarshalJSON implements the json.Unmarshaller interface for type CopyOption.
func (c *CopyOption) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return c.unmarshalInternal(rawMsg)
}

func (c CopyOption) marshalInternal(objectMap map[string]interface{}, discValue string) {
	c.ObjectType = &discValue
	objectMap["objectType"] = c.ObjectType
}

func (c *CopyOption) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &c.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CustomCopyOption - Duration based custom options to copy
type CustomCopyOption struct {
	CopyOption
	// Data copied after given timespan
	Duration *string `json:"duration,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomCopyOption.
func (c CustomCopyOption) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.CopyOption.marshalInternal(objectMap, "CustomCopyOption")
	populate(objectMap, "duration", c.Duration)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomCopyOption.
func (c *CustomCopyOption) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			err = unpopulate(val, &c.Duration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := c.CopyOption.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DataProtectionCheckFeatureSupportOptions contains the optional parameters for the DataProtection.CheckFeatureSupport method.
type DataProtectionCheckFeatureSupportOptions struct {
	// placeholder for future optional parameters
}

// DataProtectionOperationsListOptions contains the optional parameters for the DataProtectionOperations.List method.
type DataProtectionOperationsListOptions struct {
	// placeholder for future optional parameters
}

// DataStoreInfoBase - DataStoreInfo base
type DataStoreInfoBase struct {
	// REQUIRED; type of datastore; Operational/Vault/Archive
	DataStoreType *DataStoreTypes `json:"dataStoreType,omitempty"`

	// REQUIRED; Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`
}

// DataStoreParametersClassification provides polymorphic access to related types.
// Call the interface's GetDataStoreParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureOperationalStoreParameters, *DataStoreParameters
type DataStoreParametersClassification interface {
	// GetDataStoreParameters returns the DataStoreParameters content of the underlying type.
	GetDataStoreParameters() *DataStoreParameters
}

// DataStoreParameters - Parameters for DataStore
type DataStoreParameters struct {
	// REQUIRED; type of datastore; Operational/Vault/Archive
	DataStoreType *DataStoreTypes `json:"dataStoreType,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetDataStoreParameters implements the DataStoreParametersClassification interface for type DataStoreParameters.
func (d *DataStoreParameters) GetDataStoreParameters() *DataStoreParameters { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DataStoreParameters.
func (d *DataStoreParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DataStoreParameters) marshalInternal(objectMap map[string]interface{}, discValue string) {
	populate(objectMap, "dataStoreType", d.DataStoreType)
	d.ObjectType = &discValue
	objectMap["objectType"] = d.ObjectType
}

func (d *DataStoreParameters) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataStoreType":
			err = unpopulate(val, &d.DataStoreType)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, &d.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Datasource to be backed up
type Datasource struct {
	// REQUIRED; Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via
	// Fabric/Vault.
	ResourceID *string `json:"resourceID,omitempty"`

	// DatasourceType of the resource.
	DatasourceType *string `json:"datasourceType,omitempty"`

	// Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Location of datasource.
	ResourceLocation *string `json:"resourceLocation,omitempty"`

	// Unique identifier of the resource in the context of parent.
	ResourceName *string `json:"resourceName,omitempty"`

	// Resource Type of Datasource.
	ResourceType *string `json:"resourceType,omitempty"`

	// Uri of the resource.
	ResourceURI *string `json:"resourceUri,omitempty"`
}

// DatasourceSet details of datasource to be backed up
type DatasourceSet struct {
	// REQUIRED; Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via
	// Fabric/Vault.
	ResourceID *string `json:"resourceID,omitempty"`

	// DatasourceType of the resource.
	DatasourceType *string `json:"datasourceType,omitempty"`

	// Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Location of datasource.
	ResourceLocation *string `json:"resourceLocation,omitempty"`

	// Unique identifier of the resource in the context of parent.
	ResourceName *string `json:"resourceName,omitempty"`

	// Resource Type of Datasource.
	ResourceType *string `json:"resourceType,omitempty"`

	// Uri of the resource.
	ResourceURI *string `json:"resourceUri,omitempty"`
}

// Day of the week
type Day struct {
	// Date of the month
	Date *int32 `json:"date,omitempty"`

	// Whether Date is last date of month
	IsLast *bool `json:"isLast,omitempty"`
}

// DeleteOptionClassification provides polymorphic access to related types.
// Call the interface's GetDeleteOption() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AbsoluteDeleteOption, *DeleteOption
type DeleteOptionClassification interface {
	// GetDeleteOption returns the DeleteOption content of the underlying type.
	GetDeleteOption() *DeleteOption
}

// DeleteOption - Delete Option
type DeleteOption struct {
	// REQUIRED; Duration of deletion after given timespan
	Duration *string `json:"duration,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetDeleteOption implements the DeleteOptionClassification interface for type DeleteOption.
func (d *DeleteOption) GetDeleteOption() *DeleteOption { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DeleteOption.
func (d *DeleteOption) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DeleteOption) marshalInternal(objectMap map[string]interface{}, discValue string) {
	populate(objectMap, "duration", d.Duration)
	d.ObjectType = &discValue
	objectMap["objectType"] = d.ObjectType
}

func (d *DeleteOption) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			err = unpopulate(val, &d.Duration)
			delete(rawMsg, key)
		case "objectType":
			err = unpopulate(val, &d.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DppBaseResource - Base resource under Microsoft.DataProtection provider namespace
type DppBaseResource struct {
	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name associated with the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/…
	Type *string `json:"type,omitempty" azure:"ro"`
}

// DppBaseResourceList - Base for all lists of V2 resources.
type DppBaseResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string `json:"nextLink,omitempty"`

	// List of Dpp resources.
	Value []*DppBaseResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DppBaseResourceList.
func (d DppBaseResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DppIdentityDetails - Identity details
type DppIdentityDetails struct {
	// The identityType which can be either SystemAssigned or None
	Type *string `json:"type,omitempty"`

	// READ-ONLY; The object ID of the service principal object for the managed identity that is used to grant role-based access to an Azure resource.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; A Globally Unique Identifier (GUID) that represents the Azure AD tenant where the resource is now a member.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// DppResource - Resource class
type DppResource struct {
	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name associated with the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/…
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DppResource.
func (d DppResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DppResource.
func (d *DppResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DppResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "type", d.Type)
}

func (d *DppResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &d.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &d.Name)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &d.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DppResourceList - ListResource
type DppResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DppResourceList.
func (d DppResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DppResourceList) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "nextLink", d.NextLink)
}

type DppTrackedResource struct {
	// Optional ETag.
	ETag *string `json:"eTag,omitempty"`

	// Input Managed Identity Details
	Identity *DppIdentityDetails `json:"identity,omitempty"`

	// Resource location.
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id represents the complete path to the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name associated with the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/…
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DppTrackedResource.
func (d DppTrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DppTrackedResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "eTag", d.ETag)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
}

type DppTrackedResourceList struct {
	// The uri to fetch the next page of resources. Call ListNext() fetches next page of resources.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DppTrackedResourceList.
func (d DppTrackedResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DppTrackedResourceList) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "nextLink", d.NextLink)
}

type DppWorkerRequest struct {
	CultureInfo *string `json:"cultureInfo,omitempty"`
	HTTPMethod  *string `json:"httpMethod,omitempty"`

	// Dictionary of
	Headers map[string][]*string `json:"headers,omitempty"`

	// Dictionary of
	Parameters             map[string]*string `json:"parameters,omitempty"`
	SubscriptionID         *string            `json:"subscriptionId,omitempty"`
	SupportedGroupVersions []*string          `json:"supportedGroupVersions,omitempty"`
	URI                    *string            `json:"uri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DppWorkerRequest.
func (d DppWorkerRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DppWorkerRequest) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "cultureInfo", d.CultureInfo)
	populate(objectMap, "httpMethod", d.HTTPMethod)
	populate(objectMap, "headers", d.Headers)
	populate(objectMap, "parameters", d.Parameters)
	populate(objectMap, "subscriptionId", d.SubscriptionID)
	populate(objectMap, "supportedGroupVersions", d.SupportedGroupVersions)
	populate(objectMap, "uri", d.URI)
}

// Error - The resource management error response.
type Error struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*Error `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ExportJobsBeginTriggerOptions contains the optional parameters for the ExportJobs.BeginTrigger method.
type ExportJobsBeginTriggerOptions struct {
	// placeholder for future optional parameters
}

// ExportJobsOperationResultGetOptions contains the optional parameters for the ExportJobsOperationResult.Get method.
type ExportJobsOperationResultGetOptions struct {
	// placeholder for future optional parameters
}

// ExportJobsResult - The result for export jobs containing blob details.
type ExportJobsResult struct {
	// READ-ONLY; SAS key to access the blob.
	BlobSasKey *string `json:"blobSasKey,omitempty" azure:"ro"`

	// READ-ONLY; URL of the blob into which the serialized string of list of jobs is exported.
	BlobURL *string `json:"blobUrl,omitempty" azure:"ro"`

	// READ-ONLY; SAS key to access the ExcelFile blob.
	ExcelFileBlobSasKey *string `json:"excelFileBlobSasKey,omitempty" azure:"ro"`

	// READ-ONLY; URL of the blob into which the ExcelFile is uploaded.
	ExcelFileBlobURL *string `json:"excelFileBlobUrl,omitempty" azure:"ro"`
}

// FeatureValidationRequest - Base class for feature object
type FeatureValidationRequest struct {
	FeatureValidationRequestBase
	// backup support feature name.
	FeatureName *string `json:"featureName,omitempty"`

	// backup support feature type.
	FeatureType *FeatureType `json:"featureType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FeatureValidationRequest.
func (f FeatureValidationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	f.FeatureValidationRequestBase.marshalInternal(objectMap, "FeatureValidationRequest")
	populate(objectMap, "featureName", f.FeatureName)
	populate(objectMap, "featureType", f.FeatureType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FeatureValidationRequest.
func (f *FeatureValidationRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "featureName":
			err = unpopulate(val, &f.FeatureName)
			delete(rawMsg, key)
		case "featureType":
			err = unpopulate(val, &f.FeatureType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := f.FeatureValidationRequestBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// FeatureValidationRequestBaseClassification provides polymorphic access to related types.
// Call the interface's GetFeatureValidationRequestBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FeatureValidationRequest, *FeatureValidationRequestBase
type FeatureValidationRequestBaseClassification interface {
	// GetFeatureValidationRequestBase returns the FeatureValidationRequestBase content of the underlying type.
	GetFeatureValidationRequestBase() *FeatureValidationRequestBase
}

// FeatureValidationRequestBase - Base class for Backup Feature support
type FeatureValidationRequestBase struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetFeatureValidationRequestBase implements the FeatureValidationRequestBaseClassification interface for type FeatureValidationRequestBase.
func (f *FeatureValidationRequestBase) GetFeatureValidationRequestBase() *FeatureValidationRequestBase {
	return f
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FeatureValidationRequestBase.
func (f *FeatureValidationRequestBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return f.unmarshalInternal(rawMsg)
}

func (f FeatureValidationRequestBase) marshalInternal(objectMap map[string]interface{}, discValue string) {
	f.ObjectType = &discValue
	objectMap["objectType"] = f.ObjectType
}

func (f *FeatureValidationRequestBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &f.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// FeatureValidationResponse - Feature Validation Response
type FeatureValidationResponse struct {
	FeatureValidationResponseBase
	// backup support feature type.
	FeatureType *FeatureType `json:"featureType,omitempty"`

	// Response features
	Features []*SupportedFeature `json:"features,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FeatureValidationResponse.
func (f FeatureValidationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	f.FeatureValidationResponseBase.marshalInternal(objectMap, "FeatureValidationResponse")
	populate(objectMap, "featureType", f.FeatureType)
	populate(objectMap, "features", f.Features)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FeatureValidationResponse.
func (f *FeatureValidationResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "featureType":
			err = unpopulate(val, &f.FeatureType)
			delete(rawMsg, key)
		case "features":
			err = unpopulate(val, &f.Features)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := f.FeatureValidationResponseBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// FeatureValidationResponseBaseClassification provides polymorphic access to related types.
// Call the interface's GetFeatureValidationResponseBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *FeatureValidationResponse, *FeatureValidationResponseBase
type FeatureValidationResponseBaseClassification interface {
	// GetFeatureValidationResponseBase returns the FeatureValidationResponseBase content of the underlying type.
	GetFeatureValidationResponseBase() *FeatureValidationResponseBase
}

// FeatureValidationResponseBase - Base class for Backup Feature support
type FeatureValidationResponseBase struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetFeatureValidationResponseBase implements the FeatureValidationResponseBaseClassification interface for type FeatureValidationResponseBase.
func (f *FeatureValidationResponseBase) GetFeatureValidationResponseBase() *FeatureValidationResponseBase {
	return f
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FeatureValidationResponseBase.
func (f *FeatureValidationResponseBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return f.unmarshalInternal(rawMsg)
}

func (f FeatureValidationResponseBase) marshalInternal(objectMap map[string]interface{}, discValue string) {
	f.ObjectType = &discValue
	objectMap["objectType"] = f.ObjectType
}

func (f *FeatureValidationResponseBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &f.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ImmediateCopyOption - Immediate copy Option
type ImmediateCopyOption struct {
	CopyOption
}

// MarshalJSON implements the json.Marshaller interface for type ImmediateCopyOption.
func (i ImmediateCopyOption) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.CopyOption.marshalInternal(objectMap, "ImmediateCopyOption")
	return json.Marshal(objectMap)
}

// InnerError - Inner Error
type InnerError struct {
	// Any Key value pairs that can be provided to the client for additional verbose information.
	AdditionalInfo map[string]*string `json:"additionalInfo,omitempty"`

	// Unique code for this error
	Code *string `json:"code,omitempty"`

	// Child Inner Error, to allow Nesting.
	EmbeddedInnerError *InnerError `json:"embeddedInnerError,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InnerError.
func (i InnerError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", i.AdditionalInfo)
	populate(objectMap, "code", i.Code)
	populate(objectMap, "embeddedInnerError", i.EmbeddedInnerError)
	return json.Marshal(objectMap)
}

// ItemLevelRestoreCriteriaClassification provides polymorphic access to related types.
// Call the interface's GetItemLevelRestoreCriteria() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ItemLevelRestoreCriteria, *RangeBasedItemLevelRestoreCriteria
type ItemLevelRestoreCriteriaClassification interface {
	// GetItemLevelRestoreCriteria returns the ItemLevelRestoreCriteria content of the underlying type.
	GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria
}

// ItemLevelRestoreCriteria - Class to contain criteria for item level restore
type ItemLevelRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type ItemLevelRestoreCriteria.
func (i *ItemLevelRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria { return i }

// UnmarshalJSON implements the json.Unmarshaller interface for type ItemLevelRestoreCriteria.
func (i *ItemLevelRestoreCriteria) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return i.unmarshalInternal(rawMsg)
}

func (i ItemLevelRestoreCriteria) marshalInternal(objectMap map[string]interface{}, discValue string) {
	i.ObjectType = &discValue
	objectMap["objectType"] = i.ObjectType
}

func (i *ItemLevelRestoreCriteria) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &i.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ItemLevelRestoreTargetInfo - Restore target info for Item level restore operation
type ItemLevelRestoreTargetInfo struct {
	RestoreTargetInfoBase
	// REQUIRED; Information of target DS
	DatasourceInfo *Datasource `json:"datasourceInfo,omitempty"`

	// REQUIRED; Restore Criteria
	RestoreCriteria []ItemLevelRestoreCriteriaClassification `json:"restoreCriteria,omitempty"`

	// Credentials to use to authenticate with data source provider.
	DatasourceAuthCredentials AuthCredentialsClassification `json:"datasourceAuthCredentials,omitempty"`

	// Information of target DS Set
	DatasourceSetInfo *DatasourceSet `json:"datasourceSetInfo,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ItemLevelRestoreTargetInfo.
func (i ItemLevelRestoreTargetInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.RestoreTargetInfoBase.marshalInternal(objectMap, "ItemLevelRestoreTargetInfo")
	populate(objectMap, "datasourceAuthCredentials", i.DatasourceAuthCredentials)
	populate(objectMap, "datasourceInfo", i.DatasourceInfo)
	populate(objectMap, "datasourceSetInfo", i.DatasourceSetInfo)
	populate(objectMap, "restoreCriteria", i.RestoreCriteria)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ItemLevelRestoreTargetInfo.
func (i *ItemLevelRestoreTargetInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "datasourceAuthCredentials":
			i.DatasourceAuthCredentials, err = unmarshalAuthCredentialsClassification(val)
			delete(rawMsg, key)
		case "datasourceInfo":
			err = unpopulate(val, &i.DatasourceInfo)
			delete(rawMsg, key)
		case "datasourceSetInfo":
			err = unpopulate(val, &i.DatasourceSetInfo)
			delete(rawMsg, key)
		case "restoreCriteria":
			i.RestoreCriteria, err = unmarshalItemLevelRestoreCriteriaClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.RestoreTargetInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// JobExtendedInfo - Extended Information about the job
type JobExtendedInfo struct {
	// Job's Additional Details
	AdditionalDetails map[string]*string `json:"additionalDetails,omitempty"`

	// READ-ONLY; State of the Backup Instance
	BackupInstanceState *string `json:"backupInstanceState,omitempty" azure:"ro"`

	// READ-ONLY; Number of bytes transferred
	DataTransferredInBytes *float64 `json:"dataTransferredInBytes,omitempty" azure:"ro"`

	// READ-ONLY; Destination where restore is done
	RecoveryDestination *string `json:"recoveryDestination,omitempty" azure:"ro"`

	// READ-ONLY; Details of the Source Recovery Point
	SourceRecoverPoint *RestoreJobRecoveryPointDetails `json:"sourceRecoverPoint,omitempty" azure:"ro"`

	// READ-ONLY; List of Sub Tasks of the job
	SubTasks []*JobSubTask `json:"subTasks,omitempty" azure:"ro"`

	// READ-ONLY; Details of the Target Recovery Point
	TargetRecoverPoint *RestoreJobRecoveryPointDetails `json:"targetRecoverPoint,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type JobExtendedInfo.
func (j JobExtendedInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalDetails", j.AdditionalDetails)
	populate(objectMap, "backupInstanceState", j.BackupInstanceState)
	populate(objectMap, "dataTransferredInBytes", j.DataTransferredInBytes)
	populate(objectMap, "recoveryDestination", j.RecoveryDestination)
	populate(objectMap, "sourceRecoverPoint", j.SourceRecoverPoint)
	populate(objectMap, "subTasks", j.SubTasks)
	populate(objectMap, "targetRecoverPoint", j.TargetRecoverPoint)
	return json.Marshal(objectMap)
}

// JobSubTask - Details of Job's Sub Task
type JobSubTask struct {
	// REQUIRED; Task Id of the Sub Task
	TaskID *int32 `json:"taskId,omitempty"`

	// REQUIRED; Name of the Sub Task
	TaskName *string `json:"taskName,omitempty"`

	// REQUIRED; Status of the Sub Task
	TaskStatus *string `json:"taskStatus,omitempty"`

	// Additional details of Sub Tasks
	AdditionalDetails map[string]*string `json:"additionalDetails,omitempty"`

	// READ-ONLY; Progress of the Sub Task
	TaskProgress *string `json:"taskProgress,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type JobSubTask.
func (j JobSubTask) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalDetails", j.AdditionalDetails)
	populate(objectMap, "taskId", j.TaskID)
	populate(objectMap, "taskName", j.TaskName)
	populate(objectMap, "taskProgress", j.TaskProgress)
	populate(objectMap, "taskStatus", j.TaskStatus)
	return json.Marshal(objectMap)
}

// JobsGetOptions contains the optional parameters for the Jobs.Get method.
type JobsGetOptions struct {
	// placeholder for future optional parameters
}

// JobsListOptions contains the optional parameters for the Jobs.List method.
type JobsListOptions struct {
	// placeholder for future optional parameters
}

// OperationExtendedInfoClassification provides polymorphic access to related types.
// Call the interface's GetOperationExtendedInfo() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *OperationExtendedInfo, *OperationJobExtendedInfo
type OperationExtendedInfoClassification interface {
	// GetOperationExtendedInfo returns the OperationExtendedInfo content of the underlying type.
	GetOperationExtendedInfo() *OperationExtendedInfo
}

// OperationExtendedInfo - Operation Extended Info
type OperationExtendedInfo struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	ObjectType *string `json:"objectType,omitempty"`
}

// GetOperationExtendedInfo implements the OperationExtendedInfoClassification interface for type OperationExtendedInfo.
func (o *OperationExtendedInfo) GetOperationExtendedInfo() *OperationExtendedInfo { return o }

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationExtendedInfo.
func (o *OperationExtendedInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return o.unmarshalInternal(rawMsg)
}

func (o OperationExtendedInfo) marshalInternal(objectMap map[string]interface{}, discValue string) {
	o.ObjectType = &discValue
	objectMap["objectType"] = o.ObjectType
}

func (o *OperationExtendedInfo) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &o.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// OperationJobExtendedInfo - Operation Job Extended Info
type OperationJobExtendedInfo struct {
	OperationExtendedInfo
	// Arm Id of the job created for this operation.
	JobID *string `json:"jobId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationJobExtendedInfo.
func (o OperationJobExtendedInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	o.OperationExtendedInfo.marshalInternal(objectMap, "OperationJobExtendedInfo")
	populate(objectMap, "jobId", o.JobID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationJobExtendedInfo.
func (o *OperationJobExtendedInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "jobId":
			err = unpopulate(val, &o.JobID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := o.OperationExtendedInfo.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// OperationResource - Operation Resource
type OperationResource struct {
	// End time of the operation
	EndTime *time.Time `json:"endTime,omitempty"`

	// Required if status == failed or status == canceled. This is the OData v4 error format, used by the RPC and will go into the v2.2 Azure REST API guidelines.
	// The full set of optional properties (e.g.
	// inner errors / details) can be found in the "Error Response" section.
	Error *Error `json:"error,omitempty"`

	// It should match what is used to GET the operation result
	ID *string `json:"id,omitempty"`

	// It must match the last segment of the "id" field, and will typically be a GUID / system generated value
	Name *string `json:"name,omitempty"`

	// End time of the operation
	Properties OperationExtendedInfoClassification `json:"properties,omitempty"`

	// Start time of the operation
	StartTime *time.Time `json:"startTime,omitempty"`
	Status    *string    `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationResource.
func (o OperationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", o.EndTime)
	populate(objectMap, "error", o.Error)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "properties", o.Properties)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationResource.
func (o *OperationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &o.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &o.Error)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &o.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		case "properties":
			o.Properties, err = unmarshalOperationExtendedInfoClassification(val)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// OperationResultGetOptions contains the optional parameters for the OperationResult.Get method.
type OperationResultGetOptions struct {
	// placeholder for future optional parameters
}

// OperationStatusGetOptions contains the optional parameters for the OperationStatus.Get method.
type OperationStatusGetOptions struct {
	// placeholder for future optional parameters
}

// PatchResourceRequestInput - Patch Request content for Microsoft.DataProtection resources
type PatchResourceRequestInput struct {
	// Input Managed Identity Details
	Identity *DppIdentityDetails `json:"identity,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PatchResourceRequestInput.
func (p PatchResourceRequestInput) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", p.Identity)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PolicyInfo - Policy Info in backupInstance
type PolicyInfo struct {
	// REQUIRED
	PolicyID *string `json:"policyId,omitempty"`

	// Policy parameters for the backup instance
	PolicyParameters *PolicyParameters `json:"policyParameters,omitempty"`

	// READ-ONLY
	PolicyVersion *string `json:"policyVersion,omitempty" azure:"ro"`
}

// PolicyParameters - Parameters in Policy
type PolicyParameters struct {
	// Gets or sets the DataStore Parameters
	DataStoreParametersList []DataStoreParametersClassification `json:"dataStoreParametersList,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PolicyParameters.
func (p PolicyParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataStoreParametersList", p.DataStoreParametersList)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyParameters.
func (p *PolicyParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataStoreParametersList":
			p.DataStoreParametersList, err = unmarshalDataStoreParametersClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProtectionStatusDetails - Protection status details
type ProtectionStatusDetails struct {
	// Specifies the protection status error of the resource
	ErrorDetails *UserFacingError `json:"errorDetails,omitempty"`

	// Specifies the protection status of the resource
	Status *Status `json:"status,omitempty"`
}

// RangeBasedItemLevelRestoreCriteria - Item Level target info for restore operation
type RangeBasedItemLevelRestoreCriteria struct {
	ItemLevelRestoreCriteria
	// maximum value for range prefix match
	MaxMatchingValue *string `json:"maxMatchingValue,omitempty"`

	// minimum value for range prefix match
	MinMatchingValue *string `json:"minMatchingValue,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RangeBasedItemLevelRestoreCriteria.
func (r RangeBasedItemLevelRestoreCriteria) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ItemLevelRestoreCriteria.marshalInternal(objectMap, "RangeBasedItemLevelRestoreCriteria")
	populate(objectMap, "maxMatchingValue", r.MaxMatchingValue)
	populate(objectMap, "minMatchingValue", r.MinMatchingValue)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RangeBasedItemLevelRestoreCriteria.
func (r *RangeBasedItemLevelRestoreCriteria) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "maxMatchingValue":
			err = unpopulate(val, &r.MaxMatchingValue)
			delete(rawMsg, key)
		case "minMatchingValue":
			err = unpopulate(val, &r.MinMatchingValue)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.ItemLevelRestoreCriteria.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RecoveryPointDataStoreDetails - RecoveryPoint datastore details
type RecoveryPointDataStoreDetails struct {
	CreationTime *time.Time `json:"creationTime,omitempty"`
	ExpiryTime   *time.Time `json:"expiryTime,omitempty"`
	ID           *string    `json:"id,omitempty"`
	MetaData     *string    `json:"metaData,omitempty"`
	State        *string    `json:"state,omitempty"`
	Type         *string    `json:"type,omitempty"`
	Visible      *bool      `json:"visible,omitempty"`

	// READ-ONLY
	RehydrationExpiryTime *time.Time `json:"rehydrationExpiryTime,omitempty" azure:"ro"`

	// READ-ONLY
	RehydrationStatus *RehydrationStatus `json:"rehydrationStatus,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecoveryPointDataStoreDetails.
func (r RecoveryPointDataStoreDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "creationTime", r.CreationTime)
	populateTimeRFC3339(objectMap, "expiryTime", r.ExpiryTime)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "metaData", r.MetaData)
	populateTimeRFC3339(objectMap, "rehydrationExpiryTime", r.RehydrationExpiryTime)
	populate(objectMap, "rehydrationStatus", r.RehydrationStatus)
	populate(objectMap, "state", r.State)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "visible", r.Visible)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecoveryPointDataStoreDetails.
func (r *RecoveryPointDataStoreDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationTime":
			err = unpopulateTimeRFC3339(val, &r.CreationTime)
			delete(rawMsg, key)
		case "expiryTime":
			err = unpopulateTimeRFC3339(val, &r.ExpiryTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &r.ID)
			delete(rawMsg, key)
		case "metaData":
			err = unpopulate(val, &r.MetaData)
			delete(rawMsg, key)
		case "rehydrationExpiryTime":
			err = unpopulateTimeRFC3339(val, &r.RehydrationExpiryTime)
			delete(rawMsg, key)
		case "rehydrationStatus":
			err = unpopulate(val, &r.RehydrationStatus)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &r.State)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &r.Type)
			delete(rawMsg, key)
		case "visible":
			err = unpopulate(val, &r.Visible)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type RecoveryPointsFilters struct {
	EndDate                 *string `json:"endDate,omitempty"`
	ExtendedInfo            *bool   `json:"extendedInfo,omitempty"`
	IsVisible               *bool   `json:"isVisible,omitempty"`
	RestorePointDataStoreID *string `json:"restorePointDataStoreId,omitempty"`
	RestorePointState       *string `json:"restorePointState,omitempty"`
	StartDate               *string `json:"startDate,omitempty"`
}

// RecoveryPointsGetOptions contains the optional parameters for the RecoveryPoints.Get method.
type RecoveryPointsGetOptions struct {
	// placeholder for future optional parameters
}

// RecoveryPointsListOptions contains the optional parameters for the RecoveryPoints.List method.
type RecoveryPointsListOptions struct {
	// OData filter options.
	Filter *string
	// skipToken Filter.
	SkipToken *string
}

type ResourceGuard struct {
	// READ-ONLY; This flag indicates whether auto approval is allowed or not.
	AllowAutoApprovals *bool `json:"allowAutoApprovals,omitempty" azure:"ro"`

	// READ-ONLY; Description about the pre-req steps to perform all the critical operations.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the BackupVault resource
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; {readonly} List of operation details those are protected by the ResourceGuard resource
	ResourceGuardOperations []*ResourceGuardOperation `json:"resourceGuardOperations,omitempty" azure:"ro"`

	// READ-ONLY; List of critical operations which are not protected by this resourceGuard
	VaultCriticalOperationExclusionList []*string `json:"vaultCriticalOperationExclusionList,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceGuard.
func (r ResourceGuard) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowAutoApprovals", r.AllowAutoApprovals)
	populate(objectMap, "description", r.Description)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "resourceGuardOperations", r.ResourceGuardOperations)
	populate(objectMap, "vaultCriticalOperationExclusionList", r.VaultCriticalOperationExclusionList)
	return json.Marshal(objectMap)
}

// ResourceGuardOperation - This class contains all the details about a critical operation.
type ResourceGuardOperation struct {
	// READ-ONLY; Type of resource request.
	RequestResourceType *string `json:"requestResourceType,omitempty" azure:"ro"`

	// READ-ONLY; Name of the critical operation.
	VaultCriticalOperation *string `json:"vaultCriticalOperation,omitempty" azure:"ro"`
}

type ResourceGuardResource struct {
	DppTrackedResource
	// ResourceGuardResource properties
	Properties *ResourceGuard `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceGuardResource.
func (r ResourceGuardResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.DppTrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// ResourceGuardResourceList - List of ResourceGuard resources
type ResourceGuardResourceList struct {
	DppTrackedResourceList
	// List of resources.
	Value []*ResourceGuardResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceGuardResourceList.
func (r ResourceGuardResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.DppTrackedResourceList.marshalInternal(objectMap)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceGuardsDeleteOptions contains the optional parameters for the ResourceGuards.Delete method.
type ResourceGuardsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetBackupSecurityPINRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetBackupSecurityPINRequestsObjects
// method.
type ResourceGuardsGetBackupSecurityPINRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultBackupSecurityPINRequestsObject
// method.
type ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultDeleteProtectedItemRequestsObject
// method.
type ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultDeleteResourceGuardProxyRequestsObject
// method.
type ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultDisableSoftDeleteRequestsObject
// method.
type ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultUpdateProtectedItemRequestsObject
// method.
type ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectOptions contains the optional parameters for the ResourceGuards.GetDefaultUpdateProtectionPolicyRequestsObject
// method.
type ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDeleteProtectedItemRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetDeleteProtectedItemRequestsObjects
// method.
type ResourceGuardsGetDeleteProtectedItemRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetDeleteResourceGuardProxyRequestsObjects
// method.
type ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetDisableSoftDeleteRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetDisableSoftDeleteRequestsObjects
// method.
type ResourceGuardsGetDisableSoftDeleteRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetOptions contains the optional parameters for the ResourceGuards.Get method.
type ResourceGuardsGetOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetResourcesInResourceGroupOptions contains the optional parameters for the ResourceGuards.GetResourcesInResourceGroup method.
type ResourceGuardsGetResourcesInResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetResourcesInSubscriptionOptions contains the optional parameters for the ResourceGuards.GetResourcesInSubscription method.
type ResourceGuardsGetResourcesInSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetUpdateProtectedItemRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetUpdateProtectedItemRequestsObjects
// method.
type ResourceGuardsGetUpdateProtectedItemRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsOptions contains the optional parameters for the ResourceGuards.GetUpdateProtectionPolicyRequestsObjects
// method.
type ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsPatchOptions contains the optional parameters for the ResourceGuards.Patch method.
type ResourceGuardsPatchOptions struct {
	// placeholder for future optional parameters
}

// ResourceGuardsPutOptions contains the optional parameters for the ResourceGuards.Put method.
type ResourceGuardsPutOptions struct {
	// placeholder for future optional parameters
}

// ResourceMoveDetails will be returned in response to GetResource call from ARM
type ResourceMoveDetails struct {
	// Completion time in UTC of latest ResourceMove operation attempted. ISO 8601 format.
	CompletionTimeUTC *string `json:"completionTimeUtc,omitempty"`

	// CorrelationId of latest ResourceMove operation attempted
	OperationID *string `json:"operationId,omitempty"`

	// ARM resource path of source resource
	SourceResourcePath *string `json:"sourceResourcePath,omitempty"`

	// Start time in UTC of latest ResourceMove operation attempted. ISO 8601 format.
	StartTimeUTC *string `json:"startTimeUtc,omitempty"`

	// ARM resource path of target resource used in latest ResourceMove operation
	TargetResourcePath *string `json:"targetResourcePath,omitempty"`
}

type RestorableTimeRange struct {
	// REQUIRED; End time for the available restore range
	EndTime *string `json:"endTime,omitempty"`

	// REQUIRED; Start time for the available restore range
	StartTime  *string `json:"startTime,omitempty"`
	ObjectType *string `json:"objectType,omitempty"`
}

// RestorableTimeRangesFindOptions contains the optional parameters for the RestorableTimeRanges.Find method.
type RestorableTimeRangesFindOptions struct {
	// placeholder for future optional parameters
}

// RestoreFilesTargetInfo - Class encapsulating restore as files target parameters
type RestoreFilesTargetInfo struct {
	RestoreTargetInfoBase
	// REQUIRED; Destination of RestoreAsFiles operation, when destination is not a datasource
	TargetDetails *TargetDetails `json:"targetDetails,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreFilesTargetInfo.
func (r RestoreFilesTargetInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.RestoreTargetInfoBase.marshalInternal(objectMap, "RestoreFilesTargetInfo")
	populate(objectMap, "targetDetails", r.TargetDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreFilesTargetInfo.
func (r *RestoreFilesTargetInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "targetDetails":
			err = unpopulate(val, &r.TargetDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.RestoreTargetInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

type RestoreJobRecoveryPointDetails struct {
	RecoveryPointID   *string    `json:"recoveryPointID,omitempty"`
	RecoveryPointTime *time.Time `json:"recoveryPointTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreJobRecoveryPointDetails.
func (r RestoreJobRecoveryPointDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recoveryPointID", r.RecoveryPointID)
	populateTimeRFC3339(objectMap, "recoveryPointTime", r.RecoveryPointTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreJobRecoveryPointDetails.
func (r *RestoreJobRecoveryPointDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recoveryPointID":
			err = unpopulate(val, &r.RecoveryPointID)
			delete(rawMsg, key)
		case "recoveryPointTime":
			err = unpopulateTimeRFC3339(val, &r.RecoveryPointTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RestoreTargetInfo - Class encapsulating restore target parameters
type RestoreTargetInfo struct {
	RestoreTargetInfoBase
	// REQUIRED; Information of target DS
	DatasourceInfo *Datasource `json:"datasourceInfo,omitempty"`

	// Credentials to use to authenticate with data source provider.
	DatasourceAuthCredentials AuthCredentialsClassification `json:"datasourceAuthCredentials,omitempty"`

	// Information of target DS Set
	DatasourceSetInfo *DatasourceSet `json:"datasourceSetInfo,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreTargetInfo.
func (r RestoreTargetInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.RestoreTargetInfoBase.marshalInternal(objectMap, "RestoreTargetInfo")
	populate(objectMap, "datasourceAuthCredentials", r.DatasourceAuthCredentials)
	populate(objectMap, "datasourceInfo", r.DatasourceInfo)
	populate(objectMap, "datasourceSetInfo", r.DatasourceSetInfo)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreTargetInfo.
func (r *RestoreTargetInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "datasourceAuthCredentials":
			r.DatasourceAuthCredentials, err = unmarshalAuthCredentialsClassification(val)
			delete(rawMsg, key)
		case "datasourceInfo":
			err = unpopulate(val, &r.DatasourceInfo)
			delete(rawMsg, key)
		case "datasourceSetInfo":
			err = unpopulate(val, &r.DatasourceSetInfo)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.RestoreTargetInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RestoreTargetInfoBaseClassification provides polymorphic access to related types.
// Call the interface's GetRestoreTargetInfoBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ItemLevelRestoreTargetInfo, *RestoreFilesTargetInfo, *RestoreTargetInfo, *RestoreTargetInfoBase
type RestoreTargetInfoBaseClassification interface {
	// GetRestoreTargetInfoBase returns the RestoreTargetInfoBase content of the underlying type.
	GetRestoreTargetInfoBase() *RestoreTargetInfoBase
}

// RestoreTargetInfoBase - Base class common to RestoreTargetInfo and RestoreFilesTargetInfo
type RestoreTargetInfoBase struct {
	// REQUIRED; Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Recovery Option
	RecoveryOption *RecoveryOption `json:"recoveryOption,omitempty"`

	// Target Restore region
	RestoreLocation *string `json:"restoreLocation,omitempty"`
}

// GetRestoreTargetInfoBase implements the RestoreTargetInfoBaseClassification interface for type RestoreTargetInfoBase.
func (r *RestoreTargetInfoBase) GetRestoreTargetInfoBase() *RestoreTargetInfoBase { return r }

// UnmarshalJSON implements the json.Unmarshaller interface for type RestoreTargetInfoBase.
func (r *RestoreTargetInfoBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r RestoreTargetInfoBase) marshalInternal(objectMap map[string]interface{}, discValue string) {
	r.ObjectType = &discValue
	objectMap["objectType"] = r.ObjectType
	populate(objectMap, "recoveryOption", r.RecoveryOption)
	populate(objectMap, "restoreLocation", r.RestoreLocation)
}

func (r *RestoreTargetInfoBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &r.ObjectType)
			delete(rawMsg, key)
		case "recoveryOption":
			err = unpopulate(val, &r.RecoveryOption)
			delete(rawMsg, key)
		case "restoreLocation":
			err = unpopulate(val, &r.RestoreLocation)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RetentionTag - Retention tag
type RetentionTag struct {
	// REQUIRED; Retention Tag Name to relate it to retention rule.
	TagName *string `json:"tagName,omitempty"`

	// READ-ONLY; Retention Tag version.
	ETag *string `json:"eTag,omitempty" azure:"ro"`

	// READ-ONLY; Retention Tag version.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ScheduleBasedBackupCriteria - Schedule based backup criteria
type ScheduleBasedBackupCriteria struct {
	BackupCriteria
	// it contains absolute values like "AllBackup" / "FirstOfDay" / "FirstOfWeek" / "FirstOfMonth" and should be part of AbsoluteMarker enum
	AbsoluteCriteria []*AbsoluteMarker `json:"absoluteCriteria,omitempty"`

	// This is day of the month from 1 to 28 other wise last of month
	DaysOfMonth []*Day `json:"daysOfMonth,omitempty"`

	// It should be Sunday/Monday/T…./Saturday
	DaysOfTheWeek []*DayOfWeek `json:"daysOfTheWeek,omitempty"`

	// It should be January/February/……/December
	MonthsOfYear []*Month `json:"monthsOfYear,omitempty"`

	// List of schedule times for backup
	ScheduleTimes []*time.Time `json:"scheduleTimes,omitempty"`

	// It should be First/Second/Third/Fourth/Last
	WeeksOfTheMonth []*WeekNumber `json:"weeksOfTheMonth,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleBasedBackupCriteria.
func (s ScheduleBasedBackupCriteria) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.BackupCriteria.marshalInternal(objectMap, "ScheduleBasedBackupCriteria")
	populate(objectMap, "absoluteCriteria", s.AbsoluteCriteria)
	populate(objectMap, "daysOfMonth", s.DaysOfMonth)
	populate(objectMap, "daysOfTheWeek", s.DaysOfTheWeek)
	populate(objectMap, "monthsOfYear", s.MonthsOfYear)
	aux := make([]*timeRFC3339, len(s.ScheduleTimes), len(s.ScheduleTimes))
	for i := 0; i < len(s.ScheduleTimes); i++ {
		aux[i] = (*timeRFC3339)(s.ScheduleTimes[i])
	}
	populate(objectMap, "scheduleTimes", aux)
	populate(objectMap, "weeksOfTheMonth", s.WeeksOfTheMonth)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleBasedBackupCriteria.
func (s *ScheduleBasedBackupCriteria) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "absoluteCriteria":
			err = unpopulate(val, &s.AbsoluteCriteria)
			delete(rawMsg, key)
		case "daysOfMonth":
			err = unpopulate(val, &s.DaysOfMonth)
			delete(rawMsg, key)
		case "daysOfTheWeek":
			err = unpopulate(val, &s.DaysOfTheWeek)
			delete(rawMsg, key)
		case "monthsOfYear":
			err = unpopulate(val, &s.MonthsOfYear)
			delete(rawMsg, key)
		case "scheduleTimes":
			var aux []*timeRFC3339
			err = unpopulate(val, &aux)
			for _, au := range aux {
				s.ScheduleTimes = append(s.ScheduleTimes, (*time.Time)(au))
			}
			delete(rawMsg, key)
		case "weeksOfTheMonth":
			err = unpopulate(val, &s.WeeksOfTheMonth)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.BackupCriteria.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ScheduleBasedTriggerContext - Schedule based trigger context
type ScheduleBasedTriggerContext struct {
	TriggerContext
	// REQUIRED; Schedule for this backup
	Schedule *BackupSchedule `json:"schedule,omitempty"`

	// REQUIRED; List of tags that can be applicable for given schedule.
	TaggingCriteria []*TaggingCriteria `json:"taggingCriteria,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleBasedTriggerContext.
func (s ScheduleBasedTriggerContext) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TriggerContext.marshalInternal(objectMap, "ScheduleBasedTriggerContext")
	populate(objectMap, "schedule", s.Schedule)
	populate(objectMap, "taggingCriteria", s.TaggingCriteria)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduleBasedTriggerContext.
func (s *ScheduleBasedTriggerContext) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "schedule":
			err = unpopulate(val, &s.Schedule)
			delete(rawMsg, key)
		case "taggingCriteria":
			err = unpopulate(val, &s.TaggingCriteria)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TriggerContext.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SecretStoreBasedAuthCredentials - Secret store based authentication credentials.
type SecretStoreBasedAuthCredentials struct {
	AuthCredentials
	// Secret store resource
	SecretStoreResource *SecretStoreResource `json:"secretStoreResource,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretStoreBasedAuthCredentials.
func (s SecretStoreBasedAuthCredentials) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.AuthCredentials.marshalInternal(objectMap, "SecretStoreBasedAuthCredentials")
	populate(objectMap, "secretStoreResource", s.SecretStoreResource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretStoreBasedAuthCredentials.
func (s *SecretStoreBasedAuthCredentials) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "secretStoreResource":
			err = unpopulate(val, &s.SecretStoreResource)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.AuthCredentials.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SecretStoreResource - Class representing a secret store resource.
type SecretStoreResource struct {
	// REQUIRED; Gets or sets the type of secret store
	SecretStoreType *SecretStoreType `json:"secretStoreType,omitempty"`

	// Uri to get to the resource
	URI *string `json:"uri,omitempty"`
}

// SourceLifeCycle - Source LifeCycle
type SourceLifeCycle struct {
	// REQUIRED; Delete Option
	DeleteAfter DeleteOptionClassification `json:"deleteAfter,omitempty"`

	// REQUIRED; DataStoreInfo base
	SourceDataStore             *DataStoreInfoBase   `json:"sourceDataStore,omitempty"`
	TargetDataStoreCopySettings []*TargetCopySetting `json:"targetDataStoreCopySettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceLifeCycle.
func (s SourceLifeCycle) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deleteAfter", s.DeleteAfter)
	populate(objectMap, "sourceDataStore", s.SourceDataStore)
	populate(objectMap, "targetDataStoreCopySettings", s.TargetDataStoreCopySettings)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceLifeCycle.
func (s *SourceLifeCycle) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deleteAfter":
			s.DeleteAfter, err = unmarshalDeleteOptionClassification(val)
			delete(rawMsg, key)
		case "sourceDataStore":
			err = unpopulate(val, &s.SourceDataStore)
			delete(rawMsg, key)
		case "targetDataStoreCopySettings":
			err = unpopulate(val, &s.TargetDataStoreCopySettings)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StorageSetting - Storage setting
type StorageSetting struct {
	// Gets or sets the type of the datastore.
	DatastoreType *StorageSettingStoreTypes `json:"datastoreType,omitempty"`

	// Gets or sets the type.
	Type *StorageSettingTypes `json:"type,omitempty"`
}

// SupportedFeature - Elements class for feature request
type SupportedFeature struct {
	// support feature type.
	ExposureControlledFeatures []*string `json:"exposureControlledFeatures,omitempty"`

	// support feature type.
	FeatureName *string `json:"featureName,omitempty"`

	// feature support status
	SupportStatus *FeatureSupportStatus `json:"supportStatus,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SupportedFeature.
func (s SupportedFeature) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "exposureControlledFeatures", s.ExposureControlledFeatures)
	populate(objectMap, "featureName", s.FeatureName)
	populate(objectMap, "supportStatus", s.SupportStatus)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TaggingCriteria - Tagging criteria
type TaggingCriteria struct {
	// REQUIRED; Specifies if tag is default.
	IsDefault *bool `json:"isDefault,omitempty"`

	// REQUIRED; Retention tag information
	TagInfo *RetentionTag `json:"tagInfo,omitempty"`

	// REQUIRED; Retention Tag priority.
	TaggingPriority *int64 `json:"taggingPriority,omitempty"`

	// Criteria which decides whether the tag can be applied to a triggered backup.
	Criteria []BackupCriteriaClassification `json:"criteria,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TaggingCriteria.
func (t TaggingCriteria) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "criteria", t.Criteria)
	populate(objectMap, "isDefault", t.IsDefault)
	populate(objectMap, "tagInfo", t.TagInfo)
	populate(objectMap, "taggingPriority", t.TaggingPriority)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TaggingCriteria.
func (t *TaggingCriteria) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "criteria":
			t.Criteria, err = unmarshalBackupCriteriaClassificationArray(val)
			delete(rawMsg, key)
		case "isDefault":
			err = unpopulate(val, &t.IsDefault)
			delete(rawMsg, key)
		case "tagInfo":
			err = unpopulate(val, &t.TagInfo)
			delete(rawMsg, key)
		case "taggingPriority":
			err = unpopulate(val, &t.TaggingPriority)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TargetCopySetting - Target copy settings
type TargetCopySetting struct {
	// REQUIRED; It can be CustomCopyOption or ImmediateCopyOption.
	CopyAfter CopyOptionClassification `json:"copyAfter,omitempty"`

	// REQUIRED; Info of target datastore
	DataStore *DataStoreInfoBase `json:"dataStore,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TargetCopySetting.
func (t TargetCopySetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "copyAfter", t.CopyAfter)
	populate(objectMap, "dataStore", t.DataStore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TargetCopySetting.
func (t *TargetCopySetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "copyAfter":
			t.CopyAfter, err = unmarshalCopyOptionClassification(val)
			delete(rawMsg, key)
		case "dataStore":
			err = unpopulate(val, &t.DataStore)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TargetDetails - Class encapsulating target details, used where the destination is not a datasource
type TargetDetails struct {
	// REQUIRED; Restore operation may create multiple files inside location pointed by Url Below will be the common prefix for all of them
	FilePrefix *string `json:"filePrefix,omitempty"`

	// REQUIRED; Denotes the target location where the data will be restored, string value for the enum {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}
	RestoreTargetLocationType *RestoreTargetLocationType `json:"restoreTargetLocationType,omitempty"`

	// REQUIRED; Url denoting the restore destination. It can point to container / file share etc
	URL *string `json:"url,omitempty"`
}

// TriggerBackupRequest - Trigger backup request
type TriggerBackupRequest struct {
	// REQUIRED; Name for the Rule of the Policy which needs to be applied for this backup
	BackupRuleOptions *AdHocBackupRuleOptions `json:"backupRuleOptions,omitempty"`
}

// TriggerContextClassification provides polymorphic access to related types.
// Call the interface's GetTriggerContext() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AdhocBasedTriggerContext, *ScheduleBasedTriggerContext, *TriggerContext
type TriggerContextClassification interface {
	// GetTriggerContext returns the TriggerContext content of the underlying type.
	GetTriggerContext() *TriggerContext
}

// TriggerContext - Trigger context
type TriggerContext struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetTriggerContext implements the TriggerContextClassification interface for type TriggerContext.
func (t *TriggerContext) GetTriggerContext() *TriggerContext { return t }

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggerContext.
func (t *TriggerContext) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TriggerContext) marshalInternal(objectMap map[string]interface{}, discValue string) {
	t.ObjectType = &discValue
	objectMap["objectType"] = t.ObjectType
}

func (t *TriggerContext) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "objectType":
			err = unpopulate(val, &t.ObjectType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UserFacingError - Error object used by layers that have access to localized content, and propagate that to user
type UserFacingError struct {
	// Unique code for this error
	Code *string `json:"code,omitempty"`

	// Additional related Errors
	Details []*UserFacingError `json:"details,omitempty"`

	// Inner Error
	InnerError *InnerError `json:"innerError,omitempty"`

	// Whether the operation will be retryable or not
	IsRetryable *bool `json:"isRetryable,omitempty"`

	// Whether the operation is due to a user error or service error
	IsUserError *bool   `json:"isUserError,omitempty"`
	Message     *string `json:"message,omitempty"`

	// Any key value pairs that can be injected inside error object
	Properties map[string]*string `json:"properties,omitempty"`

	// RecommendedAction � localized.
	RecommendedAction []*string `json:"recommendedAction,omitempty"`

	// Target of the error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UserFacingError.
func (u UserFacingError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", u.Code)
	populate(objectMap, "details", u.Details)
	populate(objectMap, "innerError", u.InnerError)
	populate(objectMap, "isRetryable", u.IsRetryable)
	populate(objectMap, "isUserError", u.IsUserError)
	populate(objectMap, "message", u.Message)
	populate(objectMap, "properties", u.Properties)
	populate(objectMap, "recommendedAction", u.RecommendedAction)
	populate(objectMap, "target", u.Target)
	return json.Marshal(objectMap)
}

// ValidateForBackupRequest - Validate for backup request
type ValidateForBackupRequest struct {
	// REQUIRED; Backup Instance
	BackupInstance *BackupInstance `json:"backupInstance,omitempty"`
}

// ValidateRestoreRequestObject - Validate restore request object
type ValidateRestoreRequestObject struct {
	// REQUIRED; Gets or sets the restore request object.
	RestoreRequestObject AzureBackupRestoreRequestClassification `json:"restoreRequestObject,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ValidateRestoreRequestObject.
func (v ValidateRestoreRequestObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "restoreRequestObject", v.RestoreRequestObject)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ValidateRestoreRequestObject.
func (v *ValidateRestoreRequestObject) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "restoreRequestObject":
			v.RestoreRequestObject, err = unmarshalAzureBackupRestoreRequestClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
