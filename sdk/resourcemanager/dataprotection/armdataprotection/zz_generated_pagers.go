//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// BackupInstancesListPager provides operations for iterating over paged responses.
type BackupInstancesListPager struct {
	client    *BackupInstancesClient
	current   BackupInstancesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupInstancesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupInstancesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupInstancesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupInstanceResourceList.NextLink == nil || len(*p.current.BackupInstanceResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupInstancesListResponse page.
func (p *BackupInstancesListPager) PageResponse() BackupInstancesListResponse {
	return p.current
}

// BackupPoliciesListPager provides operations for iterating over paged responses.
type BackupPoliciesListPager struct {
	client    *BackupPoliciesClient
	current   BackupPoliciesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupPoliciesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupPoliciesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BaseBackupPolicyResourceList.NextLink == nil || len(*p.current.BaseBackupPolicyResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupPoliciesListResponse page.
func (p *BackupPoliciesListPager) PageResponse() BackupPoliciesListResponse {
	return p.current
}

// BackupVaultsGetInResourceGroupPager provides operations for iterating over paged responses.
type BackupVaultsGetInResourceGroupPager struct {
	client    *BackupVaultsClient
	current   BackupVaultsGetInResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupVaultsGetInResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupVaultsGetInResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupVaultsGetInResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupVaultResourceList.NextLink == nil || len(*p.current.BackupVaultResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getInResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.getInResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupVaultsGetInResourceGroupResponse page.
func (p *BackupVaultsGetInResourceGroupPager) PageResponse() BackupVaultsGetInResourceGroupResponse {
	return p.current
}

// BackupVaultsGetInSubscriptionPager provides operations for iterating over paged responses.
type BackupVaultsGetInSubscriptionPager struct {
	client    *BackupVaultsClient
	current   BackupVaultsGetInSubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupVaultsGetInSubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupVaultsGetInSubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupVaultsGetInSubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupVaultResourceList.NextLink == nil || len(*p.current.BackupVaultResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getInSubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.getInSubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupVaultsGetInSubscriptionResponse page.
func (p *BackupVaultsGetInSubscriptionPager) PageResponse() BackupVaultsGetInSubscriptionResponse {
	return p.current
}

// DataProtectionOperationsListPager provides operations for iterating over paged responses.
type DataProtectionOperationsListPager struct {
	client    *DataProtectionOperationsClient
	current   DataProtectionOperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataProtectionOperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataProtectionOperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataProtectionOperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClientDiscoveryResponse.NextLink == nil || len(*p.current.ClientDiscoveryResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataProtectionOperationsListResponse page.
func (p *DataProtectionOperationsListPager) PageResponse() DataProtectionOperationsListResponse {
	return p.current
}

// JobsListPager provides operations for iterating over paged responses.
type JobsListPager struct {
	client    *JobsClient
	current   JobsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, JobsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *JobsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *JobsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureBackupJobResourceList.NextLink == nil || len(*p.current.AzureBackupJobResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current JobsListResponse page.
func (p *JobsListPager) PageResponse() JobsListResponse {
	return p.current
}

// RecoveryPointsListPager provides operations for iterating over paged responses.
type RecoveryPointsListPager struct {
	client    *RecoveryPointsClient
	current   RecoveryPointsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecoveryPointsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecoveryPointsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecoveryPointsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AzureBackupRecoveryPointResourceList.NextLink == nil || len(*p.current.AzureBackupRecoveryPointResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecoveryPointsListResponse page.
func (p *RecoveryPointsListPager) PageResponse() RecoveryPointsListResponse {
	return p.current
}

// ResourceGuardsGetBackupSecurityPINRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetBackupSecurityPINRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetBackupSecurityPINRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetBackupSecurityPINRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getBackupSecurityPINRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getBackupSecurityPINRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse page.
func (p *ResourceGuardsGetBackupSecurityPINRequestsObjectsPager) PageResponse() ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse {
	return p.current
}

// ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getDeleteProtectedItemRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getDeleteProtectedItemRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse page.
func (p *ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager) PageResponse() ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse {
	return p.current
}

// ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getDeleteResourceGuardProxyRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getDeleteResourceGuardProxyRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse page.
func (p *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager) PageResponse() ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse {
	return p.current
}

// ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getDisableSoftDeleteRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getDisableSoftDeleteRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse page.
func (p *ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager) PageResponse() ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse {
	return p.current
}

// ResourceGuardsGetResourcesInResourceGroupPager provides operations for iterating over paged responses.
type ResourceGuardsGetResourcesInResourceGroupPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetResourcesInResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetResourcesInResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetResourcesInResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetResourcesInResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceGuardResourceList.NextLink == nil || len(*p.current.ResourceGuardResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getResourcesInResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.getResourcesInResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetResourcesInResourceGroupResponse page.
func (p *ResourceGuardsGetResourcesInResourceGroupPager) PageResponse() ResourceGuardsGetResourcesInResourceGroupResponse {
	return p.current
}

// ResourceGuardsGetResourcesInSubscriptionPager provides operations for iterating over paged responses.
type ResourceGuardsGetResourcesInSubscriptionPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetResourcesInSubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetResourcesInSubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetResourcesInSubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetResourcesInSubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceGuardResourceList.NextLink == nil || len(*p.current.ResourceGuardResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getResourcesInSubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.getResourcesInSubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetResourcesInSubscriptionResponse page.
func (p *ResourceGuardsGetResourcesInSubscriptionPager) PageResponse() ResourceGuardsGetResourcesInSubscriptionResponse {
	return p.current
}

// ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getUpdateProtectedItemRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getUpdateProtectedItemRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse page.
func (p *ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager) PageResponse() ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse {
	return p.current
}

// ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager provides operations for iterating over paged responses.
type ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager struct {
	client    *ResourceGuardsClient
	current   ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DppBaseResourceList.NextLink == nil || len(*p.current.DppBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getUpdateProtectionPolicyRequestsObjectsHandleError(resp)
		return false
	}
	result, err := p.client.getUpdateProtectionPolicyRequestsObjectsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse page.
func (p *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager) PageResponse() ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse {
	return p.current
}
