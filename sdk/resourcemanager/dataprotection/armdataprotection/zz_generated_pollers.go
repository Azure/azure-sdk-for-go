//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// BackupInstancesAdhocBackupPoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesAdhocBackupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesAdhocBackupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesAdhocBackupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesAdhocBackupResponse will be returned.
func (p *BackupInstancesAdhocBackupPoller) FinalResponse(ctx context.Context) (BackupInstancesAdhocBackupResponse, error) {
	respType := BackupInstancesAdhocBackupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationJobExtendedInfo)
	if err != nil {
		return BackupInstancesAdhocBackupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesAdhocBackupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesCreateOrUpdateResponse will be returned.
func (p *BackupInstancesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (BackupInstancesCreateOrUpdateResponse, error) {
	respType := BackupInstancesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BackupInstanceResource)
	if err != nil {
		return BackupInstancesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesDeletePoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesDeleteResponse will be returned.
func (p *BackupInstancesDeletePoller) FinalResponse(ctx context.Context) (BackupInstancesDeleteResponse, error) {
	respType := BackupInstancesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return BackupInstancesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesTriggerRehydratePoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesTriggerRehydratePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesTriggerRehydratePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesTriggerRehydratePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesTriggerRehydrateResponse will be returned.
func (p *BackupInstancesTriggerRehydratePoller) FinalResponse(ctx context.Context) (BackupInstancesTriggerRehydrateResponse, error) {
	respType := BackupInstancesTriggerRehydrateResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return BackupInstancesTriggerRehydrateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesTriggerRehydratePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesTriggerRestorePoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesTriggerRestorePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesTriggerRestorePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesTriggerRestorePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesTriggerRestoreResponse will be returned.
func (p *BackupInstancesTriggerRestorePoller) FinalResponse(ctx context.Context) (BackupInstancesTriggerRestoreResponse, error) {
	respType := BackupInstancesTriggerRestoreResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationJobExtendedInfo)
	if err != nil {
		return BackupInstancesTriggerRestoreResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesTriggerRestorePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesValidateForBackupPoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesValidateForBackupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesValidateForBackupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesValidateForBackupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesValidateForBackupResponse will be returned.
func (p *BackupInstancesValidateForBackupPoller) FinalResponse(ctx context.Context) (BackupInstancesValidateForBackupResponse, error) {
	respType := BackupInstancesValidateForBackupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationJobExtendedInfo)
	if err != nil {
		return BackupInstancesValidateForBackupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesValidateForBackupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupInstancesValidateForRestorePoller provides polling facilities until the operation reaches a terminal state.
type BackupInstancesValidateForRestorePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupInstancesValidateForRestorePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupInstancesValidateForRestorePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupInstancesValidateForRestoreResponse will be returned.
func (p *BackupInstancesValidateForRestorePoller) FinalResponse(ctx context.Context) (BackupInstancesValidateForRestoreResponse, error) {
	respType := BackupInstancesValidateForRestoreResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationJobExtendedInfo)
	if err != nil {
		return BackupInstancesValidateForRestoreResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupInstancesValidateForRestorePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupVaultsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type BackupVaultsCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupVaultsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupVaultsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupVaultsCreateOrUpdateResponse will be returned.
func (p *BackupVaultsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (BackupVaultsCreateOrUpdateResponse, error) {
	respType := BackupVaultsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BackupVaultResource)
	if err != nil {
		return BackupVaultsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupVaultsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// BackupVaultsUpdatePoller provides polling facilities until the operation reaches a terminal state.
type BackupVaultsUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *BackupVaultsUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *BackupVaultsUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final BackupVaultsUpdateResponse will be returned.
func (p *BackupVaultsUpdatePoller) FinalResponse(ctx context.Context) (BackupVaultsUpdateResponse, error) {
	respType := BackupVaultsUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.BackupVaultResource)
	if err != nil {
		return BackupVaultsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *BackupVaultsUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ExportJobsTriggerPoller provides polling facilities until the operation reaches a terminal state.
type ExportJobsTriggerPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ExportJobsTriggerPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ExportJobsTriggerPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ExportJobsTriggerResponse will be returned.
func (p *ExportJobsTriggerPoller) FinalResponse(ctx context.Context) (ExportJobsTriggerResponse, error) {
	respType := ExportJobsTriggerResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ExportJobsTriggerResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ExportJobsTriggerPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
