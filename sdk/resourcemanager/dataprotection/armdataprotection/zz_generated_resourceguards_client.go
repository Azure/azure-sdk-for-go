//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdataprotection

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ResourceGuardsClient contains the methods for the ResourceGuards group.
// Don't use this type directly, use NewResourceGuardsClient() instead.
type ResourceGuardsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewResourceGuardsClient creates a new instance of ResourceGuardsClient with the specified values.
func NewResourceGuardsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ResourceGuardsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ResourceGuardsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Delete - Deletes a ResourceGuard resource from the resource group.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) Delete(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsDeleteOptions) (ResourceGuardsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
	if err != nil {
		return ResourceGuardsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ResourceGuardsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return ResourceGuardsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ResourceGuardsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ResourceGuardsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Returns a ResourceGuard belonging to a resource group.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) Get(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetOptions) (ResourceGuardsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
	if err != nil {
		return ResourceGuardsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ResourceGuardsClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ResourceGuardsClient) getHandleResponse(resp *http.Response) (ResourceGuardsGetResponse, error) {
	result := ResourceGuardsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardResource); err != nil {
		return ResourceGuardsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ResourceGuardsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBackupSecurityPINRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetBackupSecurityPINRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetBackupSecurityPINRequestsObjectsOptions) *ResourceGuardsGetBackupSecurityPINRequestsObjectsPager {
	return &ResourceGuardsGetBackupSecurityPINRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getBackupSecurityPINRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getBackupSecurityPINRequestsObjectsCreateRequest creates the GetBackupSecurityPINRequestsObjects request.
func (client *ResourceGuardsClient) getBackupSecurityPINRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetBackupSecurityPINRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBackupSecurityPINRequestsObjectsHandleResponse handles the GetBackupSecurityPINRequestsObjects response.
func (client *ResourceGuardsClient) getBackupSecurityPINRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse, error) {
	result := ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetBackupSecurityPINRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBackupSecurityPINRequestsObjectsHandleError handles the GetBackupSecurityPINRequestsObjects error response.
func (client *ResourceGuardsClient) getBackupSecurityPINRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultBackupSecurityPINRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultBackupSecurityPINRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectOptions) (ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse, error) {
	req, err := client.getDefaultBackupSecurityPINRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse{}, client.getDefaultBackupSecurityPINRequestsObjectHandleError(resp)
	}
	return client.getDefaultBackupSecurityPINRequestsObjectHandleResponse(resp)
}

// getDefaultBackupSecurityPINRequestsObjectCreateRequest creates the GetDefaultBackupSecurityPINRequestsObject request.
func (client *ResourceGuardsClient) getDefaultBackupSecurityPINRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultBackupSecurityPINRequestsObjectHandleResponse handles the GetDefaultBackupSecurityPINRequestsObject response.
func (client *ResourceGuardsClient) getDefaultBackupSecurityPINRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultBackupSecurityPINRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultBackupSecurityPINRequestsObjectHandleError handles the GetDefaultBackupSecurityPINRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultBackupSecurityPINRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultDeleteProtectedItemRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultDeleteProtectedItemRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectOptions) (ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse, error) {
	req, err := client.getDefaultDeleteProtectedItemRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse{}, client.getDefaultDeleteProtectedItemRequestsObjectHandleError(resp)
	}
	return client.getDefaultDeleteProtectedItemRequestsObjectHandleResponse(resp)
}

// getDefaultDeleteProtectedItemRequestsObjectCreateRequest creates the GetDefaultDeleteProtectedItemRequestsObject request.
func (client *ResourceGuardsClient) getDefaultDeleteProtectedItemRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteProtectedItemRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultDeleteProtectedItemRequestsObjectHandleResponse handles the GetDefaultDeleteProtectedItemRequestsObject response.
func (client *ResourceGuardsClient) getDefaultDeleteProtectedItemRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultDeleteProtectedItemRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultDeleteProtectedItemRequestsObjectHandleError handles the GetDefaultDeleteProtectedItemRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultDeleteProtectedItemRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultDeleteResourceGuardProxyRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultDeleteResourceGuardProxyRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectOptions) (ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse, error) {
	req, err := client.getDefaultDeleteResourceGuardProxyRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse{}, client.getDefaultDeleteResourceGuardProxyRequestsObjectHandleError(resp)
	}
	return client.getDefaultDeleteResourceGuardProxyRequestsObjectHandleResponse(resp)
}

// getDefaultDeleteResourceGuardProxyRequestsObjectCreateRequest creates the GetDefaultDeleteResourceGuardProxyRequestsObject request.
func (client *ResourceGuardsClient) getDefaultDeleteResourceGuardProxyRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteResourceGuardProxyRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultDeleteResourceGuardProxyRequestsObjectHandleResponse handles the GetDefaultDeleteResourceGuardProxyRequestsObject response.
func (client *ResourceGuardsClient) getDefaultDeleteResourceGuardProxyRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultDeleteResourceGuardProxyRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultDeleteResourceGuardProxyRequestsObjectHandleError handles the GetDefaultDeleteResourceGuardProxyRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultDeleteResourceGuardProxyRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultDisableSoftDeleteRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultDisableSoftDeleteRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectOptions) (ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse, error) {
	req, err := client.getDefaultDisableSoftDeleteRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse{}, client.getDefaultDisableSoftDeleteRequestsObjectHandleError(resp)
	}
	return client.getDefaultDisableSoftDeleteRequestsObjectHandleResponse(resp)
}

// getDefaultDisableSoftDeleteRequestsObjectCreateRequest creates the GetDefaultDisableSoftDeleteRequestsObject request.
func (client *ResourceGuardsClient) getDefaultDisableSoftDeleteRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/disableSoftDeleteRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultDisableSoftDeleteRequestsObjectHandleResponse handles the GetDefaultDisableSoftDeleteRequestsObject response.
func (client *ResourceGuardsClient) getDefaultDisableSoftDeleteRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultDisableSoftDeleteRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultDisableSoftDeleteRequestsObjectHandleError handles the GetDefaultDisableSoftDeleteRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultDisableSoftDeleteRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultUpdateProtectedItemRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultUpdateProtectedItemRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectOptions) (ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse, error) {
	req, err := client.getDefaultUpdateProtectedItemRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse{}, client.getDefaultUpdateProtectedItemRequestsObjectHandleError(resp)
	}
	return client.getDefaultUpdateProtectedItemRequestsObjectHandleResponse(resp)
}

// getDefaultUpdateProtectedItemRequestsObjectCreateRequest creates the GetDefaultUpdateProtectedItemRequestsObject request.
func (client *ResourceGuardsClient) getDefaultUpdateProtectedItemRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectedItemRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultUpdateProtectedItemRequestsObjectHandleResponse handles the GetDefaultUpdateProtectedItemRequestsObject response.
func (client *ResourceGuardsClient) getDefaultUpdateProtectedItemRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultUpdateProtectedItemRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultUpdateProtectedItemRequestsObjectHandleError handles the GetDefaultUpdateProtectedItemRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultUpdateProtectedItemRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDefaultUpdateProtectionPolicyRequestsObject - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDefaultUpdateProtectionPolicyRequestsObject(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectOptions) (ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse, error) {
	req, err := client.getDefaultUpdateProtectionPolicyRequestsObjectCreateRequest(ctx, resourceGroupName, resourceGuardsName, requestName, options)
	if err != nil {
		return ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse{}, client.getDefaultUpdateProtectionPolicyRequestsObjectHandleError(resp)
	}
	return client.getDefaultUpdateProtectionPolicyRequestsObjectHandleResponse(resp)
}

// getDefaultUpdateProtectionPolicyRequestsObjectCreateRequest creates the GetDefaultUpdateProtectionPolicyRequestsObject request.
func (client *ResourceGuardsClient) getDefaultUpdateProtectionPolicyRequestsObjectCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, requestName string, options *ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectionPolicyRequests/{requestName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	if requestName == "" {
		return nil, errors.New("parameter requestName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{requestName}", url.PathEscape(requestName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDefaultUpdateProtectionPolicyRequestsObjectHandleResponse handles the GetDefaultUpdateProtectionPolicyRequestsObject response.
func (client *ResourceGuardsClient) getDefaultUpdateProtectionPolicyRequestsObjectHandleResponse(resp *http.Response) (ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse, error) {
	result := ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResource); err != nil {
		return ResourceGuardsGetDefaultUpdateProtectionPolicyRequestsObjectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDefaultUpdateProtectionPolicyRequestsObjectHandleError handles the GetDefaultUpdateProtectionPolicyRequestsObject error response.
func (client *ResourceGuardsClient) getDefaultUpdateProtectionPolicyRequestsObjectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDeleteProtectedItemRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDeleteProtectedItemRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDeleteProtectedItemRequestsObjectsOptions) *ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager {
	return &ResourceGuardsGetDeleteProtectedItemRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getDeleteProtectedItemRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getDeleteProtectedItemRequestsObjectsCreateRequest creates the GetDeleteProtectedItemRequestsObjects request.
func (client *ResourceGuardsClient) getDeleteProtectedItemRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDeleteProtectedItemRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteProtectedItemRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDeleteProtectedItemRequestsObjectsHandleResponse handles the GetDeleteProtectedItemRequestsObjects response.
func (client *ResourceGuardsClient) getDeleteProtectedItemRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse, error) {
	result := ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetDeleteProtectedItemRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDeleteProtectedItemRequestsObjectsHandleError handles the GetDeleteProtectedItemRequestsObjects error response.
func (client *ResourceGuardsClient) getDeleteProtectedItemRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDeleteResourceGuardProxyRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDeleteResourceGuardProxyRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsOptions) *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager {
	return &ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getDeleteResourceGuardProxyRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getDeleteResourceGuardProxyRequestsObjectsCreateRequest creates the GetDeleteResourceGuardProxyRequestsObjects request.
func (client *ResourceGuardsClient) getDeleteResourceGuardProxyRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteResourceGuardProxyRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDeleteResourceGuardProxyRequestsObjectsHandleResponse handles the GetDeleteResourceGuardProxyRequestsObjects response.
func (client *ResourceGuardsClient) getDeleteResourceGuardProxyRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse, error) {
	result := ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetDeleteResourceGuardProxyRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDeleteResourceGuardProxyRequestsObjectsHandleError handles the GetDeleteResourceGuardProxyRequestsObjects error response.
func (client *ResourceGuardsClient) getDeleteResourceGuardProxyRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDisableSoftDeleteRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetDisableSoftDeleteRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDisableSoftDeleteRequestsObjectsOptions) *ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager {
	return &ResourceGuardsGetDisableSoftDeleteRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getDisableSoftDeleteRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getDisableSoftDeleteRequestsObjectsCreateRequest creates the GetDisableSoftDeleteRequestsObjects request.
func (client *ResourceGuardsClient) getDisableSoftDeleteRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetDisableSoftDeleteRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/disableSoftDeleteRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDisableSoftDeleteRequestsObjectsHandleResponse handles the GetDisableSoftDeleteRequestsObjects response.
func (client *ResourceGuardsClient) getDisableSoftDeleteRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse, error) {
	result := ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetDisableSoftDeleteRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDisableSoftDeleteRequestsObjectsHandleError handles the GetDisableSoftDeleteRequestsObjects error response.
func (client *ResourceGuardsClient) getDisableSoftDeleteRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetResourcesInResourceGroup - Returns ResourceGuards collection belonging to a ResourceGroup.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetResourcesInResourceGroup(resourceGroupName string, options *ResourceGuardsGetResourcesInResourceGroupOptions) *ResourceGuardsGetResourcesInResourceGroupPager {
	return &ResourceGuardsGetResourcesInResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getResourcesInResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetResourcesInResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ResourceGuardResourceList.NextLink)
		},
	}
}

// getResourcesInResourceGroupCreateRequest creates the GetResourcesInResourceGroup request.
func (client *ResourceGuardsClient) getResourcesInResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *ResourceGuardsGetResourcesInResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getResourcesInResourceGroupHandleResponse handles the GetResourcesInResourceGroup response.
func (client *ResourceGuardsClient) getResourcesInResourceGroupHandleResponse(resp *http.Response) (ResourceGuardsGetResourcesInResourceGroupResponse, error) {
	result := ResourceGuardsGetResourcesInResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardResourceList); err != nil {
		return ResourceGuardsGetResourcesInResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getResourcesInResourceGroupHandleError handles the GetResourcesInResourceGroup error response.
func (client *ResourceGuardsClient) getResourcesInResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetResourcesInSubscription - Returns ResourceGuards collection belonging to a subscription.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetResourcesInSubscription(options *ResourceGuardsGetResourcesInSubscriptionOptions) *ResourceGuardsGetResourcesInSubscriptionPager {
	return &ResourceGuardsGetResourcesInSubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getResourcesInSubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetResourcesInSubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ResourceGuardResourceList.NextLink)
		},
	}
}

// getResourcesInSubscriptionCreateRequest creates the GetResourcesInSubscription request.
func (client *ResourceGuardsClient) getResourcesInSubscriptionCreateRequest(ctx context.Context, options *ResourceGuardsGetResourcesInSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getResourcesInSubscriptionHandleResponse handles the GetResourcesInSubscription response.
func (client *ResourceGuardsClient) getResourcesInSubscriptionHandleResponse(resp *http.Response) (ResourceGuardsGetResourcesInSubscriptionResponse, error) {
	result := ResourceGuardsGetResourcesInSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardResourceList); err != nil {
		return ResourceGuardsGetResourcesInSubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getResourcesInSubscriptionHandleError handles the GetResourcesInSubscription error response.
func (client *ResourceGuardsClient) getResourcesInSubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetUpdateProtectedItemRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetUpdateProtectedItemRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetUpdateProtectedItemRequestsObjectsOptions) *ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager {
	return &ResourceGuardsGetUpdateProtectedItemRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getUpdateProtectedItemRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getUpdateProtectedItemRequestsObjectsCreateRequest creates the GetUpdateProtectedItemRequestsObjects request.
func (client *ResourceGuardsClient) getUpdateProtectedItemRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetUpdateProtectedItemRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectedItemRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getUpdateProtectedItemRequestsObjectsHandleResponse handles the GetUpdateProtectedItemRequestsObjects response.
func (client *ResourceGuardsClient) getUpdateProtectedItemRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse, error) {
	result := ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetUpdateProtectedItemRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getUpdateProtectedItemRequestsObjectsHandleError handles the GetUpdateProtectedItemRequestsObjects error response.
func (client *ResourceGuardsClient) getUpdateProtectedItemRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetUpdateProtectionPolicyRequestsObjects - Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
// resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) GetUpdateProtectionPolicyRequestsObjects(resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsOptions) *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager {
	return &ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getUpdateProtectionPolicyRequestsObjectsCreateRequest(ctx, resourceGroupName, resourceGuardsName, options)
		},
		advancer: func(ctx context.Context, resp ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DppBaseResourceList.NextLink)
		},
	}
}

// getUpdateProtectionPolicyRequestsObjectsCreateRequest creates the GetUpdateProtectionPolicyRequestsObjects request.
func (client *ResourceGuardsClient) getUpdateProtectionPolicyRequestsObjectsCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, options *ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectionPolicyRequests"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getUpdateProtectionPolicyRequestsObjectsHandleResponse handles the GetUpdateProtectionPolicyRequestsObjects response.
func (client *ResourceGuardsClient) getUpdateProtectionPolicyRequestsObjectsHandleResponse(resp *http.Response) (ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse, error) {
	result := ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DppBaseResourceList); err != nil {
		return ResourceGuardsGetUpdateProtectionPolicyRequestsObjectsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getUpdateProtectionPolicyRequestsObjectsHandleError handles the GetUpdateProtectionPolicyRequestsObjects error response.
func (client *ResourceGuardsClient) getUpdateProtectionPolicyRequestsObjectsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Patch - Updates a ResourceGuard resource belonging to a resource group. For example, updating tags for a resource.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) Patch(ctx context.Context, resourceGroupName string, resourceGuardsName string, parameters PatchResourceRequestInput, options *ResourceGuardsPatchOptions) (ResourceGuardsPatchResponse, error) {
	req, err := client.patchCreateRequest(ctx, resourceGroupName, resourceGuardsName, parameters, options)
	if err != nil {
		return ResourceGuardsPatchResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsPatchResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsPatchResponse{}, client.patchHandleError(resp)
	}
	return client.patchHandleResponse(resp)
}

// patchCreateRequest creates the Patch request.
func (client *ResourceGuardsClient) patchCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, parameters PatchResourceRequestInput, options *ResourceGuardsPatchOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// patchHandleResponse handles the Patch response.
func (client *ResourceGuardsClient) patchHandleResponse(resp *http.Response) (ResourceGuardsPatchResponse, error) {
	result := ResourceGuardsPatchResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardResource); err != nil {
		return ResourceGuardsPatchResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// patchHandleError handles the Patch error response.
func (client *ResourceGuardsClient) patchHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Put - Creates or updates a ResourceGuard resource belonging to a resource group.
// If the operation fails it returns the *CloudError error type.
func (client *ResourceGuardsClient) Put(ctx context.Context, resourceGroupName string, resourceGuardsName string, parameters ResourceGuardResource, options *ResourceGuardsPutOptions) (ResourceGuardsPutResponse, error) {
	req, err := client.putCreateRequest(ctx, resourceGroupName, resourceGuardsName, parameters, options)
	if err != nil {
		return ResourceGuardsPutResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGuardsPutResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGuardsPutResponse{}, client.putHandleError(resp)
	}
	return client.putHandleResponse(resp)
}

// putCreateRequest creates the Put request.
func (client *ResourceGuardsClient) putCreateRequest(ctx context.Context, resourceGroupName string, resourceGuardsName string, parameters ResourceGuardResource, options *ResourceGuardsPutOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGuardsName == "" {
		return nil, errors.New("parameter resourceGuardsName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGuardsName}", url.PathEscape(resourceGuardsName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// putHandleResponse handles the Put response.
func (client *ResourceGuardsClient) putHandleResponse(resp *http.Response) (ResourceGuardsPutResponse, error) {
	result := ResourceGuardsPutResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceGuardResource); err != nil {
		return ResourceGuardsPutResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// putHandleError handles the Put error response.
func (client *ResourceGuardsClient) putHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
