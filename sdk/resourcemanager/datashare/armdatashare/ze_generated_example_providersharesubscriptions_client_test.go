//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/datashare/armdatashare"
)

// x-ms-original-file: specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Adjust.json
func ExampleProviderShareSubscriptionsClient_Adjust() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatashare.NewProviderShareSubscriptionsClient("<subscription-id>", cred, nil)
	res, err := client.Adjust(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<share-name>",
		"<provider-share-subscription-id>",
		armdatashare.ProviderShareSubscription{
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ProviderShareSubscriptionsClientAdjustResult)
}

// x-ms-original-file: specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Reinstate.json
func ExampleProviderShareSubscriptionsClient_Reinstate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatashare.NewProviderShareSubscriptionsClient("<subscription-id>", cred, nil)
	res, err := client.Reinstate(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<share-name>",
		"<provider-share-subscription-id>",
		armdatashare.ProviderShareSubscription{
			Properties: &armdatashare.ProviderShareSubscriptionProperties{
				ExpirationDate: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-26T22:33:24.5785265Z"); return t }()),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ProviderShareSubscriptionsClientReinstateResult)
}

// x-ms-original-file: specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_Revoke.json
func ExampleProviderShareSubscriptionsClient_BeginRevoke() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatashare.NewProviderShareSubscriptionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRevoke(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<share-name>",
		"<provider-share-subscription-id>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ProviderShareSubscriptionsClientRevokeResult)
}

// x-ms-original-file: specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_GetByShare.json
func ExampleProviderShareSubscriptionsClient_GetByShare() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatashare.NewProviderShareSubscriptionsClient("<subscription-id>", cred, nil)
	res, err := client.GetByShare(ctx,
		"<resource-group-name>",
		"<account-name>",
		"<share-name>",
		"<provider-share-subscription-id>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ProviderShareSubscriptionsClientGetByShareResult)
}

// x-ms-original-file: specification/datashare/resource-manager/Microsoft.DataShare/stable/2020-09-01/examples/ProviderShareSubscriptions_ListByShare.json
func ExampleProviderShareSubscriptionsClient_ListByShare() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armdatashare.NewProviderShareSubscriptionsClient("<subscription-id>", cred, nil)
	pager := client.ListByShare("<resource-group-name>",
		"<account-name>",
		"<share-name>",
		&armdatashare.ProviderShareSubscriptionsClientListByShareOptions{SkipToken: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
