//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ConsumerInvitationsClient contains the methods for the ConsumerInvitations group.
// Don't use this type directly, use NewConsumerInvitationsClient() instead.
type ConsumerInvitationsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewConsumerInvitationsClient creates a new instance of ConsumerInvitationsClient with the specified values.
func NewConsumerInvitationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ConsumerInvitationsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ConsumerInvitationsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Get - Get an invitation
// If the operation fails it returns the *DataShareError error type.
func (client *ConsumerInvitationsClient) Get(ctx context.Context, location string, invitationID string, options *ConsumerInvitationsGetOptions) (ConsumerInvitationsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, location, invitationID, options)
	if err != nil {
		return ConsumerInvitationsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConsumerInvitationsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ConsumerInvitationsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ConsumerInvitationsClient) getCreateRequest(ctx context.Context, location string, invitationID string, options *ConsumerInvitationsGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataShare/locations/{location}/consumerInvitations/{invitationId}"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if invitationID == "" {
		return nil, errors.New("parameter invitationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invitationId}", url.PathEscape(invitationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ConsumerInvitationsClient) getHandleResponse(resp *http.Response) (ConsumerInvitationsGetResponse, error) {
	result := ConsumerInvitationsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConsumerInvitation); err != nil {
		return ConsumerInvitationsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ConsumerInvitationsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DataShareError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListInvitations - Lists invitations
// If the operation fails it returns the *DataShareError error type.
func (client *ConsumerInvitationsClient) ListInvitations(options *ConsumerInvitationsListInvitationsOptions) *ConsumerInvitationsListInvitationsPager {
	return &ConsumerInvitationsListInvitationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listInvitationsCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ConsumerInvitationsListInvitationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ConsumerInvitationList.NextLink)
		},
	}
}

// listInvitationsCreateRequest creates the ListInvitations request.
func (client *ConsumerInvitationsClient) listInvitationsCreateRequest(ctx context.Context, options *ConsumerInvitationsListInvitationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataShare/listInvitations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listInvitationsHandleResponse handles the ListInvitations response.
func (client *ConsumerInvitationsClient) listInvitationsHandleResponse(resp *http.Response) (ConsumerInvitationsListInvitationsResponse, error) {
	result := ConsumerInvitationsListInvitationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConsumerInvitationList); err != nil {
		return ConsumerInvitationsListInvitationsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listInvitationsHandleError handles the ListInvitations error response.
func (client *ConsumerInvitationsClient) listInvitationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DataShareError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// RejectInvitation - Reject an invitation
// If the operation fails it returns the *DataShareError error type.
func (client *ConsumerInvitationsClient) RejectInvitation(ctx context.Context, location string, invitation ConsumerInvitation, options *ConsumerInvitationsRejectInvitationOptions) (ConsumerInvitationsRejectInvitationResponse, error) {
	req, err := client.rejectInvitationCreateRequest(ctx, location, invitation, options)
	if err != nil {
		return ConsumerInvitationsRejectInvitationResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ConsumerInvitationsRejectInvitationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ConsumerInvitationsRejectInvitationResponse{}, client.rejectInvitationHandleError(resp)
	}
	return client.rejectInvitationHandleResponse(resp)
}

// rejectInvitationCreateRequest creates the RejectInvitation request.
func (client *ConsumerInvitationsClient) rejectInvitationCreateRequest(ctx context.Context, location string, invitation ConsumerInvitation, options *ConsumerInvitationsRejectInvitationOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataShare/locations/{location}/rejectInvitation"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, invitation)
}

// rejectInvitationHandleResponse handles the RejectInvitation response.
func (client *ConsumerInvitationsClient) rejectInvitationHandleResponse(resp *http.Response) (ConsumerInvitationsRejectInvitationResponse, error) {
	result := ConsumerInvitationsRejectInvitationResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConsumerInvitation); err != nil {
		return ConsumerInvitationsRejectInvitationResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// rejectInvitationHandleError handles the RejectInvitation error response.
func (client *ConsumerInvitationsClient) rejectInvitationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DataShareError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
