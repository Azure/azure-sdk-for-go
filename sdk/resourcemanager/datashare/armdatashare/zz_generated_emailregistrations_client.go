//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EmailRegistrationsClient contains the methods for the EmailRegistrations group.
// Don't use this type directly, use NewEmailRegistrationsClient() instead.
type EmailRegistrationsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewEmailRegistrationsClient creates a new instance of EmailRegistrationsClient with the specified values.
func NewEmailRegistrationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *EmailRegistrationsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &EmailRegistrationsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// ActivateEmail - Activate the email registration for the current tenant
// If the operation fails it returns the *DataShareError error type.
func (client *EmailRegistrationsClient) ActivateEmail(ctx context.Context, location string, emailRegistration EmailRegistration, options *EmailRegistrationsActivateEmailOptions) (EmailRegistrationsActivateEmailResponse, error) {
	req, err := client.activateEmailCreateRequest(ctx, location, emailRegistration, options)
	if err != nil {
		return EmailRegistrationsActivateEmailResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EmailRegistrationsActivateEmailResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EmailRegistrationsActivateEmailResponse{}, client.activateEmailHandleError(resp)
	}
	return client.activateEmailHandleResponse(resp)
}

// activateEmailCreateRequest creates the ActivateEmail request.
func (client *EmailRegistrationsClient) activateEmailCreateRequest(ctx context.Context, location string, emailRegistration EmailRegistration, options *EmailRegistrationsActivateEmailOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataShare/locations/{location}/activateEmail"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, emailRegistration)
}

// activateEmailHandleResponse handles the ActivateEmail response.
func (client *EmailRegistrationsClient) activateEmailHandleResponse(resp *http.Response) (EmailRegistrationsActivateEmailResponse, error) {
	result := EmailRegistrationsActivateEmailResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmailRegistration); err != nil {
		return EmailRegistrationsActivateEmailResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// activateEmailHandleError handles the ActivateEmail error response.
func (client *EmailRegistrationsClient) activateEmailHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DataShareError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// RegisterEmail - Register an email for the current tenant
// If the operation fails it returns the *DataShareError error type.
func (client *EmailRegistrationsClient) RegisterEmail(ctx context.Context, location string, options *EmailRegistrationsRegisterEmailOptions) (EmailRegistrationsRegisterEmailResponse, error) {
	req, err := client.registerEmailCreateRequest(ctx, location, options)
	if err != nil {
		return EmailRegistrationsRegisterEmailResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EmailRegistrationsRegisterEmailResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EmailRegistrationsRegisterEmailResponse{}, client.registerEmailHandleError(resp)
	}
	return client.registerEmailHandleResponse(resp)
}

// registerEmailCreateRequest creates the RegisterEmail request.
func (client *EmailRegistrationsClient) registerEmailCreateRequest(ctx context.Context, location string, options *EmailRegistrationsRegisterEmailOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.DataShare/locations/{location}/registerEmail"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// registerEmailHandleResponse handles the RegisterEmail response.
func (client *EmailRegistrationsClient) registerEmailHandleResponse(resp *http.Response) (EmailRegistrationsRegisterEmailResponse, error) {
	result := EmailRegistrationsRegisterEmailResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmailRegistration); err != nil {
		return EmailRegistrationsRegisterEmailResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// registerEmailHandleError handles the RegisterEmail error response.
func (client *EmailRegistrationsClient) registerEmailHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DataShareError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
