//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// ADLSGen1FileDataSet - An ADLS Gen 1 file data set.
type ADLSGen1FileDataSet struct {
	DataSet
	// REQUIRED; ADLS Gen 1 file data set properties.
	Properties *ADLSGen1FileProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen1FileDataSet.
func (a ADLSGen1FileDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSet.marshalInternal(objectMap, DataSetKindAdlsGen1File)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen1FileDataSet.
func (a *ADLSGen1FileDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen1FileProperties - Properties of the ADLS Gen1 file data set.
type ADLSGen1FileProperties struct {
	// REQUIRED; The ADLS account name.
	AccountName *string `json:"accountName,omitempty"`

	// REQUIRED; The file name in the ADLS account.
	FileName *string `json:"fileName,omitempty"`

	// REQUIRED; The folder path within the ADLS account.
	FolderPath *string `json:"folderPath,omitempty"`

	// REQUIRED; Resource group of ADLS account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Subscription id of ADLS account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ADLSGen1FolderDataSet - An ADLS Gen 1 folder data set.
type ADLSGen1FolderDataSet struct {
	DataSet
	// REQUIRED; ADLS Gen 1 folder data set properties.
	Properties *ADLSGen1FolderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen1FolderDataSet.
func (a ADLSGen1FolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSet.marshalInternal(objectMap, DataSetKindAdlsGen1Folder)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen1FolderDataSet.
func (a *ADLSGen1FolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen1FolderProperties - Properties of the ADLS Gen1 folder data set.
type ADLSGen1FolderProperties struct {
	// REQUIRED; The ADLS account name.
	AccountName *string `json:"accountName,omitempty"`

	// REQUIRED; The folder path within the ADLS account.
	FolderPath *string `json:"folderPath,omitempty"`

	// REQUIRED; Resource group of ADLS account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Subscription id of ADLS account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ADLSGen2FileDataSet - An ADLS Gen 2 file data set.
type ADLSGen2FileDataSet struct {
	DataSet
	// REQUIRED; ADLS Gen 2 file data set properties.
	Properties *ADLSGen2FileProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileDataSet.
func (a ADLSGen2FileDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSet.marshalInternal(objectMap, DataSetKindAdlsGen2File)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileDataSet.
func (a *ADLSGen2FileDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FileDataSetMapping - An ADLS Gen2 file data set mapping.
type ADLSGen2FileDataSetMapping struct {
	DataSetMapping
	// REQUIRED; ADLS Gen2 file data set mapping properties.
	Properties *ADLSGen2FileDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileDataSetMapping.
func (a ADLSGen2FileDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindAdlsGen2File)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileDataSetMapping.
func (a *ADLSGen2FileDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FileDataSetMappingProperties - ADLS Gen 2 file data set mapping property bag.
type ADLSGen2FileDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; File path within the file system.
	FilePath *string `json:"filePath,omitempty"`

	// REQUIRED; File system to which the file belongs.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// Type of output file
	OutputType *OutputType `json:"outputType,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ADLSGen2FileProperties - Properties of the ADLS Gen2 file data set.
type ADLSGen2FileProperties struct {
	// REQUIRED; File path within the file system.
	FilePath *string `json:"filePath,omitempty"`

	// REQUIRED; File system to which the file belongs.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ADLSGen2FileSystemDataSet - An ADLS Gen 2 file system data set.
type ADLSGen2FileSystemDataSet struct {
	DataSet
	// REQUIRED; ADLS Gen 2 file system data set properties.
	Properties *ADLSGen2FileSystemProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileSystemDataSet.
func (a ADLSGen2FileSystemDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSet.marshalInternal(objectMap, DataSetKindAdlsGen2FileSystem)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileSystemDataSet.
func (a *ADLSGen2FileSystemDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FileSystemDataSetMapping - An ADLS Gen2 file system data set mapping.
type ADLSGen2FileSystemDataSetMapping struct {
	DataSetMapping
	// REQUIRED; ADLS Gen2 file system data set mapping properties.
	Properties *ADLSGen2FileSystemDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileSystemDataSetMapping.
func (a ADLSGen2FileSystemDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindAdlsGen2FileSystem)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileSystemDataSetMapping.
func (a *ADLSGen2FileSystemDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FileSystemDataSetMappingProperties - ADLS Gen 2 file system data set mapping property bag.
type ADLSGen2FileSystemDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; The file system name.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ADLSGen2FileSystemProperties - Properties of the ADLS Gen2 file system data set.
type ADLSGen2FileSystemProperties struct {
	// REQUIRED; The file system name.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ADLSGen2FolderDataSet - An ADLS Gen 2 folder data set.
type ADLSGen2FolderDataSet struct {
	DataSet
	// REQUIRED; ADLS Gen 2 folder data set properties.
	Properties *ADLSGen2FolderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FolderDataSet.
func (a ADLSGen2FolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSet.marshalInternal(objectMap, DataSetKindAdlsGen2Folder)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FolderDataSet.
func (a *ADLSGen2FolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FolderDataSetMapping - An ADLS Gen2 folder data set mapping.
type ADLSGen2FolderDataSetMapping struct {
	DataSetMapping
	// REQUIRED; ADLS Gen2 folder data set mapping properties.
	Properties *ADLSGen2FolderDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FolderDataSetMapping.
func (a ADLSGen2FolderDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindAdlsGen2Folder)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FolderDataSetMapping.
func (a *ADLSGen2FolderDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ADLSGen2FolderDataSetMappingProperties - ADLS Gen 2 folder data set mapping property bag.
type ADLSGen2FolderDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; File system to which the folder belongs.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Folder path within the file system.
	FolderPath *string `json:"folderPath,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ADLSGen2FolderProperties - Properties of the ADLS Gen2 folder data set.
type ADLSGen2FolderProperties struct {
	// REQUIRED; File system to which the folder belongs.
	FileSystem *string `json:"fileSystem,omitempty"`

	// REQUIRED; Folder path within the file system.
	FolderPath *string `json:"folderPath,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// Account - An account data transfer object.
type Account struct {
	DefaultDto
	// REQUIRED; Identity Info on the Account
	Identity *Identity `json:"identity,omitempty"`

	// Properties on the account
	Properties *AccountProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Account.
func (a Account) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DefaultDto.marshalInternal(objectMap)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Account.
func (a *Account) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			err = unpopulate(val, &a.Identity)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DefaultDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// AccountList - List response for get Accounts.
type AccountList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*Account `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccountList.
func (a AccountList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AccountProperties - Account property bag.
type AccountProperties struct {
	// READ-ONLY; Time at which the account was created.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the Account
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Email of the user who created the resource
	UserEmail *string `json:"userEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the resource
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AccountProperties.
func (a AccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", a.CreatedAt)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "userEmail", a.UserEmail)
	populate(objectMap, "userName", a.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccountProperties.
func (a *AccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &a.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &a.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &a.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AccountUpdateParameters - Update parameters for accounts
type AccountUpdateParameters struct {
	// Tags on the azure resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AccountUpdateParameters.
func (a AccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// AccountsBeginCreateOptions contains the optional parameters for the Accounts.BeginCreate method.
type AccountsBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// AccountsBeginDeleteOptions contains the optional parameters for the Accounts.BeginDelete method.
type AccountsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// AccountsGetOptions contains the optional parameters for the Accounts.Get method.
type AccountsGetOptions struct {
	// placeholder for future optional parameters
}

// AccountsListByResourceGroupOptions contains the optional parameters for the Accounts.ListByResourceGroup method.
type AccountsListByResourceGroupOptions struct {
	// Continuation token
	SkipToken *string
}

// AccountsListBySubscriptionOptions contains the optional parameters for the Accounts.ListBySubscription method.
type AccountsListBySubscriptionOptions struct {
	// Continuation token
	SkipToken *string
}

// AccountsUpdateOptions contains the optional parameters for the Accounts.Update method.
type AccountsUpdateOptions struct {
	// placeholder for future optional parameters
}

// BlobContainerDataSet - An Azure storage blob container data set.
type BlobContainerDataSet struct {
	DataSet
	// REQUIRED; Blob container data set properties.
	Properties *BlobContainerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobContainerDataSet.
func (b BlobContainerDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSet.marshalInternal(objectMap, DataSetKindContainer)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobContainerDataSet.
func (b *BlobContainerDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobContainerDataSetMapping - A Blob container data set mapping.
type BlobContainerDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Blob container data set mapping properties.
	Properties *BlobContainerMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobContainerDataSetMapping.
func (b BlobContainerDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindContainer)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobContainerDataSetMapping.
func (b *BlobContainerDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobContainerMappingProperties - Azure storage Blob container data set mapping property bag.
type BlobContainerMappingProperties struct {
	// REQUIRED; BLOB Container name.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BlobContainerProperties - Properties of the BLOB container data set.
type BlobContainerProperties struct {
	// REQUIRED; BLOB Container name.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// BlobDataSet - An Azure storage blob data set.
type BlobDataSet struct {
	DataSet
	// REQUIRED; Blob data set properties.
	Properties *BlobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobDataSet.
func (b BlobDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSet.marshalInternal(objectMap, DataSetKindBlob)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobDataSet.
func (b *BlobDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobDataSetMapping - A Blob data set mapping.
type BlobDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Blob data set mapping properties.
	Properties *BlobMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobDataSetMapping.
func (b BlobDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindBlob)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobDataSetMapping.
func (b *BlobDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobFolderDataSet - An Azure storage blob folder data set.
type BlobFolderDataSet struct {
	DataSet
	// REQUIRED; Blob folder data set properties.
	Properties *BlobFolderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobFolderDataSet.
func (b BlobFolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSet.marshalInternal(objectMap, DataSetKindBlobFolder)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobFolderDataSet.
func (b *BlobFolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobFolderDataSetMapping - A Blob folder data set mapping.
type BlobFolderDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Blob folder data set mapping properties.
	Properties *BlobFolderMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BlobFolderDataSetMapping.
func (b BlobFolderDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindBlobFolder)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobFolderDataSetMapping.
func (b *BlobFolderDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := b.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// BlobFolderMappingProperties - Azure storage Blob folder data set mapping property bag.
type BlobFolderMappingProperties struct {
	// REQUIRED; Container that has the file path.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; Prefix for blob folder
	Prefix *string `json:"prefix,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BlobFolderProperties - Properties of the blob folder data set.
type BlobFolderProperties struct {
	// REQUIRED; Container that has the file path.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; Prefix for blob folder
	Prefix *string `json:"prefix,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// BlobMappingProperties - Azure storage Blob data set mapping property bag.
type BlobMappingProperties struct {
	// REQUIRED; Container that has the file path.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; File path within the source data set
	FilePath *string `json:"filePath,omitempty"`

	// REQUIRED; Resource group of storage account.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set.
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// File output type
	OutputType *OutputType `json:"outputType,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// BlobProperties - Properties of the blob data set.
type BlobProperties struct {
	// REQUIRED; Container that has the file path.
	ContainerName *string `json:"containerName,omitempty"`

	// REQUIRED; File path within the source data set
	FilePath *string `json:"filePath,omitempty"`

	// REQUIRED; Resource group of storage account
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// REQUIRED; Storage account name of the source data set
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// REQUIRED; Subscription id of storage account
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ConsumerInvitation - A consumer Invitation data transfer object.
type ConsumerInvitation struct {
	ProxyDto
	// REQUIRED; Properties on the account
	Properties *ConsumerInvitationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerInvitation.
func (c ConsumerInvitation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConsumerInvitation.
func (c *ConsumerInvitation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &c.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := c.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ConsumerInvitationList - List response for get InvitationList
type ConsumerInvitationList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ConsumerInvitation `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerInvitationList.
func (c ConsumerInvitationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ConsumerInvitationProperties - Properties of consumer invitation
type ConsumerInvitationProperties struct {
	// REQUIRED; Unique id of the invitation.
	InvitationID *string `json:"invitationId,omitempty"`

	// READ-ONLY; Number of data sets in a share
	DataSetCount *int32 `json:"dataSetCount,omitempty" azure:"ro"`

	// READ-ONLY; Description shared when the invitation was created
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The expiration date for the share subscription created by accepting the invitation.
	ExpirationDate *time.Time `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; The status of the invitation.
	InvitationStatus *InvitationStatus `json:"invitationStatus,omitempty" azure:"ro"`

	// READ-ONLY; invitation location
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Email of the provider who created the resource
	ProviderEmail *string `json:"providerEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the provider who created the resource
	ProviderName *string `json:"providerName,omitempty" azure:"ro"`

	// READ-ONLY; Tenant name of the provider who created the resource
	ProviderTenantName *string `json:"providerTenantName,omitempty" azure:"ro"`

	// READ-ONLY; The time the recipient responded to the invitation.
	RespondedAt *time.Time `json:"respondedAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets the time at which the invitation was sent.
	SentAt *time.Time `json:"sentAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets the source share Name.
	ShareName *string `json:"shareName,omitempty" azure:"ro"`

	// READ-ONLY; Terms of use shared when the invitation was created
	TermsOfUse *string `json:"termsOfUse,omitempty" azure:"ro"`

	// READ-ONLY; Email of the user who created the resource
	UserEmail *string `json:"userEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the resource
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerInvitationProperties.
func (c ConsumerInvitationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSetCount", c.DataSetCount)
	populate(objectMap, "description", c.Description)
	populateTimeRFC3339(objectMap, "expirationDate", c.ExpirationDate)
	populate(objectMap, "invitationId", c.InvitationID)
	populate(objectMap, "invitationStatus", c.InvitationStatus)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "providerEmail", c.ProviderEmail)
	populate(objectMap, "providerName", c.ProviderName)
	populate(objectMap, "providerTenantName", c.ProviderTenantName)
	populateTimeRFC3339(objectMap, "respondedAt", c.RespondedAt)
	populateTimeRFC3339(objectMap, "sentAt", c.SentAt)
	populate(objectMap, "shareName", c.ShareName)
	populate(objectMap, "termsOfUse", c.TermsOfUse)
	populate(objectMap, "userEmail", c.UserEmail)
	populate(objectMap, "userName", c.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConsumerInvitationProperties.
func (c *ConsumerInvitationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataSetCount":
			err = unpopulate(val, &c.DataSetCount)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &c.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &c.InvitationID)
			delete(rawMsg, key)
		case "invitationStatus":
			err = unpopulate(val, &c.InvitationStatus)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &c.Location)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &c.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &c.ProviderName)
			delete(rawMsg, key)
		case "providerTenantName":
			err = unpopulate(val, &c.ProviderTenantName)
			delete(rawMsg, key)
		case "respondedAt":
			err = unpopulateTimeRFC3339(val, &c.RespondedAt)
			delete(rawMsg, key)
		case "sentAt":
			err = unpopulateTimeRFC3339(val, &c.SentAt)
			delete(rawMsg, key)
		case "shareName":
			err = unpopulate(val, &c.ShareName)
			delete(rawMsg, key)
		case "termsOfUse":
			err = unpopulate(val, &c.TermsOfUse)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &c.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &c.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ConsumerInvitationsGetOptions contains the optional parameters for the ConsumerInvitations.Get method.
type ConsumerInvitationsGetOptions struct {
	// placeholder for future optional parameters
}

// ConsumerInvitationsListInvitationsOptions contains the optional parameters for the ConsumerInvitations.ListInvitations method.
type ConsumerInvitationsListInvitationsOptions struct {
	// The continuation token
	SkipToken *string
}

// ConsumerInvitationsRejectInvitationOptions contains the optional parameters for the ConsumerInvitations.RejectInvitation method.
type ConsumerInvitationsRejectInvitationOptions struct {
	// placeholder for future optional parameters
}

// ConsumerSourceDataSet - A consumer side dataSet data transfer object.
type ConsumerSourceDataSet struct {
	ProxyDto
	// source dataSet properties
	Properties *ConsumerSourceDataSetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerSourceDataSet.
func (c ConsumerSourceDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConsumerSourceDataSet.
func (c *ConsumerSourceDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &c.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := c.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ConsumerSourceDataSetList - A consumer side list of source dataSets
type ConsumerSourceDataSetList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ConsumerSourceDataSet `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerSourceDataSetList.
func (c ConsumerSourceDataSetList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ConsumerSourceDataSetProperties - Properties of consumer source dataSet
type ConsumerSourceDataSetProperties struct {
	// READ-ONLY; DataSet Id
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`

	// READ-ONLY; Location of the data set.
	DataSetLocation *string `json:"dataSetLocation,omitempty" azure:"ro"`

	// READ-ONLY; DataSet name
	DataSetName *string `json:"dataSetName,omitempty" azure:"ro"`

	// READ-ONLY; DataSet path
	DataSetPath *string `json:"dataSetPath,omitempty" azure:"ro"`

	// READ-ONLY; Type of data set
	DataSetType *DataSetType `json:"dataSetType,omitempty" azure:"ro"`
}

// ConsumerSourceDataSetsListByShareSubscriptionOptions contains the optional parameters for the ConsumerSourceDataSets.ListByShareSubscription method.
type ConsumerSourceDataSetsListByShareSubscriptionOptions struct {
	// Continuation token
	SkipToken *string
}

// DataSetClassification provides polymorphic access to related types.
// Call the interface's GetDataSet() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ADLSGen1FileDataSet, *ADLSGen1FolderDataSet, *ADLSGen2FileDataSet, *ADLSGen2FileSystemDataSet, *ADLSGen2FolderDataSet,
// - *BlobContainerDataSet, *BlobDataSet, *BlobFolderDataSet, *DataSet, *KustoClusterDataSet, *KustoDatabaseDataSet, *SqlDBTableDataSet,
// - *SqlDWTableDataSet, *SynapseWorkspaceSqlPoolTableDataSet
type DataSetClassification interface {
	// GetDataSet returns the DataSet content of the underlying type.
	GetDataSet() *DataSet
}

// DataSet - A DataSet data transfer object.
type DataSet struct {
	ProxyDto
	// REQUIRED; Kind of data set.
	Kind *DataSetKind `json:"kind,omitempty"`
}

// GetDataSet implements the DataSetClassification interface for type DataSet.
func (d *DataSet) GetDataSet() *DataSet { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSet.
func (d *DataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DataSet) marshalInternal(objectMap map[string]interface{}, discValue DataSetKind) {
	d.ProxyDto.marshalInternal(objectMap)
	d.Kind = &discValue
	objectMap["kind"] = d.Kind
}

func (d *DataSet) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &d.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DataSetList - List response for get DataSets
type DataSetList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []DataSetClassification `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataSetList.
func (d DataSetList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetList.
func (d *DataSetList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &d.NextLink)
			delete(rawMsg, key)
		case "value":
			d.Value, err = unmarshalDataSetClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DataSetMappingClassification provides polymorphic access to related types.
// Call the interface's GetDataSetMapping() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ADLSGen2FileDataSetMapping, *ADLSGen2FileSystemDataSetMapping, *ADLSGen2FolderDataSetMapping, *BlobContainerDataSetMapping,
// - *BlobDataSetMapping, *BlobFolderDataSetMapping, *DataSetMapping, *KustoClusterDataSetMapping, *KustoDatabaseDataSetMapping,
// - *SqlDBTableDataSetMapping, *SqlDWTableDataSetMapping, *SynapseWorkspaceSqlPoolTableDataSetMapping
type DataSetMappingClassification interface {
	// GetDataSetMapping returns the DataSetMapping content of the underlying type.
	GetDataSetMapping() *DataSetMapping
}

// DataSetMapping - A data set mapping data transfer object.
type DataSetMapping struct {
	ProxyDto
	// REQUIRED; Kind of data set mapping.
	Kind *DataSetMappingKind `json:"kind,omitempty"`
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type DataSetMapping.
func (d *DataSetMapping) GetDataSetMapping() *DataSetMapping { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetMapping.
func (d *DataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DataSetMapping) marshalInternal(objectMap map[string]interface{}, discValue DataSetMappingKind) {
	d.ProxyDto.marshalInternal(objectMap)
	d.Kind = &discValue
	objectMap["kind"] = d.Kind
}

func (d *DataSetMapping) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &d.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DataSetMappingList - List response for get DataSetMappings
type DataSetMappingList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []DataSetMappingClassification `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataSetMappingList.
func (d DataSetMappingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetMappingList.
func (d *DataSetMappingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &d.NextLink)
			delete(rawMsg, key)
		case "value":
			d.Value, err = unmarshalDataSetMappingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DataSetMappingsCreateOptions contains the optional parameters for the DataSetMappings.Create method.
type DataSetMappingsCreateOptions struct {
	// placeholder for future optional parameters
}

// DataSetMappingsDeleteOptions contains the optional parameters for the DataSetMappings.Delete method.
type DataSetMappingsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataSetMappingsGetOptions contains the optional parameters for the DataSetMappings.Get method.
type DataSetMappingsGetOptions struct {
	// placeholder for future optional parameters
}

// DataSetMappingsListByShareSubscriptionOptions contains the optional parameters for the DataSetMappings.ListByShareSubscription method.
type DataSetMappingsListByShareSubscriptionOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation token
	SkipToken *string
}

// DataSetsBeginDeleteOptions contains the optional parameters for the DataSets.BeginDelete method.
type DataSetsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataSetsCreateOptions contains the optional parameters for the DataSets.Create method.
type DataSetsCreateOptions struct {
	// placeholder for future optional parameters
}

// DataSetsGetOptions contains the optional parameters for the DataSets.Get method.
type DataSetsGetOptions struct {
	// placeholder for future optional parameters
}

// DataSetsListByShareOptions contains the optional parameters for the DataSets.ListByShare method.
type DataSetsListByShareOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// continuation token
	SkipToken *string
}

// DataShareError - The data share error model.
// Implements the error and azcore.HTTPResponse interfaces.
type DataShareError struct {
	raw string
	// REQUIRED; The data share error body
	InnerError *DataShareErrorInfo `json:"error,omitempty"`
}

// Error implements the error interface for type DataShareError.
// The contents of the error text are not contractual and subject to change.
func (e DataShareError) Error() string {
	return e.raw
}

// DataShareErrorInfo - The data share error body model.
type DataShareErrorInfo struct {
	// REQUIRED; Code of the error
	Code *string `json:"code,omitempty"`

	// REQUIRED; Message of the error
	Message *string `json:"message,omitempty"`

	// Nested details of the error model
	Details []*DataShareErrorInfo `json:"details,omitempty"`

	// Target of the error
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataShareErrorInfo.
func (d DataShareErrorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", d.Code)
	populate(objectMap, "details", d.Details)
	populate(objectMap, "message", d.Message)
	populate(objectMap, "target", d.Target)
	return json.Marshal(objectMap)
}

// DefaultDto - Base data transfer object implementation for default resources.
type DefaultDto struct {
	ProxyDto
	// Location of the azure resource.
	Location *string `json:"location,omitempty"`

	// Tags on the azure resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultDto.
func (d DefaultDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DefaultDto.
func (d *DefaultDto) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DefaultDto) marshalInternal(objectMap map[string]interface{}) {
	d.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "tags", d.Tags)
}

func (d *DefaultDto) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
			err = unpopulate(val, &d.Location)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &d.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DimensionProperties - properties for dimension
type DimensionProperties struct {
	// localized display name of the dimension to customer
	DisplayName *string `json:"displayName,omitempty"`

	// dimension name
	Name *string `json:"name,omitempty"`
}

// EmailRegistration - Dto for tenant domain registration
type EmailRegistration struct {
	// Activation code for the registration
	ActivationCode *string `json:"activationCode,omitempty"`

	// READ-ONLY; Date of the activation expiration
	ActivationExpirationDate *time.Time `json:"activationExpirationDate,omitempty" azure:"ro"`

	// READ-ONLY; The email to register
	Email *string `json:"email,omitempty" azure:"ro"`

	// READ-ONLY; Registration status
	RegistrationStatus *RegistrationStatus `json:"registrationStatus,omitempty" azure:"ro"`

	// READ-ONLY; The tenant to register
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type EmailRegistration.
func (e EmailRegistration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activationCode", e.ActivationCode)
	populateTimeRFC3339(objectMap, "activationExpirationDate", e.ActivationExpirationDate)
	populate(objectMap, "email", e.Email)
	populate(objectMap, "registrationStatus", e.RegistrationStatus)
	populate(objectMap, "tenantId", e.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EmailRegistration.
func (e *EmailRegistration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activationCode":
			err = unpopulate(val, &e.ActivationCode)
			delete(rawMsg, key)
		case "activationExpirationDate":
			err = unpopulateTimeRFC3339(val, &e.ActivationExpirationDate)
			delete(rawMsg, key)
		case "email":
			err = unpopulate(val, &e.Email)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &e.RegistrationStatus)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, &e.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// EmailRegistrationsActivateEmailOptions contains the optional parameters for the EmailRegistrations.ActivateEmail method.
type EmailRegistrationsActivateEmailOptions struct {
	// placeholder for future optional parameters
}

// EmailRegistrationsRegisterEmailOptions contains the optional parameters for the EmailRegistrations.RegisterEmail method.
type EmailRegistrationsRegisterEmailOptions struct {
	// placeholder for future optional parameters
}

// Identity of resource
type Identity struct {
	// Identity Type
	Type *Type `json:"type,omitempty"`

	// READ-ONLY; service principal Id
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; Tenant Id
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// Invitation - A Invitation data transfer object.
type Invitation struct {
	ProxyDto
	// Properties on the Invitation
	Properties *InvitationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Invitation.
func (i Invitation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Invitation.
func (i *Invitation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &i.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := i.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// InvitationList - List response for get InvitationList
type InvitationList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*Invitation `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InvitationList.
func (i InvitationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// InvitationProperties - Invitation property bag.
type InvitationProperties struct {
	// The expiration date for the invitation and share subscription.
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`

	// The target Azure AD Id. Can't be combined with email.
	TargetActiveDirectoryID *string `json:"targetActiveDirectoryId,omitempty"`

	// The email the invitation is directed to.
	TargetEmail *string `json:"targetEmail,omitempty"`

	// The target user or application Id that invitation is being sent to. Must be specified along TargetActiveDirectoryId. This enables sending invitations
	// to specific users or applications in an AD tenant.
	TargetObjectID *string `json:"targetObjectId,omitempty"`

	// READ-ONLY; unique invitation id
	InvitationID *string `json:"invitationId,omitempty" azure:"ro"`

	// READ-ONLY; The status of the invitation.
	InvitationStatus *InvitationStatus `json:"invitationStatus,omitempty" azure:"ro"`

	// READ-ONLY; The time the recipient responded to the invitation.
	RespondedAt *time.Time `json:"respondedAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets the time at which the invitation was sent.
	SentAt *time.Time `json:"sentAt,omitempty" azure:"ro"`

	// READ-ONLY; Email of the user who created the resource
	UserEmail *string `json:"userEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the resource
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InvitationProperties.
func (i InvitationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "expirationDate", i.ExpirationDate)
	populate(objectMap, "invitationId", i.InvitationID)
	populate(objectMap, "invitationStatus", i.InvitationStatus)
	populateTimeRFC3339(objectMap, "respondedAt", i.RespondedAt)
	populateTimeRFC3339(objectMap, "sentAt", i.SentAt)
	populate(objectMap, "targetActiveDirectoryId", i.TargetActiveDirectoryID)
	populate(objectMap, "targetEmail", i.TargetEmail)
	populate(objectMap, "targetObjectId", i.TargetObjectID)
	populate(objectMap, "userEmail", i.UserEmail)
	populate(objectMap, "userName", i.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InvitationProperties.
func (i *InvitationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &i.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &i.InvitationID)
			delete(rawMsg, key)
		case "invitationStatus":
			err = unpopulate(val, &i.InvitationStatus)
			delete(rawMsg, key)
		case "respondedAt":
			err = unpopulateTimeRFC3339(val, &i.RespondedAt)
			delete(rawMsg, key)
		case "sentAt":
			err = unpopulateTimeRFC3339(val, &i.SentAt)
			delete(rawMsg, key)
		case "targetActiveDirectoryId":
			err = unpopulate(val, &i.TargetActiveDirectoryID)
			delete(rawMsg, key)
		case "targetEmail":
			err = unpopulate(val, &i.TargetEmail)
			delete(rawMsg, key)
		case "targetObjectId":
			err = unpopulate(val, &i.TargetObjectID)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &i.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &i.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// InvitationsCreateOptions contains the optional parameters for the Invitations.Create method.
type InvitationsCreateOptions struct {
	// placeholder for future optional parameters
}

// InvitationsDeleteOptions contains the optional parameters for the Invitations.Delete method.
type InvitationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// InvitationsGetOptions contains the optional parameters for the Invitations.Get method.
type InvitationsGetOptions struct {
	// placeholder for future optional parameters
}

// InvitationsListByShareOptions contains the optional parameters for the Invitations.ListByShare method.
type InvitationsListByShareOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// The continuation token
	SkipToken *string
}

// KustoClusterDataSet - A kusto cluster data set.
type KustoClusterDataSet struct {
	DataSet
	// REQUIRED; Kusto cluster data set properties.
	Properties *KustoClusterDataSetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KustoClusterDataSet.
func (k KustoClusterDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.DataSet.marshalInternal(objectMap, DataSetKindKustoCluster)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoClusterDataSet.
func (k *KustoClusterDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := k.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// KustoClusterDataSetMapping - A Kusto cluster data set mapping
type KustoClusterDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Kusto cluster data set mapping properties.
	Properties *KustoClusterDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KustoClusterDataSetMapping.
func (k KustoClusterDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindKustoCluster)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoClusterDataSetMapping.
func (k *KustoClusterDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := k.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// KustoClusterDataSetMappingProperties - Properties of the Kusto cluster data set mapping
type KustoClusterDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; Resource id of the sink kusto cluster.
	KustoClusterResourceID *string `json:"kustoClusterResourceId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Location of the sink kusto cluster.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// KustoClusterDataSetProperties - Properties of the kusto cluster data set.
type KustoClusterDataSetProperties struct {
	// REQUIRED; Resource id of the kusto cluster.
	KustoClusterResourceID *string `json:"kustoClusterResourceId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`

	// READ-ONLY; Location of the kusto cluster.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the kusto cluster data set.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// KustoDatabaseDataSet - A kusto database data set.
type KustoDatabaseDataSet struct {
	DataSet
	// REQUIRED; Kusto database data set properties.
	Properties *KustoDatabaseDataSetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KustoDatabaseDataSet.
func (k KustoDatabaseDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.DataSet.marshalInternal(objectMap, DataSetKindKustoDatabase)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoDatabaseDataSet.
func (k *KustoDatabaseDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := k.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// KustoDatabaseDataSetMapping - A Kusto database data set mapping
type KustoDatabaseDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Kusto database data set mapping properties.
	Properties *KustoDatabaseDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KustoDatabaseDataSetMapping.
func (k KustoDatabaseDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindKustoDatabase)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoDatabaseDataSetMapping.
func (k *KustoDatabaseDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := k.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// KustoDatabaseDataSetMappingProperties - Properties of the Kusto database data set mapping
type KustoDatabaseDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; Resource id of the sink kusto cluster.
	KustoClusterResourceID *string `json:"kustoClusterResourceId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Location of the sink kusto cluster.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// KustoDatabaseDataSetProperties - Properties of the kusto database data set.
type KustoDatabaseDataSetProperties struct {
	// REQUIRED; Resource id of the kusto database.
	KustoDatabaseResourceID *string `json:"kustoDatabaseResourceId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`

	// READ-ONLY; Location of the kusto cluster.
	Location *string `json:"location,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the kusto database data set.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// OperationList - List response for get operations.
type OperationList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*OperationModel `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationMetaLogSpecification - log specifications for operation api
type OperationMetaLogSpecification struct {
	// blob duration of the log
	BlobDuration *string `json:"blobDuration,omitempty"`

	// localized name of the log category
	DisplayName *string `json:"displayName,omitempty"`

	// name of the log category
	Name *string `json:"name,omitempty"`
}

// OperationMetaMetricSpecification - metric specifications for the operation
type OperationMetaMetricSpecification struct {
	// aggregation type of metric
	AggregationType *string `json:"aggregationType,omitempty"`

	// properties for dimension
	Dimensions []*DimensionProperties `json:"dimensions,omitempty"`

	// description of the metric
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// localized name of the metric
	DisplayName *string `json:"displayName,omitempty"`

	// enable regional mdm account
	EnableRegionalMdmAccount *string `json:"enableRegionalMdmAccount,omitempty"`

	// fill gap with zero
	FillGapWithZero *bool `json:"fillGapWithZero,omitempty"`

	// internal metric name
	InternalMetricName *string `json:"internalMetricName,omitempty"`

	// name of the metric
	Name *string `json:"name,omitempty"`

	// dimension name use to replace resource id if specified
	ResourceIDDimensionNameOverride *string `json:"resourceIdDimensionNameOverride,omitempty"`

	// supported aggregation types
	SupportedAggregationTypes []*string `json:"supportedAggregationTypes,omitempty"`

	// supported time grain types
	SupportedTimeGrainTypes []*string `json:"supportedTimeGrainTypes,omitempty"`

	// units for the metric
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaMetricSpecification.
func (o OperationMetaMetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", o.AggregationType)
	populate(objectMap, "dimensions", o.Dimensions)
	populate(objectMap, "displayDescription", o.DisplayDescription)
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", o.EnableRegionalMdmAccount)
	populate(objectMap, "fillGapWithZero", o.FillGapWithZero)
	populate(objectMap, "internalMetricName", o.InternalMetricName)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", o.ResourceIDDimensionNameOverride)
	populate(objectMap, "supportedAggregationTypes", o.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", o.SupportedTimeGrainTypes)
	populate(objectMap, "unit", o.Unit)
	return json.Marshal(objectMap)
}

// OperationMetaPropertyInfo - properties on meta info
type OperationMetaPropertyInfo struct {
	// meta service specification
	ServiceSpecification *OperationMetaServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationMetaServiceSpecification - The operation meta service specification
type OperationMetaServiceSpecification struct {
	// log specifications for the operation
	LogSpecifications []*OperationMetaLogSpecification `json:"logSpecifications,omitempty"`

	// metric specifications for the operation
	MetricSpecifications []*OperationMetaMetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaServiceSpecification.
func (o OperationMetaServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", o.LogSpecifications)
	populate(objectMap, "metricSpecifications", o.MetricSpecifications)
	return json.Marshal(objectMap)
}

// OperationModel - The response model for get operations
type OperationModel struct {
	// Properties on the operation
	Display *OperationModelProperties `json:"display,omitempty"`

	// Operation name for display purposes
	Name *string `json:"name,omitempty"`

	// origin of the operation
	Origin *string `json:"origin,omitempty"`

	// properties for the operation meta info
	Properties *OperationMetaPropertyInfo `json:"properties,omitempty"`
}

// OperationModelProperties - Properties on operations
type OperationModelProperties struct {
	// Description of the operation for display purposes
	Description *string `json:"description,omitempty"`

	// Name of the operation for display purposes
	Operation *string `json:"operation,omitempty"`

	// Name of the provider for display purposes
	Provider *string `json:"provider,omitempty"`

	// Name of the resource type for display purposes
	Resource *string `json:"resource,omitempty"`
}

// OperationResponse - Response for long running operation
type OperationResponse struct {
	// REQUIRED; Operation state of the long running operation.
	Status *Status `json:"status,omitempty"`

	// start time
	EndTime *time.Time `json:"endTime,omitempty"`

	// The error property when status is failed.
	Error *DataShareErrorInfo `json:"error,omitempty"`

	// start time
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationResponse.
func (o OperationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", o.EndTime)
	populate(objectMap, "error", o.Error)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationResponse.
func (o *OperationResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &o.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &o.Error)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// ProviderShareSubscription - A provider side share subscription data transfer object.
type ProviderShareSubscription struct {
	ProxyDto
	// properties of providerShareSubscription
	Properties *ProviderShareSubscriptionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderShareSubscription.
func (p ProviderShareSubscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProviderShareSubscription.
func (p *ProviderShareSubscription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &p.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := p.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ProviderShareSubscriptionList - List response for get ShareSubscription.
type ProviderShareSubscriptionList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ProviderShareSubscription `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderShareSubscriptionList.
func (p ProviderShareSubscriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProviderShareSubscriptionProperties - Provider share subscription properties
type ProviderShareSubscriptionProperties struct {
	// Expiration date of the share subscription in UTC format
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`

	// READ-ONLY; Email of the consumer who created the share subscription
	ConsumerEmail *string `json:"consumerEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the consumer who created the share subscription
	ConsumerName *string `json:"consumerName,omitempty" azure:"ro"`

	// READ-ONLY; Tenant name of the consumer who created the share subscription
	ConsumerTenantName *string `json:"consumerTenantName,omitempty" azure:"ro"`

	// READ-ONLY; created at
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Email of the provider who created the share
	ProviderEmail *string `json:"providerEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the provider who created the share
	ProviderName *string `json:"providerName,omitempty" azure:"ro"`

	// READ-ONLY; share Subscription Object Id
	ShareSubscriptionObjectID *string `json:"shareSubscriptionObjectId,omitempty" azure:"ro"`

	// READ-ONLY; Gets the status of share subscription
	ShareSubscriptionStatus *ShareSubscriptionStatus `json:"shareSubscriptionStatus,omitempty" azure:"ro"`

	// READ-ONLY; Shared at
	SharedAt *time.Time `json:"sharedAt,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderShareSubscriptionProperties.
func (p ProviderShareSubscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerEmail", p.ConsumerEmail)
	populate(objectMap, "consumerName", p.ConsumerName)
	populate(objectMap, "consumerTenantName", p.ConsumerTenantName)
	populateTimeRFC3339(objectMap, "createdAt", p.CreatedAt)
	populateTimeRFC3339(objectMap, "expirationDate", p.ExpirationDate)
	populate(objectMap, "providerEmail", p.ProviderEmail)
	populate(objectMap, "providerName", p.ProviderName)
	populate(objectMap, "shareSubscriptionObjectId", p.ShareSubscriptionObjectID)
	populate(objectMap, "shareSubscriptionStatus", p.ShareSubscriptionStatus)
	populateTimeRFC3339(objectMap, "sharedAt", p.SharedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProviderShareSubscriptionProperties.
func (p *ProviderShareSubscriptionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerEmail":
			err = unpopulate(val, &p.ConsumerEmail)
			delete(rawMsg, key)
		case "consumerName":
			err = unpopulate(val, &p.ConsumerName)
			delete(rawMsg, key)
		case "consumerTenantName":
			err = unpopulate(val, &p.ConsumerTenantName)
			delete(rawMsg, key)
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &p.ExpirationDate)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &p.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &p.ProviderName)
			delete(rawMsg, key)
		case "shareSubscriptionObjectId":
			err = unpopulate(val, &p.ShareSubscriptionObjectID)
			delete(rawMsg, key)
		case "shareSubscriptionStatus":
			err = unpopulate(val, &p.ShareSubscriptionStatus)
			delete(rawMsg, key)
		case "sharedAt":
			err = unpopulateTimeRFC3339(val, &p.SharedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProviderShareSubscriptionsAdjustOptions contains the optional parameters for the ProviderShareSubscriptions.Adjust method.
type ProviderShareSubscriptionsAdjustOptions struct {
	// placeholder for future optional parameters
}

// ProviderShareSubscriptionsBeginRevokeOptions contains the optional parameters for the ProviderShareSubscriptions.BeginRevoke method.
type ProviderShareSubscriptionsBeginRevokeOptions struct {
	// placeholder for future optional parameters
}

// ProviderShareSubscriptionsGetByShareOptions contains the optional parameters for the ProviderShareSubscriptions.GetByShare method.
type ProviderShareSubscriptionsGetByShareOptions struct {
	// placeholder for future optional parameters
}

// ProviderShareSubscriptionsListByShareOptions contains the optional parameters for the ProviderShareSubscriptions.ListByShare method.
type ProviderShareSubscriptionsListByShareOptions struct {
	// Continuation Token
	SkipToken *string
}

// ProviderShareSubscriptionsReinstateOptions contains the optional parameters for the ProviderShareSubscriptions.Reinstate method.
type ProviderShareSubscriptionsReinstateOptions struct {
	// placeholder for future optional parameters
}

// ProxyDto - Base data transfer object implementation for proxy resources.
type ProxyDto struct {
	// READ-ONLY; The resource id of the azure resource
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the azure resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; System Data of the Azure resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Type of the azure resource
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProxyDto.
func (p ProxyDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProxyDto.
func (p *ProxyDto) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return p.unmarshalInternal(rawMsg)
}

func (p ProxyDto) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", p.ID)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "systemData", p.SystemData)
	populate(objectMap, "type", p.Type)
}

func (p *ProxyDto) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &p.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &p.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SQLDBTableDataSet - A SQL DB table data set.
type SQLDBTableDataSet struct {
	DataSet
	// SQL DB table data set properties.
	Properties *SQLDBTableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDBTableDataSet.
func (s SQLDBTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSet.marshalInternal(objectMap, DataSetKindSQLDBTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDBTableDataSet.
func (s *SQLDBTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDBTableDataSetMapping - A SQL DB Table data set mapping.
type SQLDBTableDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Sql DB data set mapping properties.
	Properties *SQLDBTableDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDBTableDataSetMapping.
func (s SQLDBTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindSQLDBTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDBTableDataSetMapping.
func (s *SQLDBTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDBTableDataSetMappingProperties - Properties of the SQL DB table data set mapping.
type SQLDBTableDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; DatabaseName name of the sink data set
	DatabaseName *string `json:"databaseName,omitempty"`

	// REQUIRED; Resource id of SQL server
	SQLServerResourceID *string `json:"sqlServerResourceId,omitempty"`

	// REQUIRED; Schema of the table. Default value is dbo.
	SchemaName *string `json:"schemaName,omitempty"`

	// REQUIRED; SQL DB table name.
	TableName *string `json:"tableName,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// SQLDBTableProperties - Properties of the SQL DB table data set.
type SQLDBTableProperties struct {
	// REQUIRED; Database name of the source data set
	DatabaseName *string `json:"databaseName,omitempty"`

	// REQUIRED; Resource id of SQL server
	SQLServerResourceID *string `json:"sqlServerResourceId,omitempty"`

	// REQUIRED; Schema of the table. Default value is dbo.
	SchemaName *string `json:"schemaName,omitempty"`

	// REQUIRED; SQL DB table name.
	TableName *string `json:"tableName,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// SQLDWTableDataSet - A SQL DW table data set.
type SQLDWTableDataSet struct {
	DataSet
	// SQL DW table data set properties.
	Properties *SQLDWTableProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDWTableDataSet.
func (s SQLDWTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSet.marshalInternal(objectMap, DataSetKindSQLDWTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDWTableDataSet.
func (s *SQLDWTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDWTableDataSetMapping - A SQL DW Table data set mapping.
type SQLDWTableDataSetMapping struct {
	DataSetMapping
	// REQUIRED; Sql DW data set mapping properties.
	Properties *SQLDWTableDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SQLDWTableDataSetMapping.
func (s SQLDWTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindSQLDWTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDWTableDataSetMapping.
func (s *SQLDWTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SQLDWTableDataSetMappingProperties - Properties of the SQL DW table data set mapping.
type SQLDWTableDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; DataWarehouse name of the source data set
	DataWarehouseName *string `json:"dataWarehouseName,omitempty"`

	// REQUIRED; Resource id of SQL server
	SQLServerResourceID *string `json:"sqlServerResourceId,omitempty"`

	// REQUIRED; Schema of the table. Default value is dbo.
	SchemaName *string `json:"schemaName,omitempty"`

	// REQUIRED; SQL DW table name.
	TableName *string `json:"tableName,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// SQLDWTableProperties - Properties of the SQL DW table data set.
type SQLDWTableProperties struct {
	// REQUIRED; DataWarehouse name of the source data set
	DataWarehouseName *string `json:"dataWarehouseName,omitempty"`

	// REQUIRED; Resource id of SQL server
	SQLServerResourceID *string `json:"sqlServerResourceId,omitempty"`

	// REQUIRED; Schema of the table. Default value is dbo.
	SchemaName *string `json:"schemaName,omitempty"`

	// REQUIRED; SQL DW table name.
	TableName *string `json:"tableName,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// ScheduledSourceShareSynchronizationSettingProperties - A Scheduled source synchronization setting data transfer object.
type ScheduledSourceShareSynchronizationSettingProperties struct {
	// Recurrence Interval
	RecurrenceInterval *RecurrenceInterval `json:"recurrenceInterval,omitempty"`

	// Synchronization time
	SynchronizationTime *time.Time `json:"synchronizationTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSourceShareSynchronizationSettingProperties.
func (s ScheduledSourceShareSynchronizationSettingProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSourceShareSynchronizationSettingProperties.
func (s *ScheduledSourceShareSynchronizationSettingProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ScheduledSourceSynchronizationSetting - A type of synchronization setting based on schedule
type ScheduledSourceSynchronizationSetting struct {
	SourceShareSynchronizationSetting
	// Properties of scheduled synchronization
	Properties *ScheduledSourceShareSynchronizationSettingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSourceSynchronizationSetting.
func (s ScheduledSourceSynchronizationSetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.SourceShareSynchronizationSetting.marshalInternal(objectMap, SourceShareSynchronizationSettingKindScheduleBased)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSourceSynchronizationSetting.
func (s *ScheduledSourceSynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.SourceShareSynchronizationSetting.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ScheduledSynchronizationSetting - A type of synchronization setting based on schedule
type ScheduledSynchronizationSetting struct {
	SynchronizationSetting
	// REQUIRED; Properties of scheduled synchronization
	Properties *ScheduledSynchronizationSettingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSynchronizationSetting.
func (s ScheduledSynchronizationSetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.SynchronizationSetting.marshalInternal(objectMap, SynchronizationSettingKindScheduleBased)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSynchronizationSetting.
func (s *ScheduledSynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.SynchronizationSetting.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ScheduledSynchronizationSettingProperties - A Scheduled synchronization setting data transfer object.
type ScheduledSynchronizationSettingProperties struct {
	// REQUIRED; Recurrence Interval
	RecurrenceInterval *RecurrenceInterval `json:"recurrenceInterval,omitempty"`

	// REQUIRED; Synchronization time
	SynchronizationTime *time.Time `json:"synchronizationTime,omitempty"`

	// READ-ONLY; Time at which the synchronization setting was created.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the provisioning state
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the synchronization setting.
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSynchronizationSettingProperties.
func (s ScheduledSynchronizationSettingProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSynchronizationSettingProperties.
func (s *ScheduledSynchronizationSettingProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ScheduledTrigger - A type of trigger based on schedule
type ScheduledTrigger struct {
	Trigger
	// REQUIRED; Properties of scheduled synchronization
	Properties *ScheduledTriggerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledTrigger.
func (s ScheduledTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.Trigger.marshalInternal(objectMap, TriggerKindScheduleBased)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledTrigger.
func (s *ScheduledTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.Trigger.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ScheduledTriggerProperties - A Scheduled trigger data transfer object.
type ScheduledTriggerProperties struct {
	// REQUIRED; Recurrence Interval
	RecurrenceInterval *RecurrenceInterval `json:"recurrenceInterval,omitempty"`

	// REQUIRED; Synchronization time
	SynchronizationTime *time.Time `json:"synchronizationTime,omitempty"`

	// Synchronization mode
	SynchronizationMode *SynchronizationMode `json:"synchronizationMode,omitempty"`

	// READ-ONLY; Time at which the trigger was created.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets the provisioning state
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Gets the trigger state
	TriggerStatus *TriggerStatus `json:"triggerStatus,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the trigger.
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledTriggerProperties.
func (s ScheduledTriggerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	populate(objectMap, "triggerStatus", s.TriggerStatus)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledTriggerProperties.
func (s *ScheduledTriggerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		case "triggerStatus":
			err = unpopulate(val, &s.TriggerStatus)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Share - A share data transfer object.
type Share struct {
	ProxyDto
	// Properties on the share
	Properties *ShareProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Share.
func (s Share) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Share.
func (s *Share) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ShareList - List response for get Shares.
type ShareList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*Share `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareList.
func (s ShareList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ShareProperties - Share property bag.
type ShareProperties struct {
	// Share description.
	Description *string `json:"description,omitempty"`

	// Share kind.
	ShareKind *ShareKind `json:"shareKind,omitempty"`

	// Share terms.
	Terms *string `json:"terms,omitempty"`

	// READ-ONLY; Time at which the share was created.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the provisioning state
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Email of the user who created the resource
	UserEmail *string `json:"userEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the resource
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareProperties.
func (s ShareProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "shareKind", s.ShareKind)
	populate(objectMap, "terms", s.Terms)
	populate(objectMap, "userEmail", s.UserEmail)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareProperties.
func (s *ShareProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "shareKind":
			err = unpopulate(val, &s.ShareKind)
			delete(rawMsg, key)
		case "terms":
			err = unpopulate(val, &s.Terms)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &s.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ShareSubscription - A share subscription data transfer object.
type ShareSubscription struct {
	ProxyDto
	// REQUIRED; Properties on the share subscription
	Properties *ShareSubscriptionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscription.
func (s ShareSubscription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyDto.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSubscription.
func (s *ShareSubscription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ShareSubscriptionList - List response for get ShareSubscription.
type ShareSubscriptionList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ShareSubscription `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionList.
func (s ShareSubscriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ShareSubscriptionProperties - Share subscription property bag.
type ShareSubscriptionProperties struct {
	// REQUIRED; The invitation id.
	InvitationID *string `json:"invitationId,omitempty"`

	// REQUIRED; Source share location.
	SourceShareLocation *string `json:"sourceShareLocation,omitempty"`

	// The expiration date of the share subscription.
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`

	// READ-ONLY; Time at which the share subscription was created.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`

	// READ-ONLY; Email of the provider who created the resource
	ProviderEmail *string `json:"providerEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the provider who created the resource
	ProviderName *string `json:"providerName,omitempty" azure:"ro"`

	// READ-ONLY; Tenant name of the provider who created the resource
	ProviderTenantName *string `json:"providerTenantName,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the share subscription
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Description of share
	ShareDescription *string `json:"shareDescription,omitempty" azure:"ro"`

	// READ-ONLY; Kind of share
	ShareKind *ShareKind `json:"shareKind,omitempty" azure:"ro"`

	// READ-ONLY; Name of the share
	ShareName *string `json:"shareName,omitempty" azure:"ro"`

	// READ-ONLY; Gets the current status of share subscription.
	ShareSubscriptionStatus *ShareSubscriptionStatus `json:"shareSubscriptionStatus,omitempty" azure:"ro"`

	// READ-ONLY; Terms of a share
	ShareTerms *string `json:"shareTerms,omitempty" azure:"ro"`

	// READ-ONLY; Email of the user who created the resource
	UserEmail *string `json:"userEmail,omitempty" azure:"ro"`

	// READ-ONLY; Name of the user who created the resource
	UserName *string `json:"userName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionProperties.
func (s ShareSubscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populateTimeRFC3339(objectMap, "expirationDate", s.ExpirationDate)
	populate(objectMap, "invitationId", s.InvitationID)
	populate(objectMap, "providerEmail", s.ProviderEmail)
	populate(objectMap, "providerName", s.ProviderName)
	populate(objectMap, "providerTenantName", s.ProviderTenantName)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "shareDescription", s.ShareDescription)
	populate(objectMap, "shareKind", s.ShareKind)
	populate(objectMap, "shareName", s.ShareName)
	populate(objectMap, "shareSubscriptionStatus", s.ShareSubscriptionStatus)
	populate(objectMap, "shareTerms", s.ShareTerms)
	populate(objectMap, "sourceShareLocation", s.SourceShareLocation)
	populate(objectMap, "userEmail", s.UserEmail)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSubscriptionProperties.
func (s *ShareSubscriptionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &s.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &s.InvitationID)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &s.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &s.ProviderName)
			delete(rawMsg, key)
		case "providerTenantName":
			err = unpopulate(val, &s.ProviderTenantName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "shareDescription":
			err = unpopulate(val, &s.ShareDescription)
			delete(rawMsg, key)
		case "shareKind":
			err = unpopulate(val, &s.ShareKind)
			delete(rawMsg, key)
		case "shareName":
			err = unpopulate(val, &s.ShareName)
			delete(rawMsg, key)
		case "shareSubscriptionStatus":
			err = unpopulate(val, &s.ShareSubscriptionStatus)
			delete(rawMsg, key)
		case "shareTerms":
			err = unpopulate(val, &s.ShareTerms)
			delete(rawMsg, key)
		case "sourceShareLocation":
			err = unpopulate(val, &s.SourceShareLocation)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &s.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ShareSubscriptionSynchronization - A ShareSubscriptionSynchronization data transfer object.
type ShareSubscriptionSynchronization struct {
	// REQUIRED; Synchronization id
	SynchronizationID *string `json:"synchronizationId,omitempty"`

	// READ-ONLY; Synchronization duration
	DurationMs *int32 `json:"durationMs,omitempty" azure:"ro"`

	// READ-ONLY; End time of synchronization
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; message of Synchronization
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; start time of synchronization
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Raw Status
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Synchronization Mode
	SynchronizationMode *SynchronizationMode `json:"synchronizationMode,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionSynchronization.
func (s ShareSubscriptionSynchronization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "message", s.Message)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "synchronizationId", s.SynchronizationID)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSubscriptionSynchronization.
func (s *ShareSubscriptionSynchronization) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "synchronizationId":
			err = unpopulate(val, &s.SynchronizationID)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ShareSubscriptionSynchronizationList - A consumer side list of share subscription synchronizations
type ShareSubscriptionSynchronizationList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ShareSubscriptionSynchronization `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionSynchronizationList.
func (s ShareSubscriptionSynchronizationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ShareSubscriptionsBeginCancelSynchronizationOptions contains the optional parameters for the ShareSubscriptions.BeginCancelSynchronization method.
type ShareSubscriptionsBeginCancelSynchronizationOptions struct {
	// placeholder for future optional parameters
}

// ShareSubscriptionsBeginDeleteOptions contains the optional parameters for the ShareSubscriptions.BeginDelete method.
type ShareSubscriptionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ShareSubscriptionsBeginSynchronizeOptions contains the optional parameters for the ShareSubscriptions.BeginSynchronize method.
type ShareSubscriptionsBeginSynchronizeOptions struct {
	// placeholder for future optional parameters
}

// ShareSubscriptionsCreateOptions contains the optional parameters for the ShareSubscriptions.Create method.
type ShareSubscriptionsCreateOptions struct {
	// placeholder for future optional parameters
}

// ShareSubscriptionsGetOptions contains the optional parameters for the ShareSubscriptions.Get method.
type ShareSubscriptionsGetOptions struct {
	// placeholder for future optional parameters
}

// ShareSubscriptionsListByAccountOptions contains the optional parameters for the ShareSubscriptions.ListByAccount method.
type ShareSubscriptionsListByAccountOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation Token
	SkipToken *string
}

// ShareSubscriptionsListSourceShareSynchronizationSettingsOptions contains the optional parameters for the ShareSubscriptions.ListSourceShareSynchronizationSettings
// method.
type ShareSubscriptionsListSourceShareSynchronizationSettingsOptions struct {
	// Continuation token
	SkipToken *string
}

// ShareSubscriptionsListSynchronizationDetailsOptions contains the optional parameters for the ShareSubscriptions.ListSynchronizationDetails method.
type ShareSubscriptionsListSynchronizationDetailsOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation token
	SkipToken *string
}

// ShareSubscriptionsListSynchronizationsOptions contains the optional parameters for the ShareSubscriptions.ListSynchronizations method.
type ShareSubscriptionsListSynchronizationsOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation token
	SkipToken *string
}

// ShareSynchronization - A ShareSynchronization data transfer object.
type ShareSynchronization struct {
	// Email of the user who created the synchronization
	ConsumerEmail *string `json:"consumerEmail,omitempty"`

	// Name of the user who created the synchronization
	ConsumerName *string `json:"consumerName,omitempty"`

	// Tenant name of the consumer who created the synchronization
	ConsumerTenantName *string `json:"consumerTenantName,omitempty"`

	// synchronization duration
	DurationMs *int32 `json:"durationMs,omitempty"`

	// End time of synchronization
	EndTime *time.Time `json:"endTime,omitempty"`

	// message of synchronization
	Message *string `json:"message,omitempty"`

	// start time of synchronization
	StartTime *time.Time `json:"startTime,omitempty"`

	// Raw Status
	Status *string `json:"status,omitempty"`

	// Synchronization id
	SynchronizationID *string `json:"synchronizationId,omitempty"`

	// READ-ONLY; Synchronization mode
	SynchronizationMode *SynchronizationMode `json:"synchronizationMode,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSynchronization.
func (s ShareSynchronization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerEmail", s.ConsumerEmail)
	populate(objectMap, "consumerName", s.ConsumerName)
	populate(objectMap, "consumerTenantName", s.ConsumerTenantName)
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "message", s.Message)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "synchronizationId", s.SynchronizationID)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSynchronization.
func (s *ShareSynchronization) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerEmail":
			err = unpopulate(val, &s.ConsumerEmail)
			delete(rawMsg, key)
		case "consumerName":
			err = unpopulate(val, &s.ConsumerName)
			delete(rawMsg, key)
		case "consumerTenantName":
			err = unpopulate(val, &s.ConsumerTenantName)
			delete(rawMsg, key)
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "synchronizationId":
			err = unpopulate(val, &s.SynchronizationID)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ShareSynchronizationList - List response for get ShareSynchronization.
type ShareSynchronizationList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*ShareSynchronization `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ShareSynchronizationList.
func (s ShareSynchronizationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SharesBeginDeleteOptions contains the optional parameters for the Shares.BeginDelete method.
type SharesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SharesCreateOptions contains the optional parameters for the Shares.Create method.
type SharesCreateOptions struct {
	// placeholder for future optional parameters
}

// SharesGetOptions contains the optional parameters for the Shares.Get method.
type SharesGetOptions struct {
	// placeholder for future optional parameters
}

// SharesListByAccountOptions contains the optional parameters for the Shares.ListByAccount method.
type SharesListByAccountOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation Token
	SkipToken *string
}

// SharesListSynchronizationDetailsOptions contains the optional parameters for the Shares.ListSynchronizationDetails method.
type SharesListSynchronizationDetailsOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation token
	SkipToken *string
}

// SharesListSynchronizationsOptions contains the optional parameters for the Shares.ListSynchronizations method.
type SharesListSynchronizationsOptions struct {
	// Filters the results using OData syntax.
	Filter *string
	// Sorts the results using OData syntax.
	Orderby *string
	// Continuation token
	SkipToken *string
}

// SourceShareSynchronizationSettingClassification provides polymorphic access to related types.
// Call the interface's GetSourceShareSynchronizationSetting() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ScheduledSourceSynchronizationSetting, *SourceShareSynchronizationSetting
type SourceShareSynchronizationSettingClassification interface {
	// GetSourceShareSynchronizationSetting returns the SourceShareSynchronizationSetting content of the underlying type.
	GetSourceShareSynchronizationSetting() *SourceShareSynchronizationSetting
}

// SourceShareSynchronizationSetting - A view of synchronization setting added by the provider
type SourceShareSynchronizationSetting struct {
	// REQUIRED; Kind of synchronization setting on share.
	Kind *SourceShareSynchronizationSettingKind `json:"kind,omitempty"`
}

// GetSourceShareSynchronizationSetting implements the SourceShareSynchronizationSettingClassification interface for type SourceShareSynchronizationSetting.
func (s *SourceShareSynchronizationSetting) GetSourceShareSynchronizationSetting() *SourceShareSynchronizationSetting {
	return s
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceShareSynchronizationSetting.
func (s *SourceShareSynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return s.unmarshalInternal(rawMsg)
}

func (s SourceShareSynchronizationSetting) marshalInternal(objectMap map[string]interface{}, discValue SourceShareSynchronizationSettingKind) {
	s.Kind = &discValue
	objectMap["kind"] = s.Kind
}

func (s *SourceShareSynchronizationSetting) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SourceShareSynchronizationSettingList - List response for get source share Synchronization settings
type SourceShareSynchronizationSettingList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []SourceShareSynchronizationSettingClassification `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceShareSynchronizationSettingList.
func (s SourceShareSynchronizationSettingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceShareSynchronizationSettingList.
func (s *SourceShareSynchronizationSettingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &s.NextLink)
			delete(rawMsg, key)
		case "value":
			s.Value, err = unmarshalSourceShareSynchronizationSettingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SynapseWorkspaceSQLPoolTableDataSet - A Synapse Workspace Sql Pool Table data set.
type SynapseWorkspaceSQLPoolTableDataSet struct {
	DataSet
	// REQUIRED; Synapse Workspace Sql Pool Table data set properties.
	Properties *SynapseWorkspaceSQLPoolTableDataSetProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SynapseWorkspaceSQLPoolTableDataSet.
func (s SynapseWorkspaceSQLPoolTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSet.marshalInternal(objectMap, DataSetKindSynapseWorkspaceSQLPoolTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynapseWorkspaceSQLPoolTableDataSet.
func (s *SynapseWorkspaceSQLPoolTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSet.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SynapseWorkspaceSQLPoolTableDataSetMapping - A Synapse Workspace Sql Pool Table data set mapping
type SynapseWorkspaceSQLPoolTableDataSetMapping struct {
	DataSetMapping
	// REQUIRED; A Synapse Workspace Sql Pool Table data set mapping properties.
	Properties *SynapseWorkspaceSQLPoolTableDataSetMappingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SynapseWorkspaceSQLPoolTableDataSetMapping.
func (s SynapseWorkspaceSQLPoolTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DataSetMapping.marshalInternal(objectMap, DataSetMappingKindSynapseWorkspaceSQLPoolTable)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynapseWorkspaceSQLPoolTableDataSetMapping.
func (s *SynapseWorkspaceSQLPoolTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DataSetMapping.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SynapseWorkspaceSQLPoolTableDataSetMappingProperties - Properties of the Synapse Workspace SQL Pool Table data set mapping
type SynapseWorkspaceSQLPoolTableDataSetMappingProperties struct {
	// REQUIRED; The id of the source data set.
	DataSetID *string `json:"dataSetId,omitempty"`

	// REQUIRED; Resource id of the Synapse Workspace SQL Pool Table
	SynapseWorkspaceSQLPoolTableResourceID *string `json:"synapseWorkspaceSqlPoolTableResourceId,omitempty"`

	// READ-ONLY; Gets the status of the data set mapping.
	DataSetMappingStatus *DataSetMappingStatus `json:"dataSetMappingStatus,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the data set mapping.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// SynapseWorkspaceSQLPoolTableDataSetProperties - Properties of the Synapse Workspace SQL Pool Table data set.
type SynapseWorkspaceSQLPoolTableDataSetProperties struct {
	// REQUIRED; Resource id of the Synapse Workspace SQL Pool Table
	SynapseWorkspaceSQLPoolTableResourceID *string `json:"synapseWorkspaceSqlPoolTableResourceId,omitempty"`

	// READ-ONLY; Unique id for identifying a data set resource
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`
}

// SynchronizationDetails - Synchronization details at data set level
type SynchronizationDetails struct {
	// READ-ONLY; Id of data set
	DataSetID *string `json:"dataSetId,omitempty" azure:"ro"`

	// READ-ONLY; Type of the data set
	DataSetType *DataSetType `json:"dataSetType,omitempty" azure:"ro"`

	// READ-ONLY; Duration of data set level copy
	DurationMs *int32 `json:"durationMs,omitempty" azure:"ro"`

	// READ-ONLY; End time of data set level copy
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The number of files read from the source data set
	FilesRead *int64 `json:"filesRead,omitempty" azure:"ro"`

	// READ-ONLY; The number of files written into the sink data set
	FilesWritten *int64 `json:"filesWritten,omitempty" azure:"ro"`

	// READ-ONLY; Error message if any
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Name of the data set
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The number of files copied into the sink data set
	RowsCopied *int64 `json:"rowsCopied,omitempty" azure:"ro"`

	// READ-ONLY; The number of rows read from the source data set.
	RowsRead *int64 `json:"rowsRead,omitempty" azure:"ro"`

	// READ-ONLY; The size of the data read from the source data set in bytes
	SizeRead *int64 `json:"sizeRead,omitempty" azure:"ro"`

	// READ-ONLY; The size of the data written into the sink data set in bytes
	SizeWritten *int64 `json:"sizeWritten,omitempty" azure:"ro"`

	// READ-ONLY; Start time of data set level copy
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`

	// READ-ONLY; Raw Status
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The vCore units consumed for the data set synchronization
	VCore *int64 `json:"vCore,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SynchronizationDetails.
func (s SynchronizationDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSetId", s.DataSetID)
	populate(objectMap, "dataSetType", s.DataSetType)
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "filesRead", s.FilesRead)
	populate(objectMap, "filesWritten", s.FilesWritten)
	populate(objectMap, "message", s.Message)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "rowsCopied", s.RowsCopied)
	populate(objectMap, "rowsRead", s.RowsRead)
	populate(objectMap, "sizeRead", s.SizeRead)
	populate(objectMap, "sizeWritten", s.SizeWritten)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "vCore", s.VCore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationDetails.
func (s *SynchronizationDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataSetId":
			err = unpopulate(val, &s.DataSetID)
			delete(rawMsg, key)
		case "dataSetType":
			err = unpopulate(val, &s.DataSetType)
			delete(rawMsg, key)
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "filesRead":
			err = unpopulate(val, &s.FilesRead)
			delete(rawMsg, key)
		case "filesWritten":
			err = unpopulate(val, &s.FilesWritten)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "rowsCopied":
			err = unpopulate(val, &s.RowsCopied)
			delete(rawMsg, key)
		case "rowsRead":
			err = unpopulate(val, &s.RowsRead)
			delete(rawMsg, key)
		case "sizeRead":
			err = unpopulate(val, &s.SizeRead)
			delete(rawMsg, key)
		case "sizeWritten":
			err = unpopulate(val, &s.SizeWritten)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "vCore":
			err = unpopulate(val, &s.VCore)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SynchronizationDetailsList - details of synchronization
type SynchronizationDetailsList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []*SynchronizationDetails `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SynchronizationDetailsList.
func (s SynchronizationDetailsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SynchronizationSettingClassification provides polymorphic access to related types.
// Call the interface's GetSynchronizationSetting() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ScheduledSynchronizationSetting, *SynchronizationSetting
type SynchronizationSettingClassification interface {
	// GetSynchronizationSetting returns the SynchronizationSetting content of the underlying type.
	GetSynchronizationSetting() *SynchronizationSetting
}

// SynchronizationSetting - A Synchronization Setting data transfer object.
type SynchronizationSetting struct {
	ProxyDto
	// REQUIRED; Kind of synchronization setting.
	Kind *SynchronizationSettingKind `json:"kind,omitempty"`
}

// GetSynchronizationSetting implements the SynchronizationSettingClassification interface for type SynchronizationSetting.
func (s *SynchronizationSetting) GetSynchronizationSetting() *SynchronizationSetting { return s }

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationSetting.
func (s *SynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return s.unmarshalInternal(rawMsg)
}

func (s SynchronizationSetting) marshalInternal(objectMap map[string]interface{}, discValue SynchronizationSettingKind) {
	s.ProxyDto.marshalInternal(objectMap)
	s.Kind = &discValue
	objectMap["kind"] = s.Kind
}

func (s *SynchronizationSetting) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SynchronizationSettingList - List response for get Synchronization settings
type SynchronizationSettingList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []SynchronizationSettingClassification `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SynchronizationSettingList.
func (s SynchronizationSettingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationSettingList.
func (s *SynchronizationSettingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &s.NextLink)
			delete(rawMsg, key)
		case "value":
			s.Value, err = unmarshalSynchronizationSettingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SynchronizationSettingsBeginDeleteOptions contains the optional parameters for the SynchronizationSettings.BeginDelete method.
type SynchronizationSettingsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SynchronizationSettingsCreateOptions contains the optional parameters for the SynchronizationSettings.Create method.
type SynchronizationSettingsCreateOptions struct {
	// placeholder for future optional parameters
}

// SynchronizationSettingsGetOptions contains the optional parameters for the SynchronizationSettings.Get method.
type SynchronizationSettingsGetOptions struct {
	// placeholder for future optional parameters
}

// SynchronizationSettingsListByShareOptions contains the optional parameters for the SynchronizationSettings.ListByShare method.
type SynchronizationSettingsListByShareOptions struct {
	// continuation token
	SkipToken *string
}

// Synchronize - Payload for the synchronizing the data.
type Synchronize struct {
	// Mode of synchronization used in triggers and snapshot sync. Incremental by default
	SynchronizationMode *SynchronizationMode `json:"synchronizationMode,omitempty"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *LastModifiedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TriggerClassification provides polymorphic access to related types.
// Call the interface's GetTrigger() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ScheduledTrigger, *Trigger
type TriggerClassification interface {
	// GetTrigger returns the Trigger content of the underlying type.
	GetTrigger() *Trigger
}

// Trigger - A Trigger data transfer object.
type Trigger struct {
	ProxyDto
	// REQUIRED; Kind of synchronization on trigger.
	Kind *TriggerKind `json:"kind,omitempty"`
}

// GetTrigger implements the TriggerClassification interface for type Trigger.
func (t *Trigger) GetTrigger() *Trigger { return t }

// UnmarshalJSON implements the json.Unmarshaller interface for type Trigger.
func (t *Trigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t Trigger) marshalInternal(objectMap map[string]interface{}, discValue TriggerKind) {
	t.ProxyDto.marshalInternal(objectMap)
	t.Kind = &discValue
	objectMap["kind"] = t.Kind
}

func (t *Trigger) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &t.Kind)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := t.ProxyDto.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// TriggerList - List response for get triggers
type TriggerList struct {
	// REQUIRED; Collection of items of type DataTransferObjects.
	Value []TriggerClassification `json:"value,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggerList.
func (t TriggerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggerList.
func (t *TriggerList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &t.NextLink)
			delete(rawMsg, key)
		case "value":
			t.Value, err = unmarshalTriggerClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TriggersBeginCreateOptions contains the optional parameters for the Triggers.BeginCreate method.
type TriggersBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// TriggersBeginDeleteOptions contains the optional parameters for the Triggers.BeginDelete method.
type TriggersBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// TriggersGetOptions contains the optional parameters for the Triggers.Get method.
type TriggersGetOptions struct {
	// placeholder for future optional parameters
}

// TriggersListByShareSubscriptionOptions contains the optional parameters for the Triggers.ListByShareSubscription method.
type TriggersListByShareSubscriptionOptions struct {
	// Continuation token
	SkipToken *string
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
