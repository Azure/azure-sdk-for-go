//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// GetDataSet implements the DataSetClassification interface for type ADLSGen1FileDataSet.
func (a *ADLSGen1FileDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen1FileDataSet.
func (a ADLSGen1FileDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetKindAdlsGen1File
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen1FileDataSet.
func (a *ADLSGen1FileDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type ADLSGen1FolderDataSet.
func (a *ADLSGen1FolderDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen1FolderDataSet.
func (a ADLSGen1FolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetKindAdlsGen1Folder
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen1FolderDataSet.
func (a *ADLSGen1FolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type ADLSGen2FileDataSet.
func (a *ADLSGen2FileDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileDataSet.
func (a ADLSGen2FileDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetKindAdlsGen2File
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileDataSet.
func (a *ADLSGen2FileDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type ADLSGen2FileDataSetMapping.
func (a *ADLSGen2FileDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileDataSetMapping.
func (a ADLSGen2FileDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetMappingKindAdlsGen2File
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileDataSetMapping.
func (a *ADLSGen2FileDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type ADLSGen2FileSystemDataSet.
func (a *ADLSGen2FileSystemDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileSystemDataSet.
func (a ADLSGen2FileSystemDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetKindAdlsGen2FileSystem
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileSystemDataSet.
func (a *ADLSGen2FileSystemDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type ADLSGen2FileSystemDataSetMapping.
func (a *ADLSGen2FileSystemDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FileSystemDataSetMapping.
func (a ADLSGen2FileSystemDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetMappingKindAdlsGen2FileSystem
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FileSystemDataSetMapping.
func (a *ADLSGen2FileSystemDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type ADLSGen2FolderDataSet.
func (a *ADLSGen2FolderDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FolderDataSet.
func (a ADLSGen2FolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetKindAdlsGen2Folder
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FolderDataSet.
func (a *ADLSGen2FolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type ADLSGen2FolderDataSetMapping.
func (a *ADLSGen2FolderDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       a.Kind,
		ID:         a.ID,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ADLSGen2FolderDataSetMapping.
func (a ADLSGen2FolderDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	objectMap["kind"] = DataSetMappingKindAdlsGen2Folder
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ADLSGen2FolderDataSetMapping.
func (a *ADLSGen2FolderDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &a.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &a.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Account.
func (a Account) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AccountList.
func (a AccountList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AccountProperties.
func (a AccountProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", a.CreatedAt)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "userEmail", a.UserEmail)
	populate(objectMap, "userName", a.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AccountProperties.
func (a *AccountProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &a.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &a.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &a.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AccountUpdateParameters.
func (a AccountUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// GetDataSet implements the DataSetClassification interface for type BlobContainerDataSet.
func (b *BlobContainerDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobContainerDataSet.
func (b BlobContainerDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetKindContainer
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobContainerDataSet.
func (b *BlobContainerDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type BlobContainerDataSetMapping.
func (b *BlobContainerDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobContainerDataSetMapping.
func (b BlobContainerDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetMappingKindContainer
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobContainerDataSetMapping.
func (b *BlobContainerDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type BlobDataSet.
func (b *BlobDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobDataSet.
func (b BlobDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetKindBlob
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobDataSet.
func (b *BlobDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type BlobDataSetMapping.
func (b *BlobDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobDataSetMapping.
func (b BlobDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetMappingKindBlob
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobDataSetMapping.
func (b *BlobDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type BlobFolderDataSet.
func (b *BlobFolderDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobFolderDataSet.
func (b BlobFolderDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetKindBlobFolder
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobFolderDataSet.
func (b *BlobFolderDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type BlobFolderDataSetMapping.
func (b *BlobFolderDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       b.Kind,
		ID:         b.ID,
		Name:       b.Name,
		SystemData: b.SystemData,
		Type:       b.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type BlobFolderDataSetMapping.
func (b BlobFolderDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	objectMap["kind"] = DataSetMappingKindBlobFolder
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "systemData", b.SystemData)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BlobFolderDataSetMapping.
func (b *BlobFolderDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &b.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &b.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &b.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &b.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerInvitationList.
func (c ConsumerInvitationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerInvitationProperties.
func (c ConsumerInvitationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSetCount", c.DataSetCount)
	populate(objectMap, "description", c.Description)
	populateTimeRFC3339(objectMap, "expirationDate", c.ExpirationDate)
	populate(objectMap, "invitationId", c.InvitationID)
	populate(objectMap, "invitationStatus", c.InvitationStatus)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "providerEmail", c.ProviderEmail)
	populate(objectMap, "providerName", c.ProviderName)
	populate(objectMap, "providerTenantName", c.ProviderTenantName)
	populateTimeRFC3339(objectMap, "respondedAt", c.RespondedAt)
	populateTimeRFC3339(objectMap, "sentAt", c.SentAt)
	populate(objectMap, "shareName", c.ShareName)
	populate(objectMap, "termsOfUse", c.TermsOfUse)
	populate(objectMap, "userEmail", c.UserEmail)
	populate(objectMap, "userName", c.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConsumerInvitationProperties.
func (c *ConsumerInvitationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataSetCount":
			err = unpopulate(val, &c.DataSetCount)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &c.Description)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &c.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &c.InvitationID)
			delete(rawMsg, key)
		case "invitationStatus":
			err = unpopulate(val, &c.InvitationStatus)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &c.Location)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &c.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &c.ProviderName)
			delete(rawMsg, key)
		case "providerTenantName":
			err = unpopulate(val, &c.ProviderTenantName)
			delete(rawMsg, key)
		case "respondedAt":
			err = unpopulateTimeRFC3339(val, &c.RespondedAt)
			delete(rawMsg, key)
		case "sentAt":
			err = unpopulateTimeRFC3339(val, &c.SentAt)
			delete(rawMsg, key)
		case "shareName":
			err = unpopulate(val, &c.ShareName)
			delete(rawMsg, key)
		case "termsOfUse":
			err = unpopulate(val, &c.TermsOfUse)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &c.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &c.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConsumerSourceDataSetList.
func (c ConsumerSourceDataSetList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// GetDataSet implements the DataSetClassification interface for type DataSet.
func (d *DataSet) GetDataSet() *DataSet { return d }

// MarshalJSON implements the json.Marshaller interface for type DataSetList.
func (d DataSetList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetList.
func (d *DataSetList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &d.NextLink)
			delete(rawMsg, key)
		case "value":
			d.Value, err = unmarshalDataSetClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type DataSetMapping.
func (d *DataSetMapping) GetDataSetMapping() *DataSetMapping { return d }

// MarshalJSON implements the json.Marshaller interface for type DataSetMappingList.
func (d DataSetMappingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetMappingList.
func (d *DataSetMappingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &d.NextLink)
			delete(rawMsg, key)
		case "value":
			d.Value, err = unmarshalDataSetMappingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DefaultDto.
func (d DefaultDto) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "systemData", d.SystemData)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EmailRegistration.
func (e EmailRegistration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activationCode", e.ActivationCode)
	populateTimeRFC3339(objectMap, "activationExpirationDate", e.ActivationExpirationDate)
	populate(objectMap, "email", e.Email)
	populate(objectMap, "registrationStatus", e.RegistrationStatus)
	populate(objectMap, "tenantId", e.TenantID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EmailRegistration.
func (e *EmailRegistration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "activationCode":
			err = unpopulate(val, &e.ActivationCode)
			delete(rawMsg, key)
		case "activationExpirationDate":
			err = unpopulateTimeRFC3339(val, &e.ActivationExpirationDate)
			delete(rawMsg, key)
		case "email":
			err = unpopulate(val, &e.Email)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &e.RegistrationStatus)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, &e.TenantID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorInfo.
func (e ErrorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InvitationList.
func (i InvitationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InvitationProperties.
func (i InvitationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "expirationDate", i.ExpirationDate)
	populate(objectMap, "invitationId", i.InvitationID)
	populate(objectMap, "invitationStatus", i.InvitationStatus)
	populateTimeRFC3339(objectMap, "respondedAt", i.RespondedAt)
	populateTimeRFC3339(objectMap, "sentAt", i.SentAt)
	populate(objectMap, "targetActiveDirectoryId", i.TargetActiveDirectoryID)
	populate(objectMap, "targetEmail", i.TargetEmail)
	populate(objectMap, "targetObjectId", i.TargetObjectID)
	populate(objectMap, "userEmail", i.UserEmail)
	populate(objectMap, "userName", i.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InvitationProperties.
func (i *InvitationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &i.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &i.InvitationID)
			delete(rawMsg, key)
		case "invitationStatus":
			err = unpopulate(val, &i.InvitationStatus)
			delete(rawMsg, key)
		case "respondedAt":
			err = unpopulateTimeRFC3339(val, &i.RespondedAt)
			delete(rawMsg, key)
		case "sentAt":
			err = unpopulateTimeRFC3339(val, &i.SentAt)
			delete(rawMsg, key)
		case "targetActiveDirectoryId":
			err = unpopulate(val, &i.TargetActiveDirectoryID)
			delete(rawMsg, key)
		case "targetEmail":
			err = unpopulate(val, &i.TargetEmail)
			delete(rawMsg, key)
		case "targetObjectId":
			err = unpopulate(val, &i.TargetObjectID)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &i.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &i.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type KustoClusterDataSet.
func (k *KustoClusterDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       k.Kind,
		ID:         k.ID,
		Name:       k.Name,
		SystemData: k.SystemData,
		Type:       k.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type KustoClusterDataSet.
func (k KustoClusterDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", k.ID)
	objectMap["kind"] = DataSetKindKustoCluster
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "systemData", k.SystemData)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoClusterDataSet.
func (k *KustoClusterDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &k.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &k.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &k.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &k.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &k.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type KustoClusterDataSetMapping.
func (k *KustoClusterDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       k.Kind,
		ID:         k.ID,
		Name:       k.Name,
		SystemData: k.SystemData,
		Type:       k.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type KustoClusterDataSetMapping.
func (k KustoClusterDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", k.ID)
	objectMap["kind"] = DataSetMappingKindKustoCluster
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "systemData", k.SystemData)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoClusterDataSetMapping.
func (k *KustoClusterDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &k.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &k.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &k.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &k.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &k.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type KustoDatabaseDataSet.
func (k *KustoDatabaseDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       k.Kind,
		ID:         k.ID,
		Name:       k.Name,
		SystemData: k.SystemData,
		Type:       k.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type KustoDatabaseDataSet.
func (k KustoDatabaseDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", k.ID)
	objectMap["kind"] = DataSetKindKustoDatabase
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "systemData", k.SystemData)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoDatabaseDataSet.
func (k *KustoDatabaseDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &k.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &k.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &k.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &k.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &k.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type KustoDatabaseDataSetMapping.
func (k *KustoDatabaseDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       k.Kind,
		ID:         k.ID,
		Name:       k.Name,
		SystemData: k.SystemData,
		Type:       k.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type KustoDatabaseDataSetMapping.
func (k KustoDatabaseDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", k.ID)
	objectMap["kind"] = DataSetMappingKindKustoDatabase
	populate(objectMap, "name", k.Name)
	populate(objectMap, "properties", k.Properties)
	populate(objectMap, "systemData", k.SystemData)
	populate(objectMap, "type", k.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoDatabaseDataSetMapping.
func (k *KustoDatabaseDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &k.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &k.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &k.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &k.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &k.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &k.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaMetricSpecification.
func (o OperationMetaMetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", o.AggregationType)
	populate(objectMap, "dimensions", o.Dimensions)
	populate(objectMap, "displayDescription", o.DisplayDescription)
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", o.EnableRegionalMdmAccount)
	populate(objectMap, "fillGapWithZero", o.FillGapWithZero)
	populate(objectMap, "internalMetricName", o.InternalMetricName)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", o.ResourceIDDimensionNameOverride)
	populate(objectMap, "supportedAggregationTypes", o.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", o.SupportedTimeGrainTypes)
	populate(objectMap, "unit", o.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaServiceSpecification.
func (o OperationMetaServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", o.LogSpecifications)
	populate(objectMap, "metricSpecifications", o.MetricSpecifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationResponse.
func (o OperationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", o.EndTime)
	populate(objectMap, "error", o.Error)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationResponse.
func (o *OperationResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &o.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &o.Error)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProviderShareSubscriptionList.
func (p ProviderShareSubscriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProviderShareSubscriptionProperties.
func (p ProviderShareSubscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerEmail", p.ConsumerEmail)
	populate(objectMap, "consumerName", p.ConsumerName)
	populate(objectMap, "consumerTenantName", p.ConsumerTenantName)
	populateTimeRFC3339(objectMap, "createdAt", p.CreatedAt)
	populateTimeRFC3339(objectMap, "expirationDate", p.ExpirationDate)
	populate(objectMap, "providerEmail", p.ProviderEmail)
	populate(objectMap, "providerName", p.ProviderName)
	populate(objectMap, "shareSubscriptionObjectId", p.ShareSubscriptionObjectID)
	populate(objectMap, "shareSubscriptionStatus", p.ShareSubscriptionStatus)
	populateTimeRFC3339(objectMap, "sharedAt", p.SharedAt)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProviderShareSubscriptionProperties.
func (p *ProviderShareSubscriptionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerEmail":
			err = unpopulate(val, &p.ConsumerEmail)
			delete(rawMsg, key)
		case "consumerName":
			err = unpopulate(val, &p.ConsumerName)
			delete(rawMsg, key)
		case "consumerTenantName":
			err = unpopulate(val, &p.ConsumerTenantName)
			delete(rawMsg, key)
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &p.CreatedAt)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &p.ExpirationDate)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &p.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &p.ProviderName)
			delete(rawMsg, key)
		case "shareSubscriptionObjectId":
			err = unpopulate(val, &p.ShareSubscriptionObjectID)
			delete(rawMsg, key)
		case "shareSubscriptionStatus":
			err = unpopulate(val, &p.ShareSubscriptionStatus)
			delete(rawMsg, key)
		case "sharedAt":
			err = unpopulateTimeRFC3339(val, &p.SharedAt)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type SQLDBTableDataSet.
func (s *SQLDBTableDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDBTableDataSet.
func (s SQLDBTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetKindSQLDBTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDBTableDataSet.
func (s *SQLDBTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type SQLDBTableDataSetMapping.
func (s *SQLDBTableDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDBTableDataSetMapping.
func (s SQLDBTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetMappingKindSQLDBTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDBTableDataSetMapping.
func (s *SQLDBTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type SQLDWTableDataSet.
func (s *SQLDWTableDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDWTableDataSet.
func (s SQLDWTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetKindSQLDWTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDWTableDataSet.
func (s *SQLDWTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type SQLDWTableDataSetMapping.
func (s *SQLDWTableDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SQLDWTableDataSetMapping.
func (s SQLDWTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetMappingKindSQLDWTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SQLDWTableDataSetMapping.
func (s *SQLDWTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSourceShareSynchronizationSettingProperties.
func (s ScheduledSourceShareSynchronizationSettingProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSourceShareSynchronizationSettingProperties.
func (s *ScheduledSourceShareSynchronizationSettingProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetSourceShareSynchronizationSetting implements the SourceShareSynchronizationSettingClassification interface for type
// ScheduledSourceSynchronizationSetting.
func (s *ScheduledSourceSynchronizationSetting) GetSourceShareSynchronizationSetting() *SourceShareSynchronizationSetting {
	return &SourceShareSynchronizationSetting{
		Kind: s.Kind,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSourceSynchronizationSetting.
func (s ScheduledSourceSynchronizationSetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = SourceShareSynchronizationSettingKindScheduleBased
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSourceSynchronizationSetting.
func (s *ScheduledSourceSynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetSynchronizationSetting implements the SynchronizationSettingClassification interface for type ScheduledSynchronizationSetting.
func (s *ScheduledSynchronizationSetting) GetSynchronizationSetting() *SynchronizationSetting {
	return &SynchronizationSetting{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSynchronizationSetting.
func (s ScheduledSynchronizationSetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = SynchronizationSettingKindScheduleBased
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSynchronizationSetting.
func (s *ScheduledSynchronizationSetting) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledSynchronizationSettingProperties.
func (s ScheduledSynchronizationSettingProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledSynchronizationSettingProperties.
func (s *ScheduledSynchronizationSettingProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetTrigger implements the TriggerClassification interface for type ScheduledTrigger.
func (s *ScheduledTrigger) GetTrigger() *Trigger {
	return &Trigger{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledTrigger.
func (s ScheduledTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = TriggerKindScheduleBased
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledTrigger.
func (s *ScheduledTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ScheduledTriggerProperties.
func (s ScheduledTriggerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "recurrenceInterval", s.RecurrenceInterval)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	populateTimeRFC3339(objectMap, "synchronizationTime", s.SynchronizationTime)
	populate(objectMap, "triggerStatus", s.TriggerStatus)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ScheduledTriggerProperties.
func (s *ScheduledTriggerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "recurrenceInterval":
			err = unpopulate(val, &s.RecurrenceInterval)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		case "synchronizationTime":
			err = unpopulateTimeRFC3339(val, &s.SynchronizationTime)
			delete(rawMsg, key)
		case "triggerStatus":
			err = unpopulate(val, &s.TriggerStatus)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShareList.
func (s ShareList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ShareProperties.
func (s ShareProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "shareKind", s.ShareKind)
	populate(objectMap, "terms", s.Terms)
	populate(objectMap, "userEmail", s.UserEmail)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareProperties.
func (s *ShareProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "shareKind":
			err = unpopulate(val, &s.ShareKind)
			delete(rawMsg, key)
		case "terms":
			err = unpopulate(val, &s.Terms)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &s.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionList.
func (s ShareSubscriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionProperties.
func (s ShareSubscriptionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populateTimeRFC3339(objectMap, "expirationDate", s.ExpirationDate)
	populate(objectMap, "invitationId", s.InvitationID)
	populate(objectMap, "providerEmail", s.ProviderEmail)
	populate(objectMap, "providerName", s.ProviderName)
	populate(objectMap, "providerTenantName", s.ProviderTenantName)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "shareDescription", s.ShareDescription)
	populate(objectMap, "shareKind", s.ShareKind)
	populate(objectMap, "shareName", s.ShareName)
	populate(objectMap, "shareSubscriptionStatus", s.ShareSubscriptionStatus)
	populate(objectMap, "shareTerms", s.ShareTerms)
	populate(objectMap, "sourceShareLocation", s.SourceShareLocation)
	populate(objectMap, "userEmail", s.UserEmail)
	populate(objectMap, "userName", s.UserName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSubscriptionProperties.
func (s *ShareSubscriptionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &s.ExpirationDate)
			delete(rawMsg, key)
		case "invitationId":
			err = unpopulate(val, &s.InvitationID)
			delete(rawMsg, key)
		case "providerEmail":
			err = unpopulate(val, &s.ProviderEmail)
			delete(rawMsg, key)
		case "providerName":
			err = unpopulate(val, &s.ProviderName)
			delete(rawMsg, key)
		case "providerTenantName":
			err = unpopulate(val, &s.ProviderTenantName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "shareDescription":
			err = unpopulate(val, &s.ShareDescription)
			delete(rawMsg, key)
		case "shareKind":
			err = unpopulate(val, &s.ShareKind)
			delete(rawMsg, key)
		case "shareName":
			err = unpopulate(val, &s.ShareName)
			delete(rawMsg, key)
		case "shareSubscriptionStatus":
			err = unpopulate(val, &s.ShareSubscriptionStatus)
			delete(rawMsg, key)
		case "shareTerms":
			err = unpopulate(val, &s.ShareTerms)
			delete(rawMsg, key)
		case "sourceShareLocation":
			err = unpopulate(val, &s.SourceShareLocation)
			delete(rawMsg, key)
		case "userEmail":
			err = unpopulate(val, &s.UserEmail)
			delete(rawMsg, key)
		case "userName":
			err = unpopulate(val, &s.UserName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionSynchronization.
func (s ShareSubscriptionSynchronization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "message", s.Message)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "synchronizationId", s.SynchronizationID)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSubscriptionSynchronization.
func (s *ShareSubscriptionSynchronization) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "synchronizationId":
			err = unpopulate(val, &s.SynchronizationID)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShareSubscriptionSynchronizationList.
func (s ShareSubscriptionSynchronizationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ShareSynchronization.
func (s ShareSynchronization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consumerEmail", s.ConsumerEmail)
	populate(objectMap, "consumerName", s.ConsumerName)
	populate(objectMap, "consumerTenantName", s.ConsumerTenantName)
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "message", s.Message)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "synchronizationId", s.SynchronizationID)
	populate(objectMap, "synchronizationMode", s.SynchronizationMode)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ShareSynchronization.
func (s *ShareSynchronization) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "consumerEmail":
			err = unpopulate(val, &s.ConsumerEmail)
			delete(rawMsg, key)
		case "consumerName":
			err = unpopulate(val, &s.ConsumerName)
			delete(rawMsg, key)
		case "consumerTenantName":
			err = unpopulate(val, &s.ConsumerTenantName)
			delete(rawMsg, key)
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "synchronizationId":
			err = unpopulate(val, &s.SynchronizationID)
			delete(rawMsg, key)
		case "synchronizationMode":
			err = unpopulate(val, &s.SynchronizationMode)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ShareSynchronizationList.
func (s ShareSynchronizationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// GetSourceShareSynchronizationSetting implements the SourceShareSynchronizationSettingClassification interface for type
// SourceShareSynchronizationSetting.
func (s *SourceShareSynchronizationSetting) GetSourceShareSynchronizationSetting() *SourceShareSynchronizationSetting {
	return s
}

// MarshalJSON implements the json.Marshaller interface for type SourceShareSynchronizationSettingList.
func (s SourceShareSynchronizationSettingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceShareSynchronizationSettingList.
func (s *SourceShareSynchronizationSettingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &s.NextLink)
			delete(rawMsg, key)
		case "value":
			s.Value, err = unmarshalSourceShareSynchronizationSettingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSet implements the DataSetClassification interface for type SynapseWorkspaceSQLPoolTableDataSet.
func (s *SynapseWorkspaceSQLPoolTableDataSet) GetDataSet() *DataSet {
	return &DataSet{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SynapseWorkspaceSQLPoolTableDataSet.
func (s SynapseWorkspaceSQLPoolTableDataSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetKindSynapseWorkspaceSQLPoolTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynapseWorkspaceSQLPoolTableDataSet.
func (s *SynapseWorkspaceSQLPoolTableDataSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetDataSetMapping implements the DataSetMappingClassification interface for type SynapseWorkspaceSQLPoolTableDataSetMapping.
func (s *SynapseWorkspaceSQLPoolTableDataSetMapping) GetDataSetMapping() *DataSetMapping {
	return &DataSetMapping{
		Kind:       s.Kind,
		ID:         s.ID,
		Name:       s.Name,
		SystemData: s.SystemData,
		Type:       s.Type,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SynapseWorkspaceSQLPoolTableDataSetMapping.
func (s SynapseWorkspaceSQLPoolTableDataSetMapping) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	objectMap["kind"] = DataSetMappingKindSynapseWorkspaceSQLPoolTable
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynapseWorkspaceSQLPoolTableDataSetMapping.
func (s *SynapseWorkspaceSQLPoolTableDataSetMapping) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &s.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SynchronizationDetails.
func (s SynchronizationDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSetId", s.DataSetID)
	populate(objectMap, "dataSetType", s.DataSetType)
	populate(objectMap, "durationMs", s.DurationMs)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "filesRead", s.FilesRead)
	populate(objectMap, "filesWritten", s.FilesWritten)
	populate(objectMap, "message", s.Message)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "rowsCopied", s.RowsCopied)
	populate(objectMap, "rowsRead", s.RowsRead)
	populate(objectMap, "sizeRead", s.SizeRead)
	populate(objectMap, "sizeWritten", s.SizeWritten)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "vCore", s.VCore)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationDetails.
func (s *SynchronizationDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dataSetId":
			err = unpopulate(val, &s.DataSetID)
			delete(rawMsg, key)
		case "dataSetType":
			err = unpopulate(val, &s.DataSetType)
			delete(rawMsg, key)
		case "durationMs":
			err = unpopulate(val, &s.DurationMs)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "filesRead":
			err = unpopulate(val, &s.FilesRead)
			delete(rawMsg, key)
		case "filesWritten":
			err = unpopulate(val, &s.FilesWritten)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &s.Message)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "rowsCopied":
			err = unpopulate(val, &s.RowsCopied)
			delete(rawMsg, key)
		case "rowsRead":
			err = unpopulate(val, &s.RowsRead)
			delete(rawMsg, key)
		case "sizeRead":
			err = unpopulate(val, &s.SizeRead)
			delete(rawMsg, key)
		case "sizeWritten":
			err = unpopulate(val, &s.SizeWritten)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "vCore":
			err = unpopulate(val, &s.VCore)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SynchronizationDetailsList.
func (s SynchronizationDetailsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// GetSynchronizationSetting implements the SynchronizationSettingClassification interface for type SynchronizationSetting.
func (s *SynchronizationSetting) GetSynchronizationSetting() *SynchronizationSetting { return s }

// MarshalJSON implements the json.Marshaller interface for type SynchronizationSettingList.
func (s SynchronizationSettingList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationSettingList.
func (s *SynchronizationSettingList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &s.NextLink)
			delete(rawMsg, key)
		case "value":
			s.Value, err = unmarshalSynchronizationSettingClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetTrigger implements the TriggerClassification interface for type Trigger.
func (t *Trigger) GetTrigger() *Trigger { return t }

// MarshalJSON implements the json.Marshaller interface for type TriggerList.
func (t TriggerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggerList.
func (t *TriggerList) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, &t.NextLink)
			delete(rawMsg, key)
		case "value":
			t.Value, err = unmarshalTriggerClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
