//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdatashare

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AccountsClientCreatePollerResponse contains the response from method AccountsClient.Create.
type AccountsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientCreateResponse, error) {
	respType := AccountsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Account)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientCreatePollerResponse from the provided client and resume token.
func (l *AccountsClientCreatePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientCreateResponse contains the response from method AccountsClient.Create.
type AccountsClientCreateResponse struct {
	AccountsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientCreateResult contains the result from method AccountsClient.Create.
type AccountsClientCreateResult struct {
	Account
}

// AccountsClientDeletePollerResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientDeleteResponse, error) {
	respType := AccountsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientDeletePollerResponse from the provided client and resume token.
func (l *AccountsClientDeletePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientDeleteResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeleteResponse struct {
	AccountsClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientDeleteResult contains the result from method AccountsClient.Delete.
type AccountsClientDeleteResult struct {
	OperationResponse
}

// AccountsClientGetResponse contains the response from method AccountsClient.Get.
type AccountsClientGetResponse struct {
	AccountsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetResult contains the result from method AccountsClient.Get.
type AccountsClientGetResult struct {
	Account
}

// AccountsClientListByResourceGroupResponse contains the response from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResponse struct {
	AccountsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListByResourceGroupResult contains the result from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResult struct {
	AccountList
}

// AccountsClientListBySubscriptionResponse contains the response from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResponse struct {
	AccountsClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListBySubscriptionResult contains the result from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResult struct {
	AccountList
}

// AccountsClientUpdateResponse contains the response from method AccountsClient.Update.
type AccountsClientUpdateResponse struct {
	AccountsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientUpdateResult contains the result from method AccountsClient.Update.
type AccountsClientUpdateResult struct {
	Account
}

// ConsumerInvitationsClientGetResponse contains the response from method ConsumerInvitationsClient.Get.
type ConsumerInvitationsClientGetResponse struct {
	ConsumerInvitationsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConsumerInvitationsClientGetResult contains the result from method ConsumerInvitationsClient.Get.
type ConsumerInvitationsClientGetResult struct {
	ConsumerInvitation
}

// ConsumerInvitationsClientListInvitationsResponse contains the response from method ConsumerInvitationsClient.ListInvitations.
type ConsumerInvitationsClientListInvitationsResponse struct {
	ConsumerInvitationsClientListInvitationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConsumerInvitationsClientListInvitationsResult contains the result from method ConsumerInvitationsClient.ListInvitations.
type ConsumerInvitationsClientListInvitationsResult struct {
	ConsumerInvitationList
}

// ConsumerInvitationsClientRejectInvitationResponse contains the response from method ConsumerInvitationsClient.RejectInvitation.
type ConsumerInvitationsClientRejectInvitationResponse struct {
	ConsumerInvitationsClientRejectInvitationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConsumerInvitationsClientRejectInvitationResult contains the result from method ConsumerInvitationsClient.RejectInvitation.
type ConsumerInvitationsClientRejectInvitationResult struct {
	ConsumerInvitation
}

// ConsumerSourceDataSetsClientListByShareSubscriptionResponse contains the response from method ConsumerSourceDataSetsClient.ListByShareSubscription.
type ConsumerSourceDataSetsClientListByShareSubscriptionResponse struct {
	ConsumerSourceDataSetsClientListByShareSubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConsumerSourceDataSetsClientListByShareSubscriptionResult contains the result from method ConsumerSourceDataSetsClient.ListByShareSubscription.
type ConsumerSourceDataSetsClientListByShareSubscriptionResult struct {
	ConsumerSourceDataSetList
}

// DataSetMappingsClientCreateResponse contains the response from method DataSetMappingsClient.Create.
type DataSetMappingsClientCreateResponse struct {
	DataSetMappingsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetMappingsClientCreateResult contains the result from method DataSetMappingsClient.Create.
type DataSetMappingsClientCreateResult struct {
	DataSetMappingClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetMappingsClientCreateResult.
func (d *DataSetMappingsClientCreateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataSetMappingClassification(data)
	if err != nil {
		return err
	}
	d.DataSetMappingClassification = res
	return nil
}

// DataSetMappingsClientDeleteResponse contains the response from method DataSetMappingsClient.Delete.
type DataSetMappingsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetMappingsClientGetResponse contains the response from method DataSetMappingsClient.Get.
type DataSetMappingsClientGetResponse struct {
	DataSetMappingsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetMappingsClientGetResult contains the result from method DataSetMappingsClient.Get.
type DataSetMappingsClientGetResult struct {
	DataSetMappingClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetMappingsClientGetResult.
func (d *DataSetMappingsClientGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataSetMappingClassification(data)
	if err != nil {
		return err
	}
	d.DataSetMappingClassification = res
	return nil
}

// DataSetMappingsClientListByShareSubscriptionResponse contains the response from method DataSetMappingsClient.ListByShareSubscription.
type DataSetMappingsClientListByShareSubscriptionResponse struct {
	DataSetMappingsClientListByShareSubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetMappingsClientListByShareSubscriptionResult contains the result from method DataSetMappingsClient.ListByShareSubscription.
type DataSetMappingsClientListByShareSubscriptionResult struct {
	DataSetMappingList
}

// DataSetsClientCreateResponse contains the response from method DataSetsClient.Create.
type DataSetsClientCreateResponse struct {
	DataSetsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetsClientCreateResult contains the result from method DataSetsClient.Create.
type DataSetsClientCreateResult struct {
	DataSetClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetsClientCreateResult.
func (d *DataSetsClientCreateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataSetClassification(data)
	if err != nil {
		return err
	}
	d.DataSetClassification = res
	return nil
}

// DataSetsClientDeletePollerResponse contains the response from method DataSetsClient.Delete.
type DataSetsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataSetsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataSetsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataSetsClientDeleteResponse, error) {
	respType := DataSetsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataSetsClientDeletePollerResponse from the provided client and resume token.
func (l *DataSetsClientDeletePollerResponse) Resume(ctx context.Context, client *DataSetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataSetsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataSetsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataSetsClientDeleteResponse contains the response from method DataSetsClient.Delete.
type DataSetsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetsClientGetResponse contains the response from method DataSetsClient.Get.
type DataSetsClientGetResponse struct {
	DataSetsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetsClientGetResult contains the result from method DataSetsClient.Get.
type DataSetsClientGetResult struct {
	DataSetClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DataSetsClientGetResult.
func (d *DataSetsClientGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataSetClassification(data)
	if err != nil {
		return err
	}
	d.DataSetClassification = res
	return nil
}

// DataSetsClientListByShareResponse contains the response from method DataSetsClient.ListByShare.
type DataSetsClientListByShareResponse struct {
	DataSetsClientListByShareResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataSetsClientListByShareResult contains the result from method DataSetsClient.ListByShare.
type DataSetsClientListByShareResult struct {
	DataSetList
}

// EmailRegistrationsClientActivateEmailResponse contains the response from method EmailRegistrationsClient.ActivateEmail.
type EmailRegistrationsClientActivateEmailResponse struct {
	EmailRegistrationsClientActivateEmailResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EmailRegistrationsClientActivateEmailResult contains the result from method EmailRegistrationsClient.ActivateEmail.
type EmailRegistrationsClientActivateEmailResult struct {
	EmailRegistration
}

// EmailRegistrationsClientRegisterEmailResponse contains the response from method EmailRegistrationsClient.RegisterEmail.
type EmailRegistrationsClientRegisterEmailResponse struct {
	EmailRegistrationsClientRegisterEmailResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EmailRegistrationsClientRegisterEmailResult contains the result from method EmailRegistrationsClient.RegisterEmail.
type EmailRegistrationsClientRegisterEmailResult struct {
	EmailRegistration
}

// InvitationsClientCreateResponse contains the response from method InvitationsClient.Create.
type InvitationsClientCreateResponse struct {
	InvitationsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InvitationsClientCreateResult contains the result from method InvitationsClient.Create.
type InvitationsClientCreateResult struct {
	Invitation
}

// InvitationsClientDeleteResponse contains the response from method InvitationsClient.Delete.
type InvitationsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InvitationsClientGetResponse contains the response from method InvitationsClient.Get.
type InvitationsClientGetResponse struct {
	InvitationsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InvitationsClientGetResult contains the result from method InvitationsClient.Get.
type InvitationsClientGetResult struct {
	Invitation
}

// InvitationsClientListByShareResponse contains the response from method InvitationsClient.ListByShare.
type InvitationsClientListByShareResponse struct {
	InvitationsClientListByShareResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// InvitationsClientListByShareResult contains the result from method InvitationsClient.ListByShare.
type InvitationsClientListByShareResult struct {
	InvitationList
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationList
}

// ProviderShareSubscriptionsClientAdjustResponse contains the response from method ProviderShareSubscriptionsClient.Adjust.
type ProviderShareSubscriptionsClientAdjustResponse struct {
	ProviderShareSubscriptionsClientAdjustResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderShareSubscriptionsClientAdjustResult contains the result from method ProviderShareSubscriptionsClient.Adjust.
type ProviderShareSubscriptionsClientAdjustResult struct {
	ProviderShareSubscription
}

// ProviderShareSubscriptionsClientGetByShareResponse contains the response from method ProviderShareSubscriptionsClient.GetByShare.
type ProviderShareSubscriptionsClientGetByShareResponse struct {
	ProviderShareSubscriptionsClientGetByShareResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderShareSubscriptionsClientGetByShareResult contains the result from method ProviderShareSubscriptionsClient.GetByShare.
type ProviderShareSubscriptionsClientGetByShareResult struct {
	ProviderShareSubscription
}

// ProviderShareSubscriptionsClientListByShareResponse contains the response from method ProviderShareSubscriptionsClient.ListByShare.
type ProviderShareSubscriptionsClientListByShareResponse struct {
	ProviderShareSubscriptionsClientListByShareResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderShareSubscriptionsClientListByShareResult contains the result from method ProviderShareSubscriptionsClient.ListByShare.
type ProviderShareSubscriptionsClientListByShareResult struct {
	ProviderShareSubscriptionList
}

// ProviderShareSubscriptionsClientReinstateResponse contains the response from method ProviderShareSubscriptionsClient.Reinstate.
type ProviderShareSubscriptionsClientReinstateResponse struct {
	ProviderShareSubscriptionsClientReinstateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderShareSubscriptionsClientReinstateResult contains the result from method ProviderShareSubscriptionsClient.Reinstate.
type ProviderShareSubscriptionsClientReinstateResult struct {
	ProviderShareSubscription
}

// ProviderShareSubscriptionsClientRevokePollerResponse contains the response from method ProviderShareSubscriptionsClient.Revoke.
type ProviderShareSubscriptionsClientRevokePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ProviderShareSubscriptionsClientRevokePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ProviderShareSubscriptionsClientRevokePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ProviderShareSubscriptionsClientRevokeResponse, error) {
	respType := ProviderShareSubscriptionsClientRevokeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ProviderShareSubscription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ProviderShareSubscriptionsClientRevokePollerResponse from the provided client and resume token.
func (l *ProviderShareSubscriptionsClientRevokePollerResponse) Resume(ctx context.Context, client *ProviderShareSubscriptionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ProviderShareSubscriptionsClient.Revoke", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ProviderShareSubscriptionsClientRevokePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ProviderShareSubscriptionsClientRevokeResponse contains the response from method ProviderShareSubscriptionsClient.Revoke.
type ProviderShareSubscriptionsClientRevokeResponse struct {
	ProviderShareSubscriptionsClientRevokeResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderShareSubscriptionsClientRevokeResult contains the result from method ProviderShareSubscriptionsClient.Revoke.
type ProviderShareSubscriptionsClientRevokeResult struct {
	ProviderShareSubscription
}

// ShareSubscriptionsClientCancelSynchronizationPollerResponse contains the response from method ShareSubscriptionsClient.CancelSynchronization.
type ShareSubscriptionsClientCancelSynchronizationPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ShareSubscriptionsClientCancelSynchronizationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ShareSubscriptionsClientCancelSynchronizationPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ShareSubscriptionsClientCancelSynchronizationResponse, error) {
	respType := ShareSubscriptionsClientCancelSynchronizationResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ShareSubscriptionSynchronization)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ShareSubscriptionsClientCancelSynchronizationPollerResponse from the provided client and resume token.
func (l *ShareSubscriptionsClientCancelSynchronizationPollerResponse) Resume(ctx context.Context, client *ShareSubscriptionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ShareSubscriptionsClient.CancelSynchronization", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ShareSubscriptionsClientCancelSynchronizationPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ShareSubscriptionsClientCancelSynchronizationResponse contains the response from method ShareSubscriptionsClient.CancelSynchronization.
type ShareSubscriptionsClientCancelSynchronizationResponse struct {
	ShareSubscriptionsClientCancelSynchronizationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientCancelSynchronizationResult contains the result from method ShareSubscriptionsClient.CancelSynchronization.
type ShareSubscriptionsClientCancelSynchronizationResult struct {
	ShareSubscriptionSynchronization
}

// ShareSubscriptionsClientCreateResponse contains the response from method ShareSubscriptionsClient.Create.
type ShareSubscriptionsClientCreateResponse struct {
	ShareSubscriptionsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientCreateResult contains the result from method ShareSubscriptionsClient.Create.
type ShareSubscriptionsClientCreateResult struct {
	ShareSubscription
}

// ShareSubscriptionsClientDeletePollerResponse contains the response from method ShareSubscriptionsClient.Delete.
type ShareSubscriptionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ShareSubscriptionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ShareSubscriptionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ShareSubscriptionsClientDeleteResponse, error) {
	respType := ShareSubscriptionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ShareSubscriptionsClientDeletePollerResponse from the provided client and resume token.
func (l *ShareSubscriptionsClientDeletePollerResponse) Resume(ctx context.Context, client *ShareSubscriptionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ShareSubscriptionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ShareSubscriptionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ShareSubscriptionsClientDeleteResponse contains the response from method ShareSubscriptionsClient.Delete.
type ShareSubscriptionsClientDeleteResponse struct {
	ShareSubscriptionsClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientDeleteResult contains the result from method ShareSubscriptionsClient.Delete.
type ShareSubscriptionsClientDeleteResult struct {
	OperationResponse
}

// ShareSubscriptionsClientGetResponse contains the response from method ShareSubscriptionsClient.Get.
type ShareSubscriptionsClientGetResponse struct {
	ShareSubscriptionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientGetResult contains the result from method ShareSubscriptionsClient.Get.
type ShareSubscriptionsClientGetResult struct {
	ShareSubscription
}

// ShareSubscriptionsClientListByAccountResponse contains the response from method ShareSubscriptionsClient.ListByAccount.
type ShareSubscriptionsClientListByAccountResponse struct {
	ShareSubscriptionsClientListByAccountResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientListByAccountResult contains the result from method ShareSubscriptionsClient.ListByAccount.
type ShareSubscriptionsClientListByAccountResult struct {
	ShareSubscriptionList
}

// ShareSubscriptionsClientListSourceShareSynchronizationSettingsResponse contains the response from method ShareSubscriptionsClient.ListSourceShareSynchronizationSettings.
type ShareSubscriptionsClientListSourceShareSynchronizationSettingsResponse struct {
	ShareSubscriptionsClientListSourceShareSynchronizationSettingsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientListSourceShareSynchronizationSettingsResult contains the result from method ShareSubscriptionsClient.ListSourceShareSynchronizationSettings.
type ShareSubscriptionsClientListSourceShareSynchronizationSettingsResult struct {
	SourceShareSynchronizationSettingList
}

// ShareSubscriptionsClientListSynchronizationDetailsResponse contains the response from method ShareSubscriptionsClient.ListSynchronizationDetails.
type ShareSubscriptionsClientListSynchronizationDetailsResponse struct {
	ShareSubscriptionsClientListSynchronizationDetailsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientListSynchronizationDetailsResult contains the result from method ShareSubscriptionsClient.ListSynchronizationDetails.
type ShareSubscriptionsClientListSynchronizationDetailsResult struct {
	SynchronizationDetailsList
}

// ShareSubscriptionsClientListSynchronizationsResponse contains the response from method ShareSubscriptionsClient.ListSynchronizations.
type ShareSubscriptionsClientListSynchronizationsResponse struct {
	ShareSubscriptionsClientListSynchronizationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientListSynchronizationsResult contains the result from method ShareSubscriptionsClient.ListSynchronizations.
type ShareSubscriptionsClientListSynchronizationsResult struct {
	ShareSubscriptionSynchronizationList
}

// ShareSubscriptionsClientSynchronizePollerResponse contains the response from method ShareSubscriptionsClient.Synchronize.
type ShareSubscriptionsClientSynchronizePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ShareSubscriptionsClientSynchronizePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ShareSubscriptionsClientSynchronizePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ShareSubscriptionsClientSynchronizeResponse, error) {
	respType := ShareSubscriptionsClientSynchronizeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ShareSubscriptionSynchronization)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ShareSubscriptionsClientSynchronizePollerResponse from the provided client and resume token.
func (l *ShareSubscriptionsClientSynchronizePollerResponse) Resume(ctx context.Context, client *ShareSubscriptionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ShareSubscriptionsClient.Synchronize", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ShareSubscriptionsClientSynchronizePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ShareSubscriptionsClientSynchronizeResponse contains the response from method ShareSubscriptionsClient.Synchronize.
type ShareSubscriptionsClientSynchronizeResponse struct {
	ShareSubscriptionsClientSynchronizeResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ShareSubscriptionsClientSynchronizeResult contains the result from method ShareSubscriptionsClient.Synchronize.
type ShareSubscriptionsClientSynchronizeResult struct {
	ShareSubscriptionSynchronization
}

// SharesClientCreateResponse contains the response from method SharesClient.Create.
type SharesClientCreateResponse struct {
	SharesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientCreateResult contains the result from method SharesClient.Create.
type SharesClientCreateResult struct {
	Share
}

// SharesClientDeletePollerResponse contains the response from method SharesClient.Delete.
type SharesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SharesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SharesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SharesClientDeleteResponse, error) {
	respType := SharesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SharesClientDeletePollerResponse from the provided client and resume token.
func (l *SharesClientDeletePollerResponse) Resume(ctx context.Context, client *SharesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SharesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SharesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SharesClientDeleteResponse contains the response from method SharesClient.Delete.
type SharesClientDeleteResponse struct {
	SharesClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientDeleteResult contains the result from method SharesClient.Delete.
type SharesClientDeleteResult struct {
	OperationResponse
}

// SharesClientGetResponse contains the response from method SharesClient.Get.
type SharesClientGetResponse struct {
	SharesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientGetResult contains the result from method SharesClient.Get.
type SharesClientGetResult struct {
	Share
}

// SharesClientListByAccountResponse contains the response from method SharesClient.ListByAccount.
type SharesClientListByAccountResponse struct {
	SharesClientListByAccountResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientListByAccountResult contains the result from method SharesClient.ListByAccount.
type SharesClientListByAccountResult struct {
	ShareList
}

// SharesClientListSynchronizationDetailsResponse contains the response from method SharesClient.ListSynchronizationDetails.
type SharesClientListSynchronizationDetailsResponse struct {
	SharesClientListSynchronizationDetailsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientListSynchronizationDetailsResult contains the result from method SharesClient.ListSynchronizationDetails.
type SharesClientListSynchronizationDetailsResult struct {
	SynchronizationDetailsList
}

// SharesClientListSynchronizationsResponse contains the response from method SharesClient.ListSynchronizations.
type SharesClientListSynchronizationsResponse struct {
	SharesClientListSynchronizationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharesClientListSynchronizationsResult contains the result from method SharesClient.ListSynchronizations.
type SharesClientListSynchronizationsResult struct {
	ShareSynchronizationList
}

// SynchronizationSettingsClientCreateResponse contains the response from method SynchronizationSettingsClient.Create.
type SynchronizationSettingsClientCreateResponse struct {
	SynchronizationSettingsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SynchronizationSettingsClientCreateResult contains the result from method SynchronizationSettingsClient.Create.
type SynchronizationSettingsClientCreateResult struct {
	SynchronizationSettingClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationSettingsClientCreateResult.
func (s *SynchronizationSettingsClientCreateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalSynchronizationSettingClassification(data)
	if err != nil {
		return err
	}
	s.SynchronizationSettingClassification = res
	return nil
}

// SynchronizationSettingsClientDeletePollerResponse contains the response from method SynchronizationSettingsClient.Delete.
type SynchronizationSettingsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SynchronizationSettingsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SynchronizationSettingsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SynchronizationSettingsClientDeleteResponse, error) {
	respType := SynchronizationSettingsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SynchronizationSettingsClientDeletePollerResponse from the provided client and resume token.
func (l *SynchronizationSettingsClientDeletePollerResponse) Resume(ctx context.Context, client *SynchronizationSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SynchronizationSettingsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SynchronizationSettingsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SynchronizationSettingsClientDeleteResponse contains the response from method SynchronizationSettingsClient.Delete.
type SynchronizationSettingsClientDeleteResponse struct {
	SynchronizationSettingsClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SynchronizationSettingsClientDeleteResult contains the result from method SynchronizationSettingsClient.Delete.
type SynchronizationSettingsClientDeleteResult struct {
	OperationResponse
}

// SynchronizationSettingsClientGetResponse contains the response from method SynchronizationSettingsClient.Get.
type SynchronizationSettingsClientGetResponse struct {
	SynchronizationSettingsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SynchronizationSettingsClientGetResult contains the result from method SynchronizationSettingsClient.Get.
type SynchronizationSettingsClientGetResult struct {
	SynchronizationSettingClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SynchronizationSettingsClientGetResult.
func (s *SynchronizationSettingsClientGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalSynchronizationSettingClassification(data)
	if err != nil {
		return err
	}
	s.SynchronizationSettingClassification = res
	return nil
}

// SynchronizationSettingsClientListByShareResponse contains the response from method SynchronizationSettingsClient.ListByShare.
type SynchronizationSettingsClientListByShareResponse struct {
	SynchronizationSettingsClientListByShareResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SynchronizationSettingsClientListByShareResult contains the result from method SynchronizationSettingsClient.ListByShare.
type SynchronizationSettingsClientListByShareResult struct {
	SynchronizationSettingList
}

// TriggersClientCreatePollerResponse contains the response from method TriggersClient.Create.
type TriggersClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientCreateResponse, error) {
	respType := TriggersClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.TriggersClientCreateResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a TriggersClientCreatePollerResponse from the provided client and resume token.
func (l *TriggersClientCreatePollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// TriggersClientCreateResponse contains the response from method TriggersClient.Create.
type TriggersClientCreateResponse struct {
	TriggersClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TriggersClientCreateResult contains the result from method TriggersClient.Create.
type TriggersClientCreateResult struct {
	TriggerClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggersClientCreateResult.
func (t *TriggersClientCreateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalTriggerClassification(data)
	if err != nil {
		return err
	}
	t.TriggerClassification = res
	return nil
}

// TriggersClientDeletePollerResponse contains the response from method TriggersClient.Delete.
type TriggersClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *TriggersClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l TriggersClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (TriggersClientDeleteResponse, error) {
	respType := TriggersClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a TriggersClientDeletePollerResponse from the provided client and resume token.
func (l *TriggersClientDeletePollerResponse) Resume(ctx context.Context, client *TriggersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("TriggersClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &TriggersClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// TriggersClientDeleteResponse contains the response from method TriggersClient.Delete.
type TriggersClientDeleteResponse struct {
	TriggersClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TriggersClientDeleteResult contains the result from method TriggersClient.Delete.
type TriggersClientDeleteResult struct {
	OperationResponse
}

// TriggersClientGetResponse contains the response from method TriggersClient.Get.
type TriggersClientGetResponse struct {
	TriggersClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TriggersClientGetResult contains the result from method TriggersClient.Get.
type TriggersClientGetResult struct {
	TriggerClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggersClientGetResult.
func (t *TriggersClientGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalTriggerClassification(data)
	if err != nil {
		return err
	}
	t.TriggerClassification = res
	return nil
}

// TriggersClientListByShareSubscriptionResponse contains the response from method TriggersClient.ListByShareSubscription.
type TriggersClientListByShareSubscriptionResponse struct {
	TriggersClientListByShareSubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TriggersClientListByShareSubscriptionResult contains the result from method TriggersClient.ListByShareSubscription.
type TriggersClientListByShareSubscriptionResult struct {
	TriggerList
}
