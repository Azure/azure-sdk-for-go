//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armdeploymentmanager.ClientFactory type.
type ServerFactory struct {
	ArtifactSourcesServer   ArtifactSourcesServer
	OperationsServer        OperationsServer
	RolloutsServer          RolloutsServer
	ServiceTopologiesServer ServiceTopologiesServer
	ServiceUnitsServer      ServiceUnitsServer
	ServicesServer          ServicesServer
	StepsServer             StepsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armdeploymentmanager.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armdeploymentmanager.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                       *ServerFactory
	trMu                      sync.Mutex
	trArtifactSourcesServer   *ArtifactSourcesServerTransport
	trOperationsServer        *OperationsServerTransport
	trRolloutsServer          *RolloutsServerTransport
	trServiceTopologiesServer *ServiceTopologiesServerTransport
	trServiceUnitsServer      *ServiceUnitsServerTransport
	trServicesServer          *ServicesServerTransport
	trStepsServer             *StepsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "ArtifactSourcesClient":
		initServer(s, &s.trArtifactSourcesServer, func() *ArtifactSourcesServerTransport {
			return NewArtifactSourcesServerTransport(&s.srv.ArtifactSourcesServer)
		})
		resp, err = s.trArtifactSourcesServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "RolloutsClient":
		initServer(s, &s.trRolloutsServer, func() *RolloutsServerTransport { return NewRolloutsServerTransport(&s.srv.RolloutsServer) })
		resp, err = s.trRolloutsServer.Do(req)
	case "ServiceTopologiesClient":
		initServer(s, &s.trServiceTopologiesServer, func() *ServiceTopologiesServerTransport {
			return NewServiceTopologiesServerTransport(&s.srv.ServiceTopologiesServer)
		})
		resp, err = s.trServiceTopologiesServer.Do(req)
	case "ServiceUnitsClient":
		initServer(s, &s.trServiceUnitsServer, func() *ServiceUnitsServerTransport { return NewServiceUnitsServerTransport(&s.srv.ServiceUnitsServer) })
		resp, err = s.trServiceUnitsServer.Do(req)
	case "ServicesClient":
		initServer(s, &s.trServicesServer, func() *ServicesServerTransport { return NewServicesServerTransport(&s.srv.ServicesServer) })
		resp, err = s.trServicesServer.Do(req)
	case "StepsClient":
		initServer(s, &s.trStepsServer, func() *StepsServerTransport { return NewStepsServerTransport(&s.srv.StepsServer) })
		resp, err = s.trStepsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
