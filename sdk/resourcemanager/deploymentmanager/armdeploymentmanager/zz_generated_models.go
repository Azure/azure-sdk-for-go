//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeploymentmanager

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// APIKeyAuthentication - ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.
type APIKeyAuthentication struct {
	RestRequestAuthentication
	// REQUIRED; The location of the authentication key/value pair in the request.
	In *RestAuthLocation `json:"in,omitempty"`

	// REQUIRED; The key name of the authentication key/value pair.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the authentication key/value pair.
	Value *string `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type APIKeyAuthentication.
func (a APIKeyAuthentication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.RestRequestAuthentication.marshalInternal(objectMap, RestAuthTypeAPIKey)
	populate(objectMap, "in", a.In)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type APIKeyAuthentication.
func (a *APIKeyAuthentication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "in":
			err = unpopulate(val, &a.In)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &a.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.RestRequestAuthentication.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ArtifactSource - The resource that defines the source location where the artifacts are located.
type ArtifactSource struct {
	TrackedResource
	// The properties that define the artifact source.
	Properties *ArtifactSourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ArtifactSource.
func (a ArtifactSource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ArtifactSource.
func (a *ArtifactSource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &a.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ArtifactSourceProperties - The properties that define the artifact source.
type ArtifactSourceProperties struct {
	ArtifactSourcePropertiesAutoGenerated
}

// ArtifactSourcePropertiesAutoGenerated - The properties that define the source location where the artifacts are located.
type ArtifactSourcePropertiesAutoGenerated struct {
	// REQUIRED; The authentication method to use to access the artifact source.
	Authentication AuthenticationClassification `json:"authentication,omitempty"`

	// REQUIRED; The type of artifact source used.
	SourceType *string `json:"sourceType,omitempty"`

	// The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This
	// can be used to differentiate different versions
	// of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with
	// this optional artifactRoot path forms the
	// artifact source location where the artifacts are expected to be found.
	ArtifactRoot *string `json:"artifactRoot,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ArtifactSourcePropertiesAutoGenerated.
func (a ArtifactSourcePropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ArtifactSourcePropertiesAutoGenerated.
func (a *ArtifactSourcePropertiesAutoGenerated) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a ArtifactSourcePropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "artifactRoot", a.ArtifactRoot)
	populate(objectMap, "authentication", a.Authentication)
	populate(objectMap, "sourceType", a.SourceType)
}

func (a *ArtifactSourcePropertiesAutoGenerated) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "artifactRoot":
			err = unpopulate(val, &a.ArtifactRoot)
			delete(rawMsg, key)
		case "authentication":
			a.Authentication, err = unmarshalAuthenticationClassification(val)
			delete(rawMsg, key)
		case "sourceType":
			err = unpopulate(val, &a.SourceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ArtifactSourcesCreateOrUpdateOptions contains the optional parameters for the ArtifactSources.CreateOrUpdate method.
type ArtifactSourcesCreateOrUpdateOptions struct {
	// Source object that defines the resource.
	ArtifactSourceInfo *ArtifactSource
}

// ArtifactSourcesDeleteOptions contains the optional parameters for the ArtifactSources.Delete method.
type ArtifactSourcesDeleteOptions struct {
	// placeholder for future optional parameters
}

// ArtifactSourcesGetOptions contains the optional parameters for the ArtifactSources.Get method.
type ArtifactSourcesGetOptions struct {
	// placeholder for future optional parameters
}

// ArtifactSourcesListOptions contains the optional parameters for the ArtifactSources.List method.
type ArtifactSourcesListOptions struct {
	// placeholder for future optional parameters
}

// AuthenticationClassification provides polymorphic access to related types.
// Call the interface's GetAuthentication() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Authentication, *SasAuthentication
type AuthenticationClassification interface {
	// GetAuthentication returns the Authentication content of the underlying type.
	GetAuthentication() *Authentication
}

// Authentication - Defines the authentication method and properties to access the artifacts.
type Authentication struct {
	// REQUIRED; The authentication type
	Type *string `json:"type,omitempty"`
}

// GetAuthentication implements the AuthenticationClassification interface for type Authentication.
func (a *Authentication) GetAuthentication() *Authentication { return a }

// UnmarshalJSON implements the json.Unmarshaller interface for type Authentication.
func (a *Authentication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a Authentication) marshalInternal(objectMap map[string]interface{}, discValue string) {
	a.Type = &discValue
	objectMap["type"] = a.Type
}

func (a *Authentication) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "type":
			err = unpopulate(val, &a.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CloudError - The error information object.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// The properties that define the error.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - Detailed error information of any failure.
type CloudErrorBody struct {
	// More detailed error information.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// Error target
	Target *string `json:"target,omitempty"`

	// READ-ONLY; Error code string.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Descriptive error information.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// HealthCheckStepAttributesClassification provides polymorphic access to related types.
// Call the interface's GetHealthCheckStepAttributes() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *HealthCheckStepAttributes, *RestHealthCheckStepAttributes
type HealthCheckStepAttributesClassification interface {
	// GetHealthCheckStepAttributes returns the HealthCheckStepAttributes content of the underlying type.
	GetHealthCheckStepAttributes() *HealthCheckStepAttributes
}

// HealthCheckStepAttributes - The attributes for the health check step.
type HealthCheckStepAttributes struct {
	// REQUIRED; The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy
	// state duration is enforced after the detection of first
	// healthy signal.
	HealthyStateDuration *string `json:"healthyStateDuration,omitempty"`

	// REQUIRED; The type of health check.
	Type *string `json:"type,omitempty"`

	// The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts
	// to enforce healthyStateDuration once resource
	// becomes healthy.
	MaxElasticDuration *string `json:"maxElasticDuration,omitempty"`

	// The duration in ISO 8601 format for which health check waits idly without any checks.
	WaitDuration *string `json:"waitDuration,omitempty"`
}

// GetHealthCheckStepAttributes implements the HealthCheckStepAttributesClassification interface for type HealthCheckStepAttributes.
func (h *HealthCheckStepAttributes) GetHealthCheckStepAttributes() *HealthCheckStepAttributes {
	return h
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HealthCheckStepAttributes.
func (h *HealthCheckStepAttributes) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return h.unmarshalInternal(rawMsg)
}

func (h HealthCheckStepAttributes) marshalInternal(objectMap map[string]interface{}, discValue string) {
	populate(objectMap, "healthyStateDuration", h.HealthyStateDuration)
	populate(objectMap, "maxElasticDuration", h.MaxElasticDuration)
	h.Type = &discValue
	objectMap["type"] = h.Type
	populate(objectMap, "waitDuration", h.WaitDuration)
}

func (h *HealthCheckStepAttributes) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "healthyStateDuration":
			err = unpopulate(val, &h.HealthyStateDuration)
			delete(rawMsg, key)
		case "maxElasticDuration":
			err = unpopulate(val, &h.MaxElasticDuration)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &h.Type)
			delete(rawMsg, key)
		case "waitDuration":
			err = unpopulate(val, &h.WaitDuration)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// HealthCheckStepProperties - Defines the properties of a health check step.
type HealthCheckStepProperties struct {
	StepProperties
	// REQUIRED; The health check step attributes
	Attributes HealthCheckStepAttributesClassification `json:"attributes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HealthCheckStepProperties.
func (h HealthCheckStepProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.StepProperties.marshalInternal(objectMap, StepTypeHealthCheck)
	populate(objectMap, "attributes", h.Attributes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HealthCheckStepProperties.
func (h *HealthCheckStepProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "attributes":
			h.Attributes, err = unmarshalHealthCheckStepAttributesClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := h.StepProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Identity for the resource.
type Identity struct {
	// REQUIRED; The list of identities.
	IdentityIDs []*string `json:"identityIds,omitempty"`

	// REQUIRED; The identity type.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Identity.
func (i Identity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identityIds", i.IdentityIDs)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// Message - Supplementary contextual messages during a rollout.
type Message struct {
	// READ-ONLY; The actual message text.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Time in UTC this message was provided.
	TimeStamp *time.Time `json:"timeStamp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Message.
func (m Message) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "message", m.Message)
	populateTimeRFC3339(objectMap, "timeStamp", m.TimeStamp)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Message.
func (m *Message) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "message":
			err = unpopulate(val, &m.Message)
			delete(rawMsg, key)
		case "timeStamp":
			err = unpopulateTimeRFC3339(val, &m.TimeStamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Operation - Represents an operation that can be performed on the service.
type Operation struct {
	// The display name of the operation.
	Display *OperationDetail `json:"display,omitempty"`

	// The name of the operation.
	Name *string `json:"name,omitempty"`

	// The origin of the operation.
	Origin *string `json:"origin,omitempty"`

	// The properties of the operation.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// OperationDetail - The detail about an operation.
type OperationDetail struct {
	// The description of the operation.
	Description *string `json:"description,omitempty"`

	// The name of the operation.
	Operation *string `json:"operation,omitempty"`

	// The name of the provider that supports the operation.
	Provider *string `json:"provider,omitempty"`

	// The resource type on which this operation can be performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationsList - The operations response.
type OperationsList struct {
	// The list of supported operations
	Value *Operation `json:"value,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrePostStep - The properties that define a step.
type PrePostStep struct {
	// REQUIRED; The resource Id of the step to be run.
	StepID *string `json:"stepId,omitempty"`
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

func (r *Resource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &r.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &r.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &r.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ResourceOperation - Individual resource operation information.
type ResourceOperation struct {
	// Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template.
	ResourceName *string `json:"resourceName,omitempty"`

	// Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template.
	ResourceType *string `json:"resourceType,omitempty"`

	// READ-ONLY; Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.
	OperationID *string `json:"operationId,omitempty" azure:"ro"`

	// READ-ONLY; State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Http status code of the operation.
	StatusCode *string `json:"statusCode,omitempty" azure:"ro"`

	// READ-ONLY; Descriptive information of the resource operation.
	StatusMessage *string `json:"statusMessage,omitempty" azure:"ro"`
}

// RestHealthCheck - A REST based health check
type RestHealthCheck struct {
	// REQUIRED; A unique name for this check.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The request to the health provider.
	Request *RestRequest `json:"request,omitempty"`

	// The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status
	// code of 200 OK.
	Response *RestResponse `json:"response,omitempty"`
}

// RestHealthCheckStepAttributes - Defines the REST health check step properties.
type RestHealthCheckStepAttributes struct {
	HealthCheckStepAttributes
	// The REST health check parameters.
	Properties *RestParameters `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestHealthCheckStepAttributes.
func (r RestHealthCheckStepAttributes) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.HealthCheckStepAttributes.marshalInternal(objectMap, "REST")
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestHealthCheckStepAttributes.
func (r *RestHealthCheckStepAttributes) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &r.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.HealthCheckStepAttributes.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RestParameters - The parameters for the REST health check.
type RestParameters struct {
	// REQUIRED; The list of checks that form the health check step.
	HealthChecks []*RestHealthCheck `json:"healthChecks,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestParameters.
func (r RestParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "healthChecks", r.HealthChecks)
	return json.Marshal(objectMap)
}

// RestRequest - The properties that make up a REST request
type RestRequest struct {
	// REQUIRED; The authentication information required in the request to the health provider.
	Authentication RestRequestAuthenticationClassification `json:"authentication,omitempty"`

	// REQUIRED; The HTTP method to use for the request.
	Method *RestRequestMethod `json:"method,omitempty"`

	// REQUIRED; The HTTP URI to use for the request.
	URI *string `json:"uri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestRequest.
func (r RestRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authentication", r.Authentication)
	populate(objectMap, "method", r.Method)
	populate(objectMap, "uri", r.URI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestRequest.
func (r *RestRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authentication":
			r.Authentication, err = unmarshalRestRequestAuthenticationClassification(val)
			delete(rawMsg, key)
		case "method":
			err = unpopulate(val, &r.Method)
			delete(rawMsg, key)
		case "uri":
			err = unpopulate(val, &r.URI)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RestRequestAuthenticationClassification provides polymorphic access to related types.
// Call the interface's GetRestRequestAuthentication() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ApiKeyAuthentication, *RestRequestAuthentication, *RolloutIdentityAuthentication
type RestRequestAuthenticationClassification interface {
	// GetRestRequestAuthentication returns the RestRequestAuthentication content of the underlying type.
	GetRestRequestAuthentication() *RestRequestAuthentication
}

// RestRequestAuthentication - The authentication information required in the REST health check request to the health provider.
type RestRequestAuthentication struct {
	// REQUIRED; The authentication type.
	Type *RestAuthType `json:"type,omitempty"`
}

// GetRestRequestAuthentication implements the RestRequestAuthenticationClassification interface for type RestRequestAuthentication.
func (r *RestRequestAuthentication) GetRestRequestAuthentication() *RestRequestAuthentication {
	return r
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RestRequestAuthentication.
func (r *RestRequestAuthentication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r RestRequestAuthentication) marshalInternal(objectMap map[string]interface{}, discValue RestAuthType) {
	r.Type = &discValue
	objectMap["type"] = r.Type
}

func (r *RestRequestAuthentication) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "type":
			err = unpopulate(val, &r.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RestResponse - The properties that make up the expected REST response
type RestResponse struct {
	// The regular expressions to match the response content with.
	Regex *RestResponseRegex `json:"regex,omitempty"`

	// The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected
	// status codes are provided, default expected status
	// code is 200 OK.
	SuccessStatusCodes []*string `json:"successStatusCodes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestResponse.
func (r RestResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "regex", r.Regex)
	populate(objectMap, "successStatusCodes", r.SuccessStatusCodes)
	return json.Marshal(objectMap)
}

// RestResponseRegex - The regular expressions to match the response content with.
type RestResponseRegex struct {
	// Indicates whether any or all of the expressions should match with the response content.
	MatchQuantifier *RestMatchQuantifier `json:"matchQuantifier,omitempty"`

	// The list of regular expressions.
	Matches []*string `json:"matches,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestResponseRegex.
func (r RestResponseRegex) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "matchQuantifier", r.MatchQuantifier)
	populate(objectMap, "matches", r.Matches)
	return json.Marshal(objectMap)
}

// Rollout - Defines the rollout.
type Rollout struct {
	TrackedResource
	// Identity for the resource.
	Identity *Identity `json:"identity,omitempty"`

	// The properties that define a rollout.
	Properties *RolloutProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Rollout.
func (r Rollout) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Rollout.
func (r *Rollout) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			err = unpopulate(val, &r.Identity)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &r.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RolloutIdentityAuthentication - RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during
// rollout creation.
type RolloutIdentityAuthentication struct {
	RestRequestAuthentication
}

// MarshalJSON implements the json.Marshaller interface for type RolloutIdentityAuthentication.
func (r RolloutIdentityAuthentication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.RestRequestAuthentication.marshalInternal(objectMap, RestAuthTypeRolloutIdentity)
	return json.Marshal(objectMap)
}

// RolloutOperationInfo - Detailed runtime information of the rollout.
type RolloutOperationInfo struct {
	// READ-ONLY; The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; The detailed error information for any failure.
	Error *CloudErrorBody `json:"error,omitempty" azure:"ro"`

	// READ-ONLY; The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated
	// with a PUT, this count is reset to 0.
	RetryAttempt *int32 `json:"retryAttempt,omitempty" azure:"ro"`

	// READ-ONLY; True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
	SkipSucceededOnRetry *bool `json:"skipSucceededOnRetry,omitempty" azure:"ro"`

	// READ-ONLY; The start time of the rollout in UTC.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutOperationInfo.
func (r RolloutOperationInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", r.EndTime)
	populate(objectMap, "error", r.Error)
	populate(objectMap, "retryAttempt", r.RetryAttempt)
	populate(objectMap, "skipSucceededOnRetry", r.SkipSucceededOnRetry)
	populateTimeRFC3339(objectMap, "startTime", r.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RolloutOperationInfo.
func (r *RolloutOperationInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &r.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &r.Error)
			delete(rawMsg, key)
		case "retryAttempt":
			err = unpopulate(val, &r.RetryAttempt)
			delete(rawMsg, key)
		case "skipSucceededOnRetry":
			err = unpopulate(val, &r.SkipSucceededOnRetry)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &r.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RolloutProperties - The properties that define a rollout.
type RolloutProperties struct {
	RolloutPropertiesAutoGenerated
	RolloutRequestProperties
}

// RolloutPropertiesAutoGenerated - Defines the properties of a rollout.
type RolloutPropertiesAutoGenerated struct {
	// READ-ONLY; Operational information of the rollout.
	OperationInfo *RolloutOperationInfo `json:"operationInfo,omitempty" azure:"ro"`

	// READ-ONLY; The detailed information on the services being deployed.
	Services []*Service `json:"services,omitempty" azure:"ro"`

	// READ-ONLY; The current status of the rollout.
	Status *string `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The cardinal count of total number of retries performed on the rollout at a given time.
	TotalRetryAttempts *int32 `json:"totalRetryAttempts,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutPropertiesAutoGenerated.
func (r RolloutPropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r RolloutPropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "operationInfo", r.OperationInfo)
	populate(objectMap, "services", r.Services)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "totalRetryAttempts", r.TotalRetryAttempts)
}

// RolloutRequest - Defines the PUT rollout request body.
type RolloutRequest struct {
	TrackedResource
	// REQUIRED; Identity for the resource.
	Identity *Identity `json:"identity,omitempty"`

	// REQUIRED; Defines the properties that make up a rollout request.
	Properties *RolloutRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutRequest.
func (r RolloutRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RolloutRequest.
func (r *RolloutRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "identity":
			err = unpopulate(val, &r.Identity)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &r.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := r.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// RolloutRequestProperties - The properties for defining a rollout.
type RolloutRequestProperties struct {
	// REQUIRED; The version of the build being deployed.
	BuildVersion *string `json:"buildVersion,omitempty"`

	// REQUIRED; The list of step groups that define the orchestration.
	StepGroups []*StepGroup `json:"stepGroups,omitempty"`

	// REQUIRED; The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
	TargetServiceTopologyID *string `json:"targetServiceTopologyId,omitempty"`

	// The reference to the artifact source resource Id where the payload is located.
	ArtifactSourceID *string `json:"artifactSourceId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutRequestProperties.
func (r RolloutRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r RolloutRequestProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "artifactSourceId", r.ArtifactSourceID)
	populate(objectMap, "buildVersion", r.BuildVersion)
	populate(objectMap, "stepGroups", r.StepGroups)
	populate(objectMap, "targetServiceTopologyId", r.TargetServiceTopologyID)
}

// RolloutStep - Defines a specific step on a target service unit.
type RolloutStep struct {
	// REQUIRED; Name of the step.
	Name *string `json:"name,omitempty"`

	// The step group the current step is part of.
	StepGroup *string `json:"stepGroup,omitempty"`

	// READ-ONLY; Supplementary informative messages during rollout.
	Messages []*Message `json:"messages,omitempty" azure:"ro"`

	// READ-ONLY; Detailed information of specific action execution.
	OperationInfo *StepOperationInfo `json:"operationInfo,omitempty" azure:"ro"`

	// READ-ONLY; Set of resource operations that were performed, if any, on an Azure resource.
	ResourceOperations []*ResourceOperation `json:"resourceOperations,omitempty" azure:"ro"`

	// READ-ONLY; Current state of the step.
	Status *string `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutStep.
func (r RolloutStep) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "messages", r.Messages)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "operationInfo", r.OperationInfo)
	populate(objectMap, "resourceOperations", r.ResourceOperations)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "stepGroup", r.StepGroup)
	return json.Marshal(objectMap)
}

// RolloutsBeginCreateOrUpdateOptions contains the optional parameters for the Rollouts.BeginCreateOrUpdate method.
type RolloutsBeginCreateOrUpdateOptions struct {
	// Source rollout request object that defines the rollout.
	RolloutRequest *RolloutRequest
}

// RolloutsCancelOptions contains the optional parameters for the Rollouts.Cancel method.
type RolloutsCancelOptions struct {
	// placeholder for future optional parameters
}

// RolloutsDeleteOptions contains the optional parameters for the Rollouts.Delete method.
type RolloutsDeleteOptions struct {
	// placeholder for future optional parameters
}

// RolloutsGetOptions contains the optional parameters for the Rollouts.Get method.
type RolloutsGetOptions struct {
	// Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.
	RetryAttempt *int32
}

// RolloutsListOptions contains the optional parameters for the Rollouts.List method.
type RolloutsListOptions struct {
	// placeholder for future optional parameters
}

// RolloutsRestartOptions contains the optional parameters for the Rollouts.Restart method.
type RolloutsRestartOptions struct {
	// If true, will skip all succeeded steps so far in the rollout. If false, will execute the entire rollout again regardless of the current state of individual
	// resources. Defaults to false if not specified.
	SkipSucceeded *bool
}

// SasAuthentication - Defines the properties to access the artifacts using an Azure Storage SAS URI.
type SasAuthentication struct {
	Authentication
	// The SAS properties
	Properties *SasProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SasAuthentication.
func (s SasAuthentication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.Authentication.marshalInternal(objectMap, "Sas")
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SasAuthentication.
func (s *SasAuthentication) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.Authentication.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SasProperties - The properties that define SAS authentication.
type SasProperties struct {
	// REQUIRED; The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined
	// in the artifactRoot.
	SasURI *string `json:"sasUri,omitempty"`
}

// Service - Defines a service.
type Service struct {
	ServiceProperties
	// Name of the service.
	Name *string `json:"name,omitempty"`

	// The detailed information about the units that make up the service.
	ServiceUnits []*ServiceUnit `json:"serviceUnits,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Service.
func (s Service) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ServiceProperties.marshalInternal(objectMap)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "serviceUnits", s.ServiceUnits)
	return json.Marshal(objectMap)
}

// ServiceProperties - The properties of a service.
type ServiceProperties struct {
	// REQUIRED; The Azure location to which the resources in the service belong to or should be deployed to.
	TargetLocation *string `json:"targetLocation,omitempty"`

	// REQUIRED; The subscription to which the resources in the service belong to or should be deployed to.
	TargetSubscriptionID *string `json:"targetSubscriptionId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceProperties.
func (s ServiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (s ServiceProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "targetLocation", s.TargetLocation)
	populate(objectMap, "targetSubscriptionId", s.TargetSubscriptionID)
}

// ServiceResource - The resource representation of a service in a service topology.
type ServiceResource struct {
	TrackedResource
	// REQUIRED; The properties that define a service in a service topology.
	Properties *ServiceResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResource.
func (s ServiceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceResource.
func (s *ServiceResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ServiceResourceProperties - The properties that define a service in a service topology.
type ServiceResourceProperties struct {
	ServiceProperties
}

// ServiceTopologiesCreateOrUpdateOptions contains the optional parameters for the ServiceTopologies.CreateOrUpdate method.
type ServiceTopologiesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServiceTopologiesDeleteOptions contains the optional parameters for the ServiceTopologies.Delete method.
type ServiceTopologiesDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServiceTopologiesGetOptions contains the optional parameters for the ServiceTopologies.Get method.
type ServiceTopologiesGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceTopologiesListOptions contains the optional parameters for the ServiceTopologies.List method.
type ServiceTopologiesListOptions struct {
	// placeholder for future optional parameters
}

// ServiceTopologyProperties - The properties of a service topology.
type ServiceTopologyProperties struct {
	// The resource Id of the artifact source that contains the artifacts that can be referenced in the service units.
	ArtifactSourceID *string `json:"artifactSourceId,omitempty"`
}

// ServiceTopologyResource - The resource representation of a service topology.
type ServiceTopologyResource struct {
	TrackedResource
	// REQUIRED; The properties that define the service topology.
	Properties *ServiceTopologyResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceTopologyResource.
func (s ServiceTopologyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceTopologyResource.
func (s *ServiceTopologyResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ServiceTopologyResourceProperties - The properties that define the service topology.
type ServiceTopologyResourceProperties struct {
	ServiceTopologyProperties
}

// ServiceUnit - Defines a service unit.
type ServiceUnit struct {
	ServiceUnitProperties
	// Name of the service unit.
	Name *string `json:"name,omitempty"`

	// Detailed step information, if present.
	Steps []*RolloutStep `json:"steps,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceUnit.
func (s ServiceUnit) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ServiceUnitProperties.marshalInternal(objectMap)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "steps", s.Steps)
	return json.Marshal(objectMap)
}

// ServiceUnitArtifacts - Defines the artifacts of a service unit.
type ServiceUnitArtifacts struct {
	// The path to the ARM parameters file relative to the artifact source.
	ParametersArtifactSourceRelativePath *string `json:"parametersArtifactSourceRelativePath,omitempty"`

	// The full URI of the ARM parameters file with the SAS token.
	ParametersURI *string `json:"parametersUri,omitempty"`

	// The path to the ARM template file relative to the artifact source.
	TemplateArtifactSourceRelativePath *string `json:"templateArtifactSourceRelativePath,omitempty"`

	// The full URI of the ARM template file with the SAS token.
	TemplateURI *string `json:"templateUri,omitempty"`
}

// ServiceUnitProperties - Defines the properties of a service unit.
type ServiceUnitProperties struct {
	// REQUIRED; Describes the type of ARM deployment to be performed on the resource.
	DeploymentMode *DeploymentMode `json:"deploymentMode,omitempty"`

	// REQUIRED; The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
	TargetResourceGroup *string `json:"targetResourceGroup,omitempty"`

	// The artifacts for the service unit.
	Artifacts *ServiceUnitArtifacts `json:"artifacts,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceUnitProperties.
func (s ServiceUnitProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (s ServiceUnitProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "artifacts", s.Artifacts)
	populate(objectMap, "deploymentMode", s.DeploymentMode)
	populate(objectMap, "targetResourceGroup", s.TargetResourceGroup)
}

// ServiceUnitResource - Represents the response of a service unit resource.
type ServiceUnitResource struct {
	TrackedResource
	// REQUIRED; The properties that define the service unit.
	Properties *ServiceUnitResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceUnitResource.
func (s ServiceUnitResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceUnitResource.
func (s *ServiceUnitResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &s.Properties)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ServiceUnitResourceProperties - The properties that define the service unit.
type ServiceUnitResourceProperties struct {
	ServiceUnitProperties
}

// ServiceUnitsBeginCreateOrUpdateOptions contains the optional parameters for the ServiceUnits.BeginCreateOrUpdate method.
type ServiceUnitsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServiceUnitsDeleteOptions contains the optional parameters for the ServiceUnits.Delete method.
type ServiceUnitsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServiceUnitsGetOptions contains the optional parameters for the ServiceUnits.Get method.
type ServiceUnitsGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceUnitsListOptions contains the optional parameters for the ServiceUnits.List method.
type ServiceUnitsListOptions struct {
	// placeholder for future optional parameters
}

// ServicesCreateOrUpdateOptions contains the optional parameters for the Services.CreateOrUpdate method.
type ServicesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServicesDeleteOptions contains the optional parameters for the Services.Delete method.
type ServicesDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServicesGetOptions contains the optional parameters for the Services.Get method.
type ServicesGetOptions struct {
	// placeholder for future optional parameters
}

// ServicesListOptions contains the optional parameters for the Services.List method.
type ServicesListOptions struct {
	// placeholder for future optional parameters
}

// StepGroup - The properties that define a Step group in a rollout.
type StepGroup struct {
	// REQUIRED; The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
	DeploymentTargetID *string `json:"deploymentTargetId,omitempty"`

	// REQUIRED; The name of the step group.
	Name *string `json:"name,omitempty"`

	// The list of step group names on which this step group depends on.
	DependsOnStepGroups []*string `json:"dependsOnStepGroups,omitempty"`

	// The list of steps to be run after deploying the target.
	PostDeploymentSteps []*PrePostStep `json:"postDeploymentSteps,omitempty"`

	// The list of steps to be run before deploying the target.
	PreDeploymentSteps []*PrePostStep `json:"preDeploymentSteps,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StepGroup.
func (s StepGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dependsOnStepGroups", s.DependsOnStepGroups)
	populate(objectMap, "deploymentTargetId", s.DeploymentTargetID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "postDeploymentSteps", s.PostDeploymentSteps)
	populate(objectMap, "preDeploymentSteps", s.PreDeploymentSteps)
	return json.Marshal(objectMap)
}

// StepOperationInfo - Detailed information of a specific step run.
type StepOperationInfo struct {
	// The errors, if any, for the action.
	Error *CloudErrorBody `json:"error,omitempty"`

	// READ-ONLY; Unique identifier to track the request for ARM-based resources.
	CorrelationID *string `json:"correlationId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the ARM deployment initiated as part of the step.
	DeploymentName *string `json:"deploymentName,omitempty" azure:"ro"`

	// READ-ONLY; End time of the action in UTC.
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Last time in UTC this operation was updated.
	LastUpdatedTime *time.Time `json:"lastUpdatedTime,omitempty" azure:"ro"`

	// READ-ONLY; Start time of the action in UTC.
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StepOperationInfo.
func (s StepOperationInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "correlationId", s.CorrelationID)
	populate(objectMap, "deploymentName", s.DeploymentName)
	populateTimeRFC3339(objectMap, "endTime", s.EndTime)
	populate(objectMap, "error", s.Error)
	populateTimeRFC3339(objectMap, "lastUpdatedTime", s.LastUpdatedTime)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StepOperationInfo.
func (s *StepOperationInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "correlationId":
			err = unpopulate(val, &s.CorrelationID)
			delete(rawMsg, key)
		case "deploymentName":
			err = unpopulate(val, &s.DeploymentName)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, &s.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &s.Error)
			delete(rawMsg, key)
		case "lastUpdatedTime":
			err = unpopulateTimeRFC3339(val, &s.LastUpdatedTime)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StepPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetStepProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *HealthCheckStepProperties, *StepProperties, *WaitStepProperties
type StepPropertiesClassification interface {
	// GetStepProperties returns the StepProperties content of the underlying type.
	GetStepProperties() *StepProperties
}

// StepProperties - The properties of a step resource.
type StepProperties struct {
	// REQUIRED; The type of step.
	StepType *StepType `json:"stepType,omitempty"`
}

// GetStepProperties implements the StepPropertiesClassification interface for type StepProperties.
func (s *StepProperties) GetStepProperties() *StepProperties { return s }

// UnmarshalJSON implements the json.Unmarshaller interface for type StepProperties.
func (s *StepProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return s.unmarshalInternal(rawMsg)
}

func (s StepProperties) marshalInternal(objectMap map[string]interface{}, discValue StepType) {
	s.StepType = &discValue
	objectMap["stepType"] = s.StepType
}

func (s *StepProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "stepType":
			err = unpopulate(val, &s.StepType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StepResource - The resource representation of a rollout step.
type StepResource struct {
	TrackedResource
	// REQUIRED; The properties that define the step.
	Properties StepPropertiesClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StepResource.
func (s StepResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StepResource.
func (s *StepResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			s.Properties, err = unmarshalStepPropertiesClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// StepsCreateOrUpdateOptions contains the optional parameters for the Steps.CreateOrUpdate method.
type StepsCreateOrUpdateOptions struct {
	// The step object.
	StepInfo *StepResource
}

// StepsDeleteOptions contains the optional parameters for the Steps.Delete method.
type StepsDeleteOptions struct {
	// placeholder for future optional parameters
}

// StepsGetOptions contains the optional parameters for the Steps.Get method.
type StepsGetOptions struct {
	// placeholder for future optional parameters
}

// StepsListOptions contains the optional parameters for the Steps.List method.
type StepsListOptions struct {
	// placeholder for future optional parameters
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TrackedResource.
func (t *TrackedResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func (t *TrackedResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
			err = unpopulate(val, &t.Location)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &t.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := t.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// WaitStepAttributes - The parameters for the wait step.
type WaitStepAttributes struct {
	// REQUIRED; The duration in ISO 8601 format of how long the wait should be.
	Duration *string `json:"duration,omitempty"`
}

// WaitStepProperties - Defines the properties of a Wait step.
type WaitStepProperties struct {
	StepProperties
	// REQUIRED; The Wait attributes
	Attributes *WaitStepAttributes `json:"attributes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WaitStepProperties.
func (w WaitStepProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.StepProperties.marshalInternal(objectMap, StepTypeWait)
	populate(objectMap, "attributes", w.Attributes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WaitStepProperties.
func (w *WaitStepProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "attributes":
			err = unpopulate(val, &w.Attributes)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := w.StepProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
