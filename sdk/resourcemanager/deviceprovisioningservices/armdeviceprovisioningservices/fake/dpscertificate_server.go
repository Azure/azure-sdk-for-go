// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/deviceprovisioningservices/armdeviceprovisioningservices"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
	"time"
)

// DpsCertificateServer is a fake server for instances of the armdeviceprovisioningservices.DpsCertificateClient type.
type DpsCertificateServer struct {
	// CreateOrUpdate is the fake for method DpsCertificateClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, provisioningServiceName string, certificateName string, certificateDescription armdeviceprovisioningservices.CertificateResponse, options *armdeviceprovisioningservices.DpsCertificateClientCreateOrUpdateOptions) (resp azfake.Responder[armdeviceprovisioningservices.DpsCertificateClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method DpsCertificateClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, provisioningServiceName string, certificateName string, ifMatch string, options *armdeviceprovisioningservices.DpsCertificateClientDeleteOptions) (resp azfake.Responder[armdeviceprovisioningservices.DpsCertificateClientDeleteResponse], errResp azfake.ErrorResponder)

	// GenerateVerificationCode is the fake for method DpsCertificateClient.GenerateVerificationCode
	// HTTP status codes to indicate success: http.StatusOK
	GenerateVerificationCode func(ctx context.Context, resourceGroupName string, provisioningServiceName string, certificateName string, ifMatch string, options *armdeviceprovisioningservices.DpsCertificateClientGenerateVerificationCodeOptions) (resp azfake.Responder[armdeviceprovisioningservices.DpsCertificateClientGenerateVerificationCodeResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method DpsCertificateClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, provisioningServiceName string, certificateName string, options *armdeviceprovisioningservices.DpsCertificateClientGetOptions) (resp azfake.Responder[armdeviceprovisioningservices.DpsCertificateClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method DpsCertificateClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, provisioningServiceName string, options *armdeviceprovisioningservices.DpsCertificateClientListOptions) (resp azfake.PagerResponder[armdeviceprovisioningservices.DpsCertificateClientListResponse])

	// VerifyCertificate is the fake for method DpsCertificateClient.VerifyCertificate
	// HTTP status codes to indicate success: http.StatusOK
	VerifyCertificate func(ctx context.Context, resourceGroupName string, provisioningServiceName string, certificateName string, ifMatch string, request armdeviceprovisioningservices.VerificationCodeRequest, options *armdeviceprovisioningservices.DpsCertificateClientVerifyCertificateOptions) (resp azfake.Responder[armdeviceprovisioningservices.DpsCertificateClientVerifyCertificateResponse], errResp azfake.ErrorResponder)
}

// NewDpsCertificateServerTransport creates a new instance of DpsCertificateServerTransport with the provided implementation.
// The returned DpsCertificateServerTransport instance is connected to an instance of armdeviceprovisioningservices.DpsCertificateClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDpsCertificateServerTransport(srv *DpsCertificateServer) *DpsCertificateServerTransport {
	return &DpsCertificateServerTransport{
		srv:          srv,
		newListPager: newTracker[azfake.PagerResponder[armdeviceprovisioningservices.DpsCertificateClientListResponse]](),
	}
}

// DpsCertificateServerTransport connects instances of armdeviceprovisioningservices.DpsCertificateClient to instances of DpsCertificateServer.
// Don't use this type directly, use NewDpsCertificateServerTransport instead.
type DpsCertificateServerTransport struct {
	srv          *DpsCertificateServer
	newListPager *tracker[azfake.PagerResponder[armdeviceprovisioningservices.DpsCertificateClientListResponse]]
}

// Do implements the policy.Transporter interface for DpsCertificateServerTransport.
func (d *DpsCertificateServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DpsCertificateServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if dpsCertificateServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = dpsCertificateServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DpsCertificateClient.CreateOrUpdate":
				res.resp, res.err = d.dispatchCreateOrUpdate(req)
			case "DpsCertificateClient.Delete":
				res.resp, res.err = d.dispatchDelete(req)
			case "DpsCertificateClient.GenerateVerificationCode":
				res.resp, res.err = d.dispatchGenerateVerificationCode(req)
			case "DpsCertificateClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DpsCertificateClient.NewListPager":
				res.resp, res.err = d.dispatchNewListPager(req)
			case "DpsCertificateClient.VerifyCertificate":
				res.resp, res.err = d.dispatchVerifyCertificate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DpsCertificateServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<certificateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armdeviceprovisioningservices.CertificateResponse](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
	if err != nil {
		return nil, err
	}
	certificateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("certificateName")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	var options *armdeviceprovisioningservices.DpsCertificateClientCreateOrUpdateOptions
	if ifMatchParam != nil {
		options = &armdeviceprovisioningservices.DpsCertificateClientCreateOrUpdateOptions{
			IfMatch: ifMatchParam,
		}
	}
	respr, errRespr := d.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, provisioningServiceNameParam, certificateNameParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CertificateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DpsCertificateServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if d.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<certificateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
	if err != nil {
		return nil, err
	}
	certificateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("certificateName")])
	if err != nil {
		return nil, err
	}
	certificateNameUnescaped, err := url.QueryUnescape(qp.Get("certificate.name"))
	if err != nil {
		return nil, err
	}
	certificateNameParam := getOptional(certificateNameUnescaped)
	certificateRawBytesUnescaped, err := url.QueryUnescape(qp.Get("certificate.rawBytes"))
	if err != nil {
		return nil, err
	}
	certificateRawBytesParam, err := base64.StdEncoding.DecodeString(certificateRawBytesUnescaped)
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedUnescaped, err := url.QueryUnescape(qp.Get("certificate.isVerified"))
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedParam, err := parseOptional(certificateIsVerifiedUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificatePurposeUnescaped, err := url.QueryUnescape(qp.Get("certificate.purpose"))
	if err != nil {
		return nil, err
	}
	certificatePurposeParam := getOptional(armdeviceprovisioningservices.CertificatePurpose(certificatePurposeUnescaped))
	certificateCreatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.created"))
	if err != nil {
		return nil, err
	}
	certificateCreatedParam, err := parseOptional(certificateCreatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.lastUpdated"))
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedParam, err := parseOptional(certificateLastUpdatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyUnescaped, err := url.QueryUnescape(qp.Get("certificate.hasPrivateKey"))
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyParam, err := parseOptional(certificateHasPrivateKeyUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificateNonceUnescaped, err := url.QueryUnescape(qp.Get("certificate.nonce"))
	if err != nil {
		return nil, err
	}
	certificateNonceParam := getOptional(certificateNonceUnescaped)
	var options *armdeviceprovisioningservices.DpsCertificateClientDeleteOptions
	if certificateNameParam != nil || certificateRawBytesParam != nil || certificateIsVerifiedParam != nil || certificatePurposeParam != nil || certificateCreatedParam != nil || certificateLastUpdatedParam != nil || certificateHasPrivateKeyParam != nil || certificateNonceParam != nil {
		options = &armdeviceprovisioningservices.DpsCertificateClientDeleteOptions{
			CertificateName:          certificateNameParam,
			CertificateRawBytes:      certificateRawBytesParam,
			CertificateIsVerified:    certificateIsVerifiedParam,
			CertificatePurpose:       certificatePurposeParam,
			CertificateCreated:       certificateCreatedParam,
			CertificateLastUpdated:   certificateLastUpdatedParam,
			CertificateHasPrivateKey: certificateHasPrivateKeyParam,
			CertificateNonce:         certificateNonceParam,
		}
	}
	respr, errRespr := d.srv.Delete(req.Context(), resourceGroupNameParam, provisioningServiceNameParam, certificateNameParam, getHeaderValue(req.Header, "If-Match"), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DpsCertificateServerTransport) dispatchGenerateVerificationCode(req *http.Request) (*http.Response, error) {
	if d.srv.GenerateVerificationCode == nil {
		return nil, &nonRetriableError{errors.New("fake for method GenerateVerificationCode not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<certificateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/generateVerificationCode`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
	if err != nil {
		return nil, err
	}
	certificateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("certificateName")])
	if err != nil {
		return nil, err
	}
	certificateNameUnescaped, err := url.QueryUnescape(qp.Get("certificate.name"))
	if err != nil {
		return nil, err
	}
	certificateNameParam := getOptional(certificateNameUnescaped)
	certificateRawBytesUnescaped, err := url.QueryUnescape(qp.Get("certificate.rawBytes"))
	if err != nil {
		return nil, err
	}
	certificateRawBytesParam, err := base64.StdEncoding.DecodeString(certificateRawBytesUnescaped)
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedUnescaped, err := url.QueryUnescape(qp.Get("certificate.isVerified"))
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedParam, err := parseOptional(certificateIsVerifiedUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificatePurposeUnescaped, err := url.QueryUnescape(qp.Get("certificate.purpose"))
	if err != nil {
		return nil, err
	}
	certificatePurposeParam := getOptional(armdeviceprovisioningservices.CertificatePurpose(certificatePurposeUnescaped))
	certificateCreatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.created"))
	if err != nil {
		return nil, err
	}
	certificateCreatedParam, err := parseOptional(certificateCreatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.lastUpdated"))
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedParam, err := parseOptional(certificateLastUpdatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyUnescaped, err := url.QueryUnescape(qp.Get("certificate.hasPrivateKey"))
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyParam, err := parseOptional(certificateHasPrivateKeyUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificateNonceUnescaped, err := url.QueryUnescape(qp.Get("certificate.nonce"))
	if err != nil {
		return nil, err
	}
	certificateNonceParam := getOptional(certificateNonceUnescaped)
	var options *armdeviceprovisioningservices.DpsCertificateClientGenerateVerificationCodeOptions
	if certificateNameParam != nil || certificateRawBytesParam != nil || certificateIsVerifiedParam != nil || certificatePurposeParam != nil || certificateCreatedParam != nil || certificateLastUpdatedParam != nil || certificateHasPrivateKeyParam != nil || certificateNonceParam != nil {
		options = &armdeviceprovisioningservices.DpsCertificateClientGenerateVerificationCodeOptions{
			CertificateName:          certificateNameParam,
			CertificateRawBytes:      certificateRawBytesParam,
			CertificateIsVerified:    certificateIsVerifiedParam,
			CertificatePurpose:       certificatePurposeParam,
			CertificateCreated:       certificateCreatedParam,
			CertificateLastUpdated:   certificateLastUpdatedParam,
			CertificateHasPrivateKey: certificateHasPrivateKeyParam,
			CertificateNonce:         certificateNonceParam,
		}
	}
	respr, errRespr := d.srv.GenerateVerificationCode(req.Context(), resourceGroupNameParam, provisioningServiceNameParam, certificateNameParam, getHeaderValue(req.Header, "If-Match"), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VerificationCodeResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DpsCertificateServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<certificateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
	if err != nil {
		return nil, err
	}
	certificateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("certificateName")])
	if err != nil {
		return nil, err
	}
	ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
	var options *armdeviceprovisioningservices.DpsCertificateClientGetOptions
	if ifMatchParam != nil {
		options = &armdeviceprovisioningservices.DpsCertificateClientGetOptions{
			IfMatch: ifMatchParam,
		}
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceGroupNameParam, provisioningServiceNameParam, certificateNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CertificateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DpsCertificateServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := d.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListPager(resourceGroupNameParam, provisioningServiceNameParam, nil)
		newListPager = &resp
		d.newListPager.add(req, newListPager)
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		d.newListPager.remove(req)
	}
	return resp, nil
}

func (d *DpsCertificateServerTransport) dispatchVerifyCertificate(req *http.Request) (*http.Response, error) {
	if d.srv.VerifyCertificate == nil {
		return nil, &nonRetriableError{errors.New("fake for method VerifyCertificate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Devices/provisioningServices/(?P<provisioningServiceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/certificates/(?P<certificateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/verify`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	body, err := server.UnmarshalRequestAsJSON[armdeviceprovisioningservices.VerificationCodeRequest](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	provisioningServiceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("provisioningServiceName")])
	if err != nil {
		return nil, err
	}
	certificateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("certificateName")])
	if err != nil {
		return nil, err
	}
	certificateNameUnescaped, err := url.QueryUnescape(qp.Get("certificate.name"))
	if err != nil {
		return nil, err
	}
	certificateNameParam := getOptional(certificateNameUnescaped)
	certificateRawBytesUnescaped, err := url.QueryUnescape(qp.Get("certificate.rawBytes"))
	if err != nil {
		return nil, err
	}
	certificateRawBytesParam, err := base64.StdEncoding.DecodeString(certificateRawBytesUnescaped)
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedUnescaped, err := url.QueryUnescape(qp.Get("certificate.isVerified"))
	if err != nil {
		return nil, err
	}
	certificateIsVerifiedParam, err := parseOptional(certificateIsVerifiedUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificatePurposeUnescaped, err := url.QueryUnescape(qp.Get("certificate.purpose"))
	if err != nil {
		return nil, err
	}
	certificatePurposeParam := getOptional(armdeviceprovisioningservices.CertificatePurpose(certificatePurposeUnescaped))
	certificateCreatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.created"))
	if err != nil {
		return nil, err
	}
	certificateCreatedParam, err := parseOptional(certificateCreatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedUnescaped, err := url.QueryUnescape(qp.Get("certificate.lastUpdated"))
	if err != nil {
		return nil, err
	}
	certificateLastUpdatedParam, err := parseOptional(certificateLastUpdatedUnescaped, func(v string) (time.Time, error) { return time.Parse(time.RFC3339Nano, v) })
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyUnescaped, err := url.QueryUnescape(qp.Get("certificate.hasPrivateKey"))
	if err != nil {
		return nil, err
	}
	certificateHasPrivateKeyParam, err := parseOptional(certificateHasPrivateKeyUnescaped, strconv.ParseBool)
	if err != nil {
		return nil, err
	}
	certificateNonceUnescaped, err := url.QueryUnescape(qp.Get("certificate.nonce"))
	if err != nil {
		return nil, err
	}
	certificateNonceParam := getOptional(certificateNonceUnescaped)
	var options *armdeviceprovisioningservices.DpsCertificateClientVerifyCertificateOptions
	if certificateNameParam != nil || certificateRawBytesParam != nil || certificateIsVerifiedParam != nil || certificatePurposeParam != nil || certificateCreatedParam != nil || certificateLastUpdatedParam != nil || certificateHasPrivateKeyParam != nil || certificateNonceParam != nil {
		options = &armdeviceprovisioningservices.DpsCertificateClientVerifyCertificateOptions{
			CertificateName:          certificateNameParam,
			CertificateRawBytes:      certificateRawBytesParam,
			CertificateIsVerified:    certificateIsVerifiedParam,
			CertificatePurpose:       certificatePurposeParam,
			CertificateCreated:       certificateCreatedParam,
			CertificateLastUpdated:   certificateLastUpdatedParam,
			CertificateHasPrivateKey: certificateHasPrivateKeyParam,
			CertificateNonce:         certificateNonceParam,
		}
	}
	respr, errRespr := d.srv.VerifyCertificate(req.Context(), resourceGroupNameParam, provisioningServiceNameParam, certificateNameParam, getHeaderValue(req.Header, "If-Match"), body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CertificateResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DpsCertificateServerTransport
var dpsCertificateServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
