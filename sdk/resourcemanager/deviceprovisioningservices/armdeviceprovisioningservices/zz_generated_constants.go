//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeviceprovisioningservices

const (
	module  = "armdeviceprovisioningservices"
	version = "v0.1.0"
)

// AccessRightsDescription - Rights that this key has.
type AccessRightsDescription string

const (
	AccessRightsDescriptionDeviceConnect           AccessRightsDescription = "DeviceConnect"
	AccessRightsDescriptionEnrollmentRead          AccessRightsDescription = "EnrollmentRead"
	AccessRightsDescriptionEnrollmentWrite         AccessRightsDescription = "EnrollmentWrite"
	AccessRightsDescriptionRegistrationStatusRead  AccessRightsDescription = "RegistrationStatusRead"
	AccessRightsDescriptionRegistrationStatusWrite AccessRightsDescription = "RegistrationStatusWrite"
	AccessRightsDescriptionServiceConfig           AccessRightsDescription = "ServiceConfig"
)

// PossibleAccessRightsDescriptionValues returns the possible values for the AccessRightsDescription const type.
func PossibleAccessRightsDescriptionValues() []AccessRightsDescription {
	return []AccessRightsDescription{
		AccessRightsDescriptionDeviceConnect,
		AccessRightsDescriptionEnrollmentRead,
		AccessRightsDescriptionEnrollmentWrite,
		AccessRightsDescriptionRegistrationStatusRead,
		AccessRightsDescriptionRegistrationStatusWrite,
		AccessRightsDescriptionServiceConfig,
	}
}

// ToPtr returns a *AccessRightsDescription pointing to the current value.
func (c AccessRightsDescription) ToPtr() *AccessRightsDescription {
	return &c
}

// AllocationPolicy - Allocation policy to be used by this provisioning service.
type AllocationPolicy string

const (
	AllocationPolicyGeoLatency AllocationPolicy = "GeoLatency"
	AllocationPolicyHashed     AllocationPolicy = "Hashed"
	AllocationPolicyStatic     AllocationPolicy = "Static"
)

// PossibleAllocationPolicyValues returns the possible values for the AllocationPolicy const type.
func PossibleAllocationPolicyValues() []AllocationPolicy {
	return []AllocationPolicy{
		AllocationPolicyGeoLatency,
		AllocationPolicyHashed,
		AllocationPolicyStatic,
	}
}

// ToPtr returns a *AllocationPolicy pointing to the current value.
func (c AllocationPolicy) ToPtr() *AllocationPolicy {
	return &c
}

type CertificatePurpose string

const (
	CertificatePurposeClientAuthentication CertificatePurpose = "clientAuthentication"
	CertificatePurposeServerAuthentication CertificatePurpose = "serverAuthentication"
)

// PossibleCertificatePurposeValues returns the possible values for the CertificatePurpose const type.
func PossibleCertificatePurposeValues() []CertificatePurpose {
	return []CertificatePurpose{
		CertificatePurposeClientAuthentication,
		CertificatePurposeServerAuthentication,
	}
}

// ToPtr returns a *CertificatePurpose pointing to the current value.
func (c CertificatePurpose) ToPtr() *CertificatePurpose {
	return &c
}

// IPFilterActionType - The desired action for requests captured by this rule.
type IPFilterActionType string

const (
	IPFilterActionTypeAccept IPFilterActionType = "Accept"
	IPFilterActionTypeReject IPFilterActionType = "Reject"
)

// PossibleIPFilterActionTypeValues returns the possible values for the IPFilterActionType const type.
func PossibleIPFilterActionTypeValues() []IPFilterActionType {
	return []IPFilterActionType{
		IPFilterActionTypeAccept,
		IPFilterActionTypeReject,
	}
}

// ToPtr returns a *IPFilterActionType pointing to the current value.
func (c IPFilterActionType) ToPtr() *IPFilterActionType {
	return &c
}

// IPFilterTargetType - Target for requests captured by this rule.
type IPFilterTargetType string

const (
	IPFilterTargetTypeAll        IPFilterTargetType = "all"
	IPFilterTargetTypeServiceAPI IPFilterTargetType = "serviceApi"
	IPFilterTargetTypeDeviceAPI  IPFilterTargetType = "deviceApi"
)

// PossibleIPFilterTargetTypeValues returns the possible values for the IPFilterTargetType const type.
func PossibleIPFilterTargetTypeValues() []IPFilterTargetType {
	return []IPFilterTargetType{
		IPFilterTargetTypeAll,
		IPFilterTargetTypeServiceAPI,
		IPFilterTargetTypeDeviceAPI,
	}
}

// ToPtr returns a *IPFilterTargetType pointing to the current value.
func (c IPFilterTargetType) ToPtr() *IPFilterTargetType {
	return &c
}

// IotDpsSKU - Sku name.
type IotDpsSKU string

const (
	IotDpsSKUS1 IotDpsSKU = "S1"
)

// PossibleIotDpsSKUValues returns the possible values for the IotDpsSKU const type.
func PossibleIotDpsSKUValues() []IotDpsSKU {
	return []IotDpsSKU{
		IotDpsSKUS1,
	}
}

// ToPtr returns a *IotDpsSKU pointing to the current value.
func (c IotDpsSKU) ToPtr() *IotDpsSKU {
	return &c
}

// NameUnavailabilityReason - specifies the reason a name is unavailable
type NameUnavailabilityReason string

const (
	NameUnavailabilityReasonAlreadyExists NameUnavailabilityReason = "AlreadyExists"
	NameUnavailabilityReasonInvalid       NameUnavailabilityReason = "Invalid"
)

// PossibleNameUnavailabilityReasonValues returns the possible values for the NameUnavailabilityReason const type.
func PossibleNameUnavailabilityReasonValues() []NameUnavailabilityReason {
	return []NameUnavailabilityReason{
		NameUnavailabilityReasonAlreadyExists,
		NameUnavailabilityReasonInvalid,
	}
}

// ToPtr returns a *NameUnavailabilityReason pointing to the current value.
func (c NameUnavailabilityReason) ToPtr() *NameUnavailabilityReason {
	return &c
}

// PrivateLinkServiceConnectionStatus - The status of a private endpoint connection
type PrivateLinkServiceConnectionStatus string

const (
	PrivateLinkServiceConnectionStatusApproved     PrivateLinkServiceConnectionStatus = "Approved"
	PrivateLinkServiceConnectionStatusDisconnected PrivateLinkServiceConnectionStatus = "Disconnected"
	PrivateLinkServiceConnectionStatusPending      PrivateLinkServiceConnectionStatus = "Pending"
	PrivateLinkServiceConnectionStatusRejected     PrivateLinkServiceConnectionStatus = "Rejected"
)

// PossiblePrivateLinkServiceConnectionStatusValues returns the possible values for the PrivateLinkServiceConnectionStatus const type.
func PossiblePrivateLinkServiceConnectionStatusValues() []PrivateLinkServiceConnectionStatus {
	return []PrivateLinkServiceConnectionStatus{
		PrivateLinkServiceConnectionStatusApproved,
		PrivateLinkServiceConnectionStatusDisconnected,
		PrivateLinkServiceConnectionStatusPending,
		PrivateLinkServiceConnectionStatusRejected,
	}
}

// ToPtr returns a *PrivateLinkServiceConnectionStatus pointing to the current value.
func (c PrivateLinkServiceConnectionStatus) ToPtr() *PrivateLinkServiceConnectionStatus {
	return &c
}

// PublicNetworkAccess - Whether requests from Public Network are allowed
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled  PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// ToPtr returns a *PublicNetworkAccess pointing to the current value.
func (c PublicNetworkAccess) ToPtr() *PublicNetworkAccess {
	return &c
}

// State - Current state of the provisioning service.
type State string

const (
	StateActivating       State = "Activating"
	StateActivationFailed State = "ActivationFailed"
	StateActive           State = "Active"
	StateDeleted          State = "Deleted"
	StateDeleting         State = "Deleting"
	StateDeletionFailed   State = "DeletionFailed"
	StateFailingOver      State = "FailingOver"
	StateFailoverFailed   State = "FailoverFailed"
	StateResuming         State = "Resuming"
	StateSuspended        State = "Suspended"
	StateSuspending       State = "Suspending"
	StateTransitioning    State = "Transitioning"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateActivating,
		StateActivationFailed,
		StateActive,
		StateDeleted,
		StateDeleting,
		StateDeletionFailed,
		StateFailingOver,
		StateFailoverFailed,
		StateResuming,
		StateSuspended,
		StateSuspending,
		StateTransitioning,
	}
}

// ToPtr returns a *State pointing to the current value.
func (c State) ToPtr() *State {
	return &c
}
