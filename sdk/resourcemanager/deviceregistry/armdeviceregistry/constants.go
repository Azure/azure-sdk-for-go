// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdeviceregistry

// ActionType - Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	// ActionTypeInternal - Actions are for internal-only APIs.
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AuthenticationMethod - The method to authenticate the user of the client at the server.
type AuthenticationMethod string

const (
	// AuthenticationMethodAnonymous - The user authentication method is anonymous.
	AuthenticationMethodAnonymous AuthenticationMethod = "Anonymous"
	// AuthenticationMethodCertificate - The user authentication method is an x509 certificate.
	AuthenticationMethodCertificate AuthenticationMethod = "Certificate"
	// AuthenticationMethodUsernamePassword - The user authentication method is a username and password.
	AuthenticationMethodUsernamePassword AuthenticationMethod = "UsernamePassword"
)

// PossibleAuthenticationMethodValues returns the possible values for the AuthenticationMethod const type.
func PossibleAuthenticationMethodValues() []AuthenticationMethod {
	return []AuthenticationMethod{
		AuthenticationMethodAnonymous,
		AuthenticationMethodCertificate,
		AuthenticationMethodUsernamePassword,
	}
}

// CreatedByType - The kind of entity that created the resource.
type CreatedByType string

const (
	// CreatedByTypeApplication - The entity was created by an application.
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey - The entity was created by a key.
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity - The entity was created by a managed identity.
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser - The entity was created by a user.
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DataPointObservabilityMode - Defines the data point observability mode.
type DataPointObservabilityMode string

const (
	// DataPointObservabilityModeCounter - Map as counter to OpenTelemetry.
	DataPointObservabilityModeCounter DataPointObservabilityMode = "Counter"
	// DataPointObservabilityModeGauge - Map as gauge to OpenTelemetry.
	DataPointObservabilityModeGauge DataPointObservabilityMode = "Gauge"
	// DataPointObservabilityModeHistogram - Map as histogram to OpenTelemetry.
	DataPointObservabilityModeHistogram DataPointObservabilityMode = "Histogram"
	// DataPointObservabilityModeLog - Map as log to OpenTelemetry.
	DataPointObservabilityModeLog DataPointObservabilityMode = "Log"
	// DataPointObservabilityModeNone - No mapping to OpenTelemetry.
	DataPointObservabilityModeNone DataPointObservabilityMode = "None"
)

// PossibleDataPointObservabilityModeValues returns the possible values for the DataPointObservabilityMode const type.
func PossibleDataPointObservabilityModeValues() []DataPointObservabilityMode {
	return []DataPointObservabilityMode{
		DataPointObservabilityModeCounter,
		DataPointObservabilityModeGauge,
		DataPointObservabilityModeHistogram,
		DataPointObservabilityModeLog,
		DataPointObservabilityModeNone,
	}
}

// DatasetDestinationTarget - The set of supported dataset destinations for an asset.
type DatasetDestinationTarget string

const (
	// DatasetDestinationTargetBrokerStateStore - Broker State Store target.
	DatasetDestinationTargetBrokerStateStore DatasetDestinationTarget = "BrokerStateStore"
	// DatasetDestinationTargetMqtt - MQTT target.
	DatasetDestinationTargetMqtt DatasetDestinationTarget = "Mqtt"
	// DatasetDestinationTargetStorage - Storage target.
	DatasetDestinationTargetStorage DatasetDestinationTarget = "Storage"
)

// PossibleDatasetDestinationTargetValues returns the possible values for the DatasetDestinationTarget const type.
func PossibleDatasetDestinationTargetValues() []DatasetDestinationTarget {
	return []DatasetDestinationTarget{
		DatasetDestinationTargetBrokerStateStore,
		DatasetDestinationTargetMqtt,
		DatasetDestinationTargetStorage,
	}
}

// EventDestinationTarget - The set of supported event destinations for an asset.
type EventDestinationTarget string

const (
	// EventDestinationTargetMqtt - MQTT target.
	EventDestinationTargetMqtt EventDestinationTarget = "Mqtt"
	// EventDestinationTargetStorage - Storage target.
	EventDestinationTargetStorage EventDestinationTarget = "Storage"
)

// PossibleEventDestinationTargetValues returns the possible values for the EventDestinationTarget const type.
func PossibleEventDestinationTargetValues() []EventDestinationTarget {
	return []EventDestinationTarget{
		EventDestinationTargetMqtt,
		EventDestinationTargetStorage,
	}
}

// EventObservabilityMode - Defines the event observability mode.
type EventObservabilityMode string

const (
	// EventObservabilityModeLog - Map as log to OpenTelemetry.
	EventObservabilityModeLog EventObservabilityMode = "Log"
	// EventObservabilityModeNone - No mapping to OpenTelemetry.
	EventObservabilityModeNone EventObservabilityMode = "None"
)

// PossibleEventObservabilityModeValues returns the possible values for the EventObservabilityMode const type.
func PossibleEventObservabilityModeValues() []EventObservabilityMode {
	return []EventObservabilityMode{
		EventObservabilityModeLog,
		EventObservabilityModeNone,
	}
}

// Format - Defines the schema format.
type Format string

const (
	// FormatDelta10 - Delta format
	FormatDelta10 Format = "Delta/1.0"
	// FormatJSONSchemaDraft7 - JSON Schema version draft 7 format
	FormatJSONSchemaDraft7 Format = "JsonSchema/draft-07"
)

// PossibleFormatValues returns the possible values for the Format const type.
func PossibleFormatValues() []Format {
	return []Format{
		FormatDelta10,
		FormatJSONSchemaDraft7,
	}
}

// ManagementActionType - Defines the ManagementAction's type.
type ManagementActionType string

const (
	// ManagementActionTypeCall - Call action type.
	ManagementActionTypeCall ManagementActionType = "Call"
	// ManagementActionTypeRead - Read action type.
	ManagementActionTypeRead ManagementActionType = "Read"
	// ManagementActionTypeWrite - Write action type.
	ManagementActionTypeWrite ManagementActionType = "Write"
)

// PossibleManagementActionTypeValues returns the possible values for the ManagementActionType const type.
func PossibleManagementActionTypeValues() []ManagementActionType {
	return []ManagementActionType{
		ManagementActionTypeCall,
		ManagementActionTypeRead,
		ManagementActionTypeWrite,
	}
}

// MqttDestinationQos - The set of supported QoS types for a MQTT destination.
type MqttDestinationQos string

const (
	// MqttDestinationQosQos0 - QoS 0.
	MqttDestinationQosQos0 MqttDestinationQos = "Qos0"
	// MqttDestinationQosQos1 - QoS 1.
	MqttDestinationQosQos1 MqttDestinationQos = "Qos1"
)

// PossibleMqttDestinationQosValues returns the possible values for the MqttDestinationQos const type.
func PossibleMqttDestinationQosValues() []MqttDestinationQos {
	return []MqttDestinationQos{
		MqttDestinationQosQos0,
		MqttDestinationQosQos1,
	}
}

// NamespaceDiscoveredManagementActionType - Defines the ManagementAction's type.
type NamespaceDiscoveredManagementActionType string

const (
	// NamespaceDiscoveredManagementActionTypeCall - Call action type.
	NamespaceDiscoveredManagementActionTypeCall NamespaceDiscoveredManagementActionType = "Call"
	// NamespaceDiscoveredManagementActionTypeRead - Read action type.
	NamespaceDiscoveredManagementActionTypeRead NamespaceDiscoveredManagementActionType = "Read"
	// NamespaceDiscoveredManagementActionTypeWrite - Write action type.
	NamespaceDiscoveredManagementActionTypeWrite NamespaceDiscoveredManagementActionType = "Write"
)

// PossibleNamespaceDiscoveredManagementActionTypeValues returns the possible values for the NamespaceDiscoveredManagementActionType const type.
func PossibleNamespaceDiscoveredManagementActionTypeValues() []NamespaceDiscoveredManagementActionType {
	return []NamespaceDiscoveredManagementActionType{
		NamespaceDiscoveredManagementActionTypeCall,
		NamespaceDiscoveredManagementActionTypeRead,
		NamespaceDiscoveredManagementActionTypeWrite,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	// OriginSystem - Indicates the operation is initiated by a system.
	OriginSystem Origin = "system"
	// OriginUser - Indicates the operation is initiated by a user.
	OriginUser Origin = "user"
	// OriginUserSystem - Indicates the operation is initiated by a user or system.
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// ProvisioningState - The provisioning status of the resource.
type ProvisioningState string

const (
	// ProvisioningStateAccepted - Resource has been accepted by the server.
	ProvisioningStateAccepted ProvisioningState = "Accepted"
	// ProvisioningStateCanceled - Resource creation was canceled.
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateDeleting - Resource is deleting.
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed - Resource creation failed.
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateSucceeded - Resource has been created.
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateAccepted,
		ProvisioningStateCanceled,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
	}
}

// SchemaType - Defines the schema type.
type SchemaType string

const (
	// SchemaTypeMessageSchema - Message Schema schema type
	SchemaTypeMessageSchema SchemaType = "MessageSchema"
)

// PossibleSchemaTypeValues returns the possible values for the SchemaType const type.
func PossibleSchemaTypeValues() []SchemaType {
	return []SchemaType{
		SchemaTypeMessageSchema,
	}
}

// Scope - Scope of the migrate resources operation.
type Scope string

const (
	// ScopeResources - Scoping the migration to resourceIds provided
	ScopeResources Scope = "Resources"
)

// PossibleScopeValues returns the possible values for the Scope const type.
func PossibleScopeValues() []Scope {
	return []Scope{
		ScopeResources,
	}
}

// StreamDestinationTarget - The set of supported stream destinations for an asset.
type StreamDestinationTarget string

const (
	// StreamDestinationTargetMqtt - MQTT target.
	StreamDestinationTargetMqtt StreamDestinationTarget = "Mqtt"
	// StreamDestinationTargetStorage - Storage target.
	StreamDestinationTargetStorage StreamDestinationTarget = "Storage"
)

// PossibleStreamDestinationTargetValues returns the possible values for the StreamDestinationTarget const type.
func PossibleStreamDestinationTargetValues() []StreamDestinationTarget {
	return []StreamDestinationTarget{
		StreamDestinationTargetMqtt,
		StreamDestinationTargetStorage,
	}
}

// SystemAssignedServiceIdentityType - Type of managed service identity (either system assigned, or none).
type SystemAssignedServiceIdentityType string

const (
	// SystemAssignedServiceIdentityTypeNone - No managed system identity.
	SystemAssignedServiceIdentityTypeNone SystemAssignedServiceIdentityType = "None"
	// SystemAssignedServiceIdentityTypeSystemAssigned - System assigned managed system identity.
	SystemAssignedServiceIdentityTypeSystemAssigned SystemAssignedServiceIdentityType = "SystemAssigned"
)

// PossibleSystemAssignedServiceIdentityTypeValues returns the possible values for the SystemAssignedServiceIdentityType const type.
func PossibleSystemAssignedServiceIdentityTypeValues() []SystemAssignedServiceIdentityType {
	return []SystemAssignedServiceIdentityType{
		SystemAssignedServiceIdentityTypeNone,
		SystemAssignedServiceIdentityTypeSystemAssigned,
	}
}

// TopicRetainType - Topic retain types.
type TopicRetainType string

const (
	// TopicRetainTypeKeep - Retain the messages.
	TopicRetainTypeKeep TopicRetainType = "Keep"
	// TopicRetainTypeNever - Never retain messages.
	TopicRetainTypeNever TopicRetainType = "Never"
)

// PossibleTopicRetainTypeValues returns the possible values for the TopicRetainType const type.
func PossibleTopicRetainTypeValues() []TopicRetainType {
	return []TopicRetainType{
		TopicRetainTypeKeep,
		TopicRetainTypeNever,
	}
}
