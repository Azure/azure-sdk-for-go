// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdeviceregistry

import "time"

// Asset definition.
type Asset struct {
	// REQUIRED; The extended location.
	ExtendedLocation *ExtendedLocation

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *AssetProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AssetEndpointProfile - Asset Endpoint Profile definition.
type AssetEndpointProfile struct {
	// REQUIRED; The extended location.
	ExtendedLocation *ExtendedLocation

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *AssetEndpointProfileProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AssetEndpointProfileListResult - The response of a AssetEndpointProfile list operation.
type AssetEndpointProfileListResult struct {
	// REQUIRED; The AssetEndpointProfile items on this page
	Value []*AssetEndpointProfile

	// The link to the next page of items
	NextLink *string
}

// AssetEndpointProfileProperties - Defines the Asset Endpoint Profile properties.
type AssetEndpointProfileProperties struct {
	// REQUIRED; Defines the configuration for the connector type that is being used with the endpoint profile.
	EndpointProfileType *string

	// REQUIRED; The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress
	// URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration.
	TargetAddress *string

	// Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF).
	AdditionalConfiguration *string

	// Defines the client authentication mechanism to the server.
	Authentication *Authentication

	// Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery
	// flow. Discovered asset endpoint profile name must be provided.
	DiscoveredAssetEndpointProfileRef *string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for
	// custom resources.
	Status *AssetEndpointProfileStatus

	// READ-ONLY; Globally unique, immutable, non-reusable id.
	UUID *string
}

// AssetEndpointProfileStatus - Defines the asset endpoint profile status properties.
type AssetEndpointProfileStatus struct {
	// READ-ONLY; Array object to transfer and persist errors that originate from the Edge.
	Errors []*AssetEndpointProfileStatusError
}

// AssetEndpointProfileStatusError - Defines the asset endpoint profile status error properties.
type AssetEndpointProfileStatusError struct {
	// READ-ONLY; Error code for classification of errors (ex: 400, 404, 500, etc.).
	Code *int32

	// READ-ONLY; Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not
	// a valid url”).
	Message *string
}

// AssetEndpointProfileUpdate - The type used for update operations of the AssetEndpointProfile.
type AssetEndpointProfileUpdate struct {
	// The resource-specific properties for this resource.
	Properties *AssetEndpointProfileUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// AssetEndpointProfileUpdateProperties - The updatable properties of the AssetEndpointProfile.
type AssetEndpointProfileUpdateProperties struct {
	// Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF).
	AdditionalConfiguration *string

	// Defines the client authentication mechanism to the server.
	Authentication *Authentication

	// Defines the configuration for the connector type that is being used with the endpoint profile.
	EndpointProfileType *string

	// The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress
	// URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration.
	TargetAddress *string
}

// AssetListResult - The response of a Asset list operation.
type AssetListResult struct {
	// REQUIRED; The Asset items on this page
	Value []*Asset

	// The link to the next page of items
	NextLink *string
}

// AssetProperties - Defines the asset properties.
type AssetProperties struct {
	// REQUIRED; A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint
	// that provides data points for this asset. Must provide asset endpoint profile name.
	AssetEndpointProfileRef *string

	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
	Datasets []*Dataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Object that describes the default topic information for the asset.
	DefaultTopic *Topic

	// Human-readable description of the asset.
	Description *string

	// Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered
	// asset names must be provided.
	DiscoveredAssetRefs []*string

	// Human-readable display name.
	DisplayName *string

	// Reference to the documentation.
	DocumentationURI *string

	// Enabled/Disabled status of the asset.
	Enabled *bool

	// Array of events that are part of the asset. Each event can have per-event configuration.
	Events []*Event

	// Asset id provided by the customer.
	ExternalAssetID *string

	// Revision number of the hardware.
	HardwareRevision *string

	// Asset manufacturer name.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model name.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Revision number of the software.
	SoftwareRevision *string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for
	// custom resources.
	Status *AssetStatus

	// READ-ONLY; Globally unique, immutable, non-reusable id.
	UUID *string

	// READ-ONLY; An integer that is incremented each time the resource is modified.
	Version *int64
}

// AssetStatus - Defines the asset status properties.
type AssetStatus struct {
	// READ-ONLY; Array of dataset statuses that describe the status of each dataset.
	Datasets []*AssetStatusDataset

	// READ-ONLY; Array object to transfer and persist errors that originate from the Edge.
	Errors []*AssetStatusError

	// READ-ONLY; Array of event statuses that describe the status of each event.
	Events []*AssetStatusEvent

	// READ-ONLY; A read only incremental counter indicating the number of times the configuration has been modified from the
	// perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync
	// back up to the cloud. In steady state, this should equal version.
	Version *int64
}

// AssetStatusDataset - Defines the asset status dataset properties.
type AssetStatusDataset struct {
	// READ-ONLY; The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between
	// the spec and status dataset information.
	Name *string

	// READ-ONLY; The message schema reference object.
	MessageSchemaReference *MessageSchemaReference
}

// AssetStatusError - Defines the asset status error properties.
type AssetStatusError struct {
	// READ-ONLY; Error code for classification of errors (ex: 400, 404, 500, etc.).
	Code *int32

	// READ-ONLY; Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does
	// not exist”).
	Message *string
}

// AssetStatusEvent - Defines the asset status event properties.
type AssetStatusEvent struct {
	// READ-ONLY; The name of the event. Must be unique within the status.events array. This name is used to correlate between
	// the spec and status event information.
	Name *string

	// READ-ONLY; The message schema reference object.
	MessageSchemaReference *MessageSchemaReference
}

// AssetUpdate - The type used for update operations of the Asset.
type AssetUpdate struct {
	// The resource-specific properties for this resource.
	Properties *AssetUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// AssetUpdateProperties - The updatable properties of the Asset.
type AssetUpdateProperties struct {
	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
	Datasets []*Dataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Object that describes the default topic information for the asset.
	DefaultTopic *Topic

	// Human-readable description of the asset.
	Description *string

	// Human-readable display name.
	DisplayName *string

	// Reference to the documentation.
	DocumentationURI *string

	// Enabled/Disabled status of the asset.
	Enabled *bool

	// Array of events that are part of the asset. Each event can have per-event configuration.
	Events []*Event

	// Revision number of the hardware.
	HardwareRevision *string

	// Asset manufacturer name.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model name.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Revision number of the software.
	SoftwareRevision *string
}

// Authentication - Definition of the client authentication mechanism to the server.
type Authentication struct {
	// REQUIRED; Defines the method to authenticate the user of the client at the server.
	Method *AuthenticationMethod

	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentials

	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509Credentials
}

// BillingContainer - billingContainer Model as Azure resource whose sole purpose is to keep track of billables resources
// under a subscription.
type BillingContainer struct {
	// The resource-specific properties for this resource.
	Properties *BillingContainerProperties

	// READ-ONLY; Resource ETag
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// BillingContainerListResult - The response of a BillingContainer list operation.
type BillingContainerListResult struct {
	// REQUIRED; The BillingContainer items on this page
	Value []*BillingContainer

	// The link to the next page of items
	NextLink *string
}

// BillingContainerProperties - Defines the billingContainer properties.
type BillingContainerProperties struct {
	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// BrokerStateStoreDestinationConfiguration - The configuration for a MQTT broker state store destination.
type BrokerStateStoreDestinationConfiguration struct {
	// REQUIRED; The MQTT broker state store destination key.
	Key *string
}

// DataPoint - Defines the data point properties.
type DataPoint struct {
	// REQUIRED; The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on
	// the asset.
	DataSource *string

	// REQUIRED; The name of the data point.
	Name *string

	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string

	// An indication of how the data point should be mapped to OpenTelemetry.
	ObservabilityMode *DataPointObservabilityMode
}

// Dataset - Defines the dataset properties.
type Dataset struct {
	// REQUIRED; Name of the dataset.
	Name *string

	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []*DataPoint

	// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
	DatasetConfiguration *string

	// Object that describes the topic information for the specific dataset.
	Topic *Topic
}

// DatasetBrokerStateStoreDestination - The type for a MQTT broker state store destination.
type DatasetBrokerStateStoreDestination struct {
	// REQUIRED; The MQTT broker state store destination configuration.
	Configuration *BrokerStateStoreDestinationConfiguration

	// CONSTANT; The MQTT broker state store destination target.
	// Field has constant value DatasetDestinationTargetBrokerStateStore, any specified value is ignored.
	Target *DatasetDestinationTarget
}

// GetDatasetDestination implements the DatasetDestinationClassification interface for type DatasetBrokerStateStoreDestination.
func (d *DatasetBrokerStateStoreDestination) GetDatasetDestination() *DatasetDestination {
	return &DatasetDestination{
		Target: d.Target,
	}
}

// DatasetDestination - The type of the destination.
type DatasetDestination struct {
	// Target destination.
	Target *DatasetDestinationTarget
}

// GetDatasetDestination implements the DatasetDestinationClassification interface for type DatasetDestination.
func (d *DatasetDestination) GetDatasetDestination() *DatasetDestination { return d }

// DatasetMqttDestination - The type for a MQTT destination.
type DatasetMqttDestination struct {
	// REQUIRED; The MQTT destination configuration.
	Configuration *MqttDestinationConfiguration

	// CONSTANT; The MQTT destination type.
	// Field has constant value DatasetDestinationTargetMqtt, any specified value is ignored.
	Target *DatasetDestinationTarget
}

// GetDatasetDestination implements the DatasetDestinationClassification interface for type DatasetMqttDestination.
func (d *DatasetMqttDestination) GetDatasetDestination() *DatasetDestination {
	return &DatasetDestination{
		Target: d.Target,
	}
}

// DatasetStorageDestination - The type for a storage destination.
type DatasetStorageDestination struct {
	// REQUIRED; The storage destination configuration.
	Configuration *StorageDestinationConfiguration

	// CONSTANT; The storage destination type.
	// Field has constant value DatasetDestinationTargetStorage, any specified value is ignored.
	Target *DatasetDestinationTarget
}

// GetDatasetDestination implements the DatasetDestinationClassification interface for type DatasetStorageDestination.
func (d *DatasetStorageDestination) GetDatasetDestination() *DatasetDestination {
	return &DatasetDestination{
		Target: d.Target,
	}
}

// DeviceMessagingEndpoint - Device messaging endpoint model.
type DeviceMessagingEndpoint struct {
	// REQUIRED; The endpoint address to connect to.
	Address *string

	// Type of connection used for the messaging endpoint.
	EndpointType *string
}

// DeviceRef - Defines which device and endpoint to use for this asset
type DeviceRef struct {
	// REQUIRED; Name of the device resource
	DeviceName *string

	// REQUIRED; The name of endpoint to use
	EndpointName *string
}

// DeviceStatus - Defines the device status properties.
type DeviceStatus struct {
	// READ-ONLY; Defines the device status config properties.
	Config *StatusConfig

	// READ-ONLY; Defines the device status for inbound/outbound endpoints.
	Endpoints *DeviceStatusEndpoints
}

// DeviceStatusEndpoint - Defines the device status properties.
type DeviceStatusEndpoint struct {
	// READ-ONLY; Defines the error related to this endpoint.
	Error *StatusError
}

// DeviceStatusEndpoints - Defines the device status for inbound/outbound endpoints.
type DeviceStatusEndpoints struct {
	// READ-ONLY; KeyValue pair representing status of inbound endpoints.
	Inbound map[string]*DeviceStatusEndpoint
}

// DiscoveredInboundEndpoints - An endpoint to connect to the device.
type DiscoveredInboundEndpoints struct {
	// REQUIRED; The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain
	// name (FQDN, e.g., server.example.com).
	Address *string

	// REQUIRED; Type of connection endpoint.
	EndpointType *string

	// Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
	AdditionalConfiguration *string

	// The timestamp (in UTC) when the endpoint was discovered.
	LastUpdatedOn *time.Time

	// List of supported authentication methods supported by device for Inbound connections.
	SupportedAuthenticationMethods []*AuthenticationMethod

	// Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType
	// Microsoft.Mqtt etc.
	Version *string
}

// DiscoveredMessagingEndpoints - Connection endpoint URL a device can use to connect to a service.
type DiscoveredMessagingEndpoints struct {
	// Set of endpoints to connect to the device.
	Inbound map[string]*DiscoveredInboundEndpoints

	// Set of endpoints a device can connect to.
	Outbound *DiscoveredOutboundEndpoints
}

// DiscoveredOutboundEndpoints - Property bag contains the device's outbound endpoints
type DiscoveredOutboundEndpoints struct {
	// REQUIRED; Endpoints the device can connect to.
	Assigned map[string]*DeviceMessagingEndpoint
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorDetails - Defines the error details properties.
type ErrorDetails struct {
	// READ-ONLY; Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).
	Code *string

	// READ-ONLY; Unique identifier for the transaction to aid in debugging.
	CorrelationID *string

	// READ-ONLY; Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).
	Info *string

	// READ-ONLY; Human-readable helpful error message to provide additional context for error (ex: “Authentication method not
	// supported”).
	Message *string
}

// Event - Defines the event properties.
type Event struct {
	// REQUIRED; The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the
	// asset.
	EventNotifier *string

	// REQUIRED; The name of the event.
	Name *string

	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string

	// An indication of how the event should be mapped to OpenTelemetry.
	ObservabilityMode *EventObservabilityMode

	// Object that describes the topic information for the specific event.
	Topic *Topic
}

// EventDestination - The type of the destination.
type EventDestination struct {
	// Target destination.
	Target *EventDestinationTarget
}

// GetEventDestination implements the EventDestinationClassification interface for type EventDestination.
func (e *EventDestination) GetEventDestination() *EventDestination { return e }

// EventMqttDestination - The type for a MQTT destination.
type EventMqttDestination struct {
	// REQUIRED; The MQTT destination configuration.
	Configuration *MqttDestinationConfiguration

	// CONSTANT; The MQTT destination type.
	// Field has constant value EventDestinationTargetMqtt, any specified value is ignored.
	Target *EventDestinationTarget
}

// GetEventDestination implements the EventDestinationClassification interface for type EventMqttDestination.
func (e *EventMqttDestination) GetEventDestination() *EventDestination {
	return &EventDestination{
		Target: e.Target,
	}
}

// EventStorageDestination - The type for a storage destination.
type EventStorageDestination struct {
	// REQUIRED; The storage destination configuration.
	Configuration *StorageDestinationConfiguration

	// CONSTANT; The storage destination type.
	// Field has constant value EventDestinationTargetStorage, any specified value is ignored.
	Target *EventDestinationTarget
}

// GetEventDestination implements the EventDestinationClassification interface for type EventStorageDestination.
func (e *EventStorageDestination) GetEventDestination() *EventDestination {
	return &EventDestination{
		Target: e.Target,
	}
}

// ExtendedLocation - The extended location.
type ExtendedLocation struct {
	// REQUIRED; The extended location name.
	Name *string

	// REQUIRED; The extended location type.
	Type *string
}

// HostAuthentication - Definition of the client authentication mechanism to the host.
type HostAuthentication struct {
	// REQUIRED; Defines the method to authenticate the user of the client at the server.
	Method *AuthenticationMethod

	// Defines the username and password references when UsernamePassword user authentication mode is selected.
	UsernamePasswordCredentials *UsernamePasswordCredentials

	// Defines the certificate reference when Certificate user authentication mode is selected.
	X509Credentials *X509CertificateCredentials
}

// InboundEndpoints - An endpoint to connect to the device.
type InboundEndpoints struct {
	// REQUIRED; The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain
	// name (FQDN, e.g., server.example.com).
	Address *string

	// REQUIRED; Type of connection endpoint.
	EndpointType *string

	// Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
	AdditionalConfiguration *string

	// Defines the client authentication mechanism to the server.
	Authentication *HostAuthentication

	// Defines server trust settings for the endpoint.
	TrustSettings *TrustSettings

	// Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType
	// Microsoft.Mqtt etc.
	Version *string
}

// ManagementAction - Defines the action properties.
type ManagementAction struct {
	// REQUIRED; Name of the action.
	Name *string

	// REQUIRED; The target URI on which a client can invoke the specific action.
	TargetURI *string

	// Stringified JSON that contains connector-specific configuration for the action.
	ActionConfiguration *string

	// The type of the action.
	ActionType *ManagementActionType

	// Response timeout for the action.
	TimeoutInSeconds *int32

	// The MQTT topic path on which a client will receive the request for the action.
	Topic *string

	// URI or type definition ID.
	TypeRef *string
}

// ManagementGroup - Defines the management group properties.
type ManagementGroup struct {
	// REQUIRED; Name of the management group.
	Name *string

	// Array of actions that are part of the management group. Each action can have an individual configuration.
	Actions []*ManagementAction

	// Reference to a data source for a given management group.
	DataSource *string

	// Default response timeout for all actions that are part of the management group.
	DefaultTimeoutInSeconds *int32

	// Default MQTT topic path on which a client will receive the request for all actions that are part of the management group.
	DefaultTopic *string

	// Stringified JSON that contains connector-specific configuration for the management group.
	ManagementGroupConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// MessageSchemaReference - Defines the message schema reference properties.
type MessageSchemaReference struct {
	// READ-ONLY; The message schema name.
	SchemaName *string

	// READ-ONLY; The message schema registry namespace.
	SchemaRegistryNamespace *string

	// READ-ONLY; The message schema version.
	SchemaVersion *string
}

// Messaging - The namespace messaging endpoints model.
type Messaging struct {
	// Dictionary of messaging endpoints.
	Endpoints map[string]*MessagingEndpoint
}

// MessagingEndpoint - Namespace messaging endpoint model used by a device to connect to a service.
type MessagingEndpoint struct {
	// REQUIRED; The endpoint address to connect to.
	Address *string

	// Type of connection used for messaging endpoint.
	EndpointType *string

	// The messaging endpoint Azure resource Id.
	ResourceID *string
}

// MessagingEndpoints - Connection endpoint URL a device can use to connect to a service.
type MessagingEndpoints struct {
	// Set of endpoints to connect to the device.
	Inbound map[string]*InboundEndpoints

	// Set of endpoints a device can connect to.
	Outbound *OutboundEndpoints
}

// MqttDestinationConfiguration - The configuration for a MQTT destination.
type MqttDestinationConfiguration struct {
	// REQUIRED; The MQTT topic.
	Topic *string

	// The MQTT QoS setting. Defaults to QoS 1.
	Qos *MqttDestinationQos

	// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
	Retain *TopicRetainType

	// The MQTT TTL setting.
	TTL *int64
}

// Namespace definition.
type Namespace struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *SystemAssignedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *NamespaceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NamespaceAsset - Asset definition.
type NamespaceAsset struct {
	// REQUIRED; The extended location.
	ExtendedLocation *ExtendedLocation

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *NamespaceAssetProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NamespaceAssetListResult - The response of a NamespaceAsset list operation.
type NamespaceAssetListResult struct {
	// REQUIRED; The NamespaceAsset items on this page
	Value []*NamespaceAsset

	// The link to the next page of items
	NextLink *string
}

// NamespaceAssetProperties - Defines the asset properties.
type NamespaceAssetProperties struct {
	// REQUIRED; Reference to the device that provides data for this asset. Must provide device name & endpoint on the device
	// to use.
	DeviceRef *DeviceRef

	// URIs or type definition IDs.
	AssetTypeRefs []*string

	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
	Datasets []*NamespaceDataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Default destinations for a dataset.
	DefaultDatasetsDestinations []DatasetDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Default destinations for an event.
	DefaultEventsDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group
	// can have its own configuration that overrides the default settings here.
	DefaultManagementGroupsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration
	// that overrides the default settings here.
	DefaultStreamsConfiguration *string

	// Default destinations for a stream.
	DefaultStreamsDestinations []StreamDestinationClassification

	// Human-readable description of the asset.
	Description *string

	// Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered
	// asset names must be provided.
	DiscoveredAssetRefs []*string

	// Human-readable display name.
	DisplayName *string

	// Asset documentation reference.
	DocumentationURI *string

	// Enabled/disabled status of the asset.
	Enabled *bool

	// Array of event groups that are part of the asset. Each event group can have per-event group configuration.
	EventGroups []*NamespaceEventGroup

	// Asset ID provided by the customer.
	ExternalAssetID *string

	// Asset hardware revision number.
	HardwareRevision *string

	// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
	ManagementGroups []*ManagementGroup

	// Asset manufacturer.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Asset software revision number.
	SoftwareRevision *string

	// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
	Streams []*NamespaceStream

	// READ-ONLY; A timestamp (in UTC) that is updated each time the resource is modified.
	LastTransitionTime *time.Time

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for
	// custom resources.
	Status *NamespaceAssetStatus

	// READ-ONLY; Globally unique, immutable, non-reusable ID.
	UUID *string

	// READ-ONLY; An integer that is incremented each time the resource is modified.
	Version *int64
}

// NamespaceAssetStatus - Defines the asset status properties.
type NamespaceAssetStatus struct {
	// READ-ONLY; Defines the asset status config properties.
	Config *StatusConfig

	// READ-ONLY; Array of dataset statuses that describe the status of each dataset.
	Datasets []*NamespaceAssetStatusDataset

	// READ-ONLY; Array of event group statuses that describe the status of each event group.
	EventGroups []*NamespaceAssetStatusEventGroup

	// READ-ONLY; Array of management group statuses that describe the status of each management group.
	ManagementGroups []*NamespaceAssetStatusManagementGroup

	// READ-ONLY; Array of stream statuses that describe the status of each stream.
	Streams []*NamespaceAssetStatusStream
}

// NamespaceAssetStatusDataset - Defines the asset status dataset properties.
type NamespaceAssetStatusDataset struct {
	// READ-ONLY; The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between
	// the spec and status dataset information.
	Name *string

	// READ-ONLY; Object to transfer and persist errors that originate from the edge.
	Error *StatusError

	// READ-ONLY; The message schema reference object.
	MessageSchemaReference *NamespaceMessageSchemaReference
}

// NamespaceAssetStatusEvent - Defines the asset status event properties.
type NamespaceAssetStatusEvent struct {
	// READ-ONLY; The name of the event. Must be unique within the status.events array. This name is used to correlate between
	// the spec and status event information.
	Name *string

	// READ-ONLY; Object to transfer and persist errors that originate from the edge.
	Error *StatusError

	// READ-ONLY; The message schema reference object.
	MessageSchemaReference *NamespaceMessageSchemaReference
}

// NamespaceAssetStatusEventGroup - Defines the asset status event group properties.
type NamespaceAssetStatusEventGroup struct {
	// READ-ONLY; The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate
	// between the spec and status event group information.
	Name *string

	// READ-ONLY; Array of event statuses that describe the status of each event in the event group.
	Events []*NamespaceAssetStatusEvent
}

// NamespaceAssetStatusManagementAction - Defines the asset status action properties.
type NamespaceAssetStatusManagementAction struct {
	// READ-ONLY; The name of the action. Must be unique within the status.actions array. This name is used to correlate between
	// the spec and status event information.
	Name *string

	// READ-ONLY; Object to transfer and persist errors that originate from the edge.
	Error *StatusError

	// READ-ONLY; The request message schema reference object for the action.
	RequestMessageSchemaReference *NamespaceMessageSchemaReference

	// READ-ONLY; The response message schema reference object for the action.
	ResponseMessageSchemaReference *NamespaceMessageSchemaReference
}

// NamespaceAssetStatusManagementGroup - Defines the asset status management group properties.
type NamespaceAssetStatusManagementGroup struct {
	// READ-ONLY; The name of the management group. Must be unique within the status.managementGroups array. This name is used
	// to correlate between the spec and status event information.
	Name *string

	// READ-ONLY; Array of action statuses that describe the status of each action.
	Actions []*NamespaceAssetStatusManagementAction
}

// NamespaceAssetStatusStream - Defines the asset status stream properties.
type NamespaceAssetStatusStream struct {
	// READ-ONLY; The name of the stream. Must be unique within the status.streams array. This name is used to correlate between
	// the spec and status event information.
	Name *string

	// READ-ONLY; Object to transfer and persist errors that originate from the edge.
	Error *StatusError

	// READ-ONLY; The message schema reference object.
	MessageSchemaReference *NamespaceMessageSchemaReference
}

// NamespaceAssetUpdate - The type used for update operations of the NamespaceAsset.
type NamespaceAssetUpdate struct {
	// The resource-specific properties for this resource.
	Properties *NamespaceAssetUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// NamespaceAssetUpdateProperties - The updatable properties of the NamespaceAsset.
type NamespaceAssetUpdateProperties struct {
	// URIs or type definition IDs.
	AssetTypeRefs []*string

	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.
	Datasets []*NamespaceDataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Default destinations for a dataset.
	DefaultDatasetsDestinations []DatasetDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Default destinations for an event.
	DefaultEventsDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group
	// can have its own configuration that overrides the default settings here.
	DefaultManagementGroupsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration
	// that overrides the default settings here.
	DefaultStreamsConfiguration *string

	// Default destinations for a stream.
	DefaultStreamsDestinations []StreamDestinationClassification

	// Human-readable description of the asset.
	Description *string

	// Human-readable display name.
	DisplayName *string

	// Asset documentation reference.
	DocumentationURI *string

	// Enabled/disabled status of the asset.
	Enabled *bool

	// Array of event groups that are part of the asset. Each event group can have per-event group configuration.
	EventGroups []*NamespaceEventGroup

	// Asset hardware revision number.
	HardwareRevision *string

	// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
	ManagementGroups []*ManagementGroup

	// Asset manufacturer.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Asset software revision number.
	SoftwareRevision *string

	// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
	Streams []*NamespaceStream
}

// NamespaceDataset - Defines the dataset properties.
type NamespaceDataset struct {
	// REQUIRED; Name of the dataset.
	Name *string

	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []*NamespaceDatasetDataPoint

	// Reference to a data source for a given dataset.
	DataSource *string

	// Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset.
	DatasetConfiguration *string

	// Destinations for a dataset.
	Destinations []DatasetDestinationClassification

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDatasetDataPoint - Defines the dataset data point properties.
type NamespaceDatasetDataPoint struct {
	// REQUIRED; The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on
	// the asset.
	DataSource *string

	// REQUIRED; The name of the data point.
	Name *string

	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDevice - Device definition.
type NamespaceDevice struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The extended location.
	ExtendedLocation *ExtendedLocation

	// The resource-specific properties for this resource.
	Properties *NamespaceDeviceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Tag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NamespaceDeviceListResult - The response of a NamespaceDevice list operation.
type NamespaceDeviceListResult struct {
	// REQUIRED; The NamespaceDevice items on this page
	Value []*NamespaceDevice

	// The link to the next page of items
	NextLink *string
}

// NamespaceDeviceProperties - Defines the device properties.
type NamespaceDeviceProperties struct {
	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be
	// provided.
	DiscoveredDeviceRef *string

	// Indicates if the resource is enabled or not.
	Enabled *bool

	// Property bag containing the device's unassigned and assigned endpoints.
	Endpoints *MessagingEndpoints

	// The Device ID provided by the customer.
	ExternalDeviceID *string

	// Device manufacturer.
	Manufacturer *string

	// Device model.
	Model *string

	// Device operating system.
	OperatingSystem *string

	// Device operating system version.
	OperatingSystemVersion *string

	// READ-ONLY; A timestamp (in UTC) that is updated each time the resource is modified.
	LastTransitionTime *time.Time

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Device status updates.
	Status *DeviceStatus

	// READ-ONLY; A unique identifier for the device.
	UUID *string

	// READ-ONLY; An integer that is incremented each time the resource is modified.
	Version *int64
}

// NamespaceDeviceUpdate - The type used for update operations of the NamespaceDevice.
type NamespaceDeviceUpdate struct {
	// The resource-specific properties for this resource.
	Properties *NamespaceDeviceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// NamespaceDeviceUpdateProperties - The updatable properties of the NamespaceDevice.
type NamespaceDeviceUpdateProperties struct {
	// A set of key-value pairs that contain custom attributes set by the customer.
	Attributes map[string]any

	// Indicates if the resource and identity are enabled or not. A disabled device cannot authenticate with Microsoft Entra ID.
	Enabled *bool

	// Property bag containing the device's unassigned and assigned endpoints.
	Endpoints *MessagingEndpoints

	// Device operating system version.
	OperatingSystemVersion *string
}

// NamespaceDiscoveredAsset - Discovered asset definition.
type NamespaceDiscoveredAsset struct {
	// REQUIRED; The extended location.
	ExtendedLocation *ExtendedLocation

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *NamespaceDiscoveredAssetProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NamespaceDiscoveredAssetListResult - The response of a NamespaceDiscoveredAsset list operation.
type NamespaceDiscoveredAssetListResult struct {
	// REQUIRED; The NamespaceDiscoveredAsset items on this page
	Value []*NamespaceDiscoveredAsset

	// The link to the next page of items
	NextLink *string
}

// NamespaceDiscoveredAssetProperties - Defines the discovered asset properties.
type NamespaceDiscoveredAssetProperties struct {
	// REQUIRED; Reference to the device that provides data for this asset. Must provide device name & endpoint on the device
	// to use.
	DeviceRef *DeviceRef

	// REQUIRED; Identifier used to detect changes in the asset.
	DiscoveryID *string

	// REQUIRED; An integer that is incremented each time the resource is modified.
	Version *int64

	// URIs or type definition IDs.
	AssetTypeRefs []*string

	// A set of key-value pairs that contain custom attributes.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.
	Datasets []*NamespaceDiscoveredDataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Default destinations for a dataset.
	DefaultDatasetsDestinations []DatasetDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Default destinations for an event.
	DefaultEventsDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group
	// can have its own configuration that overrides the default settings here.
	DefaultManagementGroupsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration
	// that overrides the default settings here.
	DefaultStreamsConfiguration *string

	// Default destinations for a stream.
	DefaultStreamsDestinations []StreamDestinationClassification

	// Human-readable description of the asset.
	Description *string

	// Human-readable display name.
	DisplayName *string

	// Asset documentation reference.
	DocumentationURI *string

	// Array of event groups that are part of the asset. Each event group can have per-event group configuration.
	EventGroups []*NamespaceDiscoveredEventGroup

	// Asset ID provided by the customer.
	ExternalAssetID *string

	// Asset hardware revision number.
	HardwareRevision *string

	// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
	ManagementGroups []*NamespaceDiscoveredManagementGroup

	// Asset manufacturer.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Asset software revision number.
	SoftwareRevision *string

	// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
	Streams []*NamespaceDiscoveredStream

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NamespaceDiscoveredAssetUpdate - The type used for update operations of the NamespaceDiscoveredAsset.
type NamespaceDiscoveredAssetUpdate struct {
	// The resource-specific properties for this resource.
	Properties *NamespaceDiscoveredAssetUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// NamespaceDiscoveredAssetUpdateProperties - The updatable properties of the NamespaceDiscoveredAsset.
type NamespaceDiscoveredAssetUpdateProperties struct {
	// URIs or type definition IDs.
	AssetTypeRefs []*string

	// A set of key-value pairs that contain custom attributes.
	Attributes map[string]any

	// Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.
	Datasets []*NamespaceDiscoveredDataset

	// Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own
	// configuration that overrides the default settings here.
	DefaultDatasetsConfiguration *string

	// Default destinations for a dataset.
	DefaultDatasetsDestinations []DatasetDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration
	// that overrides the default settings here.
	DefaultEventsConfiguration *string

	// Default destinations for an event.
	DefaultEventsDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific default configuration for all management groups. Each management group
	// can have its own configuration that overrides the default settings here.
	DefaultManagementGroupsConfiguration *string

	// Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration
	// that overrides the default settings here.
	DefaultStreamsConfiguration *string

	// Default destinations for a stream.
	DefaultStreamsDestinations []StreamDestinationClassification

	// Human-readable description of the asset.
	Description *string

	// Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.
	DeviceRef *DeviceRef

	// Identifier used to detect changes in the asset.
	DiscoveryID *string

	// Human-readable display name.
	DisplayName *string

	// Asset documentation reference.
	DocumentationURI *string

	// Array of event groups that are part of the asset. Each event group can have per-event group configuration.
	EventGroups []*NamespaceDiscoveredEventGroup

	// Asset hardware revision number.
	HardwareRevision *string

	// Array of management groups that are part of the asset. Each management group can have a per-group configuration.
	ManagementGroups []*NamespaceDiscoveredManagementGroup

	// Asset manufacturer.
	Manufacturer *string

	// Asset manufacturer URI.
	ManufacturerURI *string

	// Asset model.
	Model *string

	// Asset product code.
	ProductCode *string

	// Asset serial number.
	SerialNumber *string

	// Asset software revision number.
	SoftwareRevision *string

	// Array of streams that are part of the asset. Each stream can have a per-stream configuration.
	Streams []*NamespaceDiscoveredStream

	// An integer that is incremented each time the resource is modified.
	Version *int64
}

// NamespaceDiscoveredDataset - Defines the dataset properties.
type NamespaceDiscoveredDataset struct {
	// REQUIRED; Name of the dataset.
	Name *string

	// Array of data points that are part of the dataset. Each data point can have per-data point configuration.
	DataPoints []*NamespaceDiscoveredDatasetDataPoint

	// Reference to a data source for a given dataset.
	DataSource *string

	// Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
	DatasetConfiguration *string

	// Destinations for a dataset.
	Destinations []DatasetDestinationClassification

	// Timestamp (in UTC) indicating when the dataset was added or modified.
	LastUpdatedOn *time.Time

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredDatasetDataPoint - Defines the discovered dataset data point properties.
type NamespaceDiscoveredDatasetDataPoint struct {
	// REQUIRED; The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on
	// the asset.
	DataSource *string

	// REQUIRED; The name of the data point.
	Name *string

	// Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	DataPointConfiguration *string

	// UTC timestamp indicating when the data point was added or modified.
	LastUpdatedOn *time.Time

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredDevice - Discovered device definition.
type NamespaceDiscoveredDevice struct {
	// REQUIRED; The extended location.
	ExtendedLocation *ExtendedLocation

	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *NamespaceDiscoveredDeviceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NamespaceDiscoveredDeviceListResult - The response of a NamespaceDiscoveredDevice list operation.
type NamespaceDiscoveredDeviceListResult struct {
	// REQUIRED; The NamespaceDiscoveredDevice items on this page
	Value []*NamespaceDiscoveredDevice

	// The link to the next page of items
	NextLink *string
}

// NamespaceDiscoveredDeviceProperties - Defines the discovered device properties.
type NamespaceDiscoveredDeviceProperties struct {
	// REQUIRED; Identifier used to detect changes in the discovered device.
	DiscoveryID *string

	// REQUIRED; An integer that is incremented each time the resource is modified.
	Version *int64

	// A set of key-value pairs that contain custom attributes.
	Attributes map[string]any

	// Endpoints for discovered devices.
	Endpoints *DiscoveredMessagingEndpoints

	// A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant.
	ExternalDeviceID *string

	// Device manufacturer.
	Manufacturer *string

	// Device model.
	Model *string

	// Device operating system name.
	OperatingSystem *string

	// Device operating system version.
	OperatingSystemVersion *string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NamespaceDiscoveredDeviceUpdate - The type used for update operations of the NamespaceDiscoveredDevice.
type NamespaceDiscoveredDeviceUpdate struct {
	// The resource-specific properties for this resource.
	Properties *NamespaceDiscoveredDeviceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// NamespaceDiscoveredDeviceUpdateProperties - The updatable properties of the NamespaceDiscoveredDevice.
type NamespaceDiscoveredDeviceUpdateProperties struct {
	// A set of key-value pairs that contain custom attributes.
	Attributes map[string]any

	// Identifier used to detect changes in the discovered device.
	DiscoveryID *string

	// Endpoints for discovered devices.
	Endpoints *DiscoveredMessagingEndpoints

	// A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant.
	ExternalDeviceID *string

	// Device operating system version.
	OperatingSystemVersion *string

	// An integer that is incremented each time the resource is modified.
	Version *int64
}

// NamespaceDiscoveredEvent - Defines the event properties.
type NamespaceDiscoveredEvent struct {
	// REQUIRED; The name of the event.
	Name *string

	// Reference to a data source for a given event.
	DataSource *string

	// Destinations for an event.
	Destinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string

	// UTC timestamp indicating when the event was added or modified.
	LastUpdatedOn *time.Time

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredEventGroup - Defines the discovered event group properties.
type NamespaceDiscoveredEventGroup struct {
	// REQUIRED; The name of the event group.
	Name *string

	// The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the
	// asset.
	DataSource *string

	// Destinations for events. Default destinations when destinations is not defined at the event level.
	DefaultDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	EventGroupConfiguration *string

	// Array of events that are part of the event group.
	Events []*NamespaceDiscoveredEvent

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredManagementAction - Defines the action properties.
type NamespaceDiscoveredManagementAction struct {
	// REQUIRED; Name of the action.
	Name *string

	// REQUIRED; The target URI on which a client can invoke the specific action.
	TargetURI *string

	// Stringified JSON that contains connector-specific configuration for the action.
	ActionConfiguration *string

	// The type of the action.
	ActionType *NamespaceDiscoveredManagementActionType

	// Timestamp (in UTC) indicating when the management action was added or modified.
	LastUpdatedOn *time.Time

	// Response timeout for the action.
	TimeoutInSeconds *int32

	// The MQTT topic path on which a client will receive the request for the action.
	Topic *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredManagementGroup - Defines the management group properties.
type NamespaceDiscoveredManagementGroup struct {
	// REQUIRED; Name of the management group.
	Name *string

	// Array of actions that are part of the management group. Each action can have an individual configuration.
	Actions []*NamespaceDiscoveredManagementAction

	// Reference to a data source for a given management group.
	DataSource *string

	// Default response timeout for all actions that are part of the management group.
	DefaultTimeoutInSeconds *int32

	// Default MQTT topic path on which a client will receive the request for all actions that are part of the management group.
	DefaultTopic *string

	// Timestamp (in UTC) indicating when the management group was added or modified.
	LastUpdatedOn *time.Time

	// Stringified JSON that contains connector-specific configuration for the management group.
	ManagementGroupConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceDiscoveredStream - Defines the stream properties.
type NamespaceDiscoveredStream struct {
	// REQUIRED; Name of the stream definition.
	Name *string

	// Destinations for a stream.
	Destinations []StreamDestinationClassification

	// Timestamp (in UTC) indicating when the stream was added or modified.
	LastUpdatedOn *time.Time

	// Stringified JSON that contains connector-specific configuration for the specific stream.
	StreamConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceEvent - Defines the event properties.
type NamespaceEvent struct {
	// REQUIRED; The name of the event.
	Name *string

	// Reference to a data source for a given event.
	DataSource *string

	// Destinations for an event.
	Destinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	EventConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceEventGroup - Defines the event group properties.
type NamespaceEventGroup struct {
	// REQUIRED; The name of the event group.
	Name *string

	// The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the
	// asset.
	DataSource *string

	// Destinations for events. Default destinations when destinations is not defined at the event level.
	DefaultDestinations []EventDestinationClassification

	// Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration
	// like, publishingInterval, samplingInterval, and queueSize.
	EventGroupConfiguration *string

	// Array of events that are part of the event group.
	Events []*NamespaceEvent

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceListResult - The response of a Namespace list operation.
type NamespaceListResult struct {
	// REQUIRED; The Namespace items on this page
	Value []*Namespace

	// The link to the next page of items
	NextLink *string
}

// NamespaceMessageSchemaReference - Defines the message schema reference properties.
type NamespaceMessageSchemaReference struct {
	// READ-ONLY; The message schema name.
	SchemaName *string

	// READ-ONLY; The message schema registry namespace.
	SchemaRegistryNamespace *string

	// READ-ONLY; The message schema version.
	SchemaVersion *string
}

// NamespaceMigrateRequest - Request body for the migrate resources operation in to Namespace resource.
type NamespaceMigrateRequest struct {
	// List of asset resources to be migrated.
	ResourceIDs []*string

	// Scope of the migrate resources operation.
	Scope *Scope
}

// NamespaceProperties - The namespace properties model.
type NamespaceProperties struct {
	// Assigned and unassigned messaging endpoints.
	Messaging *Messaging

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Globally unique, immutable, non-reusable ID.
	UUID *string
}

// NamespaceStream - Defines the stream properties.
type NamespaceStream struct {
	// REQUIRED; Name of the stream definition.
	Name *string

	// Destinations for a stream.
	Destinations []StreamDestinationClassification

	// Stringified JSON that contains connector-specific configuration for the specific stream.
	StreamConfiguration *string

	// URI or type definition ID.
	TypeRef *string
}

// NamespaceUpdate - The type used for update operations of the Namespace.
type NamespaceUpdate struct {
	// The managed service identities assigned to this resource.
	Identity *SystemAssignedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *NamespaceUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// NamespaceUpdateProperties - The updatable properties of the Namespace.
type NamespaceUpdateProperties struct {
	// Assigned and unassigned messaging endpoints.
	Messaging *Messaging
}

// Operation - REST API Operation
//
// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure
	// Resource Manager/control-plane operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for and operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// OperationStatusResult - The current status of an async operation.
type OperationStatusResult struct {
	// REQUIRED; Operation status.
	Status *string

	// The end time of the operation.
	EndTime *time.Time

	// If present, details of the operation error.
	Error *ErrorDetail

	// Fully qualified ID for the async operation.
	ID *string

	// Name of the async operation.
	Name *string

	// The operations list.
	Operations []*OperationStatusResult

	// Percent of the operation that is complete.
	PercentComplete *float64

	// The start time of the operation.
	StartTime *time.Time

	// READ-ONLY; Fully qualified ID of the resource against which the original async operation was started.
	ResourceID *string
}

// OutboundEndpoints - Property bag contains the device's outbound endpoints
type OutboundEndpoints struct {
	// REQUIRED; Endpoints the device can connect to.
	Assigned map[string]*DeviceMessagingEndpoint

	// Set of most recently removed endpoints.
	Unassigned map[string]*DeviceMessagingEndpoint
}

// Schema definition.
type Schema struct {
	// The resource-specific properties for this resource.
	Properties *SchemaProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SchemaListResult - The response of a Schema list operation.
type SchemaListResult struct {
	// REQUIRED; The Schema items on this page
	Value []*Schema

	// The link to the next page of items
	NextLink *string
}

// SchemaProperties - Defines the schema properties.
type SchemaProperties struct {
	// REQUIRED; Format of the schema.
	Format *Format

	// REQUIRED; Type of the schema.
	SchemaType *SchemaType

	// Human-readable description of the schema.
	Description *string

	// Human-readable display name.
	DisplayName *string

	// Schema tags.
	Tags map[string]*string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Globally unique, immutable, non-reusable id.
	UUID *string
}

// SchemaRegistry - Schema registry definition.
type SchemaRegistry struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *SystemAssignedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *SchemaRegistryProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SchemaRegistryListResult - The response of a SchemaRegistry list operation.
type SchemaRegistryListResult struct {
	// REQUIRED; The SchemaRegistry items on this page
	Value []*SchemaRegistry

	// The link to the next page of items
	NextLink *string
}

// SchemaRegistryProperties - Defines the schema registry properties.
type SchemaRegistryProperties struct {
	// REQUIRED; Schema registry namespace. Uniquely identifies a schema registry within a tenant.
	Namespace *string

	// REQUIRED; The Storage Account's Container URL where schemas will be stored.
	StorageAccountContainerURL *string

	// Human-readable description of the schema registry.
	Description *string

	// Human-readable display name.
	DisplayName *string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Globally unique, immutable, non-reusable id.
	UUID *string
}

// SchemaRegistryUpdate - The type used for update operations of the SchemaRegistry.
type SchemaRegistryUpdate struct {
	// The managed service identities assigned to this resource.
	Identity *SystemAssignedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *SchemaRegistryUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// SchemaRegistryUpdateProperties - The updatable properties of the SchemaRegistry.
type SchemaRegistryUpdateProperties struct {
	// Human-readable description of the schema registry.
	Description *string

	// Human-readable display name.
	DisplayName *string
}

// SchemaVersion - Schema version's definition.
type SchemaVersion struct {
	// The resource-specific properties for this resource.
	Properties *SchemaVersionProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// SchemaVersionListResult - The response of a SchemaVersion list operation.
type SchemaVersionListResult struct {
	// REQUIRED; The SchemaVersion items on this page
	Value []*SchemaVersion

	// The link to the next page of items
	NextLink *string
}

// SchemaVersionProperties - Defines the schema version properties.
type SchemaVersionProperties struct {
	// REQUIRED; Schema content.
	SchemaContent *string

	// Human-readable description of the schema.
	Description *string

	// READ-ONLY; Hash of the schema content.
	Hash *string

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Globally unique, immutable, non-reusable id.
	UUID *string
}

// StatusConfig - Defines the status config properties.
type StatusConfig struct {
	// READ-ONLY; Object to transfer and persist errors that originate from the edge.
	Error *StatusError

	// READ-ONLY; A read-only timestamp indicating the last time the configuration has been modified from the perspective of the
	// current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.
	LastTransitionTime *time.Time

	// READ-ONLY; A read-only incremental counter indicating the number of times the configuration has been modified from the
	// perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back
	// up to the cloud. In steady state, this should equal version.
	Version *int64
}

// StatusError - Defines the status config error properties.
type StatusError struct {
	// READ-ONLY; Error code for classification of errors (ex: '400', '404', '500', etc.).
	Code *string

	// READ-ONLY; Array of error details that describe the status of each error.
	Details []*ErrorDetails

	// READ-ONLY; Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does
	// not exist”).
	Message *string
}

// StorageDestinationConfiguration - The configuration for a storage destination.
type StorageDestinationConfiguration struct {
	// REQUIRED; The storage destination path.
	Path *string
}

// StreamDestination - The type of the destination.
type StreamDestination struct {
	// Target destination.
	Target *StreamDestinationTarget
}

// GetStreamDestination implements the StreamDestinationClassification interface for type StreamDestination.
func (s *StreamDestination) GetStreamDestination() *StreamDestination { return s }

// StreamMqttDestination - The type for a MQTT destination.
type StreamMqttDestination struct {
	// REQUIRED; The MQTT destination configuration.
	Configuration *MqttDestinationConfiguration

	// CONSTANT; The MQTT destination type.
	// Field has constant value StreamDestinationTargetMqtt, any specified value is ignored.
	Target *StreamDestinationTarget
}

// GetStreamDestination implements the StreamDestinationClassification interface for type StreamMqttDestination.
func (s *StreamMqttDestination) GetStreamDestination() *StreamDestination {
	return &StreamDestination{
		Target: s.Target,
	}
}

// StreamStorageDestination - The type for a storage destination.
type StreamStorageDestination struct {
	// REQUIRED; The storage destination configuration.
	Configuration *StorageDestinationConfiguration

	// CONSTANT; The storage destination type.
	// Field has constant value StreamDestinationTargetStorage, any specified value is ignored.
	Target *StreamDestinationTarget
}

// GetStreamDestination implements the StreamDestinationClassification interface for type StreamStorageDestination.
func (s *StreamStorageDestination) GetStreamDestination() *StreamDestination {
	return &StreamDestination{
		Target: s.Target,
	}
}

// SystemAssignedServiceIdentity - Managed service identity (either system assigned, or none)
type SystemAssignedServiceIdentity struct {
	// REQUIRED; The type of managed identity assigned to this resource.
	Type *SystemAssignedServiceIdentityType

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// Topic - Object that describes the topic information.
type Topic struct {
	// REQUIRED; The topic path for messages published to an MQTT broker.
	Path *string

	// When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.
	Retain *TopicRetainType
}

// TrustSettings - Defines server trust settings for an endpoint.
type TrustSettings struct {
	// Defines a secret reference for certificates to trust.
	TrustList *string
}

// UsernamePasswordCredentials - The credentials for authentication mode UsernamePassword.
type UsernamePasswordCredentials struct {
	// REQUIRED; The name of the secret containing the password.
	PasswordSecretName *string

	// REQUIRED; The name of the secret containing the username.
	UsernameSecretName *string
}

// X509CertificateCredentials - The x509 certificate for authentication mode Certificate.
type X509CertificateCredentials struct {
	// REQUIRED; The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateSecretName *string

	// The name of the secret containing the combined intermediate certificates in PEM format.
	IntermediateCertificatesSecretName *string

	// The name of the secret containing the certificate private key in PEM or DER format.
	KeySecretName *string
}

// X509Credentials - The x509 certificate for authentication mode Certificate.
type X509Credentials struct {
	// REQUIRED; The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
	CertificateSecretName *string
}
