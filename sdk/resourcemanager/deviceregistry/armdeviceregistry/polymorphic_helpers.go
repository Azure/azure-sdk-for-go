// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armdeviceregistry

import "encoding/json"

func unmarshalDatasetDestinationClassification(rawMsg json.RawMessage) (DatasetDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DatasetDestinationClassification
	switch m["target"] {
	case string(DatasetDestinationTargetMqtt):
		b = &DatasetMqttDestination{}
	case string(DatasetDestinationTargetBrokerStateStore):
		b = &DatasetBrokerStateStoreDestination{}
	case string(DatasetDestinationTargetStorage):
		b = &DatasetStorageDestination{}
	default:
		b = &DatasetDestination{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalDatasetDestinationClassificationArray(rawMsg json.RawMessage) ([]DatasetDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DatasetDestinationClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDatasetDestinationClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalEventDestinationClassification(rawMsg json.RawMessage) (EventDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b EventDestinationClassification
	switch m["target"] {
	case string(EventDestinationTargetMqtt):
		b = &EventMqttDestination{}
	case string(EventDestinationTargetStorage):
		b = &EventStorageDestination{}
	default:
		b = &EventDestination{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalEventDestinationClassificationArray(rawMsg json.RawMessage) ([]EventDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]EventDestinationClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalEventDestinationClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalStreamDestinationClassification(rawMsg json.RawMessage) (StreamDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b StreamDestinationClassification
	switch m["target"] {
	case string(StreamDestinationTargetMqtt):
		b = &StreamMqttDestination{}
	case string(StreamDestinationTargetStorage):
		b = &StreamStorageDestination{}
	default:
		b = &StreamDestination{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalStreamDestinationClassificationArray(rawMsg json.RawMessage) ([]StreamDestinationClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]StreamDestinationClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalStreamDestinationClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
