//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevops

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// Authorization info used to access a resource (like code repository).
type Authorization struct {
	// REQUIRED; Type of authorization.
	AuthorizationType *AuthorizationType `json:"authorizationType,omitempty"`

	// Authorization parameters corresponding to the authorization type.
	Parameters map[string]*string `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Authorization.
func (a Authorization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizationType", a.AuthorizationType)
	populate(objectMap, "parameters", a.Parameters)
	return json.Marshal(objectMap)
}

// BootstrapConfiguration - Configuration used to bootstrap a Pipeline.
type BootstrapConfiguration struct {
	// REQUIRED; Template used to bootstrap the pipeline.
	Template *PipelineTemplate `json:"template,omitempty"`

	// Repository containing the source code for the pipeline.
	Repository *CodeRepository `json:"repository,omitempty"`
}

// CloudError - An error response from the Pipelines Resource Provider.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// Details of the error from the Pipelines Resource Provider.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - An error response from the Pipelines Resource Provider.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error or the method where the error occurred.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// CodeRepository - Repository containing the source code for a pipeline.
type CodeRepository struct {
	// REQUIRED; Default branch used to configure Continuous Integration (CI) in the pipeline.
	DefaultBranch *string `json:"defaultBranch,omitempty"`

	// REQUIRED; Unique immutable identifier of the code repository.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Type of code repository.
	RepositoryType *CodeRepositoryType `json:"repositoryType,omitempty"`

	// Authorization info to access the code repository.
	Authorization *Authorization `json:"authorization,omitempty"`

	// Repository-specific properties.
	Properties map[string]*string `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CodeRepository.
func (c CodeRepository) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorization", c.Authorization)
	populate(objectMap, "defaultBranch", c.DefaultBranch)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "repositoryType", c.RepositoryType)
	return json.Marshal(objectMap)
}

// InputDescriptor - Representation of a pipeline template input parameter.
type InputDescriptor struct {
	// REQUIRED; Identifier of the input parameter.
	ID *string `json:"id,omitempty"`

	// REQUIRED; Data type of the value of the input parameter.
	Type *InputDataType `json:"type,omitempty"`

	// Description of the input parameter.
	Description *string `json:"description,omitempty"`

	// List of possible values for the input parameter.
	PossibleValues []*InputValue `json:"possibleValues,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InputDescriptor.
func (i InputDescriptor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", i.Description)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "possibleValues", i.PossibleValues)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// InputValue - Representation of a pipeline template input parameter value.
type InputValue struct {
	// Description of the input parameter value.
	DisplayValue *string `json:"displayValue,omitempty"`

	// Value of an input parameter.
	Value *string `json:"value,omitempty"`
}

// Operation - Properties of an Operation.
type Operation struct {
	// Display information of the operation.
	Display *OperationDisplayValue `json:"display,omitempty"`

	// Indicates whether the operation applies to data-plane.
	IsDataAction *string `json:"isDataAction,omitempty"`

	// READ-ONLY; Name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplayValue - Display information of an operation.
type OperationDisplayValue struct {
	// READ-ONLY; Friendly description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name of the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name of the resource provider.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name of the resource type the operation applies to.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - Result of a request to list all operations supported by Microsoft.DevOps resource provider.
type OperationListResult struct {
	// The URL to get the next set of operations, if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// READ-ONLY; List of operations supported by Microsoft.DevOps resource provider.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// OrganizationReference - Reference to an Azure DevOps Organization.
type OrganizationReference struct {
	// REQUIRED; Name of the Azure DevOps Organization.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Unique immutable identifier for the Azure DevOps Organization.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// Pipeline - Azure DevOps Pipeline used to configure Continuous Integration (CI) & Continuous Delivery (CD) for Azure resources.
type Pipeline struct {
	Resource
	// REQUIRED; Custom properties of the Pipeline.
	Properties *PipelineProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Pipeline.
func (p Pipeline) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PipelineListResult - Result of a request to list all Azure Pipelines under a given scope.
type PipelineListResult struct {
	// URL to get the next set of Pipelines, if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of pipelines.
	Value []*Pipeline `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PipelineListResult.
func (p PipelineListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PipelineProperties - Custom properties of a Pipeline.
type PipelineProperties struct {
	// REQUIRED; Configuration used to bootstrap the Pipeline.
	BootstrapConfiguration *BootstrapConfiguration `json:"bootstrapConfiguration,omitempty"`

	// REQUIRED; Reference to the Azure DevOps Organization containing the Pipeline.
	Organization *OrganizationReference `json:"organization,omitempty"`

	// REQUIRED; Reference to the Azure DevOps Project containing the Pipeline.
	Project *ProjectReference `json:"project,omitempty"`

	// READ-ONLY; Unique identifier of the Azure Pipeline within the Azure DevOps Project.
	PipelineID *int32 `json:"pipelineId,omitempty" azure:"ro"`
}

// PipelineTemplate - Template used to bootstrap the pipeline.
type PipelineTemplate struct {
	// REQUIRED; Unique identifier of the pipeline template.
	ID *string `json:"id,omitempty"`

	// Dictionary of input parameters used in the pipeline template.
	Parameters map[string]*string `json:"parameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PipelineTemplate.
func (p PipelineTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "parameters", p.Parameters)
	return json.Marshal(objectMap)
}

// PipelineTemplateDefinition - Definition of a pipeline template.
type PipelineTemplateDefinition struct {
	// REQUIRED; Unique identifier of the pipeline template.
	ID *string `json:"id,omitempty"`

	// Description of the pipeline enabled by the template.
	Description *string `json:"description,omitempty"`

	// List of input parameters required by the template to create a pipeline.
	Inputs []*InputDescriptor `json:"inputs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PipelineTemplateDefinition.
func (p PipelineTemplateDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", p.Description)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "inputs", p.Inputs)
	return json.Marshal(objectMap)
}

// PipelineTemplateDefinitionListResult - Result of a request to list all pipeline template definitions.
type PipelineTemplateDefinitionListResult struct {
	// The URL to get the next set of pipeline template definitions, if there are any.
	NextLink *string `json:"nextLink,omitempty"`

	// List of pipeline template definitions.
	Value []*PipelineTemplateDefinition `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PipelineTemplateDefinitionListResult.
func (p PipelineTemplateDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PipelineTemplateDefinitionsListOptions contains the optional parameters for the PipelineTemplateDefinitions.List method.
type PipelineTemplateDefinitionsListOptions struct {
	// placeholder for future optional parameters
}

// PipelineUpdateParameters - Request payload used to update an existing Azure Pipeline.
type PipelineUpdateParameters struct {
	// Dictionary of key-value pairs to be set as tags on the Azure Pipeline. This will overwrite any existing tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PipelineUpdateParameters.
func (p PipelineUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PipelinesBeginCreateOrUpdateOptions contains the optional parameters for the Pipelines.BeginCreateOrUpdate method.
type PipelinesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PipelinesDeleteOptions contains the optional parameters for the Pipelines.Delete method.
type PipelinesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PipelinesGetOptions contains the optional parameters for the Pipelines.Get method.
type PipelinesGetOptions struct {
	// placeholder for future optional parameters
}

// PipelinesListByResourceGroupOptions contains the optional parameters for the Pipelines.ListByResourceGroup method.
type PipelinesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PipelinesListBySubscriptionOptions contains the optional parameters for the Pipelines.ListBySubscription method.
type PipelinesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PipelinesUpdateOptions contains the optional parameters for the Pipelines.Update method.
type PipelinesUpdateOptions struct {
	// placeholder for future optional parameters
}

// ProjectReference - Reference to an Azure DevOps Project.
type ProjectReference struct {
	// REQUIRED; Name of the Azure DevOps Project.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Unique immutable identifier of the Azure DevOps Project.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// Resource - An Azure Resource Manager (ARM) resource.
type Resource struct {
	// Resource Location
	Location *string `json:"location,omitempty"`

	// Resource Tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource Name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource Type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
