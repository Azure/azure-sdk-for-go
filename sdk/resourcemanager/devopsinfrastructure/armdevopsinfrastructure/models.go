//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdevopsinfrastructure

import "time"

// AgentProfile - The agent profile of the machines in the pool.
type AgentProfile struct {
	// REQUIRED; Discriminator property for AgentProfile.
	Kind *string

	// Defines pool buffer.
	ResourcePredictions any
}

// GetAgentProfile implements the AgentProfileClassification interface for type AgentProfile.
func (a *AgentProfile) GetAgentProfile() *AgentProfile { return a }

// AzureDevOpsOrganizationProfile - Azure DevOps organization profile
type AzureDevOpsOrganizationProfile struct {
	// REQUIRED; Discriminator property for OrganizationProfile.
	Kind *string

	// REQUIRED; The list of Azure DevOps organizations the pool should be present in.
	Organizations []*Organization
}

// GetOrganizationProfile implements the OrganizationProfileClassification interface for type AzureDevOpsOrganizationProfile.
func (a *AzureDevOpsOrganizationProfile) GetOrganizationProfile() *OrganizationProfile {
	return &OrganizationProfile{
		Kind: a.Kind,
	}
}

// DevOpsAzureSKU - The Azure SKU of the machines in the pool.
type DevOpsAzureSKU struct {
	// REQUIRED; The Azure SKU name of the machines in the pool.
	Name *string

	// The Azure SKU tier of the machines in the pool.
	Tier *string
}

// FabricProfile - Defines the type of fabric the agent will run on.
type FabricProfile struct {
	// REQUIRED; Discriminator property for FabricProfile.
	Kind *string
}

// GetFabricProfile implements the FabricProfileClassification interface for type FabricProfile.
func (f *FabricProfile) GetFabricProfile() *FabricProfile { return f }

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// NetworkProfile - The network profile of the machines in the pool.
type NetworkProfile struct {
	// REQUIRED; The subnet id on which to put all machines created in the pool.
	SubnetID *string
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// Organization - Defines an Azure DevOps organization.
type Organization struct {
	// REQUIRED; The Azure DevOps organization URL in which the pool should be created.
	URL *string

	// How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool.
	Parallelism *int32

	// Optional list of projects in which the pool should be created.
	Projects []*string
}

// OrganizationProfile - Defines the organization in which the pool will be used.
type OrganizationProfile struct {
	// REQUIRED; Discriminator property for OrganizationProfile.
	Kind *string
}

// GetOrganizationProfile implements the OrganizationProfileClassification interface for type OrganizationProfile.
func (o *OrganizationProfile) GetOrganizationProfile() *OrganizationProfile { return o }

// OsProfile - The OS profile of the machines in the pool.
type OsProfile struct {
	// REQUIRED; The secret management settings of the machines in the pool.
	SecretsManagementSettings *SecretsManagementSettings
}

// Pool - Concrete tracked resource types can be created by aliasing this type using a specific property type.
type Pool struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *PoolProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PoolImage - The VM image of the machines in the pool.
type PoolImage struct {
	// REQUIRED; The resource id of the image.
	ResourceID *string

	// List of aliases to reference the image by.
	Aliases []*string

	// The percentage of the buffer to be allocated to this image.
	Buffer *string
}

// PoolListResult - The response of a Pool list operation.
type PoolListResult struct {
	// REQUIRED; The Pool items on this page
	Value []*Pool

	// The link to the next page of items
	NextLink *string
}

// PoolProperties - Pool properties
type PoolProperties struct {
	// REQUIRED; Defines how the machine will be handled once it executed a job.
	AgentProfile AgentProfileClassification

	// REQUIRED; The resource id of the DevCenter Project the pool belongs to.
	DevCenterProjectResourceID *string

	// REQUIRED; Defines the type of fabric the agent will run on.
	FabricProfile FabricProfileClassification

	// REQUIRED; Defines how many resources can there be created at any given time.
	MaximumConcurrency *int32

	// REQUIRED; Defines the organization in which the pool will be used.
	OrganizationProfile OrganizationProfileClassification

	// The status of the current operation.
	ProvisioningState *ProvisioningState
}

// PoolUpdate - The type used for update operations of the Pool.
type PoolUpdate struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The updatable properties of the Pool.
	Properties *PoolUpdateProperties

	// Resource tags.
	Tags map[string]*string
}

// PoolUpdateProperties - The updatable properties of the Pool.
type PoolUpdateProperties struct {
	// Defines how the machine will be handled once it executed a job.
	AgentProfile AgentProfileClassification

	// The resource id of the DevCenter Project the pool belongs to.
	DevCenterProjectResourceID *string

	// Defines the type of fabric the agent will run on.
	FabricProfile FabricProfileClassification

	// Defines how many resources can there be created at any given time.
	MaximumConcurrency *int32

	// Defines the organization in which the pool will be used.
	OrganizationProfile OrganizationProfileClassification

	// The status of the current operation.
	ProvisioningState *ProvisioningState
}

// SecretsManagementSettings - The secret management settings of the machines in the pool.
type SecretsManagementSettings struct {
	// REQUIRED; Defines if the key of the certificates should be exportable.
	KeyExportable *bool

	// REQUIRED; The list of certificates to install on all machines in the pool.
	ObservedCertificates []*string

	// Where to store certificates on the machine.
	CertificateStoreLocation *string
}

// Stateful profile meaning that the machines will be returned to the pool after running a job.
type Stateful struct {
	// REQUIRED; Discriminator property for AgentProfile.
	Kind *string

	// REQUIRED; How long should stateful machines be kept around. The maximum is one week.
	MaxAgentLifetime *string

	// Defines pool buffer.
	ResourcePredictions any
}

// GetAgentProfile implements the AgentProfileClassification interface for type Stateful.
func (s *Stateful) GetAgentProfile() *AgentProfile {
	return &AgentProfile{
		Kind:                s.Kind,
		ResourcePredictions: s.ResourcePredictions,
	}
}

// StatelessAgentProfile - Stateless profile meaning that the machines will be cleaned up after running a job.
type StatelessAgentProfile struct {
	// REQUIRED; Discriminator property for AgentProfile.
	Kind *string

	// Defines pool buffer.
	ResourcePredictions any
}

// GetAgentProfile implements the AgentProfileClassification interface for type StatelessAgentProfile.
func (s *StatelessAgentProfile) GetAgentProfile() *AgentProfile {
	return &AgentProfile{
		Kind:                s.Kind,
		ResourcePredictions: s.ResourcePredictions,
	}
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// VmssFabricProfile - The agents will run on Virtual Machine Scale Sets.
type VmssFabricProfile struct {
	// REQUIRED; The VM images of the machines in the pool.
	Images []*PoolImage

	// REQUIRED; Discriminator property for FabricProfile.
	Kind *string

	// REQUIRED; The Azure SKU of the machines in the pool.
	SKU *DevOpsAzureSKU

	// The network profile of the machines in the pool.
	NetworkProfile *NetworkProfile

	// The OS profile of the machines in the pool.
	OSProfile *OsProfile
}

// GetFabricProfile implements the FabricProfileClassification interface for type VmssFabricProfile.
func (v *VmssFabricProfile) GetFabricProfile() *FabricProfile {
	return &FabricProfile{
		Kind: v.Kind,
	}
}
