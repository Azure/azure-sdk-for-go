//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdigitaltwins

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// CheckNameRequest - The result returned from a database check name availability request.
type CheckNameRequest struct {
	// REQUIRED; Resource name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The type of resource, for instance Microsoft.DigitalTwins/digitalTwinsInstances.
	Type *string `json:"type,omitempty"`
}

// CheckNameResult - The result returned from a check name availability request.
type CheckNameResult struct {
	// Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated.
	Message *string `json:"message,omitempty"`

	// Specifies a Boolean value that indicates if the name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Message providing the reason why the given name is invalid.
	Reason *Reason `json:"reason,omitempty"`
}

// ConnectionProperties - The properties of a private endpoint connection.
type ConnectionProperties struct {
	// The list of group ids for the private endpoint connection.
	GroupIDs                          []*string                                              `json:"groupIds,omitempty"`
	PrivateEndpoint                   *ConnectionPropertiesPrivateEndpoint                   `json:"privateEndpoint,omitempty"`
	PrivateLinkServiceConnectionState *ConnectionPropertiesPrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; The provisioning state.
	ProvisioningState *ConnectionPropertiesProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionProperties.
func (c ConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (c ConnectionProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "groupIds", c.GroupIDs)
	populate(objectMap, "privateEndpoint", c.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", c.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", c.ProvisioningState)
}

type ConnectionPropertiesPrivateEndpoint struct {
	PrivateEndpoint
}

type ConnectionPropertiesPrivateLinkServiceConnectionState struct {
	ConnectionState
}

// ConnectionState - The current state of a private endpoint connection.
type ConnectionState struct {
	// REQUIRED; The description for the current state of a private endpoint connection.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The status of a private endpoint connection.
	Status *PrivateLinkServiceConnectionStatus `json:"status,omitempty"`

	// Actions required for a private endpoint connection.
	ActionsRequired *string `json:"actionsRequired,omitempty"`
}

// DigitalTwinsBeginCreateOrUpdateOptions contains the optional parameters for the DigitalTwins.BeginCreateOrUpdate method.
type DigitalTwinsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsBeginDeleteOptions contains the optional parameters for the DigitalTwins.BeginDelete method.
type DigitalTwinsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsBeginUpdateOptions contains the optional parameters for the DigitalTwins.BeginUpdate method.
type DigitalTwinsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsCheckNameAvailabilityOptions contains the optional parameters for the DigitalTwins.CheckNameAvailability method.
type DigitalTwinsCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsDescription - The description of the DigitalTwins service.
type DigitalTwinsDescription struct {
	DigitalTwinsResource
	// DigitalTwins instance properties.
	Properties *DigitalTwinsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsDescription.
func (d DigitalTwinsDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.DigitalTwinsResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DigitalTwinsDescriptionListResult - A list of DigitalTwins description objects with a next link.
type DigitalTwinsDescriptionListResult struct {
	// The link used to get the next page of DigitalTwins description objects.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of DigitalTwins description objects.
	Value []*DigitalTwinsDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsDescriptionListResult.
func (d DigitalTwinsDescriptionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DigitalTwinsEndpointBeginCreateOrUpdateOptions contains the optional parameters for the DigitalTwinsEndpoint.BeginCreateOrUpdate method.
type DigitalTwinsEndpointBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsEndpointBeginDeleteOptions contains the optional parameters for the DigitalTwinsEndpoint.BeginDelete method.
type DigitalTwinsEndpointBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsEndpointGetOptions contains the optional parameters for the DigitalTwinsEndpoint.Get method.
type DigitalTwinsEndpointGetOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsEndpointListOptions contains the optional parameters for the DigitalTwinsEndpoint.List method.
type DigitalTwinsEndpointListOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsEndpointResource - DigitalTwinsInstance endpoint resource.
type DigitalTwinsEndpointResource struct {
	ExternalResource
	// REQUIRED; DigitalTwinsInstance endpoint resource properties.
	Properties DigitalTwinsEndpointResourcePropertiesClassification `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsEndpointResource.
func (d DigitalTwinsEndpointResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ExternalResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DigitalTwinsEndpointResource.
func (d *DigitalTwinsEndpointResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			d.Properties, err = unmarshalDigitalTwinsEndpointResourcePropertiesClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.ExternalResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DigitalTwinsEndpointResourceListResult - A list of DigitalTwinsInstance Endpoints with a next link.
type DigitalTwinsEndpointResourceListResult struct {
	// The link used to get the next page of DigitalTwinsInstance Endpoints.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of DigitalTwinsInstance Endpoints.
	Value []*DigitalTwinsEndpointResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsEndpointResourceListResult.
func (d DigitalTwinsEndpointResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DigitalTwinsEndpointResourcePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDigitalTwinsEndpointResourceProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *DigitalTwinsEndpointResourceProperties, *EventGrid, *EventHub, *ServiceBus
type DigitalTwinsEndpointResourcePropertiesClassification interface {
	// GetDigitalTwinsEndpointResourceProperties returns the DigitalTwinsEndpointResourceProperties content of the underlying type.
	GetDigitalTwinsEndpointResourceProperties() *DigitalTwinsEndpointResourceProperties
}

// DigitalTwinsEndpointResourceProperties - Properties related to Digital Twins Endpoint
type DigitalTwinsEndpointResourceProperties struct {
	// REQUIRED; The type of Digital Twins endpoint
	EndpointType *EndpointType `json:"endpointType,omitempty"`

	// Specifies the authentication type being used for connecting to the endpoint.
	AuthenticationType *AuthenticationType `json:"authenticationType,omitempty"`

	// Dead letter storage secret for key-based authentication. Will be obfuscated during read.
	DeadLetterSecret *string `json:"deadLetterSecret,omitempty"`

	// Dead letter storage URL for identity-based authentication.
	DeadLetterURI *string `json:"deadLetterUri,omitempty"`

	// READ-ONLY; Time when the Endpoint was added to DigitalTwinsInstance.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state.
	ProvisioningState *EndpointProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// GetDigitalTwinsEndpointResourceProperties implements the DigitalTwinsEndpointResourcePropertiesClassification interface for type DigitalTwinsEndpointResourceProperties.
func (d *DigitalTwinsEndpointResourceProperties) GetDigitalTwinsEndpointResourceProperties() *DigitalTwinsEndpointResourceProperties {
	return d
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DigitalTwinsEndpointResourceProperties.
func (d *DigitalTwinsEndpointResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DigitalTwinsEndpointResourceProperties) marshalInternal(objectMap map[string]interface{}, discValue EndpointType) {
	populate(objectMap, "authenticationType", d.AuthenticationType)
	populateTimeRFC3339(objectMap, "createdTime", d.CreatedTime)
	populate(objectMap, "deadLetterSecret", d.DeadLetterSecret)
	populate(objectMap, "deadLetterUri", d.DeadLetterURI)
	d.EndpointType = &discValue
	objectMap["endpointType"] = d.EndpointType
	populate(objectMap, "provisioningState", d.ProvisioningState)
}

func (d *DigitalTwinsEndpointResourceProperties) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authenticationType":
			err = unpopulate(val, &d.AuthenticationType)
			delete(rawMsg, key)
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &d.CreatedTime)
			delete(rawMsg, key)
		case "deadLetterSecret":
			err = unpopulate(val, &d.DeadLetterSecret)
			delete(rawMsg, key)
		case "deadLetterUri":
			err = unpopulate(val, &d.DeadLetterURI)
			delete(rawMsg, key)
		case "endpointType":
			err = unpopulate(val, &d.EndpointType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DigitalTwinsGetOptions contains the optional parameters for the DigitalTwins.Get method.
type DigitalTwinsGetOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsIdentity - The managed identity for the DigitalTwinsInstance.
type DigitalTwinsIdentity struct {
	// The type of Managed Identity used by the DigitalTwinsInstance. Only SystemAssigned is supported.
	Type *DigitalTwinsIdentityType `json:"type,omitempty"`

	// READ-ONLY; The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT
	// request if the resource has a systemAssigned(implicit)
	// identity
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request
	// if the resource has a systemAssigned(implicit) identity
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// DigitalTwinsListByResourceGroupOptions contains the optional parameters for the DigitalTwins.ListByResourceGroup method.
type DigitalTwinsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsListOptions contains the optional parameters for the DigitalTwins.List method.
type DigitalTwinsListOptions struct {
	// placeholder for future optional parameters
}

// DigitalTwinsPatchDescription - The description of the DigitalTwins service.
type DigitalTwinsPatchDescription struct {
	// The managed identity for the DigitalTwinsInstance.
	Identity *DigitalTwinsIdentity `json:"identity,omitempty"`

	// Properties for the DigitalTwinsInstance.
	Properties *DigitalTwinsPatchProperties `json:"properties,omitempty"`

	// Instance patch properties
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsPatchDescription.
func (d DigitalTwinsPatchDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DigitalTwinsPatchProperties - The properties of a DigitalTwinsInstance.
type DigitalTwinsPatchProperties struct {
	// Public network access for the DigitalTwinsInstance.
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`
}

// DigitalTwinsProperties - The properties of a DigitalTwinsInstance.
type DigitalTwinsProperties struct {
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty"`

	// Public network access for the DigitalTwinsInstance.
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// READ-ONLY; Time when DigitalTwinsInstance was created.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Api endpoint to work with DigitalTwinsInstance.
	HostName *string `json:"hostName,omitempty" azure:"ro"`

	// READ-ONLY; Time when DigitalTwinsInstance was updated.
	LastUpdatedTime *time.Time `json:"lastUpdatedTime,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsProperties.
func (d DigitalTwinsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdTime", d.CreatedTime)
	populate(objectMap, "hostName", d.HostName)
	populateTimeRFC3339(objectMap, "lastUpdatedTime", d.LastUpdatedTime)
	populate(objectMap, "privateEndpointConnections", d.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", d.PublicNetworkAccess)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DigitalTwinsProperties.
func (d *DigitalTwinsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdTime":
			err = unpopulateTimeRFC3339(val, &d.CreatedTime)
			delete(rawMsg, key)
		case "hostName":
			err = unpopulate(val, &d.HostName)
			delete(rawMsg, key)
		case "lastUpdatedTime":
			err = unpopulateTimeRFC3339(val, &d.LastUpdatedTime)
			delete(rawMsg, key)
		case "privateEndpointConnections":
			err = unpopulate(val, &d.PrivateEndpointConnections)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &d.PublicNetworkAccess)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DigitalTwinsResource - The common properties of a DigitalTwinsInstance.
type DigitalTwinsResource struct {
	// REQUIRED; The resource location.
	Location *string `json:"location,omitempty"`

	// The managed identity for the DigitalTwinsInstance.
	Identity *DigitalTwinsIdentity `json:"identity,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DigitalTwinsResource.
func (d DigitalTwinsResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DigitalTwinsResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", d.ID)
	populate(objectMap, "identity", d.Identity)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
}

// ErrorDefinition - Error definition.
type ErrorDefinition struct {
	// READ-ONLY; Service specific error code which serves as the substatus for the HTTP error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Internal error details.
	Details []*ErrorDefinition `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Description of the error.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDefinition.
func (e ErrorDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// ErrorResponse - Error response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Error description
	InnerError *ErrorDefinition `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// EventGrid - Properties related to EventGrid.
type EventGrid struct {
	DigitalTwinsEndpointResourceProperties
	// REQUIRED; EventGrid secondary accesskey. Will be obfuscated during read.
	AccessKey1 *string `json:"accessKey1,omitempty"`

	// REQUIRED; EventGrid Topic Endpoint
	TopicEndpoint *string `json:"TopicEndpoint,omitempty"`

	// EventGrid secondary accesskey. Will be obfuscated during read.
	AccessKey2 *string `json:"accessKey2,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventGrid.
func (e EventGrid) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.DigitalTwinsEndpointResourceProperties.marshalInternal(objectMap, EndpointTypeEventGrid)
	populate(objectMap, "accessKey1", e.AccessKey1)
	populate(objectMap, "accessKey2", e.AccessKey2)
	populate(objectMap, "TopicEndpoint", e.TopicEndpoint)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventGrid.
func (e *EventGrid) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accessKey1":
			err = unpopulate(val, &e.AccessKey1)
			delete(rawMsg, key)
		case "accessKey2":
			err = unpopulate(val, &e.AccessKey2)
			delete(rawMsg, key)
		case "TopicEndpoint":
			err = unpopulate(val, &e.TopicEndpoint)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.DigitalTwinsEndpointResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// EventHub - Properties related to EventHub.
type EventHub struct {
	DigitalTwinsEndpointResourceProperties
	// PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
	ConnectionStringPrimaryKey *string `json:"connectionStringPrimaryKey,omitempty"`

	// SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
	ConnectionStringSecondaryKey *string `json:"connectionStringSecondaryKey,omitempty"`

	// The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
	EndpointURI *string `json:"endpointUri,omitempty"`

	// The EventHub name in the EventHub namespace for identity-based authentication.
	EntityPath *string `json:"entityPath,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EventHub.
func (e EventHub) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.DigitalTwinsEndpointResourceProperties.marshalInternal(objectMap, EndpointTypeEventHub)
	populate(objectMap, "connectionStringPrimaryKey", e.ConnectionStringPrimaryKey)
	populate(objectMap, "connectionStringSecondaryKey", e.ConnectionStringSecondaryKey)
	populate(objectMap, "endpointUri", e.EndpointURI)
	populate(objectMap, "entityPath", e.EntityPath)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type EventHub.
func (e *EventHub) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "connectionStringPrimaryKey":
			err = unpopulate(val, &e.ConnectionStringPrimaryKey)
			delete(rawMsg, key)
		case "connectionStringSecondaryKey":
			err = unpopulate(val, &e.ConnectionStringSecondaryKey)
			delete(rawMsg, key)
		case "endpointUri":
			err = unpopulate(val, &e.EndpointURI)
			delete(rawMsg, key)
		case "entityPath":
			err = unpopulate(val, &e.EntityPath)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := e.DigitalTwinsEndpointResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ExternalResource - Definition of a resource.
type ExternalResource struct {
	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Extension resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ExternalResource.
func (e ExternalResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ExternalResource.
func (e *ExternalResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return e.unmarshalInternal(rawMsg)
}

func (e ExternalResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", e.ID)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "type", e.Type)
}

func (e *ExternalResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &e.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &e.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &e.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GroupIDInformation - The group information for creating a private endpoint on Digital Twin.
type GroupIDInformation struct {
	// REQUIRED
	Properties *GroupIDInformationProperties `json:"properties,omitempty"`

	// The resource identifier.
	ID *string `json:"id,omitempty"`

	// READ-ONLY; The resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

type GroupIDInformationProperties struct {
	GroupIDInformationPropertiesAutoGenerated
}

// GroupIDInformationPropertiesAutoGenerated - The properties for a group information object.
type GroupIDInformationPropertiesAutoGenerated struct {
	// The group id
	GroupID *string `json:"groupId,omitempty"`

	// The required members for a specific group id.
	RequiredMembers []*string `json:"requiredMembers,omitempty"`

	// The required DNS zones for a specific group id.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GroupIDInformationPropertiesAutoGenerated.
func (g GroupIDInformationPropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (g GroupIDInformationPropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "groupId", g.GroupID)
	populate(objectMap, "requiredMembers", g.RequiredMembers)
	populate(objectMap, "requiredZoneNames", g.RequiredZoneNames)
}

// GroupIDInformationResponse - The available private link resources for a Digital Twin.
type GroupIDInformationResponse struct {
	// The list of available private link resources for a Digital Twin.
	Value []*GroupIDInformation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GroupIDInformationResponse.
func (g GroupIDInformationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// Operation - DigitalTwins service REST API operation
type Operation struct {
	// Operation properties display
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; If the operation is a data action (for data plane rbac).
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; Operation name: {provider}/{resource}/{read | write | action | delete}
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation.
	Origin *string `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// READ-ONLY; Friendly description for the operation,
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Name of the operation
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Service provider: Microsoft DigitalTwins
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource Type: DigitalTwinsInstances
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of DigitalTwins service operations. It contains a list of operations and a URL link to get the next set of results.
type OperationListResult struct {
	// The link used to get the next page of DigitalTwins description objects.
	NextLink *string `json:"nextLink,omitempty"`

	// READ-ONLY; A list of DigitalTwins operations supported by the Microsoft.DigitalTwins resource provider.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpoint - The private endpoint property of a private endpoint connection.
type PrivateEndpoint struct {
	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// PrivateEndpointConnection - The private endpoint connection of a Digital Twin.
type PrivateEndpointConnection struct {
	// REQUIRED
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; The resource identifier.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

type PrivateEndpointConnectionProperties struct {
	ConnectionProperties
}

// PrivateEndpointConnectionsBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnections.BeginCreateOrUpdate method.
type PrivateEndpointConnectionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnections.BeginDelete method.
type PrivateEndpointConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsGetOptions contains the optional parameters for the PrivateEndpointConnections.Get method.
type PrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsListOptions contains the optional parameters for the PrivateEndpointConnections.List method.
type PrivateEndpointConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsResponse - The available private link connections for a Digital Twin.
type PrivateEndpointConnectionsResponse struct {
	// The list of available private link connections for a Digital Twin.
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionsResponse.
func (p PrivateEndpointConnectionsResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesGetOptions contains the optional parameters for the PrivateLinkResources.Get method.
type PrivateLinkResourcesGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesListOptions contains the optional parameters for the PrivateLinkResources.List method.
type PrivateLinkResourcesListOptions struct {
	// placeholder for future optional parameters
}

// ServiceBus - Properties related to ServiceBus.
type ServiceBus struct {
	DigitalTwinsEndpointResourceProperties
	// The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol sb://
	EndpointURI *string `json:"endpointUri,omitempty"`

	// The ServiceBus Topic name for identity-based authentication
	EntityPath *string `json:"entityPath,omitempty"`

	// PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
	PrimaryConnectionString *string `json:"primaryConnectionString,omitempty"`

	// SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
	SecondaryConnectionString *string `json:"secondaryConnectionString,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceBus.
func (s ServiceBus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.DigitalTwinsEndpointResourceProperties.marshalInternal(objectMap, EndpointTypeServiceBus)
	populate(objectMap, "endpointUri", s.EndpointURI)
	populate(objectMap, "entityPath", s.EntityPath)
	populate(objectMap, "primaryConnectionString", s.PrimaryConnectionString)
	populate(objectMap, "secondaryConnectionString", s.SecondaryConnectionString)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServiceBus.
func (s *ServiceBus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endpointUri":
			err = unpopulate(val, &s.EndpointURI)
			delete(rawMsg, key)
		case "entityPath":
			err = unpopulate(val, &s.EntityPath)
			delete(rawMsg, key)
		case "primaryConnectionString":
			err = unpopulate(val, &s.PrimaryConnectionString)
			delete(rawMsg, key)
		case "secondaryConnectionString":
			err = unpopulate(val, &s.SecondaryConnectionString)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.DigitalTwinsEndpointResourceProperties.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
