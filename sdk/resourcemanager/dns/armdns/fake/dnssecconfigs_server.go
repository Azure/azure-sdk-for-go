//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/dns/armdns"
	"net/http"
	"net/url"
	"regexp"
)

// DnssecConfigsServer is a fake server for instances of the armdns.DnssecConfigsClient type.
type DnssecConfigsServer struct {
	// BeginCreateOrUpdate is the fake for method DnssecConfigsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, zoneName string, options *armdns.DnssecConfigsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armdns.DnssecConfigsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method DnssecConfigsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, zoneName string, options *armdns.DnssecConfigsClientBeginDeleteOptions) (resp azfake.PollerResponder[armdns.DnssecConfigsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method DnssecConfigsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, zoneName string, options *armdns.DnssecConfigsClientGetOptions) (resp azfake.Responder[armdns.DnssecConfigsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByDNSZonePager is the fake for method DnssecConfigsClient.NewListByDNSZonePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByDNSZonePager func(resourceGroupName string, zoneName string, options *armdns.DnssecConfigsClientListByDNSZoneOptions) (resp azfake.PagerResponder[armdns.DnssecConfigsClientListByDNSZoneResponse])
}

// NewDnssecConfigsServerTransport creates a new instance of DnssecConfigsServerTransport with the provided implementation.
// The returned DnssecConfigsServerTransport instance is connected to an instance of armdns.DnssecConfigsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDnssecConfigsServerTransport(srv *DnssecConfigsServer) *DnssecConfigsServerTransport {
	return &DnssecConfigsServerTransport{
		srv:                   srv,
		beginCreateOrUpdate:   newTracker[azfake.PollerResponder[armdns.DnssecConfigsClientCreateOrUpdateResponse]](),
		beginDelete:           newTracker[azfake.PollerResponder[armdns.DnssecConfigsClientDeleteResponse]](),
		newListByDNSZonePager: newTracker[azfake.PagerResponder[armdns.DnssecConfigsClientListByDNSZoneResponse]](),
	}
}

// DnssecConfigsServerTransport connects instances of armdns.DnssecConfigsClient to instances of DnssecConfigsServer.
// Don't use this type directly, use NewDnssecConfigsServerTransport instead.
type DnssecConfigsServerTransport struct {
	srv                   *DnssecConfigsServer
	beginCreateOrUpdate   *tracker[azfake.PollerResponder[armdns.DnssecConfigsClientCreateOrUpdateResponse]]
	beginDelete           *tracker[azfake.PollerResponder[armdns.DnssecConfigsClientDeleteResponse]]
	newListByDNSZonePager *tracker[azfake.PagerResponder[armdns.DnssecConfigsClientListByDNSZoneResponse]]
}

// Do implements the policy.Transporter interface for DnssecConfigsServerTransport.
func (d *DnssecConfigsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DnssecConfigsClient.BeginCreateOrUpdate":
		resp, err = d.dispatchBeginCreateOrUpdate(req)
	case "DnssecConfigsClient.BeginDelete":
		resp, err = d.dispatchBeginDelete(req)
	case "DnssecConfigsClient.Get":
		resp, err = d.dispatchGet(req)
	case "DnssecConfigsClient.NewListByDNSZonePager":
		resp, err = d.dispatchNewListByDNSZonePager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DnssecConfigsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := d.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Network/dnsZones/(?P<zoneName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnssecConfigs/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		zoneNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("zoneName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		ifNoneMatchParam := getOptional(getHeaderValue(req.Header, "If-None-Match"))
		var options *armdns.DnssecConfigsClientBeginCreateOrUpdateOptions
		if ifMatchParam != nil || ifNoneMatchParam != nil {
			options = &armdns.DnssecConfigsClientBeginCreateOrUpdateOptions{
				IfMatch:     ifMatchParam,
				IfNoneMatch: ifNoneMatchParam,
			}
		}
		respr, errRespr := d.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, zoneNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		d.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		d.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (d *DnssecConfigsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := d.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Network/dnsZones/(?P<zoneName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnssecConfigs/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		zoneNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("zoneName")])
		if err != nil {
			return nil, err
		}
		ifMatchParam := getOptional(getHeaderValue(req.Header, "If-Match"))
		var options *armdns.DnssecConfigsClientBeginDeleteOptions
		if ifMatchParam != nil {
			options = &armdns.DnssecConfigsClientBeginDeleteOptions{
				IfMatch: ifMatchParam,
			}
		}
		respr, errRespr := d.srv.BeginDelete(req.Context(), resourceGroupNameParam, zoneNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		d.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		d.beginDelete.remove(req)
	}

	return resp, nil
}

func (d *DnssecConfigsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Network/dnsZones/(?P<zoneName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnssecConfigs/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	zoneNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("zoneName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), resourceGroupNameParam, zoneNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DnssecConfig, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DnssecConfigsServerTransport) dispatchNewListByDNSZonePager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByDNSZonePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByDNSZonePager not implemented")}
	}
	newListByDNSZonePager := d.newListByDNSZonePager.get(req)
	if newListByDNSZonePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Network/dnsZones/(?P<zoneName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnssecConfigs`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		zoneNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("zoneName")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListByDNSZonePager(resourceGroupNameParam, zoneNameParam, nil)
		newListByDNSZonePager = &resp
		d.newListByDNSZonePager.add(req, newListByDNSZonePager)
		server.PagerResponderInjectNextLinks(newListByDNSZonePager, req, func(page *armdns.DnssecConfigsClientListByDNSZoneResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByDNSZonePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByDNSZonePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByDNSZonePager) {
		d.newListByDNSZonePager.remove(req)
	}
	return resp, nil
}
