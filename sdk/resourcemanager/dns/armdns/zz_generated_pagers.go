//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdns

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// RecordSetsListAllByDNSZonePager provides operations for iterating over paged responses.
type RecordSetsListAllByDNSZonePager struct {
	client    *RecordSetsClient
	current   RecordSetsListAllByDNSZoneResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsListAllByDNSZoneResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecordSetsListAllByDNSZonePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecordSetsListAllByDNSZonePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAllByDNSZoneHandleError(resp)
		return false
	}
	result, err := p.client.listAllByDNSZoneHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecordSetsListAllByDNSZoneResponse page.
func (p *RecordSetsListAllByDNSZonePager) PageResponse() RecordSetsListAllByDNSZoneResponse {
	return p.current
}

// RecordSetsListByDNSZonePager provides operations for iterating over paged responses.
type RecordSetsListByDNSZonePager struct {
	client    *RecordSetsClient
	current   RecordSetsListByDNSZoneResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsListByDNSZoneResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecordSetsListByDNSZonePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecordSetsListByDNSZonePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByDNSZoneHandleError(resp)
		return false
	}
	result, err := p.client.listByDNSZoneHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecordSetsListByDNSZoneResponse page.
func (p *RecordSetsListByDNSZonePager) PageResponse() RecordSetsListByDNSZoneResponse {
	return p.current
}

// RecordSetsListByTypePager provides operations for iterating over paged responses.
type RecordSetsListByTypePager struct {
	client    *RecordSetsClient
	current   RecordSetsListByTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecordSetsListByTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecordSetsListByTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecordSetsListByTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecordSetListResult.NextLink == nil || len(*p.current.RecordSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByTypeHandleError(resp)
		return false
	}
	result, err := p.client.listByTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecordSetsListByTypeResponse page.
func (p *RecordSetsListByTypePager) PageResponse() RecordSetsListByTypeResponse {
	return p.current
}

// ZonesListByResourceGroupPager provides operations for iterating over paged responses.
type ZonesListByResourceGroupPager struct {
	client    *ZonesClient
	current   ZonesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ZonesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ZonesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ZonesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ZoneListResult.NextLink == nil || len(*p.current.ZoneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ZonesListByResourceGroupResponse page.
func (p *ZonesListByResourceGroupPager) PageResponse() ZonesListByResourceGroupResponse {
	return p.current
}

// ZonesListPager provides operations for iterating over paged responses.
type ZonesListPager struct {
	client    *ZonesClient
	current   ZonesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ZonesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ZonesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ZonesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ZoneListResult.NextLink == nil || len(*p.current.ZoneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ZonesListResponse page.
func (p *ZonesListPager) PageResponse() ZonesListResponse {
	return p.current
}
