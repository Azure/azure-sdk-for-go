//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/edgeorder/armedgeorder"
)

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOperations.json
func ExampleEdgeOrderManagementClient_ListOperations() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListOperations(nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtSubscriptionLevel.json
func ExampleEdgeOrderManagementClient_ListAddressesAtSubscriptionLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListAddressesAtSubscriptionLevel(&armedgeorder.EdgeOrderManagementClientListAddressesAtSubscriptionLevelOptions{Filter: nil,
		SkipToken: nil,
	})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("AddressResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamilies.json
func ExampleEdgeOrderManagementClient_ListProductFamilies() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListProductFamilies(armedgeorder.ProductFamiliesRequest{
		FilterableProperties: map[string][]*armedgeorder.FilterableProperty{
			"azurestackedge": {
				{
					Type: armedgeorder.SupportedFilterTypesShipToCountries.ToPtr(),
					SupportedValues: []*string{
						to.StringPtr("US")},
				}},
		},
	},
		&armedgeorder.EdgeOrderManagementClientListProductFamiliesOptions{Expand: nil,
			SkipToken: nil,
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListConfigurations.json
func ExampleEdgeOrderManagementClient_ListConfigurations() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListConfigurations(armedgeorder.ConfigurationsRequest{
		ConfigurationFilters: []*armedgeorder.ConfigurationFilters{
			{
				FilterableProperty: []*armedgeorder.FilterableProperty{
					{
						Type: armedgeorder.SupportedFilterTypesShipToCountries.ToPtr(),
						SupportedValues: []*string{
							to.StringPtr("US")},
					}},
				HierarchyInformation: &armedgeorder.HierarchyInformation{
					ProductFamilyName: to.StringPtr("<product-family-name>"),
					ProductLineName:   to.StringPtr("<product-line-name>"),
					ProductName:       to.StringPtr("<product-name>"),
				},
			}},
	},
		&armedgeorder.EdgeOrderManagementClientListConfigurationsOptions{SkipToken: nil})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListProductFamiliesMetadata.json
func ExampleEdgeOrderManagementClient_ListProductFamiliesMetadata() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListProductFamiliesMetadata(&armedgeorder.EdgeOrderManagementClientListProductFamiliesMetadataOptions{SkipToken: nil})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtSubscriptionLevel.json
func ExampleEdgeOrderManagementClient_ListOrderAtSubscriptionLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListOrderAtSubscriptionLevel(&armedgeorder.EdgeOrderManagementClientListOrderAtSubscriptionLevelOptions{SkipToken: nil})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OrderResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtSubscriptionLevel.json
func ExampleEdgeOrderManagementClient_ListOrderItemsAtSubscriptionLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListOrderItemsAtSubscriptionLevel(&armedgeorder.EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelOptions{Filter: nil,
		Expand:    nil,
		SkipToken: nil,
	})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OrderItemResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListAddressesAtResourceGroupLevel.json
func ExampleEdgeOrderManagementClient_ListAddressesAtResourceGroupLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListAddressesAtResourceGroupLevel("<resource-group-name>",
		&armedgeorder.EdgeOrderManagementClientListAddressesAtResourceGroupLevelOptions{Filter: nil,
			SkipToken: nil,
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("AddressResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetAddressByName.json
func ExampleEdgeOrderManagementClient_GetAddressByName() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	res, err := client.GetAddressByName(ctx,
		"<address-name>",
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("AddressResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateAddress.json
func ExampleEdgeOrderManagementClient_BeginCreateAddress() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateAddress(ctx,
		"<address-name>",
		"<resource-group-name>",
		armedgeorder.AddressResource{
			TrackedResource: armedgeorder.TrackedResource{
				Location: to.StringPtr("<location>"),
			},
			Properties: &armedgeorder.AddressProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.StringPtr("<contact-name>"),
					EmailList: []*string{
						to.StringPtr("testemail@microsoft.com")},
					Phone:          to.StringPtr("<phone>"),
					PhoneExtension: to.StringPtr("<phone-extension>"),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     armedgeorder.AddressTypeNone.ToPtr(),
					City:            to.StringPtr("<city>"),
					CompanyName:     to.StringPtr("<company-name>"),
					Country:         to.StringPtr("<country>"),
					PostalCode:      to.StringPtr("<postal-code>"),
					StateOrProvince: to.StringPtr("<state-or-province>"),
					StreetAddress1:  to.StringPtr("<street-address1>"),
					StreetAddress2:  to.StringPtr("<street-address2>"),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("AddressResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteAddressByName.json
func ExampleEdgeOrderManagementClient_BeginDeleteAddressByName() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteAddressByName(ctx,
		"<address-name>",
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateAddress.json
func ExampleEdgeOrderManagementClient_BeginUpdateAddress() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateAddress(ctx,
		"<address-name>",
		"<resource-group-name>",
		armedgeorder.AddressUpdateParameter{
			Properties: &armedgeorder.AddressUpdateProperties{
				ContactDetails: &armedgeorder.ContactDetails{
					ContactName: to.StringPtr("<contact-name>"),
					EmailList: []*string{
						to.StringPtr("ssemcr@microsoft.com")},
					Phone:          to.StringPtr("<phone>"),
					PhoneExtension: to.StringPtr("<phone-extension>"),
				},
				ShippingAddress: &armedgeorder.ShippingAddress{
					AddressType:     armedgeorder.AddressTypeNone.ToPtr(),
					City:            to.StringPtr("<city>"),
					CompanyName:     to.StringPtr("<company-name>"),
					Country:         to.StringPtr("<country>"),
					PostalCode:      to.StringPtr("<postal-code>"),
					StateOrProvince: to.StringPtr("<state-or-province>"),
					StreetAddress1:  to.StringPtr("<street-address1>"),
					StreetAddress2:  to.StringPtr("<street-address2>"),
				},
			},
			Tags: map[string]*string{
				"Hobby":    to.StringPtr("Web Series Added"),
				"Name":     to.StringPtr("Smile-Updated"),
				"WhatElse": to.StringPtr("Web Series Added"),
				"Work":     to.StringPtr("Engineering"),
			},
		},
		&armedgeorder.EdgeOrderManagementClientBeginUpdateAddressOptions{IfMatch: nil})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("AddressResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderAtResourceGroupLevel.json
func ExampleEdgeOrderManagementClient_ListOrderAtResourceGroupLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListOrderAtResourceGroupLevel("<resource-group-name>",
		&armedgeorder.EdgeOrderManagementClientListOrderAtResourceGroupLevelOptions{SkipToken: nil})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OrderResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderByName.json
func ExampleEdgeOrderManagementClient_GetOrderByName() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	res, err := client.GetOrderByName(ctx,
		"<order-name>",
		"<resource-group-name>",
		"<location>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OrderResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ListOrderItemsAtResourceGroupLevel.json
func ExampleEdgeOrderManagementClient_ListOrderItemsAtResourceGroupLevel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	pager := client.ListOrderItemsAtResourceGroupLevel("<resource-group-name>",
		&armedgeorder.EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelOptions{Filter: nil,
			Expand:    nil,
			SkipToken: nil,
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OrderItemResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetOrderItemByName.json
func ExampleEdgeOrderManagementClient_GetOrderItemByName() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	res, err := client.GetOrderItemByName(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		&armedgeorder.EdgeOrderManagementClientGetOrderItemByNameOptions{Expand: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OrderItemResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CreateOrderItem.json
func ExampleEdgeOrderManagementClient_BeginCreateOrderItem() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrderItem(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		armedgeorder.OrderItemResource{
			TrackedResource: armedgeorder.TrackedResource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"carrot": to.StringPtr("vegetable"),
					"mango":  to.StringPtr("fruit"),
				},
			},
			Properties: &armedgeorder.OrderItemProperties{
				AddressDetails: &armedgeorder.AddressDetails{
					ForwardAddress: &armedgeorder.AddressProperties{
						ContactDetails: &armedgeorder.ContactDetails{
							ContactName: to.StringPtr("<contact-name>"),
							EmailList: []*string{
								to.StringPtr("ssemmail@microsoft.com"),
								to.StringPtr("vishwamdir@microsoft.com")},
							Phone: to.StringPtr("<phone>"),
						},
						ShippingAddress: &armedgeorder.ShippingAddress{
							AddressType:     armedgeorder.AddressTypeResidential.ToPtr(),
							City:            to.StringPtr("<city>"),
							CompanyName:     to.StringPtr("<company-name>"),
							Country:         to.StringPtr("<country>"),
							PostalCode:      to.StringPtr("<postal-code>"),
							StateOrProvince: to.StringPtr("<state-or-province>"),
							StreetAddress1:  to.StringPtr("<street-address1>"),
							StreetAddress2:  to.StringPtr("<street-address2>"),
							ZipExtendedCode: to.StringPtr("<zip-extended-code>"),
						},
					},
				},
				OrderID: to.StringPtr("<order-id>"),
				OrderItemDetails: &armedgeorder.OrderItemDetails{
					OrderItemType: armedgeorder.OrderItemTypePurchase.ToPtr(),
					Preferences: &armedgeorder.Preferences{
						TransportPreferences: &armedgeorder.TransportPreferences{
							PreferredShipmentType: armedgeorder.TransportShipmentTypesMicrosoftManaged.ToPtr(),
						},
					},
					ProductDetails: &armedgeorder.ProductDetails{
						HierarchyInformation: &armedgeorder.HierarchyInformation{
							ConfigurationName: to.StringPtr("<configuration-name>"),
							ProductFamilyName: to.StringPtr("<product-family-name>"),
							ProductLineName:   to.StringPtr("<product-line-name>"),
							ProductName:       to.StringPtr("<product-name>"),
						},
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OrderItemResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/DeleteOrderItemByName.json
func ExampleEdgeOrderManagementClient_BeginDeleteOrderItemByName() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDeleteOrderItemByName(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/UpdateOrderItem.json
func ExampleEdgeOrderManagementClient_BeginUpdateOrderItem() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateOrderItem(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		armedgeorder.OrderItemUpdateParameter{
			Properties: &armedgeorder.OrderItemUpdateProperties{
				ForwardAddress: &armedgeorder.AddressProperties{
					ContactDetails: &armedgeorder.ContactDetails{
						ContactName: to.StringPtr("<contact-name>"),
						EmailList: []*string{
							to.StringPtr("testemail@microsoft.com")},
						Phone: to.StringPtr("<phone>"),
					},
				},
				Preferences: &armedgeorder.Preferences{
					TransportPreferences: &armedgeorder.TransportPreferences{
						PreferredShipmentType: armedgeorder.TransportShipmentTypesCustomerManaged.ToPtr(),
					},
				},
			},
			Tags: map[string]*string{
				"ant":    to.StringPtr("insect"),
				"pigeon": to.StringPtr("bird"),
				"tiger":  to.StringPtr("animal"),
			},
		},
		&armedgeorder.EdgeOrderManagementClientBeginUpdateOrderItemOptions{IfMatch: nil})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OrderItemResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/CancelOrderItem.json
func ExampleEdgeOrderManagementClient_CancelOrderItem() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	_, err = client.CancelOrderItem(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		armedgeorder.CancellationReason{
			Reason: to.StringPtr("<reason>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/ReturnOrderItem.json
func ExampleEdgeOrderManagementClient_BeginReturnOrderItem() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armedgeorder.NewEdgeOrderManagementClient("<subscription-id>", cred, nil)
	poller, err := client.BeginReturnOrderItem(ctx,
		"<order-item-name>",
		"<resource-group-name>",
		armedgeorder.ReturnOrderItemDetails{
			ReturnReason: to.StringPtr("<return-reason>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
