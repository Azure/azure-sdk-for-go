//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EdgeOrderManagementClient contains the methods for the EdgeOrderManagementClient group.
// Don't use this type directly, use NewEdgeOrderManagementClient() instead.
type EdgeOrderManagementClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewEdgeOrderManagementClient creates a new instance of EdgeOrderManagementClient with the specified values.
func NewEdgeOrderManagementClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *EdgeOrderManagementClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &EdgeOrderManagementClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CancelOrderItem - Cancel order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) CancelOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, cancellationReason CancellationReason, options *EdgeOrderManagementClientCancelOrderItemOptions) (EdgeOrderManagementClientCancelOrderItemResponse, error) {
	req, err := client.cancelOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, cancellationReason, options)
	if err != nil {
		return EdgeOrderManagementClientCancelOrderItemResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EdgeOrderManagementClientCancelOrderItemResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return EdgeOrderManagementClientCancelOrderItemResponse{}, client.cancelOrderItemHandleError(resp)
	}
	return EdgeOrderManagementClientCancelOrderItemResponse{RawResponse: resp}, nil
}

// cancelOrderItemCreateRequest creates the CancelOrderItem request.
func (client *EdgeOrderManagementClient) cancelOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, cancellationReason CancellationReason, options *EdgeOrderManagementClientCancelOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, cancellationReason)
}

// cancelOrderItemHandleError handles the CancelOrderItem error response.
func (client *EdgeOrderManagementClient) cancelOrderItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreateAddress - Creates a new address with the specified parameters. Existing address can be updated with this API
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginCreateAddress(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *EdgeOrderManagementClientBeginCreateAddressOptions) (EdgeOrderManagementClientCreateAddressPollerResponse, error) {
	resp, err := client.createAddress(ctx, addressName, resourceGroupName, addressResource, options)
	if err != nil {
		return EdgeOrderManagementClientCreateAddressPollerResponse{}, err
	}
	result := EdgeOrderManagementClientCreateAddressPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.CreateAddress", "", resp, client.pl, client.createAddressHandleError)
	if err != nil {
		return EdgeOrderManagementClientCreateAddressPollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientCreateAddressPoller{
		pt: pt,
	}
	return result, nil
}

// CreateAddress - Creates a new address with the specified parameters. Existing address can be updated with this API
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) createAddress(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *EdgeOrderManagementClientBeginCreateAddressOptions) (*http.Response, error) {
	req, err := client.createAddressCreateRequest(ctx, addressName, resourceGroupName, addressResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createAddressHandleError(resp)
	}
	return resp, nil
}

// createAddressCreateRequest creates the CreateAddress request.
func (client *EdgeOrderManagementClient) createAddressCreateRequest(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *EdgeOrderManagementClientBeginCreateAddressOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, addressResource)
}

// createAddressHandleError handles the CreateAddress error response.
func (client *EdgeOrderManagementClient) createAddressHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreateOrderItem - Creates an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order
// item API.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginCreateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *EdgeOrderManagementClientBeginCreateOrderItemOptions) (EdgeOrderManagementClientCreateOrderItemPollerResponse, error) {
	resp, err := client.createOrderItem(ctx, orderItemName, resourceGroupName, orderItemResource, options)
	if err != nil {
		return EdgeOrderManagementClientCreateOrderItemPollerResponse{}, err
	}
	result := EdgeOrderManagementClientCreateOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.CreateOrderItem", "", resp, client.pl, client.createOrderItemHandleError)
	if err != nil {
		return EdgeOrderManagementClientCreateOrderItemPollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientCreateOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrderItem - Creates an order item. Existing order item cannot be updated with this api and should instead be updated with the Update order item
// API.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) createOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *EdgeOrderManagementClientBeginCreateOrderItemOptions) (*http.Response, error) {
	req, err := client.createOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, orderItemResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrderItemHandleError(resp)
	}
	return resp, nil
}

// createOrderItemCreateRequest creates the CreateOrderItem request.
func (client *EdgeOrderManagementClient) createOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *EdgeOrderManagementClientBeginCreateOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, orderItemResource)
}

// createOrderItemHandleError handles the CreateOrderItem error response.
func (client *EdgeOrderManagementClient) createOrderItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteAddressByName - Deletes an address.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginDeleteAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteAddressByNameOptions) (EdgeOrderManagementClientDeleteAddressByNamePollerResponse, error) {
	resp, err := client.deleteAddressByName(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return EdgeOrderManagementClientDeleteAddressByNamePollerResponse{}, err
	}
	result := EdgeOrderManagementClientDeleteAddressByNamePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.DeleteAddressByName", "", resp, client.pl, client.deleteAddressByNameHandleError)
	if err != nil {
		return EdgeOrderManagementClientDeleteAddressByNamePollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientDeleteAddressByNamePoller{
		pt: pt,
	}
	return result, nil
}

// DeleteAddressByName - Deletes an address.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) deleteAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteAddressByNameOptions) (*http.Response, error) {
	req, err := client.deleteAddressByNameCreateRequest(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteAddressByNameHandleError(resp)
	}
	return resp, nil
}

// deleteAddressByNameCreateRequest creates the DeleteAddressByName request.
func (client *EdgeOrderManagementClient) deleteAddressByNameCreateRequest(ctx context.Context, addressName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteAddressByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAddressByNameHandleError handles the DeleteAddressByName error response.
func (client *EdgeOrderManagementClient) deleteAddressByNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDeleteOrderItemByName - Deletes an order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginDeleteOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteOrderItemByNameOptions) (EdgeOrderManagementClientDeleteOrderItemByNamePollerResponse, error) {
	resp, err := client.deleteOrderItemByName(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return EdgeOrderManagementClientDeleteOrderItemByNamePollerResponse{}, err
	}
	result := EdgeOrderManagementClientDeleteOrderItemByNamePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.DeleteOrderItemByName", "", resp, client.pl, client.deleteOrderItemByNameHandleError)
	if err != nil {
		return EdgeOrderManagementClientDeleteOrderItemByNamePollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientDeleteOrderItemByNamePoller{
		pt: pt,
	}
	return result, nil
}

// DeleteOrderItemByName - Deletes an order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) deleteOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteOrderItemByNameOptions) (*http.Response, error) {
	req, err := client.deleteOrderItemByNameCreateRequest(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteOrderItemByNameHandleError(resp)
	}
	return resp, nil
}

// deleteOrderItemByNameCreateRequest creates the DeleteOrderItemByName request.
func (client *EdgeOrderManagementClient) deleteOrderItemByNameCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, options *EdgeOrderManagementClientBeginDeleteOrderItemByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteOrderItemByNameHandleError handles the DeleteOrderItemByName error response.
func (client *EdgeOrderManagementClient) deleteOrderItemByNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAddressByName - Gets information about the specified address.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) GetAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *EdgeOrderManagementClientGetAddressByNameOptions) (EdgeOrderManagementClientGetAddressByNameResponse, error) {
	req, err := client.getAddressByNameCreateRequest(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return EdgeOrderManagementClientGetAddressByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EdgeOrderManagementClientGetAddressByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EdgeOrderManagementClientGetAddressByNameResponse{}, client.getAddressByNameHandleError(resp)
	}
	return client.getAddressByNameHandleResponse(resp)
}

// getAddressByNameCreateRequest creates the GetAddressByName request.
func (client *EdgeOrderManagementClient) getAddressByNameCreateRequest(ctx context.Context, addressName string, resourceGroupName string, options *EdgeOrderManagementClientGetAddressByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAddressByNameHandleResponse handles the GetAddressByName response.
func (client *EdgeOrderManagementClient) getAddressByNameHandleResponse(resp *http.Response) (EdgeOrderManagementClientGetAddressByNameResponse, error) {
	result := EdgeOrderManagementClientGetAddressByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResource); err != nil {
		return EdgeOrderManagementClientGetAddressByNameResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getAddressByNameHandleError handles the GetAddressByName error response.
func (client *EdgeOrderManagementClient) getAddressByNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetOrderByName - Gets an order.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) GetOrderByName(ctx context.Context, orderName string, resourceGroupName string, location string, options *EdgeOrderManagementClientGetOrderByNameOptions) (EdgeOrderManagementClientGetOrderByNameResponse, error) {
	req, err := client.getOrderByNameCreateRequest(ctx, orderName, resourceGroupName, location, options)
	if err != nil {
		return EdgeOrderManagementClientGetOrderByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EdgeOrderManagementClientGetOrderByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EdgeOrderManagementClientGetOrderByNameResponse{}, client.getOrderByNameHandleError(resp)
	}
	return client.getOrderByNameHandleResponse(resp)
}

// getOrderByNameCreateRequest creates the GetOrderByName request.
func (client *EdgeOrderManagementClient) getOrderByNameCreateRequest(ctx context.Context, orderName string, resourceGroupName string, location string, options *EdgeOrderManagementClientGetOrderByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/locations/{location}/orders/{orderName}"
	if orderName == "" {
		return nil, errors.New("parameter orderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderName}", url.PathEscape(orderName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOrderByNameHandleResponse handles the GetOrderByName response.
func (client *EdgeOrderManagementClient) getOrderByNameHandleResponse(resp *http.Response) (EdgeOrderManagementClientGetOrderByNameResponse, error) {
	result := EdgeOrderManagementClientGetOrderByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResource); err != nil {
		return EdgeOrderManagementClientGetOrderByNameResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getOrderByNameHandleError handles the GetOrderByName error response.
func (client *EdgeOrderManagementClient) getOrderByNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetOrderItemByName - Gets an order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) GetOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *EdgeOrderManagementClientGetOrderItemByNameOptions) (EdgeOrderManagementClientGetOrderItemByNameResponse, error) {
	req, err := client.getOrderItemByNameCreateRequest(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return EdgeOrderManagementClientGetOrderItemByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EdgeOrderManagementClientGetOrderItemByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EdgeOrderManagementClientGetOrderItemByNameResponse{}, client.getOrderItemByNameHandleError(resp)
	}
	return client.getOrderItemByNameHandleResponse(resp)
}

// getOrderItemByNameCreateRequest creates the GetOrderItemByName request.
func (client *EdgeOrderManagementClient) getOrderItemByNameCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, options *EdgeOrderManagementClientGetOrderItemByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOrderItemByNameHandleResponse handles the GetOrderItemByName response.
func (client *EdgeOrderManagementClient) getOrderItemByNameHandleResponse(resp *http.Response) (EdgeOrderManagementClientGetOrderItemByNameResponse, error) {
	result := EdgeOrderManagementClientGetOrderItemByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResource); err != nil {
		return EdgeOrderManagementClientGetOrderItemByNameResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getOrderItemByNameHandleError handles the GetOrderItemByName error response.
func (client *EdgeOrderManagementClient) getOrderItemByNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListAddressesAtResourceGroupLevel - Lists all the addresses available under the given resource group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListAddressesAtResourceGroupLevel(resourceGroupName string, options *EdgeOrderManagementClientListAddressesAtResourceGroupLevelOptions) *EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager {
	return &EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAddressesAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AddressResourceList.NextLink)
		},
	}
}

// listAddressesAtResourceGroupLevelCreateRequest creates the ListAddressesAtResourceGroupLevel request.
func (client *EdgeOrderManagementClient) listAddressesAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *EdgeOrderManagementClientListAddressesAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAddressesAtResourceGroupLevelHandleResponse handles the ListAddressesAtResourceGroupLevel response.
func (client *EdgeOrderManagementClient) listAddressesAtResourceGroupLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse, error) {
	result := EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResourceList); err != nil {
		return EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAddressesAtResourceGroupLevelHandleError handles the ListAddressesAtResourceGroupLevel error response.
func (client *EdgeOrderManagementClient) listAddressesAtResourceGroupLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListAddressesAtSubscriptionLevel - Lists all the addresses available under the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListAddressesAtSubscriptionLevel(options *EdgeOrderManagementClientListAddressesAtSubscriptionLevelOptions) *EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager {
	return &EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAddressesAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AddressResourceList.NextLink)
		},
	}
}

// listAddressesAtSubscriptionLevelCreateRequest creates the ListAddressesAtSubscriptionLevel request.
func (client *EdgeOrderManagementClient) listAddressesAtSubscriptionLevelCreateRequest(ctx context.Context, options *EdgeOrderManagementClientListAddressesAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/addresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAddressesAtSubscriptionLevelHandleResponse handles the ListAddressesAtSubscriptionLevel response.
func (client *EdgeOrderManagementClient) listAddressesAtSubscriptionLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse, error) {
	result := EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResourceList); err != nil {
		return EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAddressesAtSubscriptionLevelHandleError handles the ListAddressesAtSubscriptionLevel error response.
func (client *EdgeOrderManagementClient) listAddressesAtSubscriptionLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListConfigurations - This method provides the list of configurations for the given product family, product line and product under subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListConfigurations(configurationsRequest ConfigurationsRequest, options *EdgeOrderManagementClientListConfigurationsOptions) *EdgeOrderManagementClientListConfigurationsPager {
	return &EdgeOrderManagementClientListConfigurationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listConfigurationsCreateRequest(ctx, configurationsRequest, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListConfigurationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.Configurations.NextLink)
		},
	}
}

// listConfigurationsCreateRequest creates the ListConfigurations request.
func (client *EdgeOrderManagementClient) listConfigurationsCreateRequest(ctx context.Context, configurationsRequest ConfigurationsRequest, options *EdgeOrderManagementClientListConfigurationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, configurationsRequest)
}

// listConfigurationsHandleResponse handles the ListConfigurations response.
func (client *EdgeOrderManagementClient) listConfigurationsHandleResponse(resp *http.Response) (EdgeOrderManagementClientListConfigurationsResponse, error) {
	result := EdgeOrderManagementClientListConfigurationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Configurations); err != nil {
		return EdgeOrderManagementClientListConfigurationsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listConfigurationsHandleError handles the ListConfigurations error response.
func (client *EdgeOrderManagementClient) listConfigurationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListOperations - This method gets all the operations that are exposed for customer.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListOperations(options *EdgeOrderManagementClientListOperationsOptions) *EdgeOrderManagementClientListOperationsPager {
	return &EdgeOrderManagementClientListOperationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOperationsCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListOperationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OperationListResult.NextLink)
		},
	}
}

// listOperationsCreateRequest creates the ListOperations request.
func (client *EdgeOrderManagementClient) listOperationsCreateRequest(ctx context.Context, options *EdgeOrderManagementClientListOperationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOperationsHandleResponse handles the ListOperations response.
func (client *EdgeOrderManagementClient) listOperationsHandleResponse(resp *http.Response) (EdgeOrderManagementClientListOperationsResponse, error) {
	result := EdgeOrderManagementClientListOperationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationListResult); err != nil {
		return EdgeOrderManagementClientListOperationsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOperationsHandleError handles the ListOperations error response.
func (client *EdgeOrderManagementClient) listOperationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListOrderAtResourceGroupLevel - Lists order at resource group level.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListOrderAtResourceGroupLevel(resourceGroupName string, options *EdgeOrderManagementClientListOrderAtResourceGroupLevelOptions) *EdgeOrderManagementClientListOrderAtResourceGroupLevelPager {
	return &EdgeOrderManagementClientListOrderAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderResourceList.NextLink)
		},
	}
}

// listOrderAtResourceGroupLevelCreateRequest creates the ListOrderAtResourceGroupLevel request.
func (client *EdgeOrderManagementClient) listOrderAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *EdgeOrderManagementClientListOrderAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orders"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderAtResourceGroupLevelHandleResponse handles the ListOrderAtResourceGroupLevel response.
func (client *EdgeOrderManagementClient) listOrderAtResourceGroupLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse, error) {
	result := EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResourceList); err != nil {
		return EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOrderAtResourceGroupLevelHandleError handles the ListOrderAtResourceGroupLevel error response.
func (client *EdgeOrderManagementClient) listOrderAtResourceGroupLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListOrderAtSubscriptionLevel - Lists order at subscription level.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListOrderAtSubscriptionLevel(options *EdgeOrderManagementClientListOrderAtSubscriptionLevelOptions) *EdgeOrderManagementClientListOrderAtSubscriptionLevelPager {
	return &EdgeOrderManagementClientListOrderAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderResourceList.NextLink)
		},
	}
}

// listOrderAtSubscriptionLevelCreateRequest creates the ListOrderAtSubscriptionLevel request.
func (client *EdgeOrderManagementClient) listOrderAtSubscriptionLevelCreateRequest(ctx context.Context, options *EdgeOrderManagementClientListOrderAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orders"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderAtSubscriptionLevelHandleResponse handles the ListOrderAtSubscriptionLevel response.
func (client *EdgeOrderManagementClient) listOrderAtSubscriptionLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse, error) {
	result := EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResourceList); err != nil {
		return EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOrderAtSubscriptionLevelHandleError handles the ListOrderAtSubscriptionLevel error response.
func (client *EdgeOrderManagementClient) listOrderAtSubscriptionLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListOrderItemsAtResourceGroupLevel - Lists order item at resource group level.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListOrderItemsAtResourceGroupLevel(resourceGroupName string, options *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelOptions) *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager {
	return &EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderItemsAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderItemResourceList.NextLink)
		},
	}
}

// listOrderItemsAtResourceGroupLevelCreateRequest creates the ListOrderItemsAtResourceGroupLevel request.
func (client *EdgeOrderManagementClient) listOrderItemsAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderItemsAtResourceGroupLevelHandleResponse handles the ListOrderItemsAtResourceGroupLevel response.
func (client *EdgeOrderManagementClient) listOrderItemsAtResourceGroupLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse, error) {
	result := EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResourceList); err != nil {
		return EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOrderItemsAtResourceGroupLevelHandleError handles the ListOrderItemsAtResourceGroupLevel error response.
func (client *EdgeOrderManagementClient) listOrderItemsAtResourceGroupLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListOrderItemsAtSubscriptionLevel - Lists order item at subscription level.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListOrderItemsAtSubscriptionLevel(options *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelOptions) *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager {
	return &EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderItemsAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderItemResourceList.NextLink)
		},
	}
}

// listOrderItemsAtSubscriptionLevelCreateRequest creates the ListOrderItemsAtSubscriptionLevel request.
func (client *EdgeOrderManagementClient) listOrderItemsAtSubscriptionLevelCreateRequest(ctx context.Context, options *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderItemsAtSubscriptionLevelHandleResponse handles the ListOrderItemsAtSubscriptionLevel response.
func (client *EdgeOrderManagementClient) listOrderItemsAtSubscriptionLevelHandleResponse(resp *http.Response) (EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse, error) {
	result := EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResourceList); err != nil {
		return EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOrderItemsAtSubscriptionLevelHandleError handles the ListOrderItemsAtSubscriptionLevel error response.
func (client *EdgeOrderManagementClient) listOrderItemsAtSubscriptionLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListProductFamilies - This method provides the list of product families for the given subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListProductFamilies(productFamiliesRequest ProductFamiliesRequest, options *EdgeOrderManagementClientListProductFamiliesOptions) *EdgeOrderManagementClientListProductFamiliesPager {
	return &EdgeOrderManagementClientListProductFamiliesPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listProductFamiliesCreateRequest(ctx, productFamiliesRequest, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListProductFamiliesResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductFamilies.NextLink)
		},
	}
}

// listProductFamiliesCreateRequest creates the ListProductFamilies request.
func (client *EdgeOrderManagementClient) listProductFamiliesCreateRequest(ctx context.Context, productFamiliesRequest ProductFamiliesRequest, options *EdgeOrderManagementClientListProductFamiliesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, productFamiliesRequest)
}

// listProductFamiliesHandleResponse handles the ListProductFamilies response.
func (client *EdgeOrderManagementClient) listProductFamiliesHandleResponse(resp *http.Response) (EdgeOrderManagementClientListProductFamiliesResponse, error) {
	result := EdgeOrderManagementClientListProductFamiliesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductFamilies); err != nil {
		return EdgeOrderManagementClientListProductFamiliesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listProductFamiliesHandleError handles the ListProductFamilies error response.
func (client *EdgeOrderManagementClient) listProductFamiliesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListProductFamiliesMetadata - This method provides the list of product families metadata for the given subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) ListProductFamiliesMetadata(options *EdgeOrderManagementClientListProductFamiliesMetadataOptions) *EdgeOrderManagementClientListProductFamiliesMetadataPager {
	return &EdgeOrderManagementClientListProductFamiliesMetadataPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listProductFamiliesMetadataCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderManagementClientListProductFamiliesMetadataResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductFamiliesMetadata.NextLink)
		},
	}
}

// listProductFamiliesMetadataCreateRequest creates the ListProductFamiliesMetadata request.
func (client *EdgeOrderManagementClient) listProductFamiliesMetadataCreateRequest(ctx context.Context, options *EdgeOrderManagementClientListProductFamiliesMetadataOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listProductFamiliesMetadataHandleResponse handles the ListProductFamiliesMetadata response.
func (client *EdgeOrderManagementClient) listProductFamiliesMetadataHandleResponse(resp *http.Response) (EdgeOrderManagementClientListProductFamiliesMetadataResponse, error) {
	result := EdgeOrderManagementClientListProductFamiliesMetadataResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductFamiliesMetadata); err != nil {
		return EdgeOrderManagementClientListProductFamiliesMetadataResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listProductFamiliesMetadataHandleError handles the ListProductFamiliesMetadata error response.
func (client *EdgeOrderManagementClient) listProductFamiliesMetadataHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginReturnOrderItem - Return order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginReturnOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *EdgeOrderManagementClientBeginReturnOrderItemOptions) (EdgeOrderManagementClientReturnOrderItemPollerResponse, error) {
	resp, err := client.returnOrderItem(ctx, orderItemName, resourceGroupName, returnOrderItemDetails, options)
	if err != nil {
		return EdgeOrderManagementClientReturnOrderItemPollerResponse{}, err
	}
	result := EdgeOrderManagementClientReturnOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.ReturnOrderItem", "", resp, client.pl, client.returnOrderItemHandleError)
	if err != nil {
		return EdgeOrderManagementClientReturnOrderItemPollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientReturnOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// ReturnOrderItem - Return order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) returnOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *EdgeOrderManagementClientBeginReturnOrderItemOptions) (*http.Response, error) {
	req, err := client.returnOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, returnOrderItemDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.returnOrderItemHandleError(resp)
	}
	return resp, nil
}

// returnOrderItemCreateRequest creates the ReturnOrderItem request.
func (client *EdgeOrderManagementClient) returnOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *EdgeOrderManagementClientBeginReturnOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, returnOrderItemDetails)
}

// returnOrderItemHandleError handles the ReturnOrderItem error response.
func (client *EdgeOrderManagementClient) returnOrderItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdateAddress - Updates the properties of an existing address.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginUpdateAddress(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *EdgeOrderManagementClientBeginUpdateAddressOptions) (EdgeOrderManagementClientUpdateAddressPollerResponse, error) {
	resp, err := client.updateAddress(ctx, addressName, resourceGroupName, addressUpdateParameter, options)
	if err != nil {
		return EdgeOrderManagementClientUpdateAddressPollerResponse{}, err
	}
	result := EdgeOrderManagementClientUpdateAddressPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.UpdateAddress", "", resp, client.pl, client.updateAddressHandleError)
	if err != nil {
		return EdgeOrderManagementClientUpdateAddressPollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientUpdateAddressPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateAddress - Updates the properties of an existing address.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) updateAddress(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *EdgeOrderManagementClientBeginUpdateAddressOptions) (*http.Response, error) {
	req, err := client.updateAddressCreateRequest(ctx, addressName, resourceGroupName, addressUpdateParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.updateAddressHandleError(resp)
	}
	return resp, nil
}

// updateAddressCreateRequest creates the UpdateAddress request.
func (client *EdgeOrderManagementClient) updateAddressCreateRequest(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *EdgeOrderManagementClientBeginUpdateAddressOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, addressUpdateParameter)
}

// updateAddressHandleError handles the UpdateAddress error response.
func (client *EdgeOrderManagementClient) updateAddressHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdateOrderItem - Updates the properties of an existing order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) BeginUpdateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *EdgeOrderManagementClientBeginUpdateOrderItemOptions) (EdgeOrderManagementClientUpdateOrderItemPollerResponse, error) {
	resp, err := client.updateOrderItem(ctx, orderItemName, resourceGroupName, orderItemUpdateParameter, options)
	if err != nil {
		return EdgeOrderManagementClientUpdateOrderItemPollerResponse{}, err
	}
	result := EdgeOrderManagementClientUpdateOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderManagementClient.UpdateOrderItem", "", resp, client.pl, client.updateOrderItemHandleError)
	if err != nil {
		return EdgeOrderManagementClientUpdateOrderItemPollerResponse{}, err
	}
	result.Poller = &EdgeOrderManagementClientUpdateOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateOrderItem - Updates the properties of an existing order item.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderManagementClient) updateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *EdgeOrderManagementClientBeginUpdateOrderItemOptions) (*http.Response, error) {
	req, err := client.updateOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, orderItemUpdateParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.updateOrderItemHandleError(resp)
	}
	return resp, nil
}

// updateOrderItemCreateRequest creates the UpdateOrderItem request.
func (client *EdgeOrderManagementClient) updateOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *EdgeOrderManagementClientBeginUpdateOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, orderItemUpdateParameter)
}

// updateOrderItemHandleError handles the UpdateOrderItem error response.
func (client *EdgeOrderManagementClient) updateOrderItemHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
