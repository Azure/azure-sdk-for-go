//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ManagementClient contains the methods for the EdgeOrderManagementClient group.
// Don't use this type directly, use NewManagementClient() instead.
type ManagementClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewManagementClient creates a new instance of ManagementClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewManagementClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ManagementClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &ManagementClient{
		subscriptionID: subscriptionID,
		host:           string(cp.Endpoint),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// CancelOrderItem - Cancel order item.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// cancellationReason - Reason for cancellation.
// options - ManagementClientCancelOrderItemOptions contains the optional parameters for the ManagementClient.CancelOrderItem
// method.
func (client *ManagementClient) CancelOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, cancellationReason CancellationReason, options *ManagementClientCancelOrderItemOptions) (ManagementClientCancelOrderItemResponse, error) {
	req, err := client.cancelOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, cancellationReason, options)
	if err != nil {
		return ManagementClientCancelOrderItemResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementClientCancelOrderItemResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ManagementClientCancelOrderItemResponse{}, runtime.NewResponseError(resp)
	}
	return ManagementClientCancelOrderItemResponse{RawResponse: resp}, nil
}

// cancelOrderItemCreateRequest creates the CancelOrderItem request.
func (client *ManagementClient) cancelOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, cancellationReason CancellationReason, options *ManagementClientCancelOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/cancel"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, cancellationReason)
}

// BeginCreateAddress - Creates a new address with the specified parameters. Existing address can be updated with this API
// If the operation fails it returns an *azcore.ResponseError type.
// addressName - The name of the address Resource within the specified resource group. address names must be between 3 and
// 24 characters in length and use any alphanumeric and underscore only
// resourceGroupName - The name of the resource group. The name is case insensitive.
// addressResource - Address details from request body.
// options - ManagementClientBeginCreateAddressOptions contains the optional parameters for the ManagementClient.BeginCreateAddress
// method.
func (client *ManagementClient) BeginCreateAddress(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *ManagementClientBeginCreateAddressOptions) (ManagementClientCreateAddressPollerResponse, error) {
	resp, err := client.createAddress(ctx, addressName, resourceGroupName, addressResource, options)
	if err != nil {
		return ManagementClientCreateAddressPollerResponse{}, err
	}
	result := ManagementClientCreateAddressPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.CreateAddress", "", resp, client.pl)
	if err != nil {
		return ManagementClientCreateAddressPollerResponse{}, err
	}
	result.Poller = &ManagementClientCreateAddressPoller{
		pt: pt,
	}
	return result, nil
}

// CreateAddress - Creates a new address with the specified parameters. Existing address can be updated with this API
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) createAddress(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *ManagementClientBeginCreateAddressOptions) (*http.Response, error) {
	req, err := client.createAddressCreateRequest(ctx, addressName, resourceGroupName, addressResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createAddressCreateRequest creates the CreateAddress request.
func (client *ManagementClient) createAddressCreateRequest(ctx context.Context, addressName string, resourceGroupName string, addressResource AddressResource, options *ManagementClientBeginCreateAddressOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, addressResource)
}

// BeginCreateOrderItem - Creates an order item. Existing order item cannot be updated with this api and should instead be
// updated with the Update order item API.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// orderItemResource - Order item details from request body.
// options - ManagementClientBeginCreateOrderItemOptions contains the optional parameters for the ManagementClient.BeginCreateOrderItem
// method.
func (client *ManagementClient) BeginCreateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *ManagementClientBeginCreateOrderItemOptions) (ManagementClientCreateOrderItemPollerResponse, error) {
	resp, err := client.createOrderItem(ctx, orderItemName, resourceGroupName, orderItemResource, options)
	if err != nil {
		return ManagementClientCreateOrderItemPollerResponse{}, err
	}
	result := ManagementClientCreateOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.CreateOrderItem", "", resp, client.pl)
	if err != nil {
		return ManagementClientCreateOrderItemPollerResponse{}, err
	}
	result.Poller = &ManagementClientCreateOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrderItem - Creates an order item. Existing order item cannot be updated with this api and should instead be updated
// with the Update order item API.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) createOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *ManagementClientBeginCreateOrderItemOptions) (*http.Response, error) {
	req, err := client.createOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, orderItemResource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrderItemCreateRequest creates the CreateOrderItem request.
func (client *ManagementClient) createOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, orderItemResource OrderItemResource, options *ManagementClientBeginCreateOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, orderItemResource)
}

// BeginDeleteAddressByName - Deletes an address.
// If the operation fails it returns an *azcore.ResponseError type.
// addressName - The name of the address Resource within the specified resource group. address names must be between 3 and
// 24 characters in length and use any alphanumeric and underscore only
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientBeginDeleteAddressByNameOptions contains the optional parameters for the ManagementClient.BeginDeleteAddressByName
// method.
func (client *ManagementClient) BeginDeleteAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *ManagementClientBeginDeleteAddressByNameOptions) (ManagementClientDeleteAddressByNamePollerResponse, error) {
	resp, err := client.deleteAddressByName(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return ManagementClientDeleteAddressByNamePollerResponse{}, err
	}
	result := ManagementClientDeleteAddressByNamePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.DeleteAddressByName", "", resp, client.pl)
	if err != nil {
		return ManagementClientDeleteAddressByNamePollerResponse{}, err
	}
	result.Poller = &ManagementClientDeleteAddressByNamePoller{
		pt: pt,
	}
	return result, nil
}

// DeleteAddressByName - Deletes an address.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) deleteAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *ManagementClientBeginDeleteAddressByNameOptions) (*http.Response, error) {
	req, err := client.deleteAddressByNameCreateRequest(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteAddressByNameCreateRequest creates the DeleteAddressByName request.
func (client *ManagementClient) deleteAddressByNameCreateRequest(ctx context.Context, addressName string, resourceGroupName string, options *ManagementClientBeginDeleteAddressByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// BeginDeleteOrderItemByName - Deletes an order item.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientBeginDeleteOrderItemByNameOptions contains the optional parameters for the ManagementClient.BeginDeleteOrderItemByName
// method.
func (client *ManagementClient) BeginDeleteOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *ManagementClientBeginDeleteOrderItemByNameOptions) (ManagementClientDeleteOrderItemByNamePollerResponse, error) {
	resp, err := client.deleteOrderItemByName(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return ManagementClientDeleteOrderItemByNamePollerResponse{}, err
	}
	result := ManagementClientDeleteOrderItemByNamePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.DeleteOrderItemByName", "", resp, client.pl)
	if err != nil {
		return ManagementClientDeleteOrderItemByNamePollerResponse{}, err
	}
	result.Poller = &ManagementClientDeleteOrderItemByNamePoller{
		pt: pt,
	}
	return result, nil
}

// DeleteOrderItemByName - Deletes an order item.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) deleteOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *ManagementClientBeginDeleteOrderItemByNameOptions) (*http.Response, error) {
	req, err := client.deleteOrderItemByNameCreateRequest(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteOrderItemByNameCreateRequest creates the DeleteOrderItemByName request.
func (client *ManagementClient) deleteOrderItemByNameCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, options *ManagementClientBeginDeleteOrderItemByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// GetAddressByName - Gets information about the specified address.
// If the operation fails it returns an *azcore.ResponseError type.
// addressName - The name of the address Resource within the specified resource group. address names must be between 3 and
// 24 characters in length and use any alphanumeric and underscore only
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientGetAddressByNameOptions contains the optional parameters for the ManagementClient.GetAddressByName
// method.
func (client *ManagementClient) GetAddressByName(ctx context.Context, addressName string, resourceGroupName string, options *ManagementClientGetAddressByNameOptions) (ManagementClientGetAddressByNameResponse, error) {
	req, err := client.getAddressByNameCreateRequest(ctx, addressName, resourceGroupName, options)
	if err != nil {
		return ManagementClientGetAddressByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementClientGetAddressByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ManagementClientGetAddressByNameResponse{}, runtime.NewResponseError(resp)
	}
	return client.getAddressByNameHandleResponse(resp)
}

// getAddressByNameCreateRequest creates the GetAddressByName request.
func (client *ManagementClient) getAddressByNameCreateRequest(ctx context.Context, addressName string, resourceGroupName string, options *ManagementClientGetAddressByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAddressByNameHandleResponse handles the GetAddressByName response.
func (client *ManagementClient) getAddressByNameHandleResponse(resp *http.Response) (ManagementClientGetAddressByNameResponse, error) {
	result := ManagementClientGetAddressByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResource); err != nil {
		return ManagementClientGetAddressByNameResponse{}, err
	}
	return result, nil
}

// GetOrderByName - Gets an order.
// If the operation fails it returns an *azcore.ResponseError type.
// orderName - The name of the order
// resourceGroupName - The name of the resource group. The name is case insensitive.
// location - The name of Azure region.
// options - ManagementClientGetOrderByNameOptions contains the optional parameters for the ManagementClient.GetOrderByName
// method.
func (client *ManagementClient) GetOrderByName(ctx context.Context, orderName string, resourceGroupName string, location string, options *ManagementClientGetOrderByNameOptions) (ManagementClientGetOrderByNameResponse, error) {
	req, err := client.getOrderByNameCreateRequest(ctx, orderName, resourceGroupName, location, options)
	if err != nil {
		return ManagementClientGetOrderByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementClientGetOrderByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ManagementClientGetOrderByNameResponse{}, runtime.NewResponseError(resp)
	}
	return client.getOrderByNameHandleResponse(resp)
}

// getOrderByNameCreateRequest creates the GetOrderByName request.
func (client *ManagementClient) getOrderByNameCreateRequest(ctx context.Context, orderName string, resourceGroupName string, location string, options *ManagementClientGetOrderByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/locations/{location}/orders/{orderName}"
	if orderName == "" {
		return nil, errors.New("parameter orderName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderName}", url.PathEscape(orderName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOrderByNameHandleResponse handles the GetOrderByName response.
func (client *ManagementClient) getOrderByNameHandleResponse(resp *http.Response) (ManagementClientGetOrderByNameResponse, error) {
	result := ManagementClientGetOrderByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResource); err != nil {
		return ManagementClientGetOrderByNameResponse{}, err
	}
	return result, nil
}

// GetOrderItemByName - Gets an order item.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientGetOrderItemByNameOptions contains the optional parameters for the ManagementClient.GetOrderItemByName
// method.
func (client *ManagementClient) GetOrderItemByName(ctx context.Context, orderItemName string, resourceGroupName string, options *ManagementClientGetOrderItemByNameOptions) (ManagementClientGetOrderItemByNameResponse, error) {
	req, err := client.getOrderItemByNameCreateRequest(ctx, orderItemName, resourceGroupName, options)
	if err != nil {
		return ManagementClientGetOrderItemByNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementClientGetOrderItemByNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ManagementClientGetOrderItemByNameResponse{}, runtime.NewResponseError(resp)
	}
	return client.getOrderItemByNameHandleResponse(resp)
}

// getOrderItemByNameCreateRequest creates the GetOrderItemByName request.
func (client *ManagementClient) getOrderItemByNameCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, options *ManagementClientGetOrderItemByNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOrderItemByNameHandleResponse handles the GetOrderItemByName response.
func (client *ManagementClient) getOrderItemByNameHandleResponse(resp *http.Response) (ManagementClientGetOrderItemByNameResponse, error) {
	result := ManagementClientGetOrderItemByNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResource); err != nil {
		return ManagementClientGetOrderItemByNameResponse{}, err
	}
	return result, nil
}

// ListAddressesAtResourceGroupLevel - Lists all the addresses available under the given resource group.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientListAddressesAtResourceGroupLevelOptions contains the optional parameters for the ManagementClient.ListAddressesAtResourceGroupLevel
// method.
func (client *ManagementClient) ListAddressesAtResourceGroupLevel(resourceGroupName string, options *ManagementClientListAddressesAtResourceGroupLevelOptions) *ManagementClientListAddressesAtResourceGroupLevelPager {
	return &ManagementClientListAddressesAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAddressesAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListAddressesAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AddressResourceList.NextLink)
		},
	}
}

// listAddressesAtResourceGroupLevelCreateRequest creates the ListAddressesAtResourceGroupLevel request.
func (client *ManagementClient) listAddressesAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *ManagementClientListAddressesAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAddressesAtResourceGroupLevelHandleResponse handles the ListAddressesAtResourceGroupLevel response.
func (client *ManagementClient) listAddressesAtResourceGroupLevelHandleResponse(resp *http.Response) (ManagementClientListAddressesAtResourceGroupLevelResponse, error) {
	result := ManagementClientListAddressesAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResourceList); err != nil {
		return ManagementClientListAddressesAtResourceGroupLevelResponse{}, err
	}
	return result, nil
}

// ListAddressesAtSubscriptionLevel - Lists all the addresses available under the subscription.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ManagementClientListAddressesAtSubscriptionLevelOptions contains the optional parameters for the ManagementClient.ListAddressesAtSubscriptionLevel
// method.
func (client *ManagementClient) ListAddressesAtSubscriptionLevel(options *ManagementClientListAddressesAtSubscriptionLevelOptions) *ManagementClientListAddressesAtSubscriptionLevelPager {
	return &ManagementClientListAddressesAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAddressesAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListAddressesAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AddressResourceList.NextLink)
		},
	}
}

// listAddressesAtSubscriptionLevelCreateRequest creates the ListAddressesAtSubscriptionLevel request.
func (client *ManagementClient) listAddressesAtSubscriptionLevelCreateRequest(ctx context.Context, options *ManagementClientListAddressesAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/addresses"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAddressesAtSubscriptionLevelHandleResponse handles the ListAddressesAtSubscriptionLevel response.
func (client *ManagementClient) listAddressesAtSubscriptionLevelHandleResponse(resp *http.Response) (ManagementClientListAddressesAtSubscriptionLevelResponse, error) {
	result := ManagementClientListAddressesAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AddressResourceList); err != nil {
		return ManagementClientListAddressesAtSubscriptionLevelResponse{}, err
	}
	return result, nil
}

// ListConfigurations - This method provides the list of configurations for the given product family, product line and product
// under subscription.
// If the operation fails it returns an *azcore.ResponseError type.
// configurationsRequest - Filters for showing the configurations.
// options - ManagementClientListConfigurationsOptions contains the optional parameters for the ManagementClient.ListConfigurations
// method.
func (client *ManagementClient) ListConfigurations(configurationsRequest ConfigurationsRequest, options *ManagementClientListConfigurationsOptions) *ManagementClientListConfigurationsPager {
	return &ManagementClientListConfigurationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listConfigurationsCreateRequest(ctx, configurationsRequest, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListConfigurationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.Configurations.NextLink)
		},
	}
}

// listConfigurationsCreateRequest creates the ListConfigurations request.
func (client *ManagementClient) listConfigurationsCreateRequest(ctx context.Context, configurationsRequest ConfigurationsRequest, options *ManagementClientListConfigurationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listConfigurations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, configurationsRequest)
}

// listConfigurationsHandleResponse handles the ListConfigurations response.
func (client *ManagementClient) listConfigurationsHandleResponse(resp *http.Response) (ManagementClientListConfigurationsResponse, error) {
	result := ManagementClientListConfigurationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Configurations); err != nil {
		return ManagementClientListConfigurationsResponse{}, err
	}
	return result, nil
}

// ListOperations - This method gets all the operations that are exposed for customer.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ManagementClientListOperationsOptions contains the optional parameters for the ManagementClient.ListOperations
// method.
func (client *ManagementClient) ListOperations(options *ManagementClientListOperationsOptions) *ManagementClientListOperationsPager {
	return &ManagementClientListOperationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOperationsCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListOperationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OperationListResult.NextLink)
		},
	}
}

// listOperationsCreateRequest creates the ListOperations request.
func (client *ManagementClient) listOperationsCreateRequest(ctx context.Context, options *ManagementClientListOperationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrder/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOperationsHandleResponse handles the ListOperations response.
func (client *ManagementClient) listOperationsHandleResponse(resp *http.Response) (ManagementClientListOperationsResponse, error) {
	result := ManagementClientListOperationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationListResult); err != nil {
		return ManagementClientListOperationsResponse{}, err
	}
	return result, nil
}

// ListOrderAtResourceGroupLevel - Lists order at resource group level.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientListOrderAtResourceGroupLevelOptions contains the optional parameters for the ManagementClient.ListOrderAtResourceGroupLevel
// method.
func (client *ManagementClient) ListOrderAtResourceGroupLevel(resourceGroupName string, options *ManagementClientListOrderAtResourceGroupLevelOptions) *ManagementClientListOrderAtResourceGroupLevelPager {
	return &ManagementClientListOrderAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListOrderAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderResourceList.NextLink)
		},
	}
}

// listOrderAtResourceGroupLevelCreateRequest creates the ListOrderAtResourceGroupLevel request.
func (client *ManagementClient) listOrderAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *ManagementClientListOrderAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orders"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderAtResourceGroupLevelHandleResponse handles the ListOrderAtResourceGroupLevel response.
func (client *ManagementClient) listOrderAtResourceGroupLevelHandleResponse(resp *http.Response) (ManagementClientListOrderAtResourceGroupLevelResponse, error) {
	result := ManagementClientListOrderAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResourceList); err != nil {
		return ManagementClientListOrderAtResourceGroupLevelResponse{}, err
	}
	return result, nil
}

// ListOrderAtSubscriptionLevel - Lists order at subscription level.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ManagementClientListOrderAtSubscriptionLevelOptions contains the optional parameters for the ManagementClient.ListOrderAtSubscriptionLevel
// method.
func (client *ManagementClient) ListOrderAtSubscriptionLevel(options *ManagementClientListOrderAtSubscriptionLevelOptions) *ManagementClientListOrderAtSubscriptionLevelPager {
	return &ManagementClientListOrderAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListOrderAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderResourceList.NextLink)
		},
	}
}

// listOrderAtSubscriptionLevelCreateRequest creates the ListOrderAtSubscriptionLevel request.
func (client *ManagementClient) listOrderAtSubscriptionLevelCreateRequest(ctx context.Context, options *ManagementClientListOrderAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orders"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderAtSubscriptionLevelHandleResponse handles the ListOrderAtSubscriptionLevel response.
func (client *ManagementClient) listOrderAtSubscriptionLevelHandleResponse(resp *http.Response) (ManagementClientListOrderAtSubscriptionLevelResponse, error) {
	result := ManagementClientListOrderAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderResourceList); err != nil {
		return ManagementClientListOrderAtSubscriptionLevelResponse{}, err
	}
	return result, nil
}

// ListOrderItemsAtResourceGroupLevel - Lists order item at resource group level.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - ManagementClientListOrderItemsAtResourceGroupLevelOptions contains the optional parameters for the ManagementClient.ListOrderItemsAtResourceGroupLevel
// method.
func (client *ManagementClient) ListOrderItemsAtResourceGroupLevel(resourceGroupName string, options *ManagementClientListOrderItemsAtResourceGroupLevelOptions) *ManagementClientListOrderItemsAtResourceGroupLevelPager {
	return &ManagementClientListOrderItemsAtResourceGroupLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderItemsAtResourceGroupLevelCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListOrderItemsAtResourceGroupLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderItemResourceList.NextLink)
		},
	}
}

// listOrderItemsAtResourceGroupLevelCreateRequest creates the ListOrderItemsAtResourceGroupLevel request.
func (client *ManagementClient) listOrderItemsAtResourceGroupLevelCreateRequest(ctx context.Context, resourceGroupName string, options *ManagementClientListOrderItemsAtResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderItemsAtResourceGroupLevelHandleResponse handles the ListOrderItemsAtResourceGroupLevel response.
func (client *ManagementClient) listOrderItemsAtResourceGroupLevelHandleResponse(resp *http.Response) (ManagementClientListOrderItemsAtResourceGroupLevelResponse, error) {
	result := ManagementClientListOrderItemsAtResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResourceList); err != nil {
		return ManagementClientListOrderItemsAtResourceGroupLevelResponse{}, err
	}
	return result, nil
}

// ListOrderItemsAtSubscriptionLevel - Lists order item at subscription level.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ManagementClientListOrderItemsAtSubscriptionLevelOptions contains the optional parameters for the ManagementClient.ListOrderItemsAtSubscriptionLevel
// method.
func (client *ManagementClient) ListOrderItemsAtSubscriptionLevel(options *ManagementClientListOrderItemsAtSubscriptionLevelOptions) *ManagementClientListOrderItemsAtSubscriptionLevelPager {
	return &ManagementClientListOrderItemsAtSubscriptionLevelPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOrderItemsAtSubscriptionLevelCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListOrderItemsAtSubscriptionLevelResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OrderItemResourceList.NextLink)
		},
	}
}

// listOrderItemsAtSubscriptionLevelCreateRequest creates the ListOrderItemsAtSubscriptionLevel request.
func (client *ManagementClient) listOrderItemsAtSubscriptionLevelCreateRequest(ctx context.Context, options *ManagementClientListOrderItemsAtSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/orderItems"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOrderItemsAtSubscriptionLevelHandleResponse handles the ListOrderItemsAtSubscriptionLevel response.
func (client *ManagementClient) listOrderItemsAtSubscriptionLevelHandleResponse(resp *http.Response) (ManagementClientListOrderItemsAtSubscriptionLevelResponse, error) {
	result := ManagementClientListOrderItemsAtSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OrderItemResourceList); err != nil {
		return ManagementClientListOrderItemsAtSubscriptionLevelResponse{}, err
	}
	return result, nil
}

// ListProductFamilies - This method provides the list of product families for the given subscription.
// If the operation fails it returns an *azcore.ResponseError type.
// productFamiliesRequest - Filters for showing the product families.
// options - ManagementClientListProductFamiliesOptions contains the optional parameters for the ManagementClient.ListProductFamilies
// method.
func (client *ManagementClient) ListProductFamilies(productFamiliesRequest ProductFamiliesRequest, options *ManagementClientListProductFamiliesOptions) *ManagementClientListProductFamiliesPager {
	return &ManagementClientListProductFamiliesPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listProductFamiliesCreateRequest(ctx, productFamiliesRequest, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListProductFamiliesResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductFamilies.NextLink)
		},
	}
}

// listProductFamiliesCreateRequest creates the ListProductFamilies request.
func (client *ManagementClient) listProductFamiliesCreateRequest(ctx context.Context, productFamiliesRequest ProductFamiliesRequest, options *ManagementClientListProductFamiliesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/listProductFamilies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", *options.Expand)
	}
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, productFamiliesRequest)
}

// listProductFamiliesHandleResponse handles the ListProductFamilies response.
func (client *ManagementClient) listProductFamiliesHandleResponse(resp *http.Response) (ManagementClientListProductFamiliesResponse, error) {
	result := ManagementClientListProductFamiliesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductFamilies); err != nil {
		return ManagementClientListProductFamiliesResponse{}, err
	}
	return result, nil
}

// ListProductFamiliesMetadata - This method provides the list of product families metadata for the given subscription.
// If the operation fails it returns an *azcore.ResponseError type.
// options - ManagementClientListProductFamiliesMetadataOptions contains the optional parameters for the ManagementClient.ListProductFamiliesMetadata
// method.
func (client *ManagementClient) ListProductFamiliesMetadata(options *ManagementClientListProductFamiliesMetadataOptions) *ManagementClientListProductFamiliesMetadataPager {
	return &ManagementClientListProductFamiliesMetadataPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listProductFamiliesMetadataCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementClientListProductFamiliesMetadataResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ProductFamiliesMetadata.NextLink)
		},
	}
}

// listProductFamiliesMetadataCreateRequest creates the ListProductFamiliesMetadata request.
func (client *ManagementClient) listProductFamiliesMetadataCreateRequest(ctx context.Context, options *ManagementClientListProductFamiliesMetadataOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrder/productFamiliesMetadata"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listProductFamiliesMetadataHandleResponse handles the ListProductFamiliesMetadata response.
func (client *ManagementClient) listProductFamiliesMetadataHandleResponse(resp *http.Response) (ManagementClientListProductFamiliesMetadataResponse, error) {
	result := ManagementClientListProductFamiliesMetadataResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ProductFamiliesMetadata); err != nil {
		return ManagementClientListProductFamiliesMetadataResponse{}, err
	}
	return result, nil
}

// BeginReturnOrderItem - Return order item.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// returnOrderItemDetails - Return order item CurrentStatus.
// options - ManagementClientBeginReturnOrderItemOptions contains the optional parameters for the ManagementClient.BeginReturnOrderItem
// method.
func (client *ManagementClient) BeginReturnOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *ManagementClientBeginReturnOrderItemOptions) (ManagementClientReturnOrderItemPollerResponse, error) {
	resp, err := client.returnOrderItem(ctx, orderItemName, resourceGroupName, returnOrderItemDetails, options)
	if err != nil {
		return ManagementClientReturnOrderItemPollerResponse{}, err
	}
	result := ManagementClientReturnOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.ReturnOrderItem", "", resp, client.pl)
	if err != nil {
		return ManagementClientReturnOrderItemPollerResponse{}, err
	}
	result.Poller = &ManagementClientReturnOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// ReturnOrderItem - Return order item.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) returnOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *ManagementClientBeginReturnOrderItemOptions) (*http.Response, error) {
	req, err := client.returnOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, returnOrderItemDetails, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// returnOrderItemCreateRequest creates the ReturnOrderItem request.
func (client *ManagementClient) returnOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, returnOrderItemDetails ReturnOrderItemDetails, options *ManagementClientBeginReturnOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}/return"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, returnOrderItemDetails)
}

// BeginUpdateAddress - Updates the properties of an existing address.
// If the operation fails it returns an *azcore.ResponseError type.
// addressName - The name of the address Resource within the specified resource group. address names must be between 3 and
// 24 characters in length and use any alphanumeric and underscore only
// resourceGroupName - The name of the resource group. The name is case insensitive.
// addressUpdateParameter - Address update parameters from request body.
// options - ManagementClientBeginUpdateAddressOptions contains the optional parameters for the ManagementClient.BeginUpdateAddress
// method.
func (client *ManagementClient) BeginUpdateAddress(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *ManagementClientBeginUpdateAddressOptions) (ManagementClientUpdateAddressPollerResponse, error) {
	resp, err := client.updateAddress(ctx, addressName, resourceGroupName, addressUpdateParameter, options)
	if err != nil {
		return ManagementClientUpdateAddressPollerResponse{}, err
	}
	result := ManagementClientUpdateAddressPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.UpdateAddress", "", resp, client.pl)
	if err != nil {
		return ManagementClientUpdateAddressPollerResponse{}, err
	}
	result.Poller = &ManagementClientUpdateAddressPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateAddress - Updates the properties of an existing address.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) updateAddress(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *ManagementClientBeginUpdateAddressOptions) (*http.Response, error) {
	req, err := client.updateAddressCreateRequest(ctx, addressName, resourceGroupName, addressUpdateParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateAddressCreateRequest creates the UpdateAddress request.
func (client *ManagementClient) updateAddressCreateRequest(ctx context.Context, addressName string, resourceGroupName string, addressUpdateParameter AddressUpdateParameter, options *ManagementClientBeginUpdateAddressOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/addresses/{addressName}"
	if addressName == "" {
		return nil, errors.New("parameter addressName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{addressName}", url.PathEscape(addressName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, addressUpdateParameter)
}

// BeginUpdateOrderItem - Updates the properties of an existing order item.
// If the operation fails it returns an *azcore.ResponseError type.
// orderItemName - The name of the order item
// resourceGroupName - The name of the resource group. The name is case insensitive.
// orderItemUpdateParameter - order item update parameters from request body.
// options - ManagementClientBeginUpdateOrderItemOptions contains the optional parameters for the ManagementClient.BeginUpdateOrderItem
// method.
func (client *ManagementClient) BeginUpdateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *ManagementClientBeginUpdateOrderItemOptions) (ManagementClientUpdateOrderItemPollerResponse, error) {
	resp, err := client.updateOrderItem(ctx, orderItemName, resourceGroupName, orderItemUpdateParameter, options)
	if err != nil {
		return ManagementClientUpdateOrderItemPollerResponse{}, err
	}
	result := ManagementClientUpdateOrderItemPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementClient.UpdateOrderItem", "", resp, client.pl)
	if err != nil {
		return ManagementClientUpdateOrderItemPollerResponse{}, err
	}
	result.Poller = &ManagementClientUpdateOrderItemPoller{
		pt: pt,
	}
	return result, nil
}

// UpdateOrderItem - Updates the properties of an existing order item.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ManagementClient) updateOrderItem(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *ManagementClientBeginUpdateOrderItemOptions) (*http.Response, error) {
	req, err := client.updateOrderItemCreateRequest(ctx, orderItemName, resourceGroupName, orderItemUpdateParameter, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateOrderItemCreateRequest creates the UpdateOrderItem request.
func (client *ManagementClient) updateOrderItemCreateRequest(ctx context.Context, orderItemName string, resourceGroupName string, orderItemUpdateParameter OrderItemUpdateParameter, options *ManagementClientBeginUpdateOrderItemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EdgeOrder/orderItems/{orderItemName}"
	if orderItemName == "" {
		return nil, errors.New("parameter orderItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{orderItemName}", url.PathEscape(orderItemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, orderItemUpdateParameter)
}
