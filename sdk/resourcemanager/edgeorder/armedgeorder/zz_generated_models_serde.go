//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AddressResource.
func (a AddressResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "systemData", a.SystemData)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AddressResourceList.
func (a AddressResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AddressUpdateParameter.
func (a AddressUpdateParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BasicInformation.
func (b BasicInformation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", b.AvailabilityInformation)
	populate(objectMap, "costInformation", b.CostInformation)
	populate(objectMap, "description", b.Description)
	populate(objectMap, "displayName", b.DisplayName)
	populate(objectMap, "hierarchyInformation", b.HierarchyInformation)
	populate(objectMap, "imageInformation", b.ImageInformation)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BillingMeterDetails.
func (b BillingMeterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "frequency", b.Frequency)
	populate(objectMap, "meterDetails", b.MeterDetails)
	populate(objectMap, "meteringType", b.MeteringType)
	populate(objectMap, "name", b.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BillingMeterDetails.
func (b *BillingMeterDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "frequency":
			err = unpopulate(val, &b.Frequency)
			delete(rawMsg, key)
		case "meterDetails":
			b.MeterDetails, err = unmarshalMeterDetailsClassification(val)
			delete(rawMsg, key)
		case "meteringType":
			err = unpopulate(val, &b.MeteringType)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CommonProperties.
func (c CommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", c.AvailabilityInformation)
	populate(objectMap, "costInformation", c.CostInformation)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "filterableProperties", c.FilterableProperties)
	populate(objectMap, "hierarchyInformation", c.HierarchyInformation)
	populate(objectMap, "imageInformation", c.ImageInformation)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationFilters.
func (c ConfigurationFilters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filterableProperty", c.FilterableProperty)
	populate(objectMap, "hierarchyInformation", c.HierarchyInformation)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationProperties.
func (c ConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", c.AvailabilityInformation)
	populate(objectMap, "costInformation", c.CostInformation)
	populate(objectMap, "description", c.Description)
	populate(objectMap, "dimensions", c.Dimensions)
	populate(objectMap, "displayName", c.DisplayName)
	populate(objectMap, "filterableProperties", c.FilterableProperties)
	populate(objectMap, "hierarchyInformation", c.HierarchyInformation)
	populate(objectMap, "imageInformation", c.ImageInformation)
	populate(objectMap, "specifications", c.Specifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Configurations.
func (c Configurations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationsRequest.
func (c ConfigurationsRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configurationFilters", c.ConfigurationFilters)
	populate(objectMap, "customerSubscriptionDetails", c.CustomerSubscriptionDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContactDetails.
func (c ContactDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contactName", c.ContactName)
	populate(objectMap, "emailList", c.EmailList)
	populate(objectMap, "mobile", c.Mobile)
	populate(objectMap, "phone", c.Phone)
	populate(objectMap, "phoneExtension", c.PhoneExtension)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CostInformation.
func (c CostInformation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "billingInfoUrl", c.BillingInfoURL)
	populate(objectMap, "billingMeterDetails", c.BillingMeterDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomerSubscriptionDetails.
func (c CustomerSubscriptionDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "locationPlacementId", c.LocationPlacementID)
	populate(objectMap, "quotaId", c.QuotaID)
	populate(objectMap, "registeredFeatures", c.RegisteredFeatures)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Description.
func (d Description) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "attributes", d.Attributes)
	populate(objectMap, "descriptionType", d.DescriptionType)
	populate(objectMap, "keywords", d.Keywords)
	populate(objectMap, "links", d.Links)
	populate(objectMap, "longDescription", d.LongDescription)
	populate(objectMap, "shortDescription", d.ShortDescription)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FilterableProperty.
func (f FilterableProperty) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "supportedValues", f.SupportedValues)
	populate(objectMap, "type", f.Type)
	return json.Marshal(objectMap)
}

// GetMeterDetails implements the MeterDetailsClassification interface for type MeterDetails.
func (m *MeterDetails) GetMeterDetails() *MeterDetails { return m }

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemDetails.
func (o OrderItemDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cancellationReason", o.CancellationReason)
	populate(objectMap, "cancellationStatus", o.CancellationStatus)
	populate(objectMap, "currentStage", o.CurrentStage)
	populate(objectMap, "deletionStatus", o.DeletionStatus)
	populate(objectMap, "error", o.Error)
	populate(objectMap, "forwardShippingDetails", o.ForwardShippingDetails)
	populate(objectMap, "managementRpDetails", o.ManagementRpDetails)
	populate(objectMap, "managementRpDetailsList", o.ManagementRpDetailsList)
	populate(objectMap, "notificationEmailList", o.NotificationEmailList)
	populate(objectMap, "orderItemStageHistory", o.OrderItemStageHistory)
	populate(objectMap, "orderItemType", o.OrderItemType)
	populate(objectMap, "preferences", o.Preferences)
	populate(objectMap, "productDetails", o.ProductDetails)
	populate(objectMap, "returnReason", o.ReturnReason)
	populate(objectMap, "returnStatus", o.ReturnStatus)
	populate(objectMap, "reverseShippingDetails", o.ReverseShippingDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemProperties.
func (o OrderItemProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressDetails", o.AddressDetails)
	populate(objectMap, "orderId", o.OrderID)
	populate(objectMap, "orderItemDetails", o.OrderItemDetails)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OrderItemProperties.
func (o *OrderItemProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "addressDetails":
			err = unpopulate(val, &o.AddressDetails)
			delete(rawMsg, key)
		case "orderId":
			err = unpopulate(val, &o.OrderID)
			delete(rawMsg, key)
		case "orderItemDetails":
			err = unpopulate(val, &o.OrderItemDetails)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemResource.
func (o OrderItemResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", o.ID)
	populate(objectMap, "location", o.Location)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "systemData", o.SystemData)
	populate(objectMap, "tags", o.Tags)
	populate(objectMap, "type", o.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemResourceList.
func (o OrderItemResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemUpdateParameter.
func (o OrderItemUpdateParameter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "tags", o.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderItemUpdateProperties.
func (o OrderItemUpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "forwardAddress", o.ForwardAddress)
	populate(objectMap, "notificationEmailList", o.NotificationEmailList)
	populate(objectMap, "preferences", o.Preferences)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderProperties.
func (o OrderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentStage", o.CurrentStage)
	populate(objectMap, "orderItemIds", o.OrderItemIDs)
	populate(objectMap, "orderStageHistory", o.OrderStageHistory)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OrderResourceList.
func (o OrderResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// GetMeterDetails implements the MeterDetailsClassification interface for type Pav2MeterDetails.
func (p *Pav2MeterDetails) GetMeterDetails() *MeterDetails {
	return &MeterDetails{
		BillingType:  p.BillingType,
		Multiplier:   p.Multiplier,
		ChargingType: p.ChargingType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type Pav2MeterDetails.
func (p Pav2MeterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["billingType"] = BillingTypePav2
	populate(objectMap, "chargingType", p.ChargingType)
	populate(objectMap, "meterGuid", p.MeterGUID)
	populate(objectMap, "multiplier", p.Multiplier)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Pav2MeterDetails.
func (p *Pav2MeterDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "billingType":
			err = unpopulate(val, &p.BillingType)
			delete(rawMsg, key)
		case "chargingType":
			err = unpopulate(val, &p.ChargingType)
			delete(rawMsg, key)
		case "meterGuid":
			err = unpopulate(val, &p.MeterGUID)
			delete(rawMsg, key)
		case "multiplier":
			err = unpopulate(val, &p.Multiplier)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Preferences.
func (p Preferences) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "encryptionPreferences", p.EncryptionPreferences)
	populate(objectMap, "managementResourcePreferences", p.ManagementResourcePreferences)
	populate(objectMap, "notificationPreferences", p.NotificationPreferences)
	populate(objectMap, "transportPreferences", p.TransportPreferences)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductDetails.
func (p ProductDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "count", p.Count)
	populate(objectMap, "deviceDetails", p.DeviceDetails)
	populate(objectMap, "displayInfo", p.DisplayInfo)
	populate(objectMap, "hierarchyInformation", p.HierarchyInformation)
	populate(objectMap, "productDoubleEncryptionStatus", p.ProductDoubleEncryptionStatus)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductFamilies.
func (p ProductFamilies) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductFamiliesMetadata.
func (p ProductFamiliesMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductFamiliesRequest.
func (p ProductFamiliesRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customerSubscriptionDetails", p.CustomerSubscriptionDetails)
	populate(objectMap, "filterableProperties", p.FilterableProperties)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductFamilyProperties.
func (p ProductFamilyProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", p.AvailabilityInformation)
	populate(objectMap, "costInformation", p.CostInformation)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "filterableProperties", p.FilterableProperties)
	populate(objectMap, "hierarchyInformation", p.HierarchyInformation)
	populate(objectMap, "imageInformation", p.ImageInformation)
	populate(objectMap, "productLines", p.ProductLines)
	populate(objectMap, "resourceProviderDetails", p.ResourceProviderDetails)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductLineProperties.
func (p ProductLineProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", p.AvailabilityInformation)
	populate(objectMap, "costInformation", p.CostInformation)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "filterableProperties", p.FilterableProperties)
	populate(objectMap, "hierarchyInformation", p.HierarchyInformation)
	populate(objectMap, "imageInformation", p.ImageInformation)
	populate(objectMap, "products", p.Products)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProductProperties.
func (p ProductProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityInformation", p.AvailabilityInformation)
	populate(objectMap, "configurations", p.Configurations)
	populate(objectMap, "costInformation", p.CostInformation)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "displayName", p.DisplayName)
	populate(objectMap, "filterableProperties", p.FilterableProperties)
	populate(objectMap, "hierarchyInformation", p.HierarchyInformation)
	populate(objectMap, "imageInformation", p.ImageInformation)
	return json.Marshal(objectMap)
}

// GetMeterDetails implements the MeterDetailsClassification interface for type PurchaseMeterDetails.
func (p *PurchaseMeterDetails) GetMeterDetails() *MeterDetails {
	return &MeterDetails{
		BillingType:  p.BillingType,
		Multiplier:   p.Multiplier,
		ChargingType: p.ChargingType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PurchaseMeterDetails.
func (p PurchaseMeterDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["billingType"] = BillingTypePurchase
	populate(objectMap, "chargingType", p.ChargingType)
	populate(objectMap, "multiplier", p.Multiplier)
	populate(objectMap, "productId", p.ProductID)
	populate(objectMap, "skuId", p.SKUID)
	populate(objectMap, "termId", p.TermID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PurchaseMeterDetails.
func (p *PurchaseMeterDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "billingType":
			err = unpopulate(val, &p.BillingType)
			delete(rawMsg, key)
		case "chargingType":
			err = unpopulate(val, &p.ChargingType)
			delete(rawMsg, key)
		case "multiplier":
			err = unpopulate(val, &p.Multiplier)
			delete(rawMsg, key)
		case "productId":
			err = unpopulate(val, &p.ProductID)
			delete(rawMsg, key)
		case "skuId":
			err = unpopulate(val, &p.SKUID)
			delete(rawMsg, key)
		case "termId":
			err = unpopulate(val, &p.TermID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type StageDetails.
func (s StageDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "stageName", s.StageName)
	populate(objectMap, "stageStatus", s.StageStatus)
	populateTimeRFC3339(objectMap, "startTime", s.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StageDetails.
func (s *StageDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "displayName":
			err = unpopulate(val, &s.DisplayName)
			delete(rawMsg, key)
		case "stageName":
			err = unpopulate(val, &s.StageName)
			delete(rawMsg, key)
		case "stageStatus":
			err = unpopulate(val, &s.StageStatus)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &s.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
