//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorder

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AddressResourceList.NextLink == nil || len(*p.current.AddressResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAddressesAtResourceGroupLevelHandleError(resp)
		return false
	}
	result, err := p.client.listAddressesAtResourceGroupLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse page.
func (p *EdgeOrderManagementClientListAddressesAtResourceGroupLevelPager) PageResponse() EdgeOrderManagementClientListAddressesAtResourceGroupLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AddressResourceList.NextLink == nil || len(*p.current.AddressResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAddressesAtSubscriptionLevelHandleError(resp)
		return false
	}
	result, err := p.client.listAddressesAtSubscriptionLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse page.
func (p *EdgeOrderManagementClientListAddressesAtSubscriptionLevelPager) PageResponse() EdgeOrderManagementClientListAddressesAtSubscriptionLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListConfigurationsPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListConfigurationsPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListConfigurationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListConfigurationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListConfigurationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListConfigurationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.Configurations.NextLink == nil || len(*p.current.Configurations.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listConfigurationsHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListConfigurationsResponse page.
func (p *EdgeOrderManagementClientListConfigurationsPager) PageResponse() EdgeOrderManagementClientListConfigurationsResponse {
	return p.current
}

// EdgeOrderManagementClientListOperationsPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListOperationsPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListOperationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListOperationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListOperationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListOperationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListOperationsResponse page.
func (p *EdgeOrderManagementClientListOperationsPager) PageResponse() EdgeOrderManagementClientListOperationsResponse {
	return p.current
}

// EdgeOrderManagementClientListOrderAtResourceGroupLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListOrderAtResourceGroupLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListOrderAtResourceGroupLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListOrderAtResourceGroupLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderResourceList.NextLink == nil || len(*p.current.OrderResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOrderAtResourceGroupLevelHandleError(resp)
		return false
	}
	result, err := p.client.listOrderAtResourceGroupLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse page.
func (p *EdgeOrderManagementClientListOrderAtResourceGroupLevelPager) PageResponse() EdgeOrderManagementClientListOrderAtResourceGroupLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListOrderAtSubscriptionLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListOrderAtSubscriptionLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListOrderAtSubscriptionLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListOrderAtSubscriptionLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderResourceList.NextLink == nil || len(*p.current.OrderResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOrderAtSubscriptionLevelHandleError(resp)
		return false
	}
	result, err := p.client.listOrderAtSubscriptionLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse page.
func (p *EdgeOrderManagementClientListOrderAtSubscriptionLevelPager) PageResponse() EdgeOrderManagementClientListOrderAtSubscriptionLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderItemResourceList.NextLink == nil || len(*p.current.OrderItemResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOrderItemsAtResourceGroupLevelHandleError(resp)
		return false
	}
	result, err := p.client.listOrderItemsAtResourceGroupLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse page.
func (p *EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelPager) PageResponse() EdgeOrderManagementClientListOrderItemsAtResourceGroupLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OrderItemResourceList.NextLink == nil || len(*p.current.OrderItemResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOrderItemsAtSubscriptionLevelHandleError(resp)
		return false
	}
	result, err := p.client.listOrderItemsAtSubscriptionLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse page.
func (p *EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelPager) PageResponse() EdgeOrderManagementClientListOrderItemsAtSubscriptionLevelResponse {
	return p.current
}

// EdgeOrderManagementClientListProductFamiliesMetadataPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListProductFamiliesMetadataPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListProductFamiliesMetadataResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListProductFamiliesMetadataResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListProductFamiliesMetadataPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListProductFamiliesMetadataPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductFamiliesMetadata.NextLink == nil || len(*p.current.ProductFamiliesMetadata.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProductFamiliesMetadataHandleError(resp)
		return false
	}
	result, err := p.client.listProductFamiliesMetadataHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListProductFamiliesMetadataResponse page.
func (p *EdgeOrderManagementClientListProductFamiliesMetadataPager) PageResponse() EdgeOrderManagementClientListProductFamiliesMetadataResponse {
	return p.current
}

// EdgeOrderManagementClientListProductFamiliesPager provides operations for iterating over paged responses.
type EdgeOrderManagementClientListProductFamiliesPager struct {
	client    *EdgeOrderManagementClient
	current   EdgeOrderManagementClientListProductFamiliesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeOrderManagementClientListProductFamiliesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeOrderManagementClientListProductFamiliesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeOrderManagementClientListProductFamiliesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProductFamilies.NextLink == nil || len(*p.current.ProductFamilies.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProductFamiliesHandleError(resp)
		return false
	}
	result, err := p.client.listProductFamiliesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeOrderManagementClientListProductFamiliesResponse page.
func (p *EdgeOrderManagementClientListProductFamiliesPager) PageResponse() EdgeOrderManagementClientListProductFamiliesResponse {
	return p.current
}
