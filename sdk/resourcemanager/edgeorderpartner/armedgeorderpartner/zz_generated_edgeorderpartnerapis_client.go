//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armedgeorderpartner

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EdgeOrderPartnerAPISClient contains the methods for the EdgeOrderPartnerAPIS group.
// Don't use this type directly, use NewEdgeOrderPartnerAPISClient() instead.
type EdgeOrderPartnerAPISClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewEdgeOrderPartnerAPISClient creates a new instance of EdgeOrderPartnerAPISClient with the specified values.
func NewEdgeOrderPartnerAPISClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *EdgeOrderPartnerAPISClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &EdgeOrderPartnerAPISClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// ListOperationsPartner - This method gets all the operations that are exposed for customer.
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderPartnerAPISClient) ListOperationsPartner(options *EdgeOrderPartnerAPISListOperationsPartnerOptions) *EdgeOrderPartnerAPISListOperationsPartnerPager {
	return &EdgeOrderPartnerAPISListOperationsPartnerPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listOperationsPartnerCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderPartnerAPISListOperationsPartnerResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.OperationListResult.NextLink)
		},
	}
}

// listOperationsPartnerCreateRequest creates the ListOperationsPartner request.
func (client *EdgeOrderPartnerAPISClient) listOperationsPartnerCreateRequest(ctx context.Context, options *EdgeOrderPartnerAPISListOperationsPartnerOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.EdgeOrderPartner/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOperationsPartnerHandleResponse handles the ListOperationsPartner response.
func (client *EdgeOrderPartnerAPISClient) listOperationsPartnerHandleResponse(resp *http.Response) (EdgeOrderPartnerAPISListOperationsPartnerResponse, error) {
	result := EdgeOrderPartnerAPISListOperationsPartnerResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationListResult); err != nil {
		return EdgeOrderPartnerAPISListOperationsPartnerResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOperationsPartnerHandleError handles the ListOperationsPartner error response.
func (client *EdgeOrderPartnerAPISClient) listOperationsPartnerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginManageInventoryMetadata - API for updating inventory metadata and inventory configuration
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderPartnerAPISClient) BeginManageInventoryMetadata(ctx context.Context, familyIdentifier string, location string, serialNumber string, manageInventoryMetadataRequest ManageInventoryMetadataRequest, options *EdgeOrderPartnerAPISBeginManageInventoryMetadataOptions) (EdgeOrderPartnerAPISManageInventoryMetadataPollerResponse, error) {
	resp, err := client.manageInventoryMetadata(ctx, familyIdentifier, location, serialNumber, manageInventoryMetadataRequest, options)
	if err != nil {
		return EdgeOrderPartnerAPISManageInventoryMetadataPollerResponse{}, err
	}
	result := EdgeOrderPartnerAPISManageInventoryMetadataPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("EdgeOrderPartnerAPISClient.ManageInventoryMetadata", "", resp, client.pl, client.manageInventoryMetadataHandleError)
	if err != nil {
		return EdgeOrderPartnerAPISManageInventoryMetadataPollerResponse{}, err
	}
	result.Poller = &EdgeOrderPartnerAPISManageInventoryMetadataPoller{
		pt: pt,
	}
	return result, nil
}

// ManageInventoryMetadata - API for updating inventory metadata and inventory configuration
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderPartnerAPISClient) manageInventoryMetadata(ctx context.Context, familyIdentifier string, location string, serialNumber string, manageInventoryMetadataRequest ManageInventoryMetadataRequest, options *EdgeOrderPartnerAPISBeginManageInventoryMetadataOptions) (*http.Response, error) {
	req, err := client.manageInventoryMetadataCreateRequest(ctx, familyIdentifier, location, serialNumber, manageInventoryMetadataRequest, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.manageInventoryMetadataHandleError(resp)
	}
	return resp, nil
}

// manageInventoryMetadataCreateRequest creates the ManageInventoryMetadata request.
func (client *EdgeOrderPartnerAPISClient) manageInventoryMetadataCreateRequest(ctx context.Context, familyIdentifier string, location string, serialNumber string, manageInventoryMetadataRequest ManageInventoryMetadataRequest, options *EdgeOrderPartnerAPISBeginManageInventoryMetadataOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrderPartner/locations/{location}/productFamilies/{familyIdentifier}/inventories/{serialNumber}/manageInventoryMetadata"
	if familyIdentifier == "" {
		return nil, errors.New("parameter familyIdentifier cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{familyIdentifier}", url.PathEscape(familyIdentifier))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, manageInventoryMetadataRequest)
}

// manageInventoryMetadataHandleError handles the ManageInventoryMetadata error response.
func (client *EdgeOrderPartnerAPISClient) manageInventoryMetadataHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ManageLink - API for linking management resource with inventory
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderPartnerAPISClient) ManageLink(ctx context.Context, familyIdentifier string, location string, serialNumber string, manageLinkRequest ManageLinkRequest, options *EdgeOrderPartnerAPISManageLinkOptions) (EdgeOrderPartnerAPISManageLinkResponse, error) {
	req, err := client.manageLinkCreateRequest(ctx, familyIdentifier, location, serialNumber, manageLinkRequest, options)
	if err != nil {
		return EdgeOrderPartnerAPISManageLinkResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EdgeOrderPartnerAPISManageLinkResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return EdgeOrderPartnerAPISManageLinkResponse{}, client.manageLinkHandleError(resp)
	}
	return EdgeOrderPartnerAPISManageLinkResponse{RawResponse: resp}, nil
}

// manageLinkCreateRequest creates the ManageLink request.
func (client *EdgeOrderPartnerAPISClient) manageLinkCreateRequest(ctx context.Context, familyIdentifier string, location string, serialNumber string, manageLinkRequest ManageLinkRequest, options *EdgeOrderPartnerAPISManageLinkOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrderPartner/locations/{location}/productFamilies/{familyIdentifier}/inventories/{serialNumber}/manageLink"
	if familyIdentifier == "" {
		return nil, errors.New("parameter familyIdentifier cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{familyIdentifier}", url.PathEscape(familyIdentifier))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if serialNumber == "" {
		return nil, errors.New("parameter serialNumber cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialNumber}", url.PathEscape(serialNumber))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, manageLinkRequest)
}

// manageLinkHandleError handles the ManageLink error response.
func (client *EdgeOrderPartnerAPISClient) manageLinkHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// SearchInventories - API for Search inventories
// If the operation fails it returns the *ErrorResponse error type.
func (client *EdgeOrderPartnerAPISClient) SearchInventories(searchInventoriesRequest SearchInventoriesRequest, options *EdgeOrderPartnerAPISSearchInventoriesOptions) *EdgeOrderPartnerAPISSearchInventoriesPager {
	return &EdgeOrderPartnerAPISSearchInventoriesPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.searchInventoriesCreateRequest(ctx, searchInventoriesRequest, options)
		},
		advancer: func(ctx context.Context, resp EdgeOrderPartnerAPISSearchInventoriesResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PartnerInventoryList.NextLink)
		},
	}
}

// searchInventoriesCreateRequest creates the SearchInventories request.
func (client *EdgeOrderPartnerAPISClient) searchInventoriesCreateRequest(ctx context.Context, searchInventoriesRequest SearchInventoriesRequest, options *EdgeOrderPartnerAPISSearchInventoriesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.EdgeOrderPartner/searchInventories"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, searchInventoriesRequest)
}

// searchInventoriesHandleResponse handles the SearchInventories response.
func (client *EdgeOrderPartnerAPISClient) searchInventoriesHandleResponse(resp *http.Response) (EdgeOrderPartnerAPISSearchInventoriesResponse, error) {
	result := EdgeOrderPartnerAPISSearchInventoriesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PartnerInventoryList); err != nil {
		return EdgeOrderPartnerAPISSearchInventoriesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// searchInventoriesHandleError handles the SearchInventories error response.
func (client *EdgeOrderPartnerAPISClient) searchInventoriesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
