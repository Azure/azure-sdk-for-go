//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeducation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// GetClient contains the methods for the Get group.
// Don't use this type directly, use NewGetClient() instead.
type GetClient struct {
	host string
	pl   runtime.Pipeline
}

// NewGetClient creates a new instance of GetClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewGetClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*GetClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublicCloud.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &GetClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Grant - Get details for a specific grant linked to the provided billing account and billing profile.
// If the operation fails it returns an *azcore.ResponseError type.
// billingAccountName - Billing account name.
// billingProfileName - Billing profile name.
// options - GetClientGrantOptions contains the optional parameters for the GetClient.Grant method.
func (client *GetClient) Grant(ctx context.Context, billingAccountName string, billingProfileName string, options *GetClientGrantOptions) (GetClientGrantResponse, error) {
	req, err := client.grantCreateRequest(ctx, billingAccountName, billingProfileName, options)
	if err != nil {
		return GetClientGrantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GetClientGrantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GetClientGrantResponse{}, runtime.NewResponseError(resp)
	}
	return client.grantHandleResponse(resp)
}

// grantCreateRequest creates the Grant request.
func (client *GetClient) grantCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, options *GetClientGrantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/grants/default"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.IncludeAllocatedBudget != nil {
		reqQP.Set("includeAllocatedBudget", strconv.FormatBool(*options.IncludeAllocatedBudget))
	}
	reqQP.Set("api-version", "2021-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// grantHandleResponse handles the Grant response.
func (client *GetClient) grantHandleResponse(resp *http.Response) (GetClientGrantResponse, error) {
	result := GetClientGrantResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GrantDetails); err != nil {
		return GetClientGrantResponse{}, err
	}
	return result, nil
}

// Lab - Get the details for a specific lab associated with the provided billing account name, billing profile name, and invoice
// section name.
// If the operation fails it returns an *azcore.ResponseError type.
// billingAccountName - Billing account name.
// billingProfileName - Billing profile name.
// invoiceSectionName - Invoice section name.
// options - GetClientLabOptions contains the optional parameters for the GetClient.Lab method.
func (client *GetClient) Lab(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, options *GetClientLabOptions) (GetClientLabResponse, error) {
	req, err := client.labCreateRequest(ctx, billingAccountName, billingProfileName, invoiceSectionName, options)
	if err != nil {
		return GetClientLabResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GetClientLabResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GetClientLabResponse{}, runtime.NewResponseError(resp)
	}
	return client.labHandleResponse(resp)
}

// labCreateRequest creates the Lab request.
func (client *GetClient) labCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, options *GetClientLabOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	if invoiceSectionName == "" {
		return nil, errors.New("parameter invoiceSectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSectionName}", url.PathEscape(invoiceSectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.IncludeBudget != nil {
		reqQP.Set("includeBudget", strconv.FormatBool(*options.IncludeBudget))
	}
	reqQP.Set("api-version", "2021-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// labHandleResponse handles the Lab response.
func (client *GetClient) labHandleResponse(resp *http.Response) (GetClientLabResponse, error) {
	result := GetClientLabResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LabDetails); err != nil {
		return GetClientLabResponse{}, err
	}
	return result, nil
}

// Student - Get the details for a specific student in the specified lab by student alias
// If the operation fails it returns an *azcore.ResponseError type.
// billingAccountName - Billing account name.
// billingProfileName - Billing profile name.
// invoiceSectionName - Invoice section name.
// studentAlias - Student alias.
// options - GetClientStudentOptions contains the optional parameters for the GetClient.Student method.
func (client *GetClient) Student(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, studentAlias string, options *GetClientStudentOptions) (GetClientStudentResponse, error) {
	req, err := client.studentCreateRequest(ctx, billingAccountName, billingProfileName, invoiceSectionName, studentAlias, options)
	if err != nil {
		return GetClientStudentResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GetClientStudentResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GetClientStudentResponse{}, runtime.NewResponseError(resp)
	}
	return client.studentHandleResponse(resp)
}

// studentCreateRequest creates the Student request.
func (client *GetClient) studentCreateRequest(ctx context.Context, billingAccountName string, billingProfileName string, invoiceSectionName string, studentAlias string, options *GetClientStudentOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students/{studentAlias}"
	if billingAccountName == "" {
		return nil, errors.New("parameter billingAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingAccountName}", url.PathEscape(billingAccountName))
	if billingProfileName == "" {
		return nil, errors.New("parameter billingProfileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{billingProfileName}", url.PathEscape(billingProfileName))
	if invoiceSectionName == "" {
		return nil, errors.New("parameter invoiceSectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{invoiceSectionName}", url.PathEscape(invoiceSectionName))
	if studentAlias == "" {
		return nil, errors.New("parameter studentAlias cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{studentAlias}", url.PathEscape(studentAlias))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// studentHandleResponse handles the Student response.
func (client *GetClient) studentHandleResponse(resp *http.Response) (GetClientStudentResponse, error) {
	result := GetClientStudentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StudentDetails); err != nil {
		return GetClientStudentResponse{}, err
	}
	return result, nil
}

// StudentLab - Get the details for a specified lab associated with the student lab.
// If the operation fails it returns an *azcore.ResponseError type.
// studentLabName - Student lab name.
// options - GetClientStudentLabOptions contains the optional parameters for the GetClient.StudentLab method.
func (client *GetClient) StudentLab(ctx context.Context, studentLabName string, options *GetClientStudentLabOptions) (GetClientStudentLabResponse, error) {
	req, err := client.studentLabCreateRequest(ctx, studentLabName, options)
	if err != nil {
		return GetClientStudentLabResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return GetClientStudentLabResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return GetClientStudentLabResponse{}, runtime.NewResponseError(resp)
	}
	return client.studentLabHandleResponse(resp)
}

// studentLabCreateRequest creates the StudentLab request.
func (client *GetClient) studentLabCreateRequest(ctx context.Context, studentLabName string, options *GetClientStudentLabOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Education/studentLabs/{studentLabName}"
	if studentLabName == "" {
		return nil, errors.New("parameter studentLabName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{studentLabName}", url.PathEscape(studentLabName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// studentLabHandleResponse handles the StudentLab response.
func (client *GetClient) studentLabHandleResponse(resp *http.Response) (GetClientStudentLabResponse, error) {
	result := GetClientStudentLabResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StudentLabDetails); err != nil {
		return GetClientStudentLabResponse{}, err
	}
	return result, nil
}
