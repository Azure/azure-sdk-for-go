//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeducation

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// RedeemClient contains the methods for the Redeem group.
// Don't use this type directly, use NewRedeemClient() instead.
type RedeemClient struct {
	host string
	pl   runtime.Pipeline
}

// NewRedeemClient creates a new instance of RedeemClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewRedeemClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*RedeemClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublicCloud.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RedeemClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// Invite - Redeem invite code to join a redeemable lab
// If the operation fails it returns an *azcore.ResponseError type.
// parameters - Request parameters to provide redeem code.
// options - RedeemClientInviteOptions contains the optional parameters for the RedeemClient.Invite method.
func (client *RedeemClient) Invite(ctx context.Context, parameters RedeemRequest, options *RedeemClientInviteOptions) (RedeemClientInviteResponse, error) {
	req, err := client.inviteCreateRequest(ctx, parameters, options)
	if err != nil {
		return RedeemClientInviteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RedeemClientInviteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RedeemClientInviteResponse{}, runtime.NewResponseError(resp)
	}
	return RedeemClientInviteResponse{}, nil
}

// inviteCreateRequest creates the Invite request.
func (client *RedeemClient) inviteCreateRequest(ctx context.Context, parameters RedeemRequest, options *RedeemClientInviteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Education/redeemInvitationCode"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}
