// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
// is regenerated.
// Code generated by @autorest/go. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/elastic/armelastic/v2"
	"net/http"
	"net/url"
	"regexp"
)

// DetachTrafficFilterServer is a fake server for instances of the armelastic.DetachTrafficFilterClient type.
type DetachTrafficFilterServer struct {
	// BeginUpdate is the fake for method DetachTrafficFilterClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUpdate func(ctx context.Context, resourceGroupName string, monitorName string, options *armelastic.DetachTrafficFilterClientBeginUpdateOptions) (resp azfake.PollerResponder[armelastic.DetachTrafficFilterClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewDetachTrafficFilterServerTransport creates a new instance of DetachTrafficFilterServerTransport with the provided implementation.
// The returned DetachTrafficFilterServerTransport instance is connected to an instance of armelastic.DetachTrafficFilterClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDetachTrafficFilterServerTransport(srv *DetachTrafficFilterServer) *DetachTrafficFilterServerTransport {
	return &DetachTrafficFilterServerTransport{
		srv:         srv,
		beginUpdate: newTracker[azfake.PollerResponder[armelastic.DetachTrafficFilterClientUpdateResponse]](),
	}
}

// DetachTrafficFilterServerTransport connects instances of armelastic.DetachTrafficFilterClient to instances of DetachTrafficFilterServer.
// Don't use this type directly, use NewDetachTrafficFilterServerTransport instead.
type DetachTrafficFilterServerTransport struct {
	srv         *DetachTrafficFilterServer
	beginUpdate *tracker[azfake.PollerResponder[armelastic.DetachTrafficFilterClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for DetachTrafficFilterServerTransport.
func (d *DetachTrafficFilterServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DetachTrafficFilterServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if detachTrafficFilterServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = detachTrafficFilterServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DetachTrafficFilterClient.BeginUpdate":
				res.resp, res.err = d.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DetachTrafficFilterServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := d.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Elastic/monitors/(?P<monitorName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/detachTrafficFilter`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		monitorNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("monitorName")])
		if err != nil {
			return nil, err
		}
		rulesetIDUnescaped, err := url.QueryUnescape(qp.Get("rulesetId"))
		if err != nil {
			return nil, err
		}
		rulesetIDParam := getOptional(rulesetIDUnescaped)
		var options *armelastic.DetachTrafficFilterClientBeginUpdateOptions
		if rulesetIDParam != nil {
			options = &armelastic.DetachTrafficFilterClientBeginUpdateOptions{
				RulesetID: rulesetIDParam,
			}
		}
		respr, errRespr := d.srv.BeginUpdate(req.Context(), resourceGroupNameParam, monitorNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		d.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		d.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to DetachTrafficFilterServerTransport
var detachTrafficFilterServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
