//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

// CaCertificatesClientBeginCreateOrUpdateOptions contains the optional parameters for the CaCertificatesClient.BeginCreateOrUpdate
// method.
type CaCertificatesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// CaCertificatesClientBeginDeleteOptions contains the optional parameters for the CaCertificatesClient.BeginDelete method.
type CaCertificatesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// CaCertificatesClientGetOptions contains the optional parameters for the CaCertificatesClient.Get method.
type CaCertificatesClientGetOptions struct {
	// placeholder for future optional parameters
}

// CaCertificatesClientListByNamespaceOptions contains the optional parameters for the CaCertificatesClient.NewListByNamespacePager
// method.
type CaCertificatesClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// ChannelsClientBeginDeleteOptions contains the optional parameters for the ChannelsClient.BeginDelete method.
type ChannelsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ChannelsClientCreateOrUpdateOptions contains the optional parameters for the ChannelsClient.CreateOrUpdate method.
type ChannelsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ChannelsClientGetFullURLOptions contains the optional parameters for the ChannelsClient.GetFullURL method.
type ChannelsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// ChannelsClientGetOptions contains the optional parameters for the ChannelsClient.Get method.
type ChannelsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ChannelsClientListByPartnerNamespaceOptions contains the optional parameters for the ChannelsClient.NewListByPartnerNamespacePager
// method.
type ChannelsClientListByPartnerNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// ChannelsClientUpdateOptions contains the optional parameters for the ChannelsClient.Update method.
type ChannelsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// ClientGroupsClientBeginCreateOrUpdateOptions contains the optional parameters for the ClientGroupsClient.BeginCreateOrUpdate
// method.
type ClientGroupsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientGroupsClientBeginDeleteOptions contains the optional parameters for the ClientGroupsClient.BeginDelete method.
type ClientGroupsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientGroupsClientGetOptions contains the optional parameters for the ClientGroupsClient.Get method.
type ClientGroupsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ClientGroupsClientListByNamespaceOptions contains the optional parameters for the ClientGroupsClient.NewListByNamespacePager
// method.
type ClientGroupsClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// ClientsClientBeginCreateOrUpdateOptions contains the optional parameters for the ClientsClient.BeginCreateOrUpdate method.
type ClientsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientsClientBeginDeleteOptions contains the optional parameters for the ClientsClient.BeginDelete method.
type ClientsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ClientsClientGetOptions contains the optional parameters for the ClientsClient.Get method.
type ClientsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ClientsClientListByNamespaceOptions contains the optional parameters for the ClientsClient.NewListByNamespacePager method.
type ClientsClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the DomainEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type DomainEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the DomainEventSubscriptionsClient.BeginDelete
// method.
type DomainEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the DomainEventSubscriptionsClient.BeginUpdate
// method.
type DomainEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the DomainEventSubscriptionsClient.GetDeliveryAttributes
// method.
type DomainEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// DomainEventSubscriptionsClientGetFullURLOptions contains the optional parameters for the DomainEventSubscriptionsClient.GetFullURL
// method.
type DomainEventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// DomainEventSubscriptionsClientGetOptions contains the optional parameters for the DomainEventSubscriptionsClient.Get method.
type DomainEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DomainEventSubscriptionsClientListOptions contains the optional parameters for the DomainEventSubscriptionsClient.NewListPager
// method.
type DomainEventSubscriptionsClientListOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainTopicEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type DomainTopicEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainTopicEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.BeginDelete
// method.
type DomainTopicEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainTopicEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.BeginUpdate
// method.
type DomainTopicEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainTopicEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.GetDeliveryAttributes
// method.
type DomainTopicEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// DomainTopicEventSubscriptionsClientGetFullURLOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.GetFullURL
// method.
type DomainTopicEventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// DomainTopicEventSubscriptionsClientGetOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.Get
// method.
type DomainTopicEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DomainTopicEventSubscriptionsClientListOptions contains the optional parameters for the DomainTopicEventSubscriptionsClient.NewListPager
// method.
type DomainTopicEventSubscriptionsClientListOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainTopicsClientBeginCreateOrUpdateOptions contains the optional parameters for the DomainTopicsClient.BeginCreateOrUpdate
// method.
type DomainTopicsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainTopicsClientBeginDeleteOptions contains the optional parameters for the DomainTopicsClient.BeginDelete method.
type DomainTopicsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainTopicsClientGetOptions contains the optional parameters for the DomainTopicsClient.Get method.
type DomainTopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DomainTopicsClientListByDomainOptions contains the optional parameters for the DomainTopicsClient.NewListByDomainPager
// method.
type DomainTopicsClientListByDomainOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainsClientBeginCreateOrUpdateOptions contains the optional parameters for the DomainsClient.BeginCreateOrUpdate method.
type DomainsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainsClientBeginDeleteOptions contains the optional parameters for the DomainsClient.BeginDelete method.
type DomainsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainsClientBeginUpdateOptions contains the optional parameters for the DomainsClient.BeginUpdate method.
type DomainsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DomainsClientGetOptions contains the optional parameters for the DomainsClient.Get method.
type DomainsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DomainsClientListByResourceGroupOptions contains the optional parameters for the DomainsClient.NewListByResourceGroupPager
// method.
type DomainsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainsClientListBySubscriptionOptions contains the optional parameters for the DomainsClient.NewListBySubscriptionPager
// method.
type DomainsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// DomainsClientListSharedAccessKeysOptions contains the optional parameters for the DomainsClient.ListSharedAccessKeys method.
type DomainsClientListSharedAccessKeysOptions struct {
	// placeholder for future optional parameters
}

// DomainsClientRegenerateKeyOptions contains the optional parameters for the DomainsClient.RegenerateKey method.
type DomainsClientRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// EventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the EventSubscriptionsClient.BeginCreateOrUpdate
// method.
type EventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// EventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the EventSubscriptionsClient.BeginDelete
// method.
type EventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// EventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the EventSubscriptionsClient.BeginUpdate
// method.
type EventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// EventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the EventSubscriptionsClient.GetDeliveryAttributes
// method.
type EventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// EventSubscriptionsClientGetFullURLOptions contains the optional parameters for the EventSubscriptionsClient.GetFullURL
// method.
type EventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// EventSubscriptionsClientGetOptions contains the optional parameters for the EventSubscriptionsClient.Get method.
type EventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// EventSubscriptionsClientListByDomainTopicOptions contains the optional parameters for the EventSubscriptionsClient.NewListByDomainTopicPager
// method.
type EventSubscriptionsClientListByDomainTopicOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListByResourceOptions contains the optional parameters for the EventSubscriptionsClient.NewListByResourcePager
// method.
type EventSubscriptionsClientListByResourceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeOptions contains the optional parameters for the EventSubscriptionsClient.NewListGlobalByResourceGroupForTopicTypePager
// method.
type EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListGlobalByResourceGroupOptions contains the optional parameters for the EventSubscriptionsClient.NewListGlobalByResourceGroupPager
// method.
type EventSubscriptionsClientListGlobalByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeOptions contains the optional parameters for the EventSubscriptionsClient.NewListGlobalBySubscriptionForTopicTypePager
// method.
type EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListGlobalBySubscriptionOptions contains the optional parameters for the EventSubscriptionsClient.NewListGlobalBySubscriptionPager
// method.
type EventSubscriptionsClientListGlobalBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeOptions contains the optional parameters for the EventSubscriptionsClient.NewListRegionalByResourceGroupForTopicTypePager
// method.
type EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListRegionalByResourceGroupOptions contains the optional parameters for the EventSubscriptionsClient.NewListRegionalByResourceGroupPager
// method.
type EventSubscriptionsClientListRegionalByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeOptions contains the optional parameters for the EventSubscriptionsClient.NewListRegionalBySubscriptionForTopicTypePager
// method.
type EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// EventSubscriptionsClientListRegionalBySubscriptionOptions contains the optional parameters for the EventSubscriptionsClient.NewListRegionalBySubscriptionPager
// method.
type EventSubscriptionsClientListRegionalBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// ExtensionTopicsClientGetOptions contains the optional parameters for the ExtensionTopicsClient.Get method.
type ExtensionTopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NamespaceTopicEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type NamespaceTopicEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.BeginDelete
// method.
type NamespaceTopicEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.BeginUpdate
// method.
type NamespaceTopicEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.GetDeliveryAttributes
// method.
type NamespaceTopicEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// NamespaceTopicEventSubscriptionsClientGetOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.Get
// method.
type NamespaceTopicEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NamespaceTopicEventSubscriptionsClientListByNamespaceTopicOptions contains the optional parameters for the NamespaceTopicEventSubscriptionsClient.NewListByNamespaceTopicPager
// method.
type NamespaceTopicEventSubscriptionsClientListByNamespaceTopicOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// NamespaceTopicsClientBeginCreateOrUpdateOptions contains the optional parameters for the NamespaceTopicsClient.BeginCreateOrUpdate
// method.
type NamespaceTopicsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicsClientBeginDeleteOptions contains the optional parameters for the NamespaceTopicsClient.BeginDelete method.
type NamespaceTopicsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicsClientBeginRegenerateKeyOptions contains the optional parameters for the NamespaceTopicsClient.BeginRegenerateKey
// method.
type NamespaceTopicsClientBeginRegenerateKeyOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicsClientBeginUpdateOptions contains the optional parameters for the NamespaceTopicsClient.BeginUpdate method.
type NamespaceTopicsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespaceTopicsClientGetOptions contains the optional parameters for the NamespaceTopicsClient.Get method.
type NamespaceTopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NamespaceTopicsClientListByNamespaceOptions contains the optional parameters for the NamespaceTopicsClient.NewListByNamespacePager
// method.
type NamespaceTopicsClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// NamespaceTopicsClientListSharedAccessKeysOptions contains the optional parameters for the NamespaceTopicsClient.ListSharedAccessKeys
// method.
type NamespaceTopicsClientListSharedAccessKeysOptions struct {
	// placeholder for future optional parameters
}

// NamespacesClientBeginCreateOrUpdateOptions contains the optional parameters for the NamespacesClient.BeginCreateOrUpdate
// method.
type NamespacesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespacesClientBeginDeleteOptions contains the optional parameters for the NamespacesClient.BeginDelete method.
type NamespacesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespacesClientBeginRegenerateKeyOptions contains the optional parameters for the NamespacesClient.BeginRegenerateKey
// method.
type NamespacesClientBeginRegenerateKeyOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespacesClientBeginUpdateOptions contains the optional parameters for the NamespacesClient.BeginUpdate method.
type NamespacesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NamespacesClientGetOptions contains the optional parameters for the NamespacesClient.Get method.
type NamespacesClientGetOptions struct {
	// placeholder for future optional parameters
}

// NamespacesClientListByResourceGroupOptions contains the optional parameters for the NamespacesClient.NewListByResourceGroupPager
// method.
type NamespacesClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// NamespacesClientListBySubscriptionOptions contains the optional parameters for the NamespacesClient.NewListBySubscriptionPager
// method.
type NamespacesClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// NamespacesClientListSharedAccessKeysOptions contains the optional parameters for the NamespacesClient.ListSharedAccessKeys
// method.
type NamespacesClientListSharedAccessKeysOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityPerimeterConfigurationsClientBeginReconcileOptions contains the optional parameters for the NetworkSecurityPerimeterConfigurationsClient.BeginReconcile
// method.
type NetworkSecurityPerimeterConfigurationsClientBeginReconcileOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkSecurityPerimeterConfigurationsClientGetOptions contains the optional parameters for the NetworkSecurityPerimeterConfigurationsClient.Get
// method.
type NetworkSecurityPerimeterConfigurationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkSecurityPerimeterConfigurationsClientListOptions contains the optional parameters for the NetworkSecurityPerimeterConfigurationsClient.NewListPager
// method.
type NetworkSecurityPerimeterConfigurationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// PartnerConfigurationsClientAuthorizePartnerOptions contains the optional parameters for the PartnerConfigurationsClient.AuthorizePartner
// method.
type PartnerConfigurationsClientAuthorizePartnerOptions struct {
	// placeholder for future optional parameters
}

// PartnerConfigurationsClientBeginCreateOrUpdateOptions contains the optional parameters for the PartnerConfigurationsClient.BeginCreateOrUpdate
// method.
type PartnerConfigurationsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerConfigurationsClientBeginDeleteOptions contains the optional parameters for the PartnerConfigurationsClient.BeginDelete
// method.
type PartnerConfigurationsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerConfigurationsClientBeginUpdateOptions contains the optional parameters for the PartnerConfigurationsClient.BeginUpdate
// method.
type PartnerConfigurationsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerConfigurationsClientGetOptions contains the optional parameters for the PartnerConfigurationsClient.Get method.
type PartnerConfigurationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerConfigurationsClientListByResourceGroupOptions contains the optional parameters for the PartnerConfigurationsClient.NewListByResourceGroupPager
// method.
type PartnerConfigurationsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PartnerConfigurationsClientListBySubscriptionOptions contains the optional parameters for the PartnerConfigurationsClient.NewListBySubscriptionPager
// method.
type PartnerConfigurationsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerConfigurationsClientUnauthorizePartnerOptions contains the optional parameters for the PartnerConfigurationsClient.UnauthorizePartner
// method.
type PartnerConfigurationsClientUnauthorizePartnerOptions struct {
	// placeholder for future optional parameters
}

// PartnerDestinationsClientActivateOptions contains the optional parameters for the PartnerDestinationsClient.Activate method.
type PartnerDestinationsClientActivateOptions struct {
	// placeholder for future optional parameters
}

// PartnerDestinationsClientBeginCreateOrUpdateOptions contains the optional parameters for the PartnerDestinationsClient.BeginCreateOrUpdate
// method.
type PartnerDestinationsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerDestinationsClientBeginDeleteOptions contains the optional parameters for the PartnerDestinationsClient.BeginDelete
// method.
type PartnerDestinationsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerDestinationsClientBeginUpdateOptions contains the optional parameters for the PartnerDestinationsClient.BeginUpdate
// method.
type PartnerDestinationsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerDestinationsClientGetOptions contains the optional parameters for the PartnerDestinationsClient.Get method.
type PartnerDestinationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerDestinationsClientListByResourceGroupOptions contains the optional parameters for the PartnerDestinationsClient.NewListByResourceGroupPager
// method.
type PartnerDestinationsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerDestinationsClientListBySubscriptionOptions contains the optional parameters for the PartnerDestinationsClient.NewListBySubscriptionPager
// method.
type PartnerDestinationsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerNamespacesClientBeginCreateOrUpdateOptions contains the optional parameters for the PartnerNamespacesClient.BeginCreateOrUpdate
// method.
type PartnerNamespacesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerNamespacesClientBeginDeleteOptions contains the optional parameters for the PartnerNamespacesClient.BeginDelete
// method.
type PartnerNamespacesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerNamespacesClientBeginUpdateOptions contains the optional parameters for the PartnerNamespacesClient.BeginUpdate
// method.
type PartnerNamespacesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerNamespacesClientGetOptions contains the optional parameters for the PartnerNamespacesClient.Get method.
type PartnerNamespacesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerNamespacesClientListByResourceGroupOptions contains the optional parameters for the PartnerNamespacesClient.NewListByResourceGroupPager
// method.
type PartnerNamespacesClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerNamespacesClientListBySubscriptionOptions contains the optional parameters for the PartnerNamespacesClient.NewListBySubscriptionPager
// method.
type PartnerNamespacesClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerNamespacesClientListSharedAccessKeysOptions contains the optional parameters for the PartnerNamespacesClient.ListSharedAccessKeys
// method.
type PartnerNamespacesClientListSharedAccessKeysOptions struct {
	// placeholder for future optional parameters
}

// PartnerNamespacesClientRegenerateKeyOptions contains the optional parameters for the PartnerNamespacesClient.RegenerateKey
// method.
type PartnerNamespacesClientRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// PartnerRegistrationsClientBeginCreateOrUpdateOptions contains the optional parameters for the PartnerRegistrationsClient.BeginCreateOrUpdate
// method.
type PartnerRegistrationsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerRegistrationsClientBeginDeleteOptions contains the optional parameters for the PartnerRegistrationsClient.BeginDelete
// method.
type PartnerRegistrationsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerRegistrationsClientBeginUpdateOptions contains the optional parameters for the PartnerRegistrationsClient.BeginUpdate
// method.
type PartnerRegistrationsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerRegistrationsClientGetOptions contains the optional parameters for the PartnerRegistrationsClient.Get method.
type PartnerRegistrationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerRegistrationsClientListByResourceGroupOptions contains the optional parameters for the PartnerRegistrationsClient.NewListByResourceGroupPager
// method.
type PartnerRegistrationsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerRegistrationsClientListBySubscriptionOptions contains the optional parameters for the PartnerRegistrationsClient.NewListBySubscriptionPager
// method.
type PartnerRegistrationsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerTopicEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type PartnerTopicEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerTopicEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.BeginDelete
// method.
type PartnerTopicEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerTopicEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.BeginUpdate
// method.
type PartnerTopicEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerTopicEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.GetDeliveryAttributes
// method.
type PartnerTopicEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicEventSubscriptionsClientGetFullURLOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.GetFullURL
// method.
type PartnerTopicEventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicEventSubscriptionsClientGetOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.Get
// method.
type PartnerTopicEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicEventSubscriptionsClientListByPartnerTopicOptions contains the optional parameters for the PartnerTopicEventSubscriptionsClient.NewListByPartnerTopicPager
// method.
type PartnerTopicEventSubscriptionsClientListByPartnerTopicOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerTopicsClientActivateOptions contains the optional parameters for the PartnerTopicsClient.Activate method.
type PartnerTopicsClientActivateOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicsClientBeginDeleteOptions contains the optional parameters for the PartnerTopicsClient.BeginDelete method.
type PartnerTopicsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PartnerTopicsClientCreateOrUpdateOptions contains the optional parameters for the PartnerTopicsClient.CreateOrUpdate method.
type PartnerTopicsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicsClientDeactivateOptions contains the optional parameters for the PartnerTopicsClient.Deactivate method.
type PartnerTopicsClientDeactivateOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicsClientGetOptions contains the optional parameters for the PartnerTopicsClient.Get method.
type PartnerTopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PartnerTopicsClientListByResourceGroupOptions contains the optional parameters for the PartnerTopicsClient.NewListByResourceGroupPager
// method.
type PartnerTopicsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerTopicsClientListBySubscriptionOptions contains the optional parameters for the PartnerTopicsClient.NewListBySubscriptionPager
// method.
type PartnerTopicsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PartnerTopicsClientUpdateOptions contains the optional parameters for the PartnerTopicsClient.Update method.
type PartnerTopicsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// PermissionBindingsClientBeginCreateOrUpdateOptions contains the optional parameters for the PermissionBindingsClient.BeginCreateOrUpdate
// method.
type PermissionBindingsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PermissionBindingsClientBeginDeleteOptions contains the optional parameters for the PermissionBindingsClient.BeginDelete
// method.
type PermissionBindingsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PermissionBindingsClientGetOptions contains the optional parameters for the PermissionBindingsClient.Get method.
type PermissionBindingsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PermissionBindingsClientListByNamespaceOptions contains the optional parameters for the PermissionBindingsClient.NewListByNamespacePager
// method.
type PermissionBindingsClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PrivateEndpointConnectionsClientBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnectionsClient.BeginDelete
// method.
type PrivateEndpointConnectionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateEndpointConnectionsClientBeginUpdateOptions contains the optional parameters for the PrivateEndpointConnectionsClient.BeginUpdate
// method.
type PrivateEndpointConnectionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateEndpointConnectionsClientGetOptions contains the optional parameters for the PrivateEndpointConnectionsClient.Get
// method.
type PrivateEndpointConnectionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientListByResourceOptions contains the optional parameters for the PrivateEndpointConnectionsClient.NewListByResourcePager
// method.
type PrivateEndpointConnectionsClientListByResourceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// PrivateLinkResourcesClientGetOptions contains the optional parameters for the PrivateLinkResourcesClient.Get method.
type PrivateLinkResourcesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesClientListByResourceOptions contains the optional parameters for the PrivateLinkResourcesClient.NewListByResourcePager
// method.
type PrivateLinkResourcesClientListByResourceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// SystemTopicEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type SystemTopicEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.BeginDelete
// method.
type SystemTopicEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.BeginUpdate
// method.
type SystemTopicEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.GetDeliveryAttributes
// method.
type SystemTopicEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// SystemTopicEventSubscriptionsClientGetFullURLOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.GetFullURL
// method.
type SystemTopicEventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// SystemTopicEventSubscriptionsClientGetOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.Get
// method.
type SystemTopicEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// SystemTopicEventSubscriptionsClientListBySystemTopicOptions contains the optional parameters for the SystemTopicEventSubscriptionsClient.NewListBySystemTopicPager
// method.
type SystemTopicEventSubscriptionsClientListBySystemTopicOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// SystemTopicsClientBeginCreateOrUpdateOptions contains the optional parameters for the SystemTopicsClient.BeginCreateOrUpdate
// method.
type SystemTopicsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicsClientBeginDeleteOptions contains the optional parameters for the SystemTopicsClient.BeginDelete method.
type SystemTopicsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicsClientBeginUpdateOptions contains the optional parameters for the SystemTopicsClient.BeginUpdate method.
type SystemTopicsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// SystemTopicsClientGetOptions contains the optional parameters for the SystemTopicsClient.Get method.
type SystemTopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// SystemTopicsClientListByResourceGroupOptions contains the optional parameters for the SystemTopicsClient.NewListByResourceGroupPager
// method.
type SystemTopicsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// SystemTopicsClientListBySubscriptionOptions contains the optional parameters for the SystemTopicsClient.NewListBySubscriptionPager
// method.
type SystemTopicsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// TopicEventSubscriptionsClientBeginCreateOrUpdateOptions contains the optional parameters for the TopicEventSubscriptionsClient.BeginCreateOrUpdate
// method.
type TopicEventSubscriptionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicEventSubscriptionsClientBeginDeleteOptions contains the optional parameters for the TopicEventSubscriptionsClient.BeginDelete
// method.
type TopicEventSubscriptionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicEventSubscriptionsClientBeginUpdateOptions contains the optional parameters for the TopicEventSubscriptionsClient.BeginUpdate
// method.
type TopicEventSubscriptionsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicEventSubscriptionsClientGetDeliveryAttributesOptions contains the optional parameters for the TopicEventSubscriptionsClient.GetDeliveryAttributes
// method.
type TopicEventSubscriptionsClientGetDeliveryAttributesOptions struct {
	// placeholder for future optional parameters
}

// TopicEventSubscriptionsClientGetFullURLOptions contains the optional parameters for the TopicEventSubscriptionsClient.GetFullURL
// method.
type TopicEventSubscriptionsClientGetFullURLOptions struct {
	// placeholder for future optional parameters
}

// TopicEventSubscriptionsClientGetOptions contains the optional parameters for the TopicEventSubscriptionsClient.Get method.
type TopicEventSubscriptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// TopicEventSubscriptionsClientListOptions contains the optional parameters for the TopicEventSubscriptionsClient.NewListPager
// method.
type TopicEventSubscriptionsClientListOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// TopicSpacesClientBeginCreateOrUpdateOptions contains the optional parameters for the TopicSpacesClient.BeginCreateOrUpdate
// method.
type TopicSpacesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicSpacesClientBeginDeleteOptions contains the optional parameters for the TopicSpacesClient.BeginDelete method.
type TopicSpacesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicSpacesClientGetOptions contains the optional parameters for the TopicSpacesClient.Get method.
type TopicSpacesClientGetOptions struct {
	// placeholder for future optional parameters
}

// TopicSpacesClientListByNamespaceOptions contains the optional parameters for the TopicSpacesClient.NewListByNamespacePager
// method.
type TopicSpacesClientListByNamespaceOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// TopicTypesClientGetOptions contains the optional parameters for the TopicTypesClient.Get method.
type TopicTypesClientGetOptions struct {
	// placeholder for future optional parameters
}

// TopicTypesClientListEventTypesOptions contains the optional parameters for the TopicTypesClient.NewListEventTypesPager
// method.
type TopicTypesClientListEventTypesOptions struct {
	// placeholder for future optional parameters
}

// TopicTypesClientListOptions contains the optional parameters for the TopicTypesClient.NewListPager method.
type TopicTypesClientListOptions struct {
	// placeholder for future optional parameters
}

// TopicsClientBeginCreateOrUpdateOptions contains the optional parameters for the TopicsClient.BeginCreateOrUpdate method.
type TopicsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicsClientBeginDeleteOptions contains the optional parameters for the TopicsClient.BeginDelete method.
type TopicsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicsClientBeginRegenerateKeyOptions contains the optional parameters for the TopicsClient.BeginRegenerateKey method.
type TopicsClientBeginRegenerateKeyOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicsClientBeginUpdateOptions contains the optional parameters for the TopicsClient.BeginUpdate method.
type TopicsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// TopicsClientGetOptions contains the optional parameters for the TopicsClient.Get method.
type TopicsClientGetOptions struct {
	// placeholder for future optional parameters
}

// TopicsClientListByResourceGroupOptions contains the optional parameters for the TopicsClient.NewListByResourceGroupPager
// method.
type TopicsClientListByResourceGroupOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// TopicsClientListBySubscriptionOptions contains the optional parameters for the TopicsClient.NewListBySubscriptionPager
// method.
type TopicsClientListBySubscriptionOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}

// TopicsClientListEventTypesOptions contains the optional parameters for the TopicsClient.NewListEventTypesPager method.
type TopicsClientListEventTypesOptions struct {
	// placeholder for future optional parameters
}

// TopicsClientListSharedAccessKeysOptions contains the optional parameters for the TopicsClient.ListSharedAccessKeys method.
type TopicsClientListSharedAccessKeysOptions struct {
	// placeholder for future optional parameters
}

// VerifiedPartnersClientGetOptions contains the optional parameters for the VerifiedPartnersClient.Get method.
type VerifiedPartnersClientGetOptions struct {
	// placeholder for future optional parameters
}

// VerifiedPartnersClientListOptions contains the optional parameters for the VerifiedPartnersClient.NewListPager method.
type VerifiedPartnersClientListOptions struct {
	// The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and
	// with limited number of OData operations. These operations are: the 'contains'
	// function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic
	// operations are supported. The following is a valid filter example:
	// $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location
	// eq 'westus'.
	Filter *string

	// The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified,
	// the default number of results to be returned is 20 items per page.
	Top *int32
}
