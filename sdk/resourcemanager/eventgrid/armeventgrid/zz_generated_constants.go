//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

const (
	module  = "armeventgrid"
	version = "v0.1.0"
)

// AdvancedFilterOperatorType - The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
type AdvancedFilterOperatorType string

const (
	AdvancedFilterOperatorTypeBoolEquals                AdvancedFilterOperatorType = "BoolEquals"
	AdvancedFilterOperatorTypeIsNotNull                 AdvancedFilterOperatorType = "IsNotNull"
	AdvancedFilterOperatorTypeIsNullOrUndefined         AdvancedFilterOperatorType = "IsNullOrUndefined"
	AdvancedFilterOperatorTypeNumberGreaterThan         AdvancedFilterOperatorType = "NumberGreaterThan"
	AdvancedFilterOperatorTypeNumberGreaterThanOrEquals AdvancedFilterOperatorType = "NumberGreaterThanOrEquals"
	AdvancedFilterOperatorTypeNumberIn                  AdvancedFilterOperatorType = "NumberIn"
	AdvancedFilterOperatorTypeNumberInRange             AdvancedFilterOperatorType = "NumberInRange"
	AdvancedFilterOperatorTypeNumberLessThan            AdvancedFilterOperatorType = "NumberLessThan"
	AdvancedFilterOperatorTypeNumberLessThanOrEquals    AdvancedFilterOperatorType = "NumberLessThanOrEquals"
	AdvancedFilterOperatorTypeNumberNotIn               AdvancedFilterOperatorType = "NumberNotIn"
	AdvancedFilterOperatorTypeNumberNotInRange          AdvancedFilterOperatorType = "NumberNotInRange"
	AdvancedFilterOperatorTypeStringBeginsWith          AdvancedFilterOperatorType = "StringBeginsWith"
	AdvancedFilterOperatorTypeStringContains            AdvancedFilterOperatorType = "StringContains"
	AdvancedFilterOperatorTypeStringEndsWith            AdvancedFilterOperatorType = "StringEndsWith"
	AdvancedFilterOperatorTypeStringIn                  AdvancedFilterOperatorType = "StringIn"
	AdvancedFilterOperatorTypeStringNotBeginsWith       AdvancedFilterOperatorType = "StringNotBeginsWith"
	AdvancedFilterOperatorTypeStringNotContains         AdvancedFilterOperatorType = "StringNotContains"
	AdvancedFilterOperatorTypeStringNotEndsWith         AdvancedFilterOperatorType = "StringNotEndsWith"
	AdvancedFilterOperatorTypeStringNotIn               AdvancedFilterOperatorType = "StringNotIn"
)

// PossibleAdvancedFilterOperatorTypeValues returns the possible values for the AdvancedFilterOperatorType const type.
func PossibleAdvancedFilterOperatorTypeValues() []AdvancedFilterOperatorType {
	return []AdvancedFilterOperatorType{
		AdvancedFilterOperatorTypeBoolEquals,
		AdvancedFilterOperatorTypeIsNotNull,
		AdvancedFilterOperatorTypeIsNullOrUndefined,
		AdvancedFilterOperatorTypeNumberGreaterThan,
		AdvancedFilterOperatorTypeNumberGreaterThanOrEquals,
		AdvancedFilterOperatorTypeNumberIn,
		AdvancedFilterOperatorTypeNumberInRange,
		AdvancedFilterOperatorTypeNumberLessThan,
		AdvancedFilterOperatorTypeNumberLessThanOrEquals,
		AdvancedFilterOperatorTypeNumberNotIn,
		AdvancedFilterOperatorTypeNumberNotInRange,
		AdvancedFilterOperatorTypeStringBeginsWith,
		AdvancedFilterOperatorTypeStringContains,
		AdvancedFilterOperatorTypeStringEndsWith,
		AdvancedFilterOperatorTypeStringIn,
		AdvancedFilterOperatorTypeStringNotBeginsWith,
		AdvancedFilterOperatorTypeStringNotContains,
		AdvancedFilterOperatorTypeStringNotEndsWith,
		AdvancedFilterOperatorTypeStringNotIn,
	}
}

// ToPtr returns a *AdvancedFilterOperatorType pointing to the current value.
func (c AdvancedFilterOperatorType) ToPtr() *AdvancedFilterOperatorType {
	return &c
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// DeadLetterEndPointType - Type of the endpoint for the dead letter destination
type DeadLetterEndPointType string

const (
	DeadLetterEndPointTypeStorageBlob DeadLetterEndPointType = "StorageBlob"
)

// PossibleDeadLetterEndPointTypeValues returns the possible values for the DeadLetterEndPointType const type.
func PossibleDeadLetterEndPointTypeValues() []DeadLetterEndPointType {
	return []DeadLetterEndPointType{
		DeadLetterEndPointTypeStorageBlob,
	}
}

// ToPtr returns a *DeadLetterEndPointType pointing to the current value.
func (c DeadLetterEndPointType) ToPtr() *DeadLetterEndPointType {
	return &c
}

// DeliveryAttributeMappingType - Type of the delivery attribute or header name.
type DeliveryAttributeMappingType string

const (
	DeliveryAttributeMappingTypeDynamic DeliveryAttributeMappingType = "Dynamic"
	DeliveryAttributeMappingTypeStatic  DeliveryAttributeMappingType = "Static"
)

// PossibleDeliveryAttributeMappingTypeValues returns the possible values for the DeliveryAttributeMappingType const type.
func PossibleDeliveryAttributeMappingTypeValues() []DeliveryAttributeMappingType {
	return []DeliveryAttributeMappingType{
		DeliveryAttributeMappingTypeDynamic,
		DeliveryAttributeMappingTypeStatic,
	}
}

// ToPtr returns a *DeliveryAttributeMappingType pointing to the current value.
func (c DeliveryAttributeMappingType) ToPtr() *DeliveryAttributeMappingType {
	return &c
}

// DomainProvisioningState - Provisioning state of the Event Grid Domain Resource.
type DomainProvisioningState string

const (
	DomainProvisioningStateCanceled  DomainProvisioningState = "Canceled"
	DomainProvisioningStateCreating  DomainProvisioningState = "Creating"
	DomainProvisioningStateDeleting  DomainProvisioningState = "Deleting"
	DomainProvisioningStateFailed    DomainProvisioningState = "Failed"
	DomainProvisioningStateSucceeded DomainProvisioningState = "Succeeded"
	DomainProvisioningStateUpdating  DomainProvisioningState = "Updating"
)

// PossibleDomainProvisioningStateValues returns the possible values for the DomainProvisioningState const type.
func PossibleDomainProvisioningStateValues() []DomainProvisioningState {
	return []DomainProvisioningState{
		DomainProvisioningStateCanceled,
		DomainProvisioningStateCreating,
		DomainProvisioningStateDeleting,
		DomainProvisioningStateFailed,
		DomainProvisioningStateSucceeded,
		DomainProvisioningStateUpdating,
	}
}

// ToPtr returns a *DomainProvisioningState pointing to the current value.
func (c DomainProvisioningState) ToPtr() *DomainProvisioningState {
	return &c
}

// DomainTopicProvisioningState - Provisioning state of the domain topic.
type DomainTopicProvisioningState string

const (
	DomainTopicProvisioningStateCanceled  DomainTopicProvisioningState = "Canceled"
	DomainTopicProvisioningStateCreating  DomainTopicProvisioningState = "Creating"
	DomainTopicProvisioningStateDeleting  DomainTopicProvisioningState = "Deleting"
	DomainTopicProvisioningStateFailed    DomainTopicProvisioningState = "Failed"
	DomainTopicProvisioningStateSucceeded DomainTopicProvisioningState = "Succeeded"
	DomainTopicProvisioningStateUpdating  DomainTopicProvisioningState = "Updating"
)

// PossibleDomainTopicProvisioningStateValues returns the possible values for the DomainTopicProvisioningState const type.
func PossibleDomainTopicProvisioningStateValues() []DomainTopicProvisioningState {
	return []DomainTopicProvisioningState{
		DomainTopicProvisioningStateCanceled,
		DomainTopicProvisioningStateCreating,
		DomainTopicProvisioningStateDeleting,
		DomainTopicProvisioningStateFailed,
		DomainTopicProvisioningStateSucceeded,
		DomainTopicProvisioningStateUpdating,
	}
}

// ToPtr returns a *DomainTopicProvisioningState pointing to the current value.
func (c DomainTopicProvisioningState) ToPtr() *DomainTopicProvisioningState {
	return &c
}

// EndpointType - Type of the endpoint for the event subscription destination.
type EndpointType string

const (
	EndpointTypeAzureFunction    EndpointType = "AzureFunction"
	EndpointTypeEventHub         EndpointType = "EventHub"
	EndpointTypeHybridConnection EndpointType = "HybridConnection"
	EndpointTypeServiceBusQueue  EndpointType = "ServiceBusQueue"
	EndpointTypeServiceBusTopic  EndpointType = "ServiceBusTopic"
	EndpointTypeStorageQueue     EndpointType = "StorageQueue"
	EndpointTypeWebHook          EndpointType = "WebHook"
)

// PossibleEndpointTypeValues returns the possible values for the EndpointType const type.
func PossibleEndpointTypeValues() []EndpointType {
	return []EndpointType{
		EndpointTypeAzureFunction,
		EndpointTypeEventHub,
		EndpointTypeHybridConnection,
		EndpointTypeServiceBusQueue,
		EndpointTypeServiceBusTopic,
		EndpointTypeStorageQueue,
		EndpointTypeWebHook,
	}
}

// ToPtr returns a *EndpointType pointing to the current value.
func (c EndpointType) ToPtr() *EndpointType {
	return &c
}

type Enum25 string

const (
	Enum25Domains           Enum25 = "domains"
	Enum25PartnerNamespaces Enum25 = "partnerNamespaces"
	Enum25Topics            Enum25 = "topics"
)

// PossibleEnum25Values returns the possible values for the Enum25 const type.
func PossibleEnum25Values() []Enum25 {
	return []Enum25{
		Enum25Domains,
		Enum25PartnerNamespaces,
		Enum25Topics,
	}
}

// ToPtr returns a *Enum25 pointing to the current value.
func (c Enum25) ToPtr() *Enum25 {
	return &c
}

type Enum26 string

const (
	Enum26Domains           Enum26 = "domains"
	Enum26PartnerNamespaces Enum26 = "partnerNamespaces"
	Enum26Topics            Enum26 = "topics"
)

// PossibleEnum26Values returns the possible values for the Enum26 const type.
func PossibleEnum26Values() []Enum26 {
	return []Enum26{
		Enum26Domains,
		Enum26PartnerNamespaces,
		Enum26Topics,
	}
}

// ToPtr returns a *Enum26 pointing to the current value.
func (c Enum26) ToPtr() *Enum26 {
	return &c
}

type Enum27 string

const (
	Enum27Domains           Enum27 = "domains"
	Enum27PartnerNamespaces Enum27 = "partnerNamespaces"
	Enum27Topics            Enum27 = "topics"
)

// PossibleEnum27Values returns the possible values for the Enum27 const type.
func PossibleEnum27Values() []Enum27 {
	return []Enum27{
		Enum27Domains,
		Enum27PartnerNamespaces,
		Enum27Topics,
	}
}

// ToPtr returns a *Enum27 pointing to the current value.
func (c Enum27) ToPtr() *Enum27 {
	return &c
}

type Enum28 string

const (
	Enum28Domains           Enum28 = "domains"
	Enum28PartnerNamespaces Enum28 = "partnerNamespaces"
	Enum28Topics            Enum28 = "topics"
)

// PossibleEnum28Values returns the possible values for the Enum28 const type.
func PossibleEnum28Values() []Enum28 {
	return []Enum28{
		Enum28Domains,
		Enum28PartnerNamespaces,
		Enum28Topics,
	}
}

// ToPtr returns a *Enum28 pointing to the current value.
func (c Enum28) ToPtr() *Enum28 {
	return &c
}

// EventChannelProvisioningState - Provisioning state of the event channel.
type EventChannelProvisioningState string

const (
	EventChannelProvisioningStateCanceled  EventChannelProvisioningState = "Canceled"
	EventChannelProvisioningStateCreating  EventChannelProvisioningState = "Creating"
	EventChannelProvisioningStateDeleting  EventChannelProvisioningState = "Deleting"
	EventChannelProvisioningStateFailed    EventChannelProvisioningState = "Failed"
	EventChannelProvisioningStateSucceeded EventChannelProvisioningState = "Succeeded"
	EventChannelProvisioningStateUpdating  EventChannelProvisioningState = "Updating"
)

// PossibleEventChannelProvisioningStateValues returns the possible values for the EventChannelProvisioningState const type.
func PossibleEventChannelProvisioningStateValues() []EventChannelProvisioningState {
	return []EventChannelProvisioningState{
		EventChannelProvisioningStateCanceled,
		EventChannelProvisioningStateCreating,
		EventChannelProvisioningStateDeleting,
		EventChannelProvisioningStateFailed,
		EventChannelProvisioningStateSucceeded,
		EventChannelProvisioningStateUpdating,
	}
}

// ToPtr returns a *EventChannelProvisioningState pointing to the current value.
func (c EventChannelProvisioningState) ToPtr() *EventChannelProvisioningState {
	return &c
}

// EventDeliverySchema - The event delivery schema for the event subscription.
type EventDeliverySchema string

const (
	EventDeliverySchemaCloudEventSchemaV10 EventDeliverySchema = "CloudEventSchemaV1_0"
	EventDeliverySchemaCustomInputSchema   EventDeliverySchema = "CustomInputSchema"
	EventDeliverySchemaEventGridSchema     EventDeliverySchema = "EventGridSchema"
)

// PossibleEventDeliverySchemaValues returns the possible values for the EventDeliverySchema const type.
func PossibleEventDeliverySchemaValues() []EventDeliverySchema {
	return []EventDeliverySchema{
		EventDeliverySchemaCloudEventSchemaV10,
		EventDeliverySchemaCustomInputSchema,
		EventDeliverySchemaEventGridSchema,
	}
}

// ToPtr returns a *EventDeliverySchema pointing to the current value.
func (c EventDeliverySchema) ToPtr() *EventDeliverySchema {
	return &c
}

// EventSubscriptionIdentityType - The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
// and a set of user-assigned identities. The type 'None' will remove any identity.
type EventSubscriptionIdentityType string

const (
	EventSubscriptionIdentityTypeSystemAssigned EventSubscriptionIdentityType = "SystemAssigned"
	EventSubscriptionIdentityTypeUserAssigned   EventSubscriptionIdentityType = "UserAssigned"
)

// PossibleEventSubscriptionIdentityTypeValues returns the possible values for the EventSubscriptionIdentityType const type.
func PossibleEventSubscriptionIdentityTypeValues() []EventSubscriptionIdentityType {
	return []EventSubscriptionIdentityType{
		EventSubscriptionIdentityTypeSystemAssigned,
		EventSubscriptionIdentityTypeUserAssigned,
	}
}

// ToPtr returns a *EventSubscriptionIdentityType pointing to the current value.
func (c EventSubscriptionIdentityType) ToPtr() *EventSubscriptionIdentityType {
	return &c
}

// EventSubscriptionProvisioningState - Provisioning state of the event subscription.
type EventSubscriptionProvisioningState string

const (
	EventSubscriptionProvisioningStateAwaitingManualAction EventSubscriptionProvisioningState = "AwaitingManualAction"
	EventSubscriptionProvisioningStateCanceled             EventSubscriptionProvisioningState = "Canceled"
	EventSubscriptionProvisioningStateCreating             EventSubscriptionProvisioningState = "Creating"
	EventSubscriptionProvisioningStateDeleting             EventSubscriptionProvisioningState = "Deleting"
	EventSubscriptionProvisioningStateFailed               EventSubscriptionProvisioningState = "Failed"
	EventSubscriptionProvisioningStateSucceeded            EventSubscriptionProvisioningState = "Succeeded"
	EventSubscriptionProvisioningStateUpdating             EventSubscriptionProvisioningState = "Updating"
)

// PossibleEventSubscriptionProvisioningStateValues returns the possible values for the EventSubscriptionProvisioningState const type.
func PossibleEventSubscriptionProvisioningStateValues() []EventSubscriptionProvisioningState {
	return []EventSubscriptionProvisioningState{
		EventSubscriptionProvisioningStateAwaitingManualAction,
		EventSubscriptionProvisioningStateCanceled,
		EventSubscriptionProvisioningStateCreating,
		EventSubscriptionProvisioningStateDeleting,
		EventSubscriptionProvisioningStateFailed,
		EventSubscriptionProvisioningStateSucceeded,
		EventSubscriptionProvisioningStateUpdating,
	}
}

// ToPtr returns a *EventSubscriptionProvisioningState pointing to the current value.
func (c EventSubscriptionProvisioningState) ToPtr() *EventSubscriptionProvisioningState {
	return &c
}

// IPActionType - Action to perform based on the match or no match of the IpMask.
type IPActionType string

const (
	IPActionTypeAllow IPActionType = "Allow"
)

// PossibleIPActionTypeValues returns the possible values for the IPActionType const type.
func PossibleIPActionTypeValues() []IPActionType {
	return []IPActionType{
		IPActionTypeAllow,
	}
}

// ToPtr returns a *IPActionType pointing to the current value.
func (c IPActionType) ToPtr() *IPActionType {
	return &c
}

// IdentityType - The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned
// identities. The type 'None' will remove any identity.
type IdentityType string

const (
	IdentityTypeNone                       IdentityType = "None"
	IdentityTypeSystemAssigned             IdentityType = "SystemAssigned"
	IdentityTypeSystemAssignedUserAssigned IdentityType = "SystemAssigned, UserAssigned"
	IdentityTypeUserAssigned               IdentityType = "UserAssigned"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeNone,
		IdentityTypeSystemAssigned,
		IdentityTypeSystemAssignedUserAssigned,
		IdentityTypeUserAssigned,
	}
}

// ToPtr returns a *IdentityType pointing to the current value.
func (c IdentityType) ToPtr() *IdentityType {
	return &c
}

// InputSchema - This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource.
type InputSchema string

const (
	InputSchemaCloudEventSchemaV10 InputSchema = "CloudEventSchemaV1_0"
	InputSchemaCustomEventSchema   InputSchema = "CustomEventSchema"
	InputSchemaEventGridSchema     InputSchema = "EventGridSchema"
)

// PossibleInputSchemaValues returns the possible values for the InputSchema const type.
func PossibleInputSchemaValues() []InputSchema {
	return []InputSchema{
		InputSchemaCloudEventSchemaV10,
		InputSchemaCustomEventSchema,
		InputSchemaEventGridSchema,
	}
}

// ToPtr returns a *InputSchema pointing to the current value.
func (c InputSchema) ToPtr() *InputSchema {
	return &c
}

// InputSchemaMappingType - Type of the custom mapping
type InputSchemaMappingType string

const (
	InputSchemaMappingTypeJSON InputSchemaMappingType = "Json"
)

// PossibleInputSchemaMappingTypeValues returns the possible values for the InputSchemaMappingType const type.
func PossibleInputSchemaMappingTypeValues() []InputSchemaMappingType {
	return []InputSchemaMappingType{
		InputSchemaMappingTypeJSON,
	}
}

// ToPtr returns a *InputSchemaMappingType pointing to the current value.
func (c InputSchemaMappingType) ToPtr() *InputSchemaMappingType {
	return &c
}

// PartnerNamespaceProvisioningState - Provisioning state of the partner namespace.
type PartnerNamespaceProvisioningState string

const (
	PartnerNamespaceProvisioningStateCanceled  PartnerNamespaceProvisioningState = "Canceled"
	PartnerNamespaceProvisioningStateCreating  PartnerNamespaceProvisioningState = "Creating"
	PartnerNamespaceProvisioningStateDeleting  PartnerNamespaceProvisioningState = "Deleting"
	PartnerNamespaceProvisioningStateFailed    PartnerNamespaceProvisioningState = "Failed"
	PartnerNamespaceProvisioningStateSucceeded PartnerNamespaceProvisioningState = "Succeeded"
	PartnerNamespaceProvisioningStateUpdating  PartnerNamespaceProvisioningState = "Updating"
)

// PossiblePartnerNamespaceProvisioningStateValues returns the possible values for the PartnerNamespaceProvisioningState const type.
func PossiblePartnerNamespaceProvisioningStateValues() []PartnerNamespaceProvisioningState {
	return []PartnerNamespaceProvisioningState{
		PartnerNamespaceProvisioningStateCanceled,
		PartnerNamespaceProvisioningStateCreating,
		PartnerNamespaceProvisioningStateDeleting,
		PartnerNamespaceProvisioningStateFailed,
		PartnerNamespaceProvisioningStateSucceeded,
		PartnerNamespaceProvisioningStateUpdating,
	}
}

// ToPtr returns a *PartnerNamespaceProvisioningState pointing to the current value.
func (c PartnerNamespaceProvisioningState) ToPtr() *PartnerNamespaceProvisioningState {
	return &c
}

// PartnerRegistrationProvisioningState - Provisioning state of the partner registration.
type PartnerRegistrationProvisioningState string

const (
	PartnerRegistrationProvisioningStateCanceled  PartnerRegistrationProvisioningState = "Canceled"
	PartnerRegistrationProvisioningStateCreating  PartnerRegistrationProvisioningState = "Creating"
	PartnerRegistrationProvisioningStateDeleting  PartnerRegistrationProvisioningState = "Deleting"
	PartnerRegistrationProvisioningStateFailed    PartnerRegistrationProvisioningState = "Failed"
	PartnerRegistrationProvisioningStateSucceeded PartnerRegistrationProvisioningState = "Succeeded"
	PartnerRegistrationProvisioningStateUpdating  PartnerRegistrationProvisioningState = "Updating"
)

// PossiblePartnerRegistrationProvisioningStateValues returns the possible values for the PartnerRegistrationProvisioningState const type.
func PossiblePartnerRegistrationProvisioningStateValues() []PartnerRegistrationProvisioningState {
	return []PartnerRegistrationProvisioningState{
		PartnerRegistrationProvisioningStateCanceled,
		PartnerRegistrationProvisioningStateCreating,
		PartnerRegistrationProvisioningStateDeleting,
		PartnerRegistrationProvisioningStateFailed,
		PartnerRegistrationProvisioningStateSucceeded,
		PartnerRegistrationProvisioningStateUpdating,
	}
}

// ToPtr returns a *PartnerRegistrationProvisioningState pointing to the current value.
func (c PartnerRegistrationProvisioningState) ToPtr() *PartnerRegistrationProvisioningState {
	return &c
}

// PartnerRegistrationVisibilityState - Visibility state of the partner registration.
type PartnerRegistrationVisibilityState string

const (
	PartnerRegistrationVisibilityStateGenerallyAvailable PartnerRegistrationVisibilityState = "GenerallyAvailable"
	PartnerRegistrationVisibilityStateHidden             PartnerRegistrationVisibilityState = "Hidden"
	PartnerRegistrationVisibilityStatePublicPreview      PartnerRegistrationVisibilityState = "PublicPreview"
)

// PossiblePartnerRegistrationVisibilityStateValues returns the possible values for the PartnerRegistrationVisibilityState const type.
func PossiblePartnerRegistrationVisibilityStateValues() []PartnerRegistrationVisibilityState {
	return []PartnerRegistrationVisibilityState{
		PartnerRegistrationVisibilityStateGenerallyAvailable,
		PartnerRegistrationVisibilityStateHidden,
		PartnerRegistrationVisibilityStatePublicPreview,
	}
}

// ToPtr returns a *PartnerRegistrationVisibilityState pointing to the current value.
func (c PartnerRegistrationVisibilityState) ToPtr() *PartnerRegistrationVisibilityState {
	return &c
}

// PartnerTopicActivationState - Activation state of the partner topic.
type PartnerTopicActivationState string

const (
	PartnerTopicActivationStateActivated      PartnerTopicActivationState = "Activated"
	PartnerTopicActivationStateDeactivated    PartnerTopicActivationState = "Deactivated"
	PartnerTopicActivationStateNeverActivated PartnerTopicActivationState = "NeverActivated"
)

// PossiblePartnerTopicActivationStateValues returns the possible values for the PartnerTopicActivationState const type.
func PossiblePartnerTopicActivationStateValues() []PartnerTopicActivationState {
	return []PartnerTopicActivationState{
		PartnerTopicActivationStateActivated,
		PartnerTopicActivationStateDeactivated,
		PartnerTopicActivationStateNeverActivated,
	}
}

// ToPtr returns a *PartnerTopicActivationState pointing to the current value.
func (c PartnerTopicActivationState) ToPtr() *PartnerTopicActivationState {
	return &c
}

// PartnerTopicProvisioningState - Provisioning state of the partner topic.
type PartnerTopicProvisioningState string

const (
	PartnerTopicProvisioningStateCanceled  PartnerTopicProvisioningState = "Canceled"
	PartnerTopicProvisioningStateCreating  PartnerTopicProvisioningState = "Creating"
	PartnerTopicProvisioningStateDeleting  PartnerTopicProvisioningState = "Deleting"
	PartnerTopicProvisioningStateFailed    PartnerTopicProvisioningState = "Failed"
	PartnerTopicProvisioningStateSucceeded PartnerTopicProvisioningState = "Succeeded"
	PartnerTopicProvisioningStateUpdating  PartnerTopicProvisioningState = "Updating"
)

// PossiblePartnerTopicProvisioningStateValues returns the possible values for the PartnerTopicProvisioningState const type.
func PossiblePartnerTopicProvisioningStateValues() []PartnerTopicProvisioningState {
	return []PartnerTopicProvisioningState{
		PartnerTopicProvisioningStateCanceled,
		PartnerTopicProvisioningStateCreating,
		PartnerTopicProvisioningStateDeleting,
		PartnerTopicProvisioningStateFailed,
		PartnerTopicProvisioningStateSucceeded,
		PartnerTopicProvisioningStateUpdating,
	}
}

// ToPtr returns a *PartnerTopicProvisioningState pointing to the current value.
func (c PartnerTopicProvisioningState) ToPtr() *PartnerTopicProvisioningState {
	return &c
}

// PartnerTopicReadinessState - The readiness state of the corresponding partner topic.
type PartnerTopicReadinessState string

const (
	PartnerTopicReadinessStateActivatedByUser       PartnerTopicReadinessState = "ActivatedByUser"
	PartnerTopicReadinessStateDeactivatedByUser     PartnerTopicReadinessState = "DeactivatedByUser"
	PartnerTopicReadinessStateDeletedByUser         PartnerTopicReadinessState = "DeletedByUser"
	PartnerTopicReadinessStateNotActivatedByUserYet PartnerTopicReadinessState = "NotActivatedByUserYet"
)

// PossiblePartnerTopicReadinessStateValues returns the possible values for the PartnerTopicReadinessState const type.
func PossiblePartnerTopicReadinessStateValues() []PartnerTopicReadinessState {
	return []PartnerTopicReadinessState{
		PartnerTopicReadinessStateActivatedByUser,
		PartnerTopicReadinessStateDeactivatedByUser,
		PartnerTopicReadinessStateDeletedByUser,
		PartnerTopicReadinessStateNotActivatedByUserYet,
	}
}

// ToPtr returns a *PartnerTopicReadinessState pointing to the current value.
func (c PartnerTopicReadinessState) ToPtr() *PartnerTopicReadinessState {
	return &c
}

// PersistedConnectionStatus - Status of the connection.
type PersistedConnectionStatus string

const (
	PersistedConnectionStatusApproved     PersistedConnectionStatus = "Approved"
	PersistedConnectionStatusDisconnected PersistedConnectionStatus = "Disconnected"
	PersistedConnectionStatusPending      PersistedConnectionStatus = "Pending"
	PersistedConnectionStatusRejected     PersistedConnectionStatus = "Rejected"
)

// PossiblePersistedConnectionStatusValues returns the possible values for the PersistedConnectionStatus const type.
func PossiblePersistedConnectionStatusValues() []PersistedConnectionStatus {
	return []PersistedConnectionStatus{
		PersistedConnectionStatusApproved,
		PersistedConnectionStatusDisconnected,
		PersistedConnectionStatusPending,
		PersistedConnectionStatusRejected,
	}
}

// ToPtr returns a *PersistedConnectionStatus pointing to the current value.
func (c PersistedConnectionStatus) ToPtr() *PersistedConnectionStatus {
	return &c
}

// PublicNetworkAccess - This determines if traffic is allowed over public network. By default it is enabled. You can further restrict to specific IPs by
// configuring
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled  PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// ToPtr returns a *PublicNetworkAccess pointing to the current value.
func (c PublicNetworkAccess) ToPtr() *PublicNetworkAccess {
	return &c
}

// ResourceKind - Kind of the resource.
type ResourceKind string

const (
	ResourceKindAzure    ResourceKind = "Azure"
	ResourceKindAzureArc ResourceKind = "AzureArc"
)

// PossibleResourceKindValues returns the possible values for the ResourceKind const type.
func PossibleResourceKindValues() []ResourceKind {
	return []ResourceKind{
		ResourceKindAzure,
		ResourceKindAzureArc,
	}
}

// ToPtr returns a *ResourceKind pointing to the current value.
func (c ResourceKind) ToPtr() *ResourceKind {
	return &c
}

// ResourceProvisioningState - Provisioning state of the Private Endpoint Connection.
type ResourceProvisioningState string

const (
	ResourceProvisioningStateCanceled  ResourceProvisioningState = "Canceled"
	ResourceProvisioningStateCreating  ResourceProvisioningState = "Creating"
	ResourceProvisioningStateDeleting  ResourceProvisioningState = "Deleting"
	ResourceProvisioningStateFailed    ResourceProvisioningState = "Failed"
	ResourceProvisioningStateSucceeded ResourceProvisioningState = "Succeeded"
	ResourceProvisioningStateUpdating  ResourceProvisioningState = "Updating"
)

// PossibleResourceProvisioningStateValues returns the possible values for the ResourceProvisioningState const type.
func PossibleResourceProvisioningStateValues() []ResourceProvisioningState {
	return []ResourceProvisioningState{
		ResourceProvisioningStateCanceled,
		ResourceProvisioningStateCreating,
		ResourceProvisioningStateDeleting,
		ResourceProvisioningStateFailed,
		ResourceProvisioningStateSucceeded,
		ResourceProvisioningStateUpdating,
	}
}

// ToPtr returns a *ResourceProvisioningState pointing to the current value.
func (c ResourceProvisioningState) ToPtr() *ResourceProvisioningState {
	return &c
}

// ResourceRegionType - Region type of the resource.
type ResourceRegionType string

const (
	ResourceRegionTypeGlobalResource   ResourceRegionType = "GlobalResource"
	ResourceRegionTypeRegionalResource ResourceRegionType = "RegionalResource"
)

// PossibleResourceRegionTypeValues returns the possible values for the ResourceRegionType const type.
func PossibleResourceRegionTypeValues() []ResourceRegionType {
	return []ResourceRegionType{
		ResourceRegionTypeGlobalResource,
		ResourceRegionTypeRegionalResource,
	}
}

// ToPtr returns a *ResourceRegionType pointing to the current value.
func (c ResourceRegionType) ToPtr() *ResourceRegionType {
	return &c
}

// SKU - The Sku name of the resource. The possible values are: Basic or Premium.
type SKU string

const (
	SKUBasic   SKU = "Basic"
	SKUPremium SKU = "Premium"
)

// PossibleSKUValues returns the possible values for the SKU const type.
func PossibleSKUValues() []SKU {
	return []SKU{
		SKUBasic,
		SKUPremium,
	}
}

// ToPtr returns a *SKU pointing to the current value.
func (c SKU) ToPtr() *SKU {
	return &c
}

// TopicProvisioningState - Provisioning state of the topic.
type TopicProvisioningState string

const (
	TopicProvisioningStateCanceled  TopicProvisioningState = "Canceled"
	TopicProvisioningStateCreating  TopicProvisioningState = "Creating"
	TopicProvisioningStateDeleting  TopicProvisioningState = "Deleting"
	TopicProvisioningStateFailed    TopicProvisioningState = "Failed"
	TopicProvisioningStateSucceeded TopicProvisioningState = "Succeeded"
	TopicProvisioningStateUpdating  TopicProvisioningState = "Updating"
)

// PossibleTopicProvisioningStateValues returns the possible values for the TopicProvisioningState const type.
func PossibleTopicProvisioningStateValues() []TopicProvisioningState {
	return []TopicProvisioningState{
		TopicProvisioningStateCanceled,
		TopicProvisioningStateCreating,
		TopicProvisioningStateDeleting,
		TopicProvisioningStateFailed,
		TopicProvisioningStateSucceeded,
		TopicProvisioningStateUpdating,
	}
}

// ToPtr returns a *TopicProvisioningState pointing to the current value.
func (c TopicProvisioningState) ToPtr() *TopicProvisioningState {
	return &c
}

type TopicTypePropertiesSupportedScopesForSourceItem string

const (
	TopicTypePropertiesSupportedScopesForSourceItemAzureSubscription TopicTypePropertiesSupportedScopesForSourceItem = "AzureSubscription"
	TopicTypePropertiesSupportedScopesForSourceItemResource          TopicTypePropertiesSupportedScopesForSourceItem = "Resource"
	TopicTypePropertiesSupportedScopesForSourceItemResourceGroup     TopicTypePropertiesSupportedScopesForSourceItem = "ResourceGroup"
)

// PossibleTopicTypePropertiesSupportedScopesForSourceItemValues returns the possible values for the TopicTypePropertiesSupportedScopesForSourceItem const type.
func PossibleTopicTypePropertiesSupportedScopesForSourceItemValues() []TopicTypePropertiesSupportedScopesForSourceItem {
	return []TopicTypePropertiesSupportedScopesForSourceItem{
		TopicTypePropertiesSupportedScopesForSourceItemAzureSubscription,
		TopicTypePropertiesSupportedScopesForSourceItemResource,
		TopicTypePropertiesSupportedScopesForSourceItemResourceGroup,
	}
}

// ToPtr returns a *TopicTypePropertiesSupportedScopesForSourceItem pointing to the current value.
func (c TopicTypePropertiesSupportedScopesForSourceItem) ToPtr() *TopicTypePropertiesSupportedScopesForSourceItem {
	return &c
}

// TopicTypeProvisioningState - Provisioning state of the topic type
type TopicTypeProvisioningState string

const (
	TopicTypeProvisioningStateCanceled  TopicTypeProvisioningState = "Canceled"
	TopicTypeProvisioningStateCreating  TopicTypeProvisioningState = "Creating"
	TopicTypeProvisioningStateDeleting  TopicTypeProvisioningState = "Deleting"
	TopicTypeProvisioningStateFailed    TopicTypeProvisioningState = "Failed"
	TopicTypeProvisioningStateSucceeded TopicTypeProvisioningState = "Succeeded"
	TopicTypeProvisioningStateUpdating  TopicTypeProvisioningState = "Updating"
)

// PossibleTopicTypeProvisioningStateValues returns the possible values for the TopicTypeProvisioningState const type.
func PossibleTopicTypeProvisioningStateValues() []TopicTypeProvisioningState {
	return []TopicTypeProvisioningState{
		TopicTypeProvisioningStateCanceled,
		TopicTypeProvisioningStateCreating,
		TopicTypeProvisioningStateDeleting,
		TopicTypeProvisioningStateFailed,
		TopicTypeProvisioningStateSucceeded,
		TopicTypeProvisioningStateUpdating,
	}
}

// ToPtr returns a *TopicTypeProvisioningState pointing to the current value.
func (c TopicTypeProvisioningState) ToPtr() *TopicTypeProvisioningState {
	return &c
}
