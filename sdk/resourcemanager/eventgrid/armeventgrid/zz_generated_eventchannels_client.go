//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// EventChannelsClient contains the methods for the EventChannels group.
// Don't use this type directly, use NewEventChannelsClient() instead.
type EventChannelsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewEventChannelsClient creates a new instance of EventChannelsClient with the specified values.
// subscriptionID - Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms
// part of the URI for every service call.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewEventChannelsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EventChannelsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublicCloud.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &EventChannelsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// CreateOrUpdate - Asynchronously creates a new event channel with the specified parameters.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// partnerNamespaceName - Name of the partner namespace.
// eventChannelName - Name of the event channel.
// eventChannelInfo - EventChannel information.
// options - EventChannelsClientCreateOrUpdateOptions contains the optional parameters for the EventChannelsClient.CreateOrUpdate
// method.
func (client *EventChannelsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, eventChannelInfo EventChannel, options *EventChannelsClientCreateOrUpdateOptions) (EventChannelsClientCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, partnerNamespaceName, eventChannelName, eventChannelInfo, options)
	if err != nil {
		return EventChannelsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EventChannelsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EventChannelsClientCreateOrUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EventChannelsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, eventChannelInfo EventChannel, options *EventChannelsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if partnerNamespaceName == "" {
		return nil, errors.New("parameter partnerNamespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerNamespaceName}", url.PathEscape(partnerNamespaceName))
	if eventChannelName == "" {
		return nil, errors.New("parameter eventChannelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventChannelName}", url.PathEscape(eventChannelName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, eventChannelInfo)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *EventChannelsClient) createOrUpdateHandleResponse(resp *http.Response) (EventChannelsClientCreateOrUpdateResponse, error) {
	result := EventChannelsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventChannel); err != nil {
		return EventChannelsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// BeginDelete - Delete existing event channel.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// partnerNamespaceName - Name of the partner namespace.
// eventChannelName - Name of the event channel.
// options - EventChannelsClientBeginDeleteOptions contains the optional parameters for the EventChannelsClient.BeginDelete
// method.
func (client *EventChannelsClient) BeginDelete(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, options *EventChannelsClientBeginDeleteOptions) (*armruntime.Poller[EventChannelsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, partnerNamespaceName, eventChannelName, options)
		if err != nil {
			return nil, err
		}
		return armruntime.NewPoller[EventChannelsClientDeleteResponse](resp, client.pl, nil)
	} else {
		return armruntime.NewPollerFromResumeToken[EventChannelsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Delete existing event channel.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *EventChannelsClient) deleteOperation(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, options *EventChannelsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, partnerNamespaceName, eventChannelName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EventChannelsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, options *EventChannelsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if partnerNamespaceName == "" {
		return nil, errors.New("parameter partnerNamespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerNamespaceName}", url.PathEscape(partnerNamespaceName))
	if eventChannelName == "" {
		return nil, errors.New("parameter eventChannelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventChannelName}", url.PathEscape(eventChannelName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get properties of an event channel.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// partnerNamespaceName - Name of the partner namespace.
// eventChannelName - Name of the event channel.
// options - EventChannelsClientGetOptions contains the optional parameters for the EventChannelsClient.Get method.
func (client *EventChannelsClient) Get(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, options *EventChannelsClientGetOptions) (EventChannelsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, partnerNamespaceName, eventChannelName, options)
	if err != nil {
		return EventChannelsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EventChannelsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EventChannelsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *EventChannelsClient) getCreateRequest(ctx context.Context, resourceGroupName string, partnerNamespaceName string, eventChannelName string, options *EventChannelsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if partnerNamespaceName == "" {
		return nil, errors.New("parameter partnerNamespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerNamespaceName}", url.PathEscape(partnerNamespaceName))
	if eventChannelName == "" {
		return nil, errors.New("parameter eventChannelName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventChannelName}", url.PathEscape(eventChannelName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EventChannelsClient) getHandleResponse(resp *http.Response) (EventChannelsClientGetResponse, error) {
	result := EventChannelsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventChannel); err != nil {
		return EventChannelsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByPartnerNamespacePager - List all the event channels in a partner namespace.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription.
// partnerNamespaceName - Name of the partner namespace.
// options - EventChannelsClientListByPartnerNamespaceOptions contains the optional parameters for the EventChannelsClient.ListByPartnerNamespace
// method.
func (client *EventChannelsClient) NewListByPartnerNamespacePager(resourceGroupName string, partnerNamespaceName string, options *EventChannelsClientListByPartnerNamespaceOptions) *runtime.Pager[EventChannelsClientListByPartnerNamespaceResponse] {
	return runtime.NewPager(runtime.PageProcessor[EventChannelsClientListByPartnerNamespaceResponse]{
		More: func(page EventChannelsClientListByPartnerNamespaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EventChannelsClientListByPartnerNamespaceResponse) (EventChannelsClientListByPartnerNamespaceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByPartnerNamespaceCreateRequest(ctx, resourceGroupName, partnerNamespaceName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return EventChannelsClientListByPartnerNamespaceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return EventChannelsClientListByPartnerNamespaceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return EventChannelsClientListByPartnerNamespaceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByPartnerNamespaceHandleResponse(resp)
		},
	})
}

// listByPartnerNamespaceCreateRequest creates the ListByPartnerNamespace request.
func (client *EventChannelsClient) listByPartnerNamespaceCreateRequest(ctx context.Context, resourceGroupName string, partnerNamespaceName string, options *EventChannelsClientListByPartnerNamespaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if partnerNamespaceName == "" {
		return nil, errors.New("parameter partnerNamespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerNamespaceName}", url.PathEscape(partnerNamespaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-15-preview")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByPartnerNamespaceHandleResponse handles the ListByPartnerNamespace response.
func (client *EventChannelsClient) listByPartnerNamespaceHandleResponse(resp *http.Response) (EventChannelsClientListByPartnerNamespaceResponse, error) {
	result := EventChannelsClientListByPartnerNamespaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventChannelsListResult); err != nil {
		return EventChannelsClientListByPartnerNamespaceResponse{}, err
	}
	return result, nil
}
