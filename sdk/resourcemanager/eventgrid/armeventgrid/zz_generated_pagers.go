//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armeventgrid

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DomainTopicsClientListByDomainPager provides operations for iterating over paged responses.
type DomainTopicsClientListByDomainPager struct {
	client    *DomainTopicsClient
	current   DomainTopicsClientListByDomainResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainTopicsClientListByDomainResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainTopicsClientListByDomainPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainTopicsClientListByDomainPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainTopicsListResult.NextLink == nil || len(*p.current.DomainTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDomainHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainTopicsClientListByDomainResponse page.
func (p *DomainTopicsClientListByDomainPager) PageResponse() DomainTopicsClientListByDomainResponse {
	return p.current
}

// DomainsClientListByResourceGroupPager provides operations for iterating over paged responses.
type DomainsClientListByResourceGroupPager struct {
	client    *DomainsClient
	current   DomainsClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsClientListByResourceGroupResponse page.
func (p *DomainsClientListByResourceGroupPager) PageResponse() DomainsClientListByResourceGroupResponse {
	return p.current
}

// DomainsClientListBySubscriptionPager provides operations for iterating over paged responses.
type DomainsClientListBySubscriptionPager struct {
	client    *DomainsClient
	current   DomainsClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainsListResult.NextLink == nil || len(*p.current.DomainsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsClientListBySubscriptionResponse page.
func (p *DomainsClientListBySubscriptionPager) PageResponse() DomainsClientListBySubscriptionResponse {
	return p.current
}

// EventSubscriptionsClientListByDomainTopicPager provides operations for iterating over paged responses.
type EventSubscriptionsClientListByDomainTopicPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListByDomainTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListByDomainTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListByDomainTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListByDomainTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByDomainTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListByDomainTopicResponse page.
func (p *EventSubscriptionsClientListByDomainTopicPager) PageResponse() EventSubscriptionsClientListByDomainTopicResponse {
	return p.current
}

// EventSubscriptionsClientListByResourcePager provides operations for iterating over paged responses.
type EventSubscriptionsClientListByResourcePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListByResourceResponse page.
func (p *EventSubscriptionsClientListByResourcePager) PageResponse() EventSubscriptionsClientListByResourceResponse {
	return p.current
}

// EventSubscriptionsClientListGlobalByResourceGroupForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsClientListGlobalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListGlobalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListGlobalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeResponse page.
func (p *EventSubscriptionsClientListGlobalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsClientListGlobalByResourceGroupForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsClientListGlobalByResourceGroupPager provides operations for iterating over paged responses.
type EventSubscriptionsClientListGlobalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListGlobalByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListGlobalByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListGlobalByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListGlobalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listGlobalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListGlobalByResourceGroupResponse page.
func (p *EventSubscriptionsClientListGlobalByResourceGroupPager) PageResponse() EventSubscriptionsClientListGlobalByResourceGroupResponse {
	return p.current
}

// EventSubscriptionsClientListGlobalBySubscriptionForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsClientListGlobalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListGlobalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListGlobalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeResponse page.
func (p *EventSubscriptionsClientListGlobalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsClientListGlobalBySubscriptionForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsClientListGlobalBySubscriptionPager provides operations for iterating over paged responses.
type EventSubscriptionsClientListGlobalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListGlobalBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListGlobalBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListGlobalBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListGlobalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listGlobalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListGlobalBySubscriptionResponse page.
func (p *EventSubscriptionsClientListGlobalBySubscriptionPager) PageResponse() EventSubscriptionsClientListGlobalBySubscriptionResponse {
	return p.current
}

// EventSubscriptionsClientListRegionalByResourceGroupForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsClientListRegionalByResourceGroupForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListRegionalByResourceGroupForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListRegionalByResourceGroupForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeResponse page.
func (p *EventSubscriptionsClientListRegionalByResourceGroupForTopicTypePager) PageResponse() EventSubscriptionsClientListRegionalByResourceGroupForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsClientListRegionalByResourceGroupPager provides operations for iterating over paged responses.
type EventSubscriptionsClientListRegionalByResourceGroupPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListRegionalByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListRegionalByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListRegionalByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListRegionalByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listRegionalByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListRegionalByResourceGroupResponse page.
func (p *EventSubscriptionsClientListRegionalByResourceGroupPager) PageResponse() EventSubscriptionsClientListRegionalByResourceGroupResponse {
	return p.current
}

// EventSubscriptionsClientListRegionalBySubscriptionForTopicTypePager provides operations for iterating over paged responses.
type EventSubscriptionsClientListRegionalBySubscriptionForTopicTypePager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListRegionalBySubscriptionForTopicTypePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListRegionalBySubscriptionForTopicTypePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionForTopicTypeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeResponse page.
func (p *EventSubscriptionsClientListRegionalBySubscriptionForTopicTypePager) PageResponse() EventSubscriptionsClientListRegionalBySubscriptionForTopicTypeResponse {
	return p.current
}

// EventSubscriptionsClientListRegionalBySubscriptionPager provides operations for iterating over paged responses.
type EventSubscriptionsClientListRegionalBySubscriptionPager struct {
	client    *EventSubscriptionsClient
	current   EventSubscriptionsClientListRegionalBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EventSubscriptionsClientListRegionalBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EventSubscriptionsClientListRegionalBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EventSubscriptionsClientListRegionalBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listRegionalBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EventSubscriptionsClientListRegionalBySubscriptionResponse page.
func (p *EventSubscriptionsClientListRegionalBySubscriptionPager) PageResponse() EventSubscriptionsClientListRegionalBySubscriptionResponse {
	return p.current
}

// PrivateEndpointConnectionsClientListByResourcePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListByResourcePager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsClientListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsClientListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsClientListByResourceResponse page.
func (p *PrivateEndpointConnectionsClientListByResourcePager) PageResponse() PrivateEndpointConnectionsClientListByResourceResponse {
	return p.current
}

// PrivateLinkResourcesClientListByResourcePager provides operations for iterating over paged responses.
type PrivateLinkResourcesClientListByResourcePager struct {
	client    *PrivateLinkResourcesClient
	current   PrivateLinkResourcesClientListByResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkResourcesClientListByResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkResourcesClientListByResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkResourcesClientListByResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkResourcesListResult.NextLink == nil || len(*p.current.PrivateLinkResourcesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkResourcesClientListByResourceResponse page.
func (p *PrivateLinkResourcesClientListByResourcePager) PageResponse() PrivateLinkResourcesClientListByResourceResponse {
	return p.current
}

// SystemTopicEventSubscriptionsClientListBySystemTopicPager provides operations for iterating over paged responses.
type SystemTopicEventSubscriptionsClientListBySystemTopicPager struct {
	client    *SystemTopicEventSubscriptionsClient
	current   SystemTopicEventSubscriptionsClientListBySystemTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicEventSubscriptionsClientListBySystemTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicEventSubscriptionsClientListBySystemTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicEventSubscriptionsClientListBySystemTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventSubscriptionsListResult.NextLink == nil || len(*p.current.EventSubscriptionsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySystemTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicEventSubscriptionsClientListBySystemTopicResponse page.
func (p *SystemTopicEventSubscriptionsClientListBySystemTopicPager) PageResponse() SystemTopicEventSubscriptionsClientListBySystemTopicResponse {
	return p.current
}

// SystemTopicsClientListByResourceGroupPager provides operations for iterating over paged responses.
type SystemTopicsClientListByResourceGroupPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicsClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicsClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicsClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicsClientListByResourceGroupResponse page.
func (p *SystemTopicsClientListByResourceGroupPager) PageResponse() SystemTopicsClientListByResourceGroupResponse {
	return p.current
}

// SystemTopicsClientListBySubscriptionPager provides operations for iterating over paged responses.
type SystemTopicsClientListBySubscriptionPager struct {
	client    *SystemTopicsClient
	current   SystemTopicsClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SystemTopicsClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SystemTopicsClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SystemTopicsClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SystemTopicsListResult.NextLink == nil || len(*p.current.SystemTopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SystemTopicsClientListBySubscriptionResponse page.
func (p *SystemTopicsClientListBySubscriptionPager) PageResponse() SystemTopicsClientListBySubscriptionResponse {
	return p.current
}

// TopicsClientListByResourceGroupPager provides operations for iterating over paged responses.
type TopicsClientListByResourceGroupPager struct {
	client    *TopicsClient
	current   TopicsClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsClientListByResourceGroupResponse page.
func (p *TopicsClientListByResourceGroupPager) PageResponse() TopicsClientListByResourceGroupResponse {
	return p.current
}

// TopicsClientListBySubscriptionPager provides operations for iterating over paged responses.
type TopicsClientListBySubscriptionPager struct {
	client    *TopicsClient
	current   TopicsClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopicsListResult.NextLink == nil || len(*p.current.TopicsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsClientListBySubscriptionResponse page.
func (p *TopicsClientListBySubscriptionPager) PageResponse() TopicsClientListBySubscriptionResponse {
	return p.current
}
