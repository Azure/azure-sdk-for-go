//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armextendedlocation

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CustomLocationsListByResourceGroupPager provides operations for iterating over paged responses.
type CustomLocationsListByResourceGroupPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomLocationsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomLocationsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationListResult.NextLink == nil || len(*p.current.CustomLocationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomLocationsListByResourceGroupResponse page.
func (p *CustomLocationsListByResourceGroupPager) PageResponse() CustomLocationsListByResourceGroupResponse {
	return p.current
}

// CustomLocationsListBySubscriptionPager provides operations for iterating over paged responses.
type CustomLocationsListBySubscriptionPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomLocationsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomLocationsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationListResult.NextLink == nil || len(*p.current.CustomLocationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomLocationsListBySubscriptionResponse page.
func (p *CustomLocationsListBySubscriptionPager) PageResponse() CustomLocationsListBySubscriptionResponse {
	return p.current
}

// CustomLocationsListEnabledResourceTypesPager provides operations for iterating over paged responses.
type CustomLocationsListEnabledResourceTypesPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsListEnabledResourceTypesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsListEnabledResourceTypesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomLocationsListEnabledResourceTypesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomLocationsListEnabledResourceTypesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EnabledResourceTypesListResult.NextLink == nil || len(*p.current.EnabledResourceTypesListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listEnabledResourceTypesHandleError(resp)
		return false
	}
	result, err := p.client.listEnabledResourceTypesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomLocationsListEnabledResourceTypesResponse page.
func (p *CustomLocationsListEnabledResourceTypesPager) PageResponse() CustomLocationsListEnabledResourceTypesResponse {
	return p.current
}

// CustomLocationsListOperationsPager provides operations for iterating over paged responses.
type CustomLocationsListOperationsPager struct {
	client    *CustomLocationsClient
	current   CustomLocationsListOperationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomLocationsListOperationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomLocationsListOperationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomLocationsListOperationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomLocationOperationsList.NextLink == nil || len(*p.current.CustomLocationOperationsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomLocationsListOperationsResponse page.
func (p *CustomLocationsListOperationsPager) PageResponse() CustomLocationsListOperationsResponse {
	return p.current
}
