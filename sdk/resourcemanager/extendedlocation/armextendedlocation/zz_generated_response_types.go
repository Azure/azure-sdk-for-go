//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armextendedlocation

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// CustomLocationsClientCreateOrUpdatePollerResponse contains the response from method CustomLocationsClient.CreateOrUpdate.
type CustomLocationsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomLocationsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomLocationsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomLocationsClientCreateOrUpdateResponse, error) {
	respType := CustomLocationsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CustomLocation)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomLocationsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *CustomLocationsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *CustomLocationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomLocationsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CustomLocationsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomLocationsClientCreateOrUpdateResponse contains the response from method CustomLocationsClient.CreateOrUpdate.
type CustomLocationsClientCreateOrUpdateResponse struct {
	CustomLocationsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientCreateOrUpdateResult contains the result from method CustomLocationsClient.CreateOrUpdate.
type CustomLocationsClientCreateOrUpdateResult struct {
	CustomLocation
}

// CustomLocationsClientDeletePollerResponse contains the response from method CustomLocationsClient.Delete.
type CustomLocationsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomLocationsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomLocationsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomLocationsClientDeleteResponse, error) {
	respType := CustomLocationsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomLocationsClientDeletePollerResponse from the provided client and resume token.
func (l *CustomLocationsClientDeletePollerResponse) Resume(ctx context.Context, client *CustomLocationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomLocationsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CustomLocationsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomLocationsClientDeleteResponse contains the response from method CustomLocationsClient.Delete.
type CustomLocationsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientGetResponse contains the response from method CustomLocationsClient.Get.
type CustomLocationsClientGetResponse struct {
	CustomLocationsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientGetResult contains the result from method CustomLocationsClient.Get.
type CustomLocationsClientGetResult struct {
	CustomLocation
}

// CustomLocationsClientListByResourceGroupResponse contains the response from method CustomLocationsClient.ListByResourceGroup.
type CustomLocationsClientListByResourceGroupResponse struct {
	CustomLocationsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientListByResourceGroupResult contains the result from method CustomLocationsClient.ListByResourceGroup.
type CustomLocationsClientListByResourceGroupResult struct {
	CustomLocationListResult
}

// CustomLocationsClientListBySubscriptionResponse contains the response from method CustomLocationsClient.ListBySubscription.
type CustomLocationsClientListBySubscriptionResponse struct {
	CustomLocationsClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientListBySubscriptionResult contains the result from method CustomLocationsClient.ListBySubscription.
type CustomLocationsClientListBySubscriptionResult struct {
	CustomLocationListResult
}

// CustomLocationsClientListEnabledResourceTypesResponse contains the response from method CustomLocationsClient.ListEnabledResourceTypes.
type CustomLocationsClientListEnabledResourceTypesResponse struct {
	CustomLocationsClientListEnabledResourceTypesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientListEnabledResourceTypesResult contains the result from method CustomLocationsClient.ListEnabledResourceTypes.
type CustomLocationsClientListEnabledResourceTypesResult struct {
	EnabledResourceTypesListResult
}

// CustomLocationsClientListOperationsResponse contains the response from method CustomLocationsClient.ListOperations.
type CustomLocationsClientListOperationsResponse struct {
	CustomLocationsClientListOperationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientListOperationsResult contains the result from method CustomLocationsClient.ListOperations.
type CustomLocationsClientListOperationsResult struct {
	CustomLocationOperationsList
}

// CustomLocationsClientUpdateResponse contains the response from method CustomLocationsClient.Update.
type CustomLocationsClientUpdateResponse struct {
	CustomLocationsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomLocationsClientUpdateResult contains the result from method CustomLocationsClient.Update.
type CustomLocationsClientUpdateResult struct {
	CustomLocation
}
