//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfrontdoor_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/frontdoor/armfrontdoor"
)

// x-ms-original-file: specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafListPolicies.json
func ExamplePoliciesClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armfrontdoor.NewPoliciesClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyGet.json
func ExamplePoliciesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armfrontdoor.NewPoliciesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.PoliciesClientGetResult)
}

// x-ms-original-file: specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyCreateOrUpdate.json
func ExamplePoliciesClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armfrontdoor.NewPoliciesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<policy-name>",
		armfrontdoor.WebApplicationFirewallPolicy{
			Properties: &armfrontdoor.WebApplicationFirewallPolicyProperties{
				CustomRules: &armfrontdoor.CustomRuleList{
					Rules: []*armfrontdoor.CustomRule{
						{
							Name:   to.StringPtr("<name>"),
							Action: armfrontdoor.ActionType("Block").ToPtr(),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.StringPtr("192.168.1.0/24"),
										to.StringPtr("10.0.0.0/24")},
									MatchVariable: armfrontdoor.MatchVariable("RemoteAddr").ToPtr(),
									Operator:      armfrontdoor.Operator("IPMatch").ToPtr(),
								}},
							Priority:           to.Int32Ptr(1),
							RateLimitThreshold: to.Int32Ptr(1000),
							RuleType:           armfrontdoor.RuleType("RateLimitRule").ToPtr(),
						},
						{
							Name:   to.StringPtr("<name>"),
							Action: armfrontdoor.ActionType("Block").ToPtr(),
							MatchConditions: []*armfrontdoor.MatchCondition{
								{
									MatchValue: []*string{
										to.StringPtr("CH")},
									MatchVariable: armfrontdoor.MatchVariable("RemoteAddr").ToPtr(),
									Operator:      armfrontdoor.Operator("GeoMatch").ToPtr(),
								},
								{
									MatchValue: []*string{
										to.StringPtr("windows")},
									MatchVariable: armfrontdoor.MatchVariable("RequestHeader").ToPtr(),
									Operator:      armfrontdoor.Operator("Contains").ToPtr(),
									Selector:      to.StringPtr("<selector>"),
									Transforms: []*armfrontdoor.TransformType{
										armfrontdoor.TransformType("Lowercase").ToPtr()},
								}},
							Priority: to.Int32Ptr(2),
							RuleType: armfrontdoor.RuleType("MatchRule").ToPtr(),
						}},
				},
				ManagedRules: &armfrontdoor.ManagedRuleSetList{
					ManagedRuleSets: []*armfrontdoor.ManagedRuleSet{
						{
							Exclusions: []*armfrontdoor.ManagedRuleExclusion{
								{
									MatchVariable:         armfrontdoor.ManagedRuleExclusionMatchVariable("RequestHeaderNames").ToPtr(),
									Selector:              to.StringPtr("<selector>"),
									SelectorMatchOperator: armfrontdoor.ManagedRuleExclusionSelectorMatchOperator("Equals").ToPtr(),
								}},
							RuleGroupOverrides: []*armfrontdoor.ManagedRuleGroupOverride{
								{
									Exclusions: []*armfrontdoor.ManagedRuleExclusion{
										{
											MatchVariable:         armfrontdoor.ManagedRuleExclusionMatchVariable("RequestCookieNames").ToPtr(),
											Selector:              to.StringPtr("<selector>"),
											SelectorMatchOperator: armfrontdoor.ManagedRuleExclusionSelectorMatchOperator("StartsWith").ToPtr(),
										}},
									RuleGroupName: to.StringPtr("<rule-group-name>"),
									Rules: []*armfrontdoor.ManagedRuleOverride{
										{
											Action:       armfrontdoor.ActionType("Redirect").ToPtr(),
											EnabledState: armfrontdoor.ManagedRuleEnabledState("Enabled").ToPtr(),
											Exclusions: []*armfrontdoor.ManagedRuleExclusion{
												{
													MatchVariable:         armfrontdoor.ManagedRuleExclusionMatchVariable("QueryStringArgNames").ToPtr(),
													Selector:              to.StringPtr("<selector>"),
													SelectorMatchOperator: armfrontdoor.ManagedRuleExclusionSelectorMatchOperator("Equals").ToPtr(),
												}},
											RuleID: to.StringPtr("<rule-id>"),
										},
										{
											EnabledState: armfrontdoor.ManagedRuleEnabledState("Disabled").ToPtr(),
											RuleID:       to.StringPtr("<rule-id>"),
										}},
								}},
							RuleSetAction:  armfrontdoor.ManagedRuleSetActionType("Block").ToPtr(),
							RuleSetType:    to.StringPtr("<rule-set-type>"),
							RuleSetVersion: to.StringPtr("<rule-set-version>"),
						}},
				},
				PolicySettings: &armfrontdoor.PolicySettings{
					CustomBlockResponseBody:       to.StringPtr("<custom-block-response-body>"),
					CustomBlockResponseStatusCode: to.Int32Ptr(499),
					EnabledState:                  armfrontdoor.PolicyEnabledState("Enabled").ToPtr(),
					Mode:                          armfrontdoor.PolicyMode("Prevention").ToPtr(),
					RedirectURL:                   to.StringPtr("<redirect-url>"),
					RequestBodyCheck:              armfrontdoor.PolicyRequestBodyCheck("Disabled").ToPtr(),
				},
			},
			SKU: &armfrontdoor.SKU{
				Name: armfrontdoor.SKUName("Classic_AzureFrontDoor").ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.PoliciesClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/frontdoor/resource-manager/Microsoft.Network/stable/2020-11-01/examples/WafPolicyDelete.json
func ExamplePoliciesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armfrontdoor.NewPoliciesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<policy-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
