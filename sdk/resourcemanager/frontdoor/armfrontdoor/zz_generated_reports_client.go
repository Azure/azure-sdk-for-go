//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfrontdoor

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ReportsClient contains the methods for the Reports group.
// Don't use this type directly, use NewReportsClient() instead.
type ReportsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewReportsClient creates a new instance of ReportsClient with the specified values.
func NewReportsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ReportsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ReportsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// GetLatencyScorecards - Gets a Latency Scorecard for a given Experiment
// If the operation fails it returns the *ErrorResponse error type.
func (client *ReportsClient) GetLatencyScorecards(ctx context.Context, resourceGroupName string, profileName string, experimentName string, aggregationInterval LatencyScorecardAggregationInterval, options *ReportsGetLatencyScorecardsOptions) (ReportsGetLatencyScorecardsResponse, error) {
	req, err := client.getLatencyScorecardsCreateRequest(ctx, resourceGroupName, profileName, experimentName, aggregationInterval, options)
	if err != nil {
		return ReportsGetLatencyScorecardsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ReportsGetLatencyScorecardsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ReportsGetLatencyScorecardsResponse{}, client.getLatencyScorecardsHandleError(resp)
	}
	return client.getLatencyScorecardsHandleResponse(resp)
}

// getLatencyScorecardsCreateRequest creates the GetLatencyScorecards request.
func (client *ReportsClient) getLatencyScorecardsCreateRequest(ctx context.Context, resourceGroupName string, profileName string, experimentName string, aggregationInterval LatencyScorecardAggregationInterval, options *ReportsGetLatencyScorecardsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if experimentName == "" {
		return nil, errors.New("parameter experimentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{experimentName}", url.PathEscape(experimentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-11-01")
	if options != nil && options.EndDateTimeUTC != nil {
		reqQP.Set("endDateTimeUTC", *options.EndDateTimeUTC)
	}
	if options != nil && options.Country != nil {
		reqQP.Set("country", *options.Country)
	}
	reqQP.Set("aggregationInterval", string(aggregationInterval))
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLatencyScorecardsHandleResponse handles the GetLatencyScorecards response.
func (client *ReportsClient) getLatencyScorecardsHandleResponse(resp *http.Response) (ReportsGetLatencyScorecardsResponse, error) {
	result := ReportsGetLatencyScorecardsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.LatencyScorecard); err != nil {
		return ReportsGetLatencyScorecardsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLatencyScorecardsHandleError handles the GetLatencyScorecards error response.
func (client *ReportsClient) getLatencyScorecardsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetTimeseries - Gets a Timeseries for a given Experiment
// If the operation fails it returns the *ErrorResponse error type.
func (client *ReportsClient) GetTimeseries(ctx context.Context, resourceGroupName string, profileName string, experimentName string, startDateTimeUTC time.Time, endDateTimeUTC time.Time, aggregationInterval TimeseriesAggregationInterval, timeseriesType TimeseriesType, options *ReportsGetTimeseriesOptions) (ReportsGetTimeseriesResponse, error) {
	req, err := client.getTimeseriesCreateRequest(ctx, resourceGroupName, profileName, experimentName, startDateTimeUTC, endDateTimeUTC, aggregationInterval, timeseriesType, options)
	if err != nil {
		return ReportsGetTimeseriesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ReportsGetTimeseriesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ReportsGetTimeseriesResponse{}, client.getTimeseriesHandleError(resp)
	}
	return client.getTimeseriesHandleResponse(resp)
}

// getTimeseriesCreateRequest creates the GetTimeseries request.
func (client *ReportsClient) getTimeseriesCreateRequest(ctx context.Context, resourceGroupName string, profileName string, experimentName string, startDateTimeUTC time.Time, endDateTimeUTC time.Time, aggregationInterval TimeseriesAggregationInterval, timeseriesType TimeseriesType, options *ReportsGetTimeseriesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if experimentName == "" {
		return nil, errors.New("parameter experimentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{experimentName}", url.PathEscape(experimentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-11-01")
	reqQP.Set("startDateTimeUTC", startDateTimeUTC.Format(time.RFC3339Nano))
	reqQP.Set("endDateTimeUTC", endDateTimeUTC.Format(time.RFC3339Nano))
	reqQP.Set("aggregationInterval", string(aggregationInterval))
	reqQP.Set("timeseriesType", string(timeseriesType))
	if options != nil && options.Endpoint != nil {
		reqQP.Set("endpoint", *options.Endpoint)
	}
	if options != nil && options.Country != nil {
		reqQP.Set("country", *options.Country)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getTimeseriesHandleResponse handles the GetTimeseries response.
func (client *ReportsClient) getTimeseriesHandleResponse(resp *http.Response) (ReportsGetTimeseriesResponse, error) {
	result := ReportsGetTimeseriesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Timeseries); err != nil {
		return ReportsGetTimeseriesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getTimeseriesHandleError handles the GetTimeseries error response.
func (client *ReportsClient) getTimeseriesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
