//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhanaonazure

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationList
}

// ProviderInstancesClientCreatePollerResponse contains the response from method ProviderInstancesClient.Create.
type ProviderInstancesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ProviderInstancesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ProviderInstancesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ProviderInstancesClientCreateResponse, error) {
	respType := ProviderInstancesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ProviderInstance)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ProviderInstancesClientCreatePollerResponse from the provided client and resume token.
func (l *ProviderInstancesClientCreatePollerResponse) Resume(ctx context.Context, client *ProviderInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ProviderInstancesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ProviderInstancesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ProviderInstancesClientCreateResponse contains the response from method ProviderInstancesClient.Create.
type ProviderInstancesClientCreateResponse struct {
	ProviderInstancesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderInstancesClientCreateResult contains the result from method ProviderInstancesClient.Create.
type ProviderInstancesClientCreateResult struct {
	ProviderInstance
}

// ProviderInstancesClientDeletePollerResponse contains the response from method ProviderInstancesClient.Delete.
type ProviderInstancesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ProviderInstancesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ProviderInstancesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ProviderInstancesClientDeleteResponse, error) {
	respType := ProviderInstancesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ProviderInstancesClientDeletePollerResponse from the provided client and resume token.
func (l *ProviderInstancesClientDeletePollerResponse) Resume(ctx context.Context, client *ProviderInstancesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ProviderInstancesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ProviderInstancesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ProviderInstancesClientDeleteResponse contains the response from method ProviderInstancesClient.Delete.
type ProviderInstancesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderInstancesClientGetResponse contains the response from method ProviderInstancesClient.Get.
type ProviderInstancesClientGetResponse struct {
	ProviderInstancesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderInstancesClientGetResult contains the result from method ProviderInstancesClient.Get.
type ProviderInstancesClientGetResult struct {
	ProviderInstance
}

// ProviderInstancesClientListResponse contains the response from method ProviderInstancesClient.List.
type ProviderInstancesClientListResponse struct {
	ProviderInstancesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ProviderInstancesClientListResult contains the result from method ProviderInstancesClient.List.
type ProviderInstancesClientListResult struct {
	ProviderInstanceListResult
}

// SapMonitorsClientCreatePollerResponse contains the response from method SapMonitorsClient.Create.
type SapMonitorsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SapMonitorsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SapMonitorsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SapMonitorsClientCreateResponse, error) {
	respType := SapMonitorsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SapMonitor)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SapMonitorsClientCreatePollerResponse from the provided client and resume token.
func (l *SapMonitorsClientCreatePollerResponse) Resume(ctx context.Context, client *SapMonitorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SapMonitorsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SapMonitorsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SapMonitorsClientCreateResponse contains the response from method SapMonitorsClient.Create.
type SapMonitorsClientCreateResponse struct {
	SapMonitorsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SapMonitorsClientCreateResult contains the result from method SapMonitorsClient.Create.
type SapMonitorsClientCreateResult struct {
	SapMonitor
}

// SapMonitorsClientDeletePollerResponse contains the response from method SapMonitorsClient.Delete.
type SapMonitorsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SapMonitorsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SapMonitorsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SapMonitorsClientDeleteResponse, error) {
	respType := SapMonitorsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SapMonitorsClientDeletePollerResponse from the provided client and resume token.
func (l *SapMonitorsClientDeletePollerResponse) Resume(ctx context.Context, client *SapMonitorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SapMonitorsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &SapMonitorsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SapMonitorsClientDeleteResponse contains the response from method SapMonitorsClient.Delete.
type SapMonitorsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SapMonitorsClientGetResponse contains the response from method SapMonitorsClient.Get.
type SapMonitorsClientGetResponse struct {
	SapMonitorsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SapMonitorsClientGetResult contains the result from method SapMonitorsClient.Get.
type SapMonitorsClientGetResult struct {
	SapMonitor
}

// SapMonitorsClientListResponse contains the response from method SapMonitorsClient.List.
type SapMonitorsClientListResponse struct {
	SapMonitorsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SapMonitorsClientListResult contains the result from method SapMonitorsClient.List.
type SapMonitorsClientListResult struct {
	SapMonitorListResult
}

// SapMonitorsClientUpdateResponse contains the response from method SapMonitorsClient.Update.
type SapMonitorsClientUpdateResponse struct {
	SapMonitorsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SapMonitorsClientUpdateResult contains the result from method SapMonitorsClient.Update.
type SapMonitorsClientUpdateResult struct {
	SapMonitor
}
