//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhdinsight

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LocationsClient contains the methods for the Locations group.
// Don't use this type directly, use NewLocationsClient() instead.
type LocationsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewLocationsClient creates a new instance of LocationsClient with the specified values.
func NewLocationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *LocationsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &LocationsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CheckNameAvailability - Check the cluster name is available or not.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) CheckNameAvailability(ctx context.Context, location string, parameters NameAvailabilityCheckRequestParameters, options *LocationsCheckNameAvailabilityOptions) (LocationsCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, location, parameters, options)
	if err != nil {
		return LocationsCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsCheckNameAvailabilityResponse{}, client.checkNameAvailabilityHandleError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *LocationsClient) checkNameAvailabilityCreateRequest(ctx context.Context, location string, parameters NameAvailabilityCheckRequestParameters, options *LocationsCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *LocationsClient) checkNameAvailabilityHandleResponse(resp *http.Response) (LocationsCheckNameAvailabilityResponse, error) {
	result := LocationsCheckNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.NameAvailabilityCheckResult); err != nil {
		return LocationsCheckNameAvailabilityResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *LocationsClient) checkNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAzureAsyncOperationStatus - Get the async operation status.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) GetAzureAsyncOperationStatus(ctx context.Context, location string, operationID string, options *LocationsGetAzureAsyncOperationStatusOptions) (LocationsGetAzureAsyncOperationStatusResponse, error) {
	req, err := client.getAzureAsyncOperationStatusCreateRequest(ctx, location, operationID, options)
	if err != nil {
		return LocationsGetAzureAsyncOperationStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsGetAzureAsyncOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsGetAzureAsyncOperationStatusResponse{}, client.getAzureAsyncOperationStatusHandleError(resp)
	}
	return client.getAzureAsyncOperationStatusHandleResponse(resp)
}

// getAzureAsyncOperationStatusCreateRequest creates the GetAzureAsyncOperationStatus request.
func (client *LocationsClient) getAzureAsyncOperationStatusCreateRequest(ctx context.Context, location string, operationID string, options *LocationsGetAzureAsyncOperationStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/azureasyncoperations/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAzureAsyncOperationStatusHandleResponse handles the GetAzureAsyncOperationStatus response.
func (client *LocationsClient) getAzureAsyncOperationStatusHandleResponse(resp *http.Response) (LocationsGetAzureAsyncOperationStatusResponse, error) {
	result := LocationsGetAzureAsyncOperationStatusResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AsyncOperationResult); err != nil {
		return LocationsGetAzureAsyncOperationStatusResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getAzureAsyncOperationStatusHandleError handles the GetAzureAsyncOperationStatus error response.
func (client *LocationsClient) getAzureAsyncOperationStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetCapabilities - Gets the capabilities for the specified location.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) GetCapabilities(ctx context.Context, location string, options *LocationsGetCapabilitiesOptions) (LocationsGetCapabilitiesResponse, error) {
	req, err := client.getCapabilitiesCreateRequest(ctx, location, options)
	if err != nil {
		return LocationsGetCapabilitiesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsGetCapabilitiesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsGetCapabilitiesResponse{}, client.getCapabilitiesHandleError(resp)
	}
	return client.getCapabilitiesHandleResponse(resp)
}

// getCapabilitiesCreateRequest creates the GetCapabilities request.
func (client *LocationsClient) getCapabilitiesCreateRequest(ctx context.Context, location string, options *LocationsGetCapabilitiesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/capabilities"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getCapabilitiesHandleResponse handles the GetCapabilities response.
func (client *LocationsClient) getCapabilitiesHandleResponse(resp *http.Response) (LocationsGetCapabilitiesResponse, error) {
	result := LocationsGetCapabilitiesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CapabilitiesResult); err != nil {
		return LocationsGetCapabilitiesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getCapabilitiesHandleError handles the GetCapabilities error response.
func (client *LocationsClient) getCapabilitiesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBillingSpecs - Lists the billingSpecs for the specified subscription and location.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) ListBillingSpecs(ctx context.Context, location string, options *LocationsListBillingSpecsOptions) (LocationsListBillingSpecsResponse, error) {
	req, err := client.listBillingSpecsCreateRequest(ctx, location, options)
	if err != nil {
		return LocationsListBillingSpecsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsListBillingSpecsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsListBillingSpecsResponse{}, client.listBillingSpecsHandleError(resp)
	}
	return client.listBillingSpecsHandleResponse(resp)
}

// listBillingSpecsCreateRequest creates the ListBillingSpecs request.
func (client *LocationsClient) listBillingSpecsCreateRequest(ctx context.Context, location string, options *LocationsListBillingSpecsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/billingSpecs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBillingSpecsHandleResponse handles the ListBillingSpecs response.
func (client *LocationsClient) listBillingSpecsHandleResponse(resp *http.Response) (LocationsListBillingSpecsResponse, error) {
	result := LocationsListBillingSpecsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.BillingResponseListResult); err != nil {
		return LocationsListBillingSpecsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBillingSpecsHandleError handles the ListBillingSpecs error response.
func (client *LocationsClient) listBillingSpecsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListUsages - Lists the usages for the specified location.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) ListUsages(ctx context.Context, location string, options *LocationsListUsagesOptions) (LocationsListUsagesResponse, error) {
	req, err := client.listUsagesCreateRequest(ctx, location, options)
	if err != nil {
		return LocationsListUsagesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsListUsagesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsListUsagesResponse{}, client.listUsagesHandleError(resp)
	}
	return client.listUsagesHandleResponse(resp)
}

// listUsagesCreateRequest creates the ListUsages request.
func (client *LocationsClient) listUsagesCreateRequest(ctx context.Context, location string, options *LocationsListUsagesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listUsagesHandleResponse handles the ListUsages response.
func (client *LocationsClient) listUsagesHandleResponse(resp *http.Response) (LocationsListUsagesResponse, error) {
	result := LocationsListUsagesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.UsagesListResult); err != nil {
		return LocationsListUsagesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listUsagesHandleError handles the ListUsages error response.
func (client *LocationsClient) listUsagesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ValidateClusterCreateRequest - Validate the cluster create request spec is valid or not.
// If the operation fails it returns the *ErrorResponse error type.
func (client *LocationsClient) ValidateClusterCreateRequest(ctx context.Context, location string, parameters ClusterCreateRequestValidationParameters, options *LocationsValidateClusterCreateRequestOptions) (LocationsValidateClusterCreateRequestResponse, error) {
	req, err := client.validateClusterCreateRequestCreateRequest(ctx, location, parameters, options)
	if err != nil {
		return LocationsValidateClusterCreateRequestResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return LocationsValidateClusterCreateRequestResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return LocationsValidateClusterCreateRequestResponse{}, client.validateClusterCreateRequestHandleError(resp)
	}
	return client.validateClusterCreateRequestHandleResponse(resp)
}

// validateClusterCreateRequestCreateRequest creates the ValidateClusterCreateRequest request.
func (client *LocationsClient) validateClusterCreateRequestCreateRequest(ctx context.Context, location string, parameters ClusterCreateRequestValidationParameters, options *LocationsValidateClusterCreateRequestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// validateClusterCreateRequestHandleResponse handles the ValidateClusterCreateRequest response.
func (client *LocationsClient) validateClusterCreateRequestHandleResponse(resp *http.Response) (LocationsValidateClusterCreateRequestResponse, error) {
	result := LocationsValidateClusterCreateRequestResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClusterCreateValidationResult); err != nil {
		return LocationsValidateClusterCreateRequestResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// validateClusterCreateRequestHandleError handles the ValidateClusterCreateRequest error response.
func (client *LocationsClient) validateClusterCreateRequestHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
