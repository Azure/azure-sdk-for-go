//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hdinsightcontainers/armhdinsightcontainers"
	"net/http"
	"net/url"
	"regexp"
)

// ClusterLibrariesServer is a fake server for instances of the armhdinsightcontainers.ClusterLibrariesClient type.
type ClusterLibrariesServer struct {
	// NewListPager is the fake for method ClusterLibrariesClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, clusterPoolName string, clusterName string, category armhdinsightcontainers.Category, options *armhdinsightcontainers.ClusterLibrariesClientListOptions) (resp azfake.PagerResponder[armhdinsightcontainers.ClusterLibrariesClientListResponse])

	// BeginManageLibraries is the fake for method ClusterLibrariesClient.BeginManageLibraries
	// HTTP status codes to indicate success: http.StatusAccepted
	BeginManageLibraries func(ctx context.Context, resourceGroupName string, clusterPoolName string, clusterName string, operation armhdinsightcontainers.ClusterLibraryManagementOperation, options *armhdinsightcontainers.ClusterLibrariesClientBeginManageLibrariesOptions) (resp azfake.PollerResponder[armhdinsightcontainers.ClusterLibrariesClientManageLibrariesResponse], errResp azfake.ErrorResponder)
}

// NewClusterLibrariesServerTransport creates a new instance of ClusterLibrariesServerTransport with the provided implementation.
// The returned ClusterLibrariesServerTransport instance is connected to an instance of armhdinsightcontainers.ClusterLibrariesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewClusterLibrariesServerTransport(srv *ClusterLibrariesServer) *ClusterLibrariesServerTransport {
	return &ClusterLibrariesServerTransport{
		srv:                  srv,
		newListPager:         newTracker[azfake.PagerResponder[armhdinsightcontainers.ClusterLibrariesClientListResponse]](),
		beginManageLibraries: newTracker[azfake.PollerResponder[armhdinsightcontainers.ClusterLibrariesClientManageLibrariesResponse]](),
	}
}

// ClusterLibrariesServerTransport connects instances of armhdinsightcontainers.ClusterLibrariesClient to instances of ClusterLibrariesServer.
// Don't use this type directly, use NewClusterLibrariesServerTransport instead.
type ClusterLibrariesServerTransport struct {
	srv                  *ClusterLibrariesServer
	newListPager         *tracker[azfake.PagerResponder[armhdinsightcontainers.ClusterLibrariesClientListResponse]]
	beginManageLibraries *tracker[azfake.PollerResponder[armhdinsightcontainers.ClusterLibrariesClientManageLibrariesResponse]]
}

// Do implements the policy.Transporter interface for ClusterLibrariesServerTransport.
func (c *ClusterLibrariesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ClusterLibrariesClient.NewListPager":
		resp, err = c.dispatchNewListPager(req)
	case "ClusterLibrariesClient.BeginManageLibraries":
		resp, err = c.dispatchBeginManageLibraries(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *ClusterLibrariesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := c.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HDInsight/clusterpools/(?P<clusterPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/clusters/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/libraries`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		clusterPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterPoolName")])
		if err != nil {
			return nil, err
		}
		clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
		if err != nil {
			return nil, err
		}
		categoryParam, err := parseWithCast(qp.Get("$category"), func(v string) (armhdinsightcontainers.Category, error) {
			p, unescapeErr := url.QueryUnescape(v)
			if unescapeErr != nil {
				return "", unescapeErr
			}
			return armhdinsightcontainers.Category(p), nil
		})
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListPager(resourceGroupNameParam, clusterPoolNameParam, clusterNameParam, categoryParam, nil)
		newListPager = &resp
		c.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armhdinsightcontainers.ClusterLibrariesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		c.newListPager.remove(req)
	}
	return resp, nil
}

func (c *ClusterLibrariesServerTransport) dispatchBeginManageLibraries(req *http.Request) (*http.Response, error) {
	if c.srv.BeginManageLibraries == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginManageLibraries not implemented")}
	}
	beginManageLibraries := c.beginManageLibraries.get(req)
	if beginManageLibraries == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HDInsight/clusterpools/(?P<clusterPoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/clusters/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/manageLibraries`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armhdinsightcontainers.ClusterLibraryManagementOperation](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		clusterPoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterPoolName")])
		if err != nil {
			return nil, err
		}
		clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginManageLibraries(req.Context(), resourceGroupNameParam, clusterPoolNameParam, clusterNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginManageLibraries = &respr
		c.beginManageLibraries.add(req, beginManageLibraries)
	}

	resp, err := server.PollerResponderNext(beginManageLibraries, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted}, resp.StatusCode) {
		c.beginManageLibraries.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginManageLibraries) {
		c.beginManageLibraries.remove(req)
	}

	return resp, nil
}
