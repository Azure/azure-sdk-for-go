//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhealthbot

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// BotsCreatePollerResponse contains the response from method Bots.Create.
type BotsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BotsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BotsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BotsCreateResponse, error) {
	respType := BotsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.HealthBot)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BotsCreatePollerResponse from the provided client and resume token.
func (l *BotsCreatePollerResponse) Resume(ctx context.Context, client *BotsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BotsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &BotsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BotsCreateResponse contains the response from method Bots.Create.
type BotsCreateResponse struct {
	BotsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsCreateResult contains the result from method Bots.Create.
type BotsCreateResult struct {
	HealthBot
}

// BotsDeletePollerResponse contains the response from method Bots.Delete.
type BotsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BotsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BotsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BotsDeleteResponse, error) {
	respType := BotsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BotsDeletePollerResponse from the provided client and resume token.
func (l *BotsDeletePollerResponse) Resume(ctx context.Context, client *BotsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BotsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BotsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BotsDeleteResponse contains the response from method Bots.Delete.
type BotsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsGetResponse contains the response from method Bots.Get.
type BotsGetResponse struct {
	BotsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsGetResult contains the result from method Bots.Get.
type BotsGetResult struct {
	HealthBot
}

// BotsListByResourceGroupResponse contains the response from method Bots.ListByResourceGroup.
type BotsListByResourceGroupResponse struct {
	BotsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsListByResourceGroupResult contains the result from method Bots.ListByResourceGroup.
type BotsListByResourceGroupResult struct {
	BotResponseList
}

// BotsListResponse contains the response from method Bots.List.
type BotsListResponse struct {
	BotsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsListResult contains the result from method Bots.List.
type BotsListResult struct {
	BotResponseList
}

// BotsUpdateResponse contains the response from method Bots.Update.
type BotsUpdateResponse struct {
	BotsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BotsUpdateResult contains the result from method Bots.Update.
type BotsUpdateResult struct {
	HealthBot
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	AvailableOperations
}
