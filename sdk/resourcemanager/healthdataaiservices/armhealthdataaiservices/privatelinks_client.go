// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhealthdataaiservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PrivateLinksClient - Operations for private links on DeidService resource
// Don't use this type directly, use NewPrivateLinksClient() instead.
type PrivateLinksClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewPrivateLinksClient creates a new instance of PrivateLinksClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewPrivateLinksClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*PrivateLinksClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &PrivateLinksClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewListByDeidServicePager - List private links on the given resource
//
// Generated from API version 2024-09-20
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - deidServiceName - The name of the deid service
//   - options - PrivateLinksClientListByDeidServiceOptions contains the optional parameters for the PrivateLinksClient.NewListByDeidServicePager
//     method.
func (client *PrivateLinksClient) NewListByDeidServicePager(resourceGroupName string, deidServiceName string, options *PrivateLinksClientListByDeidServiceOptions) *runtime.Pager[PrivateLinksClientListByDeidServiceResponse] {
	return runtime.NewPager(runtime.PagingHandler[PrivateLinksClientListByDeidServiceResponse]{
		More: func(page PrivateLinksClientListByDeidServiceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *PrivateLinksClientListByDeidServiceResponse) (PrivateLinksClientListByDeidServiceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "PrivateLinksClient.NewListByDeidServicePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByDeidServiceCreateRequest(ctx, resourceGroupName, deidServiceName, options)
			}, nil)
			if err != nil {
				return PrivateLinksClientListByDeidServiceResponse{}, err
			}
			return client.listByDeidServiceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByDeidServiceCreateRequest creates the ListByDeidService request.
func (client *PrivateLinksClient) listByDeidServiceCreateRequest(ctx context.Context, resourceGroupName string, deidServiceName string, _ *PrivateLinksClientListByDeidServiceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HealthDataAIServices/deidServices/{deidServiceName}/privateLinkResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if deidServiceName == "" {
		return nil, errors.New("parameter deidServiceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deidServiceName}", url.PathEscape(deidServiceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-09-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByDeidServiceHandleResponse handles the ListByDeidService response.
func (client *PrivateLinksClient) listByDeidServiceHandleResponse(resp *http.Response) (PrivateLinksClientListByDeidServiceResponse, error) {
	result := PrivateLinksClientListByDeidServiceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PrivateLinkResourceListResult); err != nil {
		return PrivateLinksClientListByDeidServiceResponse{}, err
	}
	return result, nil
}
