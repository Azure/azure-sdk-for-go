//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armhybridcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CloudConnectionsClient contains the methods for the CloudConnections group.
// Don't use this type directly, use NewCloudConnectionsClient() instead.
type CloudConnectionsClient struct {
	internal            *arm.Client
	subscriptionID      string
	cloudConnectionName string
}

// NewCloudConnectionsClient creates a new instance of CloudConnectionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - cloudConnectionName - The name of the cloud connection resource
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCloudConnectionsClient(subscriptionID string, cloudConnectionName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CloudConnectionsClient, error) {
	cl, err := arm.NewClient(moduleName+".CloudConnectionsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CloudConnectionsClient{
		subscriptionID:      subscriptionID,
		cloudConnectionName: cloudConnectionName,
		internal:            cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a cloud connection resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - parameters - The parameters to provide for the created cloud connection.
//   - options - CloudConnectionsClientBeginCreateOrUpdateOptions contains the optional parameters for the CloudConnectionsClient.BeginCreateOrUpdate
//     method.
func (client *CloudConnectionsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*runtime.Poller[CloudConnectionsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, parameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CloudConnectionsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectionsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Creates or updates a cloud connection resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *CloudConnectionsClient) createOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CloudConnectionsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, parameters CloudConnection, options *CloudConnectionsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// BeginDelete - Deletes a specified cloud connection resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectionsClientBeginDeleteOptions contains the optional parameters for the CloudConnectionsClient.BeginDelete
//     method.
func (client *CloudConnectionsClient) BeginDelete(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*runtime.Poller[CloudConnectionsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CloudConnectionsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectionsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Deletes a specified cloud connection resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *CloudConnectionsClient) deleteOperation(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CloudConnectionsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the specified cloud connection in a specified resource group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectionsClientGetOptions contains the optional parameters for the CloudConnectionsClient.Get method.
func (client *CloudConnectionsClient) Get(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientGetOptions) (CloudConnectionsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectionsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CloudConnectionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CloudConnectionsClient) getHandleResponse(resp *http.Response) (CloudConnectionsClientGetResponse, error) {
	result := CloudConnectionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnection); err != nil {
		return CloudConnectionsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Return list of cloud connections in a resource group.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectionsClientListByResourceGroupOptions contains the optional parameters for the CloudConnectionsClient.NewListByResourceGroupPager
//     method.
func (client *CloudConnectionsClient) NewListByResourceGroupPager(resourceGroupName string, options *CloudConnectionsClientListByResourceGroupOptions) *runtime.Pager[CloudConnectionsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CloudConnectionsClientListByResourceGroupResponse]{
		More: func(page CloudConnectionsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CloudConnectionsClientListByResourceGroupResponse) (CloudConnectionsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CloudConnectionsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CloudConnectionsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CloudConnectionsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CloudConnectionsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectionsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CloudConnectionsClient) listByResourceGroupHandleResponse(resp *http.Response) (CloudConnectionsClientListByResourceGroupResponse, error) {
	result := CloudConnectionsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnectionListResult); err != nil {
		return CloudConnectionsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Return list of cloud connections in a subscription.
//
// Generated from API version 2023-01-01-preview
//   - options - CloudConnectionsClientListBySubscriptionOptions contains the optional parameters for the CloudConnectionsClient.NewListBySubscriptionPager
//     method.
func (client *CloudConnectionsClient) NewListBySubscriptionPager(options *CloudConnectionsClientListBySubscriptionOptions) *runtime.Pager[CloudConnectionsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CloudConnectionsClientListBySubscriptionResponse]{
		More: func(page CloudConnectionsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CloudConnectionsClientListBySubscriptionResponse) (CloudConnectionsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CloudConnectionsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CloudConnectionsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CloudConnectionsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CloudConnectionsClient) listBySubscriptionCreateRequest(ctx context.Context, options *CloudConnectionsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CloudConnectionsClient) listBySubscriptionHandleResponse(resp *http.Response) (CloudConnectionsClientListBySubscriptionResponse, error) {
	result := CloudConnectionsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnectionListResult); err != nil {
		return CloudConnectionsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Updates the specified cloud connection tags.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - parameters - Parameters supplied to update cloud connection tags.
//   - options - CloudConnectionsClientUpdateTagsOptions contains the optional parameters for the CloudConnectionsClient.UpdateTags
//     method.
func (client *CloudConnectionsClient) UpdateTags(ctx context.Context, resourceGroupName string, parameters TagsObject, options *CloudConnectionsClientUpdateTagsOptions) (CloudConnectionsClientUpdateTagsResponse, error) {
	req, err := client.updateTagsCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectionsClientUpdateTagsResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateTagsHandleResponse(resp)
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *CloudConnectionsClient) updateTagsCreateRequest(ctx context.Context, resourceGroupName string, parameters TagsObject, options *CloudConnectionsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectionName == "" {
		return nil, errors.New("parameter client.cloudConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectionName}", url.PathEscape(client.cloudConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *CloudConnectionsClient) updateTagsHandleResponse(resp *http.Response) (CloudConnectionsClientUpdateTagsResponse, error) {
	result := CloudConnectionsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnection); err != nil {
		return CloudConnectionsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
