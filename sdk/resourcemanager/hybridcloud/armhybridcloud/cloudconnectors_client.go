//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armhybridcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CloudConnectorsClient contains the methods for the CloudConnectors group.
// Don't use this type directly, use NewCloudConnectorsClient() instead.
type CloudConnectorsClient struct {
	internal           *arm.Client
	subscriptionID     string
	cloudConnectorName string
}

// NewCloudConnectorsClient creates a new instance of CloudConnectorsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - cloudConnectorName - The name of the cloud connector resource
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewCloudConnectorsClient(subscriptionID string, cloudConnectorName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CloudConnectorsClient, error) {
	cl, err := arm.NewClient(moduleName+".CloudConnectorsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CloudConnectorsClient{
		subscriptionID:     subscriptionID,
		cloudConnectorName: cloudConnectorName,
		internal:           cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates a cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - parameters - The parameters to provide for the created cloud connector resource.
//   - options - CloudConnectorsClientBeginCreateOrUpdateOptions contains the optional parameters for the CloudConnectorsClient.BeginCreateOrUpdate
//     method.
func (client *CloudConnectorsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnector, options *CloudConnectorsClientBeginCreateOrUpdateOptions) (*runtime.Poller[CloudConnectorsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, parameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CloudConnectorsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectorsClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Creates or updates a cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *CloudConnectorsClient) createOrUpdate(ctx context.Context, resourceGroupName string, parameters CloudConnector, options *CloudConnectorsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CloudConnectorsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, parameters CloudConnector, options *CloudConnectorsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectorName == "" {
		return nil, errors.New("parameter client.cloudConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectorName}", url.PathEscape(client.cloudConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// BeginDelete - Deletes a specified cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectorsClientBeginDeleteOptions contains the optional parameters for the CloudConnectorsClient.BeginDelete
//     method.
func (client *CloudConnectorsClient) BeginDelete(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDeleteOptions) (*runtime.Poller[CloudConnectorsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CloudConnectorsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectorsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Deletes a specified cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *CloudConnectorsClient) deleteOperation(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CloudConnectorsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectorName == "" {
		return nil, errors.New("parameter client.cloudConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectorName}", url.PathEscape(client.cloudConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginDiscoverResources - Returns a list of discovered remote cloud resources via this cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectorsClientBeginDiscoverResourcesOptions contains the optional parameters for the CloudConnectorsClient.BeginDiscoverResources
//     method.
func (client *CloudConnectorsClient) BeginDiscoverResources(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDiscoverResourcesOptions) (*runtime.Poller[CloudConnectorsClientDiscoverResourcesResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.discoverResources(ctx, resourceGroupName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CloudConnectorsClientDiscoverResourcesResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[CloudConnectorsClientDiscoverResourcesResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// DiscoverResources - Returns a list of discovered remote cloud resources via this cloud connector resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *CloudConnectorsClient) discoverResources(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDiscoverResourcesOptions) (*http.Response, error) {
	req, err := client.discoverResourcesCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// discoverResourcesCreateRequest creates the DiscoverResources request.
func (client *CloudConnectorsClient) discoverResourcesCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientBeginDiscoverResourcesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}/discoverResources"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectorName == "" {
		return nil, errors.New("parameter client.cloudConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectorName}", url.PathEscape(client.cloudConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the specified cloud connector in a specified resource group.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectorsClientGetOptions contains the optional parameters for the CloudConnectorsClient.Get method.
func (client *CloudConnectorsClient) Get(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientGetOptions) (CloudConnectorsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, options)
	if err != nil {
		return CloudConnectorsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CloudConnectorsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectorsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *CloudConnectorsClient) getCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectorName == "" {
		return nil, errors.New("parameter client.cloudConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectorName}", url.PathEscape(client.cloudConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CloudConnectorsClient) getHandleResponse(resp *http.Response) (CloudConnectorsClientGetResponse, error) {
	result := CloudConnectorsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnector); err != nil {
		return CloudConnectorsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Return list of cloud connectors in a resource group.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CloudConnectorsClientListByResourceGroupOptions contains the optional parameters for the CloudConnectorsClient.NewListByResourceGroupPager
//     method.
func (client *CloudConnectorsClient) NewListByResourceGroupPager(resourceGroupName string, options *CloudConnectorsClientListByResourceGroupOptions) *runtime.Pager[CloudConnectorsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CloudConnectorsClientListByResourceGroupResponse]{
		More: func(page CloudConnectorsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CloudConnectorsClientListByResourceGroupResponse) (CloudConnectorsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CloudConnectorsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CloudConnectorsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CloudConnectorsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CloudConnectorsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *CloudConnectorsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CloudConnectorsClient) listByResourceGroupHandleResponse(resp *http.Response) (CloudConnectorsClientListByResourceGroupResponse, error) {
	result := CloudConnectorsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnectorListResult); err != nil {
		return CloudConnectorsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Return list of cloud connectors in a subscription.
//
// Generated from API version 2023-01-01-preview
//   - options - CloudConnectorsClientListBySubscriptionOptions contains the optional parameters for the CloudConnectorsClient.NewListBySubscriptionPager
//     method.
func (client *CloudConnectorsClient) NewListBySubscriptionPager(options *CloudConnectorsClientListBySubscriptionOptions) *runtime.Pager[CloudConnectorsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CloudConnectorsClientListBySubscriptionResponse]{
		More: func(page CloudConnectorsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CloudConnectorsClientListBySubscriptionResponse) (CloudConnectorsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return CloudConnectorsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return CloudConnectorsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return CloudConnectorsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CloudConnectorsClient) listBySubscriptionCreateRequest(ctx context.Context, options *CloudConnectorsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnectors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CloudConnectorsClient) listBySubscriptionHandleResponse(resp *http.Response) (CloudConnectorsClientListBySubscriptionResponse, error) {
	result := CloudConnectorsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnectorListResult); err != nil {
		return CloudConnectorsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// UpdateTags - Updates the specified cloud connector tags.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - parameters - Parameters supplied to update cloud connector tags.
//   - options - CloudConnectorsClientUpdateTagsOptions contains the optional parameters for the CloudConnectorsClient.UpdateTags
//     method.
func (client *CloudConnectorsClient) UpdateTags(ctx context.Context, resourceGroupName string, parameters TagsObject, options *CloudConnectorsClientUpdateTagsOptions) (CloudConnectorsClientUpdateTagsResponse, error) {
	req, err := client.updateTagsCreateRequest(ctx, resourceGroupName, parameters, options)
	if err != nil {
		return CloudConnectorsClientUpdateTagsResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CloudConnectorsClientUpdateTagsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return CloudConnectorsClientUpdateTagsResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateTagsHandleResponse(resp)
}

// updateTagsCreateRequest creates the UpdateTags request.
func (client *CloudConnectorsClient) updateTagsCreateRequest(ctx context.Context, resourceGroupName string, parameters TagsObject, options *CloudConnectorsClientUpdateTagsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.cloudConnectorName == "" {
		return nil, errors.New("parameter client.cloudConnectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{cloudConnectorName}", url.PathEscape(client.cloudConnectorName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateTagsHandleResponse handles the UpdateTags response.
func (client *CloudConnectorsClient) updateTagsHandleResponse(resp *http.Response) (CloudConnectorsClientUpdateTagsResponse, error) {
	result := CloudConnectorsClientUpdateTagsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CloudConnector); err != nil {
		return CloudConnectorsClientUpdateTagsResponse{}, err
	}
	return result, nil
}
