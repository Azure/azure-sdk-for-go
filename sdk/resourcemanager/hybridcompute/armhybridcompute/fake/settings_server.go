//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridcompute/armhybridcompute/v2"
	"net/http"
	"net/url"
	"regexp"
)

// SettingsServer is a fake server for instances of the armhybridcompute.SettingsClient type.
type SettingsServer struct {
	// Get is the fake for method SettingsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, baseProvider string, baseResourceType string, baseResourceName string, settingsResourceName string, options *armhybridcompute.SettingsClientGetOptions) (resp azfake.Responder[armhybridcompute.SettingsClientGetResponse], errResp azfake.ErrorResponder)

	// Patch is the fake for method SettingsClient.Patch
	// HTTP status codes to indicate success: http.StatusOK
	Patch func(ctx context.Context, resourceGroupName string, baseProvider string, baseResourceType string, baseResourceName string, settingsResourceName string, parameters armhybridcompute.Settings, options *armhybridcompute.SettingsClientPatchOptions) (resp azfake.Responder[armhybridcompute.SettingsClientPatchResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method SettingsClient.Update
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	Update func(ctx context.Context, resourceGroupName string, baseProvider string, baseResourceType string, baseResourceName string, settingsResourceName string, parameters armhybridcompute.Settings, options *armhybridcompute.SettingsClientUpdateOptions) (resp azfake.Responder[armhybridcompute.SettingsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSettingsServerTransport creates a new instance of SettingsServerTransport with the provided implementation.
// The returned SettingsServerTransport instance is connected to an instance of armhybridcompute.SettingsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSettingsServerTransport(srv *SettingsServer) *SettingsServerTransport {
	return &SettingsServerTransport{srv: srv}
}

// SettingsServerTransport connects instances of armhybridcompute.SettingsClient to instances of SettingsServer.
// Don't use this type directly, use NewSettingsServerTransport instead.
type SettingsServerTransport struct {
	srv *SettingsServer
}

// Do implements the policy.Transporter interface for SettingsServerTransport.
func (s *SettingsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SettingsClient.Get":
		resp, err = s.dispatchGet(req)
	case "SettingsClient.Patch":
		resp, err = s.dispatchPatch(req)
	case "SettingsClient.Update":
		resp, err = s.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SettingsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<baseProvider>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceType>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridCompute/settings/(?P<settingsResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	baseProviderParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseProvider")])
	if err != nil {
		return nil, err
	}
	baseResourceTypeParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceType")])
	if err != nil {
		return nil, err
	}
	baseResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceName")])
	if err != nil {
		return nil, err
	}
	settingsResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("settingsResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, baseProviderParam, baseResourceTypeParam, baseResourceNameParam, settingsResourceNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Settings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SettingsServerTransport) dispatchPatch(req *http.Request) (*http.Response, error) {
	if s.srv.Patch == nil {
		return nil, &nonRetriableError{errors.New("fake for method Patch not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<baseProvider>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceType>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridCompute/settings/(?P<settingsResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armhybridcompute.Settings](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	baseProviderParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseProvider")])
	if err != nil {
		return nil, err
	}
	baseResourceTypeParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceType")])
	if err != nil {
		return nil, err
	}
	baseResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceName")])
	if err != nil {
		return nil, err
	}
	settingsResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("settingsResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Patch(req.Context(), resourceGroupNameParam, baseProviderParam, baseResourceTypeParam, baseResourceNameParam, settingsResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Settings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SettingsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/(?P<baseProvider>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceType>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/(?P<baseResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.HybridCompute/settings/(?P<settingsResourceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armhybridcompute.Settings](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	baseProviderParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseProvider")])
	if err != nil {
		return nil, err
	}
	baseResourceTypeParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceType")])
	if err != nil {
		return nil, err
	}
	baseResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("baseResourceName")])
	if err != nil {
		return nil, err
	}
	settingsResourceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("settingsResourceName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), resourceGroupNameParam, baseProviderParam, baseResourceTypeParam, baseResourceNameParam, settingsResourceNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Settings, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
