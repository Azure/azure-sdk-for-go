//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridcompute

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// NetworkConfigurationsClient contains the methods for the NetworkConfigurations group.
// Don't use this type directly, use NewNetworkConfigurationsClient() instead.
type NetworkConfigurationsClient struct {
	internal *arm.Client
}

// NewNetworkConfigurationsClient creates a new instance of NetworkConfigurationsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNetworkConfigurationsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*NetworkConfigurationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NetworkConfigurationsClient{
		internal: cl,
	}
	return client, nil
}

// CreateOrUpdate - Create or update the NetworkConfiguration of the target resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-03-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - parameters - Network Configuration details
//   - options - NetworkConfigurationsClientCreateOrUpdateOptions contains the optional parameters for the NetworkConfigurationsClient.CreateOrUpdate
//     method.
func (client *NetworkConfigurationsClient) CreateOrUpdate(ctx context.Context, resourceURI string, parameters NetworkConfiguration, options *NetworkConfigurationsClientCreateOrUpdateOptions) (NetworkConfigurationsClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "NetworkConfigurationsClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceURI, parameters, options)
	if err != nil {
		return NetworkConfigurationsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NetworkConfigurationsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return NetworkConfigurationsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *NetworkConfigurationsClient) createOrUpdateCreateRequest(ctx context.Context, resourceURI string, parameters NetworkConfiguration, options *NetworkConfigurationsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *NetworkConfigurationsClient) createOrUpdateHandleResponse(resp *http.Response) (NetworkConfigurationsClientCreateOrUpdateResponse, error) {
	result := NetworkConfigurationsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkConfiguration); err != nil {
		return NetworkConfigurationsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Get - Returns a NetworkConfiguration for the target resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-03-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - options - NetworkConfigurationsClientGetOptions contains the optional parameters for the NetworkConfigurationsClient.Get
//     method.
func (client *NetworkConfigurationsClient) Get(ctx context.Context, resourceURI string, options *NetworkConfigurationsClientGetOptions) (NetworkConfigurationsClientGetResponse, error) {
	var err error
	const operationName = "NetworkConfigurationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, options)
	if err != nil {
		return NetworkConfigurationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NetworkConfigurationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NetworkConfigurationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *NetworkConfigurationsClient) getCreateRequest(ctx context.Context, resourceURI string, options *NetworkConfigurationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NetworkConfigurationsClient) getHandleResponse(resp *http.Response) (NetworkConfigurationsClientGetResponse, error) {
	result := NetworkConfigurationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkConfiguration); err != nil {
		return NetworkConfigurationsClientGetResponse{}, err
	}
	return result, nil
}

// Update - Update the endpoint to the target resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-03-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource to be connected.
//   - parameters - Network Configuration details
//   - options - NetworkConfigurationsClientUpdateOptions contains the optional parameters for the NetworkConfigurationsClient.Update
//     method.
func (client *NetworkConfigurationsClient) Update(ctx context.Context, resourceURI string, parameters NetworkConfiguration, options *NetworkConfigurationsClientUpdateOptions) (NetworkConfigurationsClientUpdateResponse, error) {
	var err error
	const operationName = "NetworkConfigurationsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceURI, parameters, options)
	if err != nil {
		return NetworkConfigurationsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NetworkConfigurationsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return NetworkConfigurationsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *NetworkConfigurationsClient) updateCreateRequest(ctx context.Context, resourceURI string, parameters NetworkConfiguration, options *NetworkConfigurationsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *NetworkConfigurationsClient) updateHandleResponse(resp *http.Response) (NetworkConfigurationsClientUpdateResponse, error) {
	result := NetworkConfigurationsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkConfiguration); err != nil {
		return NetworkConfigurationsClientUpdateResponse{}, err
	}
	return result, nil
}
