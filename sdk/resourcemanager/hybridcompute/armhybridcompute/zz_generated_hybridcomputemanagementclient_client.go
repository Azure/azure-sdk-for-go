//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridcompute

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HybridComputeManagementClient contains the methods for the HybridComputeManagementClient group.
// Don't use this type directly, use NewHybridComputeManagementClient() instead.
type HybridComputeManagementClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewHybridComputeManagementClient creates a new instance of HybridComputeManagementClient with the specified values.
func NewHybridComputeManagementClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *HybridComputeManagementClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &HybridComputeManagementClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginUpgradeExtensions - The operation to Upgrade Machine Extensions.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HybridComputeManagementClient) BeginUpgradeExtensions(ctx context.Context, resourceGroupName string, machineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *HybridComputeManagementClientBeginUpgradeExtensionsOptions) (HybridComputeManagementClientUpgradeExtensionsPollerResponse, error) {
	resp, err := client.upgradeExtensions(ctx, resourceGroupName, machineName, extensionUpgradeParameters, options)
	if err != nil {
		return HybridComputeManagementClientUpgradeExtensionsPollerResponse{}, err
	}
	result := HybridComputeManagementClientUpgradeExtensionsPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("HybridComputeManagementClient.UpgradeExtensions", "", resp, client.pl, client.upgradeExtensionsHandleError)
	if err != nil {
		return HybridComputeManagementClientUpgradeExtensionsPollerResponse{}, err
	}
	result.Poller = &HybridComputeManagementClientUpgradeExtensionsPoller{
		pt: pt,
	}
	return result, nil
}

// UpgradeExtensions - The operation to Upgrade Machine Extensions.
// If the operation fails it returns the *ErrorResponse error type.
func (client *HybridComputeManagementClient) upgradeExtensions(ctx context.Context, resourceGroupName string, machineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *HybridComputeManagementClientBeginUpgradeExtensionsOptions) (*http.Response, error) {
	req, err := client.upgradeExtensionsCreateRequest(ctx, resourceGroupName, machineName, extensionUpgradeParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.upgradeExtensionsHandleError(resp)
	}
	return resp, nil
}

// upgradeExtensionsCreateRequest creates the UpgradeExtensions request.
func (client *HybridComputeManagementClient) upgradeExtensionsCreateRequest(ctx context.Context, resourceGroupName string, machineName string, extensionUpgradeParameters MachineExtensionUpgrade, options *HybridComputeManagementClientBeginUpgradeExtensionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/upgradeExtensions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if machineName == "" {
		return nil, errors.New("parameter machineName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{machineName}", url.PathEscape(machineName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-10-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, extensionUpgradeParameters)
}

// upgradeExtensionsHandleError handles the UpgradeExtensions error response.
func (client *HybridComputeManagementClient) upgradeExtensionsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
